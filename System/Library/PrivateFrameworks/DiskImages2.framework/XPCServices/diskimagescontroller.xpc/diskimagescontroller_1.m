void sub_1000B3F64()
{
  operator new();
}

void sub_1000B3FE8()
{
}

void *sub_1000B3FFC(void *a1)
{
  *a1 = &off_1001A6930;
  sub_100019B70((uint64_t)(a1 + 8));
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_1000B404C(void *a1)
{
  *a1 = &off_1001A6930;
  sub_100019B70((uint64_t)(a1 + 8));
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_100004944(v2);
  }
  operator delete();
}

uint64_t sub_1000B40BC()
{
  return 0;
}

void sub_1000B40C4()
{
}

void sub_1000B4138()
{
}

uint64_t sub_1000B415C()
{
  return 1;
}

void sub_1000B4164()
{
}

void sub_1000B4214()
{
}

uint64_t sub_1000B4238()
{
  return -78;
}

unsigned char ***sub_1000B4240(unsigned char ***result)
{
  ***result = 1;
  return result;
}

unsigned char ***sub_1000B4254(unsigned char ***result)
{
  ***result = 0;
  return result;
}

void sub_1000B4264(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000B4264(a1, *a2);
    sub_1000B4264(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[12];
    if (v4) {
      sub_100004944(v4);
    }
    operator delete(a2);
  }
}

void sub_1000B42C4(void ***a1)
{
  v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1000B4318((uint64_t)v2, *v2);
    v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000B4318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 184;
      v6 = (std::mutex *)(v4 - 168);
      sub_1000B4264(v4 - 96, *(void **)(v4 - 88));
      std::mutex::~mutex(v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1000B437C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  v17 = a1 + 2;
  if (v9) {
    v10 = (char *)sub_1000B45AC(v7, v9);
  }
  else {
    v10 = 0;
  }
  v13 = v10;
  v14 = &v10[184 * v4];
  v16 = &v10[184 * v9];
  sub_1000B449C((uint64_t)v14, a2);
  v15 = v14 + 184;
  sub_1000B4534(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1000B47D0((uint64_t)&v13);
  return v11;
}

void sub_1000B4488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B47D0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000B449C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  v2 = (void *)(a2 + 96);
  uint64_t v3 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v3;
  uint64_t v4 = a1 + 96;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 88) = v2;
    void *v2 = 0;
    *(void *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v4;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return result;
}

uint64_t sub_1000B4534(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000B45F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1000B45AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_10004B1A4();
  }
  return operator new(184 * a2);
}

uint64_t sub_1000B45F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      sub_1000B449C(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1000B46B4((uint64_t)v12);
  return v10;
}

void sub_1000B46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B46B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000B46EC((uint64_t *)a1);
  }
  return a1;
}

void sub_1000B46EC(uint64_t *a1)
{
  v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_1000B4764(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_1000B4764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (std::mutex *)(i + 16);
    sub_1000B4264(i + 88, *(void **)(i + 96));
    std::mutex::~mutex(v6);
    uint64_t i = *(void *)(a2 + 32) + 184;
  }
}

uint64_t sub_1000B47D0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000B4808(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v5 = (std::mutex *)(i - 168);
    sub_1000B4264(i - 96, *(void **)(i - 88));
    std::mutex::~mutex(v5);
  }
}

uint64_t sub_1000B486C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B4AFC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000B48B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B4AFC(v1);
  return std::ios::~ios();
}

void sub_1000B4918(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000B4AFC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000B4980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000B49B8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000B4A20(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000B4AFC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000B4A84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000B4AFC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000B4AFC(uint64_t a1)
{
  *(void *)a1 = off_1001B20C8;
  sub_1000B4C38(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000B4C38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000B4DF8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000B4D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B4DC0(uint64_t a1)
{
  sub_1000B4AFC(a1);
  operator delete();
}

int *sub_1000B4DF8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 337;
    __int16 v22 = 2082;
    v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 337;
      __int16 v22 = 2082;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000B4FE0(uint64_t a1, uint64_t a2)
{
  sub_100116D94((uint64_t)&v15, a2);
  int v4 = v15;
  long long v9 = v20;
  long long v10 = v21;
  long long v11 = v22;
  long long v12 = v23;
  long long v5 = v16;
  long long v6 = v17;
  long long v7 = v18;
  long long v8 = v19;
  sub_100116EB4((uint64_t)&v4, (uint64_t)v13);
  int v4 = &v14;
  *(void *)&long long v5 = (unint64_t)HIDWORD(v15) >> 3;
  sub_10002CF3C(a1, (uint64_t)&v4);
  return a1;
}

uint64_t sub_1000B50C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
    unint64_t v3 = *(void *)a3;
  }
  else {
    unint64_t v3 = *(void *)a3 + 1;
  }
  long long v5 = (_OWORD *)(a2 + 144);
  int v4 = *(void **)(a2 + 144);
  long long v6 = *(void **)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      unint64_t v8 = v6[4];
      if ((v6[6] & 2) == 0) {
        ++v8;
      }
      if (v8 >= v3) {
        break;
      }
      long long v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          long long v6 = v10;
        }
        while (!v11);
      }
      long long v6 = v10;
      if (v10 == v4) {
        goto LABEL_29;
      }
    }
  }
  if (v6 == v4)
  {
LABEL_29:
    int v17 = *(_DWORD *)(a2 + 80);
    *(void *)(result + 96) = 0;
    *(void *)(result + 16) = 850045863;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0;
    *(_DWORD *)(result + 80) = v17;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = result + 96;
    *(_OWORD *)(result + 112) = *v5;
    *(_OWORD *)(result + 128) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(unsigned char *)(result + 168) = 0;
    long long v6 = *(void **)(result + 112);
    if (v6 == *(void **)(result + 144)) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  long long v12 = v6;
  while (1)
  {
    unint64_t v13 = v12[4];
    if ((v12[6] & 2) == 0) {
      ++v13;
    }
    if (v13 > (unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1) {
      break;
    }
    uint64_t v14 = (void *)v12[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v12[2];
        BOOL v11 = *v15 == (void)v12;
        long long v12 = v15;
      }
      while (!v11);
    }
    long long v12 = v15;
    if (v15 == v4)
    {
      long long v12 = *(void **)(a2 + 144);
      break;
    }
  }
  int v16 = *(_DWORD *)(a2 + 80);
  *(void *)(result + 96) = 0;
  *(void *)(result + 16) = 850045863;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v16;
  *(void *)(result + 88) = result + 96;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 128) = v6;
  *(void *)(result + 136) = v7;
  *(void *)(result + 144) = v12;
  *(void *)(result + 152) = v7;
  *(unsigned char *)(result + 168) = 0;
  if (v6 != v12)
  {
LABEL_30:
    char v18 = *((unsigned char *)v6 + 48);
    uint64_t v19 = v6[4];
    if ((v18 & 2) == 0) {
      ++v19;
    }
    *(void *)(result + 160) = v19;
  }
LABEL_33:
  *(unsigned char *)(result + 176) = 0;
  return result;
}

uint64_t sub_1000B5280(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    sub_1000B5340((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_1000B5314(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1000B5340(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10004B570();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)sub_10004B588(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    BOOL v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1000B53E8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        int64_t v5 = (std::__shared_weak_count *)v4[2];
        if (v5) {
          sub_100004944(v5);
        }
        uint64_t v6 = *v4;
        uint64_t *v4 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        operator delete();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1000B54B0(uint64_t a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0x90uLL);
  sub_1000B5544(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10001CC0C((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1000B5530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000B5544(void *a1, uint64_t a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019F128;
  sub_100149AAC(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_1000B5598(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000B55AC(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(unsigned char *)(a1 + 152) = 1;
  sub_1000B4264(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1000B5608(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000B568C(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_1000B56B8((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_1000B56A4(_Unwind_Exception *a1)
{
}

void sub_1000B56B8(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  int64_t v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10004B570();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_10004B588(v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 8);
    int v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = *(char **)(v3 + 8);
    }
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int64_t v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_1000B57CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000B57E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000B581C(uint64_t a1)
{
}

uint64_t sub_1000B5844(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B2188)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000B5888(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B20C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000B5904(_Unwind_Exception *a1)
{
}

_OWORD *sub_1000B5918(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  long long v5 = (void **)sub_1000B59C8((uint64_t)a1, &v10, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x70uLL);
    v6[2] = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 24);
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((void *)v6 + 7) = v8;
    v6[4] = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 10) = *(void *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *((void *)v6 + 13) = *(void *)(a3 + 72);
    sub_10000CAA0(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1000B59C8(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_100022410(a3, v4 + 4)) {
          break;
        }
        char v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_100022410(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      char v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1000B5A5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000B5B30((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      unint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          sub_100004944(*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000B5B0C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000B5B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v10 = a5;
    do
    {
      *(void *)uint64_t v10 = *(void *)a7;
      long long v11 = *(_OWORD *)(a7 + 8);
      *(void *)(v10 + 24) = *(void *)(a7 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a7 + 32) = 0;
      *(void *)(a7 + 40) = 0;
      *(void *)(v10 + 48) = *(void *)(a7 + 48);
      a7 += 56;
      v10 += 56;
      --v9;
    }
    while (v9);
  }
  if (a3 != a4)
  {
    uint64_t v12 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v12 = *(void *)a3;
      long long v13 = *(_OWORD *)(a3 + 8);
      *(void *)(v12 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 32) = result;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(v12 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v12 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

void sub_1000B5C08(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000B5CBC((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  long long v13 = operator new(56 * v11);
  sub_1000B5D40(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000B5CBC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x249249249249249;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x249249249249249 - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x249249249249249) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000B5D40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000B5E14((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 40);
      do
      {
        if (*v12) {
          sub_100004944(*v12);
        }
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000B5DF0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000B5E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    long long v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + 8) = v7;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    a5 += 56;
    a2 += 56;
  }
  *(void *)a5 = *(void *)a7;
  long long v8 = *(_OWORD *)(a7 + 8);
  *(void *)(a5 + 24) = *(void *)(a7 + 24);
  *(_OWORD *)(a5 + 8) = v8;
  __n128 result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(void *)(a7 + 32) = 0;
  *(void *)(a7 + 40) = 0;
  *(void *)(a5 + 48) = *(void *)(a7 + 48);
  if (a3 != a4)
  {
    uint64_t v10 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      long long v11 = *(_OWORD *)(a3 + 8);
      *(void *)(v10 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(v10 + 48) = *(void *)(a3 + 48);
      a3 += 56;
      v10 += 56;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t *sub_1000B5ED0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000CF8C(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[12];
  if (v4) {
    sub_100004944(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_1000B5F10(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001B21A8;
  sub_10005385C(a1 + 24, a1);
  *(void *)(a1 + 560) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 568) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 576) = 850045863;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  sub_100004890(&__p, "com.apple.diskimages.band_unmap");
  sub_10004CD30();
  sub_100055B5C((void *)(a1 + 640));
  if (v10 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_1000B6360(a1);
  *(void *)(a1 + 64) = *(void *)(*(void *)(a1 + 560) + 128);
  *(void *)(a1 + 72) = a3;
  sub_1000B6430((uint64_t *)(a1 + 712), *(void *)(a1 + 16));
  if (*(void *)(a1 + 16)) {
    operator new();
  }
  *(void *)&long long v7 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((void *)&v7 + 1) = 44;
  int v8 = 0;
  sub_1000B64E4(&__p, &v7);
  sub_1000039A0(v11, (uint64_t)"Initialized bands array of size ", 32);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_1000BC150((uint64_t)&__p);
  std::ios::~ios();
  sub_100080AE8();
}

void sub_1000B62C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1000BC634((void ***)&__p);
  sub_10000F990(v20);
  std::mutex::~mutex(v19);
  long long v22 = *(std::__shared_weak_count **)(v17 + 568);
  if (v22) {
    sub_100004944(v22);
  }
  sub_1000BC6B8(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6360(uint64_t a1)
{
  uint64_t result = sub_1000B6650();
  if (result)
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((void *)&v4 + 1) = 44;
    int v5 = 0;
    sub_1000B66E4(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000BCA68((uint64_t)v6);
    uint64_t result = std::ios::~ios();
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 64;
  }
  *(void *)(a1 + 16) = v3;
  return result;
}

void sub_1000B641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B6808((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6430(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_10004B570();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100062C0C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1000BBC5C(a1, v7);
    return sub_1000BBD68((uint64_t)v7);
  }
  return result;
}

void sub_1000B64D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BBD68((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B64E4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CACA0((uint64_t)a1, a2);
  *a1 = off_1001B2350;
  a1[45] = &off_1001B2450;
  a1[46] = &off_1001B2478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2350;
  a1[45] = off_1001B23D8;
  a1[46] = off_1001B2400;
  return a1;
}

void sub_1000B65E4(_Unwind_Exception *a1)
{
  sub_1000BC150(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6608(uint64_t a1)
{
  return a1;
}

BOOL sub_1000B6650()
{
  sub_100127B80();
  unint64_t v0 = v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)__p[1];
  }
  if (v0 == 5)
  {
    uint64_t v1 = (void **)__p[0];
    if ((v8 & 0x80u) == 0) {
      uint64_t v1 = __p;
    }
    int v2 = *(_DWORD *)v1;
    int v3 = *((unsigned __int8 *)v1 + 4);
    BOOL v5 = v2 == 1718642273 && v3 == 115;
    if ((char)v8 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v5 = 0;
    if ((char)v8 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v5;
}

void *sub_1000B66E4(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000CAD30((uint64_t)a1, a2);
  *a1 = off_1001B2570;
  a1[45] = &off_1001B2670;
  a1[46] = &off_1001B2698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2570;
  a1[45] = off_1001B25F8;
  a1[46] = off_1001B2620;
  return a1;
}

void sub_1000B67E4(_Unwind_Exception *a1)
{
  sub_1000BCA68(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6808(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B684C(uint64_t a1)
{
  unsigned int v10 = 0;
  sub_100055E98(a1 + 352, 0, (uint64_t)v11);
  uint64_t v2 = *(void *)(a1 + 712);
  uint64_t v3 = *(void *)(a1 + 720);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    do
    {
      sub_10008C9C0(&v8, v2);
      if (v9 && (*(unsigned char *)(v9 + 68) & 1) != 0)
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 1174405120;
        v6[2] = sub_1000B69C0;
        v6[3] = &unk_1001B2268;
        sub_10008C9C0(v7, &v8);
        v7[3] = &v10;
        sub_100055C7C(v11, v6);
        ++v4;
        sub_10008C8FC(v7);
      }
      sub_10008C8FC(&v8);
      v2 += 24;
    }
    while (v2 != v3);
  }
  sub_100055E14(v11);
  return atomic_load(&v10);
}

void sub_1000B69B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000B69C0(uint64_t a1)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((void *)&v3 + 1) = 47;
    int v4 = 2;
    sub_1000B6A90(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"Flushing ", 9);
    sub_10008C7D8(v6);
    std::ostream::~ostream();
    sub_1000BD1DC((uint64_t)v5);
    std::ios::~ios();
  }
  uint64_t result = sub_10008C534(*(void *)(a1 + 40));
  if (result) {
    atomic_store(result, *(unsigned int **)(a1 + 56));
  }
  return result;
}

void sub_1000B6A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B6BB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B6A90(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CADC0((uint64_t)a1, a2);
  *a1 = off_1001B2790;
  a1[45] = &off_1001B2890;
  a1[46] = &off_1001B28B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2790;
  a1[45] = off_1001B2818;
  a1[46] = off_1001B2840;
  return a1;
}

void sub_1000B6B90(_Unwind_Exception *a1)
{
  sub_1000BD1DC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6BB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B6BF8(uint64_t a1, uint64_t a2)
{
  return sub_10008C9C0(a1 + 32, a2 + 32);
}

void *sub_1000B6C04(uint64_t a1)
{
  return sub_10008C8FC((void *)(a1 + 32));
}

uint64_t sub_1000B6C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 2;
    sub_1000B6E60(v9, &v7);
    sub_1000039A0(v10, (uint64_t)"Starting flush", 14);
    std::ostream::~ostream();
    sub_1000BD950((uint64_t)v9);
    std::ios::~ios();
  }
  std::mutex::lock((std::mutex *)(a1 + 576));
  sub_100052C28(a1 + 80);
  uint64_t v5 = sub_1000B684C(a1);
  sub_100052C38(a1 + 80);
  if (v5)
  {
    *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + 1) = 32;
    int v8 = 16;
    sub_10002996C(v9, &v7);
    sub_1000039A0(v10, (uint64_t)"Flush failed - returning ", 25);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10002A20C((uint64_t)v9);
    std::ios::~ios();
  }
  else
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((void *)&v7 + 1) = 32;
      int v8 = 2;
      sub_1000B6FC8(v9, &v7);
      std::ostream::operator<<();
      sub_1000039A0(v10, (uint64_t)" bands flushed, calling ", 24);
      sub_10014907C(v10, a3);
      std::ostream::~ostream();
      sub_1000BE0C4((uint64_t)v9);
      std::ios::~ios();
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 16))(*(void *)(a1 + 560), a3);
  }
  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_1000B6E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void *sub_1000B6E60(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CAE50((uint64_t)a1, a2);
  *a1 = off_1001B29B0;
  a1[45] = &off_1001B2AB0;
  a1[46] = &off_1001B2AD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B29B0;
  a1[45] = off_1001B2A38;
  a1[46] = off_1001B2A60;
  return a1;
}

void sub_1000B6F60(_Unwind_Exception *a1)
{
  sub_1000BD950(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6F84(uint64_t a1)
{
  return a1;
}

void *sub_1000B6FC8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CAEE0((uint64_t)a1, a2);
  *a1 = off_1001B2BD0;
  a1[45] = &off_1001B2CD0;
  a1[46] = &off_1001B2CF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2BD0;
  a1[45] = off_1001B2C58;
  a1[46] = off_1001B2C80;
  return a1;
}

void sub_1000B70C8(_Unwind_Exception *a1)
{
  sub_1000BE0C4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B70EC(uint64_t a1)
{
  return a1;
}

void *sub_1000B7130@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  if (a3) {
    int v9 = v8 | 0x200;
  }
  else {
    int v9 = v8;
  }
  sub_1000B72E0(a1, a2, &v11);
  if (v12)
  {
LABEL_10:
    sub_10008C9C4((uint64_t)a4, (uint64_t)&v11);
  }
  else
  {
    while (!sub_100052CBC(a1 + 208, a2))
    {
      sub_10008C8FC(&v11);
      sub_1000B72E0(a1, a2, &v11);
      if (v12) {
        goto LABEL_10;
      }
    }
    sub_1000B7538(a1, a2, v9, a4);
  }
  return sub_10008C8FC(&v11);
}

std::chrono::steady_clock::time_point sub_1000B72E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::chrono::steady_clock::time_point **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 712);
  while (*(void *)(v7 + 16) != a2)
  {
    ++v6;
    v7 += 24;
    if (v4 == v6) {
      goto LABEL_14;
    }
  }
  sub_10008C9C0(a3, v7);
  int v8 = a3[1];
  if (!v8 || v8[4].__d_.__rep_ != a2)
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((void *)&v10 + 1) = 41;
      int v11 = 2;
      sub_1000B8110(v12, &v10);
      sub_1000039A0(v13, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v13, (uint64_t)" changed before retain completed", 32);
      std::ostream::~ostream();
      sub_1000BFE94((uint64_t)v12);
      std::ios::~ios();
    }
    sub_10008C8FC(a3);
LABEL_14:
    operator new();
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v10 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((void *)&v10 + 1) = 41;
    int v11 = 2;
    sub_1000B7FA8(v12, &v10);
    sub_1000039A0(v13, (uint64_t)"Found ", 6);
    sub_10008C7D8(v13);
    sub_1000039A0(v13, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000BF720((uint64_t)v12);
    std::ios::~ios();
  }
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*a3)[2].__d_.__rep_ = result.__d_.__rep_;
  return result;
}

void sub_1000B7538(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  if (sub_1000D8524())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    sub_10008C2AC(v13, &v11);
    sub_1000039A0(v14, (uint64_t)"Opening band ", 13);
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v14[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v14[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_100091884((uint64_t)v13);
    std::ios::~ios();
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  v9[2] = sub_1000B78C0;
  v9[3] = &unk_1001B22A0;
  v9[4] = &v15;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  sub_100053860(a1 + 24, (uint64_t)v9);
  sub_1000B7904(a1, (std::chrono::steady_clock::time_point *)v16[3], a4);
  if (!a4[1])
  {
    uint64_t v8 = 0;
    do
    {
      if (!v8 && sub_1000D8524())
      {
        *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((void *)&v11 + 1) = 32;
        int v12 = 2;
        sub_1000B7E40(v13, &v11);
        sub_1000039A0(v14, (uint64_t)"Failed to evict band to make room for ", 38);
        sub_10008C7D8(v14);
        sub_1000039A0(v14, (uint64_t)", retrying", 10);
        std::ostream::~ostream();
        sub_1000BEFAC((uint64_t)v13);
        std::ios::~ios();
      }
      usleep(0x3E8u);
      sub_10008C8FC(a4);
      ++v8;
      sub_1000B7904(a1, (std::chrono::steady_clock::time_point *)v16[3], a4);
    }
    while (!a4[1]);
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32;
    int v12 = 2;
    sub_1000B7CD8(v13, &v11);
    sub_10008C7D8(v14);
    sub_1000039A0(v14, (uint64_t)" opened and replaced at attempt ", 32);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000BE838((uint64_t)v13);
    std::ios::~ios();
  }
  _Block_object_dispose(&v15, 8);
}

void sub_1000B7858(_Unwind_Exception *a1)
{
  sub_10008C8FC(v1);
  _Block_object_dispose((const void *)(v2 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000B78C0(uint64_t a1)
{
}

void sub_1000B7904(uint64_t a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = v22;
  __p = v22;
  long long v21 = xmmword_100173760;
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = atomic_load(*(unint64_t **)(*(void *)(a1 + 712) + v7));
      if (v9 == 1)
      {
        *(void *)&v18[0] = *(void *)(*(void *)(*(void *)(a1 + 712) + v7) + 16);
        *((void *)&v18[0] + 1) = v8;
        int v10 = (char *)__p + 16 * v21;
        if ((void)v21 == *((void *)&v21 + 1))
        {
          sub_1000CB1B0(&__p, v10, 1, v18, &v16);
        }
        else
        {
          *(_OWORD *)int v10 = v18[0];
          *(void *)&long long v21 = v21 + 1;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v8 < *(void *)(a1 + 16));
    uint64_t v6 = __p;
    long long v11 = (char *)__p + 16 * v21;
    if ((void)v21)
    {
      uint64_t v12 = 126 - 2 * __clz(v21);
      goto LABEL_13;
    }
  }
  else
  {
    long long v11 = v22;
  }
  uint64_t v12 = 0;
LABEL_13:
  sub_1000C0378((uint64_t)v6, v11, (uint64_t)v18, v12, 1);
  if (sub_1000D8524())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    sub_1000B8278(v18, &v16);
    sub_1000039A0(v19, (uint64_t)"Looking for an evictable slot for ", 34);
    sub_10008C7D8(v19);
    std::ostream::~ostream();
    sub_1000C1824((uint64_t)v18);
    std::ios::~ios();
  }
  if (!(void)v21) {
LABEL_21:
  }
    operator new();
  uint64_t v13 = (uint64_t *)((char *)__p + 8);
  uint64_t v14 = 16 * v21;
  while (1)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    sub_10008CA30((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + 24 * v15), a2, (uint64_t)a3);
    if (a3[1]) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((void *)&v16 + 1) = 42;
      int v17 = 2;
      sub_1000B8548(v18, &v16);
      sub_1000039A0(v19, (uint64_t)"Failed placing new ", 19);
      sub_10008C7D8(v19);
      sub_1000039A0(v19, (uint64_t)" at index ", 10);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000C270C((uint64_t)v18);
      std::ios::~ios();
    }
    sub_10008C8FC(a3);
    v14 -= 16;
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v16 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v16 + 1) = 42;
    int v17 = 2;
    sub_1000B83E0(v18, &v16);
    sub_1000039A0(v19, (uint64_t)"Placed new ", 11);
    sub_10008C7D8(v19);
    sub_1000039A0(v19, (uint64_t)" at index ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000C1F98((uint64_t)v18);
    std::ios::~ios();
  }
  sub_100053278(a1 + 208, a2[4].__d_.__rep_, 1);
  if (*((void *)&v21 + 1) && v22 != __p) {
    operator delete(__p);
  }
}

void sub_1000B7CC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_1000B7CD8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CAF70((uint64_t)a1, a2);
  *a1 = off_1001B2DF0;
  a1[45] = &off_1001B2EF0;
  a1[46] = &off_1001B2F18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B2DF0;
  a1[45] = off_1001B2E78;
  a1[46] = off_1001B2EA0;
  return a1;
}

void sub_1000B7DD8(_Unwind_Exception *a1)
{
  sub_1000BE838(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7DFC(uint64_t a1)
{
  return a1;
}

void *sub_1000B7E40(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB000((uint64_t)a1, a2);
  *a1 = off_1001B3010;
  a1[45] = &off_1001B3110;
  a1[46] = &off_1001B3138;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3010;
  a1[45] = off_1001B3098;
  a1[46] = off_1001B30C0;
  return a1;
}

void sub_1000B7F40(_Unwind_Exception *a1)
{
  sub_1000BEFAC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7F64(uint64_t a1)
{
  return a1;
}

void *sub_1000B7FA8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB090((uint64_t)a1, a2);
  *a1 = off_1001B3230;
  a1[45] = &off_1001B3330;
  a1[46] = &off_1001B3358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3230;
  a1[45] = off_1001B32B8;
  a1[46] = off_1001B32E0;
  return a1;
}

void sub_1000B80A8(_Unwind_Exception *a1)
{
  sub_1000BF720(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B80CC(uint64_t a1)
{
  return a1;
}

void *sub_1000B8110(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB120((uint64_t)a1, a2);
  *a1 = off_1001B3450;
  a1[45] = &off_1001B3550;
  a1[46] = &off_1001B3578;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3450;
  a1[45] = off_1001B34D8;
  a1[46] = off_1001B3500;
  return a1;
}

void sub_1000B8210(_Unwind_Exception *a1)
{
  sub_1000BFE94(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8234(uint64_t a1)
{
  return a1;
}

void *sub_1000B8278(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB39C((uint64_t)a1, a2);
  *a1 = off_1001B3670;
  a1[45] = &off_1001B3770;
  a1[46] = &off_1001B3798;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3670;
  a1[45] = off_1001B36F8;
  a1[46] = off_1001B3720;
  return a1;
}

void sub_1000B8378(_Unwind_Exception *a1)
{
  sub_1000C1824(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B839C(uint64_t a1)
{
  return a1;
}

void *sub_1000B83E0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB42C((uint64_t)a1, a2);
  *a1 = off_1001B3890;
  a1[45] = &off_1001B3990;
  a1[46] = &off_1001B39B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3890;
  a1[45] = off_1001B3918;
  a1[46] = off_1001B3940;
  return a1;
}

void sub_1000B84E0(_Unwind_Exception *a1)
{
  sub_1000C1F98(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8504(uint64_t a1)
{
  return a1;
}

void *sub_1000B8548(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB4BC((uint64_t)a1, a2);
  *a1 = off_1001B3AB0;
  a1[45] = &off_1001B3BB0;
  a1[46] = &off_1001B3BD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3AB0;
  a1[45] = off_1001B3B38;
  a1[46] = off_1001B3B60;
  return a1;
}

void sub_1000B8648(_Unwind_Exception *a1)
{
  sub_1000C270C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B866C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B86B0(uint64_t a1)
{
  *(void *)a1 = off_1001B21A8;
  *(void *)&long long v8 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((void *)&v8 + 1) = 45;
  int v9 = 0;
  sub_1000B8860(v10, &v8);
  sub_1000039A0(v11, (uint64_t)"Closing bands", 13);
  std::ostream::~ostream();
  sub_1000C2E80((uint64_t)v10);
  std::ios::~ios();
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      if (*(void *)(*(void *)(a1 + 712) + v4))
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 0x40000000;
        v7[2] = sub_1000B89C8;
        v7[3] = &unk_1001B22C0;
        void v7[4] = a1;
        void v7[5] = v3;
        sub_100055C7C((dispatch_group_t *)(a1 + 416), v7);
        unint64_t v2 = *(void *)(a1 + 16);
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < v2);
  }
  sub_100055DC4(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  v10[0] = (void **)(a1 + 712);
  sub_1000BC634(v10);
  v10[0] = (void **)(a1 + 664);
  sub_10000F9FC(v10);
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 576));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 568);
  if (v5) {
    sub_100004944(v5);
  }
  sub_1000BC6B8(a1 + 24);
  return a1;
}

void *sub_1000B8860(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB54C((uint64_t)a1, a2);
  *a1 = off_1001B3CD0;
  a1[45] = &off_1001B3DD0;
  a1[46] = &off_1001B3DF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3CD0;
  a1[45] = off_1001B3D58;
  a1[46] = off_1001B3D80;
  return a1;
}

void sub_1000B8960(_Unwind_Exception *a1)
{
  sub_1000C2E80(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8984(uint64_t a1)
{
  return a1;
}

void sub_1000B89C8()
{
  if (sub_1000D8524())
  {
    *(void *)&long long v0 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v0 + 1) = 45;
    int v1 = 2;
    sub_1000B8B78(&v2, &v0);
    sub_1000039A0(v3, (uint64_t)"Background close of band at index ", 34);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000C35F4((uint64_t)&v2);
    std::ios::~ios();
  }
  operator new();
}

void sub_1000B8B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000B8E04((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B8B78(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB5DC((uint64_t)a1, a2);
  *a1 = off_1001B3EF0;
  a1[45] = &off_1001B3FF0;
  a1[46] = &off_1001B4018;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B3EF0;
  a1[45] = off_1001B3F78;
  a1[46] = off_1001B3FA0;
  return a1;
}

void sub_1000B8C78(_Unwind_Exception *a1)
{
  sub_1000C35F4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8C9C(uint64_t a1)
{
  return a1;
}

void *sub_1000B8CE0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB66C((uint64_t)a1, a2);
  *a1 = off_1001B4110;
  a1[45] = &off_1001B4210;
  a1[46] = &off_1001B4238;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4110;
  a1[45] = off_1001B4198;
  a1[46] = off_1001B41C0;
  return a1;
}

void sub_1000B8DE0(_Unwind_Exception *a1)
{
  sub_1000C3D68(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8E04(uint64_t a1)
{
  return a1;
}

void sub_1000B8E4C(uint64_t a1)
{
  sub_1000B86B0(a1);
  operator delete();
}

size_t sub_1000B8E84(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 64);
  size_t v10 = a4[2];
  unint64_t v9 = a4[3];
  unint64_t v11 = v9 / v8;
  unint64_t v22 = v8;
  unint64_t v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v22 - v12) {
      size_t v13 = v22 - v12;
    }
    else {
      size_t v13 = v10;
    }
    uint64_t v14 = a4[4];
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    uint64_t v33 = *a4 + v7;
    v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v35 = v13;
    unint64_t v36 = v12;
    uint64_t v37 = v14 - v7;
    char v38 = 0;
    sub_1000B7130(a1, v11, a3, &v31);
    uint64_t v16 = v32;
    if (v32)
    {
      uint64_t v17 = *(void *)(v31 + 24);
      if (!*(void *)(*(void *)(a2 + 16) + 16 * v17)) {
        goto LABEL_12;
      }
      if (sub_1000B9454(*(void *)(*(void *)(a2 + 16) + 16 * v17)))
      {
        uint64_t v16 = v32;
LABEL_12:
        sub_10008C450(v16, v39);
      }
      sub_100042770(&v33, v39);
      uint64_t v18 = *(void **)(*(void *)(a2 + 16) + 16 * v17);
      sub_1000414AC((uint64_t)v40, (uint64_t)&v28);
      sub_1000411FC((uint64_t)v40, (uint64_t)v25);
      if (a3) {
        uint64_t v19 = sub_100004AC0(v18);
      }
      else {
        uint64_t v19 = sub_100003758((uint64_t)v18);
      }
      size_t v4 = v19;
      if (v27) {
        sub_100004944(v27);
      }
      if (v26) {
        sub_100004944(v26);
      }
      if (v30) {
        sub_100004944(v30);
      }
      if (*((void *)&v28 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
      }
      sub_1000049B8(v39);
      if (v4 != v13)
      {
        char v20 = 0;
        goto LABEL_31;
      }
      size_t v4 = v13;
    }
    else
    {
      if (sub_1000D8524())
      {
        *(void *)&long long v28 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((void *)&v28 + 1) = 33;
        int v29 = 2;
        sub_1000B94EC(v39, &v28);
        sub_1000039A0(v41, (uint64_t)"Band ", 5);
        *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1]
                                                                              + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1]
                                                                              + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 2;
        sub_1000039A0(v41, (uint64_t)" doesn't exist, returning zeros", 31);
        std::ostream::~ostream();
        sub_1000C44DC((uint64_t)v39);
        std::ios::~ios();
      }
      bzero((void *)(*a4 + v7), v13);
    }
    unint64_t v12 = 0;
    v10 -= v13;
    v7 += v13;
    ++v11;
    char v20 = 1;
LABEL_31:
    sub_10008C8FC(&v31);
    if (v34) {
      sub_100004944(v34);
    }
    if ((v20 & 1) == 0) {
      return v4;
    }
  }
  return a4[2];
}

void sub_1000B91D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sub_10008C8FC(&a56);
    if (a60) {
      sub_100004944((std::__shared_weak_count *)a60);
    }
    if (a2 == 2)
    {
      v67 = __cxa_begin_catch(a1);
      *(void *)&a37 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((void *)&a37 + 1) = 33;
      a38 = 16;
      sub_1000B9654(&a65, &a37);
      if (a16) {
        v68 = "Write error: ";
      }
      else {
        v68 = "Read error: ";
      }
      if (a16) {
        uint64_t v69 = 13;
      }
      else {
        uint64_t v69 = 12;
      }
      sub_1000039A0(&STACK[0x328], (uint64_t)v68, v69);
      v70 = (const char *)(*(uint64_t (**)(void *))(*(void *)v67 + 16))(v67);
      size_t v71 = strlen(v70);
      sub_1000039A0(&STACK[0x328], (uint64_t)v70, v71);
      sub_1000039A0(&STACK[0x328], (uint64_t)" (band ", 7);
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&STACK[0x328] + *(void *)(STACK[0x328] - 24) + 8) = *(_DWORD *)((unsigned char *)&STACK[0x328]
                                                                                          + *(void *)(STACK[0x328] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      sub_1000039A0(&STACK[0x328], (uint64_t)", err ", 6);
      std::ostream::operator<<();
      sub_1000039A0(&STACK[0x328], (uint64_t)")", 1);
      sub_1000B9778((uint64_t)&a65);
      __cxa_end_catch();
      JUMPOUT(0x1000B9194);
    }
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000B9444(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000B9434);
  }
  JUMPOUT(0x1000B92ACLL);
}

uint64_t sub_1000B9454(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (!v2
  {
    return 0;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  uint64_t v4 = 1;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_100004944(v3);
  }
  return v4;
}

void *sub_1000B94EC(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB6FC((uint64_t)a1, a2);
  *a1 = off_1001B4330;
  a1[45] = &off_1001B4430;
  a1[46] = &off_1001B4458;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4330;
  a1[45] = off_1001B43B8;
  a1[46] = off_1001B43E0;
  return a1;
}

void sub_1000B95EC(_Unwind_Exception *a1)
{
  sub_1000C44DC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B9610(uint64_t a1)
{
  return a1;
}

void *sub_1000B9654(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CB78C((uint64_t)a1, a2);
  *a1 = off_1001B4550;
  a1[45] = &off_1001B4650;
  a1[46] = &off_1001B4678;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4550;
  a1[45] = off_1001B45D8;
  a1[46] = off_1001B4600;
  return a1;
}

void sub_1000B9754(_Unwind_Exception *a1)
{
  sub_1000C4C50(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B9778(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B97BC(uint64_t a1)
{
  unsigned int v5 = 0;
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 704);
  v4[0] = a1;
  v4[1] = &v5;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v7 = v4;
    uint64_t v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_1000CB81C);
  }
  return v5;
}

size_t sub_1000B9824(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = sub_1000B97BC(a1);
  if (v6)
  {
    if (v6 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = -v6;
    }
    return -v7;
  }
  else
  {
    size_t v9 = sub_1000B8E84(a1, a2, 1, a3);
    size_t v8 = v9;
    if ((v9 & 0x8000000000000000) != 0 && v9) {
      sub_1000B98A4(a2);
    }
  }
  return v8;
}

uint64_t sub_1000B98A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)&long long v3 = "DiskImage::terminate()";
  *((void *)&v3 + 1) = 20;
  int v4 = 16;
  sub_1000C5134(v5, &v3);
  sub_1000039A0(v6, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75);
  std::ostream::~ostream();
  sub_1000C532C((uint64_t)v5);
  std::ios::~ios();
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return sub_10014B94C();
}

void sub_1000B9944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  sub_1000C532C((uint64_t)va);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

unint64_t sub_1000B9974(void **a1)
{
  unint64_t v2 = (*(uint64_t (**)(void *))(*a1[70] + 40))(a1[70]);
  if (v2 % ((uint64_t (*)(void **))(*a1)[3])(a1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Size is not a multiple of block size", 0x16u);
  }
  return v2 / ((uint64_t (*)(void **))(*a1)[3])(a1);
}

uint64_t sub_1000B9A54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_10008C9C0(&v10, *(void *)(a1 + 712) + 24 * a2);
  BOOL v8 = v11 != 0;
  if (v11 && sub_10008B3AC(v11, a4))
  {
    sub_10008C8FC(&v10);
    return sub_10008D28C(*(void *)(a1 + 712) + 24 * a2, a3);
  }
  else
  {
    sub_10008C8FC(&v10);
  }
  return v8;
}

void sub_1000B9AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10008C8FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B9B0C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 208;
  uint64_t v7 = sub_100052CBC(a1 + 208, a2);
  if (v7)
  {
    uint64_t v8 = a1 + 24;
    if (sub_1000CC2B0(a3) != *(void *)(a1 + 64))
    {
      if (sub_1000D8524())
      {
        *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v10 + 1) = 58;
        int v11 = 2;
        sub_10008D868(&v12, &v10);
        sub_1000039A0(v13, (uint64_t)"Unmapping band ", 15);
        *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                              + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                              + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
        sub_1000039A0(v13, (uint64_t)" directly (without list)", 24);
        std::ostream::~ostream();
        sub_100094F14((uint64_t)&v12);
        std::ios::~ios();
      }
      sub_100145F24((uint64_t)&v12, v8);
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v10 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
      *((void *)&v10 + 1) = 58;
      int v11 = 2;
      sub_10008D700(&v12, &v10);
      sub_1000039A0(v13, (uint64_t)"Unmapping band ", 15);
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) = *(_DWORD *)((unsigned char *)&v13[1]
                                                                            + *(void *)(v13[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v13, (uint64_t)" completely", 11);
      std::ostream::~ostream();
      sub_1000947A0((uint64_t)&v12);
      std::ios::~ios();
    }
    sub_10008B5FC(v8, a2);
    sub_10005331C(v6, a2);
  }
  return v7;
}

void sub_1000B9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2 == 1)
  {
    uint64_t v14 = __cxa_begin_catch(exception_object);
    sub_10005331C(v13, v12);
    exception = __cxa_allocate_exception(0x40uLL);
    sub_1000B9FB8((uint64_t)exception, (uint64_t)v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B9F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_1000B9FB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1001C3DE8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1000C5AA0(a1 + 24, (long long *)(a2 + 24));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_1000BA018(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BA02C(uint64_t a1, unint64_t a2, void *a3)
{
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)(*(void *)(a1 + 712) + 16);
      while (1)
      {
        uint64_t v9 = *v8;
        v8 += 3;
        if (v9 == a2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
      if (v7 < 0) {
        break;
      }
      uint64_t result = sub_1000B9A54(a1, v7, a2, a3);
      if (result) {
        return result;
      }
      usleep(0x3E8u);
    }
LABEL_9:
    uint64_t result = sub_1000B9B0C(a1, a2, a3);
  }
  while (!result);
  return result;
}

uint64_t sub_1000BA0C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v37 + 1) = 32;
    int v38 = 2;
    sub_1000BA928(&v30, &v37);
    sub_1000039A0(v36, (uint64_t)"Starting unmap of ", 18);
    std::ostream::operator<<();
    sub_1000039A0(v36, (uint64_t)" extents", 8);
    std::ostream::~ostream();
    sub_1000C5DD8((uint64_t)&v30);
    std::ios::~ios();
  }
  unint64_t v6 = a1[8];
  unsigned int v29 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  if (a1[43])
  {
    uint64_t v7 = sub_1000B97BC((uint64_t)a1);
    if (!v7)
    {
      sub_100055E98((uint64_t)(a1 + 80), 0, (uint64_t)&v37);
      if (a4)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v20 = a3;
        do
        {
          uint64_t v10 = *(void *)(a3 + 16 * v8);
          uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
          uint64_t v22 = v8;
          uint64_t v12 = *(void *)(a3 + 16 * v8 + 8);
          unint64_t v23 = v11 * v10;
          unint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v12;
          if (sub_1000D8524())
          {
            *(void *)&long long v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((void *)&v25 + 1) = 32;
            int v26 = 2;
            sub_1000BABF8(&v30, &v25);
            sub_1000039A0(v36, (uint64_t)"Extent ", 7);
            std::ostream::operator<<();
            sub_1000039A0(v36, (uint64_t)": [", 3);
            uint64_t v14 = v36[0];
            *(_DWORD *)((char *)&v36[1] + *(void *)(v36[0] - 24)) |= 0x200u;
            *(_DWORD *)((char *)&v36[1] + *(void *)(v14 - 24)) = *(_DWORD *)((unsigned char *)&v36[1] + *(void *)(v14 - 24)) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
            sub_1000039A0(v36, (uint64_t)"-", 1);
            std::ostream::operator<<();
            sub_1000039A0(v36, (uint64_t)"]", 1);
            uint64_t v15 = v36[0];
            *(_DWORD *)((char *)&v36[1] + *(void *)(v36[0] - 24)) &= ~0x200u;
            *(_DWORD *)((char *)&v36[1] + *(void *)(v15 - 24)) = *(_DWORD *)((unsigned char *)&v36[1] + *(void *)(v15 - 24)) & 0xFFFFFFB5 | 2;
            std::ostream::~ostream();
            sub_1000C6CC0((uint64_t)&v30);
            std::ios::~ios();
          }
          if (v13)
          {
            unint64_t v16 = v23 / v6;
            unint64_t v17 = v23 % v6;
            do
            {
              if (v16 != v9 && v27 != (uint64_t *)v28)
              {
                unint64_t v30 = 0;
                uint64_t v31 = &v30;
                uint64_t v32 = 0x4002000000;
                uint64_t v33 = sub_1000BAD60;
                v34 = sub_1000BAD9C;
                sub_1000CC4E4((uint64_t)v35, (uint64_t)&v27);
                v24[0] = _NSConcreteStackBlock;
                v24[1] = 0x40000000;
                v24[2] = sub_1000BADAC;
                v24[3] = &unk_1001B22E8;
                v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                sub_100055C7C((dispatch_group_t *)&v37, v24);
                sub_10000D6F8(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                sub_10000953C((uint64_t)v35, v35[1]);
              }
              if (v13 >= v6 - v17) {
                unint64_t v18 = v6 - v17;
              }
              else {
                unint64_t v18 = v13;
              }
              if (sub_1000AC7E0(a1[43], v16))
              {
                unint64_t v30 = v17;
                uint64_t v31 = (unint64_t *)(v18 + v17);
                LOBYTE(v32) = 2;
                sub_10000C844(&v27, (uint64_t)&v30);
                unint64_t v9 = v16;
              }
              unint64_t v17 = 0;
              ++v16;
              v13 -= v18;
            }
            while (v13);
          }
          uint64_t v8 = v22 + 1;
          a3 = v20;
        }
        while (v22 + 1 != a4);
      }
      else
      {
        unint64_t v9 = 0;
      }
      if (v27 != (uint64_t *)v28) {
        sub_1000BA02C((uint64_t)a1, v9, &v27);
      }
      sub_100055E14(&v37);
      if (sub_1000D8524())
      {
        *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((void *)&v37 + 1) = 32;
        int v38 = 2;
        sub_1000BB250(&v30, &v37);
        sub_1000039A0(v36, (uint64_t)"Unmap done", 10);
        std::ostream::~ostream();
        sub_1000C831C((uint64_t)&v30);
        std::ios::~ios();
      }
      uint64_t v7 = atomic_load(&v29);
    }
  }
  else
  {
    *(void *)&long long v37 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v37 + 1) = 32;
    int v38 = 16;
    sub_1000BAA90(&v30, &v37);
    sub_1000039A0(v36, (uint64_t)"Unexpected unmap command received on read only image", 52);
    std::ostream::~ostream();
    sub_1000C654C((uint64_t)&v30);
    std::ios::~ios();
    uint64_t v7 = 4294967277;
  }
  sub_10000953C((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_1000BA6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
}

void *sub_1000BA928(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC334((uint64_t)a1, a2);
  *a1 = off_1001B4990;
  a1[45] = &off_1001B4A90;
  a1[46] = &off_1001B4AB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4990;
  a1[45] = off_1001B4A18;
  a1[46] = off_1001B4A40;
  return a1;
}

void sub_1000BAA28(_Unwind_Exception *a1)
{
  sub_1000C5DD8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BAA4C(uint64_t a1)
{
  return a1;
}

void *sub_1000BAA90(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC3C4((uint64_t)a1, a2);
  *a1 = off_1001B4BB0;
  a1[45] = &off_1001B4CB0;
  a1[46] = &off_1001B4CD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4BB0;
  a1[45] = off_1001B4C38;
  a1[46] = off_1001B4C60;
  return a1;
}

void sub_1000BAB90(_Unwind_Exception *a1)
{
  sub_1000C654C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BABB4(uint64_t a1)
{
  return a1;
}

void *sub_1000BABF8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC454((uint64_t)a1, a2);
  *a1 = off_1001B4DD0;
  a1[45] = &off_1001B4ED0;
  a1[46] = &off_1001B4EF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4DD0;
  a1[45] = off_1001B4E58;
  a1[46] = off_1001B4E80;
  return a1;
}

void sub_1000BACF8(_Unwind_Exception *a1)
{
  sub_1000C6CC0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BAD1C(uint64_t a1)
{
  return a1;
}

void *sub_1000BAD60(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  int v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_1000BAD9C(uint64_t a1)
{
}

uint64_t sub_1000BADAC(void *a1)
{
  return sub_1000BA02C(a1[5], a1[6], (void *)(*(void *)(a1[4] + 8) + 40));
}

void *sub_1000BAF80(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC5C8((uint64_t)a1, a2);
  *a1 = off_1001B4FF0;
  a1[45] = &off_1001B50F0;
  a1[46] = &off_1001B5118;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4FF0;
  a1[45] = off_1001B5078;
  a1[46] = off_1001B50A0;
  return a1;
}

void sub_1000BB080(_Unwind_Exception *a1)
{
  sub_1000C7434(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB0A4(uint64_t a1)
{
  return a1;
}

void *sub_1000BB0E8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC658((uint64_t)a1, a2);
  *a1 = off_1001B5210;
  a1[45] = &off_1001B5310;
  a1[46] = &off_1001B5338;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5210;
  a1[45] = off_1001B5298;
  a1[46] = off_1001B52C0;
  return a1;
}

void sub_1000BB1E8(_Unwind_Exception *a1)
{
  sub_1000C7BA8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB20C(uint64_t a1)
{
  return a1;
}

void *sub_1000BB250(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC6E8((uint64_t)a1, a2);
  *a1 = off_1001B5430;
  a1[45] = &off_1001B5530;
  a1[46] = &off_1001B5558;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5430;
  a1[45] = off_1001B54B8;
  a1[46] = off_1001B54E0;
  return a1;
}

void sub_1000BB350(_Unwind_Exception *a1)
{
  sub_1000C831C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB374(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BB3B8(uint64_t a1)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
    *((void *)&v6 + 1) = 36;
    int v7 = 2;
    sub_100023550(v8, &v6);
    sub_1000039A0(v9, (uint64_t)"Evicting all bands for eject", 28);
    std::ostream::~ostream();
    sub_100023F8C((uint64_t)v8);
    std::ios::~ios();
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      sub_10008CA30((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + v2), 0, (uint64_t)v5);
      sub_10008C8FC(v5);
      ++v3;
      v2 += 24;
    }
    while (v3 < *(void *)(a1 + 16));
  }
  sub_100055DC4(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  *(void *)&long long v6 = "void DiskImageSparseBundle::on_eject()";
  *((void *)&v6 + 1) = 36;
  int v7 = 0;
  sub_1000BB51C(v8, &v6);
  sub_1000039A0(v9, (uint64_t)"Sparse bundle ejected", 21);
  std::ostream::~ostream();
  sub_1000C8A90((uint64_t)v8);
  return std::ios::~ios();
}

void sub_1000BB4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100023674((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000BB51C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC778((uint64_t)a1, a2);
  *a1 = off_1001B5650;
  a1[45] = &off_1001B5750;
  a1[46] = &off_1001B5778;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5650;
  a1[45] = off_1001B56D8;
  a1[46] = off_1001B5700;
  return a1;
}

void sub_1000BB61C(_Unwind_Exception *a1)
{
  sub_1000C8A90(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB640(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BB684(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000BB7D0(a1, a2);
  if (!result)
  {
    if (((a2 + 4095) & 0xFFFFFFFFFFFFF000) < 0x200000000000001)
    {
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 560) + 56);
      return v5();
    }
    else
    {
      *(void *)&long long v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((void *)&v6 + 1) = 35;
      int v7 = 16;
      sub_1000BB9AC(v8, &v6);
      std::ostream::operator<<();
      sub_1000039A0(v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43);
      std::ostream::operator<<();
      sub_1000039A0(v9, (uint64_t)" bytes", 6);
      std::ostream::~ostream();
      sub_1000C9204((uint64_t)v8);
      std::ios::~ios();
      return 4294967269;
    }
  }
  return result;
}

void sub_1000BB7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000BBAD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) * v4;
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7) {
    return 0;
  }
  v11[0] = v7 / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a1 + 184))(a1, v8, v11, 1);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  return v9;
}

void sub_1000BB994(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1001517C4(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000BB9AC(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CC808((uint64_t)a1, a2);
  *a1 = off_1001B5870;
  a1[45] = &off_1001B5970;
  a1[46] = &off_1001B5998;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5870;
  a1[45] = off_1001B58F8;
  a1[46] = off_1001B5920;
  return a1;
}

void sub_1000BBAAC(_Unwind_Exception *a1)
{
  sub_1000C9204(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000BBAD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BBB1C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1000BBB24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 48))();
}

void sub_1000BBB4C()
{
}

void sub_1000BBBB8()
{
}

uint64_t sub_1000BBBDC()
{
  return 1;
}

void sub_1000BBBE4()
{
}

void sub_1000BBC2C()
{
}

size_t sub_1000BBC50(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000B8E84(a1, a2, 0, a3);
}

uint64_t sub_1000BBC5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000BBCD4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000BBCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 24;
    sub_10008C9C0(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_1000BBD68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_10008C8FC((void *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000BBDB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100062C0C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  sub_10008C9C4((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  sub_1000BBC5C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1000BBD68((uint64_t)&v13);
  return v11;
}

void sub_1000BBEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BBD68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BBEC0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC150(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BBF0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC150(v1);
  return std::ios::~ios();
}

void sub_1000BBF6C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BC150(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BBFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BC00C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BC074(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BC150(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BC0D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BC150(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BC150(uint64_t a1)
{
  *(void *)a1 = off_1001B24E8;
  sub_1000BC28C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BC28C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BC44C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BC3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BC414(uint64_t a1)
{
  sub_1000BC150(a1);
  operator delete();
}

int *sub_1000BC44C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 46;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 46;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000BC634(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = sub_10008C8FC(v4 - 3);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000BC6B8(uint64_t a1)
{
  sub_100055E14(a1 + 392);
  uint64_t v7 = (void **)(a1 + 352);
  sub_10000F9FC(&v7);
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v2 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  sub_10000953C(a1 + 184, *(void **)(a1 + 192));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  return a1;
}

uint64_t sub_1000BC7D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BCA68(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BC824(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BCA68(v1);
  return std::ios::~ios();
}

void sub_1000BC884(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BCA68(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BC8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BC924(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BC98C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BCA68(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BC9F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BCA68(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BCA68(uint64_t a1)
{
  *(void *)a1 = off_1001B2708;
  sub_1000BCBA4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BCBA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BCD64((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BCD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BCD2C(uint64_t a1)
{
  sub_1000BCA68(a1);
  operator delete();
}

int *sub_1000BCD64(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 59;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 59;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BCF4C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD1DC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BCF98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD1DC(v1);
  return std::ios::~ios();
}

void sub_1000BCFF8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BD1DC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BD060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BD098(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BD100(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD1DC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BD164(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD1DC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BD1DC(uint64_t a1)
{
  *(void *)a1 = off_1001B2928;
  sub_1000BD318(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BD318(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BD4D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BD474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BD4A0(uint64_t a1)
{
  sub_1000BD1DC(a1);
  operator delete();
}

int *sub_1000BD4D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 80;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 80;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BD6C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD950(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BD70C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD950(v1);
  return std::ios::~ios();
}

void sub_1000BD76C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BD950(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BD7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BD80C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BD874(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BD950(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BD8D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BD950(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BD950(uint64_t a1)
{
  *(void *)a1 = off_1001B2B48;
  sub_1000BDA8C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BDA8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BDC4C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BDBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BDC14(uint64_t a1)
{
  sub_1000BD950(a1);
  operator delete();
}

int *sub_1000BDC4C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 101;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 101;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BDE34(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE0C4(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BDE80(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE0C4(v1);
  return std::ios::~ios();
}

void sub_1000BDEE0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BE0C4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BDF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BDF80(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BDFE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE0C4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BE04C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE0C4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BE0C4(uint64_t a1)
{
  *(void *)a1 = off_1001B2D68;
  sub_1000BE200(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BE200(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BE3C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BE35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BE388(uint64_t a1)
{
  sub_1000BE0C4(a1);
  operator delete();
}

int *sub_1000BE3C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 111;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 111;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BE5A8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE838(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BE5F4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE838(v1);
  return std::ios::~ios();
}

void sub_1000BE654(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BE838(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BE6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BE6F4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BE75C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BE838(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BE7C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BE838(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BE838(uint64_t a1)
{
  *(void *)a1 = off_1001B2F88;
  sub_1000BE974(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BE974(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BEB34((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BEAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BEAFC(uint64_t a1)
{
  sub_1000BE838(a1);
  operator delete();
}

int *sub_1000BEB34(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 165;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 165;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BED1C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BEFAC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BED68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BEFAC(v1);
  return std::ios::~ios();
}

void sub_1000BEDC8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BEFAC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BEE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BEE68(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BEED0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BEFAC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BEF34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BEFAC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BEFAC(uint64_t a1)
{
  *(void *)a1 = off_1001B31A8;
  sub_1000BF0E8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BF0E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BF2A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BF244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BF270(uint64_t a1)
{
  sub_1000BEFAC(a1);
  operator delete();
}

int *sub_1000BF2A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 172;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 172;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BF490(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF720(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BF4DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF720(v1);
  return std::ios::~ios();
}

void sub_1000BF53C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BF720(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BF5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BF5DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BF644(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BF720(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BF6A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BF720(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BF720(uint64_t a1)
{
  *(void *)a1 = off_1001B33C8;
  sub_1000BF85C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BF85C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000BFA1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000BF9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BF9E4(uint64_t a1)
{
  sub_1000BF720(a1);
  operator delete();
}

int *sub_1000BFA1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 190;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 190;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000BFC04(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BFE94(v1);
  return std::ios::~ios();
}

uint64_t sub_1000BFC50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BFE94(v1);
  return std::ios::~ios();
}

void sub_1000BFCB0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000BFE94(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BFD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000BFD50(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000BFDB8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000BFE94(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000BFE1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000BFE94(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000BFE94(uint64_t a1)
{
  *(void *)a1 = off_1001B35E8;
  sub_1000BFFD0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000BFFD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C0190((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0158(uint64_t a1)
{
  sub_1000BFE94(a1);
  operator delete();
}

int *sub_1000C0190(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 194;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 194;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C0378(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 4;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v28 = *((void *)a2 - 2);
          uint64_t v29 = *v11;
          char v30 = -1;
          if (v28 >= *v11) {
            char v30 = 1;
          }
          if (v28 == *v11)
          {
            unint64_t v31 = *((void *)a2 - 1);
            unint64_t v32 = v11[1];
            BOOL v5 = v31 >= v32;
            BOOL v33 = v31 == v32;
            char v30 = -1;
            if (v5) {
              char v30 = 1;
            }
            if (v33) {
              char v30 = 0;
            }
          }
          if (v30 < 0)
          {
            uint64_t v34 = v11[1];
            uint64_t v35 = *((void *)a2 - 1);
            *uint64_t v11 = v28;
            v11[1] = v35;
            *((void *)a2 - 2) = v29;
            *((void *)a2 - 1) = v34;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1000C08E0(v11, v11 + 2, (uint64_t *)a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_1000C0F28(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_1000C1038(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)sub_1000C119C((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1000C08E0(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2);
      sub_1000C08E0(v11 + 2, v17 - 2, (uint64_t *)a2 - 4);
      sub_1000C08E0(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6);
      sub_1000C08E0(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)int v17 = v18;
      if (a5) {
        goto LABEL_24;
      }
    }
    else
    {
      sub_1000C08E0(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2);
      if (a5) {
        goto LABEL_24;
      }
    }
    uint64_t v19 = *(v11 - 2);
    BOOL v20 = v19 == *v11;
    if (v19 >= *v11) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (v20)
    {
      unint64_t v22 = *(v11 - 1);
      unint64_t v23 = v11[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if ((v21 & 0x80) == 0)
    {
      uint64_t result = (uint64_t)sub_1000C0A34(v11, a2);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_29;
    }
LABEL_24:
    long long v25 = sub_1000C0BBC(v11, (uint64_t *)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v27 = sub_1000C0D24(v11, v25);
    uint64_t v11 = v25 + 2;
    uint64_t result = sub_1000C0D24(v25 + 2, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_27:
      uint64_t result = sub_1000C0378(v10, v25, a3, -v13, a5 & 1);
      uint64_t v11 = v25 + 2;
LABEL_29:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_1000C077C(v11, (uint64_t *)a2);
  }
  else
  {
    return (uint64_t)sub_1000C083C(v11, (uint64_t *)a2);
  }
}

uint64_t *sub_1000C077C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      int v4 = result;
      do
      {
        BOOL v5 = v2;
        uint64_t v6 = v4[2];
        uint64_t v7 = *v4;
        if (v6 >= *v4) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v6 == *v4)
        {
          unint64_t v9 = v4[3];
          unint64_t v10 = v4[1];
          BOOL v11 = v9 == v10;
          char v8 = v9 >= v10 ? 1 : -1;
          if (v11) {
            char v8 = 0;
          }
        }
        if (v8 < 0)
        {
          unint64_t v12 = v4[3];
          uint64_t v13 = v3;
          while (1)
          {
            uint64_t v14 = (char *)result + v13;
            uint64_t v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((void *)v14 + 2) = v7;
            *((void *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t v7 = *((void *)v14 - 2);
            if (v6 >= v7) {
              char v16 = 1;
            }
            else {
              char v16 = -1;
            }
            if (v6 == v7)
            {
              unint64_t v17 = *(uint64_t *)((char *)result + v13 - 8);
              BOOL v18 = v12 == v17;
              if (v12 >= v17) {
                char v16 = 1;
              }
              else {
                char v16 = -1;
              }
              if (v18) {
                char v16 = 0;
              }
            }
            v13 -= 16;
            if ((v16 & 0x80) == 0)
            {
              uint64_t v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }
          uint64_t v19 = result;
LABEL_28:
          *uint64_t v19 = v6;
          v19[1] = v12;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        int v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *sub_1000C083C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (unint64_t *)(result + 3);
      do
      {
        int v4 = v2;
        uint64_t v5 = result[2];
        uint64_t v6 = *result;
        if (v5 >= *result) {
          char v7 = 1;
        }
        else {
          char v7 = -1;
        }
        if (v5 == *result)
        {
          unint64_t v8 = result[3];
          unint64_t v9 = result[1];
          BOOL v10 = v8 == v9;
          char v7 = v8 >= v9 ? 1 : -1;
          if (v10) {
            char v7 = 0;
          }
        }
        if (v7 < 0)
        {
          unint64_t v11 = result[3];
          unint64_t v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            *unint64_t v12 = *(v12 - 2);
            uint64_t v6 = *(v12 - 5);
            if (v5 >= v6) {
              char v13 = 1;
            }
            else {
              char v13 = -1;
            }
            if (v5 == v6)
            {
              unint64_t v14 = *(v12 - 4);
              BOOL v15 = v11 == v14;
              if (v11 >= v14) {
                char v13 = 1;
              }
              else {
                char v13 = -1;
              }
              if (v15) {
                char v13 = 0;
              }
            }
            v12 -= 2;
          }
          while (v13 < 0);
          *(v12 - 1) = v5;
          *unint64_t v12 = v11;
        }
        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1000C08E0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1) {
    char v5 = 1;
  }
  else {
    char v5 = -1;
  }
  if (*a2 == *a1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = a1[1];
    BOOL v8 = v6 >= v7;
    BOOL v9 = v6 == v7;
    char v10 = -1;
    if (v8) {
      char v10 = 1;
    }
    if (v9) {
      char v5 = 0;
    }
    else {
      char v5 = v10;
    }
  }
  uint64_t v11 = *a3;
  char v12 = -1;
  if (*a3 >= v3) {
    char v12 = 1;
  }
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      unint64_t v18 = a3[1];
      unint64_t v19 = a2[1];
      BOOL v8 = v18 >= v19;
      BOOL v20 = v18 == v19;
      char v12 = -1;
      if (v8) {
        char v12 = 1;
      }
      if (v20) {
        char v12 = 0;
      }
    }
    if (v12 < 0)
    {
      uint64_t v36 = a1[1];
      uint64_t v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }
    else
    {
      unint64_t v21 = a1[1];
      uint64_t v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      char v23 = -1;
      if (*a3 >= v4) {
        char v23 = 1;
      }
      if (*a3 == v4)
      {
        unint64_t v24 = a3[1];
        BOOL v8 = v24 >= v21;
        BOOL v25 = v24 == v21;
        char v23 = -1;
        if (v8) {
          char v23 = 1;
        }
        if (v25) {
          char v23 = 0;
        }
      }
      if (v23 < 0)
      {
        uint64_t v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2;
      }
    }
  }
  else
  {
    if (v11 == v3)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      BOOL v8 = v13 >= v14;
      BOOL v15 = v13 == v14;
      char v16 = -1;
      if (v8) {
        char v16 = 1;
      }
      if (v15) {
        char v12 = 0;
      }
      else {
        char v12 = v16;
      }
    }
    if ((v12 & 0x80) == 0) {
      return 0;
    }
    *a2 = v11;
    *a3 = v3;
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    uint64_t v29 = *a1;
    char v30 = -1;
    if (v27 >= *a1) {
      char v30 = 1;
    }
    if (v27 == *a1)
    {
      unint64_t v31 = a2[1];
      unint64_t v32 = a1[1];
      BOOL v8 = v31 >= v32;
      BOOL v33 = v31 == v32;
      char v30 = -1;
      if (v8) {
        char v30 = 1;
      }
      if (v33) {
        char v30 = 0;
      }
    }
    if (v30 < 0)
    {
      uint64_t v34 = a1[1];
      uint64_t v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2;
    }
  }
  return 1;
}

void *sub_1000C0A34(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  if (*a1 >= v4) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (v5)
  {
    unint64_t v7 = *(a2 - 1);
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
    char v6 = -1;
    if (v8) {
      char v6 = 1;
    }
    if (v9) {
      char v6 = 0;
    }
  }
  if (v6 < 0)
  {
    BOOL v15 = a1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v16 = v11[2];
      v11 += 2;
      BOOL v17 = v2 == v16;
      if (v2 >= v16) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = v15[3];
        BOOL v20 = v3 == v19;
        char v18 = v3 >= v19 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }
      BOOL v15 = v11;
    }
    while ((v18 & 0x80) == 0);
  }
  else
  {
    char v10 = a1 + 2;
    do
    {
      uint64_t v11 = v10;
      if (v10 >= a2) {
        break;
      }
      if (v2 >= *v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v2 == *v10)
      {
        unint64_t v13 = v10[1];
        BOOL v14 = v3 == v13;
        char v12 = v3 >= v13 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }
      v10 += 2;
    }
    while ((v12 & 0x80) == 0);
  }
  if (v11 >= a2)
  {
    unint64_t v21 = a2;
  }
  else
  {
    unint64_t v21 = a2;
    do
    {
      uint64_t v22 = *(v21 - 2);
      v21 -= 2;
      BOOL v23 = v2 == v22;
      if (v2 >= v22) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unint64_t v25 = *(a2 - 1);
        BOOL v26 = v3 == v25;
        char v24 = v3 >= v25 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }
      a2 = v21;
    }
    while (v24 < 0);
  }
  if (v11 < v21)
  {
    uint64_t v27 = *v11;
    uint64_t v28 = *v21;
    do
    {
      uint64_t v29 = v11[1];
      uint64_t v30 = v21[1];
      *uint64_t v11 = v28;
      v11[1] = v30;
      *unint64_t v21 = v27;
      v21[1] = v29;
      unint64_t v31 = v11;
      do
      {
        uint64_t v32 = v11[2];
        v11 += 2;
        uint64_t v27 = v32;
        BOOL v33 = v2 == v32;
        if (v2 >= v32) {
          char v34 = 1;
        }
        else {
          char v34 = -1;
        }
        if (v33)
        {
          unint64_t v35 = v31[3];
          BOOL v36 = v3 == v35;
          char v34 = v3 >= v35 ? 1 : -1;
          if (v36) {
            char v34 = 0;
          }
        }
        unint64_t v31 = v11;
      }
      while ((v34 & 0x80) == 0);
      uint64_t v37 = v21;
      do
      {
        uint64_t v38 = *(v21 - 2);
        v21 -= 2;
        uint64_t v28 = v38;
        BOOL v39 = v2 == v38;
        if (v2 >= v38) {
          char v40 = 1;
        }
        else {
          char v40 = -1;
        }
        if (v39)
        {
          unint64_t v41 = *(v37 - 1);
          BOOL v42 = v3 == v41;
          char v40 = v3 >= v41 ? 1 : -1;
          if (v42) {
            char v40 = 0;
          }
        }
        uint64_t v37 = v21;
      }
      while (v40 < 0);
    }
    while (v11 < v21);
  }
  if (v11 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  }
  *(v11 - 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}

uint64_t *sub_1000C0BBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3) {
      char v6 = 1;
    }
    else {
      char v6 = -1;
    }
    if (v5 == v3)
    {
      unint64_t v7 = a1[v2 + 3];
      BOOL v8 = v7 == v4;
      char v6 = v7 >= v4 ? 1 : -1;
      if (v8) {
        char v6 = 0;
      }
    }
    v2 += 2;
  }
  while (v6 < 0);
  BOOL v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      char v10 = a2 - 2;
      uint64_t v16 = *(a2 - 2);
      BOOL v17 = v16 == v3;
      if (v16 >= v3) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = *(a2 - 1);
        BOOL v20 = v19 == v4;
        char v18 = v19 >= v4 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }
      a2 -= 2;
      if (v18 < 0) {
        goto LABEL_39;
      }
    }
    char v10 = a2;
  }
  else
  {
    char v10 = a2;
    do
    {
      uint64_t v11 = *(v10 - 2);
      v10 -= 2;
      BOOL v12 = v11 == v3;
      if (v11 >= v3) {
        char v13 = 1;
      }
      else {
        char v13 = -1;
      }
      if (v12)
      {
        unint64_t v14 = *(a2 - 1);
        BOOL v15 = v14 == v4;
        char v13 = v14 >= v4 ? 1 : -1;
        if (v15) {
          char v13 = 0;
        }
      }
      a2 = v10;
    }
    while ((v13 & 0x80) == 0);
  }
LABEL_39:
  if (v9 >= v10)
  {
    uint64_t v22 = v9;
  }
  else
  {
    uint64_t v21 = *v10;
    uint64_t v22 = v9;
    BOOL v23 = v10;
    do
    {
      uint64_t v24 = v22[1];
      uint64_t v25 = v23[1];
      *uint64_t v22 = v21;
      v22[1] = v25;
      uint64_t *v23 = v5;
      v23[1] = v24;
      BOOL v26 = v22;
      do
      {
        uint64_t v27 = v22[2];
        v22 += 2;
        uint64_t v5 = v27;
        BOOL v28 = v27 == v3;
        if (v27 >= v3) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v28)
        {
          unint64_t v30 = v26[3];
          BOOL v31 = v30 == v4;
          char v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }
        BOOL v26 = v22;
      }
      while (v29 < 0);
      uint64_t v32 = v23;
      do
      {
        uint64_t v33 = *(v23 - 2);
        v23 -= 2;
        uint64_t v21 = v33;
        BOOL v34 = v33 == v3;
        if (v33 >= v3) {
          char v35 = 1;
        }
        else {
          char v35 = -1;
        }
        if (v34)
        {
          unint64_t v36 = *(v32 - 1);
          BOOL v37 = v36 == v4;
          char v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            char v35 = 0;
          }
        }
        uint64_t v32 = v23;
      }
      while ((v35 & 0x80) == 0);
    }
    while (v22 < v23);
  }
  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

BOOL sub_1000C0D24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      char v8 = -1;
      if (v6 >= *a1) {
        char v8 = 1;
      }
      if (v6 == *a1)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 == v10;
        char v8 = -1;
        if (v11) {
          char v8 = 1;
        }
        if (v12) {
          char v8 = 0;
        }
      }
      if (v8 < 0)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - 2) = v7;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      sub_1000C08E0(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1000C0F28(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1000C1038(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v15 = a1 + 4;
      sub_1000C08E0(a1, a1 + 2, a1 + 4);
      uint64_t v16 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v16;
    uint64_t v20 = *v15;
    if (*v16 >= *v15) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (*v16 == *v15)
    {
      unint64_t v22 = v16[1];
      unint64_t v23 = v15[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }
    if (v21 < 0)
    {
      unint64_t v25 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32) {
          break;
        }
        uint64_t v20 = v27[2];
        if (v19 >= v20) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v19 == v20)
        {
          unint64_t v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          BOOL v31 = v25 == v30;
          char v29 = v25 >= v30 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }
        v26 -= 16;
        if ((v29 & 0x80) == 0)
        {
          uint64_t v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }
      uint64_t v32 = a1;
LABEL_38:
      *uint64_t v32 = v19;
      v32[1] = v25;
      if (++v18 == 8) {
        return v16 + 2 == a2;
      }
    }
    BOOL v15 = v16;
    v17 += 16;
    v16 += 2;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1000C0F28(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_1000C08E0(a1, a2, a3);
  uint64_t v9 = *a3;
  char v10 = -1;
  if (*a4 >= *a3) {
    char v10 = 1;
  }
  if (*a4 == *a3)
  {
    unint64_t v11 = a4[1];
    unint64_t v12 = a3[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    char v10 = -1;
    if (v13) {
      char v10 = 1;
    }
    if (v14) {
      char v10 = 0;
    }
  }
  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    char v18 = -1;
    if (v15 >= *a2) {
      char v18 = 1;
    }
    if (v15 == *a2)
    {
      unint64_t v19 = a3[1];
      unint64_t v20 = a2[1];
      BOOL v13 = v19 >= v20;
      BOOL v21 = v19 == v20;
      char v18 = -1;
      if (v13) {
        char v18 = 1;
      }
      if (v21) {
        char v18 = 0;
      }
    }
    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      uint64_t v24 = *a1;
      char v25 = -1;
      if (v22 >= *a1) {
        char v25 = 1;
      }
      if (v22 == *a1)
      {
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        BOOL v13 = v26 >= v27;
        BOOL v28 = v26 == v27;
        char v25 = -1;
        if (v13) {
          char v25 = 1;
        }
        if (v28) {
          char v25 = 0;
        }
      }
      if (v25 < 0)
      {
        uint64_t v29 = a1[1];
        uint64_t v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }
  return result;
}

uint64_t sub_1000C1038(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1000C0F28(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  char v12 = -1;
  if (*a5 >= *a4) {
    char v12 = 1;
  }
  if (*a5 == *a4)
  {
    unint64_t v13 = a5[1];
    unint64_t v14 = a4[1];
    BOOL v15 = v13 >= v14;
    BOOL v16 = v13 == v14;
    char v12 = -1;
    if (v15) {
      char v12 = 1;
    }
    if (v16) {
      char v12 = 0;
    }
  }
  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = *a3;
    char v20 = -1;
    if (v17 >= *a3) {
      char v20 = 1;
    }
    if (v17 == *a3)
    {
      unint64_t v21 = a4[1];
      unint64_t v22 = a3[1];
      BOOL v15 = v21 >= v22;
      BOOL v23 = v21 == v22;
      char v20 = -1;
      if (v15) {
        char v20 = 1;
      }
      if (v23) {
        char v20 = 0;
      }
    }
    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a2;
      char v27 = -1;
      if (v24 >= *a2) {
        char v27 = 1;
      }
      if (v24 == *a2)
      {
        unint64_t v28 = a3[1];
        unint64_t v29 = a2[1];
        BOOL v15 = v28 >= v29;
        BOOL v30 = v28 == v29;
        char v27 = -1;
        if (v15) {
          char v27 = 1;
        }
        if (v30) {
          char v27 = 0;
        }
      }
      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        uint64_t v33 = *a1;
        char v34 = -1;
        if (v31 >= *a1) {
          char v34 = 1;
        }
        if (v31 == *a1)
        {
          unint64_t v35 = a2[1];
          unint64_t v36 = a1[1];
          BOOL v15 = v35 >= v36;
          BOOL v37 = v35 == v36;
          char v34 = -1;
          if (v15) {
            char v34 = 1;
          }
          if (v37) {
            char v34 = 0;
          }
        }
        if (v34 < 0)
        {
          uint64_t v38 = a1[1];
          uint64_t v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }
  return result;
}

char *sub_1000C119C(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[16 * v10];
      do
      {
        sub_1000C1310((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 >= *(void *)a1) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (*(void *)v14 == *(void *)a1)
        {
          unint64_t v17 = *((void *)v14 + 1);
          unint64_t v18 = *((void *)a1 + 1);
          BOOL v19 = v17 == v18;
          char v16 = v17 >= v18 ? 1 : -1;
          if (v19) {
            char v16 = 0;
          }
        }
        if (v16 < 0)
        {
          uint64_t v20 = *((void *)v14 + 1);
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)unint64_t v14 = *(void *)a1;
          *((void *)v14 + 1) = v21;
          *(void *)a1 = v15;
          *((void *)a1 + 1) = v20;
          sub_1000C1310((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v22 = (unint64_t)v8 >> 4;
      BOOL v23 = a2 - 16;
      do
      {
        uint64_t v25 = *(void *)a1;
        uint64_t v24 = *((void *)a1 + 1);
        uint64_t v26 = (char *)sub_1000C1464(a1, a4, v22);
        if (v23 == v26)
        {
          *(void *)uint64_t v26 = v25;
          *((void *)v26 + 1) = v24;
        }
        else
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v23;
          *(void *)BOOL v23 = v25;
          *((void *)v23 + 1) = v24;
          sub_1000C14F8((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }
        v23 -= 16;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1000C1310(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        BOOL v11 = *v8 == v10;
        if (*v8 >= v10) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(result + 16 * v7 + 8);
          unint64_t v14 = v8[3];
          BOOL v15 = v13 >= v14;
          BOOL v16 = v13 == v14;
          char v12 = -1;
          if (v15) {
            char v12 = 1;
          }
          if (v16) {
            char v12 = 0;
          }
        }
        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v17 = *v8;
      uint64_t v18 = *a4;
      char v19 = -1;
      if (*v8 >= *a4) {
        char v19 = 1;
      }
      if (*v8 == *a4)
      {
        unint64_t v20 = v8[1];
        unint64_t v21 = a4[1];
        BOOL v15 = v20 >= v21;
        BOOL v22 = v20 == v21;
        char v19 = -1;
        if (v15) {
          char v19 = 1;
        }
        if (v22) {
          char v19 = 0;
        }
      }
      if ((v19 & 0x80) == 0)
      {
        unint64_t v23 = a4[1];
        do
        {
          uint64_t v24 = a4;
          a4 = v8;
          uint64_t v25 = v8[1];
          *uint64_t v24 = v17;
          v24[1] = v25;
          if (v5 < v7) {
            break;
          }
          uint64_t v26 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v26);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v26;
          }
          else
          {
            uint64_t v27 = v8[2];
            BOOL v28 = *v8 == v27;
            if (*v8 >= v27) {
              char v29 = 1;
            }
            else {
              char v29 = -1;
            }
            if (v28)
            {
              unint64_t v30 = *(void *)(result + 16 * v26 + 8);
              unint64_t v31 = v8[3];
              BOOL v32 = v30 == v31;
              char v29 = v30 >= v31 ? 1 : -1;
              if (v32) {
                char v29 = 0;
              }
            }
            if (v29 < 0) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v26;
            }
          }
          uint64_t v17 = *v8;
          if (*v8 >= v18) {
            char v33 = 1;
          }
          else {
            char v33 = -1;
          }
          if (*v8 == v18)
          {
            unint64_t v34 = v8[1];
            BOOL v35 = v34 == v23;
            if (v34 >= v23) {
              char v33 = 1;
            }
            else {
              char v33 = -1;
            }
            if (v35) {
              char v33 = 0;
            }
          }
        }
        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }
  return result;
}

void *sub_1000C1464(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = &a1[v3 + 1];
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7[2];
      BOOL v11 = *v7 == v10;
      if (*v7 >= v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = *((void *)&a1[v6] + 1);
        unint64_t v14 = v7[3];
        BOOL v15 = v13 == v14;
        if (v13 >= v14) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (v15) {
          char v12 = 0;
        }
        else {
          char v12 = v16;
        }
      }
      if (v12 < 0)
      {
        v7 += 2;
        uint64_t v8 = v9;
      }
    }
    *a1 = *(_OWORD *)v7;
    a1 = v7;
    uint64_t v3 = v8;
  }
  while (v8 <= v5);
  return v7;
}

uint64_t sub_1000C14F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *v6;
    char v10 = -1;
    if (*v6 >= v8) {
      char v10 = 1;
    }
    if (*v6 == v8)
    {
      unint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a2 - 8);
      BOOL v13 = v11 >= v12;
      BOOL v14 = v11 == v12;
      char v10 = -1;
      if (v13) {
        char v10 = 1;
      }
      if (v14) {
        char v10 = 0;
      }
    }
    if (v10 < 0)
    {
      unint64_t v15 = *(void *)(a2 - 8);
      do
      {
        char v16 = v7;
        uint64_t v7 = v6;
        uint64_t v17 = v6[1];
        void *v16 = v9;
        v16[1] = v17;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 16 * v5);
        uint64_t v9 = *v6;
        if (*v6 >= v8) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (*v6 == v8)
        {
          unint64_t v19 = v6[1];
          BOOL v20 = v19 == v15;
          if (v19 >= v15) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if (v20) {
            char v18 = 0;
          }
        }
      }
      while (v18 < 0);
      *uint64_t v7 = v8;
      v7[1] = v15;
    }
  }
  return result;
}

uint64_t sub_1000C1594(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1824(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C15E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1824(v1);
  return std::ios::~ios();
}

void sub_1000C1640(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C1824(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C16A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C16E0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C1748(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1824(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C17AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1824(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C1824(uint64_t a1)
{
  *(void *)a1 = off_1001B3808;
  sub_1000C1960(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C1960(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C1B20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C1ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C1AE8(uint64_t a1)
{
  sub_1000C1824(a1);
  operator delete();
}

int *sub_1000C1B20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 213;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 213;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C1D08(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1F98(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C1D54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1F98(v1);
  return std::ios::~ios();
}

void sub_1000C1DB4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C1F98(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C1E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C1E54(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C1EBC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C1F98(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C1F20(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C1F98(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C1F98(uint64_t a1)
{
  *(void *)a1 = off_1001B3A28;
  sub_1000C20D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C20D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C2294((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C2230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C225C(uint64_t a1)
{
  sub_1000C1F98(a1);
  operator delete();
}

int *sub_1000C2294(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 218;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 218;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C247C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C270C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C24C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C270C(v1);
  return std::ios::~ios();
}

void sub_1000C2528(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C270C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C2590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C25C8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C2630(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C270C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C2694(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C270C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C270C(uint64_t a1)
{
  *(void *)a1 = off_1001B3C48;
  sub_1000C2848(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C2848(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C2A08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C29A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C29D0(uint64_t a1)
{
  sub_1000C270C(a1);
  operator delete();
}

int *sub_1000C2A08(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 222;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 222;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C2BF0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C2E80(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C2C3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C2E80(v1);
  return std::ios::~ios();
}

void sub_1000C2C9C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C2E80(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C2D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C2D3C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C2DA4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C2E80(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C2E08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C2E80(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C2E80(uint64_t a1)
{
  *(void *)a1 = off_1001B3E68;
  sub_1000C2FBC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C2FBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C317C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C3118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C3144(uint64_t a1)
{
  sub_1000C2E80(a1);
  operator delete();
}

int *sub_1000C317C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 231;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 231;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C3364(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C35F4(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C33B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C35F4(v1);
  return std::ios::~ios();
}

void sub_1000C3410(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C35F4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C3478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C34B0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C3518(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C35F4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C357C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C35F4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C35F4(uint64_t a1)
{
  *(void *)a1 = off_1001B4088;
  sub_1000C3730(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C3730(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C38F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C388C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C38B8(uint64_t a1)
{
  sub_1000C35F4(a1);
  operator delete();
}

int *sub_1000C38F0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 235;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 235;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C3AD8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C3D68(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C3B24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C3D68(v1);
  return std::ios::~ios();
}

void sub_1000C3B84(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C3D68(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C3BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C3C24(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C3C8C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C3D68(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C3CF0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C3D68(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C3D68(uint64_t a1)
{
  *(void *)a1 = off_1001B42A8;
  sub_1000C3EA4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C3EA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C4064((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C4000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C402C(uint64_t a1)
{
  sub_1000C3D68(a1);
  operator delete();
}

int *sub_1000C4064(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 237;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 237;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C424C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C44DC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C4298(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C44DC(v1);
  return std::ios::~ios();
}

void sub_1000C42F8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C44DC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C4360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C4398(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C4400(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C44DC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C4464(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C44DC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C44DC(uint64_t a1)
{
  *(void *)a1 = off_1001B44C8;
  sub_1000C4618(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C4618(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C47D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C4774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C47A0(uint64_t a1)
{
  sub_1000C44DC(a1);
  operator delete();
}

int *sub_1000C47D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 284;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 284;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C49C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C4C50(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C4A0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C4C50(v1);
  return std::ios::~ios();
}

void sub_1000C4A6C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C4C50(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C4AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C4B0C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C4B74(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C4C50(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C4BD8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C4C50(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C4C50(uint64_t a1)
{
  *(void *)a1 = off_1001B46E8;
  sub_1000C4D8C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C4D8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C4F4C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C4F14(uint64_t a1)
{
  sub_1000C4C50(a1);
  operator delete();
}

int *sub_1000C4F4C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 295;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 295;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000C5134(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C529C((uint64_t)a1, a2);
  *a1 = off_1001B4770;
  a1[45] = &off_1001B4870;
  a1[46] = &off_1001B4898;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B4770;
  a1[45] = off_1001B47F8;
  a1[46] = off_1001B4820;
  return a1;
}

void sub_1000C5234(_Unwind_Exception *a1)
{
  sub_1000C532C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5258(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C529C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4908;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000C5318(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C532C(uint64_t a1)
{
  *(void *)a1 = off_1001B4908;
  sub_1000C5734(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000C5468(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C532C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C54D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C5508(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000C5570(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C532C(v1);
  return std::ios::~ios();
}

void sub_1000C55BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C532C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C5620(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C532C(v1);
  return std::ios::~ios();
}

void sub_1000C5680(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C532C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C56FC(uint64_t a1)
{
  sub_1000C532C(a1);
  operator delete();
}

uint64_t sub_1000C5734(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C58B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C5890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000C58B8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 241;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 241;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C5AA0(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000C5AEC((_OWORD *)a1, a2);
  return a1;
}

void sub_1000C5AD0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_1001519D4(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1000C5AEC(_OWORD *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    unsigned __int8 v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_10000A2C4(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *__dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_1000C5B48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C5DD8(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C5B94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C5DD8(v1);
  return std::ios::~ios();
}

void sub_1000C5BF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C5DD8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C5C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C5C94(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C5CFC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C5DD8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C5D60(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C5DD8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C5DD8(uint64_t a1)
{
  *(void *)a1 = off_1001B4B28;
  sub_1000C5F14(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C5F14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C60D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C6070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C609C(uint64_t a1)
{
  sub_1000C5DD8(a1);
  operator delete();
}

int *sub_1000C60D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 434;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 434;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C62BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C654C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C6308(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C654C(v1);
  return std::ios::~ios();
}

void sub_1000C6368(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C654C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C63D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C6408(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C6470(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C654C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C64D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C654C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C654C(uint64_t a1)
{
  *(void *)a1 = off_1001B4D48;
  sub_1000C6688(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C6688(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C6848((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C67E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C6810(uint64_t a1)
{
  sub_1000C654C(a1);
  operator delete();
}

int *sub_1000C6848(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 443;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 443;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C6A30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C6CC0(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C6A7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C6CC0(v1);
  return std::ios::~ios();
}

void sub_1000C6ADC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C6CC0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C6B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C6B7C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C6BE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C6CC0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C6C48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C6CC0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C6CC0(uint64_t a1)
{
  *(void *)a1 = off_1001B4F68;
  sub_1000C6DFC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C6DFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C6FBC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C6F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C6F84(uint64_t a1)
{
  sub_1000C6CC0(a1);
  operator delete();
}

int *sub_1000C6FBC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 460;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 460;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C71A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C7434(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C71F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C7434(v1);
  return std::ios::~ios();
}

void sub_1000C7250(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C7434(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C72B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C72F0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C7358(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C7434(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C73BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C7434(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C7434(uint64_t a1)
{
  *(void *)a1 = off_1001B5188;
  sub_1000C7570(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C7570(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C7730((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C76CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C76F8(uint64_t a1)
{
  sub_1000C7434(a1);
  operator delete();
}

int *sub_1000C7730(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 469;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 469;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C7918(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C7BA8(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C7964(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C7BA8(v1);
  return std::ios::~ios();
}

void sub_1000C79C4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C7BA8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C7A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C7A64(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C7ACC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C7BA8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C7B30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C7BA8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C7BA8(uint64_t a1)
{
  *(void *)a1 = off_1001B53A8;
  sub_1000C7CE4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C7CE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C7EA4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C7E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C7E6C(uint64_t a1)
{
  sub_1000C7BA8(a1);
  operator delete();
}

int *sub_1000C7EA4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 492;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 492;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C808C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C831C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C80D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C831C(v1);
  return std::ios::~ios();
}

void sub_1000C8138(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C831C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C81A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C81D8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C8240(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C831C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C82A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C831C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C831C(uint64_t a1)
{
  *(void *)a1 = off_1001B55C8;
  sub_1000C8458(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C8458(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C8618((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C85B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C85E0(uint64_t a1)
{
  sub_1000C831C(a1);
  operator delete();
}

int *sub_1000C8618(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 498;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 498;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C8800(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C8A90(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C884C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C8A90(v1);
  return std::ios::~ios();
}

void sub_1000C88AC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C8A90(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C8914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C894C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C89B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C8A90(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C8A18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C8A90(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C8A90(uint64_t a1)
{
  *(void *)a1 = off_1001B57E8;
  sub_1000C8BCC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C8BCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C8D8C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C8D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C8D54(uint64_t a1)
{
  sub_1000C8A90(a1);
  operator delete();
}

int *sub_1000C8D8C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 511;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 511;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000C8F74(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C9204(v1);
  return std::ios::~ios();
}

uint64_t sub_1000C8FC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C9204(v1);
  return std::ios::~ios();
}

void sub_1000C9020(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C9204(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C9088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C90C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000C9128(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C9204(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C918C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C9204(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C9204(uint64_t a1)
{
  *(void *)a1 = off_1001B5A08;
  sub_1000C9340(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000C9340(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000C9500((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000C949C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C94C8(uint64_t a1)
{
  sub_1000C9204(a1);
  operator delete();
}

int *sub_1000C9500(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 523;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 523;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000C96E8(void *a1, uint64_t a2)
{
  *a1 = off_1001B5A88;
  a1[1] = a2;
  sub_1000C999C(a1 + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 720) - *(void *)(a2 + 712)) >> 3));
  if (sub_1000D8524())
  {
    *(void *)&long long v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((void *)&v4 + 1) = 63;
    int v5 = 2;
    sub_1000C97F8(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Constructing sb context", 23);
    std::ostream::~ostream();
    sub_1000C9AF0((uint64_t)v6);
    std::ios::~ios();
  }
  return a1;
}

void sub_1000C97CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000C991C((uint64_t)va);
  sub_100073018((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1000C97F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C9A60((uint64_t)a1, a2);
  *a1 = off_1001B5AE8;
  a1[45] = &off_1001B5BE8;
  a1[46] = &off_1001B5C10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5AE8;
  a1[45] = off_1001B5B70;
  a1[46] = off_1001B5B98;
  return a1;
}

void sub_1000C98F8(_Unwind_Exception *a1)
{
  sub_1000C9AF0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C991C(uint64_t a1)
{
  return a1;
}

void sub_1000C9964(uint64_t a1)
{
  sub_1000CA264(a1);
  operator delete();
}

void *sub_1000C999C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000C9A1C(a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1000C9A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_1000C9A1C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10004B570();
  }
  uint64_t result = (char *)sub_10006D6E8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_1000C9A60(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5C80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000C9ADC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C9AF0(uint64_t a1)
{
  *(void *)a1 = off_1001B5C80;
  sub_1000C9EF8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000C9C2C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000C9AF0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C9C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000C9CCC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000C9D34(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C9AF0(v1);
  return std::ios::~ios();
}

void sub_1000C9D80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000C9AF0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000C9DE4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C9AF0(v1);
  return std::ios::~ios();
}

void sub_1000C9E44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000C9AF0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000C9EC0(uint64_t a1)
{
  sub_1000C9AF0(a1);
  operator delete();
}

uint64_t sub_1000C9EF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000CA07C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000CA054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000CA07C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 37;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 37;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000CA264(uint64_t a1)
{
  *(void *)a1 = off_1001B5A88;
  if (sub_1000D8524())
  {
    *(void *)&long long v3 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((void *)&v3 + 1) = 64;
    int v4 = 2;
    sub_1000CA334(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"Destructing sb context", 22);
    std::ostream::~ostream();
    sub_1000CA52C((uint64_t)v5);
    std::ios::~ios();
  }
  v5[0] = (void **)(a1 + 16);
  sub_100073018(v5);
  return a1;
}

void *sub_1000CA334(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000CA49C((uint64_t)a1, a2);
  *a1 = off_1001B5D08;
  a1[45] = &off_1001B5E08;
  a1[46] = &off_1001B5E30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5D08;
  a1[45] = off_1001B5D90;
  a1[46] = off_1001B5DB8;
  return a1;
}

void sub_1000CA434(_Unwind_Exception *a1)
{
  sub_1000CA52C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000CA458(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CA49C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5EA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CA518(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CA52C(uint64_t a1)
{
  *(void *)a1 = off_1001B5EA0;
  sub_1000CA934(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000CA668(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000CA52C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000CA6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000CA708(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000CA770(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000CA52C(v1);
  return std::ios::~ios();
}

void sub_1000CA7BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000CA52C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000CA820(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000CA52C(v1);
  return std::ios::~ios();
}

void sub_1000CA880(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000CA52C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000CA8FC(uint64_t a1)
{
  sub_1000CA52C(a1);
  operator delete();
}

uint64_t sub_1000CA934(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000CAAB8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000CAA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000CAAB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 41;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 41;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000CACA0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B24E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CAD1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CAD30(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2708;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CADAC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CADC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2928;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CAE3C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CAE50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2B48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CAECC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CAEE0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2D68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CAF5C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CAF70(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B2F88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CAFEC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB000(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B31A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB07C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB090(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B33C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB10C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB120(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B35E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB19C(_Unwind_Exception *a1)
{
}

void sub_1000CB1B0(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X8>)
{
  char v10 = *a1;
  unint64_t v11 = sub_1000CB250((uint64_t)a1, a3);
  if (v11 >> 59) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  os_log_type_t v12 = (char *)v11;
  uint64_t v13 = operator new(16 * v11);
  sub_1000CB2C8(a1, v13, v12, a2, a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t sub_1000CB250(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000CB2C8(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  os_log_type_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (*a1) {
    BOOL v14 = __dst == 0;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v15 = v14 || v12 == __src;
  char v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    char v16 = (_OWORD *)((char *)__dst + __src - v12);
  }
  _OWORD *v16 = *a6;
  if (__src)
  {
    int v17 = &v12[16 * (void)v13];
    if (v17 != __src && v16 != 0) {
      memmove(&v16[a5], __src, v17 - __src);
    }
  }
  if (v12 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t sub_1000CB39C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3808;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB418(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB42C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3A28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB4A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB4BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3C48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB538(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB54C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B3E68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB5C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB5DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4088;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB658(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB66C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B42A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB6E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB6FC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B44C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB778(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CB78C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B46E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CB808(_Unwind_Exception *a1)
{
}

void sub_1000CB81C(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(v3 + 136) = sub_10014B80C();
  *(void *)(v3 + 144) = v4;
  sub_10007E838(*(void *)(v2 + 560));
}

void sub_1000CB868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v63 = v59;
  if (a2 == 1)
  {
    v60 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((void *)&a11 + 1) = 81;
    a12 = 16;
    sub_1000CB944(&a14, &a11);
    sub_10014B74C(&a59, (uint64_t)v60);
    std::ostream::~ostream();
    sub_1000CBB3C((uint64_t)&a14);
    std::ios::~ios();
    int v61 = v60[2];
    if (v61 < 0) {
      int v62 = v60[2];
    }
    else {
      int v62 = -v61;
    }
    **(_DWORD **)(v63 + 8) = v62;
    __cxa_end_catch();
    JUMPOUT(0x1000CB854);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000CB944(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000CBAAC((uint64_t)a1, a2);
  *a1 = off_1001B5F28;
  a1[45] = &off_1001B6028;
  a1[46] = &off_1001B6050;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B5F28;
  a1[45] = off_1001B5FB0;
  a1[46] = off_1001B5FD8;
  return a1;
}

void sub_1000CBA44(_Unwind_Exception *a1)
{
  sub_1000CBB3C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000CBA68(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CBAAC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B60C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CBB28(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CBB3C(uint64_t a1)
{
  *(void *)a1 = off_1001B60C0;
  sub_1000CBF44(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000CBC78(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000CBB3C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000CBCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000CBD18(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000CBD80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000CBB3C(v1);
  return std::ios::~ios();
}

void sub_1000CBDCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000CBB3C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000CBE30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000CBB3C(v1);
  return std::ios::~ios();
}

void sub_1000CBE90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000CBB3C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000CBF0C(uint64_t a1)
{
  sub_1000CBB3C(a1);
  operator delete();
}

uint64_t sub_1000CBF44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000CC0C8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000CC0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000CC0C8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 307;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v14 = a2;
      }
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 307;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000CC2B0(void *a1)
{
  uint64_t v1 = qword_1001D3B38;
  unsigned __int8 v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      uint64_t v4 = sub_10000A364(v3 + 4);
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      v1 += v4;
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return v1;
}

uint64_t sub_1000CC334(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4B28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC3B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC3C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4D48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC440(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC454(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B4F68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC4D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC4E4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_1000CC53C((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1000CC524(_Unwind_Exception *a1)
{
  sub_10000953C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1000CC53C(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = sub_10000E674(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_1000CC5C8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5188;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC644(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC658(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B53A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC6D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC6E8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B55C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC764(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC778(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B57E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC7F4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC808(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B5A08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000CC884(_Unwind_Exception *a1)
{
}

void sub_1000CC914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CCA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CCBC8(_Unwind_Exception *a1, int a2)
{
  char v6 = v5;

  if (a2 == 1)
  {
    uint64_t v9 = +[DIError errorWithDIException:__cxa_begin_catch(a1) description:0 prefix:0 error:0];
    char v10 = (void *)v3[6];
    v3[6] = v9;

    __cxa_end_catch();
    JUMPOUT(0x1000CCBA8);
  }

  _Unwind_Resume(a1);
}

void sub_1000CCC54()
{
}

void sub_1000CCC5C()
{
}

void sub_1000CCD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CCF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD178(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    BOOL v7 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v7 error:v2];

    objc_end_catch();
    JUMPOUT(0x1000CD140);
  }
  _Unwind_Resume(a1);
}

void sub_1000CD754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CDD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CDE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20,__int16 a21,int a22)
{
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Failed opening the shadow/cache file(s)" error:v23];
    __cxa_end_catch();
    JUMPOUT(0x1000CE044);
  }

  _Unwind_Resume(a1);
}

void sub_1000CE474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CE764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100004944(v12);
  }
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CE8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CE92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CEB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF4CC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  char v6 = v5;
  uint64_t v7 = 514;
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a1 + 41)) {
      uint64_t v7 = 514;
    }
    else {
      uint64_t v7 = 2562;
    }
  }
  if ([v5 isCache])
  {
    [v6 createBackendWithFlags:v7];
    int v8 = *__error();
    if (sub_1000D850C())
    {
      uint64_t v9 = sub_1000D848C();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      char v10 = [v6 URL];
      [v10 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      BOOL v14 = sub_1000D848C();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v15 = [v6 URL];
        char v16 = [v15 path];
        *(_DWORD *)buf = 68158211;
        int v29 = 61;
        __int16 v30 = 2080;
        unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
        __int16 v32 = 2113;
        id v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%.*s: Cache file %{private}@ opened with RW access", buf, 0x1Cu);
      }
    }
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    os_log_type_t v12 = [*(id *)(a1 + 32) nodes];
    if ((char *)[v12 count] - 1 == a3) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  [v6 createBackendWithFlags:v13];
  if ((v13 & 3) != 0)
  {
    int v8 = *__error();
    if (sub_1000D850C())
    {
      int v17 = sub_1000D848C();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      __int16 v18 = [v6 URL];
      [v18 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();

      if (!v19) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    __int16 v22 = sub_1000D848C();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = [v6 URL];
      uint64_t v24 = [v23 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%.*s: Shadow file %{private}@ opened with RW access", buf, 0x1Cu);
    }
  }
  else
  {
    int v8 = *__error();
    if (sub_1000D850C())
    {
      __int16 v20 = sub_1000D848C();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      uint64_t v21 = [v6 URL];
      [v21 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();

      if (!v19) {
        goto LABEL_33;
      }
LABEL_25:
      fprintf(__stderrp, "%s\n", v19);
      free(v19);
      goto LABEL_33;
    }
    uint64_t v25 = sub_1000D848C();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = [v6 URL];
      uint64_t v27 = [v26 path];
      *(_DWORD *)buf = 68158211;
      int v29 = 61;
      __int16 v30 = 2080;
      unint64_t v31 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%.*s: Using an existing shadow file: %{private}@", buf, 0x1Cu);
    }
  }
LABEL_33:
  *__error() = v8;
}

void sub_1000CFA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_1000D01A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D03CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D05B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000D05CC(id a1, DIShadowNode *a2, NSDictionary *a3)
{
  return ![(DIShadowNode *)a2 isCache];
}

void sub_1000D09B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a19) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a17);
  }
  if (v20) {
    sub_100004944(v20);
  }

  _Unwind_Resume(a1);
}

void sub_1000D0B8C(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000D0C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D15DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D15F8(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  id v3 = a1;
  if ([v3 decodeBytesForKey:@"crypto_header" returnedLength:&v6])
  {
    if (v6 == 76) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v5);
    sub_1000039A0(v5, (uint64_t)"Unexpected crypto header length (", 33);
    std::ostream::operator<<();
    sub_1000039A0(v5, (uint64_t)")", 1);
    sub_10000550C((uint64_t)exception, (uint64_t)v5, 0x9Au);
  }
  *a2 = 0;
}

void sub_1000D1714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000359C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000D17D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D1980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1000D1A70()
{
}

void sub_1000D1BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D1E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D21E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  sub_10006A99C((uint64_t)&a11);

  if (a26) {
    sub_100004944(a26);
  }

  _Unwind_Resume(a1);
}

void sub_1000D2314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000D2618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D27BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  if (a12) {
    sub_100004944(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000D290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  if (a10) {
    sub_100004944(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000D2A8C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000D2C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2CC4()
{
}

void sub_1000D2CCC(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  size_t v22 = 0;
  size_t v23 = 0;
  id v5 = a1;
  id v6 = [v5 decodeBytesForKey:@"encKeys" returnedLength:&v23];
  id v7 = v5;
  id v8 = [v7 decodeBytesForKey:@"prngKeys" returnedLength:&v22];
  if (v6 && (uint64_t v9 = v8) != 0)
  {
    __int16 v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    sub_1000D659C(&v19, v6, (uint64_t)v6 + v23, v23);
    uint64_t v18 = 0;
    __n128 v17 = 0uLL;
    sub_1000D659C(&v17, v9, (uint64_t)v9 + v22, v22);
    sub_10013FD4C(v11, (uint64_t)&v19, &v17, a2);
    sub_10006D5A4(a3);
    if (__p)
    {
      char v16 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      operator delete();
    }
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }
    if (v19)
    {
      __int16 v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1000D2E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_10006A99C((uint64_t)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(void *)(v22 - 88) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1000D3034(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000D308C(void *a1, void *a2)
{
  id v3 = a1;
  [v3 encodeBytes:a2[6] length:76 forKey:@"crypto_header"];
  [v3 encodeBytes:*a2 length:a2[1] - *a2 forKey:@"encKeys"];
  [v3 encodeBytes:a2[3] length:a2[4] - a2[3] forKey:@"prngKeys"];
}

void sub_1000D3114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D31F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  if (a12) {
    sub_100004944(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000D32F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  if (a12) {
    sub_100004944(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000D337C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D3470(_Unwind_Exception *a1)
{
  if (v3) {
    sub_100004944(v3);
  }
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000D359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  if (v11) {
    sub_100004944(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1000D366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  if (a10) {
    sub_100004944(a10);
  }

  _Unwind_Resume(a1);
}

#error "1000D3928: call analysis failed (funcsize=142)"

void sub_1000D3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  if (a10) {
    sub_100004944(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000D3CC4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000D3DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D40DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_100004944(a17);
  }

  _Unwind_Resume(a1);
}

void sub_1000D420C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000D42FC(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1000D4444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D45A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D4678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D47E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D49EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D4AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D4D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_100004944(a16);
  }
  if (a14) {
    sub_100004944(a14);
  }
  if (a12) {
    sub_100004944(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1000D4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    sub_100004944(a14);
  }
  if (a12) {
    sub_100004944(a12);
  }
  if (a16) {
    sub_100004944(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000D5070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D52D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    sub_100004944(a12);
  }
  if (a10) {
    sub_100004944(a10);
  }
  if (a16) {
    sub_100004944(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1000D5528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a16) {
    sub_100004944(a16);
  }
  if (a14) {
    sub_100004944(a14);
  }
  if (a22) {
    sub_100004944(a22);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000D55A4(void *a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    id v5 = a1;
    id v6 = +[NSString stringWithUTF8String:a2];
    id v7 = [v5 objectForKeyedSubscript:v6];
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 length])
      {
        id v8 = malloc_type_malloc((size_t)[v7 length], 0x2E7B6484uLL);
        *a3 = v8;
        if (v8)
        {
          id v9 = v7;
          memcpy(v8, [v9 bytes], (size_t)objc_msgSend(v9, "length"));
          uint64_t v10 = (uint64_t)[v9 length];
        }
        else
        {
          int v20 = *__error();
          if (sub_1000D850C())
          {
            uint64_t v21 = sub_1000D848C();
            os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 68158466;
            int v25 = 59;
            __int16 v26 = 2080;
            uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2048;
            id v29 = [v7 length];
            __int16 v30 = 2112;
            unint64_t v31 = v6;
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();

            if (v22)
            {
              fprintf(__stderrp, "%s\n", v22);
              free(v22);
            }
          }
          else
          {
            size_t v23 = sub_1000D848C();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68158466;
              int v25 = 59;
              __int16 v26 = 2080;
              uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              __int16 v28 = 2048;
              id v29 = [v7 length];
              __int16 v30 = 2112;
              unint64_t v31 = v6;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%.*s: Out of memory, failed to allocated %zu bytes for key %@", buf, 0x26u);
            }
          }
          *__error() = v20;
          uint64_t v10 = -12;
        }
      }
      else
      {
        int v15 = *__error();
        if (sub_1000D850C())
        {
          char v16 = sub_1000D848C();
          os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          int v25 = 59;
          __int16 v26 = 2080;
          uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          __int16 v28 = 2112;
          id v29 = v6;
          __n128 v17 = (char *)_os_log_send_and_compose_impl();

          if (v17)
          {
            fprintf(__stderrp, "%s\n", v17);
            free(v17);
          }
        }
        else
        {
          uint64_t v18 = sub_1000D848C();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v25 = 59;
            __int16 v26 = 2080;
            uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v28 = 2112;
            id v29 = v6;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v15;
        uint64_t v10 = -22;
      }
    }
    else
    {
      uint64_t v10 = -2;
    }
  }
  else
  {
    int v11 = *__error();
    if (sub_1000D850C())
    {
      os_log_type_t v12 = sub_1000D848C();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v25 = 59;
      __int16 v26 = 2080;
      uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }
    else
    {
      uint64_t v14 = sub_1000D848C();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v25 = 59;
        __int16 v26 = 2080;
        uint64_t v27 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v11;
    return -22;
  }
  return v10;
}

void sub_1000D5B08(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1000D5B64(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v3 = a1;
    char v4 = +[NSString stringWithUTF8String:a2];
    id v5 = [v3 objectForKeyedSubscript:v4];
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v6 = dup((int)[v5 fileDescriptor]);
        if ((v6 & 0x80000000) != 0) {
          uint64_t v6 = -*__error();
        }
      }
      else
      {
        int v11 = *__error();
        if (sub_1000D850C())
        {
          os_log_type_t v12 = sub_1000D848C();
          os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 68158210;
          int v17 = 42;
          __int16 v18 = 2080;
          uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
          __int16 v20 = 2112;
          uint64_t v21 = v4;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          if (v13)
          {
            fprintf(__stderrp, "%s\n", v13);
            free(v13);
          }
        }
        else
        {
          uint64_t v14 = sub_1000D848C();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v17 = 42;
            __int16 v18 = 2080;
            uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
            __int16 v20 = 2112;
            uint64_t v21 = v4;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }
        *__error() = v11;
        uint64_t v6 = 4294967274;
      }
    }
    else
    {
      uint64_t v6 = 4294967294;
    }
  }
  else
  {
    int v7 = *__error();
    if (sub_1000D850C())
    {
      id v8 = sub_1000D848C();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v17 = 42;
      __int16 v18 = 2080;
      uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
      id v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = sub_1000D848C();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v17 = 42;
        __int16 v18 = 2080;
        uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
    return 4294967274;
  }
  return v6;
}

void sub_1000D5EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D602C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D6050(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a3 && a4)
  {
    id v13 = a1;
    int v7 = +[NSString stringWithUTF8String:a2];
    id v8 = +[NSData dataWithBytes:a3 length:a4];
    [v13 setObject:v8 forKeyedSubscript:v7];
  }
  else
  {
    int v9 = *__error();
    if (sub_1000D850C())
    {
      uint64_t v10 = sub_1000D848C();
      os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v15 = 69;
      __int16 v16 = 2080;
      int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      int v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }
    else
    {
      os_log_type_t v12 = sub_1000D848C();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v15 = 69;
        __int16 v16 = 2080;
        int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v9;
  }
}

void sub_1000D6290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1000D62C4(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    id v11 = a1;
    id v5 = +[NSString stringWithUTF8String:a2];
    id v6 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:a3];
    [v11 setObject:v6 forKeyedSubscript:v5];
  }
  else
  {
    int v7 = *__error();
    if (sub_1000D850C())
    {
      id v8 = sub_1000D848C();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68157954;
      int v13 = 48;
      __int16 v14 = 2080;
      int v15 = "void plugin_encode_fd(void *, const char *, int)";
      int v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf(__stderrp, "%s\n", v9);
        free(v9);
      }
    }
    else
    {
      uint64_t v10 = sub_1000D848C();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v13 = 48;
        __int16 v14 = 2080;
        int v15 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }
    *__error() = v7;
  }
}

void sub_1000D64F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *sub_1000D659C(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    id v6 = result;
    uint64_t result = sub_10006AA8C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000D65FC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D6618@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_1000D6694(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000D6680(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6694(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A84F8;
  sub_1001406B0(a1 + 24);
  return a1;
}

void sub_1000D66E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D66F8(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0x470uLL);
  sub_1000D6774(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D6760(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6774(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  sub_1000D67D0((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000D67BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D67D0(uint64_t a1, char **a2, _DWORD *a3)
{
  sub_100004890(__p, *a2);
  LODWORD(a3) = *a3;
  uint64_t v5 = sub_100126808((uint64_t)__p, (int)a3);
  sub_10005B2E0(a1, v5, (a3 & 3) != 0, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D6844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D6860(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x470uLL);
  sub_1000D68EC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000D68D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D68EC(void *a1, unsigned int *a2, unsigned __int8 *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  sub_10005B2E0((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1000D6940(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6954(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0xB0uLL);
  sub_1000D69E8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D69D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D69E8(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B61D0;
  sub_10007E6CC(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1000D6A38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6A4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B61D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D6A6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B61D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D6AC0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000D6AE8(char **a1@<X1>, _DWORD *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0xB0uLL);
  sub_1000D6B74(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000D6B60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6B74(void *a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B61D0;
  sub_1000D6BD0((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000D6BBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6BD0(uint64_t a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  sub_100004890(__p, *a2);
  LODWORD(a3) = *a3;
  unint64_t v7 = *a4;
  *(void *)&long long v12 = sub_10014B80C();
  *((void *)&v12 + 1) = v8;
  sub_10007E2E0(a1, (uint64_t)__p, (__int16)a3, v7, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D6C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000D6CA0(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  id v6 = operator new(0xB0uLL);
  sub_1000D6D1C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D6D08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6D1C(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B61D0;
  sub_1000D6D78((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000D6D64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6D78(uint64_t a1, char **a2, _DWORD *a3)
{
  sub_100004890(__p, *a2);
  LODWORD(a3) = *a3;
  *(void *)&long long v9 = sub_10014B80C();
  *((void *)&v9 + 1) = v5;
  sub_10007E2E0(a1, (uint64_t)__p, (__int16)a3, 0, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D6E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000D6E38(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_1000D6EAC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000D6E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6EAC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019EB88;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_10014B80C();
  uint64_t v6 = v5;
  sub_100149398(a1 + 3);
  a1[3] = off_10019EBD8;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_1000D6F34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D6F48(size_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x80uLL);
  sub_1000D6FC4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D6FB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D6FC4(void *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6220;
  sub_1000D70C8(a1 + 3, *a2, *a3, a3[1]);
  return a1;
}

void sub_1000D7018(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D702C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D704C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D70A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D70C8(void *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_100149398(a1);
  *char v8 = off_1001C1D50;
  v8[3] = 0;
  long long v9 = v8 + 3;
  v8[7] = 0;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  uint64_t v10 = malloc_type_valloc(a2, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_alloc::bad_alloc(exception);
  }
  v16[0] = off_1001B6270;
  v16[3] = v16;
  __int16 v14 = v10;
  sub_10004A2B0((uint64_t)v15, (uint64_t)v16);
  sub_10004A330(v16);
  sub_1000D7254(v9, (uint64_t *)&v14);
  sub_10004A3B4((uint64_t *)&v14, 0);
  sub_10004A330(v15);
  a1[8] = a1[3];
  a1[12] = getpagesize();
  return a1;
}

void sub_1000D7228(_Unwind_Exception *a1)
{
  sub_10004A3B4(v2, 0);
  sub_10004A330((void *)(v1 + 32));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D7254(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_10004A3B4(a1, v4);
  sub_1000D7364(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1000D729C()
{
}

void *sub_1000D72B0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001B6270;
  return result;
}

void sub_1000D72E8(uint64_t a1, void *a2)
{
  *a2 = off_1001B6270;
}

void sub_1000D7310(uint64_t a1, void **a2)
{
}

uint64_t sub_1000D7318(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B62D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000D7358()
{
  return &off_1001B62D0;
}

void *sub_1000D7364(void *a1, uint64_t a2)
{
  sub_1000D73E8(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1000D73E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000D7470(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  sub_1000D74EC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D74D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D74EC(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019EB88;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  sub_100149398(a1 + 3);
  a1[3] = off_10019EBD8;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  return a1;
}

void sub_1000D7568(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D757C(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000D75F8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D75E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D75F8(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A8548;
  int v5 = 0;
  sub_1001419EC(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000D7650(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7664(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000D76E0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D76CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D76E0(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A8548;
  int v5 = 0;
  sub_1001419EC(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000D7738(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D774C(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000D77C0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001CC0C((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D77AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D77C0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B62F0;
  sub_1001109E0(a1 + 3);
  return a1;
}

void sub_1000D7808(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D781C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B62F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D783C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B62F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D7890(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000D78B8(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000D792C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001CC0C((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D7918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D792C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B62F0;
  sub_1001109E0(a1 + 3);
  return a1;
}

void sub_1000D7974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7988(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  sub_1000D7A04(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001CC0C((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000D79F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D7A04(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6340;
  sub_100124A28(a1 + 3);
  return a1;
}

void sub_1000D7A4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7A60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D7A80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D7AD4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D7AFC@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = sub_1000D7B58(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000D7B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D7B58(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6390;
  sub_100004890(a1 + 3, *a2);
  return a1;
}

void sub_1000D7BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D7BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000D7C2C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_1000D7C44(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  sub_1000D7CD0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000D7CBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D7CD0(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B63E0;
  sub_100135DE4(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000D7D1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7D30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B63E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D7D50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B63E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D7DA4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D7DCC@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x40uLL);
  uint64_t result = sub_1000D7E40(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000D7E2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D7E40(void *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6430;
  sub_1000D7F1C((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000D7E88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D7E9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D7EBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000D7F10(uint64_t a1)
{
}

uint64_t sub_1000D7F1C(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  sub_100004890(__p, *a2);
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  sub_1000751AC(a1, __p, v7, v8 | (unint64_t)&_mh_execute_header, v10, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D7F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7FB8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_100004944(v2);
  }
}

void sub_1000D800C(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  sub_1000D8080(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000D806C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D8080(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6480;
  sub_100149398(a1 + 3);
  a1[3] = off_1001B64D0;
  uint64_t v4 = a2[1];
  a1[6] = *a2;
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1000D8100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000D8114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000D8134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B6480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000D8188(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000D81B0(void *a1)
{
  *a1 = off_1001B64D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1000D8208(void *a1)
{
  *a1 = off_1001B64D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete();
}

uint64_t sub_1000D8280()
{
  return 4294967251;
}

uint64_t sub_1000D8288(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 8))() * v2;
}

void *sub_1000D82D0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 24) + 24))(*(void **)(a1 + 24));
}

uint64_t sub_1000D82E0()
{
  return 4294967251;
}

void *sub_1000D82E8(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"BackendPlugin", 13);
}

uint64_t sub_1000D82FC()
{
  return 4294967251;
}

uint64_t sub_1000D8304()
{
  return 4294967251;
}

uint64_t sub_1000D830C(uint64_t a1)
{
  return sub_1000721F0(*(void *)(a1 + 24));
}

void *sub_1000D8314@<X0>(char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  char v12 = operator new(0x40uLL);
  uint64_t result = sub_1000D83A0(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1000D838C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000D83A0(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6430;
  sub_1000D83FC((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1000D83E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D83FC(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  sub_100004890(__p, *a2);
  sub_1000751AC(a1, __p, 0, 0, a5, *a6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000D8470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D848C()
{
  if (qword_1001D4808 != -1) {
    dispatch_once(&qword_1001D4808, &stru_1001B65B8);
  }
  return qword_1001D4800;
}

void sub_1000D84D0(id a1)
{
  qword_1001D4800 = (uint64_t)os_log_create("com.apple.DiskImages2", "Default");
}

uint64_t sub_1000D8500(uint64_t result)
{
  byte_1001D4810 = result;
  return result;
}

uint64_t sub_1000D850C()
{
  return byte_1001D4810;
}

uint64_t sub_1000D8518(uint64_t result)
{
  byte_1001D4811 = result;
  return result;
}

uint64_t sub_1000D8524()
{
  return byte_1001D4811;
}

const void **sub_1000D8530@<X0>(uint64_t a1@<X1>, char a2@<W2>, const __CFArray **a3@<X8>)
{
  CFArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4), &kCFTypeArrayCallBacks);
  CFArrayRef theArray = Mutable;
  uint64_t v7 = *(int **)(a1 + 16);
  uint64_t v8 = *(int **)(a1 + 24);
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(char **__return_ptr))(**((void **)v7 + 3) + 48))(&v22);
      CFIndex Count = CFArrayGetCount(theArray);
      CFStringRef v10 = @"Base";
      if (Count != -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)) {
        CFStringRef v10 = off_1001B7338[*v7];
      }
      CFStringRef v21 = v10;
      char v11 = theArray;
      if ((a2 & 4) != 0)
      {
        CFStringRef v24 = @"Role";
        CFStringRef v25 = v10;
        CFRetain(v10);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 16))(&v17);
        CFStringRef v26 = @"Image";
        uint64_t v27 = v17;
        uint64_t v17 = 0;
        __int16 v18 = &v24;
        uint64_t v19 = 2;
        sub_100123438((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_1000055AC((const void **)&value);
        for (uint64_t i = 24; i != -8; i -= 16)
          sub_100005614((const void **)((char *)&v24 + i));
        sub_10000D758((const void **)&v17);
      }
      else
      {
        CFStringRef v24 = @"Role";
        CFStringRef v25 = v10;
        CFRetain(v10);
        uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 24))(&v22[*(void *)(*(void *)v22 - 96)]);
        CFStringRef v26 = @"Image Format";
        uint64_t v27 = v12;
        __int16 v18 = &v24;
        uint64_t v19 = 2;
        sub_100123438((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_1000055AC((const void **)&value);
        for (uint64_t j = 24; j != -8; j -= 16)
          sub_100005614((const void **)((char *)&v24 + j));
      }
      sub_10004044C((const void **)&v21);
      int v15 = v22;
      uint64_t v22 = 0;
      if (v15) {
        (*(void (**)(char *))(*(void *)v15 + 8))(v15);
      }
      v7 += 12;
    }
    while (v7 != v8);
    CFArrayRef Mutable = theArray;
  }
  *a3 = Mutable;
  CFArrayRef theArray = 0;
  return sub_10002E964((const void **)&theArray);
}

void sub_1000D8820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, const void *a17, char a18)
{
  sub_1000055AC(&a14);
  for (uint64_t i = 24; i != -8; i -= 16)
    sub_100005614((const void **)(&a18 + i));
  sub_10000D758(&a11);
  sub_10004044C(&a15);
  uint64_t v20 = a16;
  a16 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_10002E964(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D8904(uint64_t *a1, uint64_t a2, char a3)
{
  a1[5] = (uint64_t)off_1001A31A8;
  a1[6] = (uint64_t)off_1001A31D8;
  a1[7] = (uint64_t)off_1001A3208;
  a1[8] = (uint64_t)off_1001A3238;
  *a1 = (uint64_t)off_1001B6D38;
  a1[3] = (uint64_t)off_1001B6D80;
  a1[4] = (uint64_t)off_1001B6DC8;
  a1[5] = (uint64_t)off_1001B6E10;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B6E58;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B6EA0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B6EE8;
  *a1 = (uint64_t)off_1001B6B10;
  a1[3] = (uint64_t)off_1001B6B58;
  a1[4] = (uint64_t)off_1001B6BA0;
  a1[5] = (uint64_t)off_1001B6BE8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B6C30;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B6C78;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B6CC0;
  a1[9] = (uint64_t)off_1001B6F48;
  a1[3] = (uint64_t)off_1001B6FA0;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 112) = 0;
  *((unsigned char *)a1 + 120) = 0;
  a1[17] = (uint64_t)off_1001B7090;
  a1[5] = (uint64_t)off_1001B70E8;
  *((unsigned char *)a1 + 144) = 0;
  *((unsigned char *)a1 + 152) = 0;
  a1[20] = 0;
  sub_1000D9154(a1 + 21, (uint64_t *)&off_1001B6A90, a2);
  *a1 = (uint64_t)off_1001B6658;
  a1[3] = (uint64_t)off_1001B66A0;
  a1[4] = (uint64_t)off_1001B66E8;
  a1[5] = (uint64_t)off_1001B6730;
  a1[6] = (uint64_t)off_1001B6778;
  a1[7] = (uint64_t)off_1001B67C0;
  a1[8] = (uint64_t)off_1001B6808;
  a1[9] = (uint64_t)off_1001B6868;
  a1[17] = (uint64_t)off_1001B68D8;
  a1[21] = (uint64_t)off_1001B6948;
  a1[1] = 0;
  int v5 = (CFTypeRef *)(a1 + 1);
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 2);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  long long v9 = *(std::__shared_weak_count **)(v7 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(char **__return_ptr))(*(void *)v8 + 48))(&v22);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 24)] + 16))(&v22[*(void *)(*(void *)v22 - 24)]);
  uint64_t v11 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = *(void *)(v10 + 16);
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 112) + 8) = *(void *)(v10 + 8);
  *(uint64_t *)((char *)a1 + *(void *)(v11 - 112) + 56) = *(void *)(v10 + 56);
  uint64_t v12 = (uint64_t)a1 + *(void *)(v11 - 112);
  uint64_t v13 = *(void *)(v10 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v10 + 48);
  *(void *)(v12 + 40) = v13;
  uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v15 = *(void *)(v10 + 24);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v10 + 32);
  *(void *)(v14 + 24) = v15;
  uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 64)] + 16))(&v22[*(void *)(*(void *)v22 - 64)]);
  sub_10002D624((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 16), (CFTypeRef *)(v16 + 16));
  sub_10002D624((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 24), (CFTypeRef *)(v16 + 24));
  sub_1000D8530(a2, a3, (const __CFArray **)&v21);
  if (*v5) {
    CFRelease(*v5);
  }
  *int v5 = v21;
  CFStringRef v21 = 0;
  sub_10002D538(&v21);
  uint64_t v17 = (const void *)(*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 24))(&v22[*(void *)(*(void *)v22 - 96)]);
  CFStringRef v21 = v17;
  if (*v6)
  {
    CFRelease(*v6);
    uint64_t v17 = v21;
  }
  CFTypeRef *v6 = v17;
  CFStringRef v21 = 0;
  sub_10004044C(&v21);
  __int16 v18 = v22;
  uint64_t v22 = 0;
  if (v18) {
    (*(void (**)(char *))(*(void *)v18 + 8))(v18);
  }
  if (v9) {
    sub_100004944(v9);
  }
  return a1;
}

void sub_1000D90A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12)
{
  sub_10004044C(&a11);
  uint64_t v18 = a12;
  a12 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v14) {
    sub_100004944(v14);
  }
  sub_10004044C(v13);
  sub_10002D538(v16);
  sub_10003DE58(v15, (uint64_t *)&off_1001B6A90);
  sub_10003DFE0(v12, (uint64_t *)&off_1001B6A70);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D9154(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_1001A3688;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t v7 = sub_10006DC94(*(uint64_t (****)(void))(*(void *)(a3 + 16) + 24));
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  CFStringRef v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  CFStringRef v12 = 0;
  sub_10004044C((const void **)&v12);
  sub_1000409DC((const void **)&v13);
  return a1;
}

void sub_1000D9320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10004044C(&a9);
  sub_1000409DC(&a10);
  sub_10004044C((const void **)(v10 + 24));
  sub_10004044C((const void **)(v10 + 16));
  sub_10004044C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D936C(uint64_t a1)
{
  uint64_t v2 = sub_1000DA9E0(a1, (uint64_t *)off_1001B6978);
  *(void *)(v2 + 168) = off_1001B71D8;
  *(void *)(v2 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v2 + 192));
  sub_10004044C((const void **)(a1 + 184));
  sub_10004044C((const void **)(a1 + 176));
  *(void *)(a1 + 136) = off_1001B7090;
  *(void *)(a1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(a1 + 160));
  return a1;
}

void sub_1000D943C(uint64_t a1)
{
  uint64_t v2 = sub_1000DA9E0(a1, (uint64_t *)off_1001B6978);
  *(void *)(v2 + 168) = off_1001B71D8;
  *(void *)(v2 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v2 + 192));
  sub_10004044C((const void **)(a1 + 184));
  sub_10004044C((const void **)(a1 + 176));
  *(void *)(a1 + 136) = off_1001B7090;
  *(void *)(a1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(a1 + 160));
  operator delete();
}

const void **sub_1000D952C@<X0>(CFArrayRef *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*((uint64_t (**)(CFArrayRef *))*a1 + 3))(a1);
  v13[0] = @"Image Format";
  v13[1] = v4;
  v13[2] = @"Format Description";
  v13[3] = @"Stackable image";
  sub_10003E914((uint64_t)a1 + *((void *)*a1 - 14), &valuePtr);
  v13[4] = @"Size Info";
  v13[5] = valuePtr;
  CFIndex valuePtr = 0;
  sub_10000D758((const void **)&valuePtr);
  sub_10003ECB0((uint64_t)a1 + *((void *)*a1 - 15), &valuePtr);
  v13[6] = @"Encryption Info";
  v13[7] = valuePtr;
  CFIndex valuePtr = 0;
  sub_10000D758((const void **)&valuePtr);
  sub_10003F660((CFArrayRef *)((char *)a1 + *((void *)*a1 - 16)), &valuePtr);
  unsigned char v13[8] = @"Identity Info";
  v13[9] = valuePtr;
  CFIndex valuePtr = 0;
  sub_10000D758((const void **)&valuePtr);
  CFIndex valuePtr = CFArrayGetCount(a1[1]);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  v13[10] = @"Images Count";
  v13[11] = v5;
  uint64_t v9 = 0;
  CFArrayRef v6 = a1[1];
  v13[12] = @"Stack Info";
  v13[13] = v6;
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = (uint64_t)v13;
  v10[1] = 7;
  sub_100123438(v10, (CFMutableDictionaryRef *)&v11);
  *a2 = v11;
  uint64_t v11 = 0;
  sub_1000055AC(&v11);
  for (uint64_t i = 13; i != -1; i -= 2)
    sub_100005614((const void **)&v13[i]);
  return sub_1000055E0(&v9);
}

void sub_1000D973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1000055E0(&a9);
  do
  {
    sub_100005614(v14 - 1);
    v14 -= 2;
  }
  while (v14 != (const void **)&a14);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000D97A4()
{
  return @"STCK";
}

const void **sub_1000D97B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000D98A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000D99A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000D9A98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000D9BA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000D9C90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000D9D98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000D9E88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000D9F90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000DA080(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000DA188(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000DA278(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000DA380(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000DA470(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000DA578@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D952C((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000DA594()
{
  return @"STCK";
}

const void **sub_1000DA5A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000DA690(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000DA798@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D952C((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000DA7B4()
{
  return @"STCK";
}

const void **sub_1000DA7C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  return sub_10004044C((const void **)(v1 + 160));
}

void sub_1000DA8B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  sub_1000DA9E0(v1, (uint64_t *)off_1001B6978);
  *(void *)(v1 + 168) = off_1001B71D8;
  *(void *)(v1 + 64) = off_1001B7230;
  sub_10004044C((const void **)(v1 + 192));
  sub_10004044C((const void **)(v1 + 184));
  sub_10004044C((const void **)(v1 + 176));
  *(void *)(v1 + 136) = off_1001B7090;
  *(void *)(v1 + 40) = off_1001B70E8;
  sub_10004044C((const void **)(v1 + 160));
  operator delete();
}

const void **sub_1000DA9B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D952C((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

CFStringRef sub_1000DA9D4()
{
  return @"STCK";
}

uint64_t sub_1000DA9E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 104)) = a2[1];
  *(void *)(a1 + *(void *)(*(void *)a1 - 96)) = a2[2];
  *(void *)(a1 + *(void *)(*(void *)a1 - 24)) = a2[3];
  *(void *)(a1 + *(void *)(*(void *)a1 - 32)) = a2[4];
  *(void *)(a1 + *(void *)(*(void *)a1 - 40)) = a2[5];
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 112)) = a2[9];
  *(void *)(a1 + *(void *)(*(void *)a1 - 120)) = a2[10];
  *(void *)(a1 + *(void *)(*(void *)a1 - 128)) = a2[11];
  sub_10004044C((const void **)(a1 + 16));
  sub_10002D538((const void **)(a1 + 8));
  return a1;
}

void sub_1000DAD90(uint64_t *a1, uint64_t a2)
{
  if (*(void *)sub_1000DEB20(a2 + 32, *(void *)(a2 + 176)))
  {
    uint64_t v4 = *(void *)(a2 + 352);
    uint64_t v5 = *(void *)(a2 + 360);
    long long v21 = 0u;
    long long v22 = 0u;
    sub_1000E2180(a2 + 200, v19);
    CFArrayRef v6 = a1 + 2;
    if (v4 == v5)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v4 + 8 * v8) * *(unsigned int *)(a2 + 96);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(void *)(*a1 - 136));
          sub_1000EA510((atomic_ullong *)(a2 + 200), (uint64_t)v19, v8, v9, 0, 1, (atomic_ullong *)buf);
          if (*(void *)buf && !*(unsigned char *)(*(void *)buf + 520))
          {
            if (*(unsigned char *)(*(void *)buf + 400)) {
              uint64_t v10 = (uint64_t *)(*(void *)buf + 40);
            }
            else {
              uint64_t v10 = 0;
            }
            sub_1000DC410(a1, v10, (uint64_t)v19, &v21);
          }
          sub_1000DEBE8((atomic_ullong *)buf);
        }
        ++v8;
        v7 += 8;
      }
      while (v4 + v7 != v5);
      uint64_t v11 = *((void *)&v21 + 1);
    }
    uint64_t v12 = *v6;
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) -= v12
                                                            + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)
                                                            * v11;
    uint64_t v13 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) && sub_1000D8524())
    {
      int v14 = *__error();
      if (sub_1000D850C())
      {
        uint64_t v15 = sub_1000D848C();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 71;
        __int16 v24 = 2080;
        CFStringRef v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        __int16 v26 = 2048;
        uint64_t v27 = v13;
        uint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        if (v16)
        {
          uint64_t v17 = (char *)v16;
          fprintf(__stderrp, "%s\n", v16);
          free(v17);
        }
      }
      else
      {
        uint64_t v18 = sub_1000D848C();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 71;
          __int16 v24 = 2080;
          CFStringRef v25 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          __int16 v26 = 2048;
          uint64_t v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)", buf, 0x1Cu);
        }
      }
      *__error() = v14;
    }
    v19[0] = off_1001B8318;
    if (v20) {
      sub_100004944(v20);
    }
  }
}

void sub_1000DB0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a16) {
    sub_100004944(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DB130(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100004944(v3);
      }
      sub_1001498F0((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      CFArrayRef v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100004944(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1000DB238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100004944(v12);
  }
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DB268(void *a1, void *a2)
{
  uint64_t v4 = sub_1000F1530(a2);
  v14[4] = (const void *)v4;
  v14[5] = (const void *)v5;
  if (v4 | v5)
  {
    *(void *)&v15.byte8 = v5;
    *(void *)&v15.byte0 = v4;
    v14[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v15);
    CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v14[0]);
    v13[0] = v6;
    uint64_t v7 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128));
    if (v7[3])
    {
      CFRelease(v7[3]);
      CFStringRef v6 = (CFStringRef)v13[0];
    }
    v7[3] = v6;
    v13[0] = 0;
    sub_10004044C(v13);
    sub_1000409DC(v14);
  }
  uint64_t result = sub_1000F1524(a2);
  *(void *)&v9.byte8 = *(void *)&v9.byte0;
  v14[0] = (const void *)result;
  v14[1] = *(const void **)&v9.byte0;
  if (result | *(void *)&v9.byte0)
  {
    *(void *)&v9.byte0 = result;
    v13[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v9);
    CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v13[0]);
    CFStringRef v12 = v10;
    uint64_t v11 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128));
    if (v11[2])
    {
      CFRelease(v11[2]);
      CFStringRef v10 = v12;
    }
    void v11[2] = v10;
    CFStringRef v12 = 0;
    sub_10004044C((const void **)&v12);
    return (uint64_t)sub_1000409DC(v13);
  }
  return result;
}

void sub_1000DB3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  sub_10004044C((const void **)va);
  sub_1000409DC((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000DB420(void *a1, const void *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  v35[0] = Mutable;
  unint64_t v5 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 136));
  if (v5[10])
  {
    CFRelease(v5[10]);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v35[0];
  }
  v5[10] = Mutable;
  v35[0] = 0;
  sub_10002E964(v35);
  sub_1000E2180((uint64_t)a2 + 200, v28);
  CFStringRef v6 = *(const void **)((char *)a1 + *(void *)(*a1 - 112) + 16);
  v35[0] = a2;
  v35[1] = 0;
  v35[2] = v6;
  char v36 = 2;
  uint64_t v37 = 0;
  uint64_t v38 = v28;
  int v39 = 2;
  v40[0] = off_10019E428;
  v40[3] = v40;
  sub_100013494((uint64_t)v35, (uint64_t)&v23);
  sub_100013530((uint64_t)v35, (uint64_t)v22);
  while (sub_10010B590((uint64_t)&v23, (uint64_t)v22))
  {
    if (v27 == 3)
    {
      int v15 = *__error();
      if (sub_1000D850C())
      {
        uint64_t v16 = sub_1000D848C();
        os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        value = (void *)0x4B04100302;
        __int16 v31 = 2080;
        __int16 v32 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        __int16 v33 = 2048;
        uint64_t v34 = v24;
        uint64_t v17 = (const char *)_os_log_send_and_compose_impl();
        if (v17)
        {
          uint64_t v18 = (char *)v17;
          fprintf(__stderrp, "%s\n", v17);
          free(v18);
        }
      }
      else
      {
        uint64_t v19 = sub_1000D848C();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302;
          __int16 v31 = 2080;
          __int16 v32 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          __int16 v33 = 2048;
          uint64_t v34 = v24;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%.*s: Failed during ASIF extents enumeration on offset: %llu", (uint8_t *)&value, 0x1Cu);
        }
      }
      *__error() = v15;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      long long v21 = std::generic_category();
      exception[1] = 22;
      exception[2] = v21;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }
    uint64_t v8 = v24;
    uint64_t v7 = v25;
    char v9 = v26;
    CFMutableArrayRef v10 = CFArrayCreateMutable(kCFAllocatorDefault, 2, &kCFTypeArrayCallBacks);
    value = v10;
    if ((v9 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    sub_100122BF0(v10, v11);
    sub_100122BF0(value, (v9 & 1) + v7 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)a1 + *(void *)(*a1 - 136) + 80), value);
    sub_10002E964((const void **)&value);
    sub_10010B7F8(&v23);
  }
  uint64_t v12 = v22[0];
  v22[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = v23;
  uint64_t v23 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  sub_10000C78C(v40);
  uint64_t v14 = v37;
  uint64_t v37 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
  }
  v28[0] = off_1001B8318;
  if (v29) {
    sub_100004944(v29);
  }
}

void sub_1000DB890(_Unwind_Exception *a1)
{
  sub_10002E964((const void **)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DB97C(uint64_t *a1, void *a2, char a3)
{
  a1[7] = (uint64_t)off_1001A31A8;
  a1[8] = (uint64_t)off_1001A31D8;
  a1[9] = (uint64_t)off_1001A3208;
  a1[10] = (uint64_t)off_1001A3238;
  *a1 = (uint64_t)off_1001B7B50;
  a1[5] = (uint64_t)off_1001B7B98;
  a1[6] = (uint64_t)off_1001B7BE0;
  a1[7] = (uint64_t)off_1001B7C28;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B7C70;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B7CB8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B7D00;
  *a1 = (uint64_t)off_1001B7928;
  a1[5] = (uint64_t)off_1001B7970;
  a1[6] = (uint64_t)off_1001B79B8;
  a1[7] = (uint64_t)off_1001B7A00;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B7A48;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B7A90;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B7AD8;
  a1[11] = (uint64_t)off_1001B7D60;
  a1[5] = (uint64_t)off_1001B7DB8;
  *((unsigned char *)a1 + 112) = 0;
  *((unsigned char *)a1 + 120) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[19] = (uint64_t)off_1001B7EA8;
  a1[7] = (uint64_t)off_1001B7F00;
  *((unsigned char *)a1 + 160) = 0;
  *((unsigned char *)a1 + 168) = 0;
  a1[22] = 0;
  sub_1000DC14C(a1 + 23, (uint64_t *)&off_1001B7888, (uint64_t)a2);
  a1[29] = 0;
  a1[37] = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *a1 = (uint64_t)off_1001B73D8;
  a1[5] = (uint64_t)off_1001B7420;
  a1[6] = (uint64_t)off_1001B7468;
  a1[7] = (uint64_t)off_1001B74B0;
  a1[8] = (uint64_t)off_1001B74F8;
  a1[9] = (uint64_t)off_1001B7540;
  a1[10] = (uint64_t)off_1001B7588;
  a1[11] = (uint64_t)off_1001B75E8;
  a1[19] = (uint64_t)off_1001B7658;
  a1[23] = (uint64_t)off_1001B76C8;
  a1[27] = (uint64_t)off_1001B7738;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v5;
  uint64_t v7 = *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 16);
  uint64_t v8 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 112) + 8) = v8 * v7;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 136) + 24) = v11;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 64) = a2[11];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 8) = a2[476];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 56) = *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 8);
  uint64_t v12 = a2[13];
  if (v12)
  {
    uint64_t v13 = v12 * v11;
  }
  else
  {
    uint64_t v14 = a2[11];
    uint64_t v13 = (*(uint64_t (**)(void *))(*a2 + 24))(a2) * v14;
    uint64_t v9 = *a1;
  }
  uint64_t v15 = (uint64_t)a1 + *(void *)(v9 - 112);
  *(void *)(v15 + 40) = v13;
  *(unsigned char *)(v15 + 48) = 1;
  uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v17 = *((unsigned int *)a2 + 24);
  if (!*(unsigned char *)(v16 + 32)) {
    *(unsigned char *)(v16 + 32) = 1;
  }
  *(void *)(v16 + 24) = v17;
  *((unsigned char *)a1 + *(void *)(*a1 - 136) + 72) = *((unsigned char *)a2 + 44) & 1;
  sub_1000DAD90(a1, (uint64_t)a2);
  sub_1000DB130(a2 + 2, (uint64_t)a1 + *(void *)(*a1 - 104));
  sub_1000DB268(a1, a2);
  if ((a3 & 2) != 0) {
    sub_1000DB420(a1, a2);
  }
  return a1;
}

void sub_1000DC0FC(_Unwind_Exception *a1)
{
  sub_1000DC360(v2, (uint64_t *)&off_1001B78A8);
  sub_10003DE58(v3, (uint64_t *)&off_1001B7888);
  sub_10003DFE0(v1, (uint64_t *)&off_1001B7868);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000DC14C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_1001A3688;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t v7 = sub_1000F153C(a3);
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  CFStringRef v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }
  a1[1] = (uint64_t)v10;
  CFStringRef v12 = 0;
  sub_10004044C((const void **)&v12);
  sub_1000409DC((const void **)&v13);
  return a1;
}

void sub_1000DC314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10004044C(&a9);
  sub_1000409DC(&a10);
  sub_10004044C((const void **)(v10 + 24));
  sub_10004044C((const void **)(v10 + 16));
  sub_10004044C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DC360(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10002E964((const void **)(a1 + 80));
  return a1;
}

uint64_t sub_1000DC410(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_1000E32F0((uint64_t)a2, (uint64_t)a2, (uint64_t)v23);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 3;
  unint64_t v10 = a2[44];
  uint64_t v11 = a1 + 4;
  while (v23[0] != v23[5] || v23[1] != v23[6])
  {
    CFStringRef v12 = (void *)sub_1000DFFB8((uint64_t)v23);
    sub_1000E3378((uint64_t)a2, v12, (uint64_t)v22);
    while (v22[0] != v22[5] || v22[1] != v22[6])
    {
      *(_OWORD *)long long v21 = *(_OWORD *)sub_1000DFFB8((uint64_t)v22);
      int v13 = sub_1000E0AFC(v21);
      uint64_t v14 = *a1;
      uint64_t v15 = *a1;
      unint64_t v16 = *(void *)((char *)v8 + *(void *)(*a1 - 112));
      BOOL v17 = v16 > v10;
      unint64_t v18 = v16 - v10;
      if (v17)
      {
        if (v18 >= *(void *)((char *)v9 + *(void *)(v15 - 136))) {
          uint64_t v19 = *(void *)((char *)v9 + *(void *)(v15 - 136));
        }
        else {
          uint64_t v19 = v18;
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      switch(v13)
      {
        case 0:
          ++*(void *)((char *)v11 + *(void *)(v15 - 136));
          *v8 += v19;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 40);
          a1[2] += v19;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 48);
          *v11 += v19;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(void *)(v15 - 136) + 56);
          *v9 += v19;
          if (v19)
          {
            sub_1000DC6C8(a1, a2, a3, v21[0], v21[1], a4, v19);
            uint64_t v14 = *a1;
          }
          break;
        default:
          break;
      }
      v10 += *(void *)((char *)v9 + *(void *)(v14 - 136));
      sub_1000E018C((uint64_t)v22, (uint64_t)v21);
    }
    uint64_t result = sub_1000E0074((uint64_t)v23, (uint64_t)v22);
  }
  return result;
}

void *sub_1000DC67C(void *a1)
{
  *a1 = off_1001B8318;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

atomic_ullong *sub_1000DC6C8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v28[0] = a4;
  v28[1] = a5;
  unint64_t v12 = sub_1000E0DDC(v28);
  sub_1000E0B18(a2, a3, v12, 0, &v27);
  int v13 = (char *)a1 + *(void *)(*a1 - 112);
  unint64_t v14 = *((void *)v13 + 1);
  unint64_t v15 = *((void *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    char v26 = std::generic_category();
    exception[1] = 22;
    exception[2] = v26;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Corrupted ASIF image.";
  }
  unint64_t v16 = sub_1000E0F20(v28);
  unint64_t v17 = v16 + a7;
  if (v16 < v17)
  {
    int v18 = 0;
    unint64_t v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27) {
          uint64_t v20 = *(unsigned char *)(v27 + 224) ? (void *)(v27 + 40) : 0;
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v21 = sub_1000E0F48(v20, (uint64_t)a2, v18, v16, v17);
        long long v22 = a6;
        unint64_t v23 = (v21 - v16) / v19;
        if (v18)
        {
          long long v22 = a6 + 1;
          if (v18 == 2) {
            break;
          }
        }
        *v22 += v23;
        ++v18;
        unint64_t v16 = v21;
      }
      int v18 = 0;
      a6[2] += v23;
      unint64_t v16 = v21;
    }
    while (v21 < v17);
  }
  return sub_1000DFA40((atomic_ullong *)&v27);
}

void sub_1000DC88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DFA40((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DC8A8(uint64_t a1)
{
  *(void *)a1 = off_1001B8598;
  *(void *)(a1 + 88) = off_1001B85F0;
  sub_10002E964((const void **)(a1 + 80));
  return a1;
}

void sub_1000DC910(uint64_t a1)
{
  *(void *)a1 = off_1001B8598;
  *(void *)(a1 + 88) = off_1001B85F0;
  sub_10002E964((const void **)(a1 + 80));
  operator delete();
}

const void **sub_1000DC998@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v11 = (uint64_t **)@"Dir Pointer Version";
  uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v13 = @"Num Tables";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v14 = 0;
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v15 = @"Chunk Size";
  uint64_t valuePtr = *(void *)(a1 + 24);
  CFNumberRef v16 = 0;
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v17 = @"Uninitialized Entries";
  uint64_t valuePtr = *(void *)(a1 + 32);
  CFNumberRef v18 = 0;
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v19 = @"Full Entries";
  uint64_t valuePtr = *(void *)(a1 + 40);
  CFNumberRef v20 = 0;
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v21 = @"Unmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 48);
  CFNumberRef v22 = 0;
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v23 = @"Bitmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v24 = 0;
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v25 = @"Max Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 64);
  CFNumberRef v26 = 0;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  CFNumberRef v26 = v4;
  CFStringRef v27 = @"Is Cache";
  uint64_t valuePtr = v5;
  CFNumberRef v28 = 0;
  CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  id v29 = (uint64_t *)&v11;
  uint64_t v30 = 9;
  sub_100123438((uint64_t *)&v29, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 17; i != -1; i -= 2)
    sub_100005614((const void **)&(&v11)[i]);
  uint64_t v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    id v29 = (uint64_t *)@"Mapped Sectors";
    uint64_t v30 = (uint64_t)v7;
    CFRetain(v7);
    uint64_t v11 = &v29;
    uint64_t v12 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100005614((const void **)&v30);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_1000055AC(&v9);
}

void sub_1000DCC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100005614(v2);
  sub_1000055AC((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000DCCA4()
{
}

CFStringRef sub_1000DCCAC()
{
  return @"ASIF Info";
}

const void **sub_1000DCCC0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001B8598;
  *((void *)v1 + 11) = off_1001B85F0;
  return sub_10002E964((const void **)v1 + 10);
}

void sub_1000DCD1C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001B8598;
  *((void *)v1 + 11) = off_1001B85F0;
  sub_10002E964((const void **)v1 + 10);
  operator delete();
}

char *sub_1000DCDB8(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_1000DCDD4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

uint64_t sub_1000DCDF0(uint64_t a1)
{
  *(void *)(a1 + 216) = off_1001B8138;
  *(void *)(a1 + 72) = off_1001B8190;
  sub_10002E964((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_1001B7FF0;
  *(void *)(a1 + 80) = off_1001B8048;
  sub_10004044C((const void **)(a1 + 208));
  sub_10004044C((const void **)(a1 + 200));
  sub_10004044C((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_1001B7EA8;
  *(void *)(a1 + 56) = off_1001B7F00;
  sub_10004044C((const void **)(a1 + 176));
  return a1;
}

void sub_1000DCEFC(uint64_t a1)
{
  *(void *)(a1 + 216) = off_1001B8138;
  *(void *)(a1 + 72) = off_1001B8190;
  sub_10002E964((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_1001B7FF0;
  *(void *)(a1 + 80) = off_1001B8048;
  sub_10004044C((const void **)(a1 + 208));
  sub_10004044C((const void **)(a1 + 200));
  sub_10004044C((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_1001B7EA8;
  *(void *)(a1 + 56) = off_1001B7F00;
  sub_10004044C((const void **)(a1 + 176));
  operator delete();
}

const void **sub_1000DD028@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  uint64_t v10[2] = @"Format Description";
  v10[3] = @"Apple sparse image";
  sub_10003E914(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  sub_10003ECB0(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  sub_1000DC998(a1 + *(void *)(*(void *)a1 - 136), &v9);
  v10[8] = @"ASIF Info";
  v10[9] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  sub_10003F660((void *)(a1 + *(void *)(*(void *)a1 - 128)), &v9);
  v10[10] = @"Identity Info";
  v10[11] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6;
  sub_100123438(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_1000055AC(&v8);
  for (uint64_t i = 11; i != -1; i -= 2)
    uint64_t result = sub_100005614((const void **)&v10[i]);
  return result;
}

void sub_1000DD220(_Unwind_Exception *a1)
{
  for (uint64_t i = 88; i != -8; i -= 16)
    sub_100005614((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000DD264()
{
  return @"ASIF";
}

const void **sub_1000DD270(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DD398(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DD4D8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DD600(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DD740(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DD868(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DD9A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DDAD0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DDC10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DDD38(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DDE78(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DDFA0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DE0E0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DE208(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DE348@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000DD028((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000DE364()
{
  return @"ASIF";
}

const void **sub_1000DE370(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DE498(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DE5D8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000DD028((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000DE5F4()
{
  return @"ASIF";
}

const void **sub_1000DE600(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DE728(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DE868@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000DD028((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000DE884()
{
  return @"ASIF";
}

const void **sub_1000DE890(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  return sub_10004044C((const void **)v1 + 22);
}

void sub_1000DE9B8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 27) = off_1001B8138;
  *((void *)v1 + 9) = off_1001B8190;
  sub_10002E964((const void **)v1 + 37);
  *((void *)v1 + 23) = off_1001B7FF0;
  *((void *)v1 + 10) = off_1001B8048;
  sub_10004044C((const void **)v1 + 26);
  sub_10004044C((const void **)v1 + 25);
  sub_10004044C((const void **)v1 + 24);
  *((void *)v1 + 19) = off_1001B7EA8;
  *((void *)v1 + 7) = off_1001B7F00;
  sub_10004044C((const void **)v1 + 22);
  operator delete();
}

const void **sub_1000DEAF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000DD028((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000DEB14()
{
  return @"ASIF";
}

uint64_t sub_1000DEB20(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    return a1 + 24;
  }
  if (a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v4 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"ASIF: invalid dir index to header", 0x16u);
  }
  return a1 + 16;
}

void sub_1000DEB7C(void *a1)
{
  *a1 = off_1001B8318;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

atomic_ullong *sub_1000DEBE8(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_1000DEC14((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t sub_1000DEC14(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 520) || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    int v7 = (a3 >> 1) & 2;
    goto LABEL_9;
  }
  int v7 = (a3 >> 1) & 2;
  if (!sub_1000DEDBC(a1))
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000DEFCC((void *)(a1 + 40));
    sub_1000DEF6C(a1 + 408, a1, a2, v7);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v9 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((void *)&v9 + 1) = 78;
    int v10 = 16;
    sub_1000DEE04(v11, &v9);
    sub_1000039A0(v12, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    sub_1000039A0(v12, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    sub_1000039A0(v12, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    sub_1000DF0CC((uint64_t)v11);
    std::ios::~ios();
    goto LABEL_9;
  }
  if (v3) {
    sub_1000DEF6C(a1 + 408, a1, a2, v7 | 1);
  }
  return 0;
}

void sub_1000DEDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000DEF28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEDBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 400)) {
    return 0;
  }
  uint64_t v1 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 496);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, v1);
  }
  else {
    return sub_1000E970C(v1);
  }
}

void *sub_1000DEE04(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000DF03C((uint64_t)a1, a2);
  *a1 = off_1001B8378;
  a1[45] = &off_1001B8478;
  a1[46] = &off_1001B84A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B8378;
  a1[45] = off_1001B8400;
  a1[46] = off_1001B8428;
  return a1;
}

void sub_1000DEF04(_Unwind_Exception *a1)
{
  sub_1000DF0CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEF28(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DEF6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *sub_1000DEFCC(void *result)
{
  if (*((unsigned char *)result + 360))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    sub_1000DF840(v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    uint64_t v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = v2;
      operator delete(v2);
    }
    sub_1000DF938(v1 + 2, 0);
    uint64_t result = sub_1000DF9BC(v1 + 3);
    *((unsigned char *)v1 + 360) = 0;
  }
  return result;
}

uint64_t sub_1000DF03C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B8510;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000DF0B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DF0CC(uint64_t a1)
{
  *(void *)a1 = off_1001B8510;
  sub_1000DF4D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000DF208(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000DF0CC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000DF270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000DF2A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000DF310(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000DF0CC(v1);
  return std::ios::~ios();
}

void sub_1000DF35C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000DF0CC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000DF3C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000DF0CC(v1);
  return std::ios::~ios();
}

void sub_1000DF420(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000DF0CC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000DF49C(uint64_t a1)
{
  sub_1000DF0CC(a1);
  operator delete();
}

uint64_t sub_1000DF4D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000DF658((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000DF630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000DF658(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 210;
    __int16 v22 = 2082;
    CFStringRef v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        CFNumberRef v14 = a2;
      }
      else {
        CFNumberRef v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 210;
      __int16 v22 = 2082;
      CFStringRef v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000DF840(void *a1)
{
  unsigned __int8 v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unsigned __int8 v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_1000DF8E8((uint64_t)a1);
}

uint64_t sub_1000DF8E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1000DF938(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_1000DF968((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_1000DF968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1000DF9BC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

atomic_ullong *sub_1000DFA40(atomic_ullong *a1)
{
  uint64_t result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_1000DFA6C((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

uint64_t sub_1000DFA6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(unsigned char *)(a1 + 344)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(unsigned char *)(a1 + 224)
    || (uint64_t v7 = *(void *)(a1 + 320)) == 0)
  {
    int v8 = (a3 >> 1) & 2;
    goto LABEL_11;
  }
  int v8 = (a3 >> 1) & 2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000DFCA0((void *)(a1 + 40));
    sub_1000DFC40(a1 + 232, a1, a2, v8);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1;
  }
  if ((v3 & 2) != 0)
  {
    *(void *)&long long v10 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((void *)&v10 + 1) = 84;
    int v11 = 16;
    sub_1000DEE04(v12, &v10);
    sub_1000039A0(v13, (uint64_t)"Got error when trying to close ", 31);
    std::ostream::operator<<();
    sub_1000039A0(v13, (uint64_t)" with ret ", 10);
    std::ostream::operator<<();
    sub_1000039A0(v13, (uint64_t)", Force closing.", 16);
    std::ostream::~ostream();
    sub_1000DF0CC((uint64_t)v12);
    std::ios::~ios();
    goto LABEL_11;
  }
  if (v3) {
    sub_1000DFC40(a1 + 232, a1, a2, v8 | 1);
  }
  return 0;
}

void sub_1000DFC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000DEF28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFC40(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void *sub_1000DFCA0(void *result)
{
  if (*((unsigned char *)result + 184))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = off_1001AC798;
    sub_1000885B8(v1 + 7, 0);
    uint64_t result = sub_100088748(v1 + 8);
    *((unsigned char *)v1 + 184) = 0;
  }
  return result;
}

uint64_t sub_1000DFD90(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = v1 % (*(void *)(a1 + 48) + 1);
  uint64_t result = v1 - v2;
  if (v1 == v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Invalid chunk size", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000DFDF4(uint64_t *a1)
{
  unint64_t v1 = (void *)a1[2];
  unint64_t v2 = a1[7];
  uint64_t v3 = v2 * *v1;
  unint64_t v4 = a1[5];
  unint64_t v5 = v3 + v4;
  unint64_t v6 = v1[1] * v2;
  if (v4 < v6) {
    return v5 / v2;
  }
  a1[5] = 0;
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  if (v8 <= ((uint64_t)v1 - *a1) >> 4) {
    return v5 / v2;
  }
  a1[2] = (uint64_t)(v1 + 2);
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    unint64_t v9 = v1[2] * v2;
    if (v9 < a1[9])
    {
      unint64_t v5 = v1[2] * v2;
      return v5 / v2;
    }
  }
  return 0;
}

uint64_t *sub_1000DFEB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  *a1 = a2;
  a1[1] = a3;
  a1[5] = 0;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  unint64_t v9 = (uint64_t *)(a2 + 16 * a8);
  a1[9] = a7;
  if (a8 == a3)
  {
LABEL_6:
    a1[2] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      uint64_t v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6) {
        break;
      }
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        unint64_t v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }
    a1[2] = (uint64_t)v9;
    unint64_t v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      BOOL v14 = a6 >= v13;
      uint64_t v15 = a6 - v13;
      if (v15 != 0 && v14) {
        a1[5] = v15;
      }
      a1[3] = sub_1000DFDF4(a1);
      a1[4] = v16;
    }
  }
  return a1;
}

uint64_t sub_1000DFF50(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_1000F3D48(&v4, a1, *(void *)(v2 + 48)+ (*(void *)(v2 + 48) + 1)* ((a2 / *(unsigned __int16 *)(v2 + 18) - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v2 + 18))/ (*(void *)(v2 + 48)* (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t sub_1000DFFB8(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1000DFFC0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
     * (unint64_t)(*(_DWORD *)(v3 + 20) / *(unsigned __int16 *)(v3 + 18))
     * *(void *)(v3 + 48);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v5 = sub_1000DFF50(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = v5;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000E0074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return sub_1000DFFC0(a1);
}

uint64_t sub_1000E0088(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 18);
  sub_1000F3CCC(&v5, a1, ((a2 / v3 - *(void *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3)+ (a2 / v3 - *(void *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3) * *(void *)(v2 + 48))/ *(void *)(v2 + 48));
  return v5;
}

uint64_t sub_1000E00E8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v5 = sub_1000E0088(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = v5;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_1000E018C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return sub_1000E00E8(a1);
}

void sub_1000E01A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_100102518((uint64_t *)(a1 + 16), *(void *)(a2 + 56), a6);
  sub_1000F1D24((void *)(a1 + 72), *(void *)(a2 + 64));
  *(void *)(a1 + 104) = 850045863;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 168) = 850045863;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 280) = 850045863;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a4;
  *(void *)(a1 + 352) = a5;
  unint64_t v10 = *(unsigned int *)(a2 + 20);
  if (a4)
  {
    if (a4 % v10)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      os_log_type_t v12 = std::generic_category();
      exception[1] = 4294967274;
      exception[2] = v12;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: table is not aligned to chunk size";
    }
  }
  operator new[]();
}

void sub_1000E039C()
{
  if (v0) {
    sub_100004944(v0);
  }
  operator delete[]();
}

void sub_1000E0428()
{
}

void sub_1000E0620()
{
}

void sub_1000E065C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v3 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
    sub_1000E06CC((void *)(a1 + 232), &v4);
    atomic_store(1u, (unsigned int *)(a1 + 96));
    std::mutex::unlock(v3);
  }
}

void sub_1000E06B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E06CC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_100102930(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  os_log_type_t v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096;
  }
  return v14 - 8;
}

uint64_t sub_1000E0780(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v3 >> 62 != 3) {
    return 0;
  }
  sub_1000E9BE4(*(void *)(*a3 + 56) + 16 * a3[1], 0, (uint64_t)v36);
  if (!v36[16])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v34 = std::generic_category();
    exception[1] = 4294967291;
    exception[2] = v34;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't take exclusive lock on entry";
  }
  unint64_t v7 = atomic_load((unint64_t *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8));
  if (v7 >> 62 == 3)
  {
    uint64_t v8 = *(void *)(*a3 + 8);
    sub_1000E0B18((uint64_t *)a1, a2, (*(void *)(*a3 + 352)+ (*(void *)(v8 + 48) + *(void *)(v8 + 48) * a3[1])/ (unint64_t)(*(void *)(v8 + 48) + 1)* *(unsigned int *)(v8 + 20))/ *(unsigned __int16 *)(v8 + 18), 0, &v35);
    if (v35 && !*(unsigned char *)(v35 + 344))
    {
      if (*(unsigned char *)(v35 + 224)) {
        uint64_t v14 = v35 + 40;
      }
      else {
        uint64_t v14 = 0;
      }
      unsigned int v15 = sub_1000E0E9C(a3);
      uint64_t v16 = sub_1000E0E0C(v14, v15);
      uint64_t v17 = *(void *)(*a3 + 8);
      uint64_t v18 = *(void *)(v17 + 48);
      uint64_t v19 = *(unsigned int *)(v17 + 20);
      if (v35)
      {
        if (*(unsigned char *)(v35 + 224)) {
          uint64_t v21 = (void *)(v35 + 40);
        }
        else {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      unint64_t v20 = *(void *)(*a3 + 352) + (v18 + v18 * a3[1]) / (unint64_t)(v18 + 1) * v19;
      if (sub_1000E9AA4(v21, a1, v16, v20, v20 + v19, 0) == v20 + v19)
      {
        __int16 v22 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
        uint64_t v23 = *v22 & 0x7FFFFFFFFFFFFFLL;
        uint64_t v24 = *(unsigned int *)(*(void *)(*a3 + 8) + 20);
        BOOL v10 = v16 == 2;
        atomic_ullong v26 = *v22;
        atomic_ullong v25 = *v22;
        atomic_compare_exchange_strong(v22, (unint64_t *)&v26, (v16 << 62) | v26 & 0x3FFFFFFFFFFFFFFFLL);
        if (v26 != v25)
        {
          atomic_ullong v27 = v26;
          do
          {
            atomic_compare_exchange_strong(v22, (unint64_t *)&v27, v26 & 0x3FFFFFFFFFFFFFFFLL | (v16 << 62));
            BOOL v28 = v27 == v26;
            atomic_ullong v26 = v27;
          }
          while (!v28);
        }
        uint64_t v11 = v23 * v24;
        if (v16 != 1)
        {
          id v29 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
          if (*(_DWORD *)(*(void *)(*a3 + 8) + 20))
          {
            atomic_fetch_and_explicit(v29, 0xFF80000000000000, memory_order_relaxed);
          }
          else
          {
            atomic_ullong v30 = *v29;
            atomic_ullong v31 = *v29;
            atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v31, *v29 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
            if (v31 != v30)
            {
              atomic_ullong v32 = v31;
              do
              {
                atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v32, v31 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
                BOOL v28 = v32 == v31;
                atomic_ullong v31 = v32;
              }
              while (!v28);
            }
          }
        }
        int v12 = 0;
        uint64_t v9 = 1;
        atomic_store(1u, (unsigned int *)(a1 + 96));
      }
      else
      {
        int v12 = 0;
        uint64_t v9 = 0;
        BOOL v10 = 0;
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 0;
      uint64_t v11 = 0;
      int v12 = 1;
    }
    sub_1000DFA40((atomic_ullong *)&v35);
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    int v12 = 1;
  }
  sub_100148FC8(v36);
  if (v12) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v9;
  }
  if (!v12 && v10)
  {
    sub_1000E065C(a1, v11);
    return v9;
  }
  return result;
}

void sub_1000E0AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  sub_1000DFA40((atomic_ullong *)va);
  sub_100148FC8(va1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E0AFC(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  return v1 >> 62;
}

void sub_1000E0B18(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v10 = (a3 - a1[44] / (unint64_t)*(unsigned __int16 *)(a1[1] + 18))
      / (*(void *)(a1[1] + 48)
       * (unint64_t)(*(_DWORD *)(a1[1] + 20) / *(unsigned __int16 *)(a1[1] + 18)));
  unint64_t v11 = sub_1000E0FBC((uint64_t)a1, v10);
  sub_1000E102C((unint64_t *)(a1[9] + 8 * v10), v11, a5);
  if (!*a5 || *(unsigned char *)(*a5 + 344))
  {
    uint64_t v12 = a1[1];
    uint64_t v26 = *(void *)(v12 + 48)
        + (*(void *)(v12 + 48) + 1)
        * ((a3 - a1[44] / (unint64_t)*(unsigned __int16 *)(v12 + 18))
         / (*(void *)(v12 + 48)
          * (unint64_t)(*(_DWORD *)(v12 + 20) / *(unsigned __int16 *)(v12 + 18))));
    sub_1000F3D48(&v23, (uint64_t)a1, v26);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    if (a4)
    {
      LOBYTE(v23) = 0;
      char v25 = 0;
    }
    else
    {
      unsigned int v15 = (unint64_t *)(*(void *)(v23 + 56) + 16 * v24);
      BOOL v16 = sub_1000FBE80(v15);
      v21[0] = (uint64_t)off_1001C37E8;
      v21[1] = (uint64_t)v15;
      BOOL v22 = v16;
      sub_100148D94((uint64_t)&v23, (uint64_t)v21);
      char v25 = 1;
      sub_100148E28(v21);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 32))(v21);
    sub_1000E10C8((atomic_ullong *)a5, v21);
    sub_1000DFA40(v21);
    if (*a5)
    {
      if (!*(unsigned char *)(*a5 + 344))
      {
        if (!*a5 || (unsigned int v17 = atomic_load((unsigned int *)(*a5 + 24)), v17 != 2))
        {
          unint64_t v18 = atomic_load(a5);
          v21[0] = v18;
          atomic_store(atomic_exchange(v21, 0), (unint64_t *)(a1[9] + 8 * v10));
          v21[0] = 0;
          v21[0] = (*(void *)(*(void *)(v13 + 56) + 16 * v14 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(void *)(v13 + 8) + 20);
          if (v21[0])
          {
            sub_1000E1108((uint64_t *)a5, a2, (uint64_t)a1, (unint64_t *)&v26, v21);
          }
          else
          {
            uint64_t v20 = sub_1000E116C(a1[1], a2, 1);
            char v19 = 1;
            sub_1000E126C((uint64_t *)a5, a2, (uint64_t)a1, (unint64_t *)&v26, &v20, &v19);
          }
        }
      }
    }
    if (v25) {
      sub_100148E28(&v23);
    }
  }
}

void sub_1000E0D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    sub_100148E28(&a14);
  }
  sub_1000DFA40(v17);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E0DDC(void *a1)
{
  uint64_t v1 = *(void *)(*a1 + 8);
  return (*(void *)(*a1 + 352)
        + (*(void *)(v1 + 48) + *(void *)(v1 + 48) * a1[1])
        / (unint64_t)(*(void *)(v1 + 48) + 1)
        * *(unsigned int *)(v1 + 20))
       / *(unsigned __int16 *)(v1 + 18);
}

uint64_t sub_1000E0E0C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 32;
  unsigned int v4 = sub_1000AC7E0(a1 + 32, a2);
  if (sub_1000AC7E0(v3, a2 + 1)) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  uint64_t result = v5 | v4;
  if (result == 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"bitmap flag value invalid", 0xFFFFFFEA);
  }
  return result;
}

unint64_t sub_1000E0E9C(void *a1)
{
  unint64_t v1 = *(void *)(*a1 + 352);
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  unint64_t v5 = (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  unint64_t v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000;
}

unint64_t sub_1000E0F20(void *a1)
{
  return *(void *)(*a1 + 352)
       + (*(void *)(*(void *)(*a1 + 8) + 48) + *(void *)(*(void *)(*a1 + 8) + 48) * a1[1])
       / (unint64_t)(*(void *)(*(void *)(*a1 + 8) + 48) + 1)
       * *(unsigned int *)(*(void *)(*a1 + 8) + 20);
}

unint64_t sub_1000E0F48(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1000E9AA4(a1, a2, a3, a4, a5, 0);
}

void *sub_1000E0F50(void *result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)(*result + 8) + 20);
  uint64_t v3 = (atomic_ullong *)(*(void *)(*result + 56) + 16 * result[1] + 8);
  if (v2 <= a2)
  {
    unint64_t v4 = a2 / v2;
    atomic_ullong v5 = *v3;
    atomic_ullong v6 = *v3;
    atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v6, *v3 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5)
    {
      atomic_ullong v7 = v6;
      do
      {
        atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v7, v6 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
        BOOL v8 = v7 == v6;
        atomic_ullong v6 = v7;
      }
      while (!v8);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v3, 0xFF80000000000000, memory_order_relaxed);
  }
  return result;
}

unint64_t sub_1000E0FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    char v4 = 0;
    unint64_t v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }
    while (v5 != 1);
    unint64_t v3 = 1 << v4;
  }
  unint64_t v6 = *(void *)(v2 + 80);
  if (v3 == 1)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }
    while (v3 != 1);
  }
  return ((*(void *)(a1 + 352) / v6) << v7) | a2;
}

unint64_t *sub_1000E102C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    unint64_t v6 = (unint64_t *)atomic_load(result);
    sub_100101210(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 344))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_1000DFA40((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

atomic_ullong *sub_1000E10C8(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_1000DFA40(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_1000E1108(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000E1130(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      sub_100102FD8(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000E1158(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E116C(uint64_t a1, uint64_t a2, int a3)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (a3)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 20);
    v10[0] = off_1001B89F0;
    v10[1] = a2;
    uint64_t v10[2] = v7;
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v8 = sub_1000F1D9C(v6, (uint64_t)v10);
  sub_100102494(v10);
  return v8;
}

void sub_1000E1254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100102494((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000E126C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
}

void sub_1000E1294(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      sub_100102FD8(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000E12BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(*(void *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(a3 + 8) + 20))
  {
    return 0;
  }
  unint64_t v8 = sub_1000E116C(*(void *)(a1 + 8), a2, 0);
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 56) + 16 * a4;
    uint64_t v10 = *(void *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) != 0)
    {
LABEL_7:
      sub_1000E1398(*(atomic_ullong **)(a1 + 8), v8, a2);
    }
    else
    {
      unint64_t v11 = (atomic_ullong *)(v9 + 8);
      uint64_t v12 = v10;
      unint64_t v13 = v8 / *(unsigned int *)(*(void *)(a3 + 8) + 20);
      while (1)
      {
        atomic_compare_exchange_strong_explicit(v11, (unint64_t *)&v12, v10 & 0xFF80000000000000 | v13, memory_order_relaxed, memory_order_relaxed);
        if (v12 == v10) {
          break;
        }
        uint64_t v10 = v12;
        if ((v12 & 0x7FFFFFFFFFFFFFLL) != 0) {
          goto LABEL_7;
        }
      }
    }
    return 0;
  }
  return 4294967268;
}

void *sub_1000E1398(atomic_ullong *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 16))(a1);
  v8[0] = off_1001B8A80;
  v8[1] = a3;
  v8[3] = v8;
  sub_1000F2C90(v6, a2, (uint64_t)v8);
  uint64_t result = sub_100102494(v8);
  atomic_fetch_add(a1 + 1, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void sub_1000E1464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100102494((uint64_t *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000E1478(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*a3 + 8);
  sub_1000E0B18((uint64_t *)a1, a2, (*(void *)(*a3 + 352)+ (*(void *)(v11 + 48) + *(void *)(v11 + 48) * a3[1])/ (unint64_t)(*(void *)(v11 + 48) + 1)* *(unsigned int *)(v11 + 20))/ *(unsigned __int16 *)(v11 + 18), 0, (unint64_t *)&v30);
  if (!(void)v30 || *(unsigned char *)(v30 + 344))
  {
    *(void *)&long long v34 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((void *)&v34 + 1) = 47;
    int v35 = 16;
    sub_1000E1860(&v36, &v34);
    sub_1000039A0(v38, (uint64_t)"Can't load bitmap while setting range", 37);
    sub_1000E1984((uint64_t)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    atomic_ullong v27 = std::generic_category();
    exception[1] = 5;
    exception[2] = v27;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }
  BOOL v12 = (a6 & 0xFF00000000) == 0 || a6 == 3;
  char v13 = v12;
  if (!v12)
  {
    if (*(unsigned char *)(v30 + 224)) {
      uint64_t v14 = v30 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v36 = sub_1000E0E9C(a3);
    sub_1000E19C8(v14, a1, (unsigned int *)&v36, a6);
  }
  if ((void)v30)
  {
    if (*(unsigned char *)(v30 + 224)) {
      uint64_t v15 = v30 + 40;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_1000E19C8(v15, a1, a4, a5);
  uint64_t result = sub_1000DFA40((atomic_ullong *)&v30);
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = *(void *)(*a3 + 8);
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(v18 + 48);
    sub_1000F3D48(&v36, a1, v19+ (v19 + 1)* (((*(void *)(*a3 + 352)+ (*(void *)(v17 + 48) + *(void *)(v17 + 48) * a3[1])/ (unint64_t)(*(void *)(v17 + 48) + 1)* *(unsigned int *)(v17 + 20))/ *(unsigned __int16 *)(v17 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v18 + 18))/ (v19* (unint64_t)(*(_DWORD *)(v18 + 20) / *(unsigned __int16 *)(v18 + 18)))));
    unint64_t v32 = v36;
    uint64_t v33 = v37;
    uint64_t v20 = (unint64_t *)(*(void *)(v36 + 56) + 16 * v37);
    BOOL v21 = sub_1000FBE80(v20);
    *(void *)&long long v34 = off_1001C37E8;
    *((void *)&v34 + 1) = v20;
    LOBYTE(v35) = v21;
    if (!v21)
    {
      *(void *)&long long v30 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
      *((void *)&v30 + 1) = 47;
      int v31 = 16;
      sub_1000E1AE0(&v36, &v30);
      sub_1000039A0(v38, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000E1A48((uint64_t)&v36);
      sub_1000E1C04((uint64_t)&v36);
      BOOL v28 = __cxa_allocate_exception(0x40uLL);
      *BOOL v28 = &off_1001C3DE8;
      id v29 = std::generic_category();
      v28[1] = 4294967282;
      void v28[2] = v29;
      *((unsigned char *)v28 + 24) = 0;
      *((unsigned char *)v28 + 48) = 0;
      v28[7] = "Couldn't lock entry";
    }
    BOOL v22 = (atomic_ullong *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8);
    atomic_ullong v23 = *v22;
    atomic_ullong v24 = *v22;
    atomic_compare_exchange_strong(v22, (unint64_t *)&v24, *v22 | 0xC000000000000000);
    if (v24 != v23)
    {
      atomic_ullong v25 = v24;
      do
      {
        atomic_compare_exchange_strong(v22, (unint64_t *)&v25, v24 | 0xC000000000000000);
        BOOL v12 = v25 == v24;
        atomic_ullong v24 = v25;
      }
      while (!v12);
    }
    atomic_store(1u, (unsigned int *)(a1 + 96));
    return (atomic_ullong *)sub_100148E28(&v34);
  }
  return result;
}

void sub_1000E1808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100148E28(va);
  _Unwind_Resume(a1);
}

void *sub_1000E1860(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100102E28((uint64_t)a1, a2);
  *a1 = off_1001B8B08;
  a1[45] = &off_1001B8C08;
  a1[46] = &off_1001B8C30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B8B08;
  a1[45] = off_1001B8B90;
  a1[46] = off_1001B8BB8;
  return a1;
}

void sub_1000E1960(_Unwind_Exception *a1)
{
  sub_1000F3074(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1984(uint64_t a1)
{
  return a1;
}

void *sub_1000E19C8(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  LOWORD(v9[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  uint64_t result = (void *)sub_1000AC028(a1 + 32, v6, v7, (unsigned __int8 *)v9);
  if (result)
  {
    *(unsigned char *)(a1 + 113) = 1;
    uint64_t result = sub_1000F3D48(v9, a2, *(void *)a1);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v9[0] + 56) + 16 * v9[1] + 8), 0x8000000000000000);
  }
  return result;
}

uint64_t sub_1000E1A48(uint64_t a1)
{
  sub_1000039A0((void *)(a1 + 360), (uint64_t)"table entry map@", 16);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_1000039A0(v2, (uint64_t)" = offset = ", 12);
  std::ostream::operator<<();
  return a1;
}

void *sub_1000E1AE0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100102EB8((uint64_t)a1, a2);
  *a1 = off_1001B8D28;
  a1[45] = &off_1001B8E28;
  a1[46] = &off_1001B8E50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B8D28;
  a1[45] = off_1001B8DB0;
  a1[46] = off_1001B8DD8;
  return a1;
}

void sub_1000E1BE0(_Unwind_Exception *a1)
{
  sub_1000F37E8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1C04(uint64_t a1)
{
  return a1;
}

void *sub_1000E1C48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000F3D48(v13, a1, a2);
  unint64_t v6 = *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
  unint64_t v7 = (atomic_ullong *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8);
  if (v6 <= a3)
  {
    unint64_t v8 = a3 / v6;
    atomic_ullong v9 = *v7;
    atomic_ullong v10 = *v7;
    atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v10, *v7 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
    if (v10 != v9)
    {
      atomic_ullong v11 = v10;
      do
      {
        atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v11, v10 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
        BOOL v12 = v11 == v10;
        atomic_ullong v10 = v11;
      }
      while (!v12);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v7, 0xFF80000000000000, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return result;
}

__n128 sub_1000E1CF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_1000DFEB0((uint64_t *)v15, a1, a2, a3, a4, a5, a6, 0);
  sub_1000DFEB0((uint64_t *)(a7 + 80), a1, a2, a3, a4, a6, a6, 0);
  long long v13 = v15[3];
  *(_OWORD *)(a7 + 32) = v15[2];
  *(_OWORD *)(a7 + 48) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void sub_1000E1DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  v15[0] = off_1001B8318;
  v15[1] = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_41;
  }
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(unsigned char *)(a1 + 16) && !*(unsigned char *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(unsigned char *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0;
          goto LABEL_18;
        }
        if (v6.__d_.__rep_ < 1)
        {
          if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_17;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }
        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }
LABEL_22:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }
    *(unsigned char *)(a1 + 3672) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v9 = 0;
      int v10 = 0;
      do
      {
        if (*(unsigned char *)(a1 + 16)) {
          break;
        }
        v10 |= sub_1000E21DC(a1, (uint64_t)v15, v9) == 0;
        sub_1000E2580(a1, (uint64_t)v15, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            atomic_ullong v11 = &__lk.__m_->__m_.__opaque[32];
          }
          else {
            atomic_ullong v11 = 0;
          }
          v10 |= sub_1000E2678((uint64_t)v11, (uint64_t)v15);
        }
        sub_1000DEBE8((atomic_ullong *)&__lk);
        ++v9;
      }
      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if (v10)
      {
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0)) {
          sub_1000B98A4((uint64_t)v15);
        }
        uint64_t v12 = *(void *)(a2 + 24);
        if (!v12) {
          sub_1000150D8();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v15);
      }
    }
  }
  while (!*(unsigned char *)(a1 + 16));
LABEL_41:
  v15[0] = off_1001B8318;
  if (v17) {
    sub_100004944(v17);
  }
}

void sub_1000E2130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000E29E4((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x1000E2160);
}

void sub_1000E215C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 120) = a12;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 96);
  if (v14) {
    sub_100004944(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E2180@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *a2 = off_1001B8318;
  a2[1] = v2;
  return (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 72))(*(void *)(v2 + 16));
}

uint64_t sub_1000E21DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 8));
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t v5 = *(void *)(*(void *)(a1 + 152) + 8 * a3) * v4;
  uint64_t v22 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    unint64_t v9 = (unint64_t *)(*(void *)(a1 + 128) + 8 * a3);
    sub_1000EA970(v9, a3, (unint64_t *)&v21);
    if (v21 && !*(unsigned char *)(v21 + 520))
    {
      if (*(void *)(v21 + 464)) {
        sub_10010734C(v21 + 440, v21);
      }
      sub_1000EA970(v9, a3, (unint64_t *)&v23);
      sub_1000EA868(&v21, &v23);
      sub_1000DEBE8(&v23);
      if (v21)
      {
        if (!*(unsigned char *)(v21 + 520)) {
          goto LABEL_15;
        }
      }
    }
    sub_1000EA69C(a1 + 280, a3, 1, (unint64_t *)&v23);
    sub_1000EA868(&v21, &v23);
    sub_1000DEBE8(&v23);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 520))
      {
        unsigned int v12 = atomic_load((unsigned int *)(v21 + 24));
        if (v12 != 2)
        {
          long long v13 = malloc_type_valloc(*(unsigned int *)(a1 + 20), 0xF8ED6DDuLL);
          if (!v13)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            uint64_t v20 = std::bad_alloc::bad_alloc(exception);
          }
          v25[0] = off_1001B9160;
          v25[3] = v25;
          uint64_t v23 = (uint64_t)v13;
          sub_10004A2B0((uint64_t)v24, (uint64_t)v25);
          sub_10004A330(v25);
          unint64_t v14 = *(unsigned int *)(a1 + 20);
          uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
          if (v15 - v22 >= v14) {
            uint64_t v16 = v14;
          }
          else {
            uint64_t v16 = v15 - v22;
          }
          uint64_t v10 = sub_1000E2C94((atomic_ullong *)a1, a2, v23, v16, v22);
          uint64_t v18 = v17;
          if (v21 && *(void *)(v21 + 464)) {
            sub_10010734C(v21 + 440, v21);
          }
          if ((v10 & 0x8000000000000000) == 0)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, *(void *)(a1 + 80) * a3, v18);
            std::mutex::lock((std::mutex *)(a1 + 3792));
            sub_1000E06CC((void *)(a1 + 3744), &v22);
            atomic_store(1u, (unsigned int *)(a1 + 3592));
            std::mutex::unlock((std::mutex *)(a1 + 3792));
            uint64_t v10 = 0;
          }
          sub_10004A3B4(&v23, 0);
          sub_10004A330(v24);
          goto LABEL_17;
        }
      }
    }
    if (v21 && !*(unsigned char *)(v21 + 520)) {
LABEL_15:
    }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v10 = 4294967248;
LABEL_17:
    sub_1000DEBE8(&v21);
    return v10;
  }
  return 4294967274;
}

void sub_1000E2504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex::unlock(v11);
  sub_10004A3B4(&a11, 0);
  sub_10004A330(v12);
  sub_1000DEBE8(&a9);
  _Unwind_Resume(a1);
}

void *sub_1000E2580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  __n128 result = sub_1000EA970((unint64_t *)(*(void *)(a1 + 128) + 8 * a3), a3, a6);
  if (!*a6 || *(unsigned char *)(*a6 + 520))
  {
    sub_1000EA510((atomic_ullong *)a1, a2, a3, *(void *)(*(void *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20), a4, a5, (atomic_ullong *)&v14);
    sub_1000EA868((atomic_ullong *)a6, (atomic_ullong *)&v14);
    __n128 result = sub_1000DEBE8((atomic_ullong *)&v14);
    if (*a6)
    {
      if (!*(unsigned char *)(*a6 + 520))
      {
        unint64_t v13 = atomic_load(a6);
        unint64_t v14 = v13;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), (unint64_t *)(*(void *)(a1 + 128) + 8 * a3));
      }
    }
  }
  return result;
}

void sub_1000E2660(_Unwind_Exception *a1)
{
  sub_1000DEBE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2678(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8));
  size_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 20);
  std::chrono::system_clock::time_point v6 = malloc_type_valloc(v5, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v15 = std::bad_alloc::bad_alloc(exception);
  }
  v18[0] = off_1001B9160;
  v19[1] = v18;
  uint64_t v20 = (uint64_t)v6;
  sub_10004A2B0((uint64_t)v21, (uint64_t)v18);
  sub_10004A330(v18);
  sub_1000E32F0(a1, v7, (uint64_t)v18);
  char v8 = 0;
  uint64_t v9 = v4 * v5;
  while ((v18[0] != v19[3] || v18[1] != v19[4]) && !*(unsigned char *)(*(void *)(a1 + 8) + 16))
  {
    int v10 = sub_1000E2F2C(a1, a2, v19, v9, v20);
    sub_1000E3378(a1, v19, (uint64_t)v16);
    for (BOOL i = v10 == 0; ; BOOL i = v12 != 0)
    {
      v8 |= i;
      if (v16[0] == v17[3] && v16[1] == v17[4]) {
        break;
      }
      if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
        break;
      }
      int v12 = sub_1000E2A78(a1, a2, v17, v9, v20);
      sub_1000E00E8((uint64_t)v16);
    }
    sub_1000DFFC0((uint64_t)v18);
  }
  sub_10004A3B4(&v20, 0);
  sub_10004A330(v21);
  return v8 & 1;
}

void sub_1000E288C(_Unwind_Exception *a1)
{
  sub_10004A3B4((uint64_t *)(v2 - 128), 0);
  sub_10004A330(v1);
  _Unwind_Resume(a1);
}

void *sub_1000E28C0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100102F48((uint64_t)a1, a2);
  *a1 = off_1001B8F48;
  a1[45] = &off_1001B9048;
  a1[46] = &off_1001B9070;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B8F48;
  a1[45] = off_1001B8FD0;
  a1[46] = off_1001B8FF8;
  return a1;
}

void sub_1000E29C0(_Unwind_Exception *a1)
{
  sub_1000F403C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E29E4(uint64_t a1)
{
  return a1;
}

void sub_1000E2A28(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(unsigned char *)(a1 + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
}

uint64_t sub_1000E2A78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v9 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v9)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    atomic_compare_exchange_strong(v9, (unint64_t *)&v13, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v10 = v13 == 0;
  }
  v15[1] = v9;
  BOOL v16 = v10;
  v15[0] = off_1001C3808;
  uint64_t v17 = 0;
  if (v10)
  {
    uint64_t v14 = (*(void *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
        * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
    uint64_t v11 = sub_1000E2BE4(a1, a2, a3, v14, a5);
    sub_100148FC8(v15);
    if ((v11 & 0x80000000) == 0)
    {
      atomic_store(1u, (unsigned int *)(a1 + 96));
      sub_1000E065C(a1, v14);
    }
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    sub_100148FC8(v15);
    return 4294967282;
  }
  return v11;
}

void sub_1000E2BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000E2BE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 20);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  if (v11 - a4 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11 - a4;
  }
  uint64_t result = sub_1000E2C94(*(atomic_ullong **)(a1 + 8), a2, a5, v12, a4);
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1000E0F50(a3, v14);
    return 0;
  }
  return result;
}

uint64_t sub_1000E2C94(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v22 = a3;
  uint64_t v23 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a4;
  char v27 = 0;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v22);
  if (v11 != a4)
  {
    *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((void *)&v18 + 1) = 46;
    int v19 = 16;
    sub_1000EAA0C(v20, &v18);
    sub_1000039A0(v21, (uint64_t)"Can't read for defrag", 21);
    std::ostream::~ostream();
    sub_1000FC698((uint64_t)v20);
    std::ios::~ios();
    if (v11 < 0) {
      int v16 = v11;
    }
    else {
      int v16 = -5;
    }
    goto LABEL_16;
  }
  uint64_t v12 = sub_1000E116C((uint64_t)a1, a2, 0);
  if (v12)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = v23;
    uint64_t v22 = a3;
    uint64_t v23 = v13;
    if (v14) {
      sub_100004944(v14);
    }
    uint64_t v24 = a4;
    uint64_t v25 = v12;
    uint64_t v26 = a4;
    char v27 = 0;
    int v15 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v22);
    if (v15 != a4)
    {
      *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
      *((void *)&v18 + 1) = 46;
      int v19 = 16;
      sub_1000EAB74(v20, &v18);
      sub_1000039A0(v21, (uint64_t)"Can't write table for defrag", 28);
      std::ostream::~ostream();
      sub_1000FCE0C((uint64_t)v20);
      std::ios::~ios();
      sub_1000E1398(a1, v12, a2);
      if (v15 < 0) {
        int v16 = v15;
      }
      else {
        int v16 = -5;
      }
LABEL_16:
      a4 = -(uint64_t)-v16;
    }
  }
  else
  {
    a4 = -28;
  }
  if (v23) {
    sub_100004944(v23);
  }
  return a4;
}

void sub_1000E2EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000EAC98((uint64_t)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 - 88);
  if (v6) {
    sub_100004944(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2F2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v12 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v12)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    atomic_compare_exchange_strong(v12, (unint64_t *)&v14, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v13 = v14 == 0;
  }
  v25[1] = v12;
  BOOL v26 = v13;
  v25[0] = off_1001C3808;
  uint64_t v27 = 0;
  if (!v13)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    sub_100148FC8(v25);
    return 4294967274;
  }
  uint64_t v15 = *(void *)(a1 + 8);
  unint64_t v16 = *(unsigned __int16 *)(v15 + 18);
  unint64_t v17 = ((*(void *)(*a3 + 352)
        + a3[1]
        / (unint64_t)(*(void *)(*(void *)(*a3 + 8) + 48) + 1)
        * *(void *)(*(void *)(*a3 + 8) + 48)
        * *(unsigned int *)(*(void *)(*a3 + 8) + 20))
       / v16
       - *(void *)(a1 + 352) / v16)
      / (*(void *)(v15 + 48)
       * (unint64_t)(*(_DWORD *)(v15 + 20) / v16));
  unint64_t v18 = sub_1000E0FBC(a1, v17);
  sub_1000E102C((unint64_t *)(*(void *)(a1 + 72) + 8 * v17), v18, (unint64_t *)&v24);
  if (!v24 || *(unsigned char *)(v24 + 344)) {
    goto LABEL_9;
  }
  if (*(void *)(v24 + 288)) {
    sub_100102FD8(v24 + 264, v24);
  }
  sub_1000E102C((unint64_t *)(*(void *)(a1 + 72) + 8 * v17), v18, &v23);
  sub_1000E10C8(&v24, (atomic_ullong *)&v23);
  sub_1000DFA40((atomic_ullong *)&v23);
  if (!v24 || *(unsigned char *)(v24 + 344))
  {
LABEL_9:
    (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 8) + 32))(&v23);
    sub_1000E10C8(&v24, (atomic_ullong *)&v23);
    sub_1000DFA40((atomic_ullong *)&v23);
    if (!v24 || *(unsigned char *)(v24 + 344) || (unsigned int v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(unsigned char *)(v24 + 344))
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
        uint64_t v19 = 4294967248;
      }
      else
      {
        uint64_t v19 = 4294967274;
      }
    }
    else
    {
      uint64_t v7 = (*(void *)(*(void *)(*a3 + 56) + 16 * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(*a3 + 8) + 20);
      uint64_t v19 = sub_1000E2BE4(a1, a2, a3, v7, a5);
    }
    if (v24 && !*(unsigned char *)(v24 + 344) && *(void *)(v24 + 288)) {
      sub_100102FD8(v24 + 264, v24);
    }
    int v21 = 1;
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    int v21 = 0;
    uint64_t v19 = 4294967274;
  }
  sub_1000DFA40(&v24);
  sub_100148FC8(v25);
  if (!v21) {
    return 4294967248;
  }
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000E065C(a1, v7);
  }
  return v19;
}

void sub_1000E32B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  sub_1000DFA40((atomic_ullong *)va);
  sub_100148FC8(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E32F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 352);
  unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80) + v5;
  if (v5 >= v6)
  {
    char v8 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = sub_1000DFF50(a1, *(void *)(a1 + 352));
    unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80) + *(void *)(a1 + 352);
    char v8 = 1;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_1000E3378@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(void *)(*a2 + 352)
     + a2[1]
     / (unint64_t)(*(void *)(*(void *)(*a2 + 8) + 48) + 1)
     * *(void *)(*(void *)(*a2 + 8) + 48)
     * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
  if (v6 >= v8)
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    char v17 = 0;
    unint64_t v16 = *(void *)(*a2 + 352)
        + a2[1]
        / (unint64_t)(*(void *)(*(void *)(*a2 + 8) + 48) + 1)
        * *(void *)(*(void *)(*a2 + 8) + 48)
        * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  }
  else
  {
    uint64_t v10 = sub_1000E0088(a1, v6);
    atomic_ullong v3 = a2;
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFF00;
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)(*a2 + 8);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(unsigned int *)(v13 + 20);
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(*a2 + 352) + a2[1] / (unint64_t)(v14 + 1) * v14 * v15;
    unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
    char v17 = 1;
  }
  unsigned int v18 = *(unsigned __int16 *)(v7 + 18);
  unsigned int v19 = *(_DWORD *)(v7 + 20) / v18;
  uint64_t v20 = *(void *)(v7 + 48);
  unint64_t v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    char v23 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = sub_1000E0088(a1, v16 + v18 * (unint64_t)v19 * v20);
    char v23 = 1;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v11 | v12;
  *(void *)(a3 + 24) = v3;
  *(unsigned char *)(a3 + 32) = v17;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = v21;
  *(void *)(a3 + 56) = result;
  *(void *)(a3 + 64) = a2;
  *(unsigned char *)(a3 + 72) = v23;
  return result;
}

uint64_t sub_1000E34B0(uint64_t a1)
{
  *(void *)a1 = off_1001B8620;
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(unsigned char *)(a1 + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3792));
  sub_1000DF840((void *)(a1 + 3744));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 3624));
  std::thread::~thread((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3528));
  sub_100103BD8(a1 + 2080);
  sub_1001030B0(a1 + 280);
  sub_10000953C(a1 + 248, *(void **)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  atomic_ullong v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  sub_10010302C((void *)(a1 + 88));
  return a1;
}

uint64_t sub_1000E35AC(uint64_t a1)
{
  return a1;
}

void sub_1000E35E8(uint64_t a1)
{
  sub_1000E34B0(a1);
  operator delete();
}

__n128 sub_1000E3620@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1000DFEB0((uint64_t *)v10, a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), 0, *(void *)(a1 + 120), 0);
  sub_1000DFEB0((uint64_t *)(a4 + 80), a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), *(void *)(a1 + 120), *(void *)(a1 + 120), 0);
  long long v8 = v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(_OWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void sub_1000E36B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1000F3D48(&v26, (uint64_t)a1, a3);
  long long v30 = v26;
  if ((*(void *)(*(void *)(v26 + 56) + 16 * *((void *)&v26 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(v26 + 8) + 20))
  {
    sub_1000E3378((uint64_t)a1, &v30, (uint64_t)&v26);
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v25 = v28;
    while (v23 != v29)
    {
      unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
      if (v5 >> 62 == 3) {
        return;
      }
      sub_1000E00E8((uint64_t)&v23);
    }
    if ((*(void *)(*(void *)(v30 + 56) + 16 * *((void *)&v30 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(v30 + 8) + 20))
    {
      long long v23 = v26;
      if (v25 == v28)
      {
        if ((_BYTE)v25) {
          *((void *)&v24 + 1) = *((void *)&v27 + 1);
        }
      }
      else if ((_BYTE)v25)
      {
        LOBYTE(v25) = 0;
      }
      else
      {
        long long v24 = v27;
        LOBYTE(v25) = 1;
      }
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      while (v23 != v29)
      {
        sub_1000E9BE4(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1), 0, (uint64_t)v19);
        unint64_t v6 = v21;
        if (v21 >= v22)
        {
          uint64_t v7 = sub_1000F45EC(&v20, (uint64_t)v19);
        }
        else
        {
          sub_100148D94(v21, (uint64_t)v19);
          *(void *)unint64_t v6 = off_1001C3808;
          *(void ***)(v6 + 24) = v19[3];
          uint64_t v7 = v6 + 32;
        }
        unint64_t v21 = v7;
        sub_100148FC8(v19);
        unint64_t v8 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
        if (v8 >> 62 == 3) {
          goto LABEL_33;
        }
        sub_1000E00E8((uint64_t)&v23);
      }
      long long v9 = v30;
      uint64_t v10 = *(void *)(v30 + 56) + 16 * *((void *)&v30 + 1);
      if ((*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(v30 + 8) + 20))
      {
        sub_1000E9BE4(v10, 0, (uint64_t)v19);
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v12 = *(unsigned int *)(v11 + 20);
        if ((*(void *)(*(void *)(v9 + 56) + 16 * *((void *)&v9 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v12)
        {
          sub_1000E0B18(a1, a2, (*(void *)(v9 + 352)+ *(void *)(v11 + 48) * v12 * (*((void *)&v9 + 1) / (unint64_t)(*(void *)(v11 + 48) + 1)))/ *(unsigned __int16 *)(a1[1] + 18), 1, (unint64_t *)&v18);
          if (v18 && !*(unsigned char *)(v18 + 344))
          {
            if (*(unsigned char *)(v18 + 224)) {
              uint64_t v13 = v18 + 40;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 24) = v14;
            *(unsigned char *)(v13 + 112) = 0;
            if (v18 && *(void *)(v18 + 288)) {
              sub_100102FD8(v18 + 264, v18);
            }
            uint64_t v15 = a1[1];
            unint64_t v16 = ((*(void *)(v9 + 352)
                  + *((void *)&v9 + 1)
                  / (unint64_t)(*(void *)(*(void *)(v9 + 8) + 48) + 1)
                  * *(void *)(*(void *)(v9 + 8) + 48)
                  * *(unsigned int *)(*(void *)(v9 + 8) + 20))
                 / *(unsigned __int16 *)(v15 + 18)
                 - a1[44] / (unint64_t)*(unsigned __int16 *)(v15 + 18))
                / (*(void *)(v15 + 48)
                 * (unint64_t)(*(_DWORD *)(v15 + 20) / *(unsigned __int16 *)(v15 + 18)));
            atomic_ullong v17 = 0;
            atomic_store(atomic_exchange(&v17, 0), (unint64_t *)(a1[9] + 8 * v16));
          }
          sub_1000DFA40(&v18);
        }
        sub_100148FC8(v19);
      }
LABEL_33:
      v19[0] = (void **)&v20;
      sub_1000F489C(v19);
    }
  }
}

void sub_1000E3A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_ullong a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a12 = (void **)&a16;
  sub_1000F489C(&a12);
  _Unwind_Resume(a1);
}

void *sub_1000E3A84(void *a1, void *a2)
{
  sub_1000039A0(a1, (uint64_t)"table entry data@", 17);
  atomic_ullong v3 = (void *)std::ostream::operator<<();
  sub_1000039A0(v3, (uint64_t)" = offset = ", 12);
  uint64_t v4 = (void *)std::ostream::operator<<();
  unint64_t v5 = sub_1000039A0(v4, (uint64_t)", flags = ", 10);
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8));
  int v8 = v6 >> 62;
  return sub_1000ED204(v5, &v8);
}

__n128 sub_1000E3B4C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v69 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  sub_1000E1CF8(a3, a4, *(unsigned int *)(*(void *)(a1 + 8) + 20), *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), *(void *)(a1 + 352), *(void *)(*(void *)(a1 + 8) + 80) + *(void *)(a1 + 352), (uint64_t)v80);
  int v9 = 0;
  LOBYTE(v78) = 0;
  char v79 = 0;
  int v70 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 24) + 184);
  while (*(void *)v80 != v83
       || *(_OWORD *)&v80[8] != v84
       || *(void *)&v80[16] != *(void *)v80 + 16 * *(void *)&v80[8]
       && (*(_OWORD *)&v81[8] != v85 || *(void *)&v81[24] != v86))
  {
    uint64_t v10 = *(void *)&v80[24];
    uint64_t v11 = *(void *)v81;
    *(void *)&v81[8] += *(void *)&v81[24] * *(void *)v81;
    *(void *)&v80[24] = sub_1000DFDF4((uint64_t *)v80);
    *(void *)v81 = v12;
    unint64_t v13 = v10 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
    uint64_t v14 = sub_1000E0088(a1, v13);
    unint64_t v16 = (void *)v14;
    uint64_t v17 = v15;
    *(void *)&long long v77 = v14;
    *((void *)&v77 + 1) = v15;
    if (v79)
    {
      uint64_t v18 = v78;
      BOOL v19 = *(void *)(v14 + 352) == *(void *)(v78 + 352) && v15 == *((void *)&v78 + 1);
      if (!v19)
      {
        v9 |= sub_1000E0780(a1, a2, &v78);
        uint64_t v20 = *(void *)(v18 + 8);
        unint64_t v21 = (*(void *)(v18 + 352)
             + (*(void *)(v20 + 48) + *(void *)(v20 + 48) * *((void *)&v78 + 1))
             / (unint64_t)(*(void *)(v20 + 48) + 1)
             * *(unsigned int *)(v20 + 20))
            / *(unsigned __int16 *)(v20 + 18);
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(v22 + 48);
        unsigned int v24 = *(_DWORD *)(v22 + 20);
        unint64_t v25 = *(unsigned __int16 *)(v22 + 18);
        unint64_t v26 = v23 * (v24 / v25);
        unint64_t v27 = *(void *)(a1 + 352) / v25;
        ++v23;
        uint64_t v28 = v23 + v23 * ((v21 - v27) / v26);
        uint64_t v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(void *)(v29 + 48) + *(void *)(v29 + 48) * v17)
                     / (unint64_t)(*(void *)(v29 + 48) + 1)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          sub_1000E36B4((uint64_t *)a1, a2, v28 - 1);
          int v9 = 0;
        }
      }
      *((void *)&v78 + 1) = v17;
    }
    else
    {
      long long v78 = v77;
      char v79 = 1;
    }
    unint64_t v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    unint64_t v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      long long v32 = v77;
      uint64_t v33 = *(void *)(v77 + 8);
      uint64_t v34 = *(void *)(v33 + 48);
      uint64_t v35 = *(unsigned int *)(v33 + 20);
      if (*(void *)(v77 + 352) + (v34 + v34 * *((void *)&v77 + 1)) / (unint64_t)(v34 + 1) * v35 == v13
        && v11 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18) == v35)
      {
        sub_1000E9BE4(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000E43B0(v73, &v71);
          sub_1000039A0(v74, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000E3A84(v74, &v77);
          sub_1000E44D4((uint64_t)v73);
          exception = __cxa_allocate_exception(0x40uLL);
          void *exception = &off_1001C3DE8;
          v65 = std::generic_category();
          exception[1] = 4294967282;
          exception[2] = v65;
          *((unsigned char *)exception + 24) = 0;
          *((unsigned char *)exception + 48) = 0;
          exception[7] = "Couldn't lock entry";
        }
        unint64_t v36 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        unint64_t v37 = v36 & 0xC000000000000000;
        if (v31 != 1 && v37 == 0x4000000000000000) {
          goto LABEL_32;
        }
        int v39 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        unint64_t v40 = *v39;
        unint64_t v41 = *v39 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
        for (atomic_ullong i = *v39; ; v41 = i & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000)
        {
          atomic_compare_exchange_strong(v39, (unint64_t *)&i, v41);
          if (i == v40) {
            break;
          }
          unint64_t v40 = i;
        }
        BOOL v48 = v40 >> 62 == 3;
        v49 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        atomic_ullong v50 = *v49;
        uint64_t v51 = *(unsigned int *)(*(void *)(v77 + 8) + 20);
        if (v51)
        {
          atomic_fetch_and_explicit(v49, 0xFF80000000000000, memory_order_relaxed);
        }
        else
        {
          atomic_ullong v52 = *v49;
          atomic_ullong v53 = *v49;
          atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v53, *v49 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          if (v53 != v52)
          {
            atomic_ullong v54 = v53;
            do
            {
              atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v54, v53 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
              BOOL v19 = v54 == v53;
              atomic_ullong v53 = v54;
            }
            while (!v19);
          }
        }
        v9 |= v48;
        uint64_t v55 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        sub_100148FC8(v75);
        if (v55) {
          sub_1000E065C(a1, v55);
        }
      }
      else if (v31)
      {
        v45 = (unint64_t *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1));
        BOOL v46 = sub_1000FBE80(v45);
        v75[0] = off_1001C37E8;
        v75[1] = v45;
        BOOL v76 = v46;
        if (!v46)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000E4518(v73, &v71);
          sub_1000039A0(v74, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000E3A84(v74, &v77);
          sub_1000E463C((uint64_t)v73);
          int v62 = __cxa_allocate_exception(0x40uLL);
          *int v62 = &off_1001C3DE8;
          uint64_t v63 = std::generic_category();
          v62[1] = 4294967282;
          v62[2] = v63;
          *((unsigned char *)v62 + 24) = 0;
          *((unsigned char *)v62 + 48) = 0;
          v62[7] = "Couldn't lock entry";
        }
        uint64_t v47 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = sub_1000E9B64(a1, v10 * v47, v11 * v47);
        sub_1000E1478(a1, a2, &v77, v73, 2u, v31 | (unint64_t)&_mh_execute_header);
        sub_100148E28(v75);
      }
      else if (!v70)
      {
        sub_1000E9BE4(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          sub_1000E4680(v73, &v71);
          sub_1000039A0(v74, (uint64_t)"Couldn't exclusively lock entry ", 32);
          sub_1000E3A84(v74, &v77);
          sub_1000E47A4((uint64_t)v73);
          v66 = __cxa_allocate_exception(0x40uLL);
          void *v66 = &off_1001C3DE8;
          v67 = std::generic_category();
          v66[1] = 4294967282;
          v66[2] = v67;
          *((unsigned char *)v66 + 24) = 0;
          *((unsigned char *)v66 + 48) = 0;
          v66[7] = "Couldn't lock entry";
        }
        unint64_t v43 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        uint64_t v44 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = sub_1000E9B64(a1, v10 * v44, v11 * v44);
        sub_1000E1478(a1, a2, &v77, v73, 2u, (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFFFFCLL | (v43 >> 62));
LABEL_32:
        sub_100148FC8(v75);
      }
    }
  }
  if (v79 && ((sub_1000E0780(a1, a2, &v78) | v9) & 1) != 0)
  {
    uint64_t v56 = *(void *)(v78 + 8);
    uint64_t v57 = *(void *)(a1 + 8);
    uint64_t v58 = *(void *)(v57 + 48);
    sub_1000E36B4((uint64_t *)a1, a2, v58+ (v58 + 1)* (((*(void *)(v78 + 352)+ (*(void *)(v56 + 48) + *(void *)(v56 + 48) * *((void *)&v78 + 1))/ (unint64_t)(*(void *)(v56 + 48) + 1)* *(unsigned int *)(v56 + 20))/ *(unsigned __int16 *)(v56 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v57 + 18))/ (v58* (unint64_t)(*(_DWORD *)(v57 + 20) / *(unsigned __int16 *)(v57 + 18)))));
  }
  long long v59 = *(_OWORD *)&v81[16];
  a5[2] = *(_OWORD *)v81;
  a5[3] = v59;
  a5[4] = v82;
  long long v60 = *(_OWORD *)&v80[16];
  *a5 = *(_OWORD *)v80;
  a5[1] = v60;
  std::mutex::unlock(v69);
  return result;
}

void sub_1000E4318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
}

void *sub_1000E43B0(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_100104174((uint64_t)a1, a2);
  *a1 = off_1001B91E8;
  a1[45] = &off_1001B92E8;
  a1[46] = &off_1001B9310;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B91E8;
  a1[45] = off_1001B9270;
  a1[46] = off_1001B9298;
  return a1;
}

void sub_1000E44B0(_Unwind_Exception *a1)
{
  sub_1000F4BEC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E44D4(uint64_t a1)
{
  return a1;
}

void *sub_1000E4518(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_100104204((uint64_t)a1, a2);
  *a1 = off_1001B9408;
  a1[45] = &off_1001B9508;
  a1[46] = &off_1001B9530;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9408;
  a1[45] = off_1001B9490;
  a1[46] = off_1001B94B8;
  return a1;
}

void sub_1000E4618(_Unwind_Exception *a1)
{
  sub_1000F5360(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E463C(uint64_t a1)
{
  return a1;
}

void *sub_1000E4680(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  sub_100104294((uint64_t)a1, a2);
  *a1 = off_1001B9628;
  a1[45] = &off_1001B9728;
  a1[46] = &off_1001B9750;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9628;
  a1[45] = off_1001B96B0;
  a1[46] = off_1001B96D8;
  return a1;
}

void sub_1000E4780(_Unwind_Exception *a1)
{
  sub_1000F5AD4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E47A4(uint64_t a1)
{
  return a1;
}

BOOL sub_1000E47E8(uint64_t a1, uint64_t a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  unsigned int v45 = atomic_exchange((atomic_uint *volatile)(a1 + 96), 0);
  uint64_t v4 = (std::mutex *)(a1 + 280);
  std::mutex::lock((std::mutex *)(a1 + 280));
  long long v5 = *(_OWORD *)(a1 + 248);
  long long v6 = *(_OWORD *)(a1 + 264);
  long long v53 = *(_OWORD *)(a1 + 232);
  long long v54 = v5;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  long long v7 = v55;
  long long v55 = v6;
  *(_OWORD *)(a1 + 264) = v7;
  std::mutex::unlock(v4);
  size_t v8 = ((unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 8) + 18)
      + 8 * *(void *)(*(void *)(a1 + 8) + 56)
      - 1)
     / *(unsigned __int16 *)(*(void *)(a1 + 8) + 18)
     * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
  int v9 = malloc_type_valloc(v8, 0xF8ED6DDuLL);
  if (!v9)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v44 = std::bad_alloc::bad_alloc(exception);
  }
  v58[0] = off_1001B9160;
  unint64_t v60 = (unint64_t)v58;
  uint64_t v63 = (uint64_t)v9;
  sub_10004A2B0((uint64_t)v64, (uint64_t)v58);
  sub_10004A330(v58);
  uint64_t v10 = v63;
  std::mutex::lock((std::mutex *)(a1 + 168));
  sub_1000E32F0(a1, v11, (uint64_t)v58);
  uint64_t v12 = 0;
  size_t v13 = v10 + v8;
  uint64_t v52 = *(void *)(a1 + 344);
  char v51 = 0;
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = &v52;
  *(void *)&long long v50 = v10;
  *((void *)&v50 + 1) = &v51;
  uint64_t v14 = (void *)v10;
  while (v58[0] != v61 || v58[1] != v62)
  {
    if ((atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0)
    {
      sub_1000E0B18((uint64_t *)a1, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), 0, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v15 = v46[0] + 40;
        }
        else {
          uint64_t v15 = 0;
        }
        int v16 = sub_1000E51E4(v15, a2, a1);
        if (v16)
        {
          sub_1000B98A4(a2);
          uint64_t v35 = __cxa_allocate_exception(0x40uLL);
          unint64_t v36 = v35;
          if (v16 < 0) {
            uint64_t v37 = v16;
          }
          else {
            uint64_t v37 = -v16;
          }
          *uint64_t v35 = &off_1001C3DE8;
          uint64_t v38 = std::generic_category();
          v36[1] = v37;
          v36[2] = v38;
          *((unsigned char *)v36 + 24) = 0;
          *((unsigned char *)v36 + 48) = 0;
          v36[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      sub_1000DFA40((atomic_ullong *)v46);
    }
    sub_1000E9BE4(v59[7] + 16 * v60, 0, (uint64_t)v48);
    unint64_t v17 = atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL);
    sub_1000E525C(&v59);
    if ((v17 & 0x8000000000000000) != 0)
    {
      sub_1000E0B18((uint64_t *)a1, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), 1, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v18 = v46[0] + 40;
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = sub_1000E51E4(v18, a2, a1);
        if (v19)
        {
          sub_1000B98A4(a2);
          int v39 = __cxa_allocate_exception(0x40uLL);
          unint64_t v40 = v39;
          if (v19 < 0) {
            uint64_t v41 = v19;
          }
          else {
            uint64_t v41 = -v19;
          }
          *int v39 = &off_1001C3DE8;
          BOOL v42 = std::generic_category();
          v40[1] = v41;
          v40[2] = v42;
          *((unsigned char *)v40 + 24) = 0;
          *((unsigned char *)v40 + 48) = 0;
          v40[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      sub_1000DFA40((atomic_ullong *)v46);
    }
    ++v12;
    if (v45)
    {
      sub_1000E3378(a1, &v59, (uint64_t)v46);
      while (v46[0] != v47[3] || v46[1] != v47[4])
      {
        sub_1000E553C(v47);
        unint64_t v20 = atomic_load((unint64_t *)(*(void *)(v47[0] + 56) + 16 * v47[1] + 8));
        *v14++ = bswap64(v20);
        unint64_t v21 = (char *)operator new(0x28uLL);
        *(void *)unint64_t v21 = off_1001BBCD0;
        long long v22 = v50;
        *(_OWORD *)(v21 + 8) = v49;
        *(_OWORD *)(v21 + 24) = v22;
        uint64_t v57 = v21;
        if ((unint64_t)v14 >= v13)
        {
          sub_1000F6924((uint64_t)v56, (uint64_t)v14);
          uint64_t v14 = (void *)v10;
        }
        sub_100104420(v56);
        sub_1000E00E8((uint64_t)v46);
      }
      unint64_t v23 = atomic_load((unint64_t *)(v59[7] + 16 * v60 + 8));
      *v14++ = bswap64(v23);
      unsigned int v24 = (char *)operator new(0x28uLL);
      *(void *)unsigned int v24 = off_1001BBCD0;
      long long v25 = v50;
      *(_OWORD *)(v24 + 8) = v49;
      *(_OWORD *)(v24 + 24) = v25;
      uint64_t v57 = v24;
      if ((unint64_t)v14 >= v13)
      {
        sub_1000F6924((uint64_t)v56, (uint64_t)v14);
        uint64_t v14 = (void *)v10;
      }
      sub_100104420(v56);
    }
    else
    {
      if (v14 != (void *)v10) {
        sub_1000E535C((uint64_t *)&v49, (uint64_t)v14);
      }
      uint64_t v52 = *(void *)(a1 + 344) + 8 * (v12 + v12 * *(void *)(*(void *)(a1 + 8) + 48));
    }
    sub_100148FC8(v48);
    sub_1000DFFC0((uint64_t)v58);
  }
  if (v14 != (void *)v10)
  {
    unint64_t v26 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
    size_t v27 = v26 + ((unint64_t)v14 - v10) / v26 * v26 - ((void)v14 - v10);
    bzero(v14, v27);
    sub_1000E535C((uint64_t *)&v49, (uint64_t)v14 + v27);
  }
  std::mutex::unlock((std::mutex *)(a1 + 168));
  sub_10004A3B4(&v63, 0);
  sub_10004A330(v64);
  uint64_t v28 = *((void *)&v55 + 1);
  uint64_t v29 = (unint64_t **)(*((void *)&v53 + 1) + 8 * ((unint64_t)v55 >> 9));
  if ((void)v54 == *((void *)&v53 + 1))
  {
    unint64_t v30 = 0;
    long long v32 = 0;
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
  }
  else
  {
    unint64_t v30 = &(*v29)[v55 & 0x1FF];
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
    long long v32 = (unint64_t *)(*(void *)v31 + 8 * ((v55 + *((void *)&v55 + 1)) & 0x1FF));
  }
  sub_1000E5684(*(atomic_ullong **)(a1 + 8), v29, v30, v31, v32, a2);
  if (v28) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  }
  int v33 = *(unsigned __int8 *)(a1 + 100);
  if (*(unsigned char *)(a1 + 100))
  {
    (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *(void *)(a1 + 352), *(void *)(a1 + 344));
    *(unsigned char *)(a1 + 100) = 0;
  }
  sub_1000DF840(&v53);
  return v33 != 0;
}

void sub_1000E4FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, void *a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41)
{
  std::mutex::unlock(a12);
  sub_10004A3B4((uint64_t *)(v42 - 136), 0);
  sub_10004A330(a13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    unint64_t v45 = *(void *)(v41 + 264) + *(void *)(v41 + 272);
    uint64_t v46 = *(void *)(v41 + 240);
    uint64_t v47 = (char *)(v46 + 8 * (v45 >> 9));
    if (*(void *)(v41 + 248) == v46) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)v47 + 8 * (v45 & 0x1FF);
    }
    long long v49 = (char *)(a37 + 8 * (a40 >> 9));
    if (a38 == a37)
    {
      long long v50 = 0;
      char v51 = 0;
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
    }
    else
    {
      long long v50 = (char *)(*(void *)v49 + 8 * (a40 & 0x1FF));
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
      char v51 = (char *)(*(void *)v52 + 8 * ((a41 + a40) & 0x1FF));
    }
    sub_1000E5650(a10, v47, v48, v49, v50, v52, v51);
    std::mutex::unlock(a11);
    atomic_fetch_or((atomic_uint *volatile)(v41 + 96), a15 != 0);
    __cxa_rethrow();
  }
  sub_1000DF840(&a36);
  _Unwind_Resume(a1);
}

void sub_1000E51A8()
{
}

uint64_t sub_1000E51E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v7 = sub_1000E9DE0(a1, a2, a3, *(unsigned int *)(*(void *)(a3 + 8) + 20));
  std::mutex::unlock(v6);
  return v7;
}

void sub_1000E5248(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000E525C(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x7F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_map::validate() const";
    *((void *)&v3 + 1) = 43;
    int v4 = 16;
    sub_10009E778(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49);
    *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10009E970((uint64_t)v5);
    std::ios::~ios();
  }
  return (v1 & 0x7F80000000000000) == 0;
}

void sub_1000E5348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10009E89C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000E535C(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)a1[3])
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(*a1 + 16) + 16))(*(void *)(*a1 + 16), 0);
    if (v4)
    {
      uint64_t v12 = *a1;
      int v13 = v4;
      sub_1000B98A4(v12);
      exception = __cxa_allocate_exception(0x40uLL);
      if (v13 < 0) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = -v13;
      }
      int v16 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Can't flush asif, backend flush failed", v15);
    }
    *(unsigned char *)a1[3] = 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a2 - v5;
  uint64_t v7 = *(void *)a1[1];
  size_t v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v17 = v5;
  uint64_t v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  uint64_t v21 = v6;
  char v22 = 0;
  LODWORD(v7) = (*(uint64_t (**)(void, uint64_t *))(**(void **)(*a1 + 16) + 80))(*(void *)(*a1 + 16), &v17);
  *(void *)a1[1] += v6;
  if (v6 != (int)v7)
  {
    sub_1000B98A4(*a1);
    int v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = v9;
    if ((int)v7 < 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = -(int)v7;
    }
    *int v9 = &off_1001C3DE8;
    uint64_t v11 = std::generic_category();
    v10[1] = v7;
    uint64_t v10[2] = v11;
    *((unsigned char *)v10 + 24) = 0;
    *((unsigned char *)v10 + 48) = 0;
    v10[7] = "Can't flush asif";
  }
  if (v18) {
    sub_100004944(v18);
  }
}

void sub_1000E5524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000E553C(void *a1)
{
  atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8));
  if ((v1 & 0x3F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_data::validate() const";
    *((void *)&v3 + 1) = 44;
    int v4 = 16;
    sub_1000F5FB8(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39);
    *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1000F61B0((uint64_t)v5);
    std::ios::~ios();
  }
  return (v1 & 0x3F80000000000000) == 0;
}

void sub_1000E563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000F60DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000E5650(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  if (a7 == a5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = ((uint64_t)&a7[-*(void *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(void *)a4] >> 3);
  }
  return sub_1001044A4(a1, a2, a3, a4, a5, a6, a7, v7);
}

void *sub_1000E5684(atomic_ullong *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 16))(a1);
  v15[0] = off_1001B8A80;
  v15[1] = a6;
  v15[3] = v15;
  sub_100105888(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v15);
  __n128 result = sub_100102494(v15);
  if (a5 == a3) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(void *)a4) >> 3) + a3 - *a2;
  }
  atomic_fetch_add(a1 + 1, v14);
  return result;
}

void sub_1000E579C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100102494((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000E57B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(_WORD *)v97 = 0;
  char v99 = 0;
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v84 = *a3;
  long long v85 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v86 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v86[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v87 = a3[6];
  long long v88 = *(_OWORD *)(a3 + 7);
  long long v89 = *(_OWORD *)(a3 + 9);
  long long v90 = *(_OWORD *)(a3 + 11);
  char v91 = *((unsigned char *)a3 + 104);
  size_t v8 = (std::__shared_weak_count *)a3[15];
  uint64_t v92 = a3[14];
  v93 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v58 = 0;
  long long v94 = *((_OWORD *)a3 + 8);
  uint64_t v95 = a3[18];
  char v96 = *((unsigned char *)a3 + 152);
  while (!sub_1000410B8((uint64_t)&v84, a4))
  {
    long long v82 = (void *)sub_1000E0088(a1, *(unint64_t *)&v86[8]);
    uint64_t v83 = v9;
    uint64_t v10 = v82[1];
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = *(unsigned int *)(v10 + 20);
    v73[0] = v82[44] + (v11 + v11 * v9) / (unint64_t)(v11 + 1) * v12;
    v73[1] = v73[0] + v12;
    char v74 = 2;
    sub_100041EC4((uint64_t)&v84, (uint64_t)v73, a4, (uint64_t)v76);
    if (!sub_1000410B8((uint64_t)v76, (uint64_t)&v79))
    {
      unsigned int v15 = (unint64_t *)(v82[7] + 16 * v83);
      BOOL v16 = sub_1000FBE80(v15);
      v71[0] = off_1001C37E8;
      v71[1] = v15;
      BOOL v72 = v16;
      if (!v16)
      {
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        sub_1000E63C0(v73, &v63);
        sub_1000039A0(v75, (uint64_t)"Couldn't lock entry ", 20);
        sub_1000E3A84(v75, &v82);
        sub_1000E64E4((uint64_t)v73);
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &off_1001C3DE8;
        long long v53 = std::generic_category();
        exception[1] = 4294967282;
        exception[2] = v53;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "Couldn't lock entry";
      }
      uint64_t v17 = v83;
      uint64_t v18 = v82[7];
      uint64_t v19 = (*(void *)(v18 + 16 * v83 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v82[1] + 20);
      if (!v19)
      {
        LODWORD(v14) = sub_1000E12D0(a1, a2, (uint64_t)v82, v83);
        if (!v14)
        {
          uint64_t v17 = v83;
          uint64_t v18 = v82[7];
          goto LABEL_11;
        }
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        sub_1000E6528(v73, &v63);
        sub_1000039A0(v75, (uint64_t)"couldn't allocate space for entry ", 34);
        sub_1000E3A84(v75, &v82);
        sub_1000039A0(v75, (uint64_t)" ret: ", 6);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_1000F7AF0((uint64_t)v73);
        std::ios::~ios();
        unint64_t v14 = (int)v14;
LABEL_53:
        int v13 = 1;
        goto LABEL_54;
      }
LABEL_11:
      unint64_t v20 = atomic_load((unint64_t *)(v18 + 16 * v17 + 8));
      unint64_t v21 = sub_1000E6690(&v82, a2, (uint64_t)v76, (uint64_t)&v79);
      unint64_t v14 = v21;
      unint64_t v23 = v22;
      if ((v21 & 0x8000000000000000) != 0 && v21)
      {
        if (v19) {
          goto LABEL_14;
        }
        sub_100148E64((uint64_t)v71, 0, (uint64_t)v73);
        if (!v74) {
          goto LABEL_52;
        }
        unint64_t v32 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
        if ((v32 & 0x4000000000000000) != 0) {
          goto LABEL_52;
        }
        int v33 = (atomic_ullong *)(v82[7] + 16 * v83 + 8);
        atomic_ullong v34 = *v33;
        uint64_t v35 = *(unsigned int *)(v82[1] + 20);
        if (v35)
        {
          atomic_fetch_and_explicit(v33, 0xFF80000000000000, memory_order_relaxed);
          goto LABEL_68;
        }
        atomic_ullong v41 = *v33;
        atomic_ullong v42 = *v33;
        atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v42, *v33 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
        if (v42 == v41)
        {
LABEL_52:
          sub_100148FC8(v73);
          goto LABEL_53;
        }
        atomic_ullong v43 = v42;
        do
        {
          atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v43, v42 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          BOOL v44 = v43 == v42;
          atomic_ullong v42 = v43;
        }
        while (!v44);
LABEL_68:
        uint64_t v45 = (v34 & 0x7FFFFFFFFFFFFFLL) * v35;
        sub_100148FC8(v73);
        if (v45) {
          sub_1000E1398(*(atomic_ullong **)(a1 + 8), v45, a2);
        }
LABEL_14:
        int v13 = 1;
LABEL_54:
        sub_100148E28(v71);
        goto LABEL_55;
      }
      unint64_t v24 = v20 >> 62;
      *(void *)&long long v63 = &v84;
      *((void *)&v63 + 1) = a4;
      v64 = &v97[1];
      v65 = &v82;
      v66 = v97;
      uint64_t v67 = a1;
      unint64_t v68 = v21;
      unint64_t v69 = v22;
      uint64_t v70 = a2;
      if (v24 == 1)
      {
LABEL_16:
        int v13 = 2;
      }
      else
      {
        uint64_t v25 = v82[1];
        uint64_t v26 = *(unsigned int *)(v25 + 20);
        if (v21 == v26
          && v82[44]
           + (*(void *)(v25 + 48) + *(void *)(v25 + 48) * v83)
           / (unint64_t)(*(void *)(v25 + 48) + 1)
           * v26 == v22)
        {
          sub_100148E64((uint64_t)v71, 0, (uint64_t)v61);
          if (!v62)
          {
            *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
            *((void *)&v59 + 1) = 30;
            int v60 = 16;
            sub_1000E70C4(v73, &v59);
            sub_1000039A0(v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
            sub_1000E3A84(v75, &v82);
            sub_1000E71E8((uint64_t)v73);
            long long v54 = __cxa_allocate_exception(0x40uLL);
            *long long v54 = &off_1001C3DE8;
            long long v55 = std::generic_category();
            v54[1] = 4294967282;
            v54[2] = v55;
            *((unsigned char *)v54 + 24) = 0;
            *((unsigned char *)v54 + 48) = 0;
            v54[7] = "Couldn't upgrade lock entry";
          }
          unint64_t v27 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
          if (v24 == 2 || (v27 & 0xC000000000000000) != 0x8000000000000000)
          {
            uint64_t v28 = (atomic_ullong *)(v82[7] + 16 * v83 + 8);
            unint64_t v29 = *v28;
            unint64_t v30 = *v28 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000;
            for (atomic_ullong i = *v28; ; v30 = i & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000)
            {
              atomic_compare_exchange_strong(v28, (unint64_t *)&i, v30);
              if (i == v29) {
                break;
              }
              unint64_t v29 = i;
            }
            unint64_t v38 = v29 >> 62;
            if (v97[0]) {
              BOOL v39 = 1;
            }
            else {
              BOOL v39 = v38 > 2;
            }
            char v40 = v39;
            v97[0] = v40;
            atomic_store(1u, (unsigned int *)(a1 + 96));
          }
          sub_100148FC8(v61);
          int v13 = 2;
        }
        else
        {
          if (v24 == 3)
          {
            v73[0] = sub_1000E9B64(a1, v22, v21);
            sub_1000E1478(a1, a2, &v82, (unsigned int *)v73, 1u, v24 | (unint64_t)&_mh_execute_header);
          }
          else
          {
            sub_100148E64((uint64_t)v71, 0, (uint64_t)v61);
            if (!v62)
            {
              *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
              *((void *)&v59 + 1) = 30;
              int v60 = 16;
              sub_1000E722C(v73, &v59);
              sub_1000039A0(v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
              sub_1000E3A84(v75, &v82);
              sub_1000E7350((uint64_t)v73);
              uint64_t v56 = __cxa_allocate_exception(0x40uLL);
              *uint64_t v56 = &off_1001C3DE8;
              uint64_t v57 = std::generic_category();
              v56[1] = 4294967282;
              v56[2] = v57;
              *((unsigned char *)v56 + 24) = 0;
              *((unsigned char *)v56 + 48) = 0;
              v56[7] = "Couldn't upgrade lock entry";
            }
            unint64_t v36 = atomic_load((unint64_t *)(v82[7] + 16 * v83 + 8));
            if (!((*(void *)(v82[7] + 16 * v83 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v82[1] + 20))
              || (unint64_t v37 = v36 >> 62, v36 >> 62 == 1))
            {
              sub_100148FC8(v61);
              goto LABEL_16;
            }
            v73[0] = sub_1000E9B64(a1, v23, v14);
            sub_1000E1478(a1, a2, &v82, (unsigned int *)v73, 1u, v37 | (unint64_t)&_mh_execute_header);
            sub_100148FC8(v61);
          }
          if (v19)
          {
            int v13 = 0;
          }
          else
          {
            int v13 = 0;
            atomic_store(1u, (unsigned int *)(a1 + 96));
          }
        }
      }
      v58 += v14;
      sub_1000E7394((uint64_t *)&v63);
      goto LABEL_54;
    }
    *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v63 + 1) = 30;
    LODWORD(v64) = 16;
    sub_1000E6258(v73, &v63);
    sub_1000039A0(v75, (uint64_t)"Couldn't trim entry in write ", 29);
    sub_100149114(v75);
    std::ostream::~ostream();
    sub_1000F6C08((uint64_t)v73);
    std::ios::~ios();
    int v13 = 1;
    unint64_t v14 = -34;
LABEL_55:
    if (v81) {
      sub_100004944(v81);
    }
    if (v80) {
      sub_100004944(v80);
    }
    if (v78) {
      sub_100004944(v78);
    }
    if (v77) {
      sub_100004944(v77);
    }
    if ((v13 | 2) != 2) {
      goto LABEL_77;
    }
  }
  if (v99)
  {
    int v46 = sub_1000E0780(a1, a2, &v97[1]);
    unint64_t v14 = v58;
    if (v97[0]) {
      int v47 = 1;
    }
    else {
      int v47 = v46;
    }
    v97[0] = v47;
    if (v47 == 1)
    {
      uint64_t v48 = *(void *)(*(void *)&v97[1] + 8);
      uint64_t v49 = *(void *)(a1 + 8);
      uint64_t v50 = *(void *)(v49 + 48);
      sub_1000E36B4((uint64_t *)a1, a2, v50+ (v50 + 1)* (((*(void *)(*(void *)&v97[1] + 352)+ (*(void *)(v48 + 48) + *(void *)(v48 + 48) * v98)/ (unint64_t)(*(void *)(v48 + 48) + 1)* *(unsigned int *)(v48 + 20))/ *(unsigned __int16 *)(v48 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v49 + 18))/ (v50* (unint64_t)(*(_DWORD *)(v49 + 20) / *(unsigned __int16 *)(v49 + 18)))));
    }
  }
  else
  {
    unint64_t v14 = v58;
  }
LABEL_77:
  if (v93) {
    sub_100004944(v93);
  }
  if (v85) {
    sub_100004944(v85);
  }
  return v14;
}

void sub_1000E6170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void *sub_1000E6258(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105AB4((uint64_t)a1, a2);
  *a1 = off_1001B9A68;
  a1[45] = &off_1001B9B68;
  a1[46] = &off_1001B9B90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9A68;
  a1[45] = off_1001B9AF0;
  a1[46] = off_1001B9B18;
  return a1;
}

void sub_1000E6358(_Unwind_Exception *a1)
{
  sub_1000F6C08(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E637C(uint64_t a1)
{
  return a1;
}

void *sub_1000E63C0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105B44((uint64_t)a1, a2);
  *a1 = off_1001B9C88;
  a1[45] = &off_1001B9D88;
  a1[46] = &off_1001B9DB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9C88;
  a1[45] = off_1001B9D10;
  a1[46] = off_1001B9D38;
  return a1;
}

void sub_1000E64C0(_Unwind_Exception *a1)
{
  sub_1000F737C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E64E4(uint64_t a1)
{
  return a1;
}

void *sub_1000E6528(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105BD4((uint64_t)a1, a2);
  *a1 = off_1001B9EA8;
  a1[45] = &off_1001B9FA8;
  a1[46] = &off_1001B9FD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9EA8;
  a1[45] = off_1001B9F30;
  a1[46] = off_1001B9F58;
  return a1;
}

void sub_1000E6628(_Unwind_Exception *a1)
{
  sub_1000F7AF0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E664C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E6690(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(*a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 20);
  if (!((*(void *)(*(void *)(*a1 + 56) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v56 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"ASIF: No data offset found (write)", 0xFFFFFFEA);
  }
  __p = (void *)(*(void *)(*a1 + 352)
               + (*(void *)(v5 + 48) + *(void *)(v5 + 48) * v4)
               / (unint64_t)(*(void *)(v5 + 48) + 1)
               * v6);
  *(void *)&long long v136 = (char *)__p + v6;
  BYTE8(v136) = 2;
  sub_100041EC4(a3, (uint64_t)&__p, a4, (uint64_t)v70);
  if (sub_1000410B8((uint64_t)v70, (uint64_t)&v73))
  {
    uint64_t v10 = -34;
  }
  else
  {
    __p = v137;
    long long v136 = xmmword_10016E350;
    long long v11 = *(_OWORD *)(a3 + 72);
    long long v125 = *(_OWORD *)(a3 + 56);
    long long v126 = v11;
    long long v127 = *(_OWORD *)(a3 + 88);
    char v128 = *(unsigned char *)(a3 + 104);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v129 = *(void *)(a3 + 112);
    v130 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v131 = *(_OWORD *)(a3 + 128);
    uint64_t v13 = *(void *)(a4 + 72);
    uint64_t v14 = *(void *)(a4 + 56);
    uint64_t v15 = *(void *)(a4 + 64);
    BOOL v16 = *(std::__shared_weak_count **)(a4 + 120);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v57 = a3 + 72;
    while (1)
    {
      BOOL v19 = (void)v125 == v14 && *((void *)&v125 + 1) == v15;
      if (v19 && (void)v126 == v13) {
        break;
      }
      ++v18;
      v17 += 40;
      sub_100040CA0((uint64_t)&v125);
    }
    if (v16) {
      sub_100004944(v16);
    }
    if (v130) {
      sub_100004944(v130);
    }
    if (*((void *)&v136 + 1) < v18)
    {
      if (v18 >= 0x333333333333334) {
        sub_10001A67C("get_next_capacity, allocator's max size reached");
      }
      unint64_t v21 = operator new(v17);
      sub_10001D8B0((uint64_t *)&__p, (unint64_t)v21, v18, (uint64_t)__p + 40 * v136, 0, 0);
    }
    uint64_t v22 = *(void *)a3;
    unint64_t v23 = *(std::__shared_weak_count **)(a3 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v63 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v63[9] = *(_OWORD *)(a3 + 25);
    long long v64 = *(_OWORD *)v57;
    uint64_t v24 = *(void *)(a3 + 48);
    uint64_t v25 = *(void *)(a3 + 56);
    uint64_t v26 = *(void *)(a3 + 64);
    long long v65 = *(_OWORD *)(a3 + 88);
    char v66 = *(unsigned char *)(a3 + 104);
    uint64_t v27 = *(void *)(a3 + 112);
    uint64_t v28 = *(std::__shared_weak_count **)(a3 + 120);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v67 = *(_OWORD *)(a3 + 128);
    unint64_t v68 = *(void *)(a3 + 144);
    char v69 = *(unsigned char *)(a3 + 152);
    uint64_t v29 = *(void *)a4;
    unint64_t v30 = *(std::__shared_weak_count **)(a4 + 8);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v59 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v59[9] = *(_OWORD *)(a4 + 25);
    long long v60 = *(_OWORD *)(a4 + 72);
    uint64_t v32 = *(void *)(a4 + 48);
    uint64_t v31 = *(void *)(a4 + 56);
    uint64_t v33 = *(void *)(a4 + 64);
    long long v61 = *(_OWORD *)(a4 + 88);
    char v62 = *(unsigned char *)(a4 + 104);
    uint64_t v35 = *(void *)(a4 + 112);
    atomic_ullong v34 = *(std::__shared_weak_count **)(a4 + 120);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v36 = 0;
    v92[0] = *(_OWORD *)v63;
    *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)&v63[9];
    long long v95 = v64;
    long long v96 = v65;
    long long v100 = v67;
    v78[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)&v59[9];
    long long v83 = v61;
    uint64_t v90 = v22;
    char v91 = v23;
    uint64_t v93 = v24;
    *(void *)&long long v94 = v25;
    *((void *)&v94 + 1) = v26;
    char v97 = v66;
    uint64_t v98 = v27;
    char v99 = v28;
    unint64_t v101 = v68;
    char v102 = v69;
    uint64_t v76 = v29;
    long long v77 = v30;
    uint64_t v79 = v32;
    uint64_t v80 = v31;
    uint64_t v81 = v33;
    char v84 = v62;
    long long v82 = v60;
    uint64_t v85 = v35;
    uint64_t v86 = v34;
    long long v87 = *(_OWORD *)(a4 + 128);
    char v89 = *(unsigned char *)(a4 + 152);
    unint64_t v88 = *(void *)(a4 + 144);
    unint64_t v37 = v88;
    LOBYTE(v125) = 0;
    char v132 = 0;
    while (!sub_1000410B8((uint64_t)&v90, (uint64_t)&v76))
    {
      if (v101 >= v37 || (_OWORD *)((char *)v36 + 1) == 0) {
        break;
      }
      if (sub_1000D8524())
      {
        *(void *)&long long v121 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((void *)&v121 + 1) = 104;
        LODWORD(v122) = 2;
        sub_100018AAC(&v115, &v121);
        sub_1000039A0(v120, (uint64_t)"sg: ", 4);
        sub_100149114(v120);
        std::ostream::~ostream();
        sub_100018E08((uint64_t)&v115);
        std::ios::~ios();
      }
      *(void *)&long long v115 = 0;
      *((void *)&v115 + 1) = v37;
      LOBYTE(v116) = 2;
      sub_10008A630(&v90, (uint64_t)&v115, (uint64_t)&v121);
      int64_t v39 = v122;
      uint64_t v40 = *(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8);
      unint64_t v41 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
      unint64_t v42 = v123;
      uint64_t v43 = v124;
      long long v115 = v121;
      if (*((void *)&v121 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v121 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int64_t v116 = v39;
      uint64_t v117 = v42 % v41 + (v40 & 0x7FFFFFFFFFFFFFLL) * v41;
      uint64_t v118 = v43;
      char v119 = 0;
      (*(void (**)(void *__return_ptr))(**(void **)(a2 + 16) + 136))(v133);
      if ((void)v136 == *((void *)&v136 + 1))
      {
        sub_10001FC2C((uint64_t *)&__p, (uint64_t)__p + 40 * v136, 1, (uint64_t)v133, &v134);
      }
      else
      {
        sub_10001CB94((unint64_t)__p + 40 * v136, (uint64_t)v133);
        *(void *)&long long v136 = v136 + 1;
      }
      unint64_t v44 = v123;
      int64_t v45 = v122;
      if (*((void *)&v115 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v115 + 1));
      }
      BOOL v46 = v45 >= 0 || v45 == 0;
      char v47 = v46;
      if (v46)
      {
        if (sub_100042754((uint64_t)&v90, (uint64_t)&v76, v44, v45))
        {
          v103[0] = v90;
          v103[1] = v91;
          if (v91) {
            atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v104[0] = v92[0];
          *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)v92 + 9);
          uint64_t v105 = v93;
          long long v106 = v94;
          long long v107 = v95;
          long long v108 = v96;
          char v109 = v97;
          uint64_t v110 = v98;
          v111 = v99;
          if (v99) {
            atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v112 = v100;
          unint64_t v113 = v101;
          char v114 = v102;
          sub_100042718((uint64_t)v103, (uint64_t)&v76, v44, v45, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v115);
          sub_100018C14((uint64_t)&v125, (uint64_t)&v115);
          sub_100018C5C(&v115);
          sub_10000371C((uint64_t)v103);
          sub_1000414AC((uint64_t)&v125, (uint64_t)&v115);
          sub_100018CC8((uint64_t)&v90, &v115);
          sub_10000371C((uint64_t)&v115);
          sub_1000411FC((uint64_t)&v125, (uint64_t)&v115);
          sub_100018CC8((uint64_t)&v76, &v115);
          sub_10000371C((uint64_t)&v115);
        }
        sub_100041C48((uint64_t)&v90, v45);
        unint64_t v36 = (_OWORD *)((char *)v36 + v45);
      }
      else
      {
        if ((int)v45 >= 0) {
          uint64_t v48 = v45;
        }
        else {
          uint64_t v48 = -(int)v45;
        }
        uint64_t v57 = -v48;
      }
      if (*((void *)&v121 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v121 + 1));
      }
      if ((v47 & 1) == 0) {
        goto LABEL_71;
      }
    }
    uint64_t v57 = (uint64_t)v36;
LABEL_71:
    sub_1000197F0((uint64_t)&v125);
    if (v86) {
      sub_100004944(v86);
    }
    uint64_t v10 = v57;
    if (v77) {
      sub_100004944(v77);
    }
    if (v99) {
      sub_100004944(v99);
    }
    if (v91) {
      sub_100004944(v91);
    }
    if ((v57 & 0x8000000000000000) == 0 || !v57)
    {
      (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
      if ((void)v136)
      {
        int v49 = 0;
        uint64_t v50 = (unsigned int *)__p;
        uint64_t v51 = 40 * v136;
        do
        {
          int v52 = sub_10001D688(v50);
          if (v52 < 0) {
            break;
          }
          v49 += v52;
          v50 += 10;
          int v52 = v49;
          v51 -= 40;
        }
        while (v51);
      }
      else
      {
        int v52 = 0;
      }
      if (v57 != v52)
      {
        if (v52 < 0) {
          int v53 = v52;
        }
        else {
          int v53 = -5;
        }
        uint64_t v10 = -(uint64_t)-v53;
      }
    }
    if (*((void *)&v136 + 1) && v137 != __p) {
      operator delete(__p);
    }
  }
  if (v75) {
    sub_100004944(v75);
  }
  if (v74) {
    sub_100004944(v74);
  }
  if (v72) {
    sub_100004944(v72);
  }
  if (v71) {
    sub_100004944(v71);
  }
  return v10;
}

void sub_1000E6FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (STACK[0x6D8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x6D8]);
  }
  sub_1000197F0((uint64_t)&STACK[0x700]);
  sub_10000371C((uint64_t)&STACK[0x2E0]);
  sub_10000371C((uint64_t)&STACK[0x380]);
  sub_10000371C((uint64_t)&a21);
  sub_10000371C((uint64_t)&a41);
  if (STACK[0x960])
  {
    if (a17 != STACK[0x950]) {
      operator delete((void *)STACK[0x950]);
    }
  }
  sub_10006ED38(&a61);
  _Unwind_Resume(a1);
}

void sub_1000E70A4()
{
  if (v0) {
    sub_100004944(v0);
  }
  if (STACK[0x740]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x740]);
  }
  JUMPOUT(0x1000E7078);
}

void *sub_1000E70C4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105C64((uint64_t)a1, a2);
  *a1 = off_1001BA0C8;
  a1[45] = &off_1001BA1C8;
  a1[46] = &off_1001BA1F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BA0C8;
  a1[45] = off_1001BA150;
  a1[46] = off_1001BA178;
  return a1;
}

void sub_1000E71C4(_Unwind_Exception *a1)
{
  sub_1000F8264(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E71E8(uint64_t a1)
{
  return a1;
}

void *sub_1000E722C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105CF4((uint64_t)a1, a2);
  *a1 = off_1001BA2E8;
  a1[45] = &off_1001BA3E8;
  a1[46] = &off_1001BA410;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BA2E8;
  a1[45] = off_1001BA370;
  a1[46] = off_1001BA398;
  return a1;
}

void sub_1000E732C(_Unwind_Exception *a1)
{
  sub_1000F89D8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E7350(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000E7394(uint64_t *a1)
{
  long long v3 = (uint64_t *)a1[5];
  unint64_t v2 = a1[6];
  if ((v2 & 0x8000000000000000) == 0 || !a1[6])
  {
    sub_100041B0C(*a1, v2);
    uint64_t v4 = a1[2];
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t v5 = (void *)a1[3];
      if (*(void *)(*v5 + 352) != *(void *)(*(void *)v4 + 352) || v5[1] != *(void *)(v4 + 8))
      {
        char v6 = sub_1000E0780((uint64_t)v3, a1[8], (void *)v4);
        unint64_t v7 = (unsigned char *)a1[4];
        BOOL v8 = (v6 & 1) != 0 || *v7 != 0;
        *unint64_t v7 = v8;
        uint64_t v4 = a1[2];
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)v4 + 8);
          uint64_t v10 = v3[1];
          uint64_t v11 = *(void *)(v10 + 48);
          unsigned int v12 = *(_DWORD *)(v10 + 20);
          unint64_t v13 = *(unsigned __int16 *)(v10 + 18);
          unint64_t v14 = v11 * (v12 / v13);
          unint64_t v15 = v3[44] / v13;
          ++v11;
          uint64_t v16 = v11
              + v11
              * (((*(void *)(*(void *)v4 + 352)
                 + (*(void *)(v9 + 48) + *(void *)(v9 + 48) * *(void *)(v4 + 8))
                 / (unint64_t)(*(void *)(v9 + 48) + 1)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          size_t v17 = (void *)a1[3];
          uint64_t v18 = *(void *)(*v17 + 8);
          if (v16 != v11
                    + v11
                    * (((*(void *)(*v17 + 352)
                       + (*(void *)(v18 + 48) + *(void *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(void *)(v18 + 48) + 1)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            sub_1000E36B4(v3, a1[8], v16 - 1);
            *(unsigned char *)a1[4] = 0;
            uint64_t v4 = a1[2];
          }
        }
      }
    }
    uint64_t v19 = a1[3];
    if (*(unsigned char *)(v4 + 16))
    {
      *(void *)(v4 + 8) = *(void *)(v19 + 8);
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v19;
      *(unsigned char *)(v4 + 16) = 1;
    }
  }
  return a1;
}

uint64_t sub_1000E7524()
{
  uint64_t v1 = __chkstk_darwin();
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  unint64_t v7 = (uint64_t *)v1;
  uint64_t v54 = v3[3];
  uint64_t v8 = *v3;
  uint64_t v9 = (std::__shared_weak_count *)v3[1];
  uint64_t v101 = *v3;
  char v102 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v103 = *((_OWORD *)v3 + 1);
  *(_OWORD *)&v103[9] = *(_OWORD *)((char *)v3 + 25);
  uint64_t v104 = v3[6];
  long long v105 = *(_OWORD *)(v3 + 7);
  long long v106 = *(_OWORD *)(v3 + 9);
  long long v107 = *(_OWORD *)(v3 + 11);
  char v108 = *((unsigned char *)v3 + 104);
  uint64_t v10 = (std::__shared_weak_count *)v3[15];
  uint64_t v109 = v3[14];
  uint64_t v110 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = v102;
  }
  long long v111 = *((_OWORD *)v3 + 8);
  uint64_t v112 = v3[18];
  char v113 = *((unsigned char *)v3 + 152);
  *(void *)&long long v114 = -78;
  LOBYTE(v154[0]) = 0;
  char v158 = 0;
  uint64_t v159 = v8;
  v160 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)&v103[9];
  v161[0] = *(_OWORD *)v103;
  long long v163 = v105;
  long long v164 = v106;
  uint64_t v162 = v104;
  char v166 = v108;
  long long v165 = v107;
  uint64_t v167 = v109;
  v168 = v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v169 = v111;
  char v171 = v113;
  uint64_t v170 = v112;
  v172[0] = v8;
  v172[1] = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v173 + 9) = *(_OWORD *)&v103[9];
  v173[0] = *(_OWORD *)v103;
  long long v175 = v105;
  long long v176 = v106;
  uint64_t v174 = v104;
  long long v177 = v107;
  char v178 = v108;
  uint64_t v179 = v109;
  v180 = v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = 0;
  char v183 = v113;
  long long v181 = v111;
  uint64_t v182 = v112;
  uint64_t v184 = v2;
  v185[0] = (uint64_t)&v186;
  v185[1] = 0;
  v185[2] = 16;
  LOBYTE(v187) = 0;
  char v188 = 0;
  v189 = &v192;
  uint64_t v190 = 0;
  uint64_t v191 = 16;
  uint64_t v193 = 0;
  v100[0] = (uint64_t)v154;
  v100[1] = (uint64_t)&v114;
  v100[2] = v2;
  uint64_t v56 = v2;
  long long v55 = (uint64_t *)v1;
  while (!sub_1000410B8((uint64_t)&v101, v5))
  {
    *(void *)&long long v99 = sub_1000E0088((uint64_t)v7, *(unint64_t *)&v103[8]);
    *((void *)&v99 + 1) = v11;
    uint64_t v12 = *(void *)(v99 + 8);
    uint64_t v13 = *(void *)(v12 + 48);
    uint64_t v14 = *(unsigned int *)(v12 + 20);
    *(void *)&long long v194 = *(void *)(v99 + 352) + (v13 + v13 * v11) / (unint64_t)(v13 + 1) * v14;
    *((void *)&v194 + 1) = v194 + v14;
    v195[0] = 2;
    sub_100041EC4((uint64_t)&v101, (uint64_t)&v194, v5, (uint64_t)&v74);
    if (sub_1000410B8((uint64_t)&v74, (uint64_t)&v86))
    {
      *(void *)&long long v222 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v222 + 1) = 29;
      LODWORD(v223) = 16;
      sub_1000E8960(&v194, &v222);
      sub_1000039A0(v219, (uint64_t)"Couldn't trim entry in read ", 28);
      sub_100149114(v219);
      std::ostream::~ostream();
      sub_1000F914C((uint64_t)&v194);
      std::ios::~ios();
      *(void *)&long long v114 = -34;
      uint64_t v0 = 3;
    }
    else
    {
      if (v188 && !sub_1000E9C74(&v99, &v187) && (uint64_t v43 = sub_1000F9630((uint64_t)v154), v43 < 0) && v43)
      {
        *(void *)&long long v69 = v43;
        *((void *)&v69 + 1) = v44;
        uint64_t v70 = v154;
        int v71 = 0;
        v72[0] = 0;
        char v73 = 0;
      }
      else
      {
        long long v187 = v99;
        char v188 = 1;
        uint64_t v0 = *(void *)(v99 + 56) + 16 * *((void *)&v99 + 1);
        BOOL v15 = sub_1000FBE80((unint64_t *)v0);
        *(void *)&long long v222 = off_1001C37E8;
        *((void *)&v222 + 1) = v0;
        LOBYTE(v223) = v15;
        if (v15)
        {
          uint64_t v16 = 0;
        }
        else
        {
          *(void *)&long long v140 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((void *)&v140 + 1) = 139;
          LODWORD(v141[0]) = 16;
          sub_1000F9744(&v194, &v140);
          sub_1000039A0(v219, (uint64_t)"Couldn't lock entry ", 20);
          sub_1000E3A84(v219, &v99);
          std::ostream::~ostream();
          sub_1000F9A30((uint64_t)&v194);
          std::ios::~ios();
          uint64_t v16 = -5;
        }
        unint64_t v17 = atomic_load((unint64_t *)(*(void *)(v187 + 56) + 16 * *((void *)&v187 + 1) + 8));
        *(void *)&long long v69 = v16;
        uint64_t v70 = v154;
        int v71 = v17 >> 62;
        sub_100148D94((uint64_t)v72, (uint64_t)&v222);
        char v73 = 1;
        sub_100148E28(&v222);
      }
      long long v114 = v69;
      unint64_t v18 = v69;
      if ((v69 & 0x8000000000000000) != 0 && v114)
      {
LABEL_129:
        uint64_t v0 = 3;
      }
      else
      {
        switch(v71)
        {
          case 0:
          case 2:
            long long v19 = v74;
            if (*((void *)&v74 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)char v62 = v75[0];
            *(_OWORD *)&v62[9] = *(_OWORD *)((char *)v75 + 9);
            uint64_t v20 = v76;
            uint64_t v21 = v77;
            long long v63 = v78;
            long long v64 = v79;
            char v65 = v80;
            uint64_t v22 = *((void *)&v77 + 1);
            uint64_t v23 = v81;
            uint64_t v24 = v82;
            if (v82) {
              atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v66 = v83;
            unint64_t v67 = v84;
            char v68 = v85;
            uint64_t v25 = v86;
            uint64_t v26 = v87;
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)unint64_t v58 = v88[0];
            *(_OWORD *)&v58[9] = *(_OWORD *)((char *)v88 + 9);
            uint64_t v27 = v89;
            long long v28 = v90;
            uint64_t v29 = v94;
            long long v59 = v91;
            long long v60 = v92;
            char v61 = v93;
            unint64_t v30 = v95;
            if (v95) {
              atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v31 = 0;
            int v32 = 0;
            unint64_t v33 = 0;
            long long v128 = v19;
            v129[0] = *(_OWORD *)v62;
            *(_OWORD *)((char *)v129 + 9) = *(_OWORD *)&v62[9];
            uint64_t v130 = v20;
            *(void *)&long long v131 = v21;
            long long v132 = v63;
            long long v133 = v64;
            char v134 = v65;
            *((void *)&v131 + 1) = v22;
            uint64_t v135 = v23;
            long long v136 = v24;
            long long v137 = v66;
            unint64_t v138 = v67;
            char v139 = v68;
            uint64_t v115 = v25;
            int64_t v116 = v26;
            v117[0] = *(_OWORD *)v58;
            *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)&v58[9];
            uint64_t v118 = v27;
            long long v119 = v28;
            char v122 = v61;
            long long v120 = v59;
            long long v121 = v60;
            uint64_t v123 = v29;
            uint64_t v124 = v30;
            long long v125 = v96;
            char v127 = v98;
            unint64_t v126 = v97;
            unint64_t v34 = v97;
            LOBYTE(v194) = 0;
            char v220 = 0;
            while (1)
            {
              uint64_t v35 = v226;
              if (sub_1000410B8((uint64_t)&v128, (uint64_t)&v115)) {
                break;
              }
              if (v138 >= v34 || v33 == -1) {
                break;
              }
              if (sub_1000D8524())
              {
                *(void *)&long long v152 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((void *)&v152 + 1) = 104;
                int v153 = 2;
                sub_100018AAC(&v222, &v152);
                sub_1000039A0(v226, (uint64_t)"sg: ", 4);
                sub_100149114(v226);
                std::ostream::~ostream();
                sub_100018E08((uint64_t)&v222);
                std::ios::~ios();
              }
              *(void *)&long long v222 = 0;
              *((void *)&v222 + 1) = v34;
              LOBYTE(v223) = 2;
              sub_10008A630(&v128, (uint64_t)&v222, (uint64_t)&v152);
              int64_t v37 = sub_1000E9D44(&v99, &v152);
              unint64_t v39 = v37;
              BOOL v40 = v37 >= 0 || v37 == 0;
              char v41 = v40;
              if (v40)
              {
                uint64_t v35 = (void *)v38;
                if (!v32) {
                  uint64_t v31 = (void *)v38;
                }
                if (sub_100042754((uint64_t)&v128, (uint64_t)&v115, v38, v37))
                {
                  long long v140 = v128;
                  if (*((void *)&v128 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v128 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  v141[0] = v129[0];
                  *(_OWORD *)((char *)v141 + 9) = *(_OWORD *)((char *)v129 + 9);
                  long long v143 = v131;
                  long long v144 = v132;
                  long long v145 = v133;
                  char v146 = v134;
                  uint64_t v142 = v130;
                  uint64_t v147 = v135;
                  v148 = v136;
                  if (v136) {
                    atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v149 = v137;
                  unint64_t v150 = v138;
                  char v151 = v139;
                  sub_100042718((uint64_t)&v140, (uint64_t)&v115, (uint64_t)v35, v39, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v222);
                  sub_100018C14((uint64_t)&v194, (uint64_t)&v222);
                  sub_100018C5C(&v222);
                  sub_10000371C((uint64_t)&v140);
                  sub_1000414AC((uint64_t)&v194, (uint64_t)&v222);
                  sub_100018CC8((uint64_t)&v128, &v222);
                  sub_10000371C((uint64_t)&v222);
                  sub_1000411FC((uint64_t)&v194, (uint64_t)&v222);
                  sub_100018CC8((uint64_t)&v115, &v222);
                  sub_10000371C((uint64_t)&v222);
                }
                sub_100041C48((uint64_t)&v128, v39);
                v33 += v39;
                int v32 = 1;
              }
              else
              {
                if ((int)v37 >= 0) {
                  uint64_t v42 = v37;
                }
                else {
                  uint64_t v42 = -(int)v37;
                }
                unint64_t v18 = -v42;
              }
              if (*((void *)&v152 + 1)) {
                sub_100004944(*((std::__shared_weak_count **)&v152 + 1));
              }
              if ((v41 & 1) == 0) {
                goto LABEL_74;
              }
            }
            if (v32) {
              uint64_t v35 = v31;
            }
            else {
              uint64_t v35 = 0;
            }
            unint64_t v18 = v33;
LABEL_74:
            sub_1000197F0((uint64_t)&v194);
            uint64_t v6 = v56;
            if (v124) {
              sub_100004944(v124);
            }
            unint64_t v7 = v55;
            if (v116) {
              sub_100004944(v116);
            }
            if (v136) {
              sub_100004944(v136);
            }
            if (*((void *)&v128 + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v128 + 1));
            }
            *(void *)&long long v114 = v18;
            *((void *)&v114 + 1) = v35;
            goto LABEL_127;
          case 1:
            goto LABEL_124;
          case 3:
            uint64_t v45 = *(void *)(v99 + 8);
            unint64_t v46 = (*(void *)(v99 + 352)
                 + (*(void *)(v45 + 48) + *(void *)(v45 + 48) * *((void *)&v99 + 1))
                 / (unint64_t)(*(void *)(v45 + 48) + 1)
                 * *(unsigned int *)(v45 + 20))
                / *(unsigned __int16 *)(v45 + 18);
            if (!v158)
            {
              unint64_t v18 = 0;
LABEL_87:
              *(void *)&long long v222 = 0;
              *((void *)&v222 + 1) = v7;
              v223 = &v225;
              long long v224 = xmmword_10016E350;
              sub_1000E0B18(v7, v184, v46, 0, (unint64_t *)&v140);
              sub_1000E10C8((atomic_ullong *)&v222, (atomic_ullong *)&v140);
              sub_1000DFA40((atomic_ullong *)&v140);
              if ((void)v222 && !*(unsigned char *)(v222 + 344))
              {
                sub_1000FA910((unint64_t *)&v194, (unint64_t *)&v222);
                *((void *)&v194 + 1) = *((void *)&v222 + 1);
                *(void *)v195 = &v195[24];
                *(_OWORD *)&v195[8] = xmmword_10016E350;
                *(void *)&long long v140 = v223;
                *(void *)&long long v128 = &v223[40 * v224];
                sub_1000FABF4((uint64_t *)v195, (uint64_t *)&v140, (uint64_t *)&v128);
                uint64_t v47 = v0;
                char v49 = 1;
              }
              else
              {
                uint64_t v47 = v0;
                uint64_t v48 = std::generic_category();
                char v49 = 0;
                *(void *)&long long v194 = 5;
                *((void *)&v194 + 1) = v48;
              }
              uint64_t v0 = (uint64_t)&v221;
              char v221 = v49;
              sub_1000FA1FC((atomic_ullong *)&v222);
              if (!v221)
              {
                if ((int)v194 >= 0) {
                  uint64_t v52 = v194;
                }
                else {
                  uint64_t v52 = -(int)v194;
                }
                unint64_t v18 = -v52;
                uint64_t v6 = v56;
                goto LABEL_122;
              }
              uint64_t v0 = v47;
              if (v158)
              {
                sub_1000FA1FC((atomic_ullong *)v154);
                char v158 = 0;
              }
              sub_1000FA910(v154, (unint64_t *)&v194);
              v154[1] = *((void *)&v194 + 1);
              v155 = &v157;
              long long v156 = xmmword_10016E350;
              *(void *)&long long v222 = *(void *)v195;
              *(void *)&long long v140 = *(void *)v195 + 320 * *(void *)&v195[8];
              sub_1000FABF4((uint64_t *)&v155, (uint64_t *)&v222, (uint64_t *)&v140);
              uint64_t v6 = v56;
              char v158 = 1;
              if (v221) {
                sub_1000FA1FC((atomic_ullong *)&v194);
              }
              goto LABEL_100;
            }
            if (*(void *)(v154[0] + 40) == (v46 - v7[44] / (unint64_t)*(unsigned __int16 *)(v7[1] + 18))
                                            / (*(void *)(v7[1] + 48)
                                             * (unint64_t)(*(_DWORD *)(v7[1] + 20)
                                                                / *(unsigned __int16 *)(v7[1] + 18))))
            {
              unint64_t v18 = 0;
              goto LABEL_100;
            }
            uint64_t v50 = sub_1000FA1A4((uint64_t)v154);
            unint64_t v18 = v50;
            uint64_t v0 = v51;
            if (v50 < 0 && v50) {
              goto LABEL_122;
            }
            if (!v158) {
              goto LABEL_87;
            }
LABEL_100:
            long long v194 = v74;
            if (*((void *)&v74 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v195 = v75[0];
            *(_OWORD *)&v195[9] = *(_OWORD *)((char *)v75 + 9);
            long long v197 = v77;
            long long v198 = v78;
            long long v199 = v79;
            char v200 = v80;
            uint64_t v196 = v76;
            uint64_t v201 = v81;
            v202 = v82;
            if (v82) {
              atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v203 = v83;
            unint64_t v204 = v84;
            char v205 = v85;
            uint64_t v206 = v86;
            v207 = v87;
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v208[0] = v88[0];
            *(_OWORD *)((char *)v208 + 9) = *(_OWORD *)((char *)v88 + 9);
            long long v210 = v90;
            long long v211 = v91;
            long long v212 = v92;
            char v213 = v93;
            uint64_t v209 = v89;
            uint64_t v214 = v94;
            v215 = v95;
            if (v95) {
              atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v216 = v96;
            unint64_t v217 = v97;
            char v218 = v98;
            if ((void)v156 == *((void *)&v156 + 1))
            {
              sub_1000FAF30((uint64_t *)&v155, (uint64_t)&v155[40 * v156], 1, (uint64_t)&v194, &v222);
            }
            else
            {
              sub_1000FAFE0((uint64_t)&v155[40 * v156], (uint64_t)&v194);
              *(void *)&long long v156 = v156 + 1;
            }
            if (v215) {
              sub_100004944(v215);
            }
            if (v207) {
              sub_100004944(v207);
            }
            if (v202) {
              sub_100004944(v202);
            }
            if (*((void *)&v194 + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v194 + 1));
            }
LABEL_122:
            *(void *)&long long v114 = v18;
            *((void *)&v114 + 1) = v0;
            if ((v18 & 0x8000000000000000) == 0 || !v18)
            {
LABEL_124:
              sub_1000E8AC8(&v99, v6, (uint64_t)&v74, (uint64_t)&v86, v185, (unint64_t *)&v194);
              long long v114 = v194;
              unint64_t v18 = v194;
              if ((v194 & 0x8000000000000000) == 0 || !v114) {
                v193 += *(void *)v195;
              }
            }
LABEL_127:
            if ((v18 & 0x8000000000000000) != 0 && v18) {
              goto LABEL_129;
            }
            sub_100041B0C((uint64_t)&v101, v18);
            v57 += v18;
            sub_1000F98AC((uint64_t)v172, (uint64_t)&v101);
            uint64_t v0 = 0;
            break;
          default:
            goto LABEL_127;
        }
      }
      sub_1000E9560((uint64_t)&v69);
    }
    if (v95) {
      sub_100004944(v95);
    }
    if (v87) {
      sub_100004944(v87);
    }
    if (v82) {
      sub_100004944(v82);
    }
    if (*((void *)&v74 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v74 + 1));
    }
    if (v0) {
      break;
    }
  }
  if ((v114 & 0x8000000000000000) == 0 || !v114)
  {
    *(void *)&long long v114 = v57;
    *((void *)&v114 + 1) = v54;
  }
  sub_1000E9624(v100);
  sub_1000E9678((uint64_t)v154);
  if (v110) {
    sub_100004944(v110);
  }
  if (v102) {
    sub_100004944(v102);
  }
  return v114;
}

void sub_1000E8768(_Unwind_Exception *a1)
{
}

void *sub_1000E8960(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100105D84((uint64_t)a1, a2);
  *a1 = off_1001BA508;
  a1[45] = &off_1001BA608;
  a1[46] = &off_1001BA630;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BA508;
  a1[45] = off_1001BA590;
  a1[46] = off_1001BA5B8;
  return a1;
}

void sub_1000E8A60(_Unwind_Exception *a1)
{
  sub_1000F914C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8A84(uint64_t a1)
{
  return a1;
}

void sub_1000E8AC8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)&long long v152 = *(void *)(*a1 + 352) + (v10 + v10 * a1[1]) / (unint64_t)(v10 + 1) * v11;
  *((void *)&v152 + 1) = v152 + v11;
  LOBYTE(v153[0]) = 2;
  sub_100041EC4(a3, (uint64_t)&v152, a4, (uint64_t)&v72);
  if (sub_1000410B8((uint64_t)&v72, (uint64_t)&v86))
  {
    *a6 = -34;
    a6[2] = 0;
  }
  else
  {
    uint64_t v12 = v72;
    if ((*(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(*a1 + 8) + 20))
    {
      uint64_t v13 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)unint64_t v58 = v74[0];
      *(_OWORD *)&v58[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v14 = v75;
      uint64_t v15 = v76;
      uint64_t v16 = v77;
      long long v59 = v78;
      long long v60 = v79;
      char v61 = v80;
      uint64_t v17 = v81;
      unint64_t v18 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = a6;
      long long v62 = v83;
      unint64_t v63 = v84;
      char v64 = v85;
      long long v19 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v54 = v87[0];
      *(_OWORD *)&v54[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v20 = v88;
      long long v21 = v89;
      long long v55 = v90;
      long long v56 = v91;
      char v57 = v92;
      uint64_t v22 = v93;
      uint64_t v23 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v52 = 0;
      unint64_t v24 = 0;
      int v25 = 0;
      unint64_t v26 = 0;
      v112[0] = *(_OWORD *)v58;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v58[9];
      long long v115 = v59;
      long long v116 = v60;
      long long v120 = v62;
      v99[0] = *(_OWORD *)v54;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v54[9];
      long long v103 = v56;
      long long v102 = v55;
      unint64_t v27 = v96;
      uint64_t v110 = v12;
      long long v111 = v13;
      uint64_t v113 = v14;
      *(void *)&long long v114 = v15;
      *((void *)&v114 + 1) = v16;
      char v117 = v61;
      uint64_t v118 = v17;
      long long v119 = v18;
      unint64_t v121 = v63;
      char v122 = v64;
      long long v98 = v19;
      uint64_t v100 = v20;
      long long v101 = v21;
      char v104 = v57;
      uint64_t v105 = v22;
      long long v106 = v23;
      long long v107 = v95;
      char v109 = v97;
      unint64_t v108 = v96;
      LOBYTE(v152) = 0;
      char v165 = 0;
      while (!sub_1000410B8((uint64_t)&v110, (uint64_t)&v98))
      {
        if (v121 >= v27 || v26 == -1) {
          break;
        }
        if (sub_1000D8524())
        {
          *(void *)&long long v168 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((void *)&v168 + 1) = 104;
          LODWORD(v169) = 2;
          sub_100018AAC(&v135, &v168);
          sub_1000039A0(v147, (uint64_t)"sg: ", 4);
          sub_100149114(v147);
          std::ostream::~ostream();
          sub_100018E08((uint64_t)&v135);
          std::ios::~ios();
        }
        *(void *)&long long v135 = 0;
        *((void *)&v135 + 1) = v27;
        v136[0] = 2;
        sub_10008A630(&v110, (uint64_t)&v135, (uint64_t)&v148);
        int64_t v29 = v149;
        uint64_t v30 = *(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8);
        unint64_t v31 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
        unint64_t v32 = v150;
        uint64_t v33 = v151;
        long long v135 = v148;
        if (*((void *)&v148 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v148 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)long long v136 = v29;
        *(void *)&v136[8] = v32 % v31 + (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        *(void *)&v136[16] = v33;
        v136[24] = 0;
        uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
        v166[0] = 0;
        v166[1] = v34;
        char v167 = 2;
        sub_10008A630(&v135, (uint64_t)v166, (uint64_t)&v168);
        if (v169)
        {
          (*(void (**)(void *__return_ptr))(**(void **)(a2 + 16) + 128))(v166);
          uint64_t v35 = a5[1];
          if (v35 == a5[2])
          {
            sub_10001FC2C(a5, *a5 + 40 * v35, 1, (uint64_t)v166, &v170);
          }
          else
          {
            sub_10001CB94(*a5 + 40 * v35, (uint64_t)v166);
            ++a5[1];
          }
          v52 += v169;
        }
        unint64_t v36 = v150;
        int64_t v37 = v149;
        if (*((void *)&v168 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v168 + 1));
        }
        if (*((void *)&v135 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v135 + 1));
        }
        BOOL v38 = v37 >= 0 || v37 == 0;
        char v39 = v38;
        if (v38)
        {
          if (!v25) {
            unint64_t v24 = v36;
          }
          if (sub_100042754((uint64_t)&v110, (uint64_t)&v98, v36, v37))
          {
            v123[0] = v110;
            v123[1] = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v124[0] = v112[0];
            *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v112 + 9);
            long long v126 = v114;
            long long v127 = v115;
            long long v128 = v116;
            char v129 = v117;
            uint64_t v125 = v113;
            uint64_t v130 = v118;
            long long v131 = v119;
            if (v119) {
              atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v132 = v120;
            unint64_t v133 = v121;
            char v134 = v122;
            sub_100042718((uint64_t)v123, (uint64_t)&v98, v36, v37, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v135);
            sub_100018C14((uint64_t)&v152, (uint64_t)&v135);
            sub_100018C5C(&v135);
            sub_10000371C((uint64_t)v123);
            sub_1000414AC((uint64_t)&v152, (uint64_t)&v135);
            sub_100018CC8((uint64_t)&v110, &v135);
            sub_10000371C((uint64_t)&v135);
            sub_1000411FC((uint64_t)&v152, (uint64_t)&v135);
            sub_100018CC8((uint64_t)&v98, &v135);
            sub_10000371C((uint64_t)&v135);
          }
          sub_100041C48((uint64_t)&v110, v37);
          v26 += v37;
          int v25 = 1;
        }
        else
        {
          if ((int)v37 >= 0) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = -(int)v37;
          }
          unint64_t v50 = -v40;
        }
        if (*((void *)&v148 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v148 + 1));
        }
        if ((v39 & 1) == 0) {
          goto LABEL_60;
        }
      }
      if (v25) {
        int64_t v37 = v24;
      }
      else {
        int64_t v37 = 0;
      }
      unint64_t v50 = v26;
LABEL_60:
      sub_1000197F0((uint64_t)&v152);
      if (v106) {
        sub_100004944(v106);
      }
      if (*((void *)&v98 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v98 + 1));
      }
      if (v119) {
        sub_100004944(v119);
      }
      if (v111) {
        sub_100004944(v111);
      }
      *uint64_t v51 = v50;
      v51[1] = v37;
      if ((v50 & 0x8000000000000000) != 0 && v50) {
        v51[2] = 0;
      }
      else {
        v51[2] = v52;
      }
    }
    else
    {
      char v41 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)char v65 = v74[0];
      *(_OWORD *)&v65[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v42 = v75;
      uint64_t v43 = v76;
      uint64_t v44 = v77;
      long long v66 = v78;
      long long v67 = v79;
      char v68 = v80;
      uint64_t v45 = v81;
      unint64_t v46 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v69 = v83;
      unint64_t v70 = v84;
      char v71 = v85;
      *(void *)&long long v152 = v12;
      *((void *)&v152 + 1) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v153[0] = *(_OWORD *)v65;
      *(_OWORD *)((char *)v153 + 9) = *(_OWORD *)&v65[9];
      long long v157 = v66;
      uint64_t v154 = v42;
      uint64_t v155 = v43;
      uint64_t v156 = v44;
      long long v158 = v67;
      char v159 = v68;
      uint64_t v160 = v45;
      v161 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v162 = v69;
      unint64_t v163 = v70;
      char v164 = v71;
      long long v135 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)long long v136 = v87[0];
      *(_OWORD *)&v136[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v137 = v88;
      long long v138 = v89;
      long long v139 = v90;
      long long v140 = v91;
      char v141 = v92;
      uint64_t v142 = v93;
      long long v143 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v144 = v95;
      unint64_t v145 = v96;
      char v146 = v97;
      unint64_t v47 = sub_1000FBFE4((uint64_t (*)(long long *))sub_10008A600, &v152, &v135, 0xFFFFFFFFFFFFFFFFLL);
      unint64_t v49 = v48;
      if (v143) {
        sub_100004944(v143);
      }
      if (*((void *)&v135 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v135 + 1));
      }
      if (v161) {
        sub_100004944(v161);
      }
      if (*((void *)&v152 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v152 + 1));
      }
      *a6 = v47;
      a6[1] = v49;
      a6[2] = 0;
      if (v46) {
        sub_100004944(v46);
      }
      if (v41) {
        sub_100004944(v41);
      }
    }
  }
  if (v94) {
    sub_100004944(v94);
  }
  if (*((void *)&v86 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v86 + 1));
  }
  if (v82) {
    sub_100004944(v82);
  }
  if (v73) {
    sub_100004944(v73);
  }
}

void sub_1000E9480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (STACK[0x788]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x788]);
  }
  sub_1000197F0((uint64_t)&STACK[0x7B0]);
  sub_10000371C((uint64_t)&STACK[0x390]);
  sub_10000371C((uint64_t)&STACK[0x430]);
  sub_10000371C((uint64_t)&a23);
  sub_10000371C((uint64_t)&a43);
  sub_10006ED38(&STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9560(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      uint64_t v3 = *(void *)(v2 + 6200);
      if (v3 == *(void *)(v2 + 6208))
      {
        sub_1000FB360((uint64_t *)(v2 + 6192), *(void *)(v2 + 6192) + 24 * v3, 1, a1 + 32, &v5);
      }
      else
      {
        sub_100148D94(*(void *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(void *)(v2 + 6200);
      }
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_100148E28(a1 + 32);
    }
  }
  return a1;
}

uint64_t *sub_1000E9624(uint64_t *a1)
{
  uint64_t v2 = sub_1000FA1A4(*a1);
  if (v2 < 0)
  {
    if (v2)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000) == 0 || !*v4)
      {
        uint64_t *v4 = v2;
        v4[1] = v3;
      }
    }
  }
  return a1;
}

uint64_t sub_1000E9678(uint64_t a1)
{
  sub_1000FB67C(a1 + 6192);
  if (*(void *)(a1 + 5520))
  {
    uint64_t v2 = *(void **)(a1 + 5504);
    if ((void *)(a1 + 5528) != v2) {
      operator delete(v2);
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 5448);
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 5336);
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 5288);
  if (v5) {
    sub_100004944(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 5176);
  if (v6) {
    sub_100004944(v6);
  }
  if (*(unsigned char *)(a1 + 5160)) {
    sub_1000FA1FC((atomic_ullong *)a1);
  }
  return a1;
}

uint64_t sub_1000E970C(uint64_t a1)
{
  if (!atomic_load((unsigned int *)(a1 + 96))) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v10 = off_1001B8318;
  uint64_t v11 = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v12);
  if (*(unsigned char *)(v11 + 8))
  {
    char v5 = 0;
    uint64_t v2 = 4294967290;
  }
  else
  {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    if (v4)
    {
      sub_1000B98A4((uint64_t)&v10);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v8 = exception;
      if ((int)v4 < 0) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = -(int)v4;
      }
      void *exception = &off_1001C3DE8;
      uint64_t v9 = std::generic_category();
      v8[1] = v4;
      v8[2] = v9;
      *((unsigned char *)v8 + 24) = 0;
      *((unsigned char *)v8 + 48) = 0;
      v8[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    sub_1000E47E8(v2, (uint64_t)&v10);
    char v5 = 1;
  }
  uint64_t v10 = off_1001B8318;
  if (v13) {
    sub_100004944(v13);
  }
  if (v5) {
    return 0;
  }
  return v2;
}

void *sub_1000E993C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100105E14((uint64_t)a1, a2);
  *a1 = off_1001BA948;
  a1[45] = &off_1001BAA48;
  a1[46] = &off_1001BAA70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BA948;
  a1[45] = off_1001BA9D0;
  a1[46] = off_1001BA9F8;
  return a1;
}

void sub_1000E9A3C(_Unwind_Exception *a1)
{
  sub_1000FB99C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9A60(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000E9AA4(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, int a6)
{
  if (a5 != a4)
  {
    unint64_t v10 = sub_1000E9B64(a2, a4, a5 - a4);
    unsigned int v11 = v10;
    unint64_t v12 = HIDWORD(v10);
    uint64_t v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      __int16 v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_1000AC488(v13, v11, v12, (unsigned __int8 *)&v17);
    }
    else
    {
      __int16 v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_1000AC24C(v13, v11, v12, (unsigned __int8 *)&v16);
    }
    return *(void *)(a2 + 352)
         + *a1
         / (unint64_t)(*(void *)(*(void *)(a2 + 8) + 48) + 1)
         * *(void *)(*(void *)(a2 + 8) + 48)
         * *(unsigned int *)(*(void *)(a2 + 8) + 20)
         + ((v14 * *(unsigned __int16 *)(*(void *)(a2 + 8) + 18)) >> 1);
  }
  return a4;
}

unint64_t sub_1000E9B64(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = *(unsigned __int16 *)(v3 + 18);
  }
  if (!a3) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 20);
  uint64_t v7 = *(void *)(v3 + 48);
  return ((2
         * ((a2
                         - (*(void *)(a1 + 352)
                          + v7
                          * v6
                          * ((a2 / v4 - *(void *)(a1 + 352) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*(void *)(a1 + 352)
                                   + ((v5 + a2 - v4) / v4 - *(void *)(a1 + 352) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000;
}

uint64_t sub_1000E9BE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (atomic_ullong *)result;
  while (1)
  {
    if (!*v4)
    {
      uint64_t v6 = 0;
      atomic_compare_exchange_strong(v4, (unint64_t *)&v6, 0xFFFFFFFFFFFFFFFFLL);
      if (!v6) {
        break;
      }
    }
    __n128 result = sub_1000FBEF4((unint64_t *)v4, 1);
    if ((result & 1) == 0)
    {
      char v7 = 0;
      goto LABEL_7;
    }
  }
  char v7 = 1;
LABEL_7:
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)a3 = off_1001C3808;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 24) = a2;
  return result;
}

BOOL sub_1000E9C74(void *a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(*a1 + 8) + 20);
  uint64_t v3 = (*(void *)(*(void *)(*a1 + 56) + 16 * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  uint64_t v4 = (*(void *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(*a2 + 8) + 20);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return v5 || v3 == v4 + v2;
}

uint64_t sub_1000E9CD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = 40 * v1;
  while (1)
  {
    uint64_t v5 = sub_10001D688(v3);
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    uint64_t v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40;
    if (!v4) {
      return v2;
    }
  }
  return v5;
}

size_t sub_1000E9D44(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  v7[0] = *(void *)(*a1 + 352) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v7[1] = v7[0] + v4;
  char v8 = 2;
  sub_10008A630(a2, (uint64_t)v7, (uint64_t)&v9);
  if (v11)
  {
    bzero(v9, v11);
    size_t v5 = v11;
  }
  else
  {
    size_t v5 = -34;
  }
  if (v10) {
    sub_100004944(v10);
  }
  return v5;
}

uint64_t sub_1000E9DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 113)) {
    goto LABEL_13;
  }
  *(unsigned char *)(a1 + 113) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = v9;
    __int16 v16 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = a4;
    sub_100004944(v10);
  }
  else
  {
    uint64_t v15 = v9;
    __int16 v16 = 0;
    uint64_t v17 = a4;
  }
  uint64_t v18 = v6;
  uint64_t v19 = a4;
  char v20 = 1;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v15);
  uint64_t v12 = v17;
  if (v17 != v11)
  {
    *(unsigned char *)(a1 + 113) = 1;
    sub_1000B98A4(a2);
    if (v11 < 0) {
      a4 = v11;
    }
    else {
      a4 = -v11;
    }
  }
  if (v16) {
    sub_100004944(v16);
  }
  if (v12 == v11)
  {
LABEL_13:
    a4 = 0;
    if (a3)
    {
      if (*(unsigned char *)(a1 + 112))
      {
        *(unsigned char *)(a1 + 112) = 0;
        sub_1000E1C48(a3, *(void *)a1, *(void *)(a1 + 16));
        a4 = 0;
        if (!*(void *)(a1 + 16))
        {
          uint64_t v13 = *(void *)(a1 + 24);
          if (v13) {
            sub_1000E065C(a3, v13);
          }
          return 0;
        }
      }
    }
  }
  return a4;
}

void sub_1000E9F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000E9F48(unint64_t result, uint64_t a2, char **a3)
{
  unint64_t v3 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 18);
  uint64_t v4 = a3[3];
  unint64_t v5 = (unint64_t)v4 / v3 * v3;
  unint64_t v6 = (unint64_t)&v4[(void)a3[2]];
  unint64_t v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    uint64_t v9 = (void *)result;
    unint64_t v10 = (unint64_t)v4 % v3;
    int v11 = *a3;
    do
    {
      unint64_t v12 = sub_1000E9AA4(v9, a2, 1, v5, v7, 1);
      unint64_t v13 = v12;
      if (v6 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v6;
      }
      unint64_t v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        if ((unint64_t)&(*a3)[a3[2] - v11] >= v14 - (v5 + v10)) {
          size_t v16 = v14 - (v5 + v10);
        }
        else {
          size_t v16 = (size_t)&(*a3)[a3[2] - v11];
        }
        bzero(v11, v16);
      }
      __n128 result = sub_1000E9AA4(v9, a2, 1, v13, v7, 0);
      unint64_t v5 = result;
      if (result < v14 + v10)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v17 = result - v15;
      }
      v11 += v17;
    }
    while (result < v6);
  }
  return result;
}

void sub_1000EA06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(*(void *)(a3 + 8) + 20);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v16 = v6;
  unint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  char v21 = 0;
  int v10 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v16);
  if (v18 != v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v13 = exception;
    if (v10 < 0) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = -v10;
    }
    void *exception = &off_1001C3DE8;
    unint64_t v15 = std::generic_category();
    v13[1] = v14;
    void v13[2] = v15;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "Can't load bitmap from backend";
  }
  if (*(void *)(*(void *)(a3 + 8) + 48)
     * (*(_DWORD *)(*(void *)(a3 + 8) + 20)
      / *(unsigned __int16 *)(*(void *)(a3 + 8) + 18)))
  {
    unint64_t v11 = 0;
    do
    {
      sub_1000E0E0C(a1, v11);
      v11 += 2;
    }
    while (*(void *)(*(void *)(a3 + 8) + 48)
          * (unint64_t)(*(_DWORD *)(*(void *)(a3 + 8) + 20)
                             / *(unsigned __int16 *)(*(void *)(a3 + 8) + 18)) > v11);
  }
  if (v17) {
    sub_100004944(v17);
  }
}

void sub_1000EA1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EA208(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a4;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)(a1 + 8) = *(void *)(a3 + 352) + a4 / (v10 + 1) * v10 * v11;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  char v12 = a6 ^ 1;
  sub_1000881AC((void *)(a1 + 32), 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *(void *)(a1 + 120) = 850045863;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  if (v12)
  {
    sub_1000EA06C(a1, a2, a3);
  }
  else
  {
    *(_WORD *)(a1 + 112) = 257;
    sub_1000F3D48(v14, a3, *(void *)a1);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v14[0] + 56) + 16 * v14[1] + 8), 0x8000000000000000);
  }
  return a1;
}

void sub_1000EA30C(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  sub_100088230(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EA32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(*(void *)(a2 + 8) + 8) & 1) == 0)
  {
    uint64_t v8 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    int v9 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
    if (v9)
    {
      sub_1000B98A4(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      unint64_t v15 = exception;
      if (v9 < 0) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = -v9;
      }
      void *exception = &off_1001C3DE8;
      unint64_t v17 = std::generic_category();
      v15[1] = v16;
      void v15[2] = v17;
      *((unsigned char *)v15 + 24) = 0;
      *((unsigned char *)v15 + 48) = 0;
      v15[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    if (a3
      && (sub_1000F3D48(&v18, a3, *(void *)a1),
          (atomic_fetch_and((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0))
    {
      int v10 = 1;
    }
    else if (*(unsigned char *)(a1 + 113))
    {
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      if (!*(unsigned char *)(a1 + 112))
      {
        uint64_t v11 = 0;
LABEL_17:
        std::mutex::unlock(v8);
        return v11;
      }
    }
    uint64_t v11 = sub_1000E9DE0(a1, a2, a3, a4);
    if (v11) {
      int v12 = v10;
    }
    else {
      int v12 = 0;
    }
    if (a3 && v12)
    {
      sub_1000F3D48(&v18, a3, *(void *)a1);
      atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x8000000000000000);
    }
    goto LABEL_17;
  }
  return 4294967290;
}

void sub_1000EA4F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000EA510@<X0>(atomic_ullong *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, atomic_ullong *a7@<X8>)
{
  uint64_t v10 = (uint64_t)result;
  unint64_t v19 = a4;
  *a7 = 0;
  if (a4 || a5)
  {
    sub_1000EA69C((uint64_t)(result + 35), a3, a6, (unint64_t *)&v18);
    sub_1000EA868(a7, &v18);
    __n128 result = sub_1000DEBE8(&v18);
    atomic_ullong v12 = *a7;
    if (*a7) {
      LOBYTE(v12) = *(unsigned char *)(v12 + 520) == 0;
    }
    if (v12 & 1) != 0 || (a6)
    {
      if (!*a7 || (unsigned int v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(unsigned char *)(*a7 + 520))
        {
          if (v19 | (*(void *)(*(void *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20)))
          {
            if (v19) {
              unint64_t v14 = v19;
            }
            else {
              unint64_t v14 = *(void *)(*(void *)(v10 + 152) + 8 * a3) * *(unsigned int *)(v10 + 20);
            }
            uint64_t v18 = *(void *)(v10 + 80) * a3;
            unint64_t v19 = v14;
            sub_1000EA90C(a7, v10, (void *)(a2 + 16), &v19, &v18);
          }
          uint64_t v15 = sub_1000E116C(v10, a2, 1);
          uint64_t v17 = *(void *)(v10 + 80) * a3;
          uint64_t v18 = v15;
          unsigned __int8 v16 = 1;
          sub_1000EA8A8(a7, v10, (void *)(a2 + 16), (unint64_t *)&v18, &v17, &v16);
        }
      }
    }
  }
  return result;
}

void sub_1000EA674(_Unwind_Exception *a1)
{
  sub_1000DEBE8(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000EA69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_100105EA4(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 520) || v13 && *(unsigned char *)(v13 + 520))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_1000DEBE8((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 912) && v14 != (void *)(a1 + 936))
  {
    do
    {
      sub_1001062E0(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_1000EA868((atomic_ullong *)&v13, &v12);
      sub_1000DEBE8(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 520)) {
          break;
        }
      }
      uint64_t v7 = (unint64_t *)sub_100106480((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_10010651C(a1, v7, a2, (unint64_t *)&v11);
        sub_1000EA868((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_1000DEBE8((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    uint64_t v8 = sub_100102254((uint64_t **)(a1 + 928), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    sub_100103564(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_1000DEBE8((atomic_ullong *)&v13);
}

void sub_1000EA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000DEBE8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1000EA868(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_1000DEBE8(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_1000EA8A8(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
}

void sub_1000EA8D0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      sub_10010734C(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000EA8F8(_Unwind_Exception *a1)
{
}

void sub_1000EA90C(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000EA934(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      sub_10010734C(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1000EA95C(_Unwind_Exception *a1)
{
}

unint64_t *sub_1000EA970@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_100106790(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 520))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_1000DEBE8((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *sub_1000EAA0C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010722C((uint64_t)a1, a2);
  *a1 = off_1001BAB68;
  a1[45] = &off_1001BAC68;
  a1[46] = &off_1001BAC90;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BAB68;
  a1[45] = off_1001BABF0;
  a1[46] = off_1001BAC18;
  return a1;
}

void sub_1000EAB0C(_Unwind_Exception *a1)
{
  sub_1000FC698(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EAB30(uint64_t a1)
{
  return a1;
}

void *sub_1000EAB74(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001072BC((uint64_t)a1, a2);
  *a1 = off_1001BAD88;
  a1[45] = &off_1001BAE88;
  a1[46] = &off_1001BAEB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BAD88;
  a1[45] = off_1001BAE10;
  a1[46] = off_1001BAE38;
  return a1;
}

void sub_1000EAC74(_Unwind_Exception *a1)
{
  sub_1000FCE0C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EAC98(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EACDC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_100100FF4(a1 + 2080, 0, 0, 0);
  if (v4 == -1) {
    return 4294967282;
  }
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
    int v6 = result;
    uint64_t result = (int)result < 0 ? result : -(int)result;
    if (v6) {
      return result;
    }
  }
  int v7 = sub_100103564(a1 + 280, 0, 0, 0);
  if (v7 == -1) {
    return 4294967282;
  }
  if (v7 != 1) {
    return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  int v8 = result;
  uint64_t result = (int)result < 0 ? result : -(int)result;
  if (!v8) {
    return 0;
  }
  return result;
}

uint64_t sub_1000EADCC(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  int v6 = (std::mutex *)(a1 + 3792);
  std::mutex::lock((std::mutex *)(a1 + 3792));
  long long v7 = *(_OWORD *)(a1 + 3744);
  *(_OWORD *)(a1 + 3744) = 0u;
  long long v8 = *(_OWORD *)(a1 + 3760);
  long long v37 = v7;
  long long v38 = v8;
  *(_OWORD *)(a1 + 3760) = 0u;
  long long v9 = v39;
  long long v39 = *(_OWORD *)(a1 + 3776);
  *(_OWORD *)(a1 + 3776) = v9;
  std::mutex::unlock(v6);
  size_t v10 = (*(void *)(a1 + 160) - *(void *)(a1 + 152) + (unint64_t)*(unsigned __int16 *)(a1 + 18) + 7)
      / *(unsigned __int16 *)(a1 + 18)
      * *(unsigned __int16 *)(a1 + 18);
  uint64_t v11 = malloc_type_valloc(v10, 0xF8ED6DDuLL);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v36 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v40 = off_1001B9160;
  uint64_t v43 = &v40;
  unint64_t v46 = v11;
  sub_10004A2B0((uint64_t)v47, (uint64_t)&v40);
  sub_10004A330(&v40);
  atomic_ullong v12 = v46;
  unint64_t v13 = *(void *)(a1 + 3608);
  *(void *)(a1 + 3608) = v13 + 1;
  *atomic_ullong v12 = bswap64(v13);
  unint64_t v14 = v12 + 1;
  uint64_t v15 = *(unint64_t **)(a1 + 152);
  uint64_t v16 = *(unint64_t **)(a1 + 160);
  while (v15 != v16)
  {
    unint64_t v17 = *v15++;
    *v14++ = bswap64(v17);
  }
  bzero(v14, (size_t)v46 + v10 - (void)v14);
  sub_1000EB1B0(a1 + 2080);
  sub_1000EB244(a1 + 280);
  uint64_t v18 = sub_1000EACDC(a1, a2);
  if (!v18)
  {
    uint64_t v19 = (uint64_t)v46;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
    uint64_t v40 = (uint64_t (**)())v19;
    char v41 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v42 = v10;
    uint64_t v43 = a3;
    size_t v44 = v10;
    char v45 = 0;
    int v21 = (*(uint64_t (**)(void, uint64_t (***)()))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), &v40);
    if (v10 == v21)
    {
      uint64_t v22 = (unint64_t **)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        uint64_t v23 = 0;
        int v25 = 0;
        unint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        uint64_t v23 = &(*v22)[v39 & 0x1FF];
        unint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        int v25 = (unint64_t *)(*(void *)v24 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      sub_1000E5684((atomic_ullong *)a1, v22, v23, v24, v25, a2);
      uint64_t v18 = 1;
    }
    else
    {
      *(void *)(a1 + 3608) = v13;
      std::mutex::lock(v6);
      unint64_t v26 = *(void *)(a1 + 3776) + *(void *)(a1 + 3784);
      uint64_t v27 = *(void *)(a1 + 3752);
      long long v28 = (char *)(v27 + 8 * (v26 >> 9));
      if (*(void *)(a1 + 3760) == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = *(void *)v28 + 8 * (v26 & 0x1FF);
      }
      uint64_t v30 = (char *)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        unint64_t v31 = 0;
        uint64_t v33 = 0;
        unint64_t v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        unint64_t v31 = (char *)(*(void *)v30 + 8 * (v39 & 0x1FF));
        unint64_t v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        uint64_t v33 = (char *)(*(void *)v32 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      sub_1000E5650((void **)(a1 + 3744), v28, v29, v30, v31, v32, v33);
      if (v21 >= 0) {
        uint64_t v18 = 4294967291;
      }
      else {
        uint64_t v18 = v21;
      }
      std::mutex::unlock(v6);
    }
    if (v41) {
      sub_100004944(v41);
    }
  }
  sub_10004A3B4((uint64_t *)&v46, 0);
  sub_10004A330(v47);
  sub_1000DF840(&v37);
  return v18;
}

void sub_1000EB14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex::unlock(v22);
  if (a16) {
    sub_100004944(a16);
  }
  sub_10004A3B4(&a21, 0);
  sub_10004A330(v21);
  sub_1000DF840(&a9);
  _Unwind_Resume(a1);
}

void sub_1000EB1B0(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 608);
  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    int v4 = (atomic_ullong *)(a1 + 616);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 616), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 688), &v7);
      while (atomic_load((unint64_t *)(a1 + 608)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

void sub_1000EB244(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 784);
  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    int v4 = (atomic_ullong *)(a1 + 792);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 792), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 864), &v7);
      while (atomic_load((unint64_t *)(a1 + 784)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

uint64_t sub_1000EB2D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v8 = *(void *)(a4 + 144) - a3[18];
  unint64_t v9 = a3[3];
  size_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v33 = *a3;
  uint64_t v34 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v35[0] = *((_OWORD *)a3 + 1);
  uint64_t v11 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v36 = a3[6];
  long long v37 = *(_OWORD *)(a3 + 7);
  long long v38 = *(_OWORD *)(a3 + 9);
  long long v39 = *(_OWORD *)(a3 + 11);
  char v40 = *((unsigned char *)a3 + 104);
  atomic_ullong v12 = (std::__shared_weak_count *)a3[15];
  uint64_t v41 = a3[14];
  size_t v42 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  long long v43 = *((_OWORD *)a3 + 8);
  uint64_t v44 = a3[18];
  char v45 = *((unsigned char *)a3 + 152);
  int v14 = a5 ^ 1;
  while (1)
  {
    uint64_t v15 = v9 / *(void *)(a1 + 80);
    sub_1000E2580(a1, a2, v15, v14, 1, &v32);
    if (v32 && *(unsigned char *)(v32 + 520))
    {
      if ((a5 & 1) == 0) {
        sub_1000B98A4(a2);
      }
      int v16 = 1;
      uint64_t v5 = -5;
      goto LABEL_24;
    }
    sub_1000423DC((uint64_t)&v33, *(void *)(a1 + 80) + *(void *)(a1 + 80) * v15, a4, 0, (uint64_t)&v25);
    if (v32 && !*(unsigned char *)(v32 + 520))
    {
      if (a5)
      {
        uint64_t v20 = sub_1000E7524();
        uint64_t v5 = v20;
        if (v20 < 0 && v20) {
          goto LABEL_37;
        }
      }
      else
      {
        if (*(unsigned char *)(v32 + 400)) {
          uint64_t v19 = v32 + 40;
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v21 = sub_1000E57B0(v19, a2, (uint64_t *)&v25, (uint64_t)&v29);
        uint64_t v5 = v21;
        if ((v21 & 0x8000000000000000) != 0 && v21)
        {
          sub_1000B98A4(a2);
LABEL_37:
          int v16 = 1;
          goto LABEL_16;
        }
      }
      unint64_t v17 = v5;
    }
    else
    {
      unint64_t v17 = 0;
      do
      {
        size_t v18 = v27;
        bzero(v25, v27);
        sub_100041C48((uint64_t)&v25, v18);
        v17 += v18;
      }
      while (!sub_1000410B8((uint64_t)&v25, (uint64_t)&v29));
    }
    sub_100041B0C((uint64_t)&v33, v17);
    int v16 = 0;
    v9 += v17;
    v13 += v17;
LABEL_16:
    if (v31) {
      sub_100004944(v31);
    }
    if (v30) {
      sub_100004944(v30);
    }
    if (v28) {
      sub_100004944(v28);
    }
    if (v26) {
      sub_100004944(v26);
    }
LABEL_24:
    sub_1000DEBE8((atomic_ullong *)&v32);
    if (v16) {
      break;
    }
    if (v13 == v11) {
      goto LABEL_40;
    }
  }
  uint64_t v11 = v5;
LABEL_40:
  if (v42) {
    sub_100004944(v42);
  }
  if (v34) {
    sub_100004944(v34);
  }
  return v11;
}

void sub_1000EB5CC(_Unwind_Exception *a1)
{
  sub_1000DEBE8((atomic_ullong *)(v1 - 256));
  sub_10000371C(v1 - 248);
  _Unwind_Resume(a1);
}

double sub_1000EB614@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(unsigned char *)(a1 + 32) & 1) + *(void *)(a1 + 24);
  v10[0] = *(void *)(a1 + 40);
  v10[1] = v3;
  char v11 = 2;
  *(void *)&long long v8 = qword_1001D3B40;
  *((void *)&v8 + 1) = qword_1001D3B40;
  LOBYTE(v9) = 2;
  unsigned int v4 = sub_1000EB6D0(*(void *)(a1 + 64), *(void *)(a1 + 56), v10, (uint64_t)&v8);
  if (v4 >= 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::unique_lock<std::mutex> v7 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Can't convert ASIF flag.", 5u);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

unint64_t sub_1000EB6D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v7 = 0;
  *(void *)&long long v32 = *a3;
  *((void *)&v32 + 1) = v32;
  uint64_t v29 = qword_1001D3B40;
  uint64_t v30 = qword_1001D3B40;
  unsigned __int8 v33 = 2;
  char v31 = 2;
  long long v27 = *(_OWORD *)a3;
  uint64_t v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if (*((void *)&v27 + 1) < (unint64_t)v27) {
          goto LABEL_5;
        }
      }
      else
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if ((unint64_t)v27 >= *((void *)&v27 + 1)) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      unint64_t v9 = *((void *)&v27 + 1);
      uint64_t v8 = v27;
      if ((unint64_t)v27 >= *((void *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((void *)&v27 + 1))
      {
LABEL_5:
        if (!qword_1001D3B40) {
          break;
        }
        goto LABEL_12;
      }
    }
    if (!((v28 & 1) + ((v28 >> 1) & 1) - 1 - v8 + v9)) {
      break;
    }
LABEL_12:
    if ((v28 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    unint64_t v12 = v11 * *(unsigned __int16 *)(a1 + 18);
    sub_1000E2580(a1, a2, v12 / *(void *)(a1 + 80), 0, 1, &v26);
    if (v26 && *(unsigned char *)(v26 + 520))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      unint64_t v21 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v21;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't load table to get extents";
    }
    if (v26 && !*(unsigned char *)(v26 + 520))
    {
      if (*(unsigned char *)(v26 + 400)) {
        uint64_t v15 = (uint64_t *)(v26 + 40);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v13 = sub_1000EB9D0(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v14 = (*(void *)(a1 + 80) + *(void *)(a1 + 80) * (v12 / *(void *)(a1 + 80)) + 1)
          / *(unsigned __int16 *)(a1 + 18);
      if (v14 >= v9) {
        unint64_t v14 = v9;
      }
      uint64_t v29 = v11;
      uint64_t v30 = v14;
      char v31 = 2;
    }
    if (v13 == v7)
    {
LABEL_36:
      *((void *)&v32 + 1) = v30;
      unsigned __int8 v33 = 2;
      long long v22 = v27;
      uint64_t v23 = v28;
      sub_10000D5DC((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      long long v27 = v24;
      LOBYTE(v28) = v25;
      char v18 = 1;
      unint64_t v7 = v13;
      goto LABEL_40;
    }
    if (v33)
    {
      if (v33 == 3)
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if (*((void *)&v32 + 1) >= (unint64_t)v32) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if ((unint64_t)v32 < *((void *)&v32 + 1)) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v17 = v32;
      if ((unint64_t)v32 < *((void *)&v32 + 1) && (unint64_t)(v32 + 1) < *((void *)&v32 + 1))
      {
LABEL_35:
        if (!((v33 & 1) + (uint64_t)(((v33 >> 1) & 1) - 1) - v17 + v16)) {
          goto LABEL_36;
        }
        goto LABEL_39;
      }
    }
    if (!qword_1001D3B40) {
      goto LABEL_36;
    }
LABEL_39:
    char v18 = 0;
LABEL_40:
    sub_1000DEBE8((atomic_ullong *)&v26);
  }
  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(unsigned char *)(a4 + 16) = v33;
  return v7;
}

void sub_1000EB9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000DEBE8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000EB9D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)a3;
  unint64_t v6 = *(void *)(a3 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a3 + 16);
  v64[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v5 + 1;
  }
  unint64_t v9 = (void *)sub_1000E0088((uint64_t)a1, v8 * *(unsigned __int16 *)(a1[1] + 18));
  unint64_t v11 = atomic_load((unint64_t *)(v9[7] + 16 * v10 + 8));
  unint64_t v49 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    uint64_t v12 = v9[1];
    sub_1000E0B18(a1, a2, (v9[44]+ (*(void *)(v12 + 48) + *(void *)(v12 + 48) * v10)/ (unint64_t)(*(void *)(v12 + 48) + 1)* *(unsigned int *)(v12 + 20))/ *(unsigned __int16 *)(v12 + 18), 0, v57);
    uint64_t v13 = a1[1];
    if (v57[0])
    {
      if (*(unsigned char *)(v57[0] + 224)) {
        uint64_t v15 = v57[0] + 40;
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v14 = *(unsigned __int16 *)(v13 + 18);
    unint64_t v49 = sub_1000E0E0C(v15, 2* ((v8 * v14- (a1[44]+ *(void *)(v13 + 48)* *(unsigned int *)(v13 + 20)* ((v8 * v14 / v14 - a1[44] / v14)/ (*(void *)(v13 + 48)* (unint64_t)(*(_DWORD *)(v13 + 20) / v14)))))/ v14));
    sub_1000DFA40((atomic_ullong *)v57);
  }
  unint64_t v16 = 0;
  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5) {
          goto LABEL_18;
        }
      }
      else if (v6 > v5)
      {
        goto LABEL_18;
      }
    }
    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_18:
      if (!(v6 - v5 + (v7 & 1) + (int)(((v7 >> 1) & 1) - 1))) {
        goto LABEL_42;
      }
      goto LABEL_22;
    }
    if (!qword_1001D3B40) {
      goto LABEL_42;
    }
LABEL_22:
    if ((v7 & 2) != 0) {
      unint64_t v17 = v5;
    }
    else {
      unint64_t v17 = v5 + 1;
    }
    uint64_t v18 = a1[1];
    unint64_t v19 = v17 * *(unsigned __int16 *)(v18 + 18);
    if (v19 >= *(void *)(v18 + 80) + a1[44]) {
      goto LABEL_42;
    }
    uint64_t v20 = (void *)sub_1000E0088((uint64_t)a1, v19);
    long long v22 = v20;
    uint64_t v23 = v21;
    long long v62 = v20;
    uint64_t v63 = v21;
    char v24 = v7;
    unint64_t v50 = v6;
    uint64_t v25 = *(unsigned __int16 *)(a1[1] + 18);
    uint64_t v26 = v20[1];
    unint64_t v27 = (*(void *)(v26 + 48) + *(void *)(v26 + 48) * v21) / (unint64_t)(*(void *)(v26 + 48) + 1);
    uint64_t v28 = *(unsigned int *)(v26 + 20);
    if (v20[44] + v28 + v27 * v28 >= v25 + v25 * (v6 + (int)((v7 & 1) - 1))) {
      unint64_t v29 = v25 + v25 * (v6 + (int)((v7 & 1) - 1));
    }
    else {
      unint64_t v29 = v20[44] + v28 + v27 * v28;
    }
    uint64_t v30 = (unint64_t *)(v20[7] + 16 * v21);
    BOOL v31 = sub_1000FBE80(v30);
    v60[0] = off_1001C37E8;
    v60[1] = v30;
    BOOL v61 = v31;
    if (!v31)
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      sub_1000EBFCC(v57, &v55);
      sub_1000039A0(v59, (uint64_t)"Couldn't lock entry ", 20);
      sub_1000E3A84(v59, &v62);
      sub_1000EC0F0((uint64_t)v57);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      long long v43 = std::generic_category();
      exception[1] = 5;
      exception[2] = v43;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't lock entry";
    }
    unint64_t v32 = atomic_load((unint64_t *)(v22[7] + 16 * v23 + 8));
    unint64_t v33 = v32 >> 62;
    if (v49 == v33)
    {
      uint64_t v34 = a1[1];
      unint64_t v16 = v29 / *(unsigned __int16 *)(v34 + 18);
      goto LABEL_40;
    }
    if (v33 != 3) {
      break;
    }
    uint64_t v35 = v62[1];
    sub_1000E0B18(a1, a2, (v62[44]+ (*(void *)(v35 + 48) + *(void *)(v35 + 48) * v63)/ (unint64_t)(*(void *)(v35 + 48) + 1)* *(unsigned int *)(v35 + 20))/ *(unsigned __int16 *)(v35 + 18), 0, &v54);
    if (!v54 || *(unsigned char *)(v54 + 344))
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      sub_1000EC134(v57, &v55);
      sub_1000039A0(v59, (uint64_t)"Can't read bitmap", 17);
      sub_1000EC258((uint64_t)v57);
      uint64_t v44 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v44 = &off_1001C3DE8;
      char v45 = std::generic_category();
      v44[1] = 5;
      v44[2] = v45;
      *((unsigned char *)v44 + 24) = 0;
      *((unsigned char *)v44 + 48) = 0;
      v44[7] = "Can't read bitmap";
    }
    uint64_t v36 = *(unsigned char *)(v54 + 224) ? (void *)(v54 + 40) : 0;
    unint64_t v37 = sub_1000E9AA4(v36, (uint64_t)a1, v49, v19, v29, 0);
    unint64_t v38 = *(unsigned __int16 *)(a1[1] + 18);
    sub_1000DFA40((atomic_ullong *)&v54);
    unint64_t v16 = v37 / v38;
    if (v37 < v29) {
      break;
    }
    uint64_t v34 = a1[1];
LABEL_40:
    v51[0] = v5;
    v51[1] = v50;
    char v52 = v24;
    *(_DWORD *)int v53 = v64[0];
    *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v64 + 3);
    unint64_t v39 = v29 / *(unsigned __int16 *)(v34 + 18);
    *(void *)&long long v55 = v17;
    *((void *)&v55 + 1) = v39;
    LOBYTE(v56) = 2;
    sub_10000D5DC((uint64_t)v51, (uint64_t)&v55, (uint64_t)v57);
    unint64_t v5 = v57[0];
    unint64_t v6 = v57[1];
    unsigned int v7 = v58;
    sub_100148E28(v60);
  }
  sub_100148E28(v60);
LABEL_42:
  unint64_t v40 = *(void *)a3;
  if ((*(unsigned char *)(a3 + 16) & 2) == 0) {
    ++v40;
  }
  *(void *)a4 = v40;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = 2;
  return v49;
}

void sub_1000EBF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1000DFA40((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *sub_1000EBFCC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001073A0((uint64_t)a1, a2);
  *a1 = off_1001BAFA8;
  a1[45] = &off_1001BB0A8;
  a1[46] = &off_1001BB0D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BAFA8;
  a1[45] = off_1001BB030;
  a1[46] = off_1001BB058;
  return a1;
}

void sub_1000EC0CC(_Unwind_Exception *a1)
{
  sub_1000FD580(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC0F0(uint64_t a1)
{
  return a1;
}

void *sub_1000EC134(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100107430((uint64_t)a1, a2);
  *a1 = off_1001BB1C8;
  a1[45] = &off_1001BB2C8;
  a1[46] = &off_1001BB2F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BB1C8;
  a1[45] = off_1001BB250;
  a1[46] = off_1001BB278;
  return a1;
}

void sub_1000EC234(_Unwind_Exception *a1)
{
  sub_1000FDCF4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EC258(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EC29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000E3620(a1, a3, a4, (uint64_t)&v32);
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 184);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    unint64_t v10 = v35 * *(unsigned __int16 *)(a1 + 18);
    sub_1000E2580(a1, a2, v10 / *(void *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(unsigned char *)(v31 + 520))
    {
      if (*(unsigned char *)(v31 + 400)) {
        uint64_t v15 = v31 + 40;
      }
      else {
        uint64_t v15 = 0;
      }
      sub_1000E3B4C(v15, a2, a3, a4, &v18);
      uint64_t v34 = v19;
      uint64_t v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        unint64_t v35 = sub_1000DFDF4(&v32);
        uint64_t v36 = v16;
      }
      int v12 = 0;
      goto LABEL_37;
    }
    if (v31)
    {
      if (*(unsigned char *)(v31 + 520)) {
        uint64_t v11 = 4294967291;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        sub_1000E1CF8(a3, a4, *(unsigned int *)(a1 + 20), *(unsigned __int16 *)(a1 + 18), v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), *(void *)(a1 + 80) + v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), (uint64_t)&v18);
        while ((void)v18 != v25
             || *((void *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (void)v18 + 16 * *((void *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          unint64_t v20 = sub_1000DFDF4((uint64_t *)&v18);
          uint64_t v21 = v13;
        }
        uint64_t v34 = v19;
        uint64_t v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          unint64_t v35 = sub_1000DFDF4(&v32);
          uint64_t v36 = v14;
        }
        int v12 = 2;
        goto LABEL_37;
      }
      int v12 = 1;
      uint64_t v4 = v11;
    }
    else
    {
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v4 = 0;
      int v12 = 1;
    }
LABEL_37:
    sub_1000DEBE8((atomic_ullong *)&v31);
    if ((v12 | 2) != 2) {
      return v4;
    }
  }
  return 0;
}

uint64_t sub_1000EC590(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  unint64_t v6 = (std::mutex *)(a1 + 3528);
  std::mutex::lock((std::mutex *)(a1 + 3528));
  sub_1000EB1B0(a1 + 2080);
  sub_1000EB244(a1 + 280);
  unsigned int v7 = atomic_exchange((atomic_uint *volatile)(a1 + 3592), 0);
  int v8 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  if (v8) {
    goto LABEL_2;
  }
  uint64_t v9 = sub_1000EACDC(a1, a2);
  if (v9)
  {
LABEL_8:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v11 = *(unint64_t **)(a1 + 128);
  int v12 = *(unint64_t **)(a1 + 136);
  if (v11 == v12)
  {
    uint64_t v9 = 0;
    if (v7) {
      goto LABEL_22;
    }
LABEL_25:
    if (*(uint64_t (****)())(a1 + 3600) == a3)
    {
LABEL_27:
      if (!v7 && (v9 & 0x80000000) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_6;
      }
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v9 = sub_1000EADCC(a1, a2, a3);
    goto LABEL_27;
  }
  uint64_t v9 = 0;
  unint64_t v13 = 0;
  do
  {
    sub_1000EA970(v11, v13 / *(void *)(a1 + 80), &v16);
    if (v16 && !*(unsigned char *)(v16 + 520))
    {
      if (*(unsigned char *)(v16 + 400)) {
        uint64_t v14 = v16 + 40;
      }
      else {
        uint64_t v14 = 0;
      }
      BOOL v15 = sub_1000E47E8(v14, a2);
      if (v7) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = v15;
      }
    }
    v13 += *(void *)(a1 + 80);
    sub_1000DEBE8((atomic_ullong *)&v16);
    ++v11;
  }
  while (v11 != v12);
  if (!v7) {
    goto LABEL_25;
  }
LABEL_22:
  int v8 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
  if (!v8) {
    goto LABEL_26;
  }
LABEL_2:
  if (v8 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = -v8;
  }
LABEL_5:
  atomic_fetch_or((atomic_uint *volatile)(a1 + 3592), v7);
LABEL_6:
  std::mutex::unlock(v6);
  return v9;
}

void sub_1000EC7B0()
{
}

void sub_1000EC7D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  int v12 = (void *)sub_1000ECDD8(a1, a2, a4, a5);
  *int v12 = off_1001B8620;
  v12[11] = off_1001BC520;
  v12[12] = v12;
  v12[14] = v12 + 11;
  v12[15] = a3;
  sub_1000FE1D8(v12 + 16, (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  sub_1000FE250((void *)(a1 + 152), (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  *(void *)(a1 + 176) = a4;
  unint64_t v13 = (a4
       - 1
       + (a5 - 1 + (unint64_t)a6) / a5 * a5
       + (a5 + 7 + 8 * ((unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 80) - 1) / *(void *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(void *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = v13 * a4;
  v15[3] = 0;
  sub_100107544(a1 + 280, 2, 0, (uint64_t)v15);
}

void sub_1000ECCA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::thread *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100109D24(v25, 0);
  operator delete();
}

void sub_1000ECDD0()
{
}

uint64_t sub_1000ECDD8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  *(void *)a1 = off_1001BB3E0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3 >> 3;
  unint64_t v5 = a3 / a4;
  unint64_t v6 = 4 * a3;
  if (v6 < v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6 / v5;
  }
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = sub_1000DFD90(a1);
  unint64_t v9 = (*(void *)(a1 + 48) + v8) / (unint64_t)(*(void *)(a1 + 48) + 1);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  unint64_t v10 = v8 - v9;
  unint64_t v11 = v10 * *(unsigned int *)(a1 + 20);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  return a1;
}

unint64_t sub_1000ECE6C(uint64_t a1, uint64_t (***a2)(), unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4;
  size_t v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  unint64_t v10 = (unint64_t *)malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v24 = off_1001B9160;
  uint64_t v27 = &v24;
  uint64_t v30 = v10;
  sub_10004A2B0((uint64_t)v31, (uint64_t)&v24);
  sub_10004A330(&v24);
  unint64_t v11 = v30;
  int v12 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v24 = (uint64_t (**)())v11;
  uint64_t v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v26 = v9;
  uint64_t v27 = a2;
  size_t v28 = v9;
  char v29 = 0;
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(void *)a1 + 88))(a1, &v24);
  if (v9 != v13)
  {
    unint64_t v20 = __cxa_allocate_exception(0x40uLL);
    uint64_t v21 = v20;
    if (v13 >= 0) {
      uint64_t v22 = 4294967291;
    }
    else {
      uint64_t v22 = v13;
    }
    *unint64_t v20 = &off_1001C3DE8;
    uint64_t v23 = std::generic_category();
    v21[1] = v22;
    uint64_t v21[2] = v23;
    *((unsigned char *)v21 + 24) = 0;
    *((unsigned char *)v21 + 48) = 0;
    v21[7] = "Can't load asif dir table";
  }
  unint64_t v14 = *v11;
  if (v6)
  {
    BOOL v15 = v11 + 1;
    do
    {
      unint64_t v16 = *v15++;
      *a5++ = bswap64(v16);
      --v6;
    }
    while (v6);
  }
  if (v25) {
    sub_100004944(v25);
  }
  sub_10004A3B4((uint64_t *)&v30, 0);
  sub_10004A330(v31);
  return bswap64(v14);
}

void sub_1000ED090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10004A3B4((uint64_t *)va, 0);
  sub_10004A330(v7);
  _Unwind_Resume(a1);
}

unint64_t sub_1000ED0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  unint64_t v10 = &v16;
  unint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = 0;
  uint64_t v12 = 8;
  uint64_t v13 = a2;
  uint64_t v14 = 8;
  char v15 = 0;
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, unint64_t **))(*(void *)a1 + 88))(a1, &v10);
  if (a1 != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = exception;
    if ((int)a1 >= 0) {
      a1 = 4294967291;
    }
    else {
      a1 = a1;
    }
    void *exception = &off_1001C3DE8;
    size_t v9 = std::generic_category();
    v8[1] = a1;
    v8[2] = v9;
    *((unsigned char *)v8 + 24) = 0;
    *((unsigned char *)v8 + 48) = 0;
    v8[7] = "Can't load asif dir version";
  }
  unint64_t v5 = bswap64(v16);
  unint64_t v16 = v5;
  if (v11) {
    sub_100004944(v11);
  }
  return v5;
}

void sub_1000ED1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100004944(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000ED204(void *result, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = "uninit";
      uint64_t v3 = 6;
      goto LABEL_3;
    case 1:
      uint64_t v2 = "fully";
      uint64_t v3 = 5;
      goto LABEL_3;
    case 2:
      uint64_t v2 = "unmapped";
      uint64_t v3 = 8;
      goto LABEL_3;
    case 3:
      uint64_t v2 = "has_bitmap";
      uint64_t v3 = 10;
LABEL_3:
      double result = sub_1000039A0(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000ED284(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)(*(void *)(a1 + 152) + 8 * (a2 / *(void *)(a1 + 80))) = a3 / *(unsigned int *)(a1 + 20);
  atomic_store(1u, (unsigned int *)(a1 + 3592));
}

void *sub_1000ED2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v5[0] = off_1001B8A80;
  v5[1] = a2;
  void v5[3] = v5;
  sub_1000ED36C(v3, (uint64_t)v5);
  return sub_100102494(v5);
}

void sub_1000ED358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100102494((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000ED36C(void *a1, uint64_t a2)
{
  if (a1[11])
  {
    char v4 = 0;
    unint64_t v5 = (uint64_t **)(a1 + 9);
    uint64_t v6 = (uint64_t **)(a1 + 10);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = *v6;
      size_t v9 = v6;
      if (*v6)
      {
        do
        {
          unint64_t v10 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v10 = (uint64_t **)v9[2];
          BOOL v11 = *v10 == (uint64_t *)v9;
          size_t v9 = v10;
        }
        while (v11);
      }
      if ((uint64_t *)((char *)v10[4] + *a1) != (uint64_t *)a1[12]) {
        break;
      }
      uint64_t v12 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          uint64_t v13 = v7;
          uint64_t v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v12[2];
          BOOL v11 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (v11);
      }
      sub_10000CF8C(v5, v13);
      operator delete(v13);
      uint64_t v14 = a1[11];
      a1[12] -= *a1;
      char v4 = 1;
    }
    while (v14);
    if ((v4 & 1) != 0 && *(void *)(a2 + 24))
    {
      if (sub_1000F1EFC(a2, a1[12]))
      {
        *(void *)&long long v15 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((void *)&v15 + 1) = 41;
        int v16 = 16;
        sub_1000FE2C8(v17, &v15);
        sub_1000039A0(v18, (uint64_t)"trim largest: size change callback failed with ", 47);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_1000FE4C0((uint64_t)v17);
        std::ios::~ios();
      }
    }
  }
}

void sub_1000ED4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000FE3EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ED504(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) > 0x1FF) {
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  void *exception = &off_1001BB640;
  exception[1] = "asif_header";
  exception[2] = 512;
  exception[3] = v4;
}

void sub_1000ED784(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1000ED7C0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  sub_100019EB0((uint64_t)"header_signature", v4, v14, 1);
  *(_DWORD *)a1 = 2003069043;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  sub_100100638(v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14[0];
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = bswap64(*(void *)(a2 + 48));
  *(void *)(a1 + 56) = bswap64(*(void *)(a2 + 56));
  *(_DWORD *)(a1 + 64) = bswap32(*(_DWORD *)(a2 + 64));
  *(_WORD *)(a1 + 68) = bswap32(*(unsigned __int16 *)(a2 + 68)) >> 16;
  double result = sub_100109D74(v14, *(unsigned __int16 *)(a2 + 70));
  *(_WORD *)(a1 + 70) = v14[0];
  *(void *)(a1 + 72) = bswap64(*(void *)(a2 + 72));
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v14);
    sub_1000039A0(v14, (uint64_t)"Unsupported ASIF version ", 25);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }
  if ((*(_DWORD *)(a1 + 8) - 1048577) <= 0xFFF0004E)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Invalid ASIF header size";
LABEL_15:
    unsigned int v12 = 152;
    goto LABEL_19;
  }
  unint64_t v6 = *(unsigned __int16 *)(a1 + 68);
  if (!*(_WORD *)(a1 + 68))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 64);
  if (v7 < v6 || v7 % v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    unsigned int v12 = 22;
LABEL_19:
    uint64_t v13 = (void *)sub_100002B24((uint64_t)v9, (uint64_t)v10, v12);
  }
  if ((v6 & 0x1FF) != 0)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Max sector count is too large";
    goto LABEL_18;
  }
  if (v8 < *(void *)(a1 + 48))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Sector count is too large";
    goto LABEL_18;
  }
  return result;
}

void sub_1000EDA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000EDA6C(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  a1[3] = *(_OWORD *)(a2 + 48);
  a1[4] = v4;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_1000EDA98(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = bswap64(*(void *)(a1 + 48));
  *(void *)(a2 + 56) = bswap64(*(void *)(a1 + 56));
  *(_DWORD *)(a2 + 64) = bswap32(*(_DWORD *)(a1 + 64));
  *(_WORD *)(a2 + 68) = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
  *(_WORD *)(a2 + 70) = *(_WORD *)(a1 + 70);
  *(void *)(a2 + 72) = bswap64(*(void *)(a1 + 72));
  return a2 + 80;
}

uint64_t sub_1000EDB34(uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  *(_DWORD *)a1 = 2003069043;
  int v18 = 2003069043;
  sub_100019EB0((uint64_t)"header_signature", 2003069043, &v18, 1);
  *(void *)(a1 + 4) = 0x20000000001;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  sub_100109D74((_WORD *)(a1 + 70), 0);
  *(void *)(a1 + 72) = 0;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (unint64_t v14 = a4 * a7 + 2 * a6, __CFADD__(a4 * a7, 2 * a6)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v17 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"ASIF header calculation overflow", 0x16u);
  }
  if (v14 <= a5 * a7) {
    unint64_t v14 = a5 * a7;
  }
  *(void *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + 32) = *a3;
  return a1;
}

void sub_1000EDC6C()
{
}

void sub_1000EDD30()
{
}

uint64_t sub_1000EDD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1635018093;
  int v7 = 1635018093;
  sub_100019EB0((uint64_t)"header_signature", 1635018093, &v7, 1);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = 1;
  sub_100019EB0((uint64_t)"version_t", 1, &v8, 1);
  *(_DWORD *)(a1 + 8) = 512;
  int v9 = 512;
  sub_100019EB0((uint64_t)"header_size_t", 512, &v9, 1);
  *(void *)(a1 + 12) = a2;
  *(void *)(a1 + 20) = a3;
  return a1;
}

void *sub_1000EDE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v17 = std::bad_alloc::bad_alloc(exception);
  }
  v29[0] = (uint64_t)off_1001B9160;
  v29[3] = (uint64_t)v29;
  unint64_t v31 = v8;
  sub_10004A2B0((uint64_t)v32, (uint64_t)v29);
  sub_10004A330(v29);
  int v9 = v31;
  *unint64_t v31 = *(_DWORD *)a1;
  v9[1] = bswap32(*(_DWORD *)(a1 + 4));
  void v9[2] = bswap32(*(_DWORD *)(a1 + 8));
  *(void *)(v9 + 3) = bswap64(*(void *)(a1 + 12));
  *(void *)(v9 + 5) = bswap64(*(void *)(a1 + 20));
  unint64_t v10 = v31;
  int64_t v11 = (char *)v31 - (char *)(v9 + 7) + 512;
  if (v11 >= 1) {
    bzero(v9 + 7, v11);
  }
  uint64_t v12 = *((void *)sub_10014B860() + 1);
  *(void *)&long long v23 = v10;
  *((void *)&v23 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = 512;
  uint64_t v25 = a4;
  uint64_t v26 = 512;
  char v27 = 0;
  sub_10006D7FC(v29, &v23);
  if (*((void *)&v23 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v23 + 1));
  }
  sub_1000414AC((uint64_t)v30, (uint64_t)&v23);
  sub_1000411FC((uint64_t)v30, (uint64_t)&v20);
  uint64_t v13 = sub_1000EB2D8(a3, a2, (uint64_t *)&v23, (uint64_t)&v20, 0);
  if (v22) {
    sub_100004944(v22);
  }
  if (v21) {
    sub_100004944(v21);
  }
  if (v28) {
    sub_100004944(v28);
  }
  if (*((void *)&v23 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v23 + 1));
  }
  if (v13 < 0)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      int v18 = __cxa_allocate_exception(0x40uLL);
      *int v18 = &off_1001C3DE8;
      uint64_t v19 = std::generic_category();
      v18[1] = v14;
      void v18[2] = v19;
      *((unsigned char *)v18 + 24) = 0;
      *((unsigned char *)v18 + 48) = 0;
      v18[7] = "Failed to write metadata header";
    }
  }
  sub_1000049B8(v29);
  sub_10004A3B4((uint64_t *)&v31, 0);
  return sub_10004A330(v32);
}

void sub_1000EE094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_1000049B8(&a49);
  sub_10004A3B4((uint64_t *)(v50 - 96), 0);
  sub_10004A330(v49);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  int v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  v34[0] = (uint64_t)off_1001B9160;
  v34[3] = (uint64_t)v34;
  uint64_t v36 = v8;
  sub_10004A2B0((uint64_t)v37, (uint64_t)v34);
  sub_10004A330(v34);
  uint64_t v9 = (uint64_t)v36;
  uint64_t v10 = *((void *)sub_10014B860() + 1);
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = 512;
  uint64_t v29 = a4;
  uint64_t v30 = 512;
  char v31 = 0;
  sub_10006D7FC(v34, &v27);
  if (*((void *)&v27 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v27 + 1));
  }
  sub_1000411FC((uint64_t)v35, (uint64_t)&v27);
  unint64_t v11 = *(void *)(a3 + 120);
  unint64_t v12 = v33;
  if (v32) {
    sub_100004944(v32);
  }
  if (*((void *)&v27 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v12 > v11)
  {
    uint64_t v20 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v20 = &off_1001C3DE8;
    uint64_t v21 = std::generic_category();
    v20[1] = 152;
    v20[2] = v21;
    *((unsigned char *)v20 + 24) = 0;
    *((unsigned char *)v20 + 48) = 0;
    v20[7] = "Metadata offset is invalid";
  }
  sub_1000414AC((uint64_t)v35, (uint64_t)&v27);
  sub_1000411FC((uint64_t)v35, (uint64_t)&v24);
  uint64_t v13 = sub_1000EB2D8(a3, a2, (uint64_t *)&v27, (uint64_t)&v24, 1);
  if (v26) {
    sub_100004944(v26);
  }
  if (v25) {
    sub_100004944(v25);
  }
  if (v32) {
    sub_100004944(v32);
  }
  if (*((void *)&v27 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v13 < 0 && v13)
  {
    uint64_t v22 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v22 = &off_1001C3DE8;
    long long v23 = std::generic_category();
    v22[1] = v13;
    v22[2] = v23;
    *((unsigned char *)v22 + 24) = 0;
    *((unsigned char *)v22 + 48) = 0;
    v22[7] = "ASIF meta header failed to read";
  }
  sub_1000EE4F4(a1, (uint64_t)v36, a3);
  for (uint64_t i = 28; i != 512; ++i)
  {
    if (v36[i])
    {
      int v16 = __cxa_allocate_exception(0x40uLL);
      void *v16 = &off_1001C3DE8;
      unint64_t v17 = std::generic_category();
      v16[1] = 152;
      void v16[2] = v17;
      *((unsigned char *)v16 + 24) = 0;
      *((unsigned char *)v16 + 48) = 0;
      v16[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }
  sub_1000049B8(v34);
  sub_10004A3B4((uint64_t *)&v36, 0);
  sub_10004A330(v37);
  return a1;
}

void sub_1000EE480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_10000371C((uint64_t)&a9);
  sub_10000371C((uint64_t)&a29);
  sub_1000049B8(&a49);
  sub_10004A3B4((uint64_t *)(v50 - 112), 0);
  sub_10004A330(v49);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EE4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  int v14 = 1635018093;
  sub_100019EB0((uint64_t)"header_signature", v6, &v14, 1);
  *(_DWORD *)a1 = 1635018093;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  int v15 = 1;
  sub_100019EB0((uint64_t)"version_t", v7, &v15, 1);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  int v16 = 512;
  uint64_t result = sub_100019EB0((uint64_t)"header_size_t", v8, &v16, 1);
  *(_DWORD *)(a1 + 8) = 512;
  unint64_t v10 = bswap64(*(void *)(a2 + 12));
  *(void *)(a1 + 12) = v10;
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  if (v10 > (unint64_t)*(unsigned int *)(a3 + 20) - 512)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }
  if (v10 % *(unsigned __int16 *)(a3 + 18))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header data is unaligned";
LABEL_6:
    uint64_t v13 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)v12, 0x98u);
  }
  return result;
}

uint64_t sub_1000EE62C(void *a1, uint64_t a2)
{
  if (!*(void *)(*a1 + 72)) {
    return 0;
  }
  sub_1000EE6B8(a1, a2, (uint64_t *)&v4);
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  if (v4)
  {
    unint64_t v5 = v4;
    operator delete(v4);
  }
  return v2;
}

uint64_t sub_1000EE6B8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = a1[1];
  unint64_t v15 = *(void *)(*a1 + 72) * *(unsigned int *)(v6 + 20);
  uint64_t result = sub_1001001F8(a3, a2, v6, (uint64_t *)&v15);
LABEL_2:
  for (unint64_t i = result; ; a3[1] = i)
  {
    a3[1] = i;
    if (!*(void *)(i - 8)) {
      break;
    }
    unint64_t v15 = 0;
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    unint64_t v11 = *(void *)(i - 8) * *(unsigned int *)(v9 + 20);
    unint64_t v15 = v11;
    uint64_t v12 = *(unsigned __int16 *)(v9 + 18);
    if (v11 < *(void *)(v10 + 48) * v12 || *(void *)(v10 + 56) * v12 <= v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      int v14 = std::generic_category();
      exception[1] = 152;
      exception[2] = v14;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }
    if (i >= a3[2])
    {
      uint64_t result = sub_1001003BC(a3, a2, v9, (uint64_t *)&v15);
      goto LABEL_2;
    }
    uint64_t result = sub_1000EE0FC(i, a2, v9, v11);
    i += 28;
  }
  return result;
}

void sub_1000EE808(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EE838(void *a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  if (*(void *)(*a1 + 72))
  {
    sub_1000EEE84(a1, a2, &v24);
    uint64_t v6 = (uint64_t *)v24;
    int v7 = (uint64_t *)v25;
    if (v24 == v25) {
      goto LABEL_18;
    }
    do
    {
      sub_10001A470((uint64_t *)&keys, v6);
      uint64_t v8 = a1[1];
      sub_1000414AC((uint64_t)v32, (uint64_t)&values);
      sub_1000411FC((uint64_t)v32, (uint64_t)&v21);
      uint64_t v9 = sub_1000EB2D8(v8, a2, (uint64_t *)&values, (uint64_t)&v21, 1);
      if (v23) {
        sub_100004944(v23);
      }
      if (v22) {
        sub_100004944(v22);
      }
      if (v29) {
        sub_100004944(v29);
      }
      if (v27) {
        sub_100004944(v27);
      }
      if (v9 < 0 && v9)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &off_1001C3DE8;
        int v18 = std::generic_category();
        exception[1] = v9;
        exception[2] = v18;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "ASIF: failed to deserialize metadata";
      }
      sub_1000049B8(&keys);
      v6 += 6;
    }
    while (v6 != v7);
    uint64_t v10 = v24;
    if (v24 == v25)
    {
LABEL_18:
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      do
      {
        v11 += LODWORD(v10->__shared_weak_owners_);
        v10 += 2;
      }
      while (v10 != v25);
    }
    CFIndex v12 = v11;
    uint64_t v13 = malloc_type_valloc(v11, 0xF8ED6DDuLL);
    if (!v13)
    {
      uint64_t v19 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v20 = std::bad_alloc::bad_alloc(v19);
    }
    values = off_1001B9160;
    p_values = &values;
    keys = v13;
    sub_10004A2B0((uint64_t)v31, (uint64_t)&values);
    sub_10004A330(&values);
    int v14 = v24;
    unint64_t v15 = v25;
    if (v24 != v25)
    {
      int v16 = 0;
      do
      {
        memcpy((char *)keys + v16, v14->__vftable, v14->__shared_weak_owners_);
        v16 += LODWORD(v14->__shared_weak_owners_);
        v14 += 2;
      }
      while (v14 != v15);
    }
    sub_100122F74((UInt8 *)keys, v12, a3);
    sub_10004A3B4((uint64_t *)&keys, 0);
    sub_10004A330(v31);
    keys = &v24;
    sub_1000FEE7C((void ***)&keys);
  }
  else
  {
    keys = @"internal metadata";
    v31[0] = @"user metadata";
    sub_100122DAC((CFMutableDictionaryRef *)&v21);
    sub_100122DAC((CFMutableDictionaryRef *)&v24);
    values = v21;
    long long v27 = v24;
    sub_100122D0C((const void **)&keys, (const void **)&values, 2, a3);
    sub_1000055AC((const void **)&v24);
    sub_1000055AC((const void **)&v21);
  }
}

void sub_1000EEB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
}

const void **sub_1000EEDB4@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  keys[0] = @"internal metadata";
  keys[1] = @"user metadata";
  sub_100122DAC((CFMutableDictionaryRef *)&v4);
  sub_100122DAC((CFMutableDictionaryRef *)&v3);
  values[0] = v4;
  values[1] = v3;
  sub_100122D0C((const void **)keys, (const void **)values, 2, a1);
  sub_1000055AC((const void **)&v3);
  return sub_1000055AC((const void **)&v4);
}

void sub_1000EEE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  sub_1000055AC((const void **)va);
  sub_1000055AC((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000EEE84(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_1000EE6B8(a1, a2, &v5);
  if (v6 != (void *)v5)
  {
    if (malloc_type_valloc(*(void *)(v5 + 12), 0xF1341ED1uLL)) {
      operator new();
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v4 = std::bad_alloc::bad_alloc(exception);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1000EF044(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_1000EF07C()
{
}

void *sub_1000EF0B4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100109E90((uint64_t)a1, a2);
  *a1 = off_1001BB678;
  a1[45] = &off_1001BB778;
  a1[46] = &off_1001BB7A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BB678;
  a1[45] = off_1001BB700;
  a1[46] = off_1001BB728;
  return a1;
}

void sub_1000EF1B4(_Unwind_Exception *a1)
{
  sub_1000FF1AC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF1D8(uint64_t a1)
{
  return a1;
}

void *sub_1000EF21C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100109E00((uint64_t)a1, a2);
  *a1 = off_1001BB898;
  a1[45] = &off_1001BB998;
  a1[46] = &off_1001BB9C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BB898;
  a1[45] = off_1001BB920;
  a1[46] = off_1001BB948;
  return a1;
}

void sub_1000EF31C(_Unwind_Exception *a1)
{
  sub_1000FF920(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF340(uint64_t a1)
{
  return a1;
}

const void **sub_1000EF384(const void **result, uint64_t a2, CFPropertyListRef propertyList)
{
  if (propertyList)
  {
    long long v4 = (uint64_t *)result;
    uint64_t v5 = *result;
    uint64_t v6 = (unsigned int *)result[1];
    unint64_t v7 = v6[5];
    unint64_t v8 = *((void *)*result + 9) * v7;
    uint64_t v9 = *((unsigned __int16 *)v6 + 9);
    if (!v8) {
      unint64_t v8 = (v5[7] * v9 - v7) / v7 * v7;
    }
    if (v8 < v5[6] * v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v41 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Not enough space for metadata", 0x1Cu);
    }
    sub_100122DF4(propertyList, (const __CFData **)v60);
    unint64_t v10 = (unint64_t)v60[1];
    CFTypeRef cf = v60[0];
    v60[0] = 0;
    sub_10002D56C(v60);
    uint64_t v11 = *v4;
    uint64_t v12 = v4[1];
    uint64_t v13 = *(unsigned int *)(v12 + 20);
    size_t v14 = v13 - 512;
    unint64_t v48 = v10;
    unint64_t v15 = v10 + v13 - 512 - 1;
    unint64_t v16 = v15 / (v13 - 512);
    if (v16 * v13 > v8 + v13 - *(void *)(*v4 + 48) * *(unsigned __int16 *)(v12 + 18))
    {
      uint64_t v42 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v42 = &off_1001C3DE8;
      uint64_t v43 = std::generic_category();
      v42[1] = 28;
      v42[2] = v43;
      *((unsigned char *)v42 + 24) = 0;
      *((unsigned char *)v42 + 48) = 0;
      v42[7] = "Not enough space for metadata";
    }
    if (v14 <= v15)
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = v16 - 1;
      if (v16 <= 1) {
        unint64_t v16 = 1;
      }
      unint64_t v45 = v16;
      unint64_t v46 = v19;
      size_t v44 = v10 % v14;
      size_t v47 = v13 - 512;
      do
      {
        if (v19 == v18)
        {
          uint64_t v20 = 0;
          uint64_t v21 = v4[1];
          uint64_t v22 = v8 - v19 * *(unsigned int *)(v21 + 20);
          size_t v14 = v44;
        }
        else
        {
          uint64_t v21 = v4[1];
          unint64_t v23 = *(unsigned int *)(v21 + 20);
          uint64_t v22 = v8 - v18 * v23;
          uint64_t v20 = (v22 - v23) / v23;
        }
        size_t v24 = v14 - 1;
        sub_1000EDD54((uint64_t)v58, (v14 - 1 + *(unsigned __int16 *)(v21 + 18))/ *(unsigned __int16 *)(v21 + 18)* *(unsigned __int16 *)(v21 + 18), v20);
        sub_1000EDE0C((uint64_t)v58, a2, v4[1], v22);
        uint64_t v25 = a2;
        if (v48 - v14 >= v17) {
          unint64_t v26 = v17;
        }
        else {
          unint64_t v26 = v48 - v14;
        }
        unint64_t v27 = *(unsigned __int16 *)(v4[1] + 18);
        uint64_t v28 = (char *)malloc_type_valloc((v24 + v27) / v27 * v27, 0xF8ED6DDuLL);
        if (!v28)
        {
          uint64_t v36 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          uint64_t v37 = std::bad_alloc::bad_alloc(v36);
        }
        v60[0] = off_1001B9160;
        v60[3] = v60;
        long long v62 = v28;
        sub_10004A2B0((uint64_t)v63, (uint64_t)v60);
        sub_10004A330(v60);
        uint64_t v29 = v62;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v29, &BytePtr[v26], v14);
        unint64_t v31 = *(unsigned __int16 *)(v4[1] + 18);
        if (v14 % v31)
        {
          bzero(&v62[v14], v31 - v14 % v31);
          unint64_t v31 = *(unsigned __int16 *)(v4[1] + 18);
        }
        uint64_t v32 = (uint64_t)v62;
        uint64_t v33 = *((void *)sub_10014B860() + 1);
        *(void *)&long long v52 = v32;
        *((void *)&v52 + 1) = v33;
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v53 = (v24 + v31) / v31 * v31;
        uint64_t v54 = v22 + 512;
        size_t v55 = v53;
        char v56 = 0;
        sub_10006D7FC((uint64_t *)v60, &v52);
        a2 = v25;
        if (*((void *)&v52 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v52 + 1));
        }
        uint64_t v34 = v4[1];
        sub_1000414AC((uint64_t)v61, (uint64_t)&v52);
        sub_1000411FC((uint64_t)v61, (uint64_t)v49);
        uint64_t v35 = sub_1000EB2D8(v34, v25, (uint64_t *)&v52, (uint64_t)v49, 0);
        if (v51) {
          sub_100004944(v51);
        }
        if (v50) {
          sub_100004944(v50);
        }
        if (v57) {
          sub_100004944(v57);
        }
        if (*((void *)&v52 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v52 + 1));
        }
        if (v35 < 0 && v35)
        {
          uint64_t v38 = __cxa_allocate_exception(0x40uLL);
          *uint64_t v38 = &off_1001C3DE8;
          uint64_t v39 = std::generic_category();
          v38[1] = v35;
          v38[2] = v39;
          *((unsigned char *)v38 + 24) = 0;
          *((unsigned char *)v38 + 48) = 0;
          v38[7] = "Failed to write metadata";
        }
        sub_1000049B8(v60);
        sub_10004A3B4((uint64_t *)&v62, 0);
        sub_10004A330(v63);
        ++v18;
        unint64_t v19 = v46;
        size_t v14 = v47;
        v17 += v47;
      }
      while (v45 != v18);
      uint64_t v11 = *v4;
    }
    if (!*(void *)(v11 + 72))
    {
      *(void *)(v11 + 72) = v8 / *(unsigned int *)(v4[1] + 20);
      sub_1000EDC6C();
    }
    return sub_10002D56C(&cf);
  }
  return result;
}

void sub_1000EF90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
}

void sub_1000EF9AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  size_t v14 = (uint64_t *)&v15;
  if (*(void *)sub_1000DEB20(a1 + 32, *(void *)(a1 + 176)))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    uint64_t v5 = *(void *)(a1 + 352);
    uint64_t v6 = *(void *)(a1 + 360);
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v5 + 8 * v8) * *(unsigned int *)(a1 + 96);
        unint64_t v13 = v9;
        if (v9)
        {
          sub_1000EFB60((atomic_ullong *)(a1 + 200), v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          sub_1000F2D28(&v14, &v13, (uint64_t *)&v13);
        }
        ++v8;
        v7 += 8;
      }
      while (v5 + v7 != v6);
    }
    unint64_t v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    uint64_t v11 = a2 + 1;
    uint64_t v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      void v10[2] = v11;
      size_t v14 = (uint64_t *)&v15;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    *a2 = v11;
    if (v4) {
LABEL_12:
    }
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
LABEL_13:
  sub_10000953C((uint64_t)&v14, v15);
}

void sub_1000EFB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

atomic_ullong *sub_1000EFB60(atomic_ullong *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000EA510(a1, a2, a3, a4, 0, 1, &v11);
  if (v11 && !*(unsigned char *)(v11 + 520))
  {
    if (*(unsigned char *)(v11 + 400)) {
      uint64_t v9 = v11 + 40;
    }
    else {
      uint64_t v9 = 0;
    }
    sub_100109F20(v9, a2, a5, a6);
  }
  return sub_1000DEBE8(&v11);
}

void sub_1000EFBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEBE8((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *sub_1000EFC0C(void *result, void *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (a2[2])
  {
    uint64_t v8 = a2 + 1;
    uint64_t v9 = (void *)a2[1];
    if (v9)
    {
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v10 = (void *)v8[2];
        BOOL v11 = *v10 == (void)v8;
        uint64_t v8 = v10;
      }
      while (v11);
    }
    unint64_t v12 = v10[4] + a4;
    uint64_t result = (void *)(*(uint64_t (**)(void))(result[25] + 16))();
    if (result[12] <= v12) {
      result[12] = v12;
    }
  }
  unint64_t v15 = (void *)*a2;
  unint64_t v13 = a2 + 1;
  size_t v14 = v15;
  if (v15 != v13)
  {
    do
    {
      uint64_t v16 = v14[4];
      atomic_fetch_add(v7 + 26, 1uLL);
      long long v21 = a3;
      uint64_t v22 = a4;
      if ((v16 - a3) % a4) {
        unint64_t v17 = (v16 - a3) / a4 + 1;
      }
      else {
        unint64_t v17 = (v16 - a3) / a4;
      }
      v20[0] = a3;
      v20[1] = v17;
      v20[2] = a4;
      uint64_t result = sub_1000EFD64((uint64_t)(v7 + 25), &v21, (uint64_t)v20);
      uint64_t v18 = (void *)v14[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v14[2];
          BOOL v11 = *v19 == (void)v14;
          size_t v14 = v19;
        }
        while (!v11);
      }
      a3 = v16 + a4;
      size_t v14 = v19;
    }
    while (v19 != v13);
  }
  return result;
}

void *sub_1000EFD64(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v7 = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v11[3] = 0;
  sub_10010A0A0(v5, (uint64_t *)&v9, &v7, (uint64_t)v11);
  return sub_100102494(v11);
}

void sub_1000EFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100102494((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000EFE30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001B8660;
  *(void *)(a1 + 16) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 2003069043;
  *(void *)(a1 + 36) = *(void *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 16);
  long long v10 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 94) = *(void *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 102) = 0;
  *(void *)(a1 + 104) = *(void *)(a3 + 72);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a4;
  uint64_t v12 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(void *)(a1 + 184) = v12;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v14 = *(unsigned __int16 *)(a3 + 68);
  unsigned int v15 = *(_DWORD *)(a3 + 64);
  v16[0] = off_1001BBB10;
  v16[1] = a1;
  v16[3] = v16;
  sub_1000EC7D0(a1 + 200, a1, v13 * v14, v15, v14, a5, 2);
}

void sub_1000F0128(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  sub_1000E34B0(v3);
  std::mutex::~mutex(v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    sub_100004944(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1000F01B4(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001B8660;
  *(void *)(a1 + 16) = *a6;
  uint64_t v15 = a6[1];
  *(void *)(a1 + 24) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100100638(&v17, *((unsigned __int8 *)a7 + 1));
  sub_1000EDB34(a1 + 32, &v17, a8, a4, a5, a3, a2);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 184) = v16;
  v18[0] = off_1001BBB10;
  v18[1] = a1;
  v18[3] = v18;
  sub_1000EC7D0(a1 + 200, a1, a2 * a5, a3, a2, 0x200u, 2);
}

void sub_1000F04D4(_Unwind_Exception *a1)
{
  sub_1000E34B0(v3);
  std::mutex::~mutex(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5) {
    sub_100004944(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0520(const void **a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000EE838(a1 + 507, v6, &theDict);
  long long v7 = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    unint64_t v19 = std::generic_category();
    exception[1] = 152;
    exception[2] = v19;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(v7) != TypeID)
  {
    uint64_t v20 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    long long v21 = sub_100009370(v20);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  long long v11 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    uint64_t v22 = 4294967284;
    goto LABEL_14;
  }
  uint64_t v12 = operator new(0x28uLL);
  __p = v12;
  long long v30 = xmmword_100171940;
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  *(void *)((char *)v12 + 29) = 0;
  sub_100085414(a3, v12);
  BOOL v13 = sub_10012334C(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  if (!v13)
  {
    long long v11 = "ASIF: can't set requested uuid";
    uint64_t v22 = 150;
LABEL_14:
    unint64_t v23 = __cxa_allocate_exception(0x40uLL);
    void *v23 = &off_1001C3DE8;
    size_t v24 = std::generic_category();
    v23[1] = v22;
    v23[2] = v24;
    *((unsigned char *)v23 + 24) = 0;
    *((unsigned char *)v23 + 48) = 0;
    v23[7] = v11;
  }
  CFIndex v14 = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, v14 + 1, theDict);
  __p = v15;
  if (!v15)
  {
    uint64_t v25 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v25 = &off_1001C3DE8;
    unint64_t v26 = std::generic_category();
    v25[1] = 4294967284;
    void v25[2] = v26;
    *((unsigned char *)v25 + 24) = 0;
    *((unsigned char *)v25 + 48) = 0;
    v25[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(v15, @"internal metadata", value);
  sub_1000EF384(a1 + 507, v6, __p);
  unsigned int v16 = (*((uint64_t (**)(const void **, uint64_t, void))*a1 + 22))(a1, v6, 0);
  if (v16)
  {
    unint64_t v27 = __cxa_allocate_exception(0x40uLL);
    void *v27 = &off_1001C3DE8;
    uint64_t v28 = std::generic_category();
    v27[1] = v16;
    v27[2] = v28;
    *((unsigned char *)v27 + 24) = 0;
    *((unsigned char *)v27 + 48) = 0;
    v27[7] = "ASIF: failed to write metadata";
  }
  sub_1000055AC((const void **)&__p);
  sub_1000055AC((const void **)&value);
  sub_10000D758((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
}

void sub_1000F0920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  __cxa_free_exception(v19);
  sub_10000D758(&a18);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1000F09CC(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, void *a6, uint64_t *a7, _OWORD *a8)
{
}

uint64_t sub_1000F09D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = *(void *)sub_1000DEB20(a2, v4);
    if (v10)
    {
      int64_t v11 = sub_1000ED0C4(a1, v10);
      if (!v5 || v6 < v11)
      {
        int v5 = 1;
        uint64_t v7 = v4;
        int64_t v6 = v11;
      }
    }
    char v8 = 0;
    uint64_t v4 = 1;
  }
  while ((v9 & 1) != 0);
  return v7;
}

uint64_t sub_1000F0A88(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  uint64_t v3 = (std::once_flag::_State_type *)(a1 + 4072);
  v5[0] = a1;
  v5[1] = &v6;
  v5[2] = a2;
  if (atomic_load_explicit((atomic_ullong *volatile)v3, memory_order_acquire) != -1)
  {
    char v8 = v5;
    uint64_t v7 = &v8;
    std::__call_once(v3, &v7, (void (__cdecl *)(void *))sub_10010A248);
  }
  if (v6 < 0) {
    return v6;
  }
  else {
    return -v6;
  }
}

uint64_t sub_1000F0AFC(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  uint64_t v7 = *(uint64_t (****)())sub_1000DEB20(a1 + 32, *(void *)(a1 + 176));
  char v8 = v7;
  if (!v7)
  {
    unint64_t v9 = *(unsigned __int16 *)(a1 + 100);
    uint64_t v10 = *(void *)(a1 + 176);
    uint64_t v11 = *(void *)(a1 + 320);
    unint64_t v12 = *(void *)(a1 + 280);
    BOOL v13 = (void *)sub_1000DEB20(a1 + 32, v10);
    char v8 = (uint64_t (***)())(v9
                                    + 511
                                    - ((int)v9 + 511) % v9
                                    + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    void *v13 = v8;
  }
  uint64_t v14 = sub_1000EC590(a1 + 200, a2, v8);
  uint64_t v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 == 1)
    {
      uint64_t v16 = *(void *)(a1 + 176);
      if (v16 == 1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16 + 1;
      }
      *(void *)(a1 + 176) = v17;
    }
    if (v7)
    {
      uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 2 * (a3 == 2));
    }
    else
    {
      uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), 0);
      if (!v15) {
        sub_1000EDC6C();
      }
    }
  }
  std::mutex::unlock(v6);
  return v15;
}

void sub_1000F0C84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000F0CC8()
{
}

uint64_t sub_1000F0D68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
  sub_1000EE838(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"user metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      uint64_t v10 = sub_100009370(exception);
    }
    CFTypeID v7 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v7)
    {
      uint64_t v11 = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      unint64_t v12 = sub_100009370(v11);
    }
    CFRetain(Value);
    *a2 = Value;
  }
  else
  {
    sub_100122DAC((CFMutableDictionaryRef *)&v13);
    *a2 = v13;
    BOOL v13 = 0;
    sub_1000055AC(&v13);
  }
  sub_10000D758((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
}

void sub_1000F0F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  sub_10000D758(&a10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0F6C(const void **a1, const void *a2)
{
  uint64_t v4 = (*((uint64_t (**)(const void **))*a1 + 17))(a1);
  sub_1000EE838(a1 + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v10 = std::generic_category();
    exception[1] = 4294967284;
    exception[2] = v10;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, theDict);
  CFPropertyListRef propertyList = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v11 = &off_1001C3DE8;
    unint64_t v12 = std::generic_category();
    v11[1] = 4294967284;
    void v11[2] = v12;
    *((unsigned char *)v11 + 24) = 0;
    *((unsigned char *)v11 + 48) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(MutableCopy, @"user metadata", a2);
  sub_1000EF384(a1 + 507, v4, propertyList);
  unsigned int v7 = (*((uint64_t (**)(const void **, uint64_t, uint64_t))*a1 + 22))(a1, v4, 2);
  if (v7)
  {
    BOOL v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &off_1001C3DE8;
    uint64_t v14 = std::generic_category();
    v13[1] = v7;
    void v13[2] = v14;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }
  sub_1000055AC(&propertyList);
  sub_10000D758((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
}

void sub_1000F11E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D758((const void **)va);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1240(void *a1, const void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
  sub_1000EE838(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v11 = std::generic_category();
    exception[1] = 152;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    unint64_t v12 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    BOOL v13 = sub_100009370(v12);
  }
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  CFTypeID v8 = CFStringGetTypeID();
  if (v7)
  {
    if (CFGetTypeID(v7) == v8) {
      sub_10012299C(v7);
    }
    uint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    uint64_t v15 = sub_100009370(v14);
  }
  sub_10000D758((const void **)&theDict);
  (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  return 0;
}

void sub_1000F1490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  __cxa_free_exception(v18);
  sub_10000D758(&a17);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1514(const void **a1, uint64_t a2)
{
  return sub_1000F0520(a1, @"source uuid", a2);
}

uint64_t sub_1000F1524(void *a1)
{
  return sub_1000F1240(a1, @"stable uuid");
}

uint64_t sub_1000F1530(void *a1)
{
  return sub_1000F1240(a1, @"source uuid");
}

uint64_t sub_1000F153C(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void sub_1000F1548(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 64) = *a2;
  sub_1000EDC6C();
}

uint64_t sub_1000F1560(const void **a1)
{
  v4[0] = sub_10014B80C();
  v4[1] = v2;
  return sub_1000F0520(a1, @"stable uuid", (uint64_t)v4);
}

uint64_t sub_1000F15D8(uint64_t a1)
{
  *(void *)a1 = off_1001B8660;
  sub_1000E34B0(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_1000F1630(uint64_t a1)
{
  *(void *)a1 = off_1001B8660;
  sub_1000E34B0(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100004944(v2);
  }
  operator delete();
}

uint64_t sub_1000F16A8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 218);
}

uint64_t sub_1000F16B0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1000F16B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_1000F16E0()
{
}

void sub_1000F1754()
{
}

uint64_t sub_1000F1778(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BB7D0((uint64_t)a1, a2);
  if (!v4)
  {
    unint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    unint64_t v6 = (a2 + v5 - 1) / v5;
    if (v6 <= a1[11])
    {
      uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
      uint64_t v8 = a1[11];
      if (v8 - v6 >= sub_1000EE62C(a1 + 507, v7))
      {
        a1[10] = v6;
        sub_1000EDC6C();
      }
      uint64_t v4 = 4294967269;
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    else
    {
      return 4294967269;
    }
  }
  return v4;
}

void sub_1000F18B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1001514C0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F18D0()
{
  return 1;
}

uint64_t sub_1000F18D8()
{
  return 1;
}

void sub_1000F18E0()
{
}

void sub_1000F1968()
{
}

uint64_t sub_1000F198C(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -34;
  }
  else {
    return sub_1000EB2D8((uint64_t)(a1 + 25), a2, a3, a4, 1);
  }
}

uint64_t sub_1000F1A64(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -34;
  }
  int v10 = sub_1000F0A88((uint64_t)a1, a2 + 16);
  if (!v10) {
    return sub_1000EB2D8((uint64_t)(a1 + 25), a2, a3, a4, 0);
  }
  if (v10 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = -v10;
  }
  return -v11;
}

uint64_t sub_1000F1B5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t v10 = *v8 + *(v8 - 1);
      unint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v10;
      uint64_t v12 = a1[10];
      if (v11 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v12) {
        return 4294967262;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = sub_1000F0A88((uint64_t)a1, a2 + 16);
    if (!result) {
      return sub_1000EC29C((uint64_t)(a1 + 25), a2, a3, a4);
    }
  }
  return result;
}

void sub_1000F1C78()
{
}

void sub_1000F1D00()
{
}

uint64_t sub_1000F1D14(uint64_t a1)
{
  return a1 + 176;
}

atomic_ullong *sub_1000F1D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return sub_1001006C8(a1 + 2080, a2, a3, a4);
}

void *sub_1000F1D24(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009C748(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000F1D80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F1D9C(uint64_t a1, uint64_t a2)
{
  unint64_t v11 = (std::mutex *)(a1 + 8);
  char v12 = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(void *)(a1 + 88))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 72);
    uint64_t v5 = v4[4];
    sub_10000CF8C((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)a1 + v5;
    sub_10001FED8((uint64_t)&v11);
    if (*(void *)(a2 + 24) && sub_1000F1EFC(a2, *(void *)a1 + v5))
    {
      *(void *)&long long v7 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
      *((void *)&v7 + 1) = 37;
      int v8 = 16;
      sub_1000F1F50(v9, &v7);
      sub_1000039A0(v10, (uint64_t)"allocated: size change callback failed with ", 44);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000F2148((uint64_t)v9);
      std::ios::~ios();
    }
  }
  if (v12) {
    std::mutex::unlock(v11);
  }
  return v5;
}

void sub_1000F1EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(unsigned char *)(v12 - 40)) {
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F1EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1000F1F50(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F20B8((uint64_t)a1, a2);
  *a1 = off_1001B87D8;
  a1[45] = &off_1001B88D8;
  a1[46] = &off_1001B8900;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B87D8;
  a1[45] = off_1001B8860;
  a1[46] = off_1001B8888;
  return a1;
}

void sub_1000F2050(_Unwind_Exception *a1)
{
  sub_1000F2148(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2074(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F20B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B8970;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000F2134(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F2148(uint64_t a1)
{
  *(void *)a1 = off_1001B8970;
  sub_1000F2550(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000F2284(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F2148(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F22EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F2324(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F238C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F2148(v1);
  return std::ios::~ios();
}

void sub_1000F23D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F2148(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F243C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F2148(v1);
  return std::ios::~ios();
}

void sub_1000F249C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F2148(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F2518(uint64_t a1)
{
  sub_1000F2148(a1);
  operator delete();
}

uint64_t sub_1000F2550(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F26D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F26D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 137;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 137;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000F28C0()
{
}

__n128 sub_1000F28D4(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = off_1001B89F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1000F2920(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001B89F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000F2950(uint64_t a1, uint64_t *a2)
{
  return sub_1000F29A8((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_1000F295C(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B8A60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000F299C()
{
  return &off_1001B8A60;
}

uint64_t sub_1000F29A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 16);
  int v5 = malloc_type_valloc(a1[1], 0xF8ED6DDuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
  }
  v13[0] = off_1001B9160;
  v13[3] = v13;
  unint64_t v11 = v5;
  sub_10004A2B0((uint64_t)v12, (uint64_t)v13);
  sub_10004A330(v13);
  bzero(v11, a1[1]);
  int v6 = sub_10004DFDC(v4, (uint64_t)v11, a1[1], a2 - a1[1]);
  if (a1[1] == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 >= 0) {
      uint64_t v7 = 4294967291;
    }
    else {
      uint64_t v7 = v6;
    }
    sub_1000B98A4(*a1);
  }
  sub_10004A3B4((uint64_t *)&v11, 0);
  sub_10004A330(v12);
  return v7;
}

void sub_1000F2AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10004A3B4(&a9, 0);
  sub_10004A330(v9);
  _Unwind_Resume(a1);
}

void sub_1000F2B14()
{
}

void *sub_1000F2B28(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001B8A80;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F2B70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B8A80;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000F2B9C(uint64_t a1, unint64_t *a2)
{
  return sub_1000F2BF0((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000F2BA4(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B8AE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000F2BE4()
{
  return &off_1001B8AE0;
}

uint64_t sub_1000F2BF0(uint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v4 + 56))(v4, v3))
  {
    sub_1000B98A4(*a1);
  }
  return 0;
}

void sub_1000F2C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  sub_1000F2D28((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  unint64_t v6 = *(void *)a1 + v7;
  if (*(void *)(a1 + 96) <= v6) {
    *(void *)(a1 + 96) = v6;
  }
  sub_1000ED36C((void *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_1000F2D14(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000F2D28(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10000CAA0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1000F2DE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F3074(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F2E30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F3074(v1);
  return std::ios::~ios();
}

void sub_1000F2E90(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F3074(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F2EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F2F30(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F2F98(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F3074(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F2FFC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F3074(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F3074(uint64_t a1)
{
  *(void *)a1 = off_1001B8CA0;
  sub_1000F31B0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F31B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F3370((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3338(uint64_t a1)
{
  sub_1000F3074(a1);
  operator delete();
}

int *sub_1000F3370(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 436;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 436;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000F3558(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F37E8(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F35A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F37E8(v1);
  return std::ios::~ios();
}

void sub_1000F3604(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F37E8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F366C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F36A4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F370C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F37E8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F3770(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F37E8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F37E8(uint64_t a1)
{
  *(void *)a1 = off_1001B8EC0;
  sub_1000F3924(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F3924(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F3AE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F3A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F3AAC(uint64_t a1)
{
  sub_1000F37E8(a1);
  operator delete();
}

int *sub_1000F3AE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 450;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 450;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *sub_1000F3CCC(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

void *sub_1000F3D48(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return result;
}

uint64_t sub_1000F3DAC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F403C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F3DF8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F403C(v1);
  return std::ios::~ios();
}

void sub_1000F3E58(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F403C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F3EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F3EF8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F3F60(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F403C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F3FC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F403C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F403C(uint64_t a1)
{
  *(void *)a1 = off_1001B90E0;
  sub_1000F4178(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F4178(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F4338((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F42D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F4300(uint64_t a1)
{
  sub_1000F403C(a1);
  operator delete();
}

int *sub_1000F4338(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 547;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 547;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_1000F4524()
{
}

void *sub_1000F4538()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001B9160;
  return result;
}

void sub_1000F4570(uint64_t a1, void *a2)
{
  *a2 = off_1001B9160;
}

void sub_1000F4598(uint64_t a1, void **a2)
{
}

uint64_t sub_1000F45A0(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B91C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000F45E0()
{
  return &off_1001B91C0;
}

uint64_t sub_1000F45EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000B0AA8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v15 = &v10[32 * v4];
  uint64_t v16 = (uint64_t)v15;
  int v17 = &v10[32 * v9];
  unint64_t v11 = (void *)sub_100148D94((uint64_t)v15, a2);
  *unint64_t v11 = off_1001C3808;
  v11[3] = *(void *)(a2 + 24);
  v16 += 32;
  sub_1000F46F8(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000F4830((uint64_t)&v14);
  return v12;
}

void sub_1000F46E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000F4830((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F46F8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000F4770((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000F4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)sub_100148D94(a7 + v11 - 32, a3 + v11 - 32) = off_1001C3808;
      *(void *)(a7 + v11 - 8) = *(void *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1000F4814(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100151A00();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F4830(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000F489C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000F495C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F4BEC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F49A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F4BEC(v1);
  return std::ios::~ios();
}

void sub_1000F4A08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F4BEC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F4A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F4AA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F4B10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F4BEC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F4B74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F4BEC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F4BEC(uint64_t a1)
{
  *(void *)a1 = off_1001B9380;
  sub_1000F4D28(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F4D28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F4EE8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F4E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F4EB0(uint64_t a1)
{
  sub_1000F4BEC(a1);
  operator delete();
}

int *sub_1000F4EE8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 863;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 863;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F50D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5360(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F511C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5360(v1);
  return std::ios::~ios();
}

void sub_1000F517C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F5360(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F51E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F521C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F5284(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5360(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F52E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5360(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F5360(uint64_t a1)
{
  *(void *)a1 = off_1001B95A0;
  sub_1000F549C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F549C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F565C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F55F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F5624(uint64_t a1)
{
  sub_1000F5360(a1);
  operator delete();
}

int *sub_1000F565C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 888;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 888;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F5844(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5AD4(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F5890(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5AD4(v1);
  return std::ios::~ios();
}

void sub_1000F58F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F5AD4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F5958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F5990(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F59F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F5AD4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F5A5C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F5AD4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F5AD4(uint64_t a1)
{
  *(void *)a1 = off_1001B97C0;
  sub_1000F5C10(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F5C10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F5DD0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F5D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F5D98(uint64_t a1)
{
  sub_1000F5AD4(a1);
  operator delete();
}

int *sub_1000F5DD0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 900;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 900;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000F5FB8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F6120((uint64_t)a1, a2);
  *a1 = off_1001B9848;
  a1[45] = &off_1001B9948;
  a1[46] = &off_1001B9970;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B9848;
  a1[45] = off_1001B98D0;
  a1[46] = off_1001B98F8;
  return a1;
}

void sub_1000F60B8(_Unwind_Exception *a1)
{
  sub_1000F61B0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F60DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F6120(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B99E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000F619C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F61B0(uint64_t a1)
{
  *(void *)a1 = off_1001B99E0;
  sub_1000F65B8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000F62EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F61B0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F6354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F638C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F63F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F61B0(v1);
  return std::ios::~ios();
}

void sub_1000F6440(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F61B0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F64A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F61B0(v1);
  return std::ios::~ios();
}

void sub_1000F6504(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F61B0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F6580(uint64_t a1)
{
  sub_1000F61B0(a1);
  operator delete();
}

uint64_t sub_1000F65B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F673C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F6714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F673C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 258;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 258;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F6924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1000F6978(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F6C08(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F69C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F6C08(v1);
  return std::ios::~ios();
}

void sub_1000F6A24(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F6C08(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F6A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F6AC4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F6B2C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F6C08(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F6B90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F6C08(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F6C08(uint64_t a1)
{
  *(void *)a1 = off_1001B9C00;
  sub_1000F6D44(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F6D44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F6F04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F6EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F6ECC(uint64_t a1)
{
  sub_1000F6C08(a1);
  operator delete();
}

int *sub_1000F6F04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1075;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1075;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F70EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F737C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F7138(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F737C(v1);
  return std::ios::~ios();
}

void sub_1000F7198(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F737C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F7200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F7238(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F72A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F737C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F7304(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F737C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F737C(uint64_t a1)
{
  *(void *)a1 = off_1001B9E20;
  sub_1000F74B8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F74B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F7678((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F7614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F7640(uint64_t a1)
{
  sub_1000F737C(a1);
  operator delete();
}

int *sub_1000F7678(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1081;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1081;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F7860(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7AF0(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F78AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7AF0(v1);
  return std::ios::~ios();
}

void sub_1000F790C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F7AF0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F7974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F79AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F7A14(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F7AF0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F7A78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F7AF0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F7AF0(uint64_t a1)
{
  *(void *)a1 = off_1001BA040;
  sub_1000F7C2C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F7C2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F7DEC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F7D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F7DB4(uint64_t a1)
{
  sub_1000F7AF0(a1);
  operator delete();
}

int *sub_1000F7DEC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1090;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1090;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F7FD4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F8264(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F8020(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F8264(v1);
  return std::ios::~ios();
}

void sub_1000F8080(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F8264(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F80E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F8120(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F8188(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F8264(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F81EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F8264(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F8264(uint64_t a1)
{
  *(void *)a1 = off_1001BA260;
  sub_1000F83A0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F83A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F8560((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F84FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F8528(uint64_t a1)
{
  sub_1000F8264(a1);
  operator delete();
}

int *sub_1000F8560(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1151;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1151;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F8748(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F89D8(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F8794(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F89D8(v1);
  return std::ios::~ios();
}

void sub_1000F87F4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F89D8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F885C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F8894(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F88FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F89D8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F8960(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F89D8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F89D8(uint64_t a1)
{
  *(void *)a1 = off_1001BA480;
  sub_1000F8B14(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F8B14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F8CD4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F8C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F8C9C(uint64_t a1)
{
  sub_1000F89D8(a1);
  operator delete();
}

int *sub_1000F8CD4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1188;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1188;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F8EBC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F914C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000F8F08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F914C(v1);
  return std::ios::~ios();
}

void sub_1000F8F68(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F914C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F8FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F9008(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000F9070(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F914C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F90D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F914C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F914C(uint64_t a1)
{
  *(void *)a1 = off_1001BA6A0;
  sub_1000F9288(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000F9288(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F9448((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F93E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F9410(uint64_t a1)
{
  sub_1000F914C(a1);
  operator delete();
}

int *sub_1000F9448(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1441;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1441;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000F9630(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 5496) + 16) + 144))(*(void *)(*(void *)(a1 + 5496) + 16));
  int v2 = sub_1000E9CD8(a1 + 5504);
  uint64_t v3 = *(void *)(a1 + 6600);
  if (v3 == v2)
  {
    sub_1000F98AC(a1 + 5168, a1 + 5328);
    *(void *)(a1 + 5512) = 0;
    uint64_t v4 = *(void *)(a1 + 6200);
    if (v4)
    {
      int v5 = *(void (****)(void))(a1 + 6192);
      char v6 = v5;
      uint64_t v7 = v5;
      do
      {
        --v4;
        uint64_t v8 = *v7;
        v7 += 3;
        (*v8)(v6);
        v5 += 3;
        char v6 = v7;
      }
      while (v4);
    }
    *(void *)(a1 + 6200) = 0;
    if (*(unsigned char *)(a1 + 6184)) {
      *(unsigned char *)(a1 + 6184) = 0;
    }
    *(void *)(a1 + 6600) = 0;
  }
  else
  {
    if (v2 < 0) {
      int v9 = v2;
    }
    else {
      int v9 = -5;
    }
    return -(uint64_t)-v9;
  }
  return v3;
}

void *sub_1000F9744(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000F99A0((uint64_t)a1, a2);
  *a1 = off_1001BA728;
  a1[45] = &off_1001BA828;
  a1[46] = &off_1001BA850;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BA728;
  a1[45] = off_1001BA7B0;
  a1[46] = off_1001BA7D8;
  return a1;
}

void sub_1000F9844(_Unwind_Exception *a1)
{
  sub_1000F9A30(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F9868(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F98AC(uint64_t a1, uint64_t a2)
{
  sub_1000F9944(a1, (uint64_t *)a2);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v6;
  if (v8) {
    sub_100004944(v8);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v9;
  return a1;
}

uint64_t sub_1000F9944(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_100004944(v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t sub_1000F99A0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BA8C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000F9A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F9A30(uint64_t a1)
{
  *(void *)a1 = off_1001BA8C0;
  sub_1000F9E38(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000F9B6C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000F9A30(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F9BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000F9C0C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000F9C74(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9A30(v1);
  return std::ios::~ios();
}

void sub_1000F9CC0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000F9A30(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000F9D24(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9A30(v1);
  return std::ios::~ios();
}

void sub_1000F9D84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000F9A30(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000F9E00(uint64_t a1)
{
  sub_1000F9A30(a1);
  operator delete();
}

uint64_t sub_1000F9E38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000F9FBC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000F9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000F9FBC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1409;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1409;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000FA1A4(uint64_t a1)
{
  uint64_t v2 = sub_1000F9630(a1);
  if (*(unsigned char *)(a1 + 5160))
  {
    sub_1000FA1FC((atomic_ullong *)a1);
    *(unsigned char *)(a1 + 5160) = 0;
  }
  return v2;
}

atomic_ullong *sub_1000FA1FC(atomic_ullong *a1)
{
  atomic_ullong v2 = a1[3];
  if (v2)
  {
    atomic_ullong v3 = a1[2];
    atomic_ullong v28 = v3 + 320 * v2;
    do
    {
      uint64_t v5 = *(void *)v3;
      int v4 = *(std::__shared_weak_count **)(v3 + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v33 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)&v33[9] = *(_OWORD *)(v3 + 25);
      uint64_t v6 = *(void *)(v3 + 48);
      long long v7 = *(_OWORD *)(v3 + 56);
      long long v8 = *(_OWORD *)(v3 + 88);
      long long v90 = *(_OWORD *)(v3 + 72);
      long long v91 = v8;
      char v92 = *(unsigned char *)(v3 + 104);
      uint64_t v10 = *(void *)(v3 + 112);
      uint64_t v9 = *(std::__shared_weak_count **)(v3 + 120);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v32 = *(_OWORD *)(v3 + 128);
      unint64_t v30 = *(void *)(v3 + 144);
      char v31 = *(unsigned char *)(v3 + 152);
      uint64_t v12 = *(void *)(v3 + 160);
      uint64_t v11 = *(std::__shared_weak_count **)(v3 + 168);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v29 = *(_OWORD *)(v3 + 176);
      *(_OWORD *)&v29[9] = *(_OWORD *)(v3 + 185);
      uint64_t v13 = *(void *)(v3 + 208);
      long long v14 = *(_OWORD *)(v3 + 216);
      long long v15 = *(_OWORD *)(v3 + 248);
      long long v87 = *(_OWORD *)(v3 + 232);
      long long v88 = v15;
      char v89 = *(unsigned char *)(v3 + 264);
      uint64_t v17 = *(void *)(v3 + 272);
      uint64_t v16 = *(std::__shared_weak_count **)(v3 + 280);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = 0;
      unint64_t v45 = *(void *)(v3 + 304);
      char v46 = *(unsigned char *)(v3 + 312);
      long long v44 = *(_OWORD *)(v3 + 288);
      uint64_t v47 = v5;
      unint64_t v48 = v4;
      v49[0] = *(_OWORD *)v33;
      *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v33[9];
      long long v51 = v7;
      long long v52 = v90;
      long long v53 = v91;
      char v54 = v92;
      uint64_t v50 = v6;
      uint64_t v55 = v10;
      char v56 = v9;
      long long v57 = v32;
      char v59 = v31;
      unint64_t v58 = v30;
      uint64_t v34 = v12;
      uint64_t v35 = v11;
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)&v29[9];
      v36[0] = *(_OWORD *)v29;
      long long v38 = v14;
      char v41 = v89;
      long long v39 = v87;
      long long v40 = v88;
      uint64_t v37 = v13;
      uint64_t v42 = v17;
      uint64_t v43 = v16;
      unint64_t v19 = v45;
      v86[0] = 0;
      v86[528] = 0;
      do
      {
        if (sub_1000410B8((uint64_t)&v47, (uint64_t)&v34)) {
          break;
        }
        if (v58 >= v19 || v18 == -1) {
          break;
        }
        if (sub_1000D8524())
        {
          *(void *)&long long v83 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((void *)&v83 + 1) = 104;
          LODWORD(v84) = 2;
          sub_100018AAC(&v73, &v83);
          sub_1000039A0(v80, (uint64_t)"sg: ", 4);
          sub_100149114(v80);
          std::ostream::~ostream();
          sub_100018E08((uint64_t)&v73);
          std::ios::~ios();
        }
        *(void *)&long long v73 = 0;
        *((void *)&v73 + 1) = v19;
        char v74 = 2;
        sub_10008A630(&v47, (uint64_t)&v73, (uint64_t)&v83);
        atomic_ullong v21 = *a1;
        if (*a1)
        {
          if (*(unsigned char *)(v21 + 224)) {
            unint64_t v22 = v21 + 40;
          }
          else {
            unint64_t v22 = 0;
          }
        }
        else
        {
          unint64_t v22 = 0;
        }
        sub_1000E9F48(v22, a1[1], (char **)&v83);
        unint64_t v23 = v84;
        BOOL v24 = v84 >= 0 || v84 == 0;
        char v25 = v24;
        if (v24)
        {
          uint64_t v26 = v85;
          if (sub_100042754((uint64_t)&v47, (uint64_t)&v34, v85, v84))
          {
            uint64_t v60 = v47;
            BOOL v61 = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v62[0] = v49[0];
            *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v49 + 9);
            uint64_t v63 = v50;
            long long v64 = v51;
            long long v65 = v52;
            long long v66 = v53;
            char v67 = v54;
            uint64_t v68 = v55;
            long long v69 = v56;
            if (v56) {
              atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v70 = v57;
            unint64_t v71 = v58;
            char v72 = v59;
            sub_100042718((uint64_t)&v60, (uint64_t)&v34, v26, v23, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v73);
            sub_100018C14((uint64_t)v86, (uint64_t)&v73);
            if (v82) {
              sub_100004944(v82);
            }
            if (v81) {
              sub_100004944(v81);
            }
            if (v79) {
              sub_100004944(v79);
            }
            if (v78) {
              sub_100004944(v78);
            }
            if (v77) {
              sub_100004944(v77);
            }
            if (v75) {
              sub_100004944(v75);
            }
            if (v69) {
              sub_100004944(v69);
            }
            if (v61) {
              sub_100004944(v61);
            }
            sub_1000414AC((uint64_t)v86, (uint64_t)&v73);
            sub_100018CC8((uint64_t)&v47, &v73);
            if (v76) {
              sub_100004944(v76);
            }
            if (*((void *)&v73 + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v73 + 1));
            }
            sub_1000411FC((uint64_t)v86, (uint64_t)&v73);
            sub_100018CC8((uint64_t)&v34, &v73);
            if (v76) {
              sub_100004944(v76);
            }
            if (*((void *)&v73 + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v73 + 1));
            }
          }
          sub_100041B0C((uint64_t)&v47, v23);
          v18 += v23;
        }
        if (*((void *)&v83 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v83 + 1));
        }
      }
      while ((v25 & 1) != 0);
      sub_1000197F0((uint64_t)v86);
      if (v43) {
        sub_100004944(v43);
      }
      if (v35) {
        sub_100004944(v35);
      }
      if (v56) {
        sub_100004944(v56);
      }
      if (v48) {
        sub_100004944(v48);
      }
      v3 += 320;
    }
    while (v3 != v28);
  }
  sub_1000FA87C((uint64_t)(a1 + 2));
  sub_1000DFA40(a1);
  return a1;
}

void sub_1000FA76C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (STACK[0x4D0]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x4D0]);
  }
  sub_1000197F0((uint64_t)&STACK[0x4F8]);
  sub_10000371C((uint64_t)&a36);
  sub_10000371C((uint64_t)&a56);
  sub_100003708(a1);
}

uint64_t sub_1000FA87C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 168;
    do
    {
      int v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        sub_100004944(v4);
      }
      if (*(void *)v3) {
        sub_100004944(*(std::__shared_weak_count **)v3);
      }
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        sub_100004944(v5);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        sub_100004944(v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t *sub_1000FA910(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    long long v7 = (atomic_ullong *)v3[41];
    if (v7) {
      v3[42] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_1000FA9B4((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_1000DFA6C((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1000FA9B4(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 344)) {
      sub_1000FAA54(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_1000FAA54(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000FAA98((uint64_t)&v4, (uint64_t)&v5, 0);
}

BOOL sub_1000FAA98(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v7 = 0;
  while (1)
  {
    unsigned int v8 = *(unsigned int **)a1;
    int v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) >= 2) {
      unsigned int explicit = v9 == 5 ? atomic_load(v8) : *v8;
    }
    else {
      unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v8, memory_order_acquire);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (explicit != v11) {
      break;
    }
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3 || sub_1000FAB5C(a2, v12.__d_.__rep_)) {
        return explicit != v11;
      }
    }
  }
  return explicit != v11;
}

uint64_t sub_1000FAB5C(uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0;
  }
  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  long long v4 = *(unsigned int **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      unsigned int explicit = atomic_load(v4);
    }
    else {
      unsigned int explicit = *v4;
    }
  }
  else
  {
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v4, memory_order_acquire);
  }
  if (explicit == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void sub_1000FABF4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v4 = *a3 - *a2;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    uint64_t v11 = *a2;
    sub_1000FADF8((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x66666666666667) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    unsigned int v8 = operator new(v4);
    int v9 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_1000FACEC(a1);
      if (a1 + 3 != v9) {
        operator delete(v9);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    uint64_t v10 = *a2;
    uint64_t v12 = *a3;
    uint64_t v13 = v10;
    sub_1000FAD64(a1, &v13, &v12);
  }
}

void sub_1000FACEC(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 168;
    do
    {
      int64_t v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        sub_100004944(v4);
      }
      if (*(void *)v3) {
        sub_100004944(*(std::__shared_weak_count **)v3);
      }
      unint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        sub_100004944(v5);
      }
      std::chrono::steady_clock::time_point v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        sub_100004944(v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void sub_1000FAD64(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1 + 320 * v4;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sub_100019864(v8, v6);
      sub_100019864(v8 + 160, v6 + 160);
      v6 += 320;
      v8 += 320;
    }
    while (v6 != v7);
    uint64_t v4 = a1[1];
  }
  a1[1] = v4 - 0x3333333333333333 * ((v8 - v5) >> 6);
}

void sub_1000FADF8(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a3;
      do
      {
        --v14;
        sub_1000F98AC(a4, v13);
        sub_1000F98AC(a4 + 160, v13 + 160);
        a4 += 320;
        v13 += 320;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      uint64_t v16 = (std::__shared_weak_count **)(a4 + 168);
      do
      {
        uint64_t v17 = v16[14];
        if (v17) {
          sub_100004944(v17);
        }
        if (*v16) {
          sub_100004944(*v16);
        }
        uint64_t v18 = *(v16 - 6);
        if (v18) {
          sub_100004944(v18);
        }
        unint64_t v19 = *(v16 - 20);
        if (v19) {
          sub_100004944(v19);
        }
        v16 += 40;
        BOOL v12 = __CFADD__(v15++, 1);
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (a5)
    {
      unint64_t v11 = a5;
      do
      {
        --v11;
        sub_1000F98AC(a4, v10);
        sub_1000F98AC(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
      }
      while (v11);
    }
    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sub_100019864(a4, v10);
        sub_100019864(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
        BOOL v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
  }
}

void sub_1000FAF30(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000FB0C4((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(320 * v11);
  sub_1000FB140(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 sub_1000FAFE0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v3 = *(_OWORD *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  long long v7 = *(_OWORD *)(a2 + 232);
  long long v8 = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  __n128 result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  uint64_t v10 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v10;
  return result;
}

unint64_t sub_1000FB0C4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x66666666666666;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x66666666666666 - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x66666666666666) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000FB140(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000FB238((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 168);
      do
      {
        uint64_t v13 = v12[14];
        if (v13) {
          sub_100004944(v13);
        }
        if (*v12) {
          sub_100004944(*v12);
        }
        unint64_t v14 = *(v12 - 6);
        if (v14) {
          sub_100004944(v14);
        }
        unint64_t v15 = *(v12 - 20);
        if (v15) {
          sub_100004944(v15);
        }
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v16 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v16;
  a1[2] = a3;
}

void sub_1000FB214(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FB238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  void v16[2] = a1;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_1000FAFE0(a5, v12);
      v12 += 320;
      a5 += 320;
    }
    while (v12 != v11);
  }
  sub_1000FAFE0(a5, a7);
  if (v11 != a4)
  {
    uint64_t v13 = a5 + 320 * a6;
    do
    {
      sub_1000FAFE0(v13, v11);
      v11 += 320;
      uint64_t v13 = v14 + 320;
    }
    while (v11 != a4);
  }
  v16[0] = 0;
  v16[1] = 0;
  return sub_1000FB2EC(v16);
}

void *sub_1000FB2EC(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 != a1[1])
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[35];
      if (v3) {
        sub_100004944(v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[21];
      if (v4) {
        sub_100004944(v4);
      }
      unint64_t v5 = (std::__shared_weak_count *)v2[15];
      if (v5) {
        sub_100004944(v5);
      }
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6) {
        sub_100004944(v6);
      }
      uint64_t v7 = (void *)a1[1];
      uint64_t v2 = (void *)(*a1 + 320);
      *a1 = v2;
    }
    while (v2 != v7);
  }
  return a1;
}

void sub_1000FB360(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_100073298((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(24 * v11);
  sub_1000FB410(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_1000FB410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000FB510((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        uint64_t v14 = *v13;
        v13 += 3;
        (*v14)(v10);
        v12 += 24;
        uint64_t v10 = (uint64_t)v13;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v15 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v15;
  a1[2] = a3;
}

void sub_1000FB4EC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FB510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a5;
  if (a2 != a3)
  {
    uint64_t v14 = 0;
    do
    {
      sub_100148D94(a5 + v14, a2 + v14);
      v14 += 24;
    }
    while (a2 + v14 != a3);
    uint64_t v12 = a5 + v14;
  }
  uint64_t result = sub_100148D94(v12, a7);
  if (a3 != a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v12 + 24 * a6;
    do
    {
      uint64_t result = sub_100148D94(v17 + v16, a3 + v16);
      v16 += 24;
    }
    while (a3 + v16 != a4);
  }
  return result;
}

void sub_1000FB5D0(_Unwind_Exception *exception_object)
{
  if (v2 != v1)
  {
    unint64_t v4 = v1;
    unint64_t v5 = v1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v1);
      v4 += 3;
      uint64_t v1 = v5;
    }
    while (v5 != v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FB67C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))a1;
    unint64_t v4 = *(void (****)(void))a1;
    unint64_t v5 = *(void (****)(void))a1;
    do
    {
      --v2;
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v4);
      v3 += 3;
      unint64_t v4 = v5;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000FB70C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FB99C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FB758(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FB99C(v1);
  return std::ios::~ios();
}

void sub_1000FB7B8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FB99C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FB820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FB858(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FB8C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FB99C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FB924(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FB99C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FB99C(uint64_t a1)
{
  *(void *)a1 = off_1001BAAE0;
  sub_1000FBAD8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FBAD8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FBC98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FBC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FBC60(uint64_t a1)
{
  sub_1000FB99C(a1);
  operator delete();
}

int *sub_1000FBC98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1513;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1513;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

BOOL sub_1000FBE80(unint64_t *a1)
{
  while (1)
  {
    unint64_t v2 = *a1;
    if ((*a1 & 0x8000000000000000) == 0) {
      break;
    }
    unint64_t v3 = *a1;
LABEL_7:
    unint64_t v2 = v3;
    if (v3 != -1) {
      return v2 != -1;
    }
    if ((sub_1000FBEF4(a1, 0) & 1) == 0)
    {
      unint64_t v2 = -1;
      return v2 != -1;
    }
  }
  unint64_t v3 = *a1;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)a1, &v3, v2 + 1);
    if (v3 == v2) {
      return v2 != -1;
    }
    unint64_t v2 = v3;
    if ((v3 & 0x8000000000000000) != 0) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_1000FBEF4(unint64_t *a1, int a2)
{
  unint64_t v2 = atomic_load(a1);
  BOOL v3 = v2 == 0;
  BOOL v4 = v2 != -1;
  if (a2) {
    BOOL v4 = v3;
  }
  if (!v4)
  {
    v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8((unint64_t)a1);
    v16.__owns_ = 1;
    std::mutex::lock(v16.__m_);
    uint64_t v7 = sub_100148CC4((unint64_t)a1);
    unint64_t v8 = atomic_load(a1);
    BOOL v9 = v8 == 0;
    BOOL v10 = v8 != -1;
    if (a2) {
      BOOL v10 = v9;
    }
    if (!v10)
    {
      uint64_t v11 = (std::condition_variable *)v7;
      do
      {
        std::condition_variable::wait(v11, &v16);
        unint64_t v12 = atomic_load(a1);
        BOOL v13 = v12 == 0;
        BOOL v14 = v12 != -1;
        if (a2) {
          BOOL v14 = v13;
        }
      }
      while (!v14);
    }
    if (v16.__owns_) {
      std::mutex::unlock(v16.__m_);
    }
  }
  return 1;
}

void sub_1000FBFD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000FBFE4(uint64_t (*a1)(long long *), long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = sub_1000FC130(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_1000FC114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

unint64_t sub_1000FC130(uint64_t (*a1)(long long *), void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v28[0] = 0;
  v28[528] = 0;
  while (!sub_1000410B8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((void *)&v26 + 1) = 119;
      int v27 = 2;
      sub_100018AAC(&v23, &v26);
      sub_1000039A0(v25, (uint64_t)"sg: ", 4);
      sub_100149114(v25);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_10008A630(a2, (uint64_t)&v23, (uint64_t)&v26);
    int64_t v10 = a1(&v26);
    unint64_t v12 = v10;
    BOOL v13 = v10 >= 0 || v10 == 0;
    char v14 = v13;
    if (v13)
    {
      uint64_t v15 = v11;
      if (sub_100042754((uint64_t)a2, a3, v11, v10))
      {
        sub_100019864((uint64_t)v22, (uint64_t)a2);
        sub_100042718((uint64_t)v22, a3, v15, v12, a4, (uint64_t)&v23);
        sub_100018C14((uint64_t)v28, (uint64_t)&v23);
        sub_100018C5C(&v23);
        sub_10000371C((uint64_t)v22);
        sub_1000414AC((uint64_t)v28, (uint64_t)&v23);
        sub_100018CC8((uint64_t)a2, &v23);
        sub_10000371C((uint64_t)&v23);
        sub_1000411FC((uint64_t)v28, (uint64_t)&v23);
        sub_100018CC8(a3, &v23);
        sub_10000371C((uint64_t)&v23);
      }
      if (a5) {
        sub_100041B0C((uint64_t)a2, v12);
      }
      else {
        sub_100041C48((uint64_t)a2, v12);
      }
      v7 += v12;
    }
    else
    {
      if ((int)v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = -(int)v10;
      }
      unint64_t v18 = -v16;
    }
    if (*((void *)&v26 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
  }
  unint64_t v18 = v7;
LABEL_32:
  sub_1000197F0((uint64_t)v28);
  return v18;
}

void sub_1000FC398(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x2E8]);
  }
  sub_1000197F0((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FC408(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FC698(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FC454(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FC698(v1);
  return std::ios::~ios();
}

void sub_1000FC4B4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FC698(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FC51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FC554(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FC5BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FC698(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FC620(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FC698(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FC698(uint64_t a1)
{
  *(void *)a1 = off_1001BAD00;
  sub_1000FC7D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FC7D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FC994((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FC930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FC95C(uint64_t a1)
{
  sub_1000FC698(a1);
  operator delete();
}

int *sub_1000FC994(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2061;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2061;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000FCB7C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FCE0C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FCBC8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FCE0C(v1);
  return std::ios::~ios();
}

void sub_1000FCC28(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FCE0C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FCC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FCCC8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FCD30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FCE0C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FCD94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FCE0C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FCE0C(uint64_t a1)
{
  *(void *)a1 = off_1001BAF20;
  sub_1000FCF48(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FCF48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FD108((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FD0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FD0D0(uint64_t a1)
{
  sub_1000FCE0C(a1);
  operator delete();
}

int *sub_1000FD108(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2071;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2071;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000FD2F0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FD580(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FD33C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FD580(v1);
  return std::ios::~ios();
}

void sub_1000FD39C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FD580(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FD404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FD43C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FD4A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FD580(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FD508(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FD580(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FD580(uint64_t a1)
{
  *(void *)a1 = off_1001BB140;
  sub_1000FD6BC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FD6BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FD87C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FD818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FD844(uint64_t a1)
{
  sub_1000FD580(a1);
  operator delete();
}

int *sub_1000FD87C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2311;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2311;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000FDA64(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FDCF4(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FDAB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FDCF4(v1);
  return std::ios::~ios();
}

void sub_1000FDB10(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FDCF4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FDB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FDBB0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FDC18(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FDCF4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FDC7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FDCF4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FDCF4(uint64_t a1)
{
  *(void *)a1 = off_1001BB360;
  sub_1000FDE30(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FDE30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FDFF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FDF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FDFB8(uint64_t a1)
{
  sub_1000FDCF4(a1);
  operator delete();
}

int *sub_1000FDFF0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2321;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2321;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000FE1D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009C748(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000FE234(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FE250(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009C748(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000FE2AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000FE2C8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE430((uint64_t)a1, a2);
  *a1 = off_1001BB428;
  a1[45] = &off_1001BB528;
  a1[46] = &off_1001BB550;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BB428;
  a1[45] = off_1001BB4B0;
  a1[46] = off_1001BB4D8;
  return a1;
}

void sub_1000FE3C8(_Unwind_Exception *a1)
{
  sub_1000FE4C0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000FE3EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000FE430(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BB5C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000FE4AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE4C0(uint64_t a1)
{
  *(void *)a1 = off_1001BB5C0;
  sub_1000FE8C8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000FE5FC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FE4C0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FE664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FE69C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000FE704(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FE4C0(v1);
  return std::ios::~ios();
}

void sub_1000FE750(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FE4C0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FE7B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FE4C0(v1);
  return std::ios::~ios();
}

void sub_1000FE814(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FE4C0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FE890(uint64_t a1)
{
  sub_1000FE4C0(a1);
  operator delete();
}

uint64_t sub_1000FE8C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FEA4C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FEA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000FEA4C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 158;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 158;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000FEC34(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const char *sub_1000FEC6C()
{
  return "File too small.";
}

void sub_1000FEC78(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_100004890(v13, v3);
  sub_100009FEC((uint64_t)v9);
  if ((v14 & 0x80u) == 0) {
    int v4 = v13;
  }
  else {
    int v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = v14;
  }
  else {
    uint64_t v5 = (uint64_t)v13[1];
  }
  char v6 = sub_1000039A0(&v10, (uint64_t)v4, v5);
  sub_1000039A0(v6, (uint64_t)" header size ", 13);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_1000039A0(v7, (uint64_t)", but file size only ", 21);
  std::ostream::operator<<();
  sub_100004624((uint64_t)v11, a2);
  *(void *)((char *)v9
  uint64_t v10 = v8;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1000FEE7C(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_1000FEED0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000FEED0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    int v4 = *(std::__shared_weak_count **)(i - 40);
    if (v4) {
      sub_100004944(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1000FEF1C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FF1AC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FEF68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FF1AC(v1);
  return std::ios::~ios();
}

void sub_1000FEFC8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FF1AC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FF030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FF068(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FF0D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FF1AC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FF134(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FF1AC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FF1AC(uint64_t a1)
{
  *(void *)a1 = off_1001BB810;
  sub_1000FF2E8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FF2E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FF4A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FF444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FF470(uint64_t a1)
{
  sub_1000FF1AC(a1);
  operator delete();
}

int *sub_1000FF4A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2831;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unsigned __int8 v14 = a2;
      }
      else {
        unsigned __int8 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2831;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000FF690(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FF920(v1);
  return std::ios::~ios();
}

uint64_t sub_1000FF6DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FF920(v1);
  return std::ios::~ios();
}

void sub_1000FF73C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000FF920(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FF7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000FF7DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000FF844(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000FF920(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000FF8A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000FF920(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000FF920(uint64_t a1)
{
  *(void *)a1 = off_1001BBA30;
  sub_1000FFA5C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000FFA5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000FFC1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000FFBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FFBE4(uint64_t a1)
{
  sub_1000FF920(a1);
  operator delete();
}

int *sub_1000FFC1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2828;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unsigned __int8 v14 = a2;
      }
      else {
        unsigned __int8 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2828;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_1000FFE08(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000FFE40(uint64_t a1)
{
}

uint64_t sub_1000FFE48(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001BBAF0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FFE8C(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_10004B570();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x555555555555555;
  }
  else {
    unint64_t v15 = v8;
  }
  void v25[4] = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)sub_100072388(v13, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = &v16[48 * v7];
  v25[0] = v16;
  v25[1] = v17;
  v25[3] = &v16[48 * v15];
  uint64_t v18 = *a3;
  uint64_t v19 = *a4;
  uint64_t v20 = *a5;
  *(void *)int v17 = *a2;
  uint64_t v21 = a2[1];
  *((void *)v17 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v22 = &v16[48 * v7];
  *((void *)v22 + 2) = v18;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v20;
  v22[40] = 0;
  void v25[2] = v17 + 48;
  sub_1000FFFD8(a1, v25);
  uint64_t v23 = a1[1];
  sub_100100170(v25);
  return v23;
}

void sub_1000FFFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100100170((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FFFD8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100100050((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100100050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 48);
    do
    {
      long long v9 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 25);
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)v8 + 25) = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 3;
      v7 -= 48;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1001000F4((uint64_t)v13);
  return v11;
}

uint64_t sub_1001000F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10010012C(a1);
  }
  return a1;
}

void sub_10010012C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100004944(v3);
    }
    v1 += 48;
  }
}

void **sub_100100170(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1001001A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 48;
    int v4 = *(std::__shared_weak_count **)(v1 - 40);
    if (v4)
    {
      sub_100004944(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 48;
    }
  }
}

uint64_t sub_1001001F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    sub_10004B570();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)sub_100100370(v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_1000EE0FC((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_100100358(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100100370(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_10004B1A4();
  }
  return operator new(28 * a2);
}

uint64_t sub_1001003BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    sub_10004B570();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)sub_100100370(v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_1000EE0FC((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28;
    }
    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_10010051C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100100538()
{
}

void *sub_10010054C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001BBB10;
  result[1] = v3;
  return result;
}

uint64_t sub_100100594(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BBB10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001005C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a2, 0);
}

uint64_t sub_1001005EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010062C()
{
}

_DWORD *sub_100100638(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

atomic_ullong *sub_1001006C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_100100894(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 344) || v13 && *(unsigned char *)(v13 + 344))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_1000DFA40((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 736) && v14 != (void *)(a1 + 760))
  {
    do
    {
      sub_100100CD0(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_1000E10C8((atomic_ullong *)&v13, &v12);
      sub_1000DFA40(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 344)) {
          break;
        }
      }
      unint64_t v7 = (unint64_t *)sub_100100E6C((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_100100F08(a1, v7, a2, (unint64_t *)&v11);
        sub_1000E10C8((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_1000DFA40((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    uint64_t v8 = sub_100102254((uint64_t **)(a1 + 752), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    sub_100100FF4(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_1000DFA40((atomic_ullong *)&v13);
}

void sub_100100854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000DFA40((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void sub_100100894(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 776);
  uint64_t v8 = (void *)(a1 + 760);
  char v9 = (uint64_t **)(a1 + 752);
  long long v10 = (unint64_t *)(a1 + 1008);
  char v34 = (unint64_t *)(a1 + 104);
  long long v35 = (std::condition_variable *)(a1 + 840);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      uint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        char v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_1000DFA40((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    char v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    atomic_ullong v12 = sub_100101154(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    unint64_t v13 = v12;
    if (v14)
    {
      char v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000DFA40((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    char v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_10001FED8((uint64_t)&__lk);
      sub_1000FA910(&v37, v38 + 45);
      if (v37 && !*(unsigned char *)(v37 + 344))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_100100FF4(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            uint64_t v22 = sub_100148CC4((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            char v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_1001012B8((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          char v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            long long v33 = *(atomic_ullong **)(a1 + 432);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 440) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_1000DFA40((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_1000DFA40((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      char v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000DFA40((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    uint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      long long v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          long long v28 = v23;
        }
        else {
          long long v28 = v23 + 1;
        }
        if (v27) {
          long long v25 = v23;
        }
        uint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          uint64_t v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[45];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 344)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 736)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          uint64_t v23 = (void *)*v8;
          long long v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 736));
  char v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_1000DFA40((atomic_ullong *)&v41);
}

void sub_100100C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100100CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  uint64_t v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 504) & 0x1FFLL));
    ++*(void *)(a1 + 504);
    *(void *)(a1 + 512) = v7 - 1;
    sub_100101440(a1 + 472, 1);
    sub_100100F08(a1, v8, a2, v12);
    sub_1000E10C8(&v11, (atomic_ullong *)v12);
    sub_1000DFA40((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(void *)(a1 + 464))
  {
    sub_100100FF4(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = (unint64_t)_NSConcreteStackBlock;
    v12[1] = 0x40000000;
    v12[2] = (unint64_t)sub_1001014A0;
    void v12[3] = (unint64_t)&unk_1001BBB90;
    void v12[4] = a1;
    sub_100125F94((dispatch_queue_t *)(a1 + 744), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return sub_1000DFA40(&v11);
}

void sub_100100E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_1000DFA40(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_100100E6C(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 75);
  uint64_t v2 = a1[57];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[73];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 344) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[73] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_100101D64((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_100100F08@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_10010211C((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    long long v10 = (atomic_ullong *)a2[42];
    if (v10) {
      a2[43] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 456))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 456) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_1000DFA40((atomic_ullong *)&v14);
}

uint64_t sub_100100FF4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 968)) {
    return 0;
  }
  unint64_t v17 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(void *)(a1 + 968))
  {
    unint64_t v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000DFA6C(v12 + 8, v8[3], v10) | a2) == 1)
        {
          unint64_t v13 = sub_100148BF8(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 368), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 968);
          operator delete(v8);
          unint64_t v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          unint64_t v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 952));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_10010113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t *sub_100101154(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    _OWORD v10[5] = v11;
    sub_10000CAA0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

unint64_t *sub_100101210(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[41];
    if (v8) {
      a2[42] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_1000FA9B4((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_1000DFA6C((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1001012B8(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 368)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 344) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 368)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 344)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_100101440(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_1001014A0(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_100100E6C(v1);
  if (v2) {
    sub_1001014F8((uint64_t)v1, v2);
  }
  return sub_100100FF4((uint64_t)v1, 0, 0, 0);
}

void sub_1001014F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  sub_100101558((void *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_100101544(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100101558(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001015E0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1001015E0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_10004B588(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1001018F8(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100101A10((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_10004B588((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = sub_10004B588((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_100101B30(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100101C48((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1001018AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001018F8(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10004B588(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      BOOL v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_100101A10(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10004B588(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100101B30(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_10004B588(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_100101C48(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10004B588(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_100101D64(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 2u);
  sub_1000DFA40((atomic_ullong *)(a2 + 360));
  if (a4) {
    sub_1000DFA40(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 368));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 368)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          uint64_t v12 = *(void *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v12) {
            break;
          }
        }
        if (sub_100100FF4(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100148CC4(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_100101FA8((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100148CC4(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 368));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 368)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                uint64_t v16 = *(void *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 368));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 368);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 512))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 368));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 368), 0xFFFFFFFD) & 1;
}

void sub_100101F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100101FA8(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 368));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 368)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      uint64_t v11 = *(void *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 368));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 368)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 520));
  BOOL v17 = *(void *)(v15 + 512) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

atomic_ullong *sub_10010211C(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 368));
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_1001021EC(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 336);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 344) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_1000E10C8((atomic_ullong *)(a1 + 360), (atomic_ullong *)&v9);
  uint64_t result = sub_1000DFA40((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_1000DFA6C((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *sub_1001021EC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  uint64_t result = sub_1000DFCA0((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 328);
  if (v4) {
    *(void *)(a1 + 336) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *sub_100102254(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = (uint64_t **)sub_1001022EC(a1, a2, &v14, &v13, a3);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a5;
    v9[4] = *a4;
    v9[5] = v11;
    sub_10000CAA0(a1, v14, v10, v9);
  }
  return v9;
}

void *sub_1001022EC(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    char v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          char v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        char v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    std::chrono::system_clock::time_point v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      std::chrono::system_clock::time_point v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    std::chrono::system_clock::time_point v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      std::chrono::system_clock::time_point v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    int v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          int v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        int v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_100102494(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100102518(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t result = sub_10010256C(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (void *)(*result + v6);
      *unint64_t v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *sub_10010256C(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[4] = 0;
  BOOL v3 = malloc_type_valloc(16 * a2, 0x1000040451B5BE8uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
  }
  v7[0] = off_1001BBBC0;
  v7[3] = v7;
  uint64_t v8 = v3;
  sub_1001027A4((uint64_t)v9, (uint64_t)v7);
  sub_100102694(a1, (uint64_t *)&v8);
  sub_1000DF938((uint64_t *)&v8, 0);
  sub_1000DF9BC(v9);
  sub_1000DF9BC(v7);
  return a1;
}

void sub_100102674(_Unwind_Exception *a1)
{
  sub_1000DF938(v1, 0);
  sub_1000DF9BC(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100102694(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_1000DF938(a1, v4);
  sub_100102824(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_1001026DC()
{
}

void *sub_1001026F0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BBBC0;
  return result;
}

void sub_100102728(uint64_t a1, void *a2)
{
  *a2 = off_1001BBBC0;
}

void sub_100102750(uint64_t a1, void **a2)
{
}

uint64_t sub_100102758(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100102798()
{
}

uint64_t sub_1001027A4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_100102824(void *a1, uint64_t a2)
{
  sub_1001028A8(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1001028A8(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100102930(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_10004B588(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::chrono::system_clock::time_point v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1001018F8(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100101A10((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_10004B588((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = sub_10004B588((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_100101B30(&v54, &v53);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100101C48((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100102BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100102C48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v10 = a1 + 40;
  sub_1000DFCA0((void *)(a1 + 40));
  sub_1000EA208(v10, a2, a3, *a4, *a5, 0);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_100102D1C(a1);
}

void sub_100102CE4(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  sub_100102D1C(v1);
  __cxa_rethrow();
}

void sub_100102D08(_Unwind_Exception *a1)
{
}

void sub_100102D1C(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

void sub_100102D48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v12 = a1 + 40;
  sub_1000DFCA0((void *)(a1 + 40));
  sub_1000EA208(v12, a2, a3, *a4, *a5, *a6);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_100102D1C(a1);
}

void sub_100102DF0(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  sub_100102D1C(v1);
  __cxa_rethrow();
}

void sub_100102E14(_Unwind_Exception *a1)
{
}

uint64_t sub_100102E28(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B8CA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100102EA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100102EB8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B8EC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100102F34(_Unwind_Exception *a1)
{
}

uint64_t sub_100102F48(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B90E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100102FC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100102FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10010302C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001030B0(uint64_t a1)
{
  *(unsigned char *)(a1 + 912) = 0;
  if (*(void *)(a1 + 632))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v3), 0);
      if (v4)
      {
        sub_1001032E4(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000DEBE8((atomic_ullong *)(v4 + 536));
        sub_100103838((void *)(v4 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 632) > v3);
  }
  sub_100126040((dispatch_queue_t *)(a1 + 920), &stru_1001BBC60);
  if (*(void *)(a1 + 760)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v5 = *(void *)(a1 + 656);
  if (*(void *)(a1 + 664) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 680);
    unint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 688) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 688) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_1000DEBE8((atomic_ullong *)(v9 + 536));
        sub_100103838((void *)(v9 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        uint64_t v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 696));
  sub_1001039F4((void *)(a1 + 1768));
  sub_100103A78((void *)(a1 + 1736));
  sub_1000DEBE8((atomic_ullong *)(a1 + 1720));
  sub_100103838((void *)(a1 + 1192));
  sub_1001074C0((void *)(a1 + 1152));
  sub_100103AFC((void *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  sub_10000953C(a1 + 928, *(void **)(a1 + 936));
  sub_100125ECC((NSObject **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  sub_1000DF840((void *)(a1 + 648));
  return sub_100103B60((void *)a1);
}

uint64_t sub_1001032E4(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 2u);
  sub_1000DEBE8((atomic_ullong *)(a2 + 536));
  if (a4) {
    sub_1000DEBE8(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 544));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 544)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          uint64_t v12 = *(void *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v12) {
            break;
          }
        }
        if (sub_100103564(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100148CC4(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_1001036C4((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100148CC4(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 544));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 544)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                uint64_t v16 = *(void *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 544));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 544);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 688))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 544));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 544), 0xFFFFFFFD) & 1;
}

void sub_100103500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100103528(uint64_t a1)
{
  return a1;
}

uint64_t sub_100103564(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 1144)) {
    return 0;
  }
  char v17 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(void *)(a1 + 1144))
  {
    char v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000DEC14(v12 + 8, v8[3], v10) | a2) == 1)
        {
          uint64_t v13 = sub_100148BF8(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 544), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 1144);
          operator delete(v8);
          char v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_1001036AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_1001036C4(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 544));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 544)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      uint64_t v11 = *(void *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 544));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 544)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 696));
  BOOL v17 = *(void *)(v15 + 688) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

void *sub_100103838(void *a1)
{
  return a1;
}

void *sub_10010387C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100103900(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100103984(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    sub_1000DF840((void *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
    sub_1000DF938((uint64_t *)(a1 + 16), 0);
    sub_1000DF9BC((void *)(a1 + 24));
  }
  return a1;
}

void *sub_1001039F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100103A78(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100103AFC(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *sub_100103B60(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_1000DEC14((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_100103838(v2);
  sub_1001074C0(a1 + 8);
  sub_10010387C(a1 + 4);
  return sub_100103900(a1);
}

void *sub_100103BD8(uint64_t a1)
{
  *(unsigned char *)(a1 + 736) = 0;
  if (*(void *)(a1 + 456))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v3), 0);
      if (v4)
      {
        sub_100101D64(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_1000DFA40((atomic_ullong *)(v4 + 360));
        sub_100103E40((void *)(v4 + 8));
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 456) > v3);
  }
  sub_100126040((dispatch_queue_t *)(a1 + 744), &stru_1001BBCA0);
  if (*(void *)(a1 + 584)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v5 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 504);
    unint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 512) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 512) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_1000DFA40((atomic_ullong *)(v9 + 360));
        sub_100103E40((void *)(v9 + 8));
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        unsigned int v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 520));
  sub_100103FF4((void *)(a1 + 1416));
  sub_100104078((void *)(a1 + 1384));
  sub_1000DFA40((atomic_ullong *)(a1 + 1368));
  sub_100103E40((void *)(a1 + 1016));
  sub_10010302C((void *)(a1 + 976));
  sub_100103AFC((void *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  sub_10000953C(a1 + 752, *(void **)(a1 + 760));
  sub_100125ECC((NSObject **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  sub_1000DF840((void *)(a1 + 472));
  return sub_1001040FC((void *)a1);
}

uint64_t sub_100103E04(uint64_t a1)
{
  return a1;
}

void *sub_100103E40(void *a1)
{
  return a1;
}

void *sub_100103E84(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100103F08(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100103F8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(void *)(a1 + 32) = off_1001AC798;
    sub_1000885B8((uint64_t *)(a1 + 56), 0);
    sub_100088748((void *)(a1 + 64));
  }
  return a1;
}

void *sub_100103FF4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100104078(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001040FC(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_1000DFA6C((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_100103E40(v2);
  sub_10010302C(a1 + 8);
  sub_100103E84(a1 + 4);
  return sub_100103F08(a1);
}

uint64_t sub_100104174(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B9380;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001041F0(_Unwind_Exception *a1)
{
}

uint64_t sub_100104204(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B95A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100104280(_Unwind_Exception *a1)
{
}

uint64_t sub_100104294(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B97C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100104310(_Unwind_Exception *a1)
{
}

void sub_100104328()
{
}

__n128 sub_10010433C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1001BBCD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100104390(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001BBCD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1001043C8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1001043D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100104414()
{
}

void *sub_100104420(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001044A4(void **a1, char *a2, uint64_t a3, void *a4, char *a5, void *a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = (unint64_t)a1[4];
  unint64_t v15 = v14 >> 9;
  char v16 = a1[1];
  BOOL v17 = a1[2];
  uint64_t v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
  }
  char v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    uint64_t v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0;
    }
    unint64_t v25 = (unint64_t)&v21[v14];
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_100104F78(a1, a8 - v26);
      char v21 = (char *)a1[5];
      char v16 = a1[1];
      BOOL v17 = a1[2];
      unint64_t v25 = (unint64_t)&v21[(void)a1[4]];
    }
    long long v88 = (char **)a6;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = &(*v27)[8 * (v25 & 0x1FF)];
    }
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    unint64_t v31 = (unint64_t)&v21[-v20];
    long long v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      char v34 = a7;
      if (!v8) {
        goto LABEL_90;
      }
      goto LABEL_78;
    }
    if (v31 >= v8 >> 1)
    {
      uint64_t v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        unint64_t v33 = *v88;
        goto LABEL_39;
      }
      unint64_t v37 = 511 - v32;
      __int16 v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      uint64_t v39 = *v88;
    }
    else
    {
      if (!v31)
      {
        long long v88 = (char **)a4;
        char v34 = a5;
        goto LABEL_69;
      }
      uint64_t v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        long long v88 = (char **)&a4[(unint64_t)v32 >> 9];
        unint64_t v33 = *v88;
LABEL_39:
        char v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }
      unint64_t v64 = 511 - v32;
      __int16 v38 = ~(_WORD)v64;
      long long v88 = (char **)&a4[-(v64 >> 9)];
      uint64_t v39 = *v88;
    }
    char v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      long long v65 = *v27;
      long long v66 = v88;
      char v67 = v34;
      do
      {
        *(void *)uint64_t v28 = *(void *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          uint64_t v68 = v27[1];
          ++v27;
          long long v65 = v68;
          uint64_t v28 = v68;
        }
        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          long long v69 = v66[1];
          ++v66;
          char v67 = v69;
        }
        ++v21;
      }
      while (v67 != a7);
      a1[5] = v21;
    }
    unint64_t v8 = v31;
    if (!v31) {
      goto LABEL_90;
    }
LABEL_78:
    long long v70 = (char **)sub_100105504((uint64_t)&v90, v8);
    char v72 = v70;
    long long v73 = v71;
    char v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      uint64_t v75 = (char *)a1[5];
      uint64_t v76 = *v27;
      uint64_t v77 = v70;
      long long v78 = v71;
      do
      {
        *(void *)uint64_t v28 = *(void *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          long long v79 = v27[1];
          ++v27;
          uint64_t v76 = v79;
          uint64_t v28 = v79;
        }
        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          char v80 = (char *)v77[1];
          ++v77;
          long long v78 = v80;
        }
        ++v75;
      }
      while (v78 != v74);
      a1[5] = v75;
    }
    if (v8 >= v31)
    {
      long long v83 = (void *)v90.n128_u64[0];
    }
    else
    {
      uint64_t v81 = (char **)sub_100105504((uint64_t)&v90, v31);
      sub_1001056FC(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      char v74 = (char *)v92.n128_u64[1];
      long long v83 = (void *)v92.n128_u64[0];
      __n128 v90 = v92;
    }
    sub_1001056FC(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }
  if (a8 > v14)
  {
    sub_100104A48(a1, a8 - v14);
    unint64_t v14 = (unint64_t)a1[4];
    char v16 = a1[1];
    BOOL v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }
  unint64_t v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *v22 + 8 * (v14 & 0x1FF);
  }
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    long long v30 = a5;
    if (!v8) {
      goto LABEL_90;
    }
    goto LABEL_55;
  }
  if (v20 >= v8 >> 1)
  {
    uint64_t v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    unint64_t v35 = 511 - v29;
    __int16 v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      long long v30 = a7;
      goto LABEL_46;
    }
    uint64_t v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      long long v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    unint64_t v40 = 511 - v29;
    __int16 v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }
  long long v30 = (char *)(*a4 + 8 * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    char v41 = (char *)a1[5];
    uint64_t v42 = *v22;
    uint64_t v43 = (char **)a4;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = v30;
    do
    {
      if (v23 == v42)
      {
        uint64_t v45 = *--v22;
        uint64_t v42 = v45;
        uint64_t v23 = v45 + 4096;
      }
      if (v44 == *v43)
      {
        uint64_t v46 = (uint64_t)*--v43;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)(v46 + 4096);
      }
      uint64_t v47 = *((void *)v44 - 1);
      v44 -= 8;
      *(void *)(v23 - 8) = v47;
      v23 -= 8;
      --v14;
      ++v41;
    }
    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }
  unint64_t v8 = v20;
  if (v20)
  {
LABEL_55:
    char v89 = (char **)a6;
    unint64_t v48 = (char **)a4;
    uint64_t v49 = (char **)sub_100104F14((uint64_t)&v90, v8);
    long long v51 = v49;
    uint64_t v52 = v50;
    unint64_t v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      int64x2_t v54 = *((int64x2_t *)a1 + 2);
      uint64_t v55 = *v22;
      char v56 = v49;
      long long v57 = v50;
      do
      {
        if (v23 == v55)
        {
          uint64_t v58 = *--v22;
          uint64_t v55 = v58;
          uint64_t v23 = v58 + 4096;
        }
        if (v57 == *v56)
        {
          uint64_t v59 = (uint64_t)*--v56;
          long long v57 = (char *)(v59 + 4096);
        }
        uint64_t v60 = *((void *)v57 - 1);
        v57 -= 8;
        *(void *)(v23 - 8) = v60;
        v23 -= 8;
        int64x2_t v54 = vaddq_s64(v54, (int64x2_t)xmmword_100174680);
      }
      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }
    if (v8 >= v20)
    {
      unint64_t v63 = v90.n128_u64[0];
    }
    else
    {
      BOOL v61 = (char **)sub_100104F14((uint64_t)&v90, v20);
      __n128 v91 = v90;
      sub_10010556C(v51, v52, v61, v62, (uint64_t)&v91);
      unint64_t v53 = v91.n128_u64[1];
      unint64_t v63 = v91.n128_u64[0];
      __n128 v90 = v91;
    }
    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    sub_10010556C(v48, v30, v89, a7, (uint64_t)&v91);
  }
LABEL_90:
  int64_t v84 = a1[1];
  if (a1[2] == v84) {
    uint64_t v85 = 0;
  }
  else {
    uint64_t v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return sub_100104F14((uint64_t)&v91, v20);
}

void sub_100104A48(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  char v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 6) - 1;
  }
  if ((v6 & 0x1FF) != 0) {
    unint64_t v8 = (v6 >> 9) + 1;
  }
  else {
    unint64_t v8 = v6 >> 9;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      uint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_100101A10((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_1001018F8(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_100101A10((uint64_t)a1, __p);
            unint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 511 : 512;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_100101A10((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)sub_10004B588(v12, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      uint64_t v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        long long v66 = operator new(0x1000uLL);
        sub_100101B30(__p, &v66);
        --v13;
      }
      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            __int16 v36 = (char *)sub_10004B588((uint64_t)v70, v35);
            __int16 v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              char v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)char v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            uint64_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            uint64_t v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            uint64_t v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            char v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            uint64_t v68 = &v32[v33];
          }
        }
        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (char *)a1[1];
      if (v44 == v25)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              unint64_t v53 = (char *)sub_10004B588((uint64_t)v70, v52);
              uint64_t v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              uint64_t v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              long long v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              uint64_t v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }
      long long v62 = v69;
      unint64_t v63 = (char *)a1[3];
      unint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      long long v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      uint64_t v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        uint64_t v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_100104EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100104F14(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void sub_100104F78(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)sub_10004B588((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1001018F8(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100101A10((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          char v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_10004B588((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              long long v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __n128 v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_10004B588((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        long long v88 = operator new(0x1000uLL);
        sub_100101B30(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_10004B588((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100101C48((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100105490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100105504(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

double sub_10010556C(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    sub_10010563C(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      unint64_t v9 = *v8++;
      sub_10010563C(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
  }
  sub_10010563C(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10010563C@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  unint64_t v6 = a4;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 sub_1001056FC@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
  }
  else
  {
    unint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
    while (1)
    {
      sub_1001057CC(v12, v14, v15, v16, &v21);
      unint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      unint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_1001057CC(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1001057CC@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    unint64_t v9 = a1;
  }
  else
  {
    unint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      unint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_100105888(uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a3 != a5)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a3;
    unint64_t v14 = a3;
    uint64_t v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        unint64_t v16 = v15[1];
        ++v15;
        uint64_t v12 = v16;
        unint64_t v14 = v16;
      }
      if (v14 == a5) {
        break;
      }
      if (*v13 < *v14) {
        uint64_t v13 = v14;
      }
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    sub_1001059AC((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + *v13;
    }
    sub_1000ED36C((void *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_100105998(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001059AC(uint64_t *result, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    unint64_t v8 = (uint64_t **)result;
    unint64_t v9 = result + 1;
    do
    {
      __n128 result = sub_100105A2C(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        uint64_t v10 = (unint64_t *)a2[1];
        ++a2;
        unint64_t v6 = v10;
      }
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t *sub_100105A2C(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_1001022EC(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_10000CAA0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_100105AB4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B9C00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105B30(_Unwind_Exception *a1)
{
}

uint64_t sub_100105B44(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B9E20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105BC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100105BD4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BA040;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105C50(_Unwind_Exception *a1)
{
}

uint64_t sub_100105C64(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BA260;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105CE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100105CF4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BA480;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105D70(_Unwind_Exception *a1)
{
}

uint64_t sub_100105D84(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BA6A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105E00(_Unwind_Exception *a1)
{
}

uint64_t sub_100105E14(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BAAE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100105E90(_Unwind_Exception *a1)
{
}

void sub_100105EA4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 952);
  unint64_t v8 = (void *)(a1 + 936);
  unint64_t v9 = (uint64_t **)(a1 + 928);
  uint64_t v10 = (unint64_t *)(a1 + 1184);
  uint64_t v34 = (unint64_t *)(a1 + 104);
  unint64_t v35 = (std::condition_variable *)(a1 + 1016);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      unint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          unint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        int64_t v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_1000DEBE8((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    int64_t v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    uint64_t v12 = sub_100101154(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    uint64_t v13 = v12;
    if (v14)
    {
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000DEBE8((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_10001FED8((uint64_t)&__lk);
      sub_100106608(&v37, v38 + 67);
      if (v37 && !*(unsigned char *)(v37 + 520))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_100103564(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            __n128 v22 = sub_100148CC4((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            int64_t v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_100106838((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          int64_t v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            uint64_t v33 = *(atomic_ullong **)(a1 + 608);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 616) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_1000DEBE8((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_1000DEBE8((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      int64_t v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_1000DEBE8((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    uint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      unint64_t v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          unint64_t v28 = v23;
        }
        else {
          unint64_t v28 = v23 + 1;
        }
        if (v27) {
          unint64_t v25 = v23;
        }
        uint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          BOOL v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[67];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 520)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 912)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          uint64_t v23 = (void *)*v8;
          unint64_t v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 912));
  int64_t v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_1000DEBE8((atomic_ullong *)&v41);
}

void sub_100106280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_1001062E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v12 = 0;
  unint64_t v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v7 = *(void *)(a1 + 688);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 680);
    unint64_t v9 = *(unint64_t **)(*(void *)(*(void *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    *(void *)(a1 + 688) = v7 - 1;
    *(void *)(a1 + 680) = v8 + 1;
    sub_100101440(a1 + 648, 1);
    sub_10010651C(a1, v9, a2, v13);
    sub_1000EA868(&v12, (atomic_ullong *)v13);
    sub_1000DEBE8((atomic_ullong *)v13);
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(void *)(a1 + 640))
  {
    sub_100103564(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000;
    void v13[2] = (unint64_t)sub_1001069C0;
    void v13[3] = (unint64_t)&unk_1001BBD50;
    void v13[4] = a1;
    sub_100125F94((dispatch_queue_t *)(a1 + 920), v13);
  }
  *a3 = v9;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v12, 0), (unint64_t *)a3 + 1);
  return sub_1000DEBE8(&v12);
}

void sub_10010644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_1000DEBE8(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_100106480(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 97);
  uint64_t v2 = a1[79];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[95];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 520) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[95] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_1001032E4((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_10010651C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_100106E18((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = (atomic_ullong *)a2[64];
    if (v10) {
      a2[65] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 632))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 632) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_1000DEBE8((atomic_ullong *)&v14);
}

unint64_t *sub_100106608(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[63];
    if (v7) {
      v3[64] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_1001066AC((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_1000DEC14((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_1001066AC(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 520)) {
      sub_10010674C(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_10010674C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000FAA98((uint64_t)&v4, (uint64_t)&v5, 0);
}

unint64_t *sub_100106790(unint64_t *a1, unint64_t *a2, int a3)
{
  unsigned int v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      unsigned int v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unsigned int v8 = (atomic_ullong *)a2[63];
    if (v8) {
      a2[64] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_1001066AC((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_1000DEC14((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_100106838(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 544)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 520) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 544)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 520)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_1001069C0(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_100106480(v1);
  if (v2) {
    sub_100106A18((uint64_t)v1, v2);
  }
  return sub_100103564((uint64_t)v1, 0, 0, 0);
}

void sub_100106A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unsigned int v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  sub_100106A78((void *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_100106A64(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100106A78(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100106B00(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100106B00(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004B588(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1001018F8(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100101A10((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004B588((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10004B588((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100101B30(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100101C48((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100106DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100106E18(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 544));
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_100106EE8(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 512);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 520) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_1000EA868((atomic_ullong *)(a1 + 536), (atomic_ullong *)&v9);
  __n128 result = sub_1000DEBE8((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_1000DEC14((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *sub_100106EE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  __n128 result = sub_1000DEFCC((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 504);
  if (v4) {
    *(void *)(a1 + 512) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void sub_100106F50(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v11 = a1 + 40;
  sub_1000DEFCC((void *)(a1 + 40));
  sub_10010705C(v11, a2, a3, a4, a5, a6);
}

void sub_100106FF8(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  sub_100107030(v1);
  __cxa_rethrow();
}

void sub_10010701C(_Unwind_Exception *a1)
{
}

void sub_100107030(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

void sub_10010705C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v6 = a3[1];
  v7[0] = *a3;
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000E01A0(a1, a2, (uint64_t)v7, *a4, *a5, *a6);
}

void sub_1001070C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001070DC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v9 = a1 + 40;
  sub_1000DEFCC((void *)(a1 + 40));
  sub_1001071AC(v9, a2, a3, a4, a5);
}

void sub_100107174(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  sub_100107030(v1);
  __cxa_rethrow();
}

void sub_100107198(_Unwind_Exception *a1)
{
}

void sub_1001071AC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000E01A0(a1, a2, (uint64_t)v6, *a4, *a5, 0);
}

void sub_100107214(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010722C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BAD00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001072A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001072BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BAF20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100107338(_Unwind_Exception *a1)
{
}

uint64_t sub_10010734C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1001073A0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BB140;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10010741C(_Unwind_Exception *a1)
{
}

uint64_t sub_100107430(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BB360;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001074AC(_Unwind_Exception *a1)
{
}

void *sub_1001074C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100107544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10010792C(a1);
  *(void *)(v8 + 632) = a2;
  *(void *)(v8 + 640) = a3;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(void *)(v8 + 696) = 850045863;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(void *)(v8 + 752) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(void *)(v8 + 800) = 850045863;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(void *)(v8 + 856) = 0;
  *(void *)(v8 + 864) = 1018212795;
  *(void *)(v8 + 904) = 0;
  *(_OWORD *)(v8 + 888) = 0u;
  *(unsigned char *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  sub_100125F80(v8 + 920, "dealloc_queue");
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = a1 + 936;
  *(void *)(a1 + 952) = 850045863;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 1018212795;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1064) = 850045863;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = a1 + 1128;
  *(void *)(a1 + 1136) = a1 + 1128;
  *(void *)(a1 + 1144) = 0;
  sub_100107E68(a1 + 1152, a4);
  sub_100107F00(a1 + 1184, a1);
  *(void *)(a1 + 1736) = off_1001BC030;
  *(void *)(a1 + 1744) = a1;
  *(void *)(a1 + 1760) = a1 + 1736;
  *(void *)(a1 + 1768) = off_1001BC0C0;
  *(void *)(a1 + 1776) = a1;
  *(void *)(a1 + 1792) = a1 + 1768;
  operator new[]();
}

void sub_100107790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_1001074C0(a10);
  sub_100103AFC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  sub_10000953C(v13 + 928, *a11);
  sub_100125ECC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  sub_1000DF840(v14);
  sub_100103B60((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_10010786C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_100106B00(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_10010792C(uint64_t a1)
{
  *(void *)a1 = off_1001BBD80;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001BBE10;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001BBEA0;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_100107C6C(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_100106EE8(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 624) = 1;
  return a1;
}

void sub_1001079EC(_Unwind_Exception *a1)
{
  sub_1001074C0(v3);
  sub_10010387C(v2);
  sub_100103900(v1);
  _Unwind_Resume(a1);
}

void sub_100107A14()
{
}

void *sub_100107A28()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BBD80;
  return result;
}

void sub_100107A60(uint64_t a1, void *a2)
{
  *a2 = off_1001BBD80;
}

uint64_t sub_100107A8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100107ACC()
{
}

void sub_100107ADC()
{
}

void *sub_100107AF0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BBE10;
  return result;
}

void sub_100107B28(uint64_t a1, void *a2)
{
  *a2 = off_1001BBE10;
}

uint64_t sub_100107B54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100107B94()
{
}

void sub_100107BA4()
{
}

void *sub_100107BB8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BBEA0;
  return result;
}

void sub_100107BF0(uint64_t a1, void *a2)
{
  *a2 = off_1001BBEA0;
}

uint64_t sub_100107C18()
{
  return 0;
}

uint64_t sub_100107C20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100107C60()
{
}

uint64_t sub_100107C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  sub_100107D38(a1 + 408, a2);
  sub_100107DD0(a1 + 440, a3);
  sub_100107E68(a1 + 472, a4);
  *(void *)(a1 + 504) = a5;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_100107D04(_Unwind_Exception *a1)
{
  sub_10010387C(v3);
  sub_100103900(v2);
  sub_100103984(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100107D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100107DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100107E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100107F00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001BBF30;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = off_1001BBFB0;
  v4[1] = a1;
  v4[3] = v4;
  sub_100107C6C(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 1152, a2 + 776);
  sub_10010387C(v4);
  sub_100103900(v5);
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_100107FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10010387C((uint64_t *)va);
  sub_100103900((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100107FF0()
{
}

void *sub_100108004(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BBF30;
  result[1] = v3;
  return result;
}

uint64_t sub_10010804C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BBF30;
  a2[1] = v2;
  return result;
}

uint64_t sub_100108078(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1001080DC(**(void **)(a1 + 8) + 1736, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_100108090(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001080D0()
{
}

uint64_t sub_1001080DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_100108140()
{
}

void *sub_100108154(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BBFB0;
  result[1] = v3;
  return result;
}

uint64_t sub_10010819C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BBFB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001081C8(uint64_t a1)
{
  return sub_100108224(**(void **)(a1 + 8) + 1768, *(void *)(a1 + 8));
}

uint64_t sub_1001081D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108218()
{
}

uint64_t sub_100108224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10010827C()
{
}

void *sub_100108290(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC030;
  result[1] = v3;
  return result;
}

uint64_t sub_1001082D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC030;
  a2[1] = v2;
  return result;
}

void sub_100108304(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_100108318(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108358()
{
}

void sub_100108364(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 544)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 1064);
    std::mutex::lock((std::mutex *)(a1 + 1064));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 1128);
    *int v8 = v9;
    v8[1] = a1 + 1128;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 1128) = v8;
    ++*(void *)(a1 + 1144);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 4u);
    unint64_t v10 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100148CC4(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_100108508(a1, a3);
  sub_1000DEBE8((atomic_ullong *)(a2 + 536));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 1u) & 2) == 0) {
    sub_100106A18(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 792)))
    {
      std::mutex::lock((std::mutex *)(a1 + 800));
      if (atomic_load((unint64_t *)(a1 + 792))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 864));
      }
      std::mutex::unlock((std::mutex *)(a1 + 800));
    }
  }
  BOOL v14 = (unint64_t *)(a1 + 768);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100148CC4(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_1001084DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100108508(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  sub_100055664(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_10010855C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100108574()
{
}

void *sub_100108588(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC0C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1001085D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC0C0;
  a2[1] = v2;
  return result;
}

void sub_1001085FC(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_100108608(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108648()
{
}

void sub_100108654(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 632);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 760);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_1001032E4(a1, a2, 1uLL, a3);
        sub_100106A18(a1, a2);
      }
    }
  }
}

void sub_100108704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100108AE0(a1);
  *(void *)(v8 + 456) = a2;
  *(void *)(v8 + 464) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(void *)(v8 + 520) = 850045863;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(void *)(v8 + 576) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 608) = 0u;
  *(void *)(v8 + 624) = 850045863;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(void *)(v8 + 680) = 0;
  *(void *)(v8 + 688) = 1018212795;
  *(void *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 712) = 0u;
  *(unsigned char *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  sub_100125F80(v8 + 744, "dealloc_queue");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 776) = 850045863;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 850045863;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 952) = a1 + 952;
  *(void *)(a1 + 960) = a1 + 952;
  *(void *)(a1 + 968) = 0;
  sub_10010901C(a1 + 976, a4);
  sub_1001090B4(a1 + 1008, a1);
  *(void *)(a1 + 1384) = off_1001BC400;
  *(void *)(a1 + 1392) = a1;
  *(void *)(a1 + 1408) = a1 + 1384;
  *(void *)(a1 + 1416) = off_1001BC490;
  *(void *)(a1 + 1424) = a1;
  *(void *)(a1 + 1440) = a1 + 1416;
  operator new[]();
}

void sub_100108944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_10010302C(a10);
  sub_100103AFC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  sub_10000953C(v13 + 752, *a11);
  sub_100125ECC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  sub_1000DF840(v14);
  sub_1001040FC((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100108A20(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1001015E0(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_100108AE0(uint64_t a1)
{
  *(void *)a1 = off_1001BC150;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001BC1E0;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001BC270;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_100108E20(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1001021EC(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 448) = 1;
  return a1;
}

void sub_100108BA0(_Unwind_Exception *a1)
{
  sub_10010302C(v3);
  sub_100103E84(v2);
  sub_100103F08(v1);
  _Unwind_Resume(a1);
}

void sub_100108BC8()
{
}

void *sub_100108BDC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BC150;
  return result;
}

void sub_100108C14(uint64_t a1, void *a2)
{
  *a2 = off_1001BC150;
}

uint64_t sub_100108C40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108C80()
{
}

void sub_100108C90()
{
}

void *sub_100108CA4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BC1E0;
  return result;
}

void sub_100108CDC(uint64_t a1, void *a2)
{
  *a2 = off_1001BC1E0;
}

uint64_t sub_100108D08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108D48()
{
}

void sub_100108D58()
{
}

void *sub_100108D6C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001BC270;
  return result;
}

void sub_100108DA4(uint64_t a1, void *a2)
{
  *a2 = off_1001BC270;
}

uint64_t sub_100108DCC()
{
  return 0;
}

uint64_t sub_100108DD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100108E14()
{
}

uint64_t sub_100108E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  sub_100108EEC(a1 + 232, a2);
  sub_100108F84(a1 + 264, a3);
  sub_10010901C(a1 + 296, a4);
  *(void *)(a1 + 328) = a5;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  return a1;
}

void sub_100108EB8(_Unwind_Exception *a1)
{
  sub_100103E84(v3);
  sub_100103F08(v2);
  sub_100103F8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100108EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100108F84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10010901C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1001090B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001BC300;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = off_1001BC380;
  v4[1] = a1;
  v4[3] = v4;
  sub_100108E20(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 976, a2 + 600);
  sub_100103E84(v4);
  sub_100103F08(v5);
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_100109184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_100103E84((uint64_t *)va);
  sub_100103F08((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1001091A4()
{
}

void *sub_1001091B8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC300;
  result[1] = v3;
  return result;
}

uint64_t sub_100109200(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC300;
  a2[1] = v2;
  return result;
}

uint64_t sub_10010922C(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_100109290(**(void **)(a1 + 8) + 1384, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_100109244(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100109284()
{
}

uint64_t sub_100109290(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_1001092F4()
{
}

void *sub_100109308(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC380;
  result[1] = v3;
  return result;
}

uint64_t sub_100109350(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC380;
  a2[1] = v2;
  return result;
}

uint64_t sub_10010937C(uint64_t a1)
{
  return sub_1001093D8(**(void **)(a1 + 8) + 1416, *(void *)(a1 + 8));
}

uint64_t sub_10010938C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001093CC()
{
}

uint64_t sub_1001093D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100109430()
{
}

void *sub_100109444(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC400;
  result[1] = v3;
  return result;
}

uint64_t sub_10010948C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC400;
  a2[1] = v2;
  return result;
}

void sub_1001094B8(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_1001094CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10010950C()
{
}

void sub_100109518(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 368)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 888);
    std::mutex::lock((std::mutex *)(a1 + 888));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 952);
    *int v8 = v9;
    v8[1] = a1 + 952;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 952) = v8;
    ++*(void *)(a1 + 968);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 4u);
    unint64_t v10 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100148CC4(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_1001096BC(a1, a3);
  sub_1000DFA40((atomic_ullong *)(a2 + 360));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 1u) & 2) == 0) {
    sub_1001014F8(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 616)))
    {
      std::mutex::lock((std::mutex *)(a1 + 624));
      if (atomic_load((unint64_t *)(a1 + 616))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 688));
      }
      std::mutex::unlock((std::mutex *)(a1 + 624));
    }
  }
  BOOL v14 = (unint64_t *)(a1 + 592);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100148CC4(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_100109690(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001096BC(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  sub_100055664(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_100109710(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100109728()
{
}

void *sub_10010973C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC490;
  result[1] = v3;
  return result;
}

uint64_t sub_100109784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC490;
  a2[1] = v2;
  return result;
}

void sub_1001097B0(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_1001097BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001097FC()
{
}

void sub_100109808(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 456);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 584);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_100101D64(a1, a2, 1uLL, a3);
        sub_1001014F8(a1, a2);
      }
    }
  }
}

void sub_1001098BC()
{
}

void *sub_1001098D0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1001BC520;
  result[1] = v3;
  return result;
}

uint64_t sub_100109918(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BC520;
  a2[1] = v2;
  return result;
}

uint64_t sub_100109944(uint64_t a1, uint64_t a2)
{
  return sub_100109998((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_10010994C(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001BC580)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10010998C()
{
  return &off_1001BC580;
}

uint64_t sub_100109998(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 24);
  v9[0] = off_1001B8318;
  v9[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 16) + 72))(&v10);
  if (*(unsigned char *)(a2 + 113)) {
    sub_1000E2580(v3, (uint64_t)v9, *(void *)(a2 + 8) / *(void *)(v3 + 80), 0, 0, &v8);
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 && !*(unsigned char *)(v8 + 520))
  {
    if (*(unsigned char *)(v8 + 400)) {
      uint64_t v5 = v8 + 40;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1000EA32C(a2, (uint64_t)v9, v5, *(unsigned int *)(v3 + 20));
  sub_1000DEBE8((atomic_ullong *)&v8);
  v9[0] = off_1001B8318;
  if (v11) {
    sub_100004944(v11);
  }
  return v6;
}

void sub_100109AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100109AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100109B80(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100109C04(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *(const void **)v5;
  *(void *)uint64_t v5 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = *(void *)(v5 + 8);
  sub_100109AE8((uint64_t)v6, v5 + 16);
  sub_1000E1DA4(v3, (uint64_t)v6);
  sub_100109B80(v6);
  sub_100109CC8(&v5);
  return 0;
}

void sub_100109CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100109CC8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100109B80((void *)(v1 + 16));
    sub_100109D24((std::__thread_struct **)v1, 0);
    operator delete();
  }
  return result;
}

std::__thread_struct *sub_100109D24(std::__thread_struct **a1, std::__thread_struct *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

_WORD *sub_100109D74(_WORD *result, int a2)
{
  *__n128 result = 0;
  if (a2)
  {
    __int16 v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "total_segments_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_1001A1728;
    *((_WORD *)exception + 16) = v2;
  }
  return result;
}

uint64_t sub_100109E00(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BBA30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100109E7C(_Unwind_Exception *a1)
{
}

uint64_t sub_100109E90(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BB810;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100109F0C(_Unwind_Exception *a1)
{
}

uint64_t sub_100109F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = sub_1000E32F0(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = 0;
    v7[0] = (*(void *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
    if (v7[0]) {
      sub_10010A034((uint64_t)v14, v7);
    }
    sub_1000E3378(a1, v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      uint64_t v6 = 0;
      uint64_t v6 = (*(void *)(*(void *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(v8 + 8) + 20);
      if (v6) {
        sub_10010A034((uint64_t)v14, (unint64_t *)&v6);
      }
      sub_1000E00E8((uint64_t)v7);
    }
    uint64_t result = sub_1000DFFC0((uint64_t)v12);
  }
  return result;
}

uint64_t sub_10010A034(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = sub_100105A2C(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  char v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      long long v5 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      long long v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void sub_10010A0A0(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *((void *)a3 + 1);
  if (v4 != v5)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[2];
    uint64_t v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      unint64_t v13 = v10 + v11 * v12;
      uint64_t v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          uint64_t v4 = v12;
          uint64_t v14 = v12;
        }
        ++v12;
        v13 += v11;
      }
      while (v5 != v12);
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    long long v18 = *(_OWORD *)a2;
    uint64_t v19 = a2[2];
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    sub_10010A1B8((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    unint64_t v15 = v10 + v4 * v11;
    if (v15 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + v15;
    }
    sub_1000ED36C((void *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_10010A1A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10010A1B8(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 != *(void *)(a3 + 8))
  {
    BOOL v6 = (uint64_t **)result;
    uint64_t v7 = result + 1;
    do
    {
      uint64_t v8 = *a2 + a2[2] * v3;
      uint64_t result = sub_100105A2C(v6, v7, (unint64_t *)&v8, &v8);
      uint64_t v3 = a2[1] + 1;
      a2[1] = v3;
    }
    while (v3 != *(void *)(a3 + 8));
  }
  return result;
}

uint64_t ***sub_10010A248(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = *v1;
  if (*(_DWORD *)(*v1 + 44) != 1)
  {
    *(void *)(v2 + 64) = sub_10014B80C();
    *(void *)(v2 + 72) = v3;
    sub_1000EDC6C();
  }
  return result;
}

void sub_10010A368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  sub_10000D758(&a9);
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

AAByteStream *sub_10010A708@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 176))(*a1);
  if (v3 < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    BOOL v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"AEAHelper: Invalid file descriptor.", 0x16u);
  }
  AEAContext v7 = AAFileStreamOpenWithFD(v3, 0);
  sub_100110034(&v8, &v7);
  sub_10011011C(&v7, &v8);
  sub_1001103D4(a2, &v7);
  sub_100110120(&v7);
  return sub_100110038(&v8);
}

void sub_10010A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AEAContext a9, AAByteStream a10)
{
}

void sub_10010A7F4()
{
}

void sub_10010AC20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a33)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
  }
  operator delete[]();
}

void *sub_10010ACE8@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6 = (char *)malloc_type_valloc(0x800uLL, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
  }
  __s = (char *)off_1001BC5A0;
  v24[2] = (char *)&__s;
  __s2 = v6;
  sub_10004A2B0((uint64_t)v26, (uint64_t)&__s);
  sub_10004A330(&__s);
  int v7 = sub_100110408(a1);
  if (v7)
  {
    uint32_t v8 = 0;
    uint64_t v9 = __s2;
    while (1)
    {
      size_t v22 = 0;
      bzero(v9, 0x800uLL);
      if (sub_100110410(a1, v8, 0x800uLL, v9, 0, 0, 0, &v22))
      {
        uint64_t v12 = std::generic_category();
        *(_DWORD *)a3 = 1;
        goto LABEL_13;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t v11 = *(const char **)a2;
        size_t v10 = *(void *)(a2 + 8);
      }
      else
      {
        size_t v10 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v11 = (const char *)a2;
      }
      uint64_t v9 = __s2;
      if (!strncmp(v11, __s2, v10)) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_10;
      }
    }
    if (v22 < 0x100000)
    {
      unint64_t v15 = (char *)malloc_type_valloc(v22 + 1, 0xF8ED6DDuLL);
      if (!v15)
      {
        int64_t v20 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v21 = std::bad_alloc::bad_alloc(v20);
      }
      v27[0] = off_1001BC5A0;
      v27[3] = v27;
      __s = v15;
      sub_10004A2B0((uint64_t)v24, (uint64_t)v27);
      sub_10004A330(v27);
      bzero(__s, v22 + 1);
      if (sub_100110410(a1, v8, 0x800uLL, __s2, 0, v22, (uint8_t *)__s, 0))
      {
        long long v16 = std::generic_category();
        char v17 = 0;
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v16;
      }
      else
      {
        sub_100004890((void *)a3, __s);
        char v17 = 1;
      }
      *(unsigned char *)(a3 + 24) = v17;
      sub_10004A3B4((uint64_t *)&__s, 0);
      sub_10004A330(v24);
      goto LABEL_14;
    }
    uint64_t v12 = std::generic_category();
    uint64_t v13 = 84;
  }
  else
  {
LABEL_10:
    uint64_t v12 = std::generic_category();
    uint64_t v13 = 22;
  }
  *(void *)a3 = v13;
LABEL_13:
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_14:
  sub_10004A3B4((uint64_t *)&__s2, 0);
  return sub_10004A330(v26);
}

void sub_10010AFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10004A3B4((uint64_t *)va, 0);
  sub_10004A330(v3);
  sub_10004A3B4((uint64_t *)va1, 0);
  sub_10004A330(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10010AFF0(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v4 = *(char *)(a1 + 23);
    if (*((unsigned char *)a2 + 24))
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
    else
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
  else if (*((unsigned char *)a2 + 24))
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
  }
  return a1;
}

void sub_10010B0A0(uint64_t a1, void *a2)
{
}

void sub_10010B0DC(_Unwind_Exception *a1)
{
  sub_1001103D8(v1);
  _Unwind_Resume(a1);
}

void sub_10010B0F8()
{
}

void *sub_10010B10C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BC5A0;
  return result;
}

void sub_10010B144(uint64_t a1, void *a2)
{
  *a2 = off_1001BC5A0;
}

void sub_10010B16C(uint64_t a1, void **a2)
{
}

uint64_t sub_10010B174(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001BC600)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10010B1B4()
{
  return &off_1001BC600;
}

void sub_10010B1C0()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void sub_10010B200()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void *sub_10010B240(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(void *)(a2 + 8) >= *(void *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0) {
          long long v5 = "[";
        }
        else {
          long long v5 = "(";
        }
        sub_100004890(&v24, v5);
        if ((v26 & 0x80u) == 0) {
          long long v6 = &v24;
        }
        else {
          long long v6 = v24;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v7 = v26;
        }
        else {
          uint64_t v7 = v25;
        }
        sub_1000039A0(a1, (uint64_t)v6, v7);
        uint64_t v8 = (void *)std::ostream::operator<<();
        sub_1000039A0(v8, (uint64_t)",", 1);
        uint64_t v9 = (void *)std::ostream::operator<<();
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t v10 = "]";
        }
        else {
          uint64_t v10 = ")";
        }
        sub_100004890(&__p, v10);
        if ((v23 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v23 & 0x80u) == 0) {
          uint64_t v12 = v23;
        }
        else {
          uint64_t v12 = v22;
        }
        goto LABEL_45;
      }
    }
    else if (*(void *)a2 < *(void *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a2 + 8);
    if (*(void *)a2 < v13 && *(void *)a2 + 1 < v13) {
      goto LABEL_4;
    }
  }
  if ((v4 & 2) != 0) {
    unint64_t v15 = "[";
  }
  else {
    unint64_t v15 = "(";
  }
  sub_100004890(&v24, v15);
  if ((v26 & 0x80u) == 0) {
    long long v16 = &v24;
  }
  else {
    long long v16 = v24;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v17 = v26;
  }
  else {
    uint64_t v17 = v25;
  }
  uint64_t v9 = sub_1000039A0(a1, (uint64_t)v16, v17);
  if (*(unsigned char *)(a2 + 16)) {
    long long v18 = "]";
  }
  else {
    long long v18 = ")";
  }
  sub_100004890(&__p, v18);
  if ((v23 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v12 = v23;
  }
  else {
    uint64_t v12 = v22;
  }
LABEL_45:
  uint64_t v19 = sub_1000039A0(v9, (uint64_t)p_p, v12);
  if ((char)v23 < 0) {
    operator delete(__p);
  }
  if ((char)v26 < 0) {
    operator delete(v24);
  }
  return v19;
}

void sub_10010B420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010B464(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)a2 + 8))();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

BOOL sub_10010B4D0(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10010B514(*(void *)a1, *(void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

BOOL sub_10010B514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)v2 != *(void *)v3) {
    return 0;
  }
  BOOL result = sub_10000E438((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48)) {
      return *(void *)(a1 + 40) == *(void *)(a2 + 40);
    }
    return 0;
  }
  return result;
}

BOOL sub_10010B590(uint64_t a1, uint64_t a2)
{
  return !sub_10010B514(*(void *)a1, *(void *)a2) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

void *sub_10010B5DC@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = *(void **)a1;
  unint64_t v5 = result[5];
  unint64_t v6 = result[3];
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if (*(unsigned char *)(*(void *)result[1] + 8))
  {
    BOOL result = (void *)sub_1000D8524();
    if (result)
    {
      *(void *)uint64_t v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(void *)&v7[8] = 45;
      *(_DWORD *)&v7[16] = 2;
      sub_10004E098(v8, (long long *)v7);
      sub_1000039A0(v9, (uint64_t)"Disk image is terminated, skipping ...", 38);
      std::ostream::~ostream();
      sub_100050988((uint64_t)v8);
      return (void *)std::ios::~ios();
    }
  }
  else if (v5 < v6 && a1[8] != 3)
  {
    BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (a1[10] & (1 << v8[24])) == 0)
    {
      do
      {
        BOOL result = *(void **)a1;
        if (*(void *)(*(void *)a1 + 40) >= (unint64_t)(*(unsigned char *)(*(void *)a1 + 32) & 1)
                                                + *(void *)(*(void *)a1 + 24))
          break;
        result[5] = (v8[16] & 1) + *(void *)&v8[8];
        BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3) {
          break;
        }
      }
      while ((a1[10] & (1 << v7[24])) == 0);
    }
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }
  return result;
}

void sub_10010B7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = *(void *)(*(void *)v14 + 24);
    *(void *)uint64_t v13 = *(void *)(*(void *)v14 + 40);
    *(void *)(v13 + 8) = v15;
    *(unsigned char *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x10010B790);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10010B7F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (a1[3] & 1) + a1[2];
  *(void *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(unsigned char *)(v2 + 32) & 1) + *(void *)(v2 + 24))
  {
    sub_10010B5DC(a1, (uint64_t)v5);
    *(_OWORD *)(a1 + 1) = v5[0];
    *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v5 + 12);
  }
  return a1;
}

uint64_t *sub_10010B870@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return sub_10010B7F8(a1);
}

void sub_10010B8DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_1001515F4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010B8F8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 40) = v5;
  sub_10010BB30((void *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t sub_10010B988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_1001D3B40;
  *(void *)a2 = qword_1001D3B40;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  sub_100013494(a1, (uint64_t)v12);
  sub_100013530(a1, (uint64_t)v10);
  while (!sub_10010B514(v12[0], v10[0]) || v13 != v11)
  {
    sub_10010B870(v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
  }
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_10010BAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void *)(v15 - 64);
  *(void *)(v15 - 64) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10010BB30(void *a1, uint64_t a2)
{
  sub_10010BBB4(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_10010BBB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10010BC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  if (v6 == (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a3 + 72))(&v21, a3);
    long long v19 = 0u;
    long long v20 = 0u;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a4 + 72))(&v19, a4);
    unint64_t v7 = *((void *)&v20 + 1) / v6 * v6;
    uint64_t v8 = sub_10004CDB8();
    uint64_t v9 = v8;
    if (!v7) {
      unint64_t v7 = (unint64_t)v8[2] / v6 * v6;
    }
    unint64_t v10 = v7;
    if ((void)v21) {
      unint64_t v10 = (v7 + (v6 + (unint64_t)v21 - 1) / v6 * v6 - 1)
    }
          / ((v6 + (unint64_t)v21 - 1)
           / v6
           * v6)
          * (v6 + (unint64_t)v21 - 1)
          / v6
          * v6;
    uint64_t v11 = v22;
    int v12 = *((_DWORD *)v8 + 2);
    if (v12 == 1)
    {
      int v13 = (*v8)();
    }
    else
    {
      if (v12) {
        sub_1000289E8();
      }
      int v13 = *(_DWORD *)v8;
    }
    unint64_t v14 = v11 + v10;
    unsigned int v15 = v13 << (*((_DWORD *)v9 + 8) == 2);
    if (v15 >= ((unint64_t)v9[3] / v14)) {
      unsigned int v15 = (unint64_t)v9[3] / v14;
    }
    if (v15 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = v15;
    }
    sub_10010F1E8((uint64_t)v25, v16);
    sub_10012434C((uint64_t)v24, v14, v16, 0);
    __p[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 136))(a3);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 136))(a4);
    sub_10010C738();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100003404((uint64_t)__p);
  sub_1000039A0(__p, (uint64_t)"Block size mismatch between source (", 36);
  std::ostream::operator<<();
  sub_1000039A0(__p, (uint64_t)") and dest disk image (", 23);
  (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
  std::ostream::operator<<();
  sub_1000039A0(__p, (uint64_t)")", 1);
  sub_10000550C((uint64_t)exception, (uint64_t)__p, 0xFFFFFFED);
}

void sub_10010C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
}

void sub_10010C730()
{
}

void sub_10010C738()
{
}

void *sub_10010C85C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010F394((uint64_t)a1, a2);
  *a1 = off_1001BC680;
  a1[45] = &off_1001BC780;
  a1[46] = &off_1001BC7A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BC680;
  a1[45] = off_1001BC708;
  a1[46] = off_1001BC730;
  return a1;
}

void sub_10010C95C(_Unwind_Exception *a1)
{
  sub_10010D6A8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10010C980(uint64_t a1)
{
  return a1;
}

void sub_10010C9C4(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5 == v4)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      while (*(void *)(a1 + 8) == v4);
    }
    uint64_t v7 = *(void *)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    sub_10010F424(a2, v7);
  }
  sub_10010C738();
}

void sub_10010CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  uint64_t v13 = a9;
  a9 = 0;
  if (v13) {
    sub_1001517C4(v13);
  }
  sub_100151990((uint64_t)&a9, &a10);
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_10010CB24(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = (*(void *)(a1 + 40) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v4;
  if ((v2 & 2) != 0) {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  uint64_t v7 = v6 * v4;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v31 = *(void *)(a1 + 64);
  long long v32 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v5;
  uint64_t v34 = v7;
  uint64_t v35 = v8;
  char v36 = 0;
  unint64_t v10 = *(uint64_t **)(a1 + 88);
  sub_100042770(&v31, v43);
  sub_1000414AC((uint64_t)v44, (uint64_t)&v40);
  sub_1000411FC((uint64_t)v44, (uint64_t)v37);
  uint64_t v11 = sub_100003758(*v10);
  uint64_t v13 = v12;
  if (v39) {
    sub_100004944(v39);
  }
  if (v38) {
    sub_100004944(v38);
  }
  if (v42) {
    sub_100004944(v42);
  }
  if (*((void *)&v40 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v40 + 1));
  }
  sub_1000049B8(v43);
  uint64_t v14 = *(void *)(a1 + 88);
  if (v11 < 0 && v11)
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 96);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = 0;
    atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 104), (unsigned int *)&v18, v11);
    BOOL v19 = v18 == 0;
    if (v19 && v14 != 0) {
      sub_10001494C(*(void **)(v14 + 8));
    }
    if (v17) {
      sub_100004944(v17);
    }
    if (v19)
    {
      *(void *)&long long v40 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)_block_invoke";
      *((void *)&v40 + 1) = 7;
      int v41 = 16;
      sub_10010CF5C(v43, &v40);
      sub_1000039A0(v45, (uint64_t)"Conversion: read error ", 23);
      std::ostream::operator<<();
      sub_10010D080((uint64_t)v43);
    }
  }
  else
  {
    uint64_t v15 = v35;
    uint64_t v25 = v31 + v7 - v13;
    unsigned __int8 v26 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    uint64_t v29 = v15 - (v7 - v13);
    char v30 = 0;
    sub_100042770(&v25, v43);
    sub_1000414AC((uint64_t)v44, (uint64_t)&v40);
    sub_1000411FC((uint64_t)v44, (uint64_t)v37);
    uint64_t v16 = sub_100004AC0(*(void **)(v14 + 8));
    if (v39) {
      sub_100004944(v39);
    }
    if (v38) {
      sub_100004944(v38);
    }
    if (v42) {
      sub_100004944(v42);
    }
    if (*((void *)&v40 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v40 + 1));
    }
    sub_1000049B8(v43);
    if (v26) {
      sub_100004944(v26);
    }
    if (v16 < 0 && v16)
    {
      uint64_t v21 = *(void *)(a1 + 88);
      long long v22 = *(std::__shared_weak_count **)(a1 + 96);
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v23 = 0;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 104), (unsigned int *)&v23, v16);
      BOOL v24 = v23 == 0;
      if (!v23 && v21) {
        sub_10001494C(*(void **)(v21 + 8));
      }
      if (v22) {
        sub_100004944(v22);
      }
      if (v24)
      {
        *(void *)&long long v40 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)_block_invoke";
        *((void *)&v40 + 1) = 7;
        int v41 = 16;
        sub_10010D0C4(v43, &v40);
        sub_1000039A0(v45, (uint64_t)"Conversion: write error ", 24);
        std::ostream::operator<<();
        sub_10010D1E8((uint64_t)v43);
      }
    }
  }
  if (v32) {
    sub_100004944(v32);
  }
}

void sub_10010CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17) {
    sub_100004944(a17);
  }
  _Unwind_Resume(a1);
}

void *sub_10010CF5C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010F6A4((uint64_t)a1, a2);
  *a1 = off_1001BC8A0;
  a1[45] = &off_1001BC9A0;
  a1[46] = &off_1001BC9C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BC8A0;
  a1[45] = off_1001BC928;
  a1[46] = off_1001BC950;
  return a1;
}

void sub_10010D05C(_Unwind_Exception *a1)
{
  sub_10010DE1C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10010D080(uint64_t a1)
{
  return a1;
}

void *sub_10010D0C4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010F734((uint64_t)a1, a2);
  *a1 = off_1001BCAC0;
  a1[45] = &off_1001BCBC0;
  a1[46] = &off_1001BCBE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BCAC0;
  a1[45] = off_1001BCB48;
  a1[46] = off_1001BCB70;
  return a1;
}

void sub_10010D1C4(_Unwind_Exception *a1)
{
  sub_10010E590(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10010D1E8(uint64_t a1)
{
  return a1;
}

void *sub_10010D22C(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[12];
  result[11] = a2[11];
  result[12] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10010D260(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    sub_100004944(v3);
  }
}

void *sub_10010D2B0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010F7C4((uint64_t)a1, a2);
  *a1 = off_1001BCCE0;
  a1[45] = &off_1001BCDE0;
  a1[46] = &off_1001BCE08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BCCE0;
  a1[45] = off_1001BCD68;
  a1[46] = off_1001BCD90;
  return a1;
}

void sub_10010D3B0(_Unwind_Exception *a1)
{
  sub_10010ED04(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10010D3D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010D418(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010D6A8(v1);
  return std::ios::~ios();
}

uint64_t sub_10010D464(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010D6A8(v1);
  return std::ios::~ios();
}

void sub_10010D4C4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10010D6A8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010D52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10010D564(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10010D5CC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010D6A8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10010D630(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010D6A8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010D6A8(uint64_t a1)
{
  *(void *)a1 = off_1001BC818;
  sub_10010D7E4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10010D7E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10010D9A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10010D940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010D96C(uint64_t a1)
{
  sub_10010D6A8(a1);
  operator delete();
}

int *sub_10010D9A4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 81;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 81;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10010DB8C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010DE1C(v1);
  return std::ios::~ios();
}

uint64_t sub_10010DBD8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010DE1C(v1);
  return std::ios::~ios();
}

void sub_10010DC38(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10010DE1C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010DCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10010DCD8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10010DD40(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010DE1C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10010DDA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010DE1C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010DE1C(uint64_t a1)
{
  *(void *)a1 = off_1001BCA38;
  sub_10010DF58(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10010DF58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10010E118((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10010E0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010E0E0(uint64_t a1)
{
  sub_10010DE1C(a1);
  operator delete();
}

int *sub_10010E118(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 114;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 114;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10010E300(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010E590(v1);
  return std::ios::~ios();
}

uint64_t sub_10010E34C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010E590(v1);
  return std::ios::~ios();
}

void sub_10010E3AC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10010E590(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010E414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10010E44C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10010E4B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010E590(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10010E518(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010E590(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010E590(uint64_t a1)
{
  *(void *)a1 = off_1001BCC58;
  sub_10010E6CC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10010E6CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10010E88C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10010E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010E854(uint64_t a1)
{
  sub_10010E590(a1);
  operator delete();
}

int *sub_10010E88C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 123;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 123;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10010EA74(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010ED04(v1);
  return std::ios::~ios();
}

uint64_t sub_10010EAC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010ED04(v1);
  return std::ios::~ios();
}

void sub_10010EB20(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10010ED04(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010EB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10010EBC0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10010EC28(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10010ED04(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10010EC8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10010ED04(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10010ED04(uint64_t a1)
{
  *(void *)a1 = off_1001BCE78;
  sub_10010EE40(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10010EE40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10010F000((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10010EF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010EFC8(uint64_t a1)
{
  sub_10010ED04(a1);
  operator delete();
}

int *sub_10010F000(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 144;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 144;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10010F1E8(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1018212795;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    sub_1000B5340((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_10010F27C(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  char v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10010F2A8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        uint64_t v5 = v4[1];
        v4[1] = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
        uint64_t v6 = *v4;
        uint64_t *v4 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        operator delete();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_10010F394(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BC818;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10010F410(_Unwind_Exception *a1)
{
}

void sub_10010F424(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10010F4A8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_10010F4D4((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_10010F4C0(_Unwind_Exception *a1)
{
}

void sub_10010F4D4(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = (std::mutex *)(*a1 + 32);
  std::mutex::lock(v4);
  long long v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10004B570();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_10004B588(v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 8);
    uint64_t v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *(char **)(v3 + 8);
    }
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *long long v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_10010F5E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10010F600(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10010F638(uint64_t a1)
{
}

uint64_t sub_10010F660(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001BCF38)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t sub_10010F6A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BCA38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10010F720(_Unwind_Exception *a1)
{
}

uint64_t sub_10010F734(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BCC58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10010F7B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10010F7C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BCE78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10010F840(_Unwind_Exception *a1)
{
}

void sub_10010FB18(id a1)
{
  int v1 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v2 = sub_1000D848C();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v6 = 60;
    __int16 v7 = 2080;
    uint64_t v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    char v4 = sub_1000D848C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 60;
      __int16 v7 = 2080;
      uint64_t v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an invalidation handler for the IO daemon connection", buf, 0x12u);
    }
  }
  *__error() = v1;
}

void sub_10010FCA8(id a1)
{
  int v1 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v2 = sub_1000D848C();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v6 = 60;
    __int16 v7 = 2080;
    uint64_t v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    char v4 = sub_1000D848C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 60;
      __int16 v7 = 2080;
      uint64_t v8 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Reached an interruption handler for the IO daemon connection", buf, 0x12u);
    }
  }
  *__error() = v1;
}

void sub_10010FF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010FF4C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t *sub_10010FFE0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v4 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Error opening ByteStream", 0x16u);
  }
  return result;
}

AAByteStream *sub_100110038(AAByteStream *a1)
{
  return a1;
}

ssize_t sub_100110068(AAByteStream *a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*a1, a2, a3, a4);
}

uint64_t *sub_100110070@<X0>(AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return sub_10010FFE0(a6, (uint64_t *)&v8);
}

AEAContext *sub_1001100B4(AEAContext *a1, AAByteStream *a2)
{
  AEAContext v3 = AEAContextCreateWithEncryptedStream(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Context creation failed.", 0x16u);
  }
  return a1;
}

AEAContext *sub_100110120(AEAContext *a1)
{
  return a1;
}

uint64_t sub_100110150(AEAContext *a1, uint8_t *buf, size_t buf_size)
{
  uint64_t result = AEAContextSetFieldBlob(*a1, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Context setup failed.", 0x16u);
  }
  return result;
}

uint64_t sub_1001101B4(AEAContext_impl **a1)
{
  int v1 = *a1;
  size_t buf_size = 0;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0, 0, &buf_size) < 0) {
    return 0;
  }
  size_t v2 = buf_size;
  if (buf_size >= 0x100000) {
    size_t v3 = 0x100000;
  }
  else {
    size_t v3 = buf_size;
  }
  char v4 = (uint8_t *)malloc_type_valloc(v3, 0xF8ED6DDuLL);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
  }
  __dst[0] = off_1001BCF98;
  __dst[3] = __dst;
  buf = v4;
  sub_10004A2B0((uint64_t)v13, (uint64_t)__dst);
  sub_10004A330(__dst);
  long long v5 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0) < 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v2 >= 0x10) {
      size_t v6 = 16;
    }
    else {
      size_t v6 = v2;
    }
    memcpy(__dst, v5, v6);
    uint64_t v7 = __dst[0];
  }
  sub_10004A3B4((uint64_t *)&buf, 0);
  sub_10004A330(v13);
  return v7;
}

void sub_100110344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10004A3B4((uint64_t *)va, 0);
  sub_10004A330(v3);
  _Unwind_Resume(a1);
}

AEAAuthData *sub_10011036C(AEAAuthData *a1, AEAContext *a2)
{
  AEAAuthData v3 = AEAAuthDataCreateWithContext(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    size_t v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Authentication Data creation failed.", 0x16u);
  }
  return a1;
}

AEAAuthData *sub_1001103D8(AEAAuthData *a1)
{
  return a1;
}

uint64_t sub_100110408(AEAAuthData *a1)
{
  return AEAAuthDataGetEntryCount(*a1);
}

uint64_t sub_100110410(AEAAuthData *a1, uint32_t a2, size_t a3, char *a4, size_t *a5, size_t a6, uint8_t *a7, size_t *a8)
{
  return AEAAuthDataGetEntry(*a1, a2, a3, a4, a5, a6, a7, a8);
}

void *sub_100110418(void *result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = v4;
  *a3 = 0;
  result[2] = *a4;
  *a4 = 0;
  return result;
}

uint64_t sub_100110440(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 4u);
}

uint64_t sub_10011044C(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 0xDu);
}

ssize_t sub_100110458(uint64_t a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*(AAByteStream *)(a1 + 16), a2, a3, a4);
}

void sub_100110464()
{
}

void *sub_100110478()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001BCF98;
  return result;
}

void sub_1001104B0(uint64_t a1, void *a2)
{
  *a2 = off_1001BCF98;
}

void sub_1001104D8(uint64_t a1, void **a2)
{
}

uint64_t sub_1001104E0(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001BCFF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100110520()
{
  return &off_1001BCFF8;
}

void sub_10011052C(void *a1, void *a2)
{
  size_t v2 = sub_10004D088(a1, a2);
  void *v2 = off_1001BD018;
  *(_OWORD *)(v2 + 5) = 0u;
  v2[9] = 0;
  *(_OWORD *)(v2 + 7) = 0u;
  AEAAuthData v3 = sub_10004CDB8();
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 1)
  {
    int v5 = (*v3)();
  }
  else
  {
    if (v4) {
      sub_1000289E8();
    }
    int v5 = *(_DWORD *)v3;
  }
  v6[0] = v5 + 1;
  int v7 = 0;
  sub_1001117B0((uint64_t)&v8, v6, &v7);
}

void sub_100110704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  sub_100111784(v13);
  sub_100151AB8((uint64_t)v12);
  sub_10004D0E4(v12);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100110770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  sub_100113BF8(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 312) || v13 && *(unsigned char *)(v13 + 312))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return sub_100111784((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 704) && v14 != (void *)(a1 + 728))
  {
    do
    {
      sub_100114034(a1, a2, &v11);
      uint64_t v15 = v11;
      sub_10011093C((atomic_ullong *)&v13, &v12);
      sub_100111784(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 312)) {
          break;
        }
      }
      int v7 = (unint64_t *)sub_1001141D0((void *)a1);
      if (v7)
      {
        uint64_t v15 = v7;
        sub_10011426C(a1, v7, a2, (unint64_t *)&v11);
        sub_10011093C((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        sub_100111784((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 704));
    std::mutex::lock((std::mutex *)(a1 + 744));
    char v8 = sub_100102254((uint64_t **)(a1 + 720), v14, (unint64_t *)&v16, &v16, (uint64_t *)&v15);
    if (!v9) {
      v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
    std::mutex::unlock((std::mutex *)(a1 + 744));
    sub_10011337C(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return sub_100111784((atomic_ullong *)&v13);
}

void sub_1001108FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100111784((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_10011093C(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    sub_100111784(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void sub_10011097C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_1001109A4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      sub_1001149C0(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_1001109CC(_Unwind_Exception *a1)
{
}

atomic_ullong *sub_1001109E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[3];
  int v7 = *(unint64_t ***)(a1 + 40);
  char v8 = *v7;
  char v9 = v7[1];
  while (v8 != v9)
  {
    sub_100110C70(v8, v6, (unint64_t *)&v23);
    if (v23 && !*(unsigned char *)(v23 + 312))
    {
      sub_1001112E8((unint64_t *)&v21, (unint64_t *)&v23);
      uint64_t v22 = -2;
      *(void *)a3 = 0;
      atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
      *(_DWORD *)(a3 + 8) = v22;
      sub_100111784(&v21);
      return sub_100111784(&v23);
    }
    sub_100111784(&v23);
    ++v8;
  }
  sub_100110770(*(void *)(a1 + 56), v6, 1, (unint64_t *)&v23);
  if (v23 && (unsigned int v10 = atomic_load((unsigned int *)(v23 + 24)), v10 == 2))
  {
    sub_1001112E8((unint64_t *)&v21, (unint64_t *)&v23);
    uint64_t v22 = -2;
    *(void *)a3 = 0;
    atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
    *(_DWORD *)(a3 + 8) = v22;
    sub_100111784(&v21);
  }
  else
  {
    uint64_t v21 = a2[3];
    sub_100110D0C(&v23, a2, &v21);
    uint64_t v11 = *(unint64_t ***)(a1 + 40);
    atomic_ullong v12 = *v11;
    unint64_t v13 = v11[1];
    if (*v11 == v13)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      do
      {
        unint64_t v15 = atomic_load(v12);
        if (!v15) {
          goto LABEL_13;
        }
LABEL_12:
        if (*(void *)(v15 + 32) == -2)
        {
LABEL_13:
          while (1)
          {
            unint64_t v16 = atomic_load((unint64_t *)&v23);
            unint64_t v17 = v15;
            atomic_compare_exchange_strong((atomic_ullong *volatile)v12, &v17, v16);
            if (v17 == v15) {
              break;
            }
            unint64_t v15 = v17;
            if (v17) {
              goto LABEL_12;
            }
          }
          sub_1001112E8((unint64_t *)&v21, (unint64_t *)&v23);
        }
        else
        {
          uint64_t v21 = 0;
          atomic_store(0, (unint64_t *)&v21);
        }
        if (v21) {
          int v18 = *(unsigned __int8 *)(v21 + 312) == 0;
        }
        else {
          int v18 = 0;
        }
        if (v23) {
          int v19 = *(unsigned __int8 *)(v23 + 312) == 0;
        }
        else {
          int v19 = 0;
        }
        sub_100111784(&v21);
        if (v18 == v19) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v12 != v13);
    }
    sub_1001112E8((unint64_t *)a3, (unint64_t *)&v23);
    *(_DWORD *)(a3 + 8) = v14;
  }
  return sub_100111784(&v23);
}

void sub_100110C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100111784((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_100110C70@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_100114358(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 312))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)sub_100111784((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_100110D0C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_100110D34(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      sub_1001149C0(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_100110D5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100110D70(uint64_t a1, uint64_t *a2, int *a3, void **a4)
{
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v4 = *a2 + 40;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 140));
  if (v5)
  {
    uint64_t v7 = *(unsigned char *)(*a2 + 192) ? *a2 + 40 : 0;
    size_t v8 = atomic_load((unsigned int *)(v7 + 144));
    *a3 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      char v9 = *a4;
      if (*(unsigned char *)(*a2 + 192)) {
        uint64_t v10 = *a2 + 40;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(const void **)v10;
      atomic_ullong v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v9, v11, *a3);
        sub_100004944(v12);
      }
      else
      {
        memcpy(v9, v11, v8);
      }
      uint64_t v13 = *a2;
      if (*a2)
      {
        if (*(unsigned char *)(v13 + 192)) {
          v13 += 40;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(v13 + 136), 0xFFFFFFFF);
    }
  }
  return v5 & 1;
}

void sub_100110E4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v3 + 192)) {
      v3 += 40;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v4 = (std::mutex *)(v3 + 72);
  std::mutex::lock((std::mutex *)(v3 + 72));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v5 = *a2 + 40;
  }
  else {
    uint64_t v5 = 0;
  }
  if (atomic_load((unsigned int *)(v5 + 136)))
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      if (*(unsigned char *)(v7 + 192)) {
        v7 += 40;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 24));
  }
  std::mutex::unlock(v4);
}

uint64_t sub_100110EE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v6 + 192)) {
      v6 += 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v7 = (std::mutex *)(v6 + 72);
  std::mutex::lock((std::mutex *)(v6 + 72));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), a3);
  uint64_t v9 = v8;
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v10 = *a2 + 40;
  }
  else {
    uint64_t v10 = 0;
  }
  atomic_store(v8, (unsigned int *)(v10 + 144));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v11 = *a2 + 40;
  }
  else {
    uint64_t v11 = 0;
  }
  atomic_store(1u, (unsigned __int8 *)(v11 + 140));
  std::mutex::unlock(v7);
  return v9;
}

void sub_100110FB0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_100110FC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2;
  unsigned int v23 = 0;
  uint64_t v4 = sub_1001109E4(a1, a2, (uint64_t)&v21);
  unint64_t v5 = v22;
  if (v22 != -2)
  {
    uint64_t v11 = sub_100110EE4(a1, &v21, (uint64_t)v2);
    unsigned int v23 = v11;
    sub_100110E4C(v11, &v21);
    if (v5 < (uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 3)
    {
      __lk.__m_ = 0;
      unint64_t v12 = atomic_load((unint64_t *)(a1 + 72));
      atomic_store(v12, (unint64_t *)&__lk);
      atomic_store(atomic_exchange((atomic_ullong *volatile)&__lk, 0), (unint64_t *)(**(void **)(a1 + 40) + 8 * v5));
    }
    if (v21 && *(void *)(v21 + 256)) {
      sub_1001149C0(v21 + 232, v21);
    }
    goto LABEL_35;
  }
  uint64_t v6 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v6 = v21 + 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v6 + 136), 1u);
  if (sub_100110D70((uint64_t)v4, &v21, (int *)&v23, (void **)&v2->__vftable)) {
    goto LABEL_35;
  }
  uint64_t v7 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v7 = v21 + 40;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v7 + 72);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v7 + 72));
  int v9 = sub_100110D70(v8, &v21, (int *)&v23, (void **)&v2->__vftable);
  char v10 = v9;
  if (v9)
  {
    uint64_t v2 = (std::__shared_weak_count *)v23;
  }
  else
  {
    uint64_t v13 = v21;
    if (v21)
    {
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v13 = v21 + 40;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    std::condition_variable::wait((std::condition_variable *)(v13 + 24), &__lk);
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v14 = v21 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    size_t v15 = atomic_load((unsigned int *)(v14 + 144));
    unsigned int v23 = v15;
    if ((int)v15 >= 1)
    {
      unint64_t v16 = v2->__vftable;
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v17 = v21 + 40;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(const void **)v17;
      uint64_t v2 = *(std::__shared_weak_count **)(v17 + 8);
      if (v2)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v16, v18, v15);
        sub_100004944(v2);
      }
      else
      {
        memcpy(v16, v18, v15);
      }
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if ((v10 & 1) == 0) {
LABEL_35:
  }
    uint64_t v2 = (std::__shared_weak_count *)v23;
  sub_100111784(&v21);
  return v2;
}

void sub_1001111BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100111784((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

double sub_1001111DC@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_100114A14(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_100111224(void *a1)
{
  sub_1001116F0(a1);
  operator delete();
}

void *sub_10011125C(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"readSynchronizer", 16);
}

void *sub_100111270(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10009C748(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1001112CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1001112E8(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[37];
    if (v7) {
      v3[38] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!sub_10011138C((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        sub_100111470((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_10011138C(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 312)) {
      sub_10011142C(a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL sub_10011142C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return sub_1000FAA98((uint64_t)&v4, (uint64_t)&v5, 0);
}

uint64_t sub_100111470(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (!*(unsigned char *)(a1 + 312)
    && (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 == 2)
    && *(unsigned char *)(a1 + 192)
    && (uint64_t v7 = *(void *)(a1 + 288)) != 0)
  {
    int v8 = (a3 >> 1) & 2;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
    {
      if ((v3 & 2) == 0)
      {
        if (v3) {
          sub_100111650(a1 + 200, a1, a2, v8 | 1);
        }
        return 0;
      }
      *(void *)&long long v10 = "ref::details::ctrl_blk<CurrentReader, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = CurrentReader, tag_t = unsigned long long]";
      *((void *)&v10 + 1) = 68;
      int v11 = 16;
      sub_1000DEE04(v12, &v10);
      sub_1000039A0(v13, (uint64_t)"Got error when trying to close ", 31);
      std::ostream::operator<<();
      sub_1000039A0(v13, (uint64_t)" with ret ", 10);
      std::ostream::operator<<();
      sub_1000039A0(v13, (uint64_t)", Force closing.", 16);
      std::ostream::~ostream();
      sub_1000DF0CC((uint64_t)v12);
      std::ios::~ios();
    }
  }
  else
  {
    int v8 = (a3 >> 1) & 2;
  }
  atomic_store(0, (unsigned int *)(a1 + 24));
  if (*(unsigned char *)(a1 + 192))
  {
    sub_1001116B0(a1 + 40);
    *(unsigned char *)(a1 + 192) = 0;
  }
  sub_100111650(a1 + 200, a1, a2, v8);
  std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  return 1;
}

void sub_100111638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000DEF28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100111650(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

uint64_t sub_1001116B0(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void *sub_1001116F0(void *a1)
{
  *a1 = off_1001BD018;
  sub_100111784(a1 + 9);
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_100004944(v2);
  }
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_100004944(v3);
  }
  *a1 = off_1001A4E78;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

atomic_ullong *sub_100111784(atomic_ullong *a1)
{
  double result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)sub_100111470((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

void sub_1001117B0(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v5 = operator new(0x580uLL);
  sub_100111814(v5, a2, a3);
}

void sub_100111800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100111814(void *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001BD0F8;
  sub_1001118F0((uint64_t)(a1 + 3), a2, a3);
}

void sub_10011185C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100111870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001BD0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100111890(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001BD0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void *sub_1001118E4(uint64_t a1)
{
  return sub_100113854(a1 + 24);
}

void sub_1001118F0(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = 0;
  sub_100111978(a1, v3, v4, (uint64_t)v5);
}

void sub_100111964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001137D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100111978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100111D8C(a1);
  *(void *)(v8 + 424) = a2;
  *(void *)(v8 + 432) = a3;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(void *)(v8 + 488) = 850045863;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 528) = 0u;
  *(void *)(v8 + 544) = 0;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(void *)(v8 + 592) = 850045863;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  *(void *)(v8 + 648) = 0;
  *(void *)(v8 + 656) = 1018212795;
  *(void *)(v8 + 696) = 0;
  *(_OWORD *)(v8 + 680) = 0u;
  *(unsigned char *)(v8 + 704) = 1;
  *(_OWORD *)(v8 + 664) = 0u;
  sub_100125F80(v8 + 712, "dealloc_queue");
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = a1 + 728;
  *(void *)(a1 + 744) = 850045863;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 808) = 1018212795;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 856) = 850045863;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 920) = a1 + 920;
  *(void *)(a1 + 928) = a1 + 920;
  *(void *)(a1 + 936) = 0;
  sub_10011249C(a1 + 944, a4);
  sub_100112534(a1 + 976, a1);
  *(void *)(a1 + 1320) = off_1001BD3F8;
  *(void *)(a1 + 1328) = a1;
  *(void *)(a1 + 1344) = a1 + 1320;
  *(void *)(a1 + 1352) = off_1001BD488;
  *(void *)(a1 + 1360) = a1;
  *(void *)(a1 + 1376) = a1 + 1352;
  operator new[]();
}

void sub_100111BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  sub_1001137D0(a10);
  sub_100103AFC(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 808));
  std::mutex::~mutex((std::mutex *)(v13 + 744));
  sub_10000953C(v13 + 720, *a11);
  sub_100125ECC(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 488));
  sub_1000DF840(v14);
  sub_100113758((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100111C94(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_100112C8C(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  unint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t sub_100111D54(uint64_t a1)
{
  return a1;
}

uint64_t sub_100111D8C(uint64_t a1)
{
  *(void *)a1 = off_1001BD148;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = off_1001BD1D8;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = off_1001BD268;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = sub_100112144(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_100111E70(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 416) = 1;
  return a1;
}

void sub_100111E4C(_Unwind_Exception *a1)
{
  sub_1001137D0(v3);
  sub_100112394(v2);
  sub_100112418(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100111E70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  *(void *)(result + 32) = a2;
  *(unsigned char *)(result + 312) = 0;
  atomic_store(1uLL, (unint64_t *)result);
  atomic_store(0, (unint64_t *)(result + 8));
  atomic_store(0, (unint64_t *)(result + 16));
  if (*(unsigned char *)(result + 192))
  {
    double result = sub_1001116B0(result + 40);
    *(unsigned char *)(v2 + 192) = 0;
  }
  uint64_t v3 = *(atomic_ullong **)(v2 + 296);
  if (v3) {
    *(void *)(v2 + 304) = atomic_fetch_add_explicit(v3, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(v2 + 24));
  __dmb(0xBu);
  return result;
}

void sub_100111EEC()
{
}

void *sub_100111F00()
{
  double result = operator new(0x10uLL);
  *double result = off_1001BD148;
  return result;
}

void sub_100111F38(uint64_t a1, void *a2)
{
  *a2 = off_1001BD148;
}

uint64_t sub_100111F64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100111FA4()
{
}

void sub_100111FB4()
{
}

void *sub_100111FC8()
{
  double result = operator new(0x10uLL);
  *double result = off_1001BD1D8;
  return result;
}

void sub_100112000(uint64_t a1, void *a2)
{
  *a2 = off_1001BD1D8;
}

uint64_t sub_10011202C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10011206C()
{
}

void sub_10011207C()
{
}

void *sub_100112090()
{
  double result = operator new(0x10uLL);
  *double result = off_1001BD268;
  return result;
}

void sub_1001120C8(uint64_t a1, void *a2)
{
  *a2 = off_1001BD268;
}

uint64_t sub_1001120F0()
{
  return 0;
}

uint64_t sub_1001120F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100112138()
{
}

uint64_t sub_100112144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  sub_100112218(a1 + 200, a2);
  sub_1001122B0(a1 + 232, a3);
  sub_10011249C(a1 + 264, a4);
  *(void *)(a1 + 296) = a5;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  return a1;
}

void sub_1001121DC(_Unwind_Exception *a1)
{
  sub_100112394(v4);
  sub_100112418(v3);
  if (*(unsigned char *)(v1 + 192)) {
    sub_1001116B0(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100112218(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1001122B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100112348(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {
    sub_1001116B0(a1 + 40);
  }
  return a1;
}

void *sub_100112394(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100112418(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10011249C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100112534(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v5[0] = off_1001BD2F8;
  v5[1] = a1;
  double v5[3] = v5;
  v4[0] = off_1001BD378;
  v4[1] = a1;
  v4[3] = v4;
  sub_100112144(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 944, a2 + 568);
  sub_100112394(v4);
  sub_100112418(v5);
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_100112604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_100112394((uint64_t *)va);
  sub_100112418((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100112624()
{
}

void *sub_100112638(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001BD2F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100112680(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BD2F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001126AC(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_100112710(**(void **)(a1 + 8) + 1320, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1001126C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100112704()
{
}

uint64_t sub_100112710(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void sub_100112774()
{
}

void *sub_100112788(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001BD378;
  result[1] = v3;
  return result;
}

uint64_t sub_1001127D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BD378;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001127FC(uint64_t a1)
{
  return sub_100112858(**(void **)(a1 + 8) + 1352, *(void *)(a1 + 8));
}

uint64_t sub_10011280C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10011284C()
{
}

uint64_t sub_100112858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1001128B0()
{
}

void *sub_1001128C4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001BD3F8;
  result[1] = v3;
  return result;
}

uint64_t sub_10011290C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BD3F8;
  a2[1] = v2;
  return result;
}

void sub_100112938(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_10011294C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10011298C()
{
}

void sub_100112998(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 336)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (char *)(a1 + 856);
    std::mutex::lock((std::mutex *)(a1 + 856));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 920);
    *int v8 = v9;
    v8[1] = a1 + 920;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 920) = v8;
    ++*(void *)(a1 + 936);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 4u);
    unint64_t v10 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v10);
    uint64_t v11 = sub_100148CC4(a2);
    std::condition_variable::notify_all((std::condition_variable *)v11);
    std::mutex::unlock((std::mutex *)v10);
LABEL_14:
    std::mutex::unlock((std::mutex *)v7);
    return;
  }
  sub_100112B3C(a1, a3);
  sub_100111784((atomic_ullong *)(a2 + 328));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 1u) & 2) == 0) {
    sub_100112BA4(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 584)))
    {
      std::mutex::lock((std::mutex *)(a1 + 592));
      if (atomic_load((unint64_t *)(a1 + 584))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 656));
      }
      std::mutex::unlock((std::mutex *)(a1 + 592));
    }
  }
  uint64_t v14 = (unint64_t *)(a1 + 560);
  if (atomic_load(v14))
  {
    uint64_t v7 = sub_100148BF8(a2);
    std::mutex::lock((std::mutex *)v7);
    if (atomic_load(v14))
    {
      uint64_t v17 = sub_100148CC4(a2);
      std::condition_variable::notify_all((std::condition_variable *)v17);
    }
    goto LABEL_14;
  }
}

void sub_100112B10(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100112B3C(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 744);
  std::mutex::lock((std::mutex *)(a1 + 744));
  sub_100055664(a1 + 720, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
  std::mutex::unlock(v3);
}

void sub_100112B90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100112BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  sub_100112C04((void *)(a1 + 440), &v4);
  std::mutex::unlock(v3);
}

void sub_100112BF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100112C04(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100112C8C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100112C8C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004B588(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1001018F8(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100101A10((uint64_t)a1, &v54);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_10004B588((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10004B588((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100101B30(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100101C48((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100112F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100112FA8()
{
}

void *sub_100112FBC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1001BD488;
  result[1] = v3;
  return result;
}

uint64_t sub_100113004(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001BD488;
  a2[1] = v2;
  return result;
}

void sub_100113030(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t sub_10011303C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10011307C()
{
}

void sub_100113088(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 552);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        sub_100113138(a1, a2, 1uLL, a3);
        sub_100112BA4(a1, a2);
      }
    }
  }
}

uint64_t sub_100113138(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 2u);
  sub_100111784((atomic_ullong *)(a2 + 328));
  if (a4) {
    sub_100111784(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 336));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 336)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 488));
          uint64_t v12 = *(void *)(a1 + 480);
          std::mutex::unlock((std::mutex *)(a1 + 488));
          if (v12) {
            break;
          }
        }
        if (sub_10011337C(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v18 = sub_100148CC4(a2);
          v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v26 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v19.__d_.__rep_ + 200000;
          unint64_t v23 = a2;
          char v24 = v10;
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v29;
          *(_DWORD *)&v25[3] = *(_DWORD *)&v29[3];
          sub_1001134DC((std::condition_variable *)v18, &__lk, &v27, (uint64_t)&v23);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v13 = sub_100148CC4(a2);
          char v14 = atomic_load((unsigned int *)(a2 + 336));
          if ((v14 & 4) == 0)
          {
            uint64_t v15 = (std::condition_variable *)v13;
            do
            {
              if (*(_DWORD *)(a2 + 336)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 488));
                uint64_t v16 = *(void *)(a1 + 480);
                std::mutex::unlock((std::mutex *)(a1 + 488));
                if (v16) {
                  break;
                }
              }
              std::condition_variable::wait(v15, &__lk);
              char v17 = atomic_load((unsigned int *)(a2 + 336));
            }
            while ((v17 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v20 = *(_DWORD *)(a2 + 336);
        if (!v9 || (v20 & 1) != 0)
        {
          if (v20) {
            break;
          }
        }
        else if (*(void *)(a1 + 480))
        {
          break;
        }
        char v21 = atomic_load((unsigned int *)(a2 + 336));
      }
      while ((v21 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 336), 0xFFFFFFFD) & 1;
}

void sub_100113354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011337C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 936)) {
    return 0;
  }
  char v17 = (std::mutex *)(a1 + 856);
  std::mutex::lock((std::mutex *)(a1 + 856));
  if (*(void *)(a1 + 936))
  {
    char v8 = *(uint64_t **)(a1 + 928);
    if (v8 == (uint64_t *)(a1 + 920))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_100111470(v12 + 8, v8[3], v10) | a2) == 1)
        {
          uint64_t v13 = sub_100148BF8(v12);
          std::mutex::lock((std::mutex *)v13);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 336), 0xFFFFFFFB);
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v14 = *v8;
          uint64_t v15 = (uint64_t *)v8[1];
          *(void *)(v14 + 8) = v15;
          *(void *)v8[1] = v14;
          --*(void *)(a1 + 936);
          operator delete(v8);
          char v8 = v15;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 920));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v17);
  return v11;
}

void sub_1001134C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_1001134DC(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 336));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 336)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 488);
      std::mutex::lock((std::mutex *)(v8 + 488));
      uint64_t v11 = *(void *)(v8 + 480);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 336));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 336)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 488));
  BOOL v17 = *(void *)(v15 + 480) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 488));
  return v17;
}

void *sub_100113650(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001136D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100113758(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 13);
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    sub_100111470((uint64_t)(a1 + 13), v3, 1u);
  }
  sub_100112348(v2);
  sub_1001137D0(a1 + 8);
  sub_100112394(a1 + 4);
  return sub_100112418(a1);
}

void *sub_1001137D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100113854(uint64_t a1)
{
  *(unsigned char *)(a1 + 704) = 0;
  if (*(void *)(a1 + 424))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v3), 0);
      if (v4)
      {
        sub_100113138(a1, v4, v1 & 0xFFFFFFFFFF000000 | 0x10001, 0);
        sub_100111784((atomic_ullong *)(v4 + 328));
        sub_100112348(v4 + 8);
        operator delete();
      }
      ++v3;
    }
    while (*(void *)(a1 + 424) > v3);
  }
  sub_100126040((dispatch_queue_t *)(a1 + 712), &stru_1001BD528);
  if (*(void *)(a1 + 552)) {
    operator delete[]();
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v5 = *(void *)(a1 + 448);
  if (*(void *)(a1 + 456) != v5)
  {
    unint64_t v6 = *(void *)(a1 + 472);
    uint64_t v7 = (void *)(v5 + 8 * (v6 >> 9));
    uint64_t v8 = (uint64_t *)(*v7 + 8 * (v6 & 0x1FF));
    while (v8 != (uint64_t *)(*(void *)(v5 + (((*(void *)(a1 + 480) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)(a1 + 480) + v6) & 0x1FF)))
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        sub_100111784((atomic_ullong *)(v9 + 328));
        sub_100112348(v9 + 8);
        operator delete();
      }
      if ((uint64_t *)((char *)++v8 - *v7) == (uint64_t *)4096)
      {
        unsigned int v10 = (uint64_t *)v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  sub_100113650((void *)(a1 + 1352));
  sub_1001136D4((void *)(a1 + 1320));
  sub_100111784((atomic_ullong *)(a1 + 1304));
  sub_100112348(a1 + 984);
  sub_1001137D0((void *)(a1 + 944));
  sub_100103AFC((void *)(a1 + 920));
  std::mutex::~mutex((std::mutex *)(a1 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 808));
  std::mutex::~mutex((std::mutex *)(a1 + 744));
  sub_10000953C(a1 + 720, *(void **)(a1 + 728));
  sub_100125ECC((NSObject **)(a1 + 712));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 592));
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_1000DF840((void *)(a1 + 440));
  return sub_100113758((void *)a1);
}

void sub_100113A84(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100113AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100113B9C((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100113B18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100113B50(uint64_t a1)
{
}

uint64_t sub_100113B58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100113B9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_100113BF8(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v40 = a2;
  uint64_t v7 = (std::mutex *)(a1 + 744);
  uint64_t v8 = (void *)(a1 + 728);
  uint64_t v9 = (uint64_t **)(a1 + 720);
  uint64_t v10 = (unint64_t *)(a1 + 976);
  uint64_t v34 = (unint64_t *)(a1 + 104);
  uint64_t v35 = (std::condition_variable *)(a1 + 808);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v40;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v40;
      char v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v40;
        if (v17 >= v40) {
          std::chrono::system_clock::time_point v19 = v15;
        }
        else {
          std::chrono::system_clock::time_point v19 = v15 + 1;
        }
        if (v18) {
          char v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || v40 < v16[4] || (unint64_t *)v16[5] == v10)
      {
LABEL_18:
        int v41 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
        sub_100111784((atomic_ullong *)&v41);
        goto LABEL_19;
      }
    }
    int v41 = (unint64_t *)v11;
    uint64_t v42 = v10;
    std::chrono::system_clock::time_point v12 = sub_100101154(v9, (unint64_t *)&v41, (uint64_t *)&v41);
    uint64_t v13 = v12;
    if (v14)
    {
      int v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_100111784((atomic_ullong *)&v41);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v38 = (unint64_t *)v12[5];
    if (v38 != v10)
    {
      sub_10001FED8((uint64_t)&__lk);
      sub_1001112E8(&v37, v38 + 41);
      if (v37 && !*(unsigned char *)(v37 + 312))
      {
        uint64_t v21 = v40;
        if (*(void *)(v37 + 32) == v40)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v37, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v37 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (sub_10011337C(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
            v36.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_100148BF8((unint64_t)v38);
            v36.__owns_ = 1;
            std::mutex::lock(v36.__m_);
            unint64_t v22 = sub_100148CC4((unint64_t)v38);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v44 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            int v41 = (unint64_t *)&v38;
            uint64_t v42 = &v37;
            uint64_t v43 = &v40;
            sub_100114400((std::condition_variable *)v22, &v36, &v44, (uint64_t)&v41);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
            if (v36.__owns_) {
              std::mutex::unlock(v36.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          int v41 = 0;
          unint64_t v31 = atomic_load(v34);
          if (v31)
          {
            unint64_t v32 = v31;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v34, &v32, v31 + 1);
              if (v32 == v31) {
                break;
              }
              unint64_t v31 = v32;
              if (!v32) {
                goto LABEL_65;
              }
            }
            unint64_t v33 = *(atomic_ullong **)(a1 + 400);
            unint64_t v32 = (unint64_t)v34;
            if (v33)
            {
              *(void *)(a1 + 408) = atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
              unint64_t v32 = (unint64_t)v34;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
LABEL_65:
          atomic_store(v32, (unint64_t *)&v41);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
          sub_100111784((atomic_ullong *)&v41);
LABEL_66:
          int v20 = 1;
LABEL_67:
          sub_100111784((atomic_ullong *)&v37);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = v40;
        goto LABEL_30;
      }
      int v41 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
      sub_100111784((atomic_ullong *)&v41);
      goto LABEL_66;
    }
    unint64_t v23 = (void *)*v8;
    if (*v8)
    {
      unint64_t v24 = v40;
      unint64_t v25 = v8;
      while (1)
      {
        unint64_t v26 = v23[4];
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          uint64_t v28 = v23;
        }
        else {
          uint64_t v28 = v23 + 1;
        }
        if (v27) {
          unint64_t v25 = v23;
        }
        unint64_t v23 = (void *)*v28;
        if (!*v28)
        {
          if (v25 == v8) {
            break;
          }
          if (v24 < v25[4]) {
            break;
          }
          uint64_t v29 = (unint64_t *)v25[5];
          if (v29 != v10)
          {
            unint64_t v30 = v29[41];
            if (v30)
            {
              if (!*(unsigned char *)(v30 + 312)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 704)) {
            break;
          }
          std::condition_variable::wait(v35, &__lk);
          unint64_t v23 = (void *)*v8;
          unint64_t v25 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 704));
  int v41 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v41, 0), a4);
  sub_100111784((atomic_ullong *)&v41);
}

void sub_100113FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100114034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  unint64_t v6 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 448) + ((*(void *)(a1 + 472) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 472) & 0x1FFLL));
    ++*(void *)(a1 + 472);
    *(void *)(a1 + 480) = v7 - 1;
    sub_100101440(a1 + 440, 1);
    sub_10011426C(a1, v8, a2, v12);
    sub_10011093C(&v11, (atomic_ullong *)v12);
    sub_100111784((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 576));
  if (v9 + v7 >= *(void *)(a1 + 432))
  {
    sub_10011337C(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = (unint64_t)_NSConcreteStackBlock;
    v12[1] = 0x40000000;
    void v12[2] = (unint64_t)sub_100114588;
    void v12[3] = (unint64_t)&unk_1001BD5C0;
    void v12[4] = a1;
    sub_100125F94((dispatch_queue_t *)(a1 + 712), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return sub_100111784(&v11);
}

void sub_10011419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  sub_100111784(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1001141D0(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 71);
  uint64_t v2 = a1[53];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[69];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 312) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[69] + 8 * v4), &v8, 0);
  if (v8 != v5 || (sub_100113138((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0) {
    return 0;
  }
  return v5;
}

atomic_ullong *sub_10011426C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  sub_1001145E0((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = (atomic_ullong *)a2[38];
    if (v10) {
      a2[39] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 424))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 424) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return sub_100111784((atomic_ullong *)&v14);
}

unint64_t *sub_100114358(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[37];
    if (v8) {
      a2[38] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !sub_10011138C((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        sub_100111470((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL sub_100114400(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 336)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 312) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 336)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 312)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t sub_100114588(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_1001141D0(v1);
  if (v2) {
    sub_100112BA4((uint64_t)v1, v2);
  }
  return sub_10011337C((uint64_t)v1, 0, 0, 0);
}

atomic_ullong *sub_1001145E0(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 336));
  uint64_t v3 = (unint64_t *)(a1 + 8);
  sub_100111E70(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = *(atomic_ullong **)(a1 + 304);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 312) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  sub_10011093C((atomic_ullong *)(a1 + 328), (atomic_ullong *)&v9);
  double result = sub_100111784((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)sub_100111470((uint64_t)v3, v8, 1u);
  }
  return result;
}

void sub_1001146B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  sub_10011473C(a1 + 40, a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_10011479C(a1);
}

void sub_100114704(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  sub_10011479C(v1);
  __cxa_rethrow();
}

void sub_100114728(_Unwind_Exception *a1)
{
}

uint64_t sub_10011473C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    sub_1001116B0(a1);
    *(unsigned char *)(a1 + 152) = 0;
  }
  sub_1001147C8(a1, a2, a3);
  *(unsigned char *)(a1 + 152) = 1;
  return a1;
}

void sub_10011479C(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 8))) {
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
  }
}

uint64_t sub_1001147C8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *a3;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    sub_100004944(v4);
  }
  return a1;
}

void sub_100114848(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  sub_1001148D4(a1 + 40, a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_10011479C(a1);
}

void sub_10011489C(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  sub_10011479C(v1);
  __cxa_rethrow();
}

void sub_1001148C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001148D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 152))
  {
    sub_1001116B0(a1);
    *(unsigned char *)(a1 + 152) = 0;
  }
  sub_100114934(a1, a2, a3);
  *(unsigned char *)(a1 + 152) = 1;
  return a1;
}

uint64_t sub_100114934(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    sub_100004944(v4);
  }
  return a1;
}

uint64_t sub_1001149C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100114A14(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x68uLL);
  sub_100114A90(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100114A7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100114A90(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B62F0;
  sub_100114AEC(a1 + 3, a2, a3);
  return a1;
}

void sub_100114AD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_100114AEC(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_10004D088(a1, a3);
  *uint64_t v5 = off_1001BD018;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001112E8(a1 + 9, a2 + 9);
  return a1;
}

void sub_100114B74(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[8];
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[6];
  if (v4) {
    sub_100004944(v4);
  }
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100114BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)a1 = 2037149547;
  LODWORD(v29) = 2037149547;
  sub_100019EB0((uint64_t)"header_signature", 2037149547, &v29, 1);
  *(_DWORD *)(a1 + 4) = 4;
  LODWORD(v29) = 4;
  sub_100019EB0((uint64_t)"version_t", 4, &v29, 1);
  *(_DWORD *)(a1 + 8) = 512;
  LODWORD(v29) = 512;
  sub_100019EB0((uint64_t)"header_size_t", 512, &v29, 1);
  sub_100120E0C((_DWORD *)(a1 + 12), 1);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v29 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_num_t", 0, &v29, 2);
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v29 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_count_t", 0, &v29, 2);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = *(void *)a4;
  long long v14 = *(_OWORD *)(a4 + 72);
  long long v15 = *(_OWORD *)(a4 + 88);
  long long v16 = *(_OWORD *)(a4 + 104);
  long long v17 = *(_OWORD *)(a4 + 120);
  long long v18 = *(_OWORD *)(a4 + 8);
  long long v19 = *(_OWORD *)(a4 + 24);
  long long v20 = *(_OWORD *)(a4 + 40);
  long long v21 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 104) = v19;
  *(_OWORD *)(a1 + 88) = v18;
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(void *)(a1 + 216) = a5;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = *(void *)a6;
  long long v22 = *(_OWORD *)(a6 + 8);
  long long v23 = *(_OWORD *)(a6 + 24);
  long long v24 = *(_OWORD *)(a6 + 40);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a6 + 56);
  *(_OWORD *)(a1 + 392) = v24;
  *(_OWORD *)(a1 + 376) = v23;
  *(_OWORD *)(a1 + 360) = v22;
  long long v25 = *(_OWORD *)(a6 + 72);
  long long v26 = *(_OWORD *)(a6 + 88);
  long long v27 = *(_OWORD *)(a6 + 104);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a6 + 120);
  *(_OWORD *)(a1 + 456) = v27;
  *(_OWORD *)(a1 + 440) = v26;
  *(_OWORD *)(a1 + 424) = v25;
  *(_DWORD *)(a1 + 488) = 2;
  uint64_t v29 = &_mh_execute_header;
  int v30 = 2;
  sub_100019EB0((uint64_t)"image_variant_type", 2, &v29, 3);
  *(void *)(a1 + 492) = a7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v29 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_num_t", 1, &v29, 2);
  *(_DWORD *)(a1 + 56) = 1;
  uint64_t v29 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_count_t", 1, &v29, 2);
  *(_DWORD *)(a1 + 60) = 1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  return a1;
}

uLong sub_100114E68(unsigned int *a1)
{
  uLong result = *a1;
  if (result)
  {
    if (result != 2)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Unknown checksum found", 0x16u);
    }
    return crc32(0, 0, 0) << 32;
  }
  return result;
}

uint64_t sub_100114EDC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v37 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_num_t", 0, &v37, 2);
  *(_DWORD *)(a1 + 60) = 0;
  unint64_t v37 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_count_t", 0, &v37, 2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_100019E14((_DWORD *)(a1 + 80));
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_100019E14((_DWORD *)(a1 + 352));
  *(_DWORD *)(a1 + 356) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100019EB0((uint64_t)"image_variant_type", 0, &v37, 3);
  *(void *)(a1 + 492) = 0;
  int v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  sub_100019EB0((uint64_t)"header_signature", v6, &v37, 1);
  *(_DWORD *)a1 = 2037149547;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v37) = 4;
  sub_100019EB0((uint64_t)"version_t", v7, &v37, 1);
  *(_DWORD *)(a1 + 4) = 4;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v37) = 512;
  sub_100019EB0((uint64_t)"header_size_t", v8, &v37, 1);
  *(_DWORD *)(a1 + 8) = 512;
  sub_100120E0C(&v37, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v37;
  void *v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *uint64_t v5 = bswap64(*(void *)(a2 + 32));
  *(void *)(a1 + 40) = bswap64(*(void *)(a2 + 40));
  *(void *)(a1 + 48) = bswap64(*(void *)(a2 + 48));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 56));
  unint64_t v37 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_num_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 56) = v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 60));
  unint64_t v37 = &_mh_execute_header;
  sub_100019EB0((uint64_t)"segment_count_t", (int)v5, &v37, 2);
  *(_DWORD *)(a1 + 60) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_100019E14(v36);
  long long v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v36[112] = v9;
  *(void *)&v36[128] = *(void *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&unsigned char v36[32] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v36[48] = v10;
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v36[80] = v11;
  long long v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)std::unique_lock<std::mutex> v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v36[16] = v12;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_100116C64((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 152) = v32;
  *(_OWORD *)(a1 + 168) = v33;
  *(_OWORD *)(a1 + 184) = v34;
  *(_OWORD *)(a1 + 200) = v35;
  *(_OWORD *)(a1 + 88) = v28;
  *(_OWORD *)(a1 + 104) = v29;
  *(_OWORD *)(a1 + 120) = v30;
  *(_OWORD *)(a1 + 136) = v31;
  *(void *)(a1 + 216) = bswap64(*(void *)(a2 + 216));
  *(void *)(a1 + 224) = bswap64(*(void *)(a2 + 224));
  long long v13 = *(_OWORD *)(a2 + 232);
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(void *)(a1 + 296) = bswap64(*(void *)(a2 + 296));
  *(void *)(a1 + 304) = bswap64(*(void *)(a2 + 304));
  long long v16 = *(_OWORD *)(a2 + 312);
  long long v17 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 328) = v17;
  sub_100019E14(v36);
  long long v18 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 448);
  *(_OWORD *)&v36[112] = v18;
  *(void *)&v36[128] = *(void *)(a2 + 480);
  long long v19 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)&unsigned char v36[32] = *(_OWORD *)(a2 + 384);
  *(_OWORD *)&v36[48] = v19;
  long long v20 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 416);
  *(_OWORD *)&v36[80] = v20;
  long long v21 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)std::unique_lock<std::mutex> v36 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)&v36[16] = v21;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_100116C64((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 352) = v27;
  long long v22 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v22;
  long long v23 = v35;
  *(_OWORD *)(a1 + 456) = v34;
  *(_OWORD *)(a1 + 472) = v23;
  long long v24 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v24;
  long long v25 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 408) = v25;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 488));
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v38) = 2;
  sub_100019EB0((uint64_t)"image_variant_type", (int)v5, &v37, 3);
  *(_DWORD *)(a1 + 488) = v5;
  *(void *)(a1 + 492) = bswap64(*(void *)(a2 + 492));
  return a1;
}

void sub_1001153CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001153E0(uint64_t a1, uint64_t a2)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v12 = "*udif::header::write(char *)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    sub_100115598(v14, &v12);
    sub_100115700(v15, a1);
    std::ostream::~ostream();
    sub_10011CA4C((uint64_t)v14);
    std::ios::~ios();
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(void *)(a2 + 32) = bswap64(*(void *)(a1 + 32));
  *(void *)(a2 + 40) = bswap64(*(void *)(a1 + 40));
  *(void *)(a2 + 48) = bswap64(*(void *)(a1 + 48));
  *(_DWORD *)(a2 + 56) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 60) = bswap32(*(_DWORD *)(a1 + 60));
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  uint64_t v4 = sub_100116EB4(a1 + 80, a2 + 80);
  *(void *)uint64_t v4 = bswap64(*(void *)(a1 + 216));
  *(void *)(v4 + 8) = bswap64(*(void *)(a1 + 224));
  long long v5 = *(_OWORD *)(a1 + 232);
  long long v6 = *(_OWORD *)(a1 + 248);
  long long v7 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 80) = bswap64(*(void *)(a1 + 296));
  *(void *)(v4 + 88) = bswap64(*(void *)(a1 + 304));
  long long v9 = *(_OWORD *)(a1 + 312);
  long long v8 = *(_OWORD *)(a1 + 328);
  *(void *)(v4 + 128) = *(void *)(a1 + 344);
  *(_OWORD *)(v4 + 96) = v9;
  *(_OWORD *)(v4 + 112) = v8;
  uint64_t v10 = sub_100116EB4(a1 + 352, v4 + 136);
  *(_DWORD *)uint64_t v10 = bswap32(*(_DWORD *)(a1 + 488));
  *(void *)(v10 + 4) = bswap64(*(void *)(a1 + 492));
  return v10 + 12;
}

void sub_100115584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001156BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100115598(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100120EFC((uint64_t)a1, a2);
  *a1 = off_1001BD658;
  a1[45] = &off_1001BD758;
  a1[46] = &off_1001BD780;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BD658;
  a1[45] = off_1001BD6E0;
  a1[46] = off_1001BD708;
  return a1;
}

void sub_100115698(_Unwind_Exception *a1)
{
  sub_10011CA4C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001156BC(uint64_t a1)
{
  return a1;
}

void *sub_100115700(void *a1, uint64_t a2)
{
  sub_1000039A0(a1, (uint64_t)"header (", 8);
  uint64_t v4 = (void *)std::ostream::operator<<();
  long long v5 = sub_1000039A0(v4, (uint64_t)"):", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  long long v6 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  int v7 = *(_DWORD *)(a2 + 12);
  int v112 = *(_DWORD *)(a2 + 60);
  int v113 = *(_DWORD *)(a2 + 56);
  uint64_t v110 = *(void *)(a2 + 72);
  uint64_t v111 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 168);
  long long v134 = *(_OWORD *)(a2 + 152);
  long long v135 = v9;
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v136 = *(_OWORD *)(a2 + 184);
  long long v137 = v10;
  long long v11 = *(_OWORD *)(a2 + 104);
  long long v130 = *(_OWORD *)(a2 + 88);
  long long v131 = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v132 = *(_OWORD *)(a2 + 120);
  long long v133 = v12;
  long long v13 = *(_OWORD *)(a2 + 248);
  long long v126 = *(_OWORD *)(a2 + 232);
  long long v127 = v13;
  long long v14 = *(_OWORD *)(a2 + 280);
  long long v128 = *(_OWORD *)(a2 + 264);
  long long v129 = v14;
  long long v15 = *(_OWORD *)(a2 + 328);
  long long v123 = *(_OWORD *)(a2 + 312);
  long long v124 = v15;
  uint64_t v125 = *(void *)(a2 + 344);
  uint64_t v16 = *(void *)(a2 + 352);
  long long v17 = *(_OWORD *)(a2 + 440);
  long long v119 = *(_OWORD *)(a2 + 424);
  long long v120 = v17;
  long long v18 = *(_OWORD *)(a2 + 472);
  long long v121 = *(_OWORD *)(a2 + 456);
  long long v122 = v18;
  long long v19 = *(_OWORD *)(a2 + 376);
  long long v115 = *(_OWORD *)(a2 + 360);
  long long v116 = v19;
  long long v20 = *(_OWORD *)(a2 + 408);
  long long v117 = *(_OWORD *)(a2 + 392);
  long long v118 = v20;
  int v109 = *(_DWORD *)(a2 + 488);
  long long v21 = sub_1000039A0(a1, (uint64_t)"signature", 9);
  long long v22 = sub_1000039A0(v21, (uint64_t)": ", 2);
  v138[23] = 4;
  strcpy(v138, "koly");
  long long v23 = sub_1000039A0(v22, (uint64_t)v138, 4);
  if ((v138[23] & 0x80000000) != 0) {
    operator delete(*(void **)v138);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = sub_1000039A0(a1, (uint64_t)"version", 7);
  sub_1000039A0(v25, (uint64_t)": ", 2);
  long long v26 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v27 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v28 = sub_1000039A0(a1, (uint64_t)"header_size", 11);
  sub_1000039A0(v28, (uint64_t)": ", 2);
  long long v29 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  long long v30 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v31 = sub_1000039A0(a1, (uint64_t)"flags", 5);
  long long v32 = sub_1000039A0(v31, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v7;
  long long v33 = sub_100120F8C(v32, (int *)&v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v35 = sub_1000039A0(a1, (uint64_t)"run_data_fork_offset", 20);
  std::unique_lock<std::mutex> v36 = sub_1000039A0(v35, (uint64_t)": ", 2);
  uint64_t v37 = *v36;
  long long v38 = (char *)v36 + *(void *)(*v36 - 24);
  int v39 = *((_DWORD *)v38 + 2);
  *((_DWORD *)v38 + 2) = v39 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v36 + *(void *)(v37 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_10000ED30(v36, v138);
  std::ostream::operator<<();
  uint64_t v40 = *v36;
  *(_DWORD *)((char *)v36 + *(void *)(*v36 - 24) + 8) = v39;
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(v40 - 24)));
  long long v41 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v42 = sub_1000039A0(a1, (uint64_t)"data_fork_offset", 16);
  long long v43 = sub_1000039A0(v42, (uint64_t)": ", 2);
  uint64_t v44 = *v43;
  long long v45 = (char *)v43 + *(void *)(*v43 - 24);
  LODWORD(v36) = *((_DWORD *)v45 + 2);
  *((_DWORD *)v45 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v43 + *(void *)(v44 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_10000ED30(v43, v138);
  std::ostream::operator<<();
  uint64_t v46 = *v43;
  *(_DWORD *)((char *)v43 + *(void *)(*v43 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v46 - 24)));
  uint64_t v47 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v48 = sub_1000039A0(a1, (uint64_t)"data_fork_len", 13);
  sub_1000039A0(v48, (uint64_t)": ", 2);
  uint64_t v49 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
  uint64_t v50 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v51 = sub_1000039A0(a1, (uint64_t)"rsrc_fork_offset", 16);
  uint64_t v52 = sub_1000039A0(v51, (uint64_t)": ", 2);
  uint64_t v53 = *v52;
  long long v54 = (char *)v52 + *(void *)(*v52 - 24);
  LODWORD(v36) = *((_DWORD *)v54 + 2);
  *((_DWORD *)v54 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v52 + *(void *)(v53 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_10000ED30(v52, v138);
  std::ostream::operator<<();
  uint64_t v55 = *v52;
  *(_DWORD *)((char *)v52 + *(void *)(*v52 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v55 - 24)));
  uint64_t v56 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v57 = sub_1000039A0(a1, (uint64_t)"rsrc_fork_len", 13);
  sub_1000039A0(v57, (uint64_t)": ", 2);
  uint64_t v58 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
  uint64_t v59 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v60 = sub_1000039A0(a1, (uint64_t)"segment_num", 11);
  long long v61 = sub_1000039A0(v60, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v113;
  long long v62 = sub_10012105C(v61, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
  unint64_t v63 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v64 = sub_1000039A0(a1, (uint64_t)"segment_count", 13);
  uint64_t v65 = sub_1000039A0(v64, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v112;
  long long v66 = sub_1001210A0(v65, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
  char v67 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v111;
  *(void *)&v138[8] = v110;
  uint64_t v68 = sub_1000039A0(a1, (uint64_t)"segment_id", 10);
  uint64_t v69 = sub_1000039A0(v68, (uint64_t)": ", 2);
  sub_1001210E4(v69, (uint64_t)v138, 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v8;
  long long v139 = v134;
  long long v140 = v135;
  long long v141 = v136;
  long long v142 = v137;
  *(_OWORD *)&v138[8] = v130;
  *(_OWORD *)&v138[24] = v131;
  *(_OWORD *)&v138[40] = v132;
  *(_OWORD *)&v138[56] = v133;
  uint64_t v71 = sub_1000039A0(a1, (uint64_t)"data_fork_checksum", 18);
  uint64_t v72 = sub_1000039A0(v71, (uint64_t)": ", 2);
  sub_100118094(v72, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
  uint64_t v73 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v74 = sub_1000039A0(a1, (uint64_t)"xml_offset", 10);
  uint64_t v75 = sub_1000039A0(v74, (uint64_t)": ", 2);
  uint64_t v76 = *v75;
  uint64_t v77 = (char *)v75 + *(void *)(*v75 - 24);
  LODWORD(v36) = *((_DWORD *)v77 + 2);
  *((_DWORD *)v77 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v75 + *(void *)(v76 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_10000ED30(v75, v138);
  std::ostream::operator<<();
  uint64_t v78 = *v75;
  *(_DWORD *)((char *)v75 + *(void *)(*v75 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(v78 - 24)));
  long long v79 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v80 = sub_1000039A0(a1, (uint64_t)"xml_length", 10);
  sub_1000039A0(v80, (uint64_t)": ", 2);
  uint64_t v81 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  long long v82 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v126;
  *(_OWORD *)&v138[16] = v127;
  *(_OWORD *)&v138[32] = v128;
  *(_OWORD *)&v138[48] = v129;
  uint64_t v83 = sub_1000039A0(a1, (uint64_t)"external", 8);
  uint64_t v84 = sub_1000039A0(v83, (uint64_t)": ", 2);
  sub_1001210E4(v84, (uint64_t)v138, 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
  uint64_t v85 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v86 = sub_1000039A0(a1, (uint64_t)"code_sign_offset", 16);
  long long v87 = sub_1000039A0(v86, (uint64_t)": ", 2);
  uint64_t v88 = *v87;
  char v89 = (char *)v87 + *(void *)(*v87 - 24);
  LODWORD(v36) = *((_DWORD *)v89 + 2);
  *((_DWORD *)v89 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v87 + *(void *)(v88 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  sub_10000ED30(v87, v138);
  std::ostream::operator<<();
  uint64_t v90 = *v87;
  *(_DWORD *)((char *)v87 + *(void *)(*v87 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(v90 - 24)));
  __n128 v91 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  __n128 v92 = sub_1000039A0(a1, (uint64_t)"code_sign_length", 16);
  sub_1000039A0(v92, (uint64_t)": ", 2);
  uint64_t v93 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  uint64_t v94 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v123;
  *(_OWORD *)&v138[16] = v124;
  *(void *)&v138[32] = v125;
  long long v95 = sub_1000039A0(a1, (uint64_t)"reserved", 8);
  unint64_t v96 = sub_1000039A0(v95, (uint64_t)": ", 2);
  sub_1001210E4(v96, (uint64_t)v138, 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
  char v97 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v16;
  long long v139 = v119;
  long long v140 = v120;
  long long v141 = v121;
  long long v142 = v122;
  *(_OWORD *)&v138[8] = v115;
  *(_OWORD *)&v138[24] = v116;
  *(_OWORD *)&v138[40] = v117;
  *(_OWORD *)&v138[56] = v118;
  long long v98 = sub_1000039A0(a1, (uint64_t)"master_checksum", 15);
  long long v99 = sub_1000039A0(v98, (uint64_t)": ", 2);
  sub_100118094(v99, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24)));
  uint64_t v100 = std::locale::use_facet(&v114, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  long long v101 = sub_1000039A0(a1, (uint64_t)"image_variant", 13);
  long long v102 = sub_1000039A0(v101, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v109;
  long long v103 = sub_100121278(v102, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
  char v104 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v105 = sub_1000039A0(a1, (uint64_t)"sector_count", 12);
  sub_1000039A0(v105, (uint64_t)": ", 2);
  long long v106 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(*v106 - 24)));
  long long v107 = std::locale::use_facet((const std::locale *)v138, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_100116BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (*(char *)(v18 - 233) < 0) {
    operator delete(*(void **)(v18 - 256));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100116C64@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  sub_10002C70C(&v8, bswap32(*(_DWORD *)a1));
  *a2 = v8;
  a2[1] = 0;
  unsigned int v7 = bswap32(*(_DWORD *)(a1 + 4));
  sub_10002C7A4(a2 + 1, &v7);
  int v5 = *a2;
  if (*a2) {
    BOOL v6 = v5 == 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 18) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      __n128 result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }
  return result;
}

BOOL sub_100116D2C(_DWORD *a1, uint64_t a2)
{
  sub_100116D94((uint64_t)v4, a2);
  return sub_100060840(a1, v4);
}

uint64_t sub_100116D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    sub_1000289E8();
  }
  BOOL v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_1001BD860[v2])(&v7, &v6, a2 + 4);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

unsigned int *sub_100116E6C@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    __n128 result = sub_10011D0E8(&v4, v3);
    unsigned int v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100116EB4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  uint64_t v2 = (_OWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    BOOL v4 = v3 == 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = 0;
  }
  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
    uint64_t v2 = (_OWORD *)(a2 + 12);
    uint64_t v5 = 4;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = v8;
    _OWORD *v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    long long v9 = *(_OWORD *)(a1 + 72);
    long long v10 = *(_OWORD *)(a1 + 88);
    long long v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 88) = v10;
    uint64_t v5 = 128;
  }
  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t sub_100116F70(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)__n128 result = *a2;
  *(_OWORD *)(result + 4) = 0u;
  *(_OWORD *)(result + 20) = 0u;
  *(_DWORD *)(result + 36) = 0;
  if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
    uint64_t v6 = *(void *)a3 - a4;
  }
  else {
    uint64_t v6 = *(void *)a3 - a4 + 1;
  }
  *(void *)(result + 8) = v6;
  *(void *)(result + 16) = *(void *)(a3 + 8)
                           - *(void *)a3
                           + (*(unsigned char *)(a3 + 16) & 1)
                           + ((*(unsigned __int8 *)(a3 + 16) >> 1) & 1)
                           - 1;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a6;
  return result;
}

int *sub_100116FD0(int *a1)
{
  __n128 result = sub_10002236C(a1, 2);
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  return result;
}

BOOL sub_100116FF0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_10011702C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(result + 8) + v3;
  unint64_t v5 = v4 + *(void *)(result + 16);
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(void *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v7 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Invalid UDIF, run is not within block boundary", 0x16u);
  }
  return result;
}

void sub_1001170B8()
{
}

void sub_1001171A0()
{
  *uint64_t v0 = 0;
  operator delete[]();
}

void sub_1001171C8(uint64_t a1, void *a2)
{
  values = a2;
  keys = @"resource-fork";
  sub_100122D0C((const void **)&keys, (const void **)&values, 1, (CFMutableDictionaryRef *)&propertyList);
  if (sub_1000D8524())
  {
    int v3 = *__error();
    if (sub_1000D850C())
    {
      v16[0] = 0;
      unint64_t v4 = sub_1000D848C();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 41;
      *(_WORD *)long long v19 = 2080;
      *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v19[10] = 2114;
      *(void *)&v19[12] = propertyList;
      unint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      if (v5)
      {
        uint64_t v6 = (char *)v5;
        fprintf(__stderrp, "%s\n", v5);
        free(v6);
      }
    }
    else
    {
      long long v7 = sub_1000D848C();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 41;
        *(_WORD *)long long v19 = 2080;
        *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v19[10] = 2114;
        *(void *)&v19[12] = propertyList;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v3;
  }
  sub_100122DF4(propertyList, v16);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 216);
  uint64_t v9 = *(void *)(a1 + 56);
  CFDataRef v10 = v16[1];
  BytePtr = CFDataGetBytePtr(v16[0]);
  uint64_t v12 = *((void *)sub_10014B860() + 1);
  *(void *)buf = BytePtr;
  *(void *)long long v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&void v19[8] = v10;
  *(void *)&v19[16] = v8;
  CFDataRef v20 = v10;
  char v21 = 0;
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v9 + 96))(v9, buf);
  if (*(void *)v19) {
    sub_100004944(*(std::__shared_weak_count **)v19);
  }
  if ((v13 & 0x80000000) == 0)
  {
    *(void *)(*(void *)(a1 + 72) + 224) = v10;
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  void *exception = &off_1001C3DE8;
  long long v15 = std::generic_category();
  exception[1] = v13;
  exception[2] = v15;
  *((unsigned char *)exception + 24) = 0;
  *((unsigned char *)exception + 48) = 0;
  exception[7] = "Can't write UDIF resource part";
}

void sub_1001175E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10000D758((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_100117674(void *a1, _DWORD *a2)
{
  if ((*a2 & 0x80000000) != 0)
  {
    unint64_t v4 = sub_1000039A0(a1, (uint64_t)"special: ", 9);
    if (*a2 == -1) {
      unint64_t v5 = "ddm";
    }
    else {
      unint64_t v5 = "entire_device";
    }
    if (*a2 == -1) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = 13;
    }
    return sub_1000039A0(v4, (uint64_t)v5, v6);
  }
  else
  {
    sub_1000039A0(a1, (uint64_t)"partition_num: ", 15);
    return (void *)std::ostream::operator<<();
  }
}

void *sub_100117714(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_1000039A0(a1, (uint64_t)"Blocks header", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  int v6 = *(_DWORD *)(a2 + 36);
  long long v58 = *(_OWORD *)(a2 + 40);
  uint64_t v59 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 152);
  long long v54 = *(_OWORD *)(a2 + 136);
  long long v55 = v8;
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v56 = *(_OWORD *)(a2 + 168);
  long long v57 = v9;
  long long v10 = *(_OWORD *)(a2 + 88);
  long long v50 = *(_OWORD *)(a2 + 72);
  long long v51 = v10;
  long long v11 = *(_OWORD *)(a2 + 120);
  long long v52 = *(_OWORD *)(a2 + 104);
  long long v53 = v11;
  uint64_t v12 = sub_1000039A0(a1, (uint64_t)"signature", 9);
  unsigned int v13 = sub_1000039A0(v12, (uint64_t)": ", 2);
  v60[23] = 4;
  strcpy(v60, "mish");
  long long v14 = sub_1000039A0(v13, (uint64_t)v60, 4);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  long long v15 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v16 = sub_1000039A0(a1, (uint64_t)"version", 7);
  sub_1000039A0(v16, (uint64_t)": ", 2);
  long long v17 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v19 = sub_1000039A0(a1, (uint64_t)"first_sector_number", 19);
  sub_1000039A0(v19, (uint64_t)": ", 2);
  CFDataRef v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  char v21 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v22 = sub_1000039A0(a1, (uint64_t)"sector_count", 12);
  sub_1000039A0(v22, (uint64_t)": ", 2);
  long long v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = sub_1000039A0(a1, (uint64_t)"data_start", 10);
  long long v26 = sub_1000039A0(v25, (uint64_t)": ", 2);
  uint64_t v27 = *v26;
  long long v28 = (char *)v26 + *(void *)(*v26 - 24);
  int v29 = *((_DWORD *)v28 + 2);
  *((_DWORD *)v28 + 2) = v29 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) |= 0x200u;
  v60[0] = 48;
  sub_10000ED30(v26, v60);
  std::ostream::operator<<();
  uint64_t v30 = *v26;
  *(_DWORD *)((char *)v26 + *(void *)(*v26 - 24) + 8) = v29;
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v30 - 24)));
  long long v31 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v32 = sub_1000039A0(a1, (uint64_t)"decompression_buffer_req", 24);
  sub_1000039A0(v32, (uint64_t)": ", 2);
  long long v33 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  LODWORD(v49.__locale_) = v6;
  long long v35 = sub_1000039A0(a1, (uint64_t)"descriptor", 10);
  std::unique_lock<std::mutex> v36 = sub_1000039A0(v35, (uint64_t)": ", 2);
  uint64_t v37 = sub_100117674(v36, &v49);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  long long v38 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v60 = v58;
  *(void *)&v60[16] = v59;
  int v39 = sub_1000039A0(a1, (uint64_t)"reserved", 8);
  uint64_t v40 = sub_1000039A0(v39, (uint64_t)": ", 2);
  sub_1001210E4(v40, (uint64_t)v60, 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
  long long v41 = std::locale::use_facet(&v49, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v60 = v7;
  long long v64 = v54;
  long long v65 = v55;
  long long v66 = v56;
  long long v67 = v57;
  *(_OWORD *)&v60[8] = v50;
  long long v61 = v51;
  long long v62 = v52;
  long long v63 = v53;
  long long v42 = sub_1000039A0(a1, (uint64_t)"checksum", 8);
  long long v43 = sub_1000039A0(v42, (uint64_t)": ", 2);
  sub_100118094(v43, (int *)v60);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  uint64_t v44 = std::locale::use_facet(&v49, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  long long v45 = sub_1000039A0(a1, (uint64_t)"run_count", 9);
  sub_1000039A0(v45, (uint64_t)": ", 2);
  uint64_t v46 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
  uint64_t v47 = std::locale::use_facet((const std::locale *)v60, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_100118030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100118094(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  unint64_t v5 = sub_1000039A0(a1, (uint64_t)"type: ", 6);
  int v16 = *a2;
  int v6 = sub_10003E210(v5, &v16);
  uint64_t v7 = sub_1000039A0(v6, (uint64_t)" ", 1);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  long long v8 = sub_10000ED30(v7, &v15);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
  int v10 = *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8);
  sub_1000039A0(v8, (uint64_t)"len: ", 5);
  long long v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = sub_1000039A0(v11, (uint64_t)" data: ", 7);
  *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v13 = a2[1];
  if (v13) {
    sub_1001210E4(v8, (uint64_t)(a2 + 2), v13);
  }
  else {
    sub_1000039A0(v8, (uint64_t)"(empty)", 7);
  }
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = v10;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

uint64_t sub_10011826C(void *a1)
{
  sub_1000039A0(a1, (uint64_t)"plst: count = ", 14);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_1000039A0(v1, (uint64_t)" max =", 6);
  return std::ostream::operator<<();
}

void *sub_1001182C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D4830))
  {
    sub_10002236C(v1, -2147483643);
    v1[1] = 0;
    sub_10002236C(v2, -2147483641);
    v2[1] = 1;
    sub_10002236C(v3, -2147483640);
    v3[1] = 2;
    sub_10002236C(v4, -2147483642);
    v4[1] = 4;
    sub_1001212BC((uint64_t)&unk_1001D4818, (unsigned int *)v1, 4);
    __cxa_atexit((void (*)(void *))sub_100118414, &unk_1001D4818, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D4830);
  }
  return &unk_1001D4818;
}

void sub_1001183EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100118414(uint64_t a1)
{
  return a1;
}

void *sub_100118440@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_1001182C8();
  uint64_t v4 = qword_1001D4820;
  if (!qword_1001D4820) {
    goto LABEL_12;
  }
  unsigned int v5 = *a1;
  int v6 = &qword_1001D4820;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      int v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_1001D4820 && v5 >= *((_DWORD *)v6 + 7))
  {
    __n128 result = sub_1001182C8();
    *(_DWORD *)a2 = *((_DWORD *)v6 + 8);
    char v11 = 1;
  }
  else
  {
LABEL_12:
    __n128 result = sub_1001182C8();
    char v11 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 4) = v11;
  return result;
}

uint64_t **sub_1001184D8(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  if (HIBYTE(*a3) == 128)
  {
    uint64_t v9 = result;
    int v14 = *a3;
    ((void (*)(_DWORD **__return_ptr))(*result)[2])(v13);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003404((uint64_t)v13);
      sub_1000039A0(v13, (uint64_t)"Unsupported compressed run (", 28);
      int v15 = *a3;
      sub_100040480(v13, &v15);
      sub_1000039A0(v13, (uint64_t)")", 1);
      sub_10000550C((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }
    v13[0] = a3;
    int v10 = sub_10012156C(a2, a3, (uint64_t)&unk_1001705CC, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      int v10 = sub_10012156C(a2, a3, (uint64_t)&unk_1001705CC, v13)[5];
    }
    if (v10 > a4) {
      a4 = v10;
    }
    v13[0] = a3;
    __n128 result = sub_10012156C(a2, a3, (uint64_t)&unk_1001705CC, v13);
    result[5] = a4;
    *((unsigned char *)v9 + 88) = 1;
    char v11 = v9[12];
    if (v11 <= a5) {
      char v11 = a5;
    }
    v9[12] = v11;
  }
  return result;
}

void sub_10011867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001186B0(uint64_t a1, void *a2)
{
  sub_10002236C(&v11, 1);
  sub_10011875C(a1, &v11, 0);
  int v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  unsigned int v5 = v6;
  if (v6 != v4)
  {
    do
    {
      int v10 = *((_DWORD *)v5 + 8);
      sub_10011875C(a1, &v10, v5[5]);
      unsigned int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unsigned int v5 = v8;
        }
        while (!v9);
      }
      unsigned int v5 = v8;
    }
    while (v8 != v4);
  }
}

void sub_10011875C(uint64_t a1, int *a2, uint64_t a3)
{
  if (*a2 != 1)
  {
    int v13 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(void *)a1 + 16))(&v14, a1, &v13);
    if (BYTE4(v14))
    {
      int v11 = v14;
      sub_10004CF68((void *)(a1 + 56), &v11, a3);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    int v10 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"UDIF: compression algo is invalid", 0x16u);
  }
  sub_10002236C((int *)&v15, 1);
  *(void *)&long long v12 = &v15;
  uint64_t v4 = sub_10001F2E0((uint64_t **)(a1 + 104), (unsigned int *)&v15, (uint64_t)&unk_1001705CC, (_DWORD **)&v12);
  int v6 = *(uint64_t **)(a1 + 56);
  unsigned int v5 = *(uint64_t **)(a1 + 64);
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    sub_100004944(v7);
  }
}

void sub_1001188D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001188E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v23 = 0;
  uint64_t v24 = 0;
  long long v22 = (uint64_t *)&v23;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 56) + 72))(&v21);
  uint64_t v4 = *(unsigned int **)(a1 + 104);
  if (v4 != (unsigned int *)(a1 + 112))
  {
    while (1)
    {
      unsigned int v5 = (const void *)*((void *)v4 + 5);
      if (v5 == *(const void **)(a1 + 56)) {
        break;
      }
      if (v5)
      {
        if (v6)
        {
          unsigned int v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v19 = (std::__shared_weak_count *)*((void *)&v21 + 1);
          if (*((void *)&v21 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v6 + 176))(&v20);
          long long v25 = v4 + 8;
          BOOL v8 = sub_10001F2E0(&v22, v4 + 8, (uint64_t)&unk_1001705CC, &v25);
          long long v9 = v20;
          long long v20 = 0uLL;
          int v10 = (std::__shared_weak_count *)v8[6];
          *(_OWORD *)(v8 + 5) = v9;
          if (v10)
          {
            sub_100004944(v10);
            if (*((void *)&v20 + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v20 + 1));
            }
          }
          if (v19) {
            sub_100004944(v19);
          }
LABEL_17:
          if (v7) {
            sub_100004944(v7);
          }
        }
      }
      int v13 = (unsigned int *)*((void *)v4 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = *(unsigned int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (unsigned int *)*((void *)v4 + 2);
          BOOL v15 = *(void *)v14 == (void)v4;
          uint64_t v4 = v14;
        }
        while (!v15);
      }
      uint64_t v4 = v14;
      if (v14 == (unsigned int *)(a1 + 112)) {
        goto LABEL_25;
      }
    }
    *(void *)&long long v20 = v4 + 8;
    int v11 = sub_10001F2E0(&v22, v4 + 8, (uint64_t)&unk_1001705CC, (_DWORD **)&v20);
    long long v12 = v21;
    if (*((void *)&v21 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = (std::__shared_weak_count *)v11[6];
    *(_OWORD *)(v11 + 5) = v12;
    goto LABEL_17;
  }
LABEL_25:
  int v16 = v23;
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = a2 + 8;
  uint64_t v18 = v24;
  *(void *)(a2 + 16) = v24;
  if (v18)
  {
    void v16[2] = v17;
    long long v22 = (uint64_t *)&v23;
    long long v23 = 0;
    uint64_t v24 = 0;
    int v16 = 0;
  }
  else
  {
    *(void *)a2 = v17;
  }
  *(_OWORD *)(a2 + 24) = v21;
  sub_100019CE0((uint64_t)&v22, v16);
}

void sub_100118B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t sub_100118BB8(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  if (v1 != (void *)(result + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        unsigned int v7 = v1;
        *(void *)&long long v9 = "udif::details::UDIF_base::validate_runs()";
        *((void *)&v9 + 1) = 39;
        int v10 = 16;
        sub_100118DCC(v11, &v9);
        sub_1000039A0(v12, (uint64_t)"Run interval: ", 14);
        sub_10010B240(v12, (uint64_t)(v7 + 4));
        sub_1000039A0(v12, (uint64_t)" of type ", 9);
        LODWORD(v8) = *((_DWORD *)v7 + 14);
        sub_100040480(v12, &v8);
        sub_1000039A0(v12, (uint64_t)" has size ", 10);
        std::ostream::operator<<();
        sub_1000039A0(v12, (uint64_t)"which is larger than allowed ", 29);
        std::ostream::operator<<();
        sub_1000039A0(v12, (uint64_t)" or exceeds size_t size ", 24);
        uint64_t v8 = -1;
        sub_100118D9C((uint64_t)v11);
        sub_100118EF0((uint64_t)v11);
        exception = __cxa_allocate_exception(0x40uLL);
        int v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"UDIF: compressed runs should be <= 1MB", 0x16u);
      }
      uint64_t v2 = (void *)v1[1];
      if (v2)
      {
        do
        {
          int v3 = v2;
          uint64_t v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          int v3 = (void *)v1[2];
          BOOL v4 = *v3 == (void)v1;
          uint64_t v1 = v3;
        }
        while (!v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != (void *)(result + 16));
  }
  return result;
}

void sub_100118D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100118EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100118D9C(uint64_t a1)
{
  return a1;
}

void *sub_100118DCC(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100121630((uint64_t)a1, a2);
  *a1 = off_1001BD888;
  a1[45] = &off_1001BD988;
  a1[46] = &off_1001BD9B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BD888;
  a1[45] = off_1001BD910;
  a1[46] = off_1001BD938;
  return a1;
}

void sub_100118ECC(_Unwind_Exception *a1)
{
  sub_10011D408(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100118EF0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100118F34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != sub_1001216C0(a1 + 32, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v10 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Invalid UDIF format, contains intersected blocks", 0x16u);
  }
  int v6 = *((_DWORD *)a3 + 2);
  long long v19 = *(_OWORD *)((char *)a3 + 76);
  long long v20 = *(_OWORD *)((char *)a3 + 92);
  long long v21 = *(_OWORD *)((char *)a3 + 108);
  long long v22 = *(_OWORD *)((char *)a3 + 124);
  long long v15 = *(_OWORD *)((char *)a3 + 12);
  long long v16 = *(_OWORD *)((char *)a3 + 28);
  long long v17 = *(_OWORD *)((char *)a3 + 44);
  long long v18 = *(_OWORD *)((char *)a3 + 60);
  uint64_t v7 = *a3;
  uint64_t v12 = *(void *)(a2 + 16);
  long long v11 = *(_OWORD *)a2;
  uint64_t v13 = v7;
  int v14 = v6;
  char v23 = 1;
  return sub_100121744(v5, (uint64_t)&v11);
}

void sub_10011905C(int a1, CFArrayRef theArray)
{
}

void sub_100119640(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29)
{
}

void *sub_100119708(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100121EC0((uint64_t)a1, a2);
  *a1 = off_1001BDAA8;
  a1[45] = &off_1001BDBA8;
  a1[46] = &off_1001BDBD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BDAA8;
  a1[45] = off_1001BDB30;
  a1[46] = off_1001BDB58;
  return a1;
}

void sub_100119808(_Unwind_Exception *a1)
{
  sub_10011DB7C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011982C(uint64_t a1)
{
  return a1;
}

void *sub_100119874(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100121F50((uint64_t)a1, a2);
  *a1 = off_1001BDCC8;
  a1[45] = &off_1001BDDC8;
  a1[46] = &off_1001BDDF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BDCC8;
  a1[45] = off_1001BDD50;
  a1[46] = off_1001BDD78;
  return a1;
}

void sub_100119974(_Unwind_Exception *a1)
{
  sub_10011E2F0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100119998(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001199DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D4850))
  {
    sub_10002236C(&v1, 0);
    long long v2 = xmmword_100177EA0;
    char v3 = 2;
    int v4 = v1;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_100121FE0((uint64_t)&qword_1001D4838, (unint64_t *)&v2, 1);
    __cxa_atexit((void (*)(void *))sub_100119AE8, &qword_1001D4838, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D4850);
  }
  return &qword_1001D4838;
}

void sub_100119ACC(_Unwind_Exception *a1)
{
}

uint64_t sub_100119AE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100119B14(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  char v7 = 2;
  uint64_t result = sub_10000D6B0(a1 + 8, (uint64_t)v6);
  if (a1 + 16 == result)
  {
    sub_1001199DC();
    return qword_1001D4838;
  }
  return result;
}

void sub_100119B78(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  uint64_t v8 = sub_100119B14(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    long long v9 = (void *)v8;
    uint64_t v10 = a1 + 16;
    unint64_t v11 = a2;
    while (v9 != (void *)v10)
    {
      uint64_t v12 = v9[4];
      unint64_t v13 = v12 << 9;
      if (v11 < v12 << 9) {
        goto LABEL_11;
      }
      uint64_t v14 = (v9[5] - v12) << 9;
      if (v14 - (v11 - v13) >= v5) {
        unint64_t v15 = v5;
      }
      else {
        unint64_t v15 = v14 - (v11 - v13);
      }
      unsigned int v16 = *((_DWORD *)v9 + 14);
      unsigned int v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        long long v30 = *((_OWORD *)v9 + 4);
        *(void *)&long long v31 = v13;
        *((void *)&v31 + 1) = v14;
        *(void *)&long long v32 = v11 - a2;
        *((void *)&v32 + 1) = v11 - v13;
      }
      else
      {
        *(void *)&long long v30 = v9[8] + v11 - v13;
        *((void *)&v30 + 1) = v15;
        *(void *)&long long v31 = v11;
        *((void *)&v31 + 1) = v15;
        long long v32 = v11 - a2;
      }
      unint64_t v33 = v15;
      uint64_t v22 = a4[1];
      uint64_t v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        sub_10012229C(a4, v23, 1, (uint64_t)&v29, &v34);
      }
      else
      {
        *(_DWORD *)uint64_t v23 = v16;
        long long v24 = v30;
        long long v25 = v31;
        long long v26 = v32;
        *(void *)(v23 + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        ++a4[1];
      }
      uint64_t v27 = (void *)v9[1];
      if (v27)
      {
        do
        {
          long long v9 = v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          long long v28 = v9;
          long long v9 = (void *)v9[2];
        }
        while ((void *)*v9 != v28);
      }
LABEL_23:
      v11 += v15;
      v5 -= v15;
      if (!v5) {
        return;
      }
    }
    unint64_t v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5) {
      unint64_t v15 = v5;
    }
    else {
      unint64_t v15 = v13 - v11;
    }
    sub_10002236C((int *)&v29, 0);
    long long v30 = 0uLL;
    *(void *)&long long v31 = v11;
    *((void *)&v31 + 1) = v15;
    long long v32 = v11 - a2;
    unint64_t v33 = v15;
    uint64_t v17 = a4[1];
    uint64_t v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      sub_10012229C(a4, v18, 1, (uint64_t)&v29, &v34);
    }
    else
    {
      *(_DWORD *)uint64_t v18 = v29;
      long long v19 = v30;
      long long v20 = v31;
      long long v21 = v32;
      *(void *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + 8) = v19;
      ++a4[1];
    }
    goto LABEL_23;
  }
}

uint64_t sub_100119D88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_10000D6B0(a1 + 8, a2);
  sub_10000D384(v3, a2);
  return v4;
}

uint64_t sub_100119DD4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_100119DE4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  sub_100116D94((uint64_t)v16, a3);
  if (sub_100060840(a4, v16))
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    sub_100119FD4(v16, &v14);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_1000039A0(v17, v8, v9);
    sub_1000039A0(v17, (uint64_t)" - same ", 8);
    sub_100122560((uint64_t)v17, a3);
    std::ostream::~ostream();
    sub_10011EA64((uint64_t)v16);
  }
  else
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    sub_10011A13C(v16, &v14);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    sub_1000039A0(v17, v11, v12);
    sub_1000039A0(v17, (uint64_t)" - different calculated: <", 26);
    sub_100122560((uint64_t)v17, a3);
    sub_1000039A0(v17, (uint64_t)"> real: <", 9);
    sub_100118094(v17, a4);
    sub_1000039A0(v17, (uint64_t)">", 1);
    std::ostream::~ostream();
    sub_10011F1D8((uint64_t)v16);
  }
  return std::ios::~ios();
}

void sub_100119FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10011A0F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100119FD4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001224D0((uint64_t)a1, a2);
  *a1 = off_1001BDEE8;
  a1[45] = &off_1001BDFE8;
  a1[46] = &off_1001BE010;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BDEE8;
  a1[45] = off_1001BDF70;
  a1[46] = off_1001BDF98;
  return a1;
}

void sub_10011A0D4(_Unwind_Exception *a1)
{
  sub_10011EA64(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011A0F8(uint64_t a1)
{
  return a1;
}

void *sub_10011A13C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100122618((uint64_t)a1, a2);
  *a1 = off_1001BE108;
  a1[45] = &off_1001BE208;
  a1[46] = &off_1001BE230;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BE108;
  a1[45] = off_1001BE190;
  a1[46] = off_1001BE1B8;
  return a1;
}

void sub_10011A23C(_Unwind_Exception *a1)
{
  sub_10011F1D8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011A260(uint64_t a1)
{
  return a1;
}

void sub_10011A2A4(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &off_1001BD5F0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2[1];
  uint64_t v3 = a2[2];
  *(void *)(a1 + 64) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  sub_1001182C8();
  sub_1001199DC();
  *(unsigned char *)(a1 + 89) = *(void *)(*(void *)(a1 + 72) + 216) >= *(void *)(*(void *)(a1 + 72) + 32)
                                                                   + *(void *)(*(void *)(a1 + 72) + 24);
  sub_10011A624();
}

void sub_10011A598(_Unwind_Exception *a1)
{
  sub_100013BA8(v7 - 168);
  sub_100019CE0(v4, *(void **)(v1 + 112));
  uint64_t v9 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v9) {
    operator delete();
  }
  int v10 = *(std::__shared_weak_count **)(v1 + 64);
  if (v10) {
    sub_100004944(v10);
  }
  sub_10000953C(v3, *v6);
  sub_10000953C(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_10011A624()
{
}

void sub_10011A79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_100013C04((uint64_t)va);
  sub_100013C04((uint64_t)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 32);
  if (v4) {
    sub_100004944(v4);
  }
  sub_10000D758((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

void *sub_10011A7EC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001226A8((uint64_t)a1, a2);
  *a1 = off_1001BE328;
  a1[45] = &off_1001BE428;
  a1[46] = &off_1001BE450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BE328;
  a1[45] = off_1001BE3B0;
  a1[46] = off_1001BE3D8;
  return a1;
}

void sub_10011A8EC(_Unwind_Exception *a1)
{
  sub_10011F94C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011A910(uint64_t a1)
{
  return a1;
}

void sub_10011A954()
{
}

void sub_10011AB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_10000D758(&a10);
  _Unwind_Resume(a1);
}

void sub_10011AB5C()
{
}

void sub_10011AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10000D758((const void **)va);
  if (v5) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10011AE9C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &off_1001BD5F0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 56) = *a2;
  *(void *)(a1 + 64) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 88) = 256;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  sub_1001182C8();
  sub_1001199DC();
  return a1;
}

void sub_10011AF58(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  sub_100019CE0(v7, *(void **)(v2 + 112));
  uint64_t v9 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = 0;
  if (v9) {
    operator delete();
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 64);
  if (v10) {
    sub_100004944(v10);
  }
  sub_10000953C(v3, *v6);
  sub_10000953C(v1, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_10011AFB8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)(a1 + 32) = 0xFFFFFFFE00000000;
  uint64_t v5 = (_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 40;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  sub_100019E14((_DWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  int v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  sub_100019EB0((uint64_t)"blocks_signature", v7, &v25, 1);
  *(_DWORD *)a1 = 1752394093;
  int v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v25) = 1;
  sub_100019EB0((uint64_t)"version", v8, &v25, 1);
  *(_DWORD *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = bswap64(*(void *)(a2 + 8));
  void *v4 = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *uint64_t v5 = bswap32(*(_DWORD *)(a2 + 32));
  LODWORD(v25) = *(_DWORD *)(a2 + 36);
  sub_100116E6C((unsigned int *)&v25, (unsigned int *)v24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)v24;
  long long v9 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 16) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v6 = v9;
  sub_100019E14(v24);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v24[96] = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v24[112] = v10;
  *(void *)&v24[128] = *(void *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v24[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v24[48] = v11;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v24[64] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v24[80] = v12;
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)long long v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v24[16] = v13;
  long long v30 = *(_OWORD *)&v24[72];
  long long v31 = *(_OWORD *)&v24[88];
  long long v32 = *(_OWORD *)&v24[104];
  long long v33 = *(_OWORD *)&v24[120];
  long long v26 = *(_OWORD *)&v24[8];
  long long v27 = *(_OWORD *)&v24[24];
  long long v28 = *(_OWORD *)&v24[40];
  long long v29 = *(_OWORD *)&v24[56];
  uint64_t v25 = *(void *)v24;
  sub_100116C64((uint64_t)&v25, (int *)&v15);
  *(void *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 168) = v22;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v19;
  *(_DWORD *)(a1 + 200) = bswap32(*(_DWORD *)(a2 + 200));
  return a1;
}

void sub_10011B228(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10011B234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AE40((_DWORD *)a1);
  v4[9] = 0;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  sub_10002236C(&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = bswap64(*(void *)(a2 + 8));
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(void *)(a1 + 32) = bswap64(*(void *)(a2 + 32));
  return a1;
}

uint64_t sub_10011B2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, uint64_t a7, int a8)
{
  *(_DWORD *)a1 = 1752394093;
  int v23 = 1752394093;
  sub_100019EB0((uint64_t)"blocks_signature", 1752394093, &v23, 1);
  *(_DWORD *)(a1 + 4) = 1;
  int v24 = 1;
  sub_100019EB0((uint64_t)"version", 1, &v24, 1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = *a6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)a7;
  long long v16 = *(_OWORD *)(a7 + 8);
  long long v17 = *(_OWORD *)(a7 + 24);
  long long v18 = *(_OWORD *)(a7 + 40);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a7 + 56);
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 72) = v16;
  long long v19 = *(_OWORD *)(a7 + 72);
  long long v20 = *(_OWORD *)(a7 + 88);
  long long v21 = *(_OWORD *)(a7 + 104);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a7 + 120);
  *(_OWORD *)(a1 + 168) = v21;
  *(_OWORD *)(a1 + 152) = v20;
  *(_OWORD *)(a1 + 136) = v19;
  *(_DWORD *)(a1 + 200) = a8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  return a1;
}

uint64_t sub_10011B3F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(void *)(a2 + 8) = bswap64(*(void *)(a1 + 8));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(void *)(a2 + 32) = bswap64(*(void *)(a1 + 32));
  return a2 + 40;
}

_DWORD *sub_10011B448(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(void *)(a2 + 8) = bswap64(*(void *)(a1 + 8));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(_DWORD *)(a2 + 32) = bswap32(*(_DWORD *)(a1 + 32));
  *(_DWORD *)(a2 + 36) = bswap32(*(_DWORD *)(a1 + 36));
  long long v3 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v3;
  uint64_t v4 = (_DWORD *)sub_100116EB4(a1 + 64, a2 + 64);
  _DWORD *v4 = bswap32(*(_DWORD *)(a1 + 200));
  return v4 + 1;
}

_DWORD *sub_10011B4E0(_DWORD *a1)
{
  a1[129] = 65537;
  return a1;
}

_WORD *sub_10011B514(unsigned __int16 *a1, _WORD *a2)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v5 = "*udif::details::plst::write(char *)";
    *((void *)&v5 + 1) = 27;
    int v6 = 2;
    sub_10011B618(v7, &v5);
    sub_10011826C(v8);
    std::ostream::~ostream();
    sub_1001201B4((uint64_t)v7);
    std::ios::~ios();
  }
  memcpy(a2, a1, 0x204uLL);
  a2[258] = bswap32(a1[258]) >> 16;
  a2[259] = bswap32(a1[259]) >> 16;
  memcpy(a2 + 260, a1 + 260, 0x200uLL);
  return a2 + 516;
}

void sub_10011B604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10011B73C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10011B618(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10012287C((uint64_t)a1, a2);
  *a1 = off_1001BE548;
  a1[45] = &off_1001BE648;
  a1[46] = &off_1001BE670;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BE548;
  a1[45] = off_1001BE5D0;
  a1[46] = off_1001BE5F8;
  return a1;
}

void sub_10011B718(_Unwind_Exception *a1)
{
  sub_1001201B4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011B73C(uint64_t a1)
{
  return a1;
}

CFDataRef sub_10011B780@<X0>(uint64_t a1@<X0>, CFDataRef *a2@<X8>)
{
  CFDataRef result = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

const void **sub_10011B7BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X4>, CFDictionaryRef *a5@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    long long v9 = (const char *)a1;
  }
  else {
    long long v9 = *(const char **)a1;
  }
  CFTypeRef cf = 0;
  CFStringRef v21 = CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v10 = (const char *)a2;
    }
    else {
      long long v10 = *(const char **)a2;
    }
    CFTypeRef cf = CFStringCreateWithCString(kCFAllocatorDefault, v10, 0x8000100u);
  }
  else
  {
    CFTypeRef cf = &stru_1001C72F8;
  }
  keys[0] = 0;
  sub_10004044C((const void **)keys);
  std::to_string(&v19, a3);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v11 = &v19;
  }
  else {
    long long v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v11, 0x600u);
  sub_100009FEC((uint64_t)keys);
  sub_1000039A0(&v24, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v24 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((unsigned char *)&v24 + *(void *)(v24 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  sub_10000ED30(&v24, (char *)values);
  *(void *)&v26[*(void *)(v24 - 24)] = 4;
  std::ostream::operator<<();
  sub_10002CDD0((uint64_t)&v24 + 8, &v17);
  *(void **)((char *)keys
  *(void *)&long long v24 = v12;
  if (v28 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v17;
  }
  else {
    long long v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x600u);
  *(_OWORD *)keys = *(_OWORD *)off_1001BD608;
  long long v24 = *(_OWORD *)off_1001BD618;
  CFStringRef v25 = @"CFName";
  values[0] = a4;
  values[1] = (void *)v21;
  values[2] = (void *)v18;
  values[3] = (void *)v16;
  if (*(unsigned char *)(a2 + 24)) {
    CFIndex v14 = 5;
  }
  else {
    CFIndex v14 = 4;
  }
  values[4] = (void *)cf;
  *a5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v14, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_10004044C((const void **)&v16);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  sub_10004044C((const void **)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  sub_10004044C(&cf);
  return sub_10004044C((const void **)&v21);
}

void sub_10011BB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
}

uint64_t sub_10011BC0C(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void *sub_10011BD44(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  long long v5 = sub_1000039A0(a1, (uint64_t)"type: ", 6);
  int v26 = *a2;
  int v6 = sub_100040480(v5, &v26);
  int v7 = sub_1000039A0(v6, (uint64_t)" data: ", 7);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) |= 0x200u;
  long long v9 = (void *)std::ostream::operator<<();
  long long v10 = sub_1000039A0(v9, (uint64_t)"/", 1);
  uint64_t v11 = *v10;
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) &= ~0x200u;
  uint64_t v12 = (void *)std::ostream::operator<<();
  long long v13 = sub_1000039A0(v12, (uint64_t)" logical: ", 10);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  uint64_t v15 = (void *)std::ostream::operator<<();
  CFStringRef v16 = sub_1000039A0(v15, (uint64_t)"/", 1);
  uint64_t v17 = *v16;
  *(_DWORD *)((char *)v16 + *(void *)(*v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v16 + *(void *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) &= ~0x200u;
  CFStringRef v18 = (void *)std::ostream::operator<<();
  std::string v19 = sub_1000039A0(v18, (uint64_t)" io: ", 5);
  uint64_t v20 = *v19;
  *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) |= 0x200u;
  CFStringRef v21 = (void *)std::ostream::operator<<();
  long long v22 = sub_1000039A0(v21, (uint64_t)",", 1);
  uint64_t v23 = *v22;
  *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + 8) &= ~0x200u;
  long long v24 = (void *)std::ostream::operator<<();
  sub_1000039A0(v24, (uint64_t)"/", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

uint64_t sub_10011C0F4(void *a1)
{
  uint64_t result = sub_100122ADC(*(const __CFString **)(*a1 + 8 * a1[4]));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v3);
    sub_1000039A0(v3, (uint64_t)"UDIF: Failed converting type array string (", 43);
    std::ostream::operator<<();
    sub_1000039A0(v3, (uint64_t)") to type", 9);
    sub_10000550C((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  return result;
}

void sub_10011C1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_10011C1F4(uint64_t a1)
{
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), *(const void **)(*(void *)a1 + 8 * *(void *)(a1 + 32)));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"UDIF: Can't get resource array", 0x16u);
  }
  return result;
}

BOOL sub_10011C258(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a1 + 24) != 0) == (v3 != 0)) {
      return *(void *)(a1 + 32) == *(void *)(a2 + 32);
    }
    return 0;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

void sub_10011C2C4(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = *a2;
  uint64_t v2 = a2[1];
  a1[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new[]();
}

void sub_10011C554(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10011C710((uint64_t)va);
  operator delete[]();
}

void *sub_10011C5EC(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10012290C((uint64_t)a1, a2);
  *a1 = off_1001BE768;
  a1[45] = &off_1001BE868;
  a1[46] = &off_1001BE890;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BE768;
  a1[45] = off_1001BE7F0;
  a1[46] = off_1001BE818;
  return a1;
}

void sub_10011C6EC(_Unwind_Exception *a1)
{
  sub_100120928(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10011C710(uint64_t a1)
{
  return a1;
}

void *sub_10011C758(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *uint64_t result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10011C784(uint64_t a1)
{
  sub_100019B70(a1);
  operator delete();
}

uint64_t sub_10011C7BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011CA4C(v1);
  return std::ios::~ios();
}

uint64_t sub_10011C808(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011CA4C(v1);
  return std::ios::~ios();
}

void sub_10011C868(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011CA4C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011C8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011C908(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011C970(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011CA4C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011C9D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011CA4C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011CA4C(uint64_t a1)
{
  *(void *)a1 = off_1001BD7F0;
  sub_10011CB88(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011CB88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011CD48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011CCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011CD10(uint64_t a1)
{
  sub_10011CA4C(a1);
  operator delete();
}

int *sub_10011CD48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 85;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 85;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011CF30@<X0>(uint64_t a1@<X8>)
{
  return sub_10011CF48(a1);
}

uint64_t sub_10011CF3C@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10011CFF0(a2, (uint64_t)a1, a1);
}

uint64_t sub_10011CF48(uint64_t a1)
{
  sub_10002C70C((int *)&v3, 0);
  *(void *)a1 = v3;
  int v4 = 0;
  sub_10002C7A4(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

uint64_t sub_10011CFF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_10002C70C(&v6, 2);
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  int v7 = 32;
  sub_10002C7A4(&v8, &v7);
  *(_DWORD *)long long v9 = a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *sub_10011D0E8(unsigned int *result, unsigned int a2)
{
  *uint64_t result = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "descriptor_special";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10019DB18;
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

uint64_t sub_10011D178(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011D408(v1);
  return std::ios::~ios();
}

uint64_t sub_10011D1C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011D408(v1);
  return std::ios::~ios();
}

void sub_10011D224(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011D408(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011D28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011D2C4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011D32C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011D408(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011D390(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011D408(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011D408(uint64_t a1)
{
  *(void *)a1 = off_1001BDA20;
  sub_10011D544(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011D544(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011D704((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011D6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011D6CC(uint64_t a1)
{
  sub_10011D408(a1);
  operator delete();
}

int *sub_10011D704(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 417;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 417;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011D8EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011DB7C(v1);
  return std::ios::~ios();
}

uint64_t sub_10011D938(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011DB7C(v1);
  return std::ios::~ios();
}

void sub_10011D998(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011DB7C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011DA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011DA38(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011DAA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011DB7C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011DB04(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011DB7C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011DB7C(uint64_t a1)
{
  *(void *)a1 = off_1001BDC40;
  sub_10011DCB8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011DCB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011DE78((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011DE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011DE40(uint64_t a1)
{
  sub_10011DB7C(a1);
  operator delete();
}

int *sub_10011DE78(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 458;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 458;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011E060(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011E2F0(v1);
  return std::ios::~ios();
}

uint64_t sub_10011E0AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011E2F0(v1);
  return std::ios::~ios();
}

void sub_10011E10C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011E2F0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011E174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011E1AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011E214(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011E2F0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011E278(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011E2F0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011E2F0(uint64_t a1)
{
  *(void *)a1 = off_1001BDE60;
  sub_10011E42C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011E42C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011E5EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011E588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011E5B4(uint64_t a1)
{
  sub_10011E2F0(a1);
  operator delete();
}

int *sub_10011E5EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 500;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 500;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011E7D4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011EA64(v1);
  return std::ios::~ios();
}

uint64_t sub_10011E820(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011EA64(v1);
  return std::ios::~ios();
}

void sub_10011E880(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011EA64(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011E8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011E920(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011E988(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011EA64(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011E9EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011EA64(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011EA64(uint64_t a1)
{
  *(void *)a1 = off_1001BE080;
  sub_10011EBA0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011EBA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011ED60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011ECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011ED28(uint64_t a1)
{
  sub_10011EA64(a1);
  operator delete();
}

int *sub_10011ED60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 601;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 601;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011EF48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011F1D8(v1);
  return std::ios::~ios();
}

uint64_t sub_10011EF94(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011F1D8(v1);
  return std::ios::~ios();
}

void sub_10011EFF4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011F1D8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011F05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011F094(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011F0FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011F1D8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011F160(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011F1D8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011F1D8(uint64_t a1)
{
  *(void *)a1 = off_1001BE2A0;
  sub_10011F314(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011F314(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011F4D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011F470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011F49C(uint64_t a1)
{
  sub_10011F1D8(a1);
  operator delete();
}

int *sub_10011F4D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 603;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 603;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011F6BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011F94C(v1);
  return std::ios::~ios();
}

uint64_t sub_10011F708(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011F94C(v1);
  return std::ios::~ios();
}

void sub_10011F768(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10011F94C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011F7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10011F808(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10011F870(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10011F94C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10011F8D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10011F94C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10011F94C(uint64_t a1)
{
  *(void *)a1 = off_1001BE4C0;
  sub_10011FA88(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10011FA88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10011FC48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10011FBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011FC10(uint64_t a1)
{
  sub_10011F94C(a1);
  operator delete();
}

int *sub_10011FC48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 638;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 638;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10011FE30(uint64_t a1, void *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v7) {
    CFRetain(v7);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = a4;
  return a1;
}

void sub_10011FE90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10011FEA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(void *)(result + 56) = 0;
    *(void *)(result + 56) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(result + 64) = 1;
  }
  *(void *)(result + 72) = *(void *)(a3 + 32);
  return result;
}

uint64_t sub_10011FF24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001201B4(v1);
  return std::ios::~ios();
}

uint64_t sub_10011FF70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001201B4(v1);
  return std::ios::~ios();
}

void sub_10011FFD0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001201B4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100120038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100120070(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001200D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001201B4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012013C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001201B4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001201B4(uint64_t a1)
{
  *(void *)a1 = off_1001BE6E0;
  sub_1001202F0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1001202F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001204B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100120478(uint64_t a1)
{
  sub_1001201B4(a1);
  operator delete();
}

int *sub_1001204B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 768;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 768;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100120698(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100120928(v1);
  return std::ios::~ios();
}

uint64_t sub_1001206E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100120928(v1);
  return std::ios::~ios();
}

void sub_100120744(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100120928(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001207AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001207E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012084C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100120928(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1001208B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100120928(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100120928(uint64_t a1)
{
  *(void *)a1 = off_1001BE900;
  sub_100120A64(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100120A64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100120C24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100120BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100120BEC(uint64_t a1)
{
  sub_100120928(a1);
  operator delete();
}

int *sub_100120C24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 898;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 898;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

_DWORD *sub_100120E0C(_DWORD *result, int a2)
{
  uint64_t v2 = 0;
  *uint64_t result = a2;
  uint64_t v5 = 0x200000001;
  int v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (a2)
  {
    int v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = v3;
  }
  return result;
}

uint64_t sub_100120EFC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BD7F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100120F78(_Unwind_Exception *a1)
{
}

void *sub_100120F8C(void *a1, int *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    for (uint64_t i = 0; i != 18; i += 6)
    {
      int v5 = dword_1001BE970[i];
      if ((v5 & v3) != 0)
      {
        v3 &= ~v5;
        sub_1000039A0(a1, *(void *)&dword_1001BE970[i + 2], *(void *)&dword_1001BE970[i + 4]);
        if (v3)
        {
          char v7 = 44;
          sub_1000039A0(a1, (uint64_t)&v7, 1);
        }
      }
    }
    return a1;
  }
  else
  {
    return sub_1000039A0(a1, (uint64_t)"none", 4);
  }
}

void *sub_10012105C(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001BE9B8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001BE9B8[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

void *sub_1001210A0(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001BE9E8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001BE9E8[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

uint64_t *sub_1001210E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  if (a3 != 1)
  {
    uint64_t v7 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
      char v13 = 48;
      int v8 = sub_10000ED30(a1, &v13);
      *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
      ++a2;
      long long v9 = (void *)std::ostream::operator<<();
      sub_1000039A0(v9, (uint64_t)" ", 1);
      --v7;
    }
    while (v7);
    uint64_t v4 = *a1;
  }
  *(_DWORD *)((char *)a1 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v12 = 48;
  long long v10 = sub_10000ED30(a1, &v12);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v5;
  return a1;
}

void *sub_100121278(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001BEA18[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      int v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &dword_1001BEA18[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

uint64_t sub_1001212BC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10012133C((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100121324(_Unwind_Exception *a1)
{
  sub_10000953C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10012133C(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1001213C4(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_10000CAA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1001213C4(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **sub_10012156C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_10000CAA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100121630(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BDA20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001216AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1001216C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = (*(unsigned char *)(a2 + 16) & 2) != 0 ? *(void *)a2 : *(void *)a2 + 1;
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      long long v9 = (uint64_t *)v3;
    }
    else {
      long long v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2) {
    return v2;
  }
  unint64_t v10 = *(void *)(v6 + 32);
  if ((*(unsigned char *)(v6 + 48) & 2) == 0) {
    ++v10;
  }
  if ((unint64_t)(*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1 < v10) {
    return v2;
  }
  return v6;
}

uint64_t *sub_100121744(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return (uint64_t *)(a1 + 1);
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  unint64_t v5 = (uint64_t *)(a2 + 24);
  if (sub_100121864(a2 + 24)) {
    return (uint64_t *)(a1 + 1);
  }
  uint64_t result = sub_100121D00(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    BOOL v8 = (uint64_t *)sub_10000D6B0((uint64_t)a1, (uint64_t)&v14);
    long long v9 = (uint64_t **)sub_10000D384((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v11 = v10;
        unint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        long long v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    char v13 = v11;
    uint64_t v16 = v8;
    sub_100121928(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL sub_100121864(uint64_t a1)
{
  LOBYTE(v2) = 0;
  char v12 = 0;
  if (byte_1001D3F94)
  {
    uint64_t v2 = qword_1001D3F08;
    int v3 = dword_1001D3F10;
    long long v8 = unk_1001D3F54;
    long long v9 = unk_1001D3F64;
    long long v10 = unk_1001D3F74;
    long long v11 = unk_1001D3F84;
    long long v4 = *(_OWORD *)algn_1001D3F14;
    long long v5 = unk_1001D3F24;
    long long v6 = unk_1001D3F34;
    long long v7 = unk_1001D3F44;
    char v12 = 1;
  }
  return sub_100121CAC(a1, (uint64_t)&v2);
}

uint64_t sub_100121928(uint64_t **a1, long long *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  long long v8 = *a5;
  long long v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      long long v10 = v9;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    long long v11 = *a5;
    do
    {
      long long v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      long long v11 = v10;
    }
    while (!v12);
  }
  char v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = qword_1001D3B40;
  *((void *)&v37 + 1) = qword_1001D3B40;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    int v17 = (long long *)((char *)a3 + 12);
    do
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      sub_10000D508((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
          if (*((void *)&v41 + 1) >= (unint64_t)v41) {
            goto LABEL_24;
          }
        }
        else if ((unint64_t)v41 < *((void *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }
      else if ((unint64_t)v41 < *((void *)&v41 + 1) && (unint64_t)(v41 + 1) < *((void *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        char v53 = 0;
        if (*((unsigned char *)a3 + 140))
        {
          uint64_t v43 = *a3;
          int v44 = *((_DWORD *)a3 + 2);
          long long v18 = *(_OWORD *)((char *)a3 + 92);
          long long v49 = *(_OWORD *)((char *)a3 + 76);
          long long v50 = v18;
          long long v19 = *(_OWORD *)((char *)a3 + 124);
          long long v51 = *(_OWORD *)((char *)a3 + 108);
          long long v52 = v19;
          long long v20 = *(_OWORD *)((char *)a3 + 28);
          long long v45 = *v17;
          long long v46 = v20;
          long long v21 = *(_OWORD *)((char *)a3 + 60);
          long long v47 = *(_OWORD *)((char *)a3 + 44);
          long long v48 = v21;
          char v53 = 1;
        }
        *a4 = sub_100121E3C(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }
      long long v31 = v39;
      uint64_t v32 = v40;
      sub_10000D5DC((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      long long v39 = v41;
      LOBYTE(v40) = v42;
      uint64_t v15 = *a4;
      unsigned int v22 = (uint64_t *)(*a4)[1];
      uint64_t v23 = *a4;
      if (v22)
      {
        do
        {
          char v13 = v22;
          unsigned int v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          char v13 = (uint64_t *)v23[2];
          BOOL v12 = *v13 == (void)v23;
          uint64_t v23 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
    }
    while (v13 != v10);
  }
  long long v27 = v39;
  uint64_t v28 = v40;
  uint64_t result = sub_10000D5DC((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    if ((unint64_t)v29 >= *((void *)&v29 + 1)) {
      goto LABEL_44;
    }
    unint64_t v26 = v29 + 1;
    goto LABEL_40;
  }
  if (v30 != 3)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    unint64_t v26 = v29;
LABEL_40:
    if (v26 >= v25) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  if (*((void *)&v29 + 1) < (unint64_t)v29) {
    goto LABEL_44;
  }
LABEL_41:
  long long v41 = v29;
  uint64_t v42 = v30;
  LOBYTE(v43) = 0;
  char v53 = 0;
  if (*((unsigned char *)a3 + 140))
  {
    uint64_t v43 = *a3;
    int v44 = *((_DWORD *)a3 + 2);
    long long v49 = *(_OWORD *)((char *)a3 + 76);
    long long v50 = *(_OWORD *)((char *)a3 + 92);
    long long v51 = *(_OWORD *)((char *)a3 + 108);
    long long v52 = *(_OWORD *)((char *)a3 + 124);
    long long v45 = *(_OWORD *)((char *)a3 + 12);
    long long v46 = *(_OWORD *)((char *)a3 + 28);
    long long v47 = *(_OWORD *)((char *)a3 + 44);
    long long v48 = *(_OWORD *)((char *)a3 + 60);
    char v53 = 1;
  }
  uint64_t result = (uint64_t)sub_100121E3C(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  uint64_t v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

BOOL sub_100121CAC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 140)) {
    BOOL v2 = *(unsigned char *)(a2 + 140) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 140) != 0) == (*(unsigned char *)(a2 + 140) != 0);
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return sub_100060840((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  }
  return 0;
}

uint64_t *sub_100121D00(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t **)sub_10000CA1C((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_100121D80((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10000CAA0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_OWORD *sub_100121D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0xC8uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((void *)result + 6) = *(void *)(a2 + 16);
  *((unsigned char *)result + 56) = 0;
  *((unsigned char *)result + 196) = 0;
  if (*(unsigned char *)(a2 + 164))
  {
    *((void *)result + 7) = *(void *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 132) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 148) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 180) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 68) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 100) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((unsigned char *)result + 196) = 1;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_100121E3C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (uint64_t **)sub_10000E1C0(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100121D80((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CAA0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_100121EC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BDC40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100121F3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100121F50(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BDE60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100121FCC(_Unwind_Exception *a1)
{
}

uint64_t sub_100121FE0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_100122064((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_10012204C(_Unwind_Exception *a1)
{
  sub_10000953C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100122064(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = sub_100122104(a1, a2, &v11, &v10, a3);
  long long v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    long long v7 = operator new(0x50uLL);
    unint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    void v7[4] = *(_OWORD *)(a4 + 32);
    sub_10000CAA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_100122104(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  long long v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_100022410(a5, a2 + 4))
  {
    if (!sub_100022410(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100022410(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    BOOL v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      BOOL v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      BOOL v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_100022410(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_1000B59C8((uint64_t)a1, a3, a5);
}

void sub_10012229C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10012233C((uint64_t)a1, a3);
  if (v11 >> 57) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(v11 << 6);
  sub_1001223B4(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10012233C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x1FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1001223B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = *a1 + (a1[1] << 6);
  uint64_t v12 = a2;
  if (*a1 != a4)
  {
    uint64_t v13 = (void *)*a1;
    uint64_t v12 = a2;
    do
    {
      *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
      long long v14 = *(_OWORD *)(v13 + 1);
      long long v15 = *(_OWORD *)(v13 + 3);
      long long v16 = *(_OWORD *)(v13 + 5);
      *(void *)(v12 + 56) = v13[7];
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      v12 += 64;
      v13 += 8;
    }
    while (v13 != (void *)a4);
  }
  *(_DWORD *)uint64_t v12 = *(_DWORD *)a6;
  long long v17 = *(_OWORD *)(a6 + 8);
  long long v18 = *(_OWORD *)(a6 + 24);
  long long v19 = *(_OWORD *)(a6 + 40);
  *(void *)(v12 + 56) = *(void *)(a6 + 56);
  *(_OWORD *)(v12 + 40) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + 8) = v17;
  if (v11 != a4)
  {
    uint64_t v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)a4;
      long long v21 = *(_OWORD *)(a4 + 8);
      long long v22 = *(_OWORD *)(a4 + 24);
      long long v23 = *(_OWORD *)(a4 + 40);
      *(void *)(v20 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(v20 + 40) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + 8) = v21;
      a4 += 64;
      v20 += 64;
    }
    while (a4 != v11);
  }
  if (v10)
  {
    long long v24 = (void *)*a1;
    if (a1 + 3 != (void *)*a1) {
      operator delete(v24);
    }
  }
  uint64_t v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t sub_1001224D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BE080;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10012254C(_Unwind_Exception *a1)
{
}

uint64_t sub_100122560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    sub_1000289E8();
  }
  long long v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1001BEA60[v2])(&v5, a2 + 4);
}

void *sub_1001225B0(void ***a1)
{
  return sub_1001225C8(**a1);
}

void *sub_1001225BC(void ***a1)
{
  return sub_100029FD0(**a1);
}

void *sub_1001225C8(void *a1)
{
  uint64_t v1 = sub_1000039A0(a1, (uint64_t)"none {", 6);
  uint64_t v2 = sub_1000039A0(v1, (uint64_t)"[empty]", 7);
  return sub_1000039A0(v2, (uint64_t)"}", 1);
}

uint64_t sub_100122618(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BE2A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100122694(_Unwind_Exception *a1)
{
}

uint64_t sub_1001226A8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BE4C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100122724(_Unwind_Exception *a1)
{
}

void sub_100122738(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1001227A0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1001227C8(_Unwind_Exception *a1)
{
}

void sub_1001227E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100122818(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_100122838(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_10012287C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BE6E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001228F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10012290C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BE900;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100122988(_Unwind_Exception *a1)
{
}

void sub_10012299C(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_100122AB8()
{
}

uint64_t sub_100122ADC(const __CFString *a1)
{
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Invalid resource key";
    goto LABEL_8;
  }
  unint64_t Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }
  v8.length = Length;
  *(_DWORD *)buffer = 0;
  v8.location = 0;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4, 0) != 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v5 = "Can't get key in cstring format";
LABEL_8:
    unint64_t v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  return bswap32(*(unsigned int *)buffer);
}

CFStringRef sub_100122BAC(unsigned int a1)
{
  *(_DWORD *)bytes = bswap32(a1);
  return CFStringCreateWithBytes(kCFAllocatorDefault, bytes, 4, 0, 0);
}

BOOL sub_100122BF4(__CFArray *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v5 = v3;
  if (v3) {
    CFArrayAppendValue(a1, v3);
  }
  sub_1000055E0((const void **)&v5);
  return v3 != 0;
}

void sub_100122C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL sub_100122C78(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v7 = v5;
  if (v5) {
    CFDictionarySetValue(a1, a2, v5);
  }
  sub_1000055E0((const void **)&v7);
  return v5 != 0;
}

void sub_100122CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

__CFDictionary *sub_100122D0C@<X0>(const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  if (keys && values && numValues)
  {
    uint64_t result = CFDictionaryCreate(kCFAllocatorDefault, keys, values, numValues, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFMutableDictionaryRef Mutable = result;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberRef v7 = 0;
    uint64_t result = (__CFDictionary *)sub_1000055AC(&v7);
  }
  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef sub_100122DAC@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *a1 = result;
  return result;
}

const void **sub_100122DF4@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v3 = CFPropertyListCreateData(kCFAllocatorDefault, propertyList, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v4 = v3;
  if (v3) {
    BOOL v5 = error == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v10 = std::generic_category();
    exception[1] = 22;
    exception[2] = v10;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't serialize property list";
  }
  CFIndex Length = CFDataGetLength(v3);
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v4);
    uint64_t v12 = sub_100009370(v11);
  }
  uint64_t v13 = 0;
  *a2 = v4;
  a2[1] = (const __CFData *)Length;
  sub_10002D56C(&v13);
  return sub_100089C98((const void **)&error);
}

void sub_100122F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_100089C98(&a10);
  _Unwind_Resume(a1);
}

const void **sub_100122F74@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, void *a3@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, length);
  CFDataRef v18 = v4;
  if (v4) {
    BOOL v5 = error == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v11 = std::generic_category();
    exception[1] = 12;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }
  CFPropertyListFormat format = kCFPropertyListXMLFormat_v1_0;
  CFPropertyListRef v6 = CFPropertyListCreateWithData(kCFAllocatorDefault, v4, 0, &format, &error);
  if (v6) {
    BOOL v7 = error == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v12 = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    *uint64_t v12 = &off_1001C3DE8;
    long long v14 = std::generic_category();
    v12[1] = Code;
    void v12[2] = v14;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "Can't convert data to property list";
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v6) != TypeID)
  {
    long long v15 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v6);
    long long v16 = sub_100009370(v15);
  }
  *a3 = v6;
  sub_10002D56C((const void **)&v18);
  return sub_100089C98((const void **)&error);
}

void sub_100123160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
  __cxa_free_exception(v12);
  sub_10002D56C(&a11);
  sub_100089C98(&a12);
  _Unwind_Resume(a1);
}

char *sub_1001231A8@<X0>(const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length = CFDataGetLength(a1);
  if (!a3) {
    a3 = Length;
  }
  unint64_t v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Unable to convert data to vector.", 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BytePtr = CFDataGetBytePtr(a1);
  sub_100123290(a4, a3);
  return sub_1001234A4((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_100123270(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100123290(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_10004B570();
    }
    BOOL v5 = (char *)a1[1];
    CFPropertyListRef v6 = operator new(__sz);
    BOOL v7 = &v5[(void)v6 - v2];
    CFRange v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      CFRange v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

BOOL sub_10012334C(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    BOOL v5 = (const char *)a3;
  }
  else {
    BOOL v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  CFStringRef v8 = v6;
  if (v6) {
    CFDictionarySetValue(a1, a2, v6);
  }
  sub_10004044C((const void **)&v8);
  return v6 != 0;
}

void sub_1001233D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004044C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1001233EC(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *a2 + 16 * v2;
    do
    {
      CFStringRef v6 = *(const void **)v4;
      BOOL v7 = *(const void **)(v4 + 8);
      v4 += 16;
      CFDictionaryAddValue(*a1, v6, v7);
    }
    while (v4 != v5);
  }
}

void sub_100123438(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1001233EC(a2, a1);
}

void sub_100123490(_Unwind_Exception *a1)
{
  sub_1000055AC(v1);
  _Unwind_Resume(a1);
}

char *sub_1001234A4(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10004B570();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      long long v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      long long v17 = 0;
    }
    long long v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    long long v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    long long v19 = &__src[a5];
    long long v21 = *(char **)(a1 + 8);
LABEL_17:
    long long v22 = &v5[a5];
    long long v23 = &v21[-a5];
    long long v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      long long v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  long long v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  long long v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100123ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1001240D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100124180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001241C0()
{
}

uint64_t sub_1001242C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  CFDataRef v3 = *(void **)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[]();
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v2;
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10012434C(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  CFStringRef v6 = (void **)(a1 + 24);
  *(void *)(a1 + 48) = 1018212795;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  if (a3 <= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a3;
  }
  *(void *)(a1 + 16) = v7;
  sub_1000B5340(v6, a3);
  if (a3) {
    sub_1001241C0();
  }
  return a1;
}

void sub_1001243E0(_Unwind_Exception *a1)
{
  sub_1001242C4(v1);
  _Unwind_Resume(a1);
}

void sub_1001243FC(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 96);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 24) == v4)
  {
    if (*(void *)(a1 + 16) > (unint64_t)*(unsigned int *)(a1 + 8)) {
      sub_1001241C0();
    }
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 48), &__lk);
      uint64_t v4 = *(void *)(a1 + 32);
    }
    while (*(void *)(a1 + 24) == v4);
  }
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(a1 + 32) = v4 - 8;
  uint64_t v7 = a1;
  *a2 = v5;
  operator new();
}

void sub_1001244EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100124530(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)(*a1 + 96);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(v3 + 32);
  unint64_t v6 = *(void *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10004B570();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_10004B588(v3 + 40, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    long long v17 = *(char **)(v3 + 24);
    size_t v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      size_t v16 = *(char **)(v3 + 24);
    }
    *(void *)(v3 + 24) = v14;
    *(void *)(v3 + 32) = v7;
    *(void *)(v3 + 40) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 32) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_100124644(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10012465C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100124694(uint64_t a1)
{
}

uint64_t sub_1001246BC(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void sub_100124700(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = sub_10004D088(a1, a2);
  void *v6 = off_1001BEB80;
  uint64_t v7 = v6 + 5;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v12 = 0;
  int v13 = v10;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  size_t v15 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100124CDC((uint64_t)&v12, v7);
  if (v15) {
    sub_100004944(v15);
  }
  if (v9) {
    sub_100004944(v9);
  }
  a1[7] = 0;
  a1[8] = 0;
  operator new();
}

void sub_10012484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_100004944(a13);
  }
  if (v14) {
    sub_100004944(v14);
  }
  sub_10004D0E4(v13);
  _Unwind_Resume(a1);
}

void sub_1001248B0(uint64_t a1, int a2)
{
  uint64_t v4 = *(std::mutex **)(a1 + 72);
  std::mutex::lock(v4);
  lseek(a2, 0, 0);
  *(void *)&long long v10 = AAFileStreamOpenWithFD(a2, 0);
  sub_100110034(&v13, &v10);
  sub_10011011C(&v12, &v13);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(uint8_t **)(v5 + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100110150(&v12, v6, 0x20uLL);
  sub_100110070(&v13, &v12, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v11);
  sub_100124F84(&v13, (uint64_t *)&v12, &v11, &v10);
  long long v8 = v10;
  long long v10 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v8;
  if (v9)
  {
    sub_100004944(v9);
    if (*((void *)&v10 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  sub_100110038(&v11);
  if (v7) {
    sub_100004944(v7);
  }
  sub_100110120(&v12);
  sub_100110038(&v13);
  std::mutex::unlock(v4);
}

void sub_1001249D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v6 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v8 = va_arg(va2, AEAContext);
  sub_100110038((AAByteStream *)va);
  if (v4) {
    sub_100004944(v4);
  }
  sub_100110120((AEAContext *)va1);
  sub_100110038((AAByteStream *)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void *sub_100124A2C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_10004D088(a1, a3);
  *uint64_t v5 = off_1001BEB80;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v7 = a2[10];
  a1[9] = a2[9];
  a1[10] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001248B0((uint64_t)a1, *(_DWORD *)(a1[5] + 8));
  return a1;
}

void sub_100124ACC(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v1[10];
  if (v4) {
    sub_100004944(v4);
  }
  sub_100151AF0((uint64_t)v1, v2);
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

double sub_100124AF8@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_100125114(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t sub_100124B3C(uint64_t a1, uint64_t a2)
{
  return sub_100110458(*(void *)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_100124B64(uint64_t a1)
{
  return **(void **)(a1 + 40);
}

uint64_t sub_100124B70(uint64_t a1)
{
  return sub_100110440(*(void *)(a1 + 56));
}

void *sub_100124B78(void *a1)
{
  *a1 = off_1001BEB80;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_100004944(v4);
  }
  *a1 = off_1001A4E78;
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_100004944(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_100124C10(void *a1)
{
  *a1 = off_1001BEB80;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_100004944(v4);
  }
  *a1 = off_1001A4E78;
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_100004944(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete();
}

void *sub_100124CC8(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"AEA", 3);
}

void *sub_100124CDC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  double result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = off_1001BEC60;
  result[3] = *(void *)a1;
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  result[5] = *(void *)(a1 + 16);
  result[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_100124D58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001BEC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100124D78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001BEC60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100124DCC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_100004944(v1);
  }
}

void sub_100124DE0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100124E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100124F34((std::mutex **)va, 0);
  _Unwind_Resume(a1);
}

void sub_100124E70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

std::mutex *sub_100124EA8(uint64_t a1)
{
  double result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100124EF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *sub_100124F34(std::mutex **a1, std::mutex *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::mutex::~mutex(result);
    operator delete();
  }
  return result;
}

void *sub_100124F84@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  AEAContext v8 = operator new(0x30uLL);
  double result = sub_100124FF8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100124FE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100124FF8(void *a1, void *a2, uint64_t *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001BED28;
  sub_100110418(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_100125040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100125054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001BED28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100125074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001BED28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

AAByteStream *sub_1001250C8(AAByteStream *a1)
{
  uint64_t v2 = a1 + 3;
  sub_100110038(a1 + 5);
  sub_100110120(a1 + 4);
  return sub_100110038(v2);
}

void sub_100125114(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  sub_100125190(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10012517C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100125190(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B6340;
  sub_100124A2C(a1 + 3, a2, a3);
  return a1;
}

void sub_1001251D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

dispatch_group_t *sub_100125EA0(dispatch_group_t *a1)
{
  *a1 = dispatch_group_create();
  return a1;
}

NSObject **sub_100125ECC(NSObject **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

intptr_t sub_100125EFC(dispatch_group_t *a1, dispatch_time_t a2)
{
  return dispatch_group_wait(*a1, a2);
}

dispatch_queue_t *sub_100125F04(dispatch_queue_t *a1, char *label, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v6 = &_dispatch_queue_attr_concurrent;
      uint64_t v5 = label;
      goto LABEL_6;
    case 1:
      global_queue = dispatch_get_global_queue(21, 0);
      dispatch_queue_t v7 = dispatch_queue_create_with_target_V2(label, 0, global_queue);
      goto LABEL_8;
    case 0:
      uint64_t v5 = label;
      uint64_t v6 = 0;
LABEL_6:
      dispatch_queue_t v7 = dispatch_queue_create(v5, v6);
LABEL_8:
      *a1 = v7;
      break;
  }
  return a1;
}

void *sub_100125F84(void *result, void *a2)
{
  *double result = *a2;
  *a2 = 0;
  return result;
}

void sub_100125F94(dispatch_queue_t *a1, void *a2)
{
}

void sub_100125F9C(dispatch_queue_t *a1, dispatch_group_t *a2, void *a3)
{
}

void sub_100125FAC(NSObject **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    if (a3)
    {
      dispatch_time_t v6 = dispatch_time(0, 1000 * a3);
      dispatch_queue_t v7 = *a1;
      AEAContext v8 = *a2;
      dispatch_after(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = *a1;
      dispatch_async(v9, v4);
    }
  }
}

void sub_100126030(dispatch_queue_t *a1, void *a2)
{
}

void sub_100126038(dispatch_queue_t *a1, void *a2)
{
}

void sub_100126040(dispatch_queue_t *a1, void *a2)
{
}

void sub_100126048(dispatch_object_t *a1)
{
}

void sub_100126050(dispatch_object_t *a1)
{
}

uint64_t sub_100126058(dispatch_object_t *a1, int a2)
{
  if ((a2 - 1) > 2) {
    intptr_t v3 = 5;
  }
  else {
    intptr_t v3 = *(void *)&asc_100178650[8 * a2 - 8];
  }
  global_queue = dispatch_get_global_queue(v3, 0);
  if (!global_queue) {
    return 22;
  }
  dispatch_set_target_queue(*a1, global_queue);
  return 0;
}

dispatch_semaphore_t *sub_1001260BC(dispatch_semaphore_t *a1, intptr_t value)
{
  *a1 = dispatch_semaphore_create(value);
  return a1;
}

intptr_t sub_1001260EC(dispatch_semaphore_t *a1, dispatch_time_t a2)
{
  return dispatch_semaphore_wait(*a1, a2);
}

intptr_t sub_1001260F4(dispatch_semaphore_t *a1)
{
  return dispatch_semaphore_signal(*a1);
}

dispatch_block_t *sub_1001260FC(dispatch_block_t *a1, void *a2)
{
  *a1 = dispatch_block_create((dispatch_block_flags_t)0, a2);
  return a1;
}

void sub_10012612C(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    dispatch_block_cancel(v1);
  }
}

const void **sub_10012613C(const void **a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2)
  {
    dispatch_block_cancel(v2);
    if (*a1) {
      _Block_release(*a1);
    }
  }
  return a1;
}

uint64_t sub_100126180@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, void *a4@<X8>)
{
  sub_100009FEC((uint64_t)v35);
  AEAContext v8 = sub_1000039A0(&v36, (uint64_t)"Couldn't open ", 14);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  AEAContext v12 = sub_1000039A0(v8, v10, v11);
  AAByteStream v13 = sub_1000039A0(v12, (uint64_t)"' with flags ", 13);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  size_t v15 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a3 == 13)
  {
    if (*(char *)(a2 + 23) >= 0) {
      size_t v16 = (const char *)a2;
    }
    else {
      size_t v16 = *(const char **)a2;
    }
    if (fstatat(a1, v16, &v34, 0))
    {
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v33.__r_.__value_.__l.__size_ = 65;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = 16;
      sub_1001266A0(&v31, (long long *)&v33);
      sub_1000039A0(v32, (uint64_t)"fstatfs failed with err code", 28);
      __error();
      std::ostream::operator<<();
      sub_1000039A0(v32, (uint64_t)" trying to check permission after EACCES", 40);
      std::ostream::~ostream();
      sub_10012BABC((uint64_t)&v31);
      std::ios::~ios();
    }
    else
    {
      std::to_string(&v31, v34.st_gid);
      long long v17 = getgrgid(v34.st_gid);
      if (v17) {
        sub_100055434(&v31, v17->gr_name);
      }
      uint64_t v18 = sub_1000039A0(&v36, (uint64_t)", UID:GID(Name)=", 16);
      std::to_string(&v33, v34.st_uid);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = &v33;
      }
      else {
        long long v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      long long v21 = sub_1000039A0(v18, (uint64_t)v19, size);
      long long v22 = sub_1000039A0(v21, (uint64_t)":", 1);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v31;
      }
      else {
        long long v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v31.__r_.__value_.__l.__size_;
      }
      sub_1000039A0(v22, (uint64_t)v23, v24);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      int64_t v25 = sub_1000039A0(&v36, (uint64_t)" mode=", 6);
      uint64_t v26 = *v25;
      *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) |= 0x200u;
      long long v27 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v27 + *(void *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v27, (uint64_t)" (our euid is ", 14);
      geteuid();
      uint64_t v28 = (void *)std::ostream::operator<<();
      sub_1000039A0(v28, (uint64_t)")", 1);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_100004624((uint64_t)v37, a4);
  *(void *)((char *)v35
  uint64_t v36 = v29;
  if (v38 < 0) {
    operator delete((void *)v37[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10012663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10011BC0C((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void *sub_1001266A0(void *a1, long long *a2)
{
  intptr_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001342BC((uint64_t)a1, a2);
  *a1 = off_1001BF0A0;
  a1[45] = &off_1001BF1A0;
  a1[46] = &off_1001BF1C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BF0A0;
  a1[45] = off_1001BF128;
  a1[46] = off_1001BF150;
  return a1;
}

void sub_1001267A0(_Unwind_Exception *a1)
{
  sub_10012BABC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001267C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100126808(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t v3 = open((const char *)a1, a2, 438);
  if (v3 == -1)
  {
    int v11 = *__error();
    if (sub_1000D850C())
    {
      *(void *)&long long v21 = 0;
      AEAContext v12 = sub_1000D848C();
      os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v2 = *(void *)v2;
      }
      int v13 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&uint8_t buf[4] = 69;
      __int16 v24 = 2080;
      int64_t v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      __int16 v26 = 2081;
      uint64_t v27 = v2;
      __int16 v28 = 1024;
      int v29 = v13;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
      if (v14)
      {
        size_t v15 = (char *)v14;
        fprintf(__stderrp, "%s\n", v14);
        free(v15);
      }
    }
    else
    {
      size_t v16 = sub_1000D848C();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v2 + 23) < 0) {
          uint64_t v2 = *(void *)v2;
        }
        int v17 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&uint8_t buf[4] = 69;
        __int16 v24 = 2080;
        int64_t v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        __int16 v26 = 2081;
        uint64_t v27 = v2;
        __int16 v28 = 1024;
        int v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%.*s: Failed opening %{private}s, errno %d", buf, 0x22u);
      }
    }
    *__error() = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)buf);
    sub_1000039A0(buf, (uint64_t)"Couldn't open file with flags ", 30);
    uint64_t v19 = *(void *)buf;
    *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] = *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(void *)(v19 - 24) + 8] |= 0x200u;
    std::ostream::operator<<();
    int64_t v20 = __error();
    sub_10000550C((uint64_t)exception, (uint64_t)buf, *v20);
  }
  uint64_t v4 = v3;
  if (sub_1000D8524())
  {
    *(void *)&long long v21 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((void *)&v21 + 1) = 36;
    int v22 = 2;
    sub_100126CF0(buf, &v21);
    sub_1000039A0(v30, (uint64_t)"'", 1);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    sub_1000039A0(v30, v6, v7);
    sub_1000039A0(v30, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v8 = v30[0];
    *(_DWORD *)((char *)&v30[1] + *(void *)(v30[0] - 24)) = *(_DWORD *)((unsigned char *)&v30[1] + *(void *)(v30[0] - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v30[1] + *(void *)(v8 - 24)) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v9 = v30[0];
    *(_DWORD *)((char *)&v30[1] + *(void *)(v30[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v30[1] + *(void *)(v9 - 24)) = *(_DWORD *)((unsigned char *)&v30[1] + *(void *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v30, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012C230((uint64_t)buf);
    std::ios::~ios();
  }
  return v4;
}

void sub_100126CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100126CF0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013434C((uint64_t)a1, a2);
  *a1 = off_1001BF2C0;
  a1[45] = &off_1001BF3C0;
  a1[46] = &off_1001BF3E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BF2C0;
  a1[45] = off_1001BF348;
  a1[46] = off_1001BF370;
  return a1;
}

void sub_100126DF0(_Unwind_Exception *a1)
{
  sub_10012C230(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100126E14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100126E58(int a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  v24[1] = 438;
  uint64_t v25 = v5;
  v24[0] = a3 | 0x100;
  uint64_t v6 = fcntl(a1, 56, v24);
  if (v6 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v19);
    size_t v15 = __error();
    sub_100126180(a1, a2, *v15, &v21);
    if ((v23 & 0x80u) == 0) {
      size_t v16 = &v21;
    }
    else {
      size_t v16 = (long long *)v21;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = *((void *)&v21 + 1);
    }
    sub_1000039A0(v19, (uint64_t)v16, v17);
    uint64_t v18 = __error();
    sub_10000550C((uint64_t)exception, (uint64_t)v19, *v18);
  }
  uint64_t v7 = v6;
  if (sub_1000D8524())
  {
    *(void *)&long long v21 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((void *)&v21 + 1) = 36;
    int v22 = 2;
    sub_100127170(v19, &v21);
    sub_1000039A0(v20, (uint64_t)"'", 1);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    sub_1000039A0(v20, v9, v10);
    sub_1000039A0(v20, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v11 = v20[0];
    *(_DWORD *)((char *)&v20[1] + *(void *)(v20[0] - 24)) = *(_DWORD *)((unsigned char *)&v20[1] + *(void *)(v20[0] - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v20[1] + *(void *)(v11 - 24)) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v12 = v20[0];
    *(_DWORD *)((char *)&v20[1] + *(void *)(v20[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v20[1] + *(void *)(v12 - 24)) = *(_DWORD *)((unsigned char *)&v20[1] + *(void *)(v12 - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v20, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012C9A4((uint64_t)v19);
    std::ios::~ios();
  }
  return v7;
}

void sub_100127108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    sub_10000359C((uint64_t)va);
    if ((v4 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_10000359C((uint64_t)va);
    if (!v4) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

void *sub_100127170(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001343DC((uint64_t)a1, a2);
  *a1 = off_1001BF4E0;
  a1[45] = &off_1001BF5E0;
  a1[46] = &off_1001BF608;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BF4E0;
  a1[45] = off_1001BF568;
  a1[46] = off_1001BF590;
  return a1;
}

void sub_100127270(_Unwind_Exception *a1)
{
  sub_10012C9A4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100127294(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001272D8(uint64_t a1)
{
  *(void *)a1 = off_1001BED78;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != -1)
  {
    close(v2);
    if (sub_1000D8524())
    {
      *(void *)&long long v4 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((void *)&v4 + 1) = 45;
      int v5 = 2;
      sub_1001273C8(v6, &v4);
      sub_1000039A0(v7, (uint64_t)"File descriptor ", 16);
      std::ostream::operator<<();
      sub_1000039A0(v7, (uint64_t)" closed", 7);
      std::ostream::~ostream();
      sub_10012D118((uint64_t)v6);
      std::ios::~ios();
    }
  }
  return a1;
}

void *sub_1001273C8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013446C((uint64_t)a1, a2);
  *a1 = off_1001BF700;
  a1[45] = &off_1001BF800;
  a1[46] = &off_1001BF828;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BF700;
  a1[45] = off_1001BF788;
  a1[46] = off_1001BF7B0;
  return a1;
}

void sub_1001274C8(_Unwind_Exception *a1)
{
  sub_10012D118(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001274EC(uint64_t a1)
{
  return a1;
}

void sub_100127534(uint64_t a1)
{
  sub_1001272D8(a1);
  operator delete();
}

uint64_t sub_10012756C(uint64_t a1, int a2, char a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = off_1001A64C8;
  *(unsigned char *)(a1 + 12) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1001275D4(a1);
  return a1;
}

void sub_1001275C0(_Unwind_Exception *a1)
{
  sub_1001272D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001275D4(uint64_t a1)
{
  memset(&v31, 0, sizeof(v31));
  uint64_t result = sub_100127A30(a1, &v31);
  if ((v31.st_mode & 0xB000) != 0x2000)
  {
    *(void *)(a1 + 16) = v31.st_size;
    goto LABEL_17;
  }
  bzero(v34, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*(_DWORD *)(a1 + 8), 50, v34) < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v18 = __error();
    uint64_t v19 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"get path failed", *v18);
  }
  if (!basename_r(v34, bsdName))
  {
    int64_t v20 = __cxa_allocate_exception(0x40uLL);
    long long v21 = __error();
    int v22 = (void *)sub_100002B24((uint64_t)v20, (uint64_t)"basename_r failed", *v21);
  }
  CFDictionaryRef v3 = IOBSDNameMatching(kIOMainPortDefault, 0, bsdName);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  io_registry_entry_t v5 = MatchingService;
  if (!MatchingService)
  {
    unsigned __int8 v23 = __cxa_allocate_exception(0x40uLL);
    __int16 v24 = (void *)sub_100002B24((uint64_t)v23, (uint64_t)"device not found in registry", 0x13u);
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"Size", kCFAllocatorDefault, 0);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (CFProperty && CFGetTypeID(CFProperty) != TypeID)
  {
    uint64_t v25 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(CFProperty);
    __int16 v26 = sub_100009368(v25);
  }
  CFTypeRef cf = CFProperty;
  CFTypeRef v8 = IORegistryEntryCreateCFProperty(v5, @"Preferred Block Size", kCFAllocatorDefault, 0);
  CFTypeID v9 = CFNumberGetTypeID();
  if (v8 && CFGetTypeID(v8) != v9)
  {
    uint64_t v27 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v8);
    __int16 v28 = sub_100009370(v27);
  }
  CFTypeRef v29 = v8;
  IOObjectRelease(v5);
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFNumberGetTypeID()))
  {
    int v13 = "device size not found in registry";
LABEL_20:
    uint64_t v14 = 19;
    goto LABEL_22;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    int v13 = "Failed converting CFNumber to longlong";
    uint64_t v14 = 22;
LABEL_22:
    size_t v15 = __cxa_allocate_exception(0x40uLL);
    void *v15 = &off_1001C3DE8;
    size_t v16 = std::generic_category();
    v15[1] = v14;
    void v15[2] = v16;
    *((unsigned char *)v15 + 24) = 0;
    *((unsigned char *)v15 + 48) = 0;
    v15[7] = v13;
  }
  *(void *)(a1 + 16) = valuePtr;
  if (!v29 || (CFTypeID v11 = CFGetTypeID(v29), v11 != CFNumberGetTypeID()))
  {
    int v13 = "device block size not found in registry";
    goto LABEL_20;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)v29, kCFNumberLongLongType, &valuePtr)) {
    goto LABEL_21;
  }
  *(void *)(a1 + 24) = valuePtr;
  sub_1000055E0(&v29);
  uint64_t result = (uint64_t)sub_1000055E0(&cf);
LABEL_17:
  __darwin_ino64_t st_ino = v31.st_ino;
  *(void *)(a1 + 32) = v31.st_dev;
  *(void *)(a1 + 40) = st_ino;
  return result;
}

void sub_1001279D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
  __cxa_free_exception(v13);
  sub_1000055E0(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100127A30@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 8), a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_100127A9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100127AB0@<X0>(uint64_t a1@<X0>, statfs *a2@<X8>)
{
  uint64_t result = fstatfs(*(_DWORD *)(a1 + 8), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"fstatfs failed", *v4);
  }
  return result;
}

void sub_100127B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100127B30(uint64_t a1)
{
  return (*(_WORD *)(a1 + 4) & 0xB000) == 0x2000;
}

BOOL sub_100127B48(uint64_t a1)
{
  sub_100127A30(a1, &v2);
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t sub_100127B80()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  sub_100127AB0(v0, &__src);
  memcpy(__dst, &__src, sizeof(__dst));
  sub_100004890((void *)v2, &__dst[72]);
  *(void *)&long long v7 = "FileDescriptor::get_mounted_on_fs() const";
  *((void *)&v7 + 1) = 33;
  int v8 = 2;
  sub_100003838(&__src, &v7);
  sub_1000039A0(&__src.f_mntonname[272], (uint64_t)"File system is ", 15);
  int v3 = *(char *)(v2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = *(void *)v2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 8);
  }
  sub_1000039A0(&__src.f_mntonname[272], v4, v5);
  std::ostream::~ostream();
  sub_100003EB0((uint64_t)&__src);
  return std::ios::~ios();
}

void sub_100127CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100127D20(uint64_t a1, uint64_t a2)
{
  sub_100127AB0(a1, &v7);
  int32_t v3 = v7.f_fsid.val[0];
  int32_t v4 = v7.f_fsid.val[1];
  sub_100127AB0(a2, &v7);
  return v3 == v7.f_fsid.val[0] && v4 == v7.f_fsid.val[1];
}

void sub_100127DC4(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 144);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    int32_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_1001344FC);
  }
}

uint64_t sub_100127E20(int a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = (uint64_t *)*a2;
  }
  if (fcntl(a1, 57, v2) < 0) {
    return -*__error();
  }
  else {
    return 0;
  }
}

off_t sub_100127E70(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  if (fstatat(a1, (const char *)a2, &v10, 32))
  {
    if (*__error() == 13 || *__error() == 1) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v9);
    sub_1000039A0(v9, (uint64_t)"Cannot stat ", 12);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    sub_1000039A0(v9, v6, v7);
    int v8 = __error();
    sub_10000550C((uint64_t)exception, (uint64_t)v9, *v8);
  }
  return v10.st_size;
}

void sub_100128004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100128088(uint64_t a1, uint64_t a2)
{
  ssize_t v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v5 = v4;
  if (v4 < 0 || v4 != *(void *)(a2 + 16))
  {
    *(void *)&long long v11 = "int FileLocal::write(const sg_entry &)";
    *((void *)&v11 + 1) = 20;
    int v12 = 16;
    sub_100128208(v13, &v11);
    sub_1000039A0(v14, (uint64_t)"Error writing file @ ", 21);
    sub_100149114(v14);
    sub_1000039A0(v14, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    sub_1000039A0(v14, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012D88C((uint64_t)v13);
    std::ios::~ios();
    if (v5 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 24) + v4;
    uint64_t v7 = (unint64_t *)(*(void *)(a1 + 40) + 64);
    unint64_t v8 = atomic_load(v7);
    if (v8 < v6)
    {
      unint64_t v9 = v8;
      do
      {
        atomic_compare_exchange_strong((atomic_ullong *volatile)v7, &v9, v6);
        if (v9 == v8) {
          break;
        }
        unint64_t v8 = v9;
      }
      while (v9 < v6);
    }
  }
  return v5;
}

void sub_1001281F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10012832C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100128208(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013520C((uint64_t)a1, a2);
  *a1 = off_1001BF920;
  a1[45] = &off_1001BFA20;
  a1[46] = &off_1001BFA48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BF920;
  a1[45] = off_1001BF9A8;
  a1[46] = off_1001BF9D0;
  return a1;
}

void sub_100128308(_Unwind_Exception *a1)
{
  sub_10012D88C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012832C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100128370(uint64_t a1, uint64_t a2)
{
  ssize_t v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v4 = v3;
  if (v3 < 0 || v3 != *(void *)(a2 + 16))
  {
    *(void *)&long long v6 = "int FileLocal::read(const sg_entry &)";
    *((void *)&v6 + 1) = 19;
    int v7 = 16;
    sub_1001284B0(v8, &v6);
    sub_1000039A0(v9, (uint64_t)"Error reading file @ ", 21);
    sub_100149114(v9);
    sub_1000039A0(v9, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    sub_1000039A0(v9, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012E000((uint64_t)v8);
    std::ios::~ios();
    if (v4 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  return v4;
}

void sub_10012849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001285D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001284B0(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013529C((uint64_t)a1, a2);
  *a1 = off_1001BFB40;
  a1[45] = &off_1001BFC40;
  a1[46] = &off_1001BFC68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BFB40;
  a1[45] = off_1001BFBC8;
  a1[46] = off_1001BFBF0;
  return a1;
}

void sub_1001285B0(_Unwind_Exception *a1)
{
  sub_10012E000(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001285D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100128618(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v4 < a2)
  {
    char __buf = 0;
    ssize_t v5 = pwrite(**(_DWORD **)(a1 + 56), &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      ssize_t v6 = v5;
      *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
      *((void *)&v8 + 1) = 23;
      int v9 = 16;
      sub_10008CCE0(v10, &v8);
      sub_1000039A0(v11, (uint64_t)"Failed to increase file size, pwrite returned ", 46);
      std::ostream::operator<<();
      sub_1000039A0(v11, (uint64_t)" errno: ", 8);
      __error();
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_1000929D0((uint64_t)v10);
      std::ios::~ios();
      if (v6 != -1) {
        return 4294967291;
      }
      return -*__error();
    }
LABEL_7:
    uint64_t result = 0;
    atomic_store(a2, (unint64_t *)(*(void *)(a1 + 40) + 64));
    return result;
  }
  if (v4 <= a2 || ftruncate(**(_DWORD **)(a1 + 56), a2) != -1) {
    goto LABEL_7;
  }
  *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
  *((void *)&v8 + 1) = 23;
  int v9 = 16;
  sub_100128818(v10, &v8);
  sub_1000039A0(v11, (uint64_t)"ftruncate failed, errno: ", 25);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_10012E774((uint64_t)v10);
  std::ios::~ios();
  return -*__error();
}

void sub_1001287F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10012893C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100128818(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013532C((uint64_t)a1, a2);
  *a1 = off_1001BFD60;
  a1[45] = &off_1001BFE60;
  a1[46] = &off_1001BFE88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BFD60;
  a1[45] = off_1001BFDE8;
  a1[46] = off_1001BFE10;
  return a1;
}

void sub_100128918(_Unwind_Exception *a1)
{
  sub_10012E774(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012893C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100128980(uint64_t a1, int a2)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    sub_1000806F4(v14, &v12);
    sub_1000039A0(v15, (uint64_t)"Calling ", 8);
    sub_10014907C(v15, a2);
    sub_1000039A0(v15, (uint64_t)" on ", 4);
    sub_1001493BC((uint64_t)v15, a1);
    std::ostream::~ostream();
    sub_1000874EC((uint64_t)v14);
    std::ios::~ios();
  }
  if (a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      uint64_t v4 = -*__error();
      goto LABEL_6;
    }
    return 0;
  }
  if (a2 == 2) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = 1;
  }
  if ((*(void *)(*(void *)(a1 + 40) + 56) & v5) != 0)
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
      *((void *)&v12 + 1) = 20;
      int v13 = 2;
      sub_100128D70(v14, &v12);
      sub_10014907C(v15, a2);
      sub_1000039A0(v15, (uint64_t)" is not supported", 17);
      std::ostream::~ostream();
      sub_10012EEE8((uint64_t)v14);
      std::ios::~ios();
    }
    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 16))(a1, a2 != 2);
  }
  int v7 = **(_DWORD **)(a1 + 56);
  if (a2 == 2) {
    int v8 = fcntl(v7, 51, 0);
  }
  else {
    int v8 = fcntl(v7, 85, 0);
  }
  if (v8 != -1) {
    return 0;
  }
  stat v10 = __error();
  uint64_t v4 = -*v10;
  unsigned int v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), v5, memory_order_relaxed);
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 0;
    sub_100128ED8(v14, &v12);
    sub_10014907C(v15, a2);
    sub_1000039A0(v15, (uint64_t)" is not supported (err code ", 28);
    __error();
    std::ostream::operator<<();
    sub_1000039A0(v15, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_10012F65C((uint64_t)v14);
    std::ios::~ios();
    if (a2 == 2) {
      return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
    }
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), 2uLL, memory_order_relaxed);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 1);
  }
LABEL_6:
  if (v4)
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 16;
    sub_100129040(v14, &v12);
    sub_10014907C(v15, a2);
    sub_1000039A0(v15, (uint64_t)" failed wih error ", 18);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10012FDD0((uint64_t)v14);
    std::ios::~ios();
  }
  return v4;
}

void sub_100128D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100128FFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100128D70(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001353BC((uint64_t)a1, a2);
  *a1 = off_1001BFF80;
  a1[45] = &off_1001C0080;
  a1[46] = &off_1001C00A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001BFF80;
  a1[45] = off_1001C0008;
  a1[46] = off_1001C0030;
  return a1;
}

void sub_100128E70(_Unwind_Exception *a1)
{
  sub_10012EEE8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100128E94(uint64_t a1)
{
  return a1;
}

void *sub_100128ED8(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013544C((uint64_t)a1, a2);
  *a1 = off_1001C01A0;
  a1[45] = &off_1001C02A0;
  a1[46] = &off_1001C02C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C01A0;
  a1[45] = off_1001C0228;
  a1[46] = off_1001C0250;
  return a1;
}

void sub_100128FD8(_Unwind_Exception *a1)
{
  sub_10012F65C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100128FFC(uint64_t a1)
{
  return a1;
}

void *sub_100129040(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001354DC((uint64_t)a1, a2);
  *a1 = off_1001C03C0;
  a1[45] = &off_1001C04C0;
  a1[46] = &off_1001C04E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C03C0;
  a1[45] = off_1001C0448;
  a1[46] = off_1001C0470;
  return a1;
}

void sub_100129140(_Unwind_Exception *a1)
{
  sub_10012FDD0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100129164(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001291A8(uint64_t a1, unint64_t a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  sub_100127DC4(v6);
  size_t v7 = *(void *)(v6 + 72);
  int v8 = *(unsigned __int8 *)(v6 + 88);
  uint64_t v9 = *(void *)(a1 + 40);
  sub_100127DC4(v9);
  if (!*(unsigned char *)(v9 + 136) || !v8)
  {
    *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((void *)&v25 + 1) = 26;
    LODWORD(v26) = 0;
    sub_100129698(&v27, &v25);
    sub_1000039A0(v33, (uint64_t)"fd block size retrieval failed (err code ", 41);
    std::ostream::operator<<();
    sub_1000039A0(v33, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_100130544((uint64_t)&v27);
    goto LABEL_14;
  }
  stat v10 = *(void **)(v9 + 96);
  unint64_t v11 = (a2 + v7 - 1) / v7 * v7;
  unint64_t v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    unint64_t v14 = a2 - v11 + a3;
    size_t v15 = v14 / v7 * v7;
    unint64_t v16 = v14 == v14 % v7 ? 0 : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = v16;
      size_t v26 = v14 / v7 * v7;
      size_t v19 = fcntl(**(_DWORD **)(a1 + 56), 99, &v25);
      if (!v19)
      {
        if (v16 != a2)
        {
          int64_t v20 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v16 - a2;
          unint64_t v30 = a2;
          unint64_t v31 = v16 - a2;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &v27);
          if (v28) {
            sub_100004944(v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            sub_100129968(&v27, &v23);
            sub_1000039A0(v33, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60);
            __error();
            std::ostream::operator<<();
            sub_1000039A0(v33, (uint64_t)")", 1);
            sub_100129A8C((uint64_t)&v27);
            return v7;
          }
        }
        if (v15 + v16 < v12)
        {
          size_t v21 = a3 - v15 - (v16 - a2);
          int v22 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v22;
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v21;
          unint64_t v30 = v15 + v16;
          unint64_t v31 = v21;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &v27);
          if (v28) {
            sub_100004944(v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            sub_100129AD0(&v27, &v23);
            sub_1000039A0(v33, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58);
            __error();
            std::ostream::operator<<();
            sub_1000039A0(v33, (uint64_t)")", 1);
            sub_100129BF4((uint64_t)&v27);
            return v7;
          }
        }
        return 0;
      }
      size_t v7 = v19;
      *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((void *)&v23 + 1) = 26;
      int v24 = 0;
      sub_100129800(&v27, &v23);
      sub_1000039A0(v33, (uint64_t)"Punch hole is not supported (err code ", 38);
      __error();
      std::ostream::operator<<();
      sub_1000039A0(v33, (uint64_t)")", 1);
      std::ostream::~ostream();
      sub_100130CB8((uint64_t)&v27);
LABEL_14:
      std::ios::~ios();
      return v7;
    }
  }
  ssize_t v17 = sub_100129C38(a1, a2, a3, v7, v10);
  if (v17 == a3) {
    return 0;
  }
  size_t v7 = v17;
  *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((void *)&v25 + 1) = 26;
  LODWORD(v26) = 16;
  sub_100129DF4(&v27, &v25);
  sub_1000039A0(v33, (uint64_t)"Write zeros to unmap region failed (err code", 44);
  __error();
  std::ostream::operator<<();
  sub_1000039A0(v33, (uint64_t)")", 1);
  std::ostream::~ostream();
  sub_100132314((uint64_t)&v27);
  std::ios::~ios();
  if ((v7 & 0x8000000000000000) == 0) {
    return 4294967291;
  }
  else {
    return v7;
  }
}

void sub_100129628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_100004944(a17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100129698(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013556C((uint64_t)a1, a2);
  *a1 = off_1001C05E0;
  a1[45] = &off_1001C06E0;
  a1[46] = &off_1001C0708;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C05E0;
  a1[45] = off_1001C0668;
  a1[46] = off_1001C0690;
  return a1;
}

void sub_100129798(_Unwind_Exception *a1)
{
  sub_100130544(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001297BC(uint64_t a1)
{
  return a1;
}

void *sub_100129800(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001355FC((uint64_t)a1, a2);
  *a1 = off_1001C0800;
  a1[45] = &off_1001C0900;
  a1[46] = &off_1001C0928;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C0800;
  a1[45] = off_1001C0888;
  a1[46] = off_1001C08B0;
  return a1;
}

void sub_100129900(_Unwind_Exception *a1)
{
  sub_100130CB8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100129924(uint64_t a1)
{
  return a1;
}

void *sub_100129968(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013568C((uint64_t)a1, a2);
  *a1 = off_1001C0A20;
  a1[45] = &off_1001C0B20;
  a1[46] = &off_1001C0B48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C0A20;
  a1[45] = off_1001C0AA8;
  a1[46] = off_1001C0AD0;
  return a1;
}

void sub_100129A68(_Unwind_Exception *a1)
{
  sub_10013142C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100129A8C(uint64_t a1)
{
  return a1;
}

void *sub_100129AD0(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013571C((uint64_t)a1, a2);
  *a1 = off_1001C0C40;
  a1[45] = &off_1001C0D40;
  a1[46] = &off_1001C0D68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C0C40;
  a1[45] = off_1001C0CC8;
  a1[46] = off_1001C0CF0;
  return a1;
}

void sub_100129BD0(_Unwind_Exception *a1)
{
  sub_100131BA0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100129BF4(uint64_t a1)
{
  return a1;
}

ssize_t sub_100129C38(uint64_t a1, off_t a2, size_t a3, size_t a4, void *a5)
{
  size_t v7 = a3;
  int v22 = 0;
  long long v23 = 0;
  int v24 = 0;
  sub_100129F5C((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    stat v10 = v23;
    do
    {
      if (v7 >= a4) {
        size_t v11 = a4;
      }
      else {
        size_t v11 = v7;
      }
      if (v10 >= v24)
      {
        uint64_t v12 = v10 - v22;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_10004B570();
        }
        unint64_t v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)((char *)v24 - (char *)v22) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          size_t v15 = (char *)sub_10006D6E8((uint64_t)&v24, v14);
        }
        else {
          size_t v15 = 0;
        }
        unint64_t v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        uint64_t v18 = v22;
        ssize_t v17 = v23;
        size_t v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }
          while (v17 != v18);
          ssize_t v17 = v22;
        }
        stat v10 = v16 + 1;
        int v22 = v19;
        long long v23 = v16 + 1;
        int v24 = (iovec *)&v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }
      long long v23 = v10;
      v7 -= v11;
    }
    while (v7);
  }
  else
  {
    stat v10 = v23;
  }
  ssize_t v20 = pwritev(**(_DWORD **)(a1 + 56), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  return v20;
}

void sub_100129DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100129DF4(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001357AC((uint64_t)a1, a2);
  *a1 = off_1001C0E60;
  a1[45] = &off_1001C0F60;
  a1[46] = &off_1001C0F88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C0E60;
  a1[45] = off_1001C0EE8;
  a1[46] = off_1001C0F10;
  return a1;
}

void sub_100129EF4(_Unwind_Exception *a1)
{
  sub_100132314(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100129F18(uint64_t a1)
{
  return a1;
}

void sub_100129F5C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10004B570();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10006D6E8(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    size_t v11 = (char *)*a1;
    stat v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      stat v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_10012A010(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v1 + 48)
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0 && sub_10005B610())
  {
    return 0;
  }
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v4) {
    int v5 = 6;
  }
  else {
    int v5 = 5;
  }
  if (!flock(**(_DWORD **)(a1 + 56), v5))
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    sub_1000665B0(v10, &v8);
    sub_1000039A0(v11, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    sub_1000039A0(v11, (uint64_t)") is locked", 11);
    std::ostream::~ostream();
    sub_1000667A8((uint64_t)v10);
    std::ios::~ios();
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 1;
    return result;
  }
  if (*__error() != 35)
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    sub_1000BB0E8(v10, &v8);
    sub_1000039A0(v11, (uint64_t)"flock returned errno ", 21);
    __error();
    std::ostream::operator<<();
    sub_1000039A0(v11, (uint64_t)", keeping file unlocked", 23);
    std::ostream::~ostream();
    sub_1000C7BA8((uint64_t)v10);
    std::ios::~ios();
    return 0;
  }
  *(void *)&long long v8 = "int FileLocal::lock()";
  *((void *)&v8 + 1) = 19;
  int v9 = 16;
  sub_10012A2F4(v10, &v8);
  sub_1000039A0(v11, (uint64_t)"Cannot acquire ", 15);
  if (v4) {
    uint64_t v6 = "exclusive";
  }
  else {
    uint64_t v6 = "shared";
  }
  if (v4) {
    uint64_t v7 = 9;
  }
  else {
    uint64_t v7 = 6;
  }
  sub_1000039A0(v11, (uint64_t)v6, v7);
  sub_1000039A0(v11, (uint64_t)" lock, errno ", 13);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100132A88((uint64_t)v10);
  std::ios::~ios();
  return -*__error();
}

void sub_10012A2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10012A418((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10012A2F4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013583C((uint64_t)a1, a2);
  *a1 = off_1001C1080;
  a1[45] = &off_1001C1180;
  a1[46] = &off_1001C11A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C1080;
  a1[45] = off_1001C1108;
  a1[46] = off_1001C1130;
  return a1;
}

void sub_10012A3F4(_Unwind_Exception *a1)
{
  sub_100132A88(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012A418(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012A45C(uint64_t a1)
{
  return sub_10012A010(a1 - 24);
}

uint64_t sub_10012A464(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v1 + 48)) {
    return 0;
  }
  if (flock(**(_DWORD **)(a1 + 56), 8))
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 16;
    sub_10012A608(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"Failed unlocking file with fd ", 30);
    std::ostream::operator<<();
    sub_1000039A0(v6, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1001331FC((uint64_t)v5);
    std::ios::~ios();
    return -*__error();
  }
  else
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 0;
    sub_100023550(v5, &v3);
    sub_1000039A0(v6, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    sub_1000039A0(v6, (uint64_t)") is unlocked", 13);
    std::ostream::~ostream();
    sub_100023F8C((uint64_t)v5);
    std::ios::~ios();
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 0;
  }
  return result;
}

void sub_10012A5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100023674((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10012A608(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1001358CC((uint64_t)a1, a2);
  *a1 = off_1001C12A0;
  a1[45] = &off_1001C13A0;
  a1[46] = &off_1001C13C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C12A0;
  a1[45] = off_1001C1328;
  a1[46] = off_1001C1350;
  return a1;
}

void sub_10012A708(_Unwind_Exception *a1)
{
  sub_1001331FC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012A72C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012A770(uint64_t a1)
{
  return sub_10012A464(a1 - 24);
}

uint64_t sub_10012A778(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_10012A784(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 48);
}

uint64_t sub_10012A790(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = *(unsigned __int8 *)(v1 + 48);
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

void sub_10012A7A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    int v38 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 49);
    long long v37 = (void *)(a1 + 64);
    long long v3 = *(void **)(a1 + 64);
    int v4 = v3;
    while (1)
    {
      long long v41 = (iovec *)v43;
      uint64_t v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      long long v42 = xmmword_100178670;
      uint64_t v6 = &v3[8 * v1];
      uint64_t v40 = &v41;
      if (v4 == v6)
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          int v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(void *)&long long v39 = v9[8];
            *((void *)&v39 + 1) = v9[10];
            sub_10013595C((uint64_t *)&v40, &v39);
            unint64_t v8 = (unint64_t)(v9 + 8);
            stat v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6) {
              goto LABEL_11;
            }
          }
          unint64_t v8 = (unint64_t)v9;
LABEL_11:
          uint64_t v7 = v42;
        }
      }
      unint64_t v11 = v8 + 64;
      int v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        uint64_t v15 = v4[3];
        int v16 = **(_DWORD **)(a1 + 56);
        if (v7 == 1) {
          ssize_t v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        }
        else {
          ssize_t v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        }
        uint64_t v19 = v17;
        if (v17 < 1) {
          goto LABEL_43;
        }
        unint64_t v28 = v17 + v15;
        uint64_t v29 = *(void *)(a1 + 40);
        unint64_t v30 = atomic_load((unint64_t *)(v29 + 64));
        if (v30 < v17 + v15)
        {
          unint64_t v31 = v30;
          do
          {
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v29 + 64), &v31, v28);
            if (v31 == v30) {
              break;
            }
            unint64_t v30 = v31;
          }
          while (v31 < v28);
LABEL_43:
          if (v19 == -1) {
            uint64_t v19 = -(uint64_t)*__error();
          }
        }
      }
      else
      {
        if (!v12)
        {
          off_t v13 = v4[3];
          if (v7 == 1)
          {
            ssize_t v14 = pread(**(_DWORD **)(a1 + 56), v41->iov_base, v41->iov_len, v4[3]);
LABEL_42:
            uint64_t v19 = v14;
            goto LABEL_43;
          }
          if (!v38)
          {
            ssize_t v14 = preadv(**(_DWORD **)(a1 + 56), v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_42;
          }
          uint64_t v18 = v11 - (void)v4;
          if ((v11 - (void)v4) << 26)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            int v21 = **(_DWORD **)(a1 + 56);
            uint64_t v22 = 16 * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000) == 0)
              {
                ssize_t v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                size_t v25 = *p_iov_len;
                uint64_t v26 = v19 + v24;
                uint64_t v27 = -5;
                if (v24 == -1) {
                  uint64_t v27 = -1;
                }
                if (v24 == v25) {
                  v19 += v24;
                }
                else {
                  uint64_t v19 = v27;
                }
                if (v24 == v25) {
                  uint64_t v20 = v26;
                }
                else {
                  uint64_t v20 = v27;
                }
              }
              p_iov_len += 2;
              v22 -= 16;
            }
            while (v22);
            goto LABEL_43;
          }
        }
        uint64_t v19 = 0;
      }
      char v32 = v4 + 7;
      do
      {
        uint64_t v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19) {
            uint64_t v33 = v19;
          }
          else {
            uint64_t v33 = *(v32 - 5);
          }
        }
        uint64_t v34 = *v32;
        *(_DWORD *)uint64_t v34 = v33;
        *(unsigned char *)(v34 + 4) = 1;
        sub_10001CB20((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        long long v35 = v32 + 8;
        uint64_t v36 = v32 + 1;
        v32 += 8;
      }
      while ((unint64_t)v36 <= v8);
      if (*((void *)&v42 + 1))
      {
        if (v43 != (void *)v41) {
          operator delete(v41);
        }
      }
      int v4 = v35 - 7;
      long long v3 = *(void **)(a1 + 64);
      uint64_t v1 = *(void *)(a1 + 72);
      if (v35 - 7 == &v3[8 * v1])
      {
        sub_1001359C8(v37);
        return;
      }
    }
  }
}

void sub_10012AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    if (v18 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10012AB2C(uint64_t a1, uint64_t a2)
{
  return sub_100127D20(*(void *)(a1 + 40), *(void *)(a2 + 40));
}

uint64_t sub_10012AB38(uint64_t a1)
{
  *(void *)a1 = off_1001BEDA0;
  *(void *)(a1 + 24) = off_1001BEE80;
  *(void *)(a1 + 32) = off_1001BEEB8;
  if (futimes(**(_DWORD **)(a1 + 56), 0))
  {
    *(void *)&long long v5 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((void *)&v5 + 1) = 43;
    int v6 = 16;
    sub_10012ACF0(v7, &v5);
    sub_1000039A0(v8, (uint64_t)"futimes failed on ", 18);
    sub_1001493BC((uint64_t)v8, a1);
    sub_1000039A0(v8, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100133970((uint64_t)v7);
    std::ios::~ios();
  }
  *(void *)a1 = off_1001BEEF8;
  *(void *)(a1 + 24) = off_1001BEFD8;
  *(void *)(a1 + 32) = off_1001BF010;
  sub_10005B774(a1 + 64);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_10012ACF0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100135A28((uint64_t)a1, a2);
  *a1 = off_1001C14C0;
  a1[45] = &off_1001C15C0;
  a1[46] = &off_1001C15E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C14C0;
  a1[45] = off_1001C1548;
  a1[46] = off_1001C1570;
  return a1;
}

void sub_10012ADF0(_Unwind_Exception *a1)
{
  sub_100133970(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10012AE14(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012AE5C(uint64_t a1)
{
  return sub_10012AB38(a1 - 24);
}

uint64_t sub_10012AE64(uint64_t a1)
{
  return sub_10012AB38(a1 - 32);
}

void sub_10012AE6C(uint64_t a1)
{
  sub_10012AB38(a1);
  operator delete();
}

void sub_10012AEA4(uint64_t a1)
{
  sub_10012AB38(a1 - 24);
  operator delete();
}

void sub_10012AEE0(uint64_t a1)
{
  sub_10012AB38(a1 - 32);
  operator delete();
}

uint64_t sub_10012AF1C(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v3)
  {
    if (v6)
    {
      int v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      goto LABEL_10;
    }
    return 0xFFFFFFFFLL;
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (**v3)(v3);
LABEL_10:
  uint64_t v7 = v5;
  if (v4) {
    sub_100004944(v4);
  }
  return v7;
}

void sub_10012B04C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012B068(void *a1)
{
  *a1 = off_1001BEEF8;
  a1[3] = off_1001BEFD8;
  a1[4] = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 8));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete();
}

BOOL sub_10012B128()
{
  return sub_1000AAE0C();
}

unint64_t sub_10012B130(uint64_t a1)
{
  return atomic_load((unint64_t *)(*(void *)(a1 + 40) + 64));
}

uint64_t sub_10012B140(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 12);
}

void *sub_10012B14C(uint64_t a1, void *a2)
{
  sub_1000039A0(a2, (uint64_t)"file(", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();
  return sub_1000039A0(v2, (uint64_t)")", 1);
}

double sub_10012B1AC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100133E54(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t sub_10012B1EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v16) = 0;
  BYTE4(v16) = 0;
  ssize_t v17 = 0;
  *(void *)&v18[0] = sub_100148BF8((unint64_t)&v16);
  int v6 = sub_100148CC4((unint64_t)&v16);
  long long v23 = &v16;
  *((void *)&v18[0] + 1) = v6;
  *(void *)&v18[1] = &v23;
  sub_10001CB94((unint64_t)v21, (uint64_t)&v16);
  uint64_t v7 = v23;
  uint64_t v22 = v23;
  v23[4] = (uint64_t)&v22;
  uint64_t v8 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  ssize_t v17 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = v22;
  }
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 25);
  v18[0] = *((_OWORD *)a2 + 1);
  int v19 = 0;
  uint64_t v20 = v7;
  uint64_t v22 = 0;
  void v7[4] = (uint64_t)&v20;
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[8] + (v10 << 6);
  if (v10 == a1[10])
  {
    sub_100133FD8(a1 + 8, v11, 1, (uint64_t)&v16, &v23);
    if (v20) {
      v20[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
    uint64_t v16 = 0;
    ssize_t v17 = 0;
    long long v12 = v18[0];
    *(_OWORD *)(v11 + 25) = *(_OWORD *)((char *)v18 + 9);
    *(_OWORD *)(v11 + 16) = v12;
    int v13 = v19;
    *(void *)(v11 + 56) = v20;
    uint64_t v14 = v11 + 56;
    *(_DWORD *)(v14 - 8) = v13;
    uint64_t v20 = 0;
    *(void *)(*(void *)v14 + 32) = v14;
    ++a1[9];
  }
  if (v17) {
    sub_100004944(v17);
  }
  unint64_t result = sub_10001CB94(a3, (uint64_t)v21);
  if (v22) {
    v22[4] = 0;
  }
  return result;
}

void sub_10012B358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    sub_100004944(a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_10012B390()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x10012B388);
  }
  JUMPOUT(0x10012B384);
}

unint64_t sub_10012B3A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v16) = 0;
  BYTE4(v16) = 0;
  ssize_t v17 = 0;
  *(void *)&v18[0] = sub_100148BF8((unint64_t)&v16);
  int v6 = sub_100148CC4((unint64_t)&v16);
  long long v23 = &v16;
  *((void *)&v18[0] + 1) = v6;
  *(void *)&v18[1] = &v23;
  sub_10001CB94((unint64_t)v21, (uint64_t)&v16);
  uint64_t v7 = v23;
  uint64_t v22 = v23;
  v23[4] = (uint64_t)&v22;
  uint64_t v8 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  ssize_t v17 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = v22;
  }
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 25);
  v18[0] = *((_OWORD *)a2 + 1);
  int v19 = 1;
  uint64_t v20 = v7;
  uint64_t v22 = 0;
  void v7[4] = (uint64_t)&v20;
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[8] + (v10 << 6);
  if (v10 == a1[10])
  {
    sub_100133FD8(a1 + 8, v11, 1, (uint64_t)&v16, &v23);
    if (v20) {
      v20[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
    uint64_t v16 = 0;
    ssize_t v17 = 0;
    long long v12 = v18[0];
    *(_OWORD *)(v11 + 25) = *(_OWORD *)((char *)v18 + 9);
    *(_OWORD *)(v11 + 16) = v12;
    int v13 = v19;
    *(void *)(v11 + 56) = v20;
    uint64_t v14 = v11 + 56;
    *(_DWORD *)(v14 - 8) = v13;
    uint64_t v20 = 0;
    *(void *)(*(void *)v14 + 32) = v14;
    ++a1[9];
  }
  if (v17) {
    sub_100004944(v17);
  }
  unint64_t result = sub_10001CB94(a3, (uint64_t)v21);
  if (v22) {
    v22[4] = 0;
  }
  return result;
}

void sub_10012B510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    sub_100004944(a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_10012B548()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x10012B540);
  }
  JUMPOUT(0x10012B53CLL);
}

uint64_t sub_10012B558(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 32);
}

uint64_t sub_10012B564(uint64_t a1)
{
  return **(unsigned int **)(a1 + 56);
}

void sub_10012B570(void *a1)
{
  *(a1 - 3) = off_1001BEEF8;
  *a1 = off_1001BEFD8;
  a1[1] = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10012B60C(void *a1)
{
  *(a1 - 3) = off_1001BEEF8;
  *a1 = off_1001BEFD8;
  a1[1] = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete();
}

uint64_t sub_10012B6CC(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

void sub_10012B6D8(void *a1)
{
  *(a1 - 4) = off_1001BEEF8;
  *(a1 - 1) = off_1001BEFD8;
  *a1 = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10012B770(void *a1)
{
  *(a1 - 4) = off_1001BEEF8;
  *(a1 - 1) = off_1001BEFD8;
  *a1 = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)*(a1 - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete();
}

uint64_t sub_10012B82C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012BABC(v1);
  return std::ios::~ios();
}

uint64_t sub_10012B878(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012BABC(v1);
  return std::ios::~ios();
}

void sub_10012B8D8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012BABC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012B940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012B978(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012B9E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012BABC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012BA44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012BABC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012BABC(uint64_t a1)
{
  *(void *)a1 = off_1001BF238;
  sub_10012BBF8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012BBF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012BDB8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012BD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012BD80(uint64_t a1)
{
  sub_10012BABC(a1);
  operator delete();
}

int *sub_10012BDB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 66;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 66;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012BFA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012C230(v1);
  return std::ios::~ios();
}

uint64_t sub_10012BFEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012C230(v1);
  return std::ios::~ios();
}

void sub_10012C04C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012C230(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012C0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012C0EC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012C154(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012C230(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012C1B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012C230(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012C230(uint64_t a1)
{
  *(void *)a1 = off_1001BF458;
  sub_10012C36C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012C36C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012C52C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012C4F4(uint64_t a1)
{
  sub_10012C230(a1);
  operator delete();
}

int *sub_10012C52C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 78;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 78;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012C714(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012C9A4(v1);
  return std::ios::~ios();
}

uint64_t sub_10012C760(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012C9A4(v1);
  return std::ios::~ios();
}

void sub_10012C7C0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012C9A4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012C828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012C860(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012C8C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012C9A4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012C92C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012C9A4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012C9A4(uint64_t a1)
{
  *(void *)a1 = off_1001BF678;
  sub_10012CAE0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012CAE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012CCA0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012CC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012CC68(uint64_t a1)
{
  sub_10012C9A4(a1);
  operator delete();
}

int *sub_10012CCA0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 95;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 95;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012CE88(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012D118(v1);
  return std::ios::~ios();
}

uint64_t sub_10012CED4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012D118(v1);
  return std::ios::~ios();
}

void sub_10012CF34(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012D118(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012CF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012CFD4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012D03C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012D118(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012D0A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012D118(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012D118(uint64_t a1)
{
  *(void *)a1 = off_1001BF898;
  sub_10012D254(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012D254(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012D414((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012D3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012D3DC(uint64_t a1)
{
  sub_10012D118(a1);
  operator delete();
}

int *sub_10012D414(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 103;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 103;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012D5FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012D88C(v1);
  return std::ios::~ios();
}

uint64_t sub_10012D648(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012D88C(v1);
  return std::ios::~ios();
}

void sub_10012D6A8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012D88C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012D710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012D748(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012D7B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012D88C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012D814(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012D88C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012D88C(uint64_t a1)
{
  *(void *)a1 = off_1001BFAB8;
  sub_10012D9C8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012D9C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012DB88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012DB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012DB50(uint64_t a1)
{
  sub_10012D88C(a1);
  operator delete();
}

int *sub_10012DB88(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 298;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 298;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012DD70(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012E000(v1);
  return std::ios::~ios();
}

uint64_t sub_10012DDBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012E000(v1);
  return std::ios::~ios();
}

void sub_10012DE1C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012E000(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012DE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012DEBC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012DF24(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012E000(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012DF88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012E000(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012E000(uint64_t a1)
{
  *(void *)a1 = off_1001BFCD8;
  sub_10012E13C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012E13C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012E2FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012E298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012E2C4(uint64_t a1)
{
  sub_10012E000(a1);
  operator delete();
}

int *sub_10012E2FC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 313;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 313;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012E4E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012E774(v1);
  return std::ios::~ios();
}

uint64_t sub_10012E530(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012E774(v1);
  return std::ios::~ios();
}

void sub_10012E590(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012E774(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012E5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012E630(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012E698(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012E774(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012E6FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012E774(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012E774(uint64_t a1)
{
  *(void *)a1 = off_1001BFEF8;
  sub_10012E8B0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012E8B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012EA70((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012EA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012EA38(uint64_t a1)
{
  sub_10012E774(a1);
  operator delete();
}

int *sub_10012EA70(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 336;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 336;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012EC58(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012EEE8(v1);
  return std::ios::~ios();
}

uint64_t sub_10012ECA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012EEE8(v1);
  return std::ios::~ios();
}

void sub_10012ED04(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012EEE8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012ED6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012EDA4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012EE0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012EEE8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012EE70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012EEE8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012EEE8(uint64_t a1)
{
  *(void *)a1 = off_1001C0118;
  sub_10012F024(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012F024(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012F1E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012F180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012F1AC(uint64_t a1)
{
  sub_10012EEE8(a1);
  operator delete();
}

int *sub_10012F1E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 381;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 381;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012F3CC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012F65C(v1);
  return std::ios::~ios();
}

uint64_t sub_10012F418(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012F65C(v1);
  return std::ios::~ios();
}

void sub_10012F478(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012F65C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012F4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012F518(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012F580(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012F65C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012F5E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012F65C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012F65C(uint64_t a1)
{
  *(void *)a1 = off_1001C0338;
  sub_10012F798(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012F798(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10012F958((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10012F8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012F920(uint64_t a1)
{
  sub_10012F65C(a1);
  operator delete();
}

int *sub_10012F958(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 388;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 388;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10012FB40(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012FDD0(v1);
  return std::ios::~ios();
}

uint64_t sub_10012FB8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012FDD0(v1);
  return std::ios::~ios();
}

void sub_10012FBEC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10012FDD0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012FC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10012FC8C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10012FCF4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10012FDD0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10012FD58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10012FDD0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10012FDD0(uint64_t a1)
{
  *(void *)a1 = off_1001C0558;
  sub_10012FF0C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10012FF0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001300CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100130068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130094(uint64_t a1)
{
  sub_10012FDD0(a1);
  operator delete();
}

int *sub_1001300CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 398;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 398;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001302B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130544(v1);
  return std::ios::~ios();
}

uint64_t sub_100130300(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130544(v1);
  return std::ios::~ios();
}

void sub_100130360(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100130544(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001303C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100130400(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100130468(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130544(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1001304CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130544(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100130544(uint64_t a1)
{
  *(void *)a1 = off_1001C0778;
  sub_100130680(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100130680(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100130840((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001307DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130808(uint64_t a1)
{
  sub_100130544(a1);
  operator delete();
}

int *sub_100130840(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 411;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 411;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100130A28(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130CB8(v1);
  return std::ios::~ios();
}

uint64_t sub_100130A74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130CB8(v1);
  return std::ios::~ios();
}

void sub_100130AD4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100130CB8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100130B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100130B74(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100130BDC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100130CB8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100130C40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100130CB8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100130CB8(uint64_t a1)
{
  *(void *)a1 = off_1001C0998;
  sub_100130DF4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100130DF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100130FB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100130F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100130F7C(uint64_t a1)
{
  sub_100130CB8(a1);
  operator delete();
}

int *sub_100130FB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 424;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 424;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10013119C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013142C(v1);
  return std::ios::~ios();
}

uint64_t sub_1001311E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013142C(v1);
  return std::ios::~ios();
}

void sub_100131248(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013142C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001312B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001312E8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100131350(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013142C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1001313B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013142C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10013142C(uint64_t a1)
{
  *(void *)a1 = off_1001C0BB8;
  sub_100131568(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100131568(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100131728((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001316C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001316F0(uint64_t a1)
{
  sub_10013142C(a1);
  operator delete();
}

int *sub_100131728(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 432;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 432;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100131910(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100131BA0(v1);
  return std::ios::~ios();
}

uint64_t sub_10013195C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100131BA0(v1);
  return std::ios::~ios();
}

void sub_1001319BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100131BA0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100131A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100131A5C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100131AC4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100131BA0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100131B28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100131BA0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100131BA0(uint64_t a1)
{
  *(void *)a1 = off_1001C0DD8;
  sub_100131CDC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100131CDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100131E9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100131E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100131E64(uint64_t a1)
{
  sub_100131BA0(a1);
  operator delete();
}

int *sub_100131E9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 441;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 441;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100132084(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100132314(v1);
  return std::ios::~ios();
}

uint64_t sub_1001320D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100132314(v1);
  return std::ios::~ios();
}

void sub_100132130(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100132314(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100132198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001321D0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100132238(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100132314(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10013229C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100132314(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100132314(uint64_t a1)
{
  *(void *)a1 = off_1001C0FF8;
  sub_100132450(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100132450(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100132610((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001325AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001325D8(uint64_t a1)
{
  sub_100132314(a1);
  operator delete();
}

int *sub_100132610(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 449;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 449;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001327F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100132A88(v1);
  return std::ios::~ios();
}

uint64_t sub_100132844(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100132A88(v1);
  return std::ios::~ios();
}

void sub_1001328A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100132A88(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10013290C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100132944(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001329AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100132A88(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100132A10(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100132A88(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100132A88(uint64_t a1)
{
  *(void *)a1 = off_1001C1218;
  sub_100132BC4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100132BC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100132D84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100132D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100132D4C(uint64_t a1)
{
  sub_100132A88(a1);
  operator delete();
}

int *sub_100132D84(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 489;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 489;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100132F6C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001331FC(v1);
  return std::ios::~ios();
}

uint64_t sub_100132FB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001331FC(v1);
  return std::ios::~ios();
}

void sub_100133018(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001331FC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100133080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001330B8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100133120(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001331FC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100133184(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001331FC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001331FC(uint64_t a1)
{
  *(void *)a1 = off_1001C1438;
  sub_100133338(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100133338(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001334F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100133494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001334C0(uint64_t a1)
{
  sub_1001331FC(a1);
  operator delete();
}

int *sub_1001334F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 502;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 502;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001336E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100133970(v1);
  return std::ios::~ios();
}

uint64_t sub_10013372C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100133970(v1);
  return std::ios::~ios();
}

void sub_10013378C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100133970(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001337F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10013382C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100133894(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100133970(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1001338F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100133970(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100133970(uint64_t a1)
{
  *(void *)a1 = off_1001C1658;
  sub_100133AAC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100133AAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100133C6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100133C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100133C34(uint64_t a1)
{
  sub_100133970(a1);
  operator delete();
}

int *sub_100133C6C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 643;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 643;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_100133E54(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_100133EC8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_100133EB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100133EC8(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  sub_100133F24(a1 + 3, a2);
  return a1;
}

void sub_100133F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double sub_100133F24(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_100149398(a1);
  void *v3 = off_1001BEEF8;
  v3[3] = off_1001BEFD8;
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  v3[4] = off_1001BF010;
  v3[5] = v4;
  v3[6] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v3[5];
  }
  v3[7] = v4 + 8;
  v3[8] = v3 + 11;
  double result = 0.0;
  *(_OWORD *)(v3 + 9) = xmmword_10016E350;
  return result;
}

void sub_100133FD8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10012233C((uint64_t)a1, a3);
  if (v11 >> 57) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(v11 << 6);
  sub_100134078(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_100134078(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_100134154((uint64_t)a1, *a1, a4, *a1 + (a1[1] << 6), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10 + 56;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 48);
        if (v13) {
          sub_100004944(v13);
        }
        v12 += 64;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_100134130(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100134154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a5;
  uint64_t v19 = a1;
  while (a2 != a3)
  {
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v7;
    int v8 = *(_DWORD *)(a2 + 48);
    *(void *)(a5 + 56) = *(void *)(a2 + 56);
    uint64_t v9 = a5 + 56;
    *(_DWORD *)(v9 - 8) = v8;
    *(void *)(a2 + 56) = 0;
    *(void *)(*(void *)v9 + 32) = v9;
    a5 = v9 + 8;
    a2 += 64;
  }
  uint64_t v18 = a5;
  *(_OWORD *)a5 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v10 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a5 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(a5 + 16) = v10;
  int v11 = *(_DWORD *)(a7 + 48);
  *(void *)(a5 + 56) = *(void *)(a7 + 56);
  *(_DWORD *)(a5 + 48) = v11;
  *(void *)(a7 + 56) = 0;
  *(void *)(*(void *)(a5 + 56) + 32) = a5 + 56;
  if (a3 != a4)
  {
    uint64_t v12 = a5 + (a6 << 6);
    do
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v12 + 25) = *(_OWORD *)(a3 + 25);
      *(_OWORD *)(v12 + 16) = v13;
      int v14 = *(_DWORD *)(a3 + 48);
      *(void *)(v12 + 56) = *(void *)(a3 + 56);
      uint64_t v15 = v12 + 56;
      *(_DWORD *)(v15 - 8) = v14;
      *(void *)(a3 + 56) = 0;
      *(void *)(*(void *)v15 + 32) = v15;
      a3 += 64;
      uint64_t v12 = v15 + 8;
    }
    while (a3 != a4);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  return sub_100134264(&v17);
}

uint64_t *sub_100134264(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 56);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      sub_100004944(v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 64;
    *a1 = v2;
  }
  return a1;
}

uint64_t sub_1001342BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BF238;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100134338(_Unwind_Exception *a1)
{
}

uint64_t sub_10013434C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BF458;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001343C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001343DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BF678;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100134458(_Unwind_Exception *a1)
{
}

uint64_t sub_10013446C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BF898;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001344E8(_Unwind_Exception *a1)
{
}

void sub_1001344FC(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  if (fstatfs(*(_DWORD *)(*v1 + 8), &v17) < 0)
  {
    *(void *)&long long v18 = "FileLocal::shared_state_t::init_unmap_zeros()::(anonymous class)::operator()() const";
    *((void *)&v18 + 1) = 76;
    int v19 = 16;
    sub_10013476C(&v14, &v18);
    sub_1000039A0(v16, (uint64_t)"fstatfs failed with err code ", 29);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1001349CC((uint64_t)&v14);
    std::ios::~ios();
    int v6 = *__error();
    long long v7 = std::generic_category();
    int v8 = *(unsigned __int8 *)(v2 + 88);
    *(_DWORD *)(v2 + 72) = v6;
    *(void *)(v2 + 80) = v7;
    if (v8) {
      *(unsigned char *)(v2 + 88) = 0;
    }
    int v9 = *__error();
    long long v10 = std::generic_category();
    int v11 = v10;
    if (*(unsigned char *)(v2 + 136))
    {
      sub_10005B724((uint64_t *)(v2 + 96));
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v11;
      *(unsigned char *)(v2 + 136) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v10;
    }
  }
  else
  {
    f_bstd::string::size_type size = v17.f_bsize;
    if (!*(unsigned char *)(v2 + 88)) {
      *(unsigned char *)(v2 + 88) = 1;
    }
    *(void *)(v2 + 72) = f_bsize;
    char v4 = malloc_type_valloc(f_bsize, 0xF8ED6DDuLL);
    if (!v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v13 = std::bad_alloc::bad_alloc(exception);
    }
    *(void *)&long long v18 = off_1001C18F8;
    __int16 v20 = &v18;
    int v14 = v4;
    sub_10004A2B0((uint64_t)v15, (uint64_t)&v18);
    sub_10004A330(&v18);
    sub_1001348D4(v2 + 96, (uint64_t *)&v14);
    sub_10004A3B4((uint64_t *)&v14, 0);
    sub_10004A330(v15);
    int64_t v5 = *(void *)(v2 + 72);
    if (v5 >= 1) {
      bzero(*(void **)(v2 + 96), v5);
    }
  }
}

void sub_100134710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = v2;
  sub_10004A3B4((uint64_t *)va, 0);
  sub_10004A330(v3);
  _Unwind_Resume(a1);
}

void *sub_10013476C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10013493C((uint64_t)a1, a2);
  *a1 = off_1001C16E0;
  a1[45] = &off_1001C17E0;
  a1[46] = &off_1001C1808;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C16E0;
  a1[45] = off_1001C1768;
  a1[46] = off_1001C1790;
  return a1;
}

void sub_10013486C(_Unwind_Exception *a1)
{
  sub_1001349CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100134890(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001348D4(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_1000D7254((uint64_t *)a1, a2);
  }
  else
  {
    sub_10005B724((uint64_t *)a1);
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    sub_10004A2B0(a1 + 8, (uint64_t)(a2 + 1));
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_10013493C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1878;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001349B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001349CC(uint64_t a1)
{
  *(void *)a1 = off_1001C1878;
  sub_100134DD4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100134B08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001349CC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100134B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100134BA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100134C10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001349CC(v1);
  return std::ios::~ios();
}

void sub_100134C5C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001349CC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100134CC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001349CC(v1);
  return std::ios::~ios();
}

void sub_100134D20(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001349CC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100134D9C(uint64_t a1)
{
  sub_1001349CC(a1);
  operator delete();
}

uint64_t sub_100134DD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100134F58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100134F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100134F58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 236;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 236;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void sub_100135144()
{
}

void *sub_100135158()
{
  double result = operator new(0x10uLL);
  *double result = off_1001C18F8;
  return result;
}

void sub_100135190(uint64_t a1, void *a2)
{
  *a2 = off_1001C18F8;
}

void sub_1001351B8(uint64_t a1, void **a2)
{
}

uint64_t sub_1001351C0(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001C1958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100135200()
{
  return &off_1001C1958;
}

uint64_t sub_10013520C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BFAB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135288(_Unwind_Exception *a1)
{
}

uint64_t sub_10013529C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BFCD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135318(_Unwind_Exception *a1)
{
}

uint64_t sub_10013532C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001BFEF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001353A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001353BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0118;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135438(_Unwind_Exception *a1)
{
}

uint64_t sub_10013544C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0338;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001354C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001354DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0558;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135558(_Unwind_Exception *a1)
{
}

uint64_t sub_10013556C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0778;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001355E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001355FC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0998;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135678(_Unwind_Exception *a1)
{
}

uint64_t sub_10013568C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0BB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135708(_Unwind_Exception *a1)
{
}

uint64_t sub_10013571C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0DD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135798(_Unwind_Exception *a1)
{
}

uint64_t sub_1001357AC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C0FF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135828(_Unwind_Exception *a1)
{
}

uint64_t sub_10013583C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1218;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001358B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001358CC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1438;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135948(_Unwind_Exception *a1)
{
}

uint64_t *sub_10013595C(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v4 + 8);
  char v6 = (char *)(*(void *)v4 + 16 * v5);
  if (v5 == *(void *)(v4 + 16))
  {
    sub_1000CB1B0((void **)v4, v6, 1, a2, &v8);
  }
  else
  {
    *(_OWORD *)char v6 = *a2;
    ++*(void *)(v4 + 8);
  }
  return a1;
}

void sub_1001359C8(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        sub_100004944(v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

uint64_t sub_100135A28(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1658;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100135AA4(_Unwind_Exception *a1)
{
}

void *sub_100135AB8(void *__dst, long long *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000A2C4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v10;
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  __dst[3] = a3;
  void __dst[4] = v12;
  __dst[5] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *((char *)a2 + 23);
  if (v13 >= 0) {
    int v14 = (char *)a2;
  }
  else {
    int v14 = *(char **)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v15 = *((void *)a2 + 1);
  }
  __dst[6] = sub_10014B6F0(v14, v15);
  __dst[7] = v16;
  __dst[8] = a5;
  return __dst;
}

void sub_100135B64(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    sub_100004944(v3);
  }
  sub_1001519D4(v1);
  _Unwind_Resume(a1);
}

AAByteStream *sub_100135B84(uint64_t a1, char *a2, uint64_t a3, uint8_t **a4)
{
  if (a2[23] >= 0) {
    char v6 = a2;
  }
  else {
    char v6 = *(char **)a2;
  }
  *(void *)&long long v10 = AAS3DownloadStreamOpen(v6, 0, 0, 0);
  sub_100110034(&v13, &v10);
  sub_10011011C(&v12, &v13);
  sub_100110150(&v12, *a4, 0x20uLL);
  sub_100110070(&v13, &v12, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 0, (uint64_t *)&v11);
  sub_100124F84(&v13, (uint64_t *)&v12, &v11, &v10);
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  if (v8)
  {
    sub_100004944(v8);
    if (*((void *)&v10 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  sub_100110038(&v11);
  sub_100110120(&v12);
  return sub_100110038(&v13);
}

void sub_100135C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v4 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v6 = va_arg(va2, AEAContext);
  sub_100110038((AAByteStream *)va);
  sub_100110120((AEAContext *)va1);
  sub_100110038((AAByteStream *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_100135CA4(uint64_t a1, char **a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = sub_100149398((void *)a1);
  *long long v7 = off_1001C1978;
  *(_OWORD *)(v7 + 3) = 0u;
  *(_OWORD *)(v7 + 5) = 0u;
  int v9 = *a2;
  uint64_t v10 = a4[1];
  v18[0] = (uint8_t *)*a4;
  v18[1] = (uint8_t *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100135B84(a1, v9, v8, v18);
  if (v10) {
    sub_100004944((std::__shared_weak_count *)v10);
  }
  AAByteStream v11 = (long long *)*a2;
  uint64_t v16 = sub_10011044C(*(void *)(a1 + 40));
  uint64_t v15 = sub_100110440(*(void *)(a1 + 40));
  sub_1001360B0(v11, (uint64_t *)&v16, a4, (uint64_t *)&v15, &v17);
  long long v12 = v17;
  long long v17 = 0uLL;
  AAByteStream v13 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v12;
  if (v13)
  {
    sub_100004944(v13);
    if (*((void *)&v17 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  return a1;
}

void sub_100135D9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    sub_100004944(v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)v1[4];
  if (v4) {
    sub_100004944(v4);
  }
  long long v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

ssize_t sub_100135DE8(uint64_t a1, uint64_t a2)
{
  return sub_100110458(*(void *)(a1 + 40), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void sub_100135E14(void *a1)
{
  sub_100135ED8(a1);
  operator delete();
}

uint64_t sub_100135E4C()
{
  return 4294967251;
}

uint64_t sub_100135E54(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 24);
}

uint64_t sub_100135E60()
{
  return 0;
}

uint64_t sub_100135E68()
{
  return 4294967251;
}

void *sub_100135E70(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"knox", 4);
}

double sub_100135E84@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100135F3C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t sub_100135EC4()
{
  return 4294967251;
}

uint64_t sub_100135ECC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 48);
}

void *sub_100135ED8(void *a1)
{
  *a1 = off_1001C1978;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100004944(v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_100135F3C(void *a1@<X1>, void *a2@<X8>)
{
  AAByteStream v4 = operator new(0x50uLL);
  sub_100135FB0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_100135F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100135FB0(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B63E0;
  sub_10013600C(a1 + 3, a2);
  return a1;
}

void sub_100135FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_10013600C(void *a1, void *a2)
{
  AAByteStream v4 = sub_100149398(a1);
  void *v4 = off_1001C1978;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v7 = (std::__shared_weak_count *)a1[4];
    a1[3] = v6;
    a1[4] = v5;
    if (v7) {
      sub_100004944(v7);
    }
  }
  else
  {
    a1[3] = v6;
    a1[4] = 0;
  }
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[6];
  a1[5] = v9;
  a1[6] = v8;
  if (v10) {
    sub_100004944(v10);
  }
  return a1;
}

void *sub_1001360B0@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x60uLL);
  double result = sub_10013612C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_100136118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10013612C(void *a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001C1A50;
  sub_100135AB8(a1 + 3, a2, *a3, a4, *a5);
  return a1;
}

void sub_10013617C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100136190(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001C1A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001361B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001C1A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100136204(uint64_t a1)
{
}

void sub_100136210(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_100004944(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_100136264(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  id v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  id v14 = v5;
  uint64_t v6 = [v5 activeNode];
  if (v6)
  {
    if ([v6 isCache])
    {
      int v7 = 1;
    }
    else
    {
      uint64_t v8 = [v6 parent];
      if (v8) {
        int v7 = 3;
      }
      else {
        int v7 = 0;
      }
    }
    if (*a3 != a3[1] || (a2 & 1) != 0 || !v7 || v7 == 3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v6 filePath];
        uint64_t v15 = [(id)objc_claimAutoreleasedReturnValue() path];
        sub_100136E38(&v16, &v15);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          sub_10000A2C4(&__dst, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = v16;
        }
        operator new();
      }
      id v9 = v6;
      id v10 = [v9 pluginName];
      sub_100004890(&__dst, (char *)[v10 UTF8String]);

      [v9 pluginParams];
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(150);
    void *exception = &off_1001C3DE8;
    exception[1] = error_code;
    exception[2] = v13;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Stack with cache as top image cannot be opened for writing.";
  }
}

void sub_100136784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_1001368D4(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v33 = 0;
  id v7 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:a1 closeOnDealloc:0];
  id v32 = 0;
  uint64_t v8 = [v7 readDataUpToLength:0x100000 error:&v32];
  id v9 = v32;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(154);
    void *exception = &off_1001C3DE8;
    exception[1] = error_code;
    exception[2] = v18;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed to read from fd.";
  }
  id v31 = 0;
  id v10 = +[NSPropertyListSerialization propertyListWithData:v8 options:0 format:&v33 error:&v31];
  id v11 = v31;

  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (!a2[1]) {
        goto LABEL_14;
      }
      a2 = (uint64_t *)*a2;
    }
    else if (!*((unsigned char *)a2 + 23))
    {
LABEL_14:
      uint64_t v19 = __cxa_allocate_exception(0x40uLL);
      __int16 v20 = std::generic_category();
      *uint64_t v19 = &off_1001C3DE8;
      v19[1] = 22;
      v19[2] = v20;
      *((unsigned char *)v19 + 24) = 0;
      *((unsigned char *)v19 + 48) = 0;
      v19[7] = "Cannot initialize pstack disk image without path.";
    }
    long long v12 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, +[NSString defaultCStringEncoding]);
    uint64_t v13 = +[NSURL fileURLWithPath:v12];

    id v30 = v11;
    id v14 = [[DiskImageGraph alloc] initWithData:v10 pstackURL:v13 imported:0 error:&v30];
    id v15 = v30;

    if (!v14)
    {
      int v21 = *__error();
      if (sub_1000D850C())
      {
        __int16 v22 = sub_1000D848C();
        os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
        long long v23 = [v15 description];
        *(_DWORD *)buf = 68158210;
        int v35 = 127;
        __int16 v36 = 2080;
        long long v37 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        __int16 v38 = 2112;
        long long v39 = v23;
        ssize_t v24 = (char *)_os_log_send_and_compose_impl();

        if (v24)
        {
          fprintf(__stderrp, "%s\n", v24);
          free(v24);
        }
      }
      else
      {
        size_t v25 = sub_1000D848C();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = [v15 description];
          *(_DWORD *)buf = 68158210;
          int v35 = 127;
          __int16 v36 = 2080;
          long long v37 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          __int16 v38 = 2112;
          long long v39 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%.*s: Failed to create graph from plist: %@.", buf, 0x1Cu);
        }
      }
      *__error() = v21;
      uint64_t v27 = __cxa_allocate_exception(0x40uLL);
      uint64_t v28 = make_error_code(161);
      void *v27 = &off_1001C3DE8;
      v27[1] = v28;
      v27[2] = v29;
      *((unsigned char *)v27 + 24) = 0;
      *((unsigned char *)v27 + 48) = 0;
      v27[7] = "Failed to create graph from plist.";
    }
    sub_100136264(v14, a3, a4);

    id v11 = v15;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_100136D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

std::string *sub_100136E38(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  AAByteStream v4 = v3 - 1;
  while (*++v4)
    ;
  sub_10006D958(this, v3, v4);
  return this;
}

void sub_100136E7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100136E98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  sub_1000ADBE8(a3, a2);
}

uint64_t sub_100136F08(uint64_t a1)
{
  return a1;
}

void sub_100136F44()
{
}

void sub_100137140(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10013716C(uint64_t a1)
{
  return a1;
}

double sub_1001371D8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 76));
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 72));
  if (v2 - v1 < *(_DWORD *)(*(void *)(a1 + 8) + 8))
  {
    unsigned int v3 = v2;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 72), &v3, v2 + 1);
      if (v3 == v2) {
        break;
      }
      unsigned int v4 = atomic_load((unsigned int *)(a1 + 76));
      unsigned int v5 = v3 - v4;
      unsigned int v2 = v3;
      if (v5 >= *(_DWORD *)(*(void *)(a1 + 8) + 8)) {
        return result;
      }
    }
    return io_rings_sqe_allocate(*(void *)(a1 + 48));
  }
  return result;
}

void sub_100137244(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe = io_rings_get_cqe(*(void *)(a1 + 48));
  if ((v5 & 0x100000000) != 0)
  {
    uint64_t v7 = cqe;
    uint64_t v8 = v5;
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 76), 1u);
    if (atomic_load((unint64_t *)(a1 + 80)))
    {
      unsigned int v11 = atomic_load((unsigned int *)(a1 + 72));
      if (add + 1 == v11)
      {
        std::mutex::lock((std::mutex *)(a1 + 136));
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock((std::mutex *)(a1 + 136));
      }
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v6;
}

uint64_t sub_1001372F0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 64);
  return result;
}

uint64_t sub_1001372FC(uint64_t a1)
{
  io_rings_cq_get_overruns(a1);
  *(void *)&long long v3 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((void *)&v3 + 1) = 27;
  int v4 = 16;
  sub_1001373C0(v5, &v3);
  std::ostream::operator<<();
  sub_1000039A0(v6, (uint64_t)" overrun events occurred in the plugin's ring!", 46);
  std::ostream::~ostream();
  sub_1001375B8((uint64_t)v5);
  std::ios::~ios();
  return io_rings_cq_clear_overruns(a1);
}

void sub_1001373AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001374E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001373C0(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100137528((uint64_t)a1, a2);
  *a1 = off_1001C1AA8;
  a1[45] = &off_1001C1BA8;
  a1[46] = &off_1001C1BD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C1AA8;
  a1[45] = off_1001C1B30;
  a1[46] = off_1001C1B58;
  return a1;
}

void sub_1001374C0(_Unwind_Exception *a1)
{
  sub_1001375B8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001374E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100137528(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1C40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001375A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001375B8(uint64_t a1)
{
  *(void *)a1 = off_1001C1C40;
  sub_1001379C0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1001376F4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001375B8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10013775C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100137794(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1001377FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001375B8(v1);
  return std::ios::~ios();
}

void sub_100137848(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001375B8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001378AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001375B8(v1);
  return std::ios::~ios();
}

void sub_10013790C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001375B8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100137988(uint64_t a1)
{
  sub_1001375B8(a1);
  operator delete();
}

uint64_t sub_1001379C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100137B44((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100137B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100137B44(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 57;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      id v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 57;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100137D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100137DAC(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *double result = a2;
  if (v3) {
    return (uint64_t *)sub_100137DDC((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_100137DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100137E34()
{
}

void *sub_100137E48()
{
  double result = operator new(0x10uLL);
  *double result = off_1001C1CC0;
  return result;
}

void sub_100137E80(uint64_t a1, void *a2)
{
  *a2 = off_1001C1CC0;
}

uint64_t sub_100137EA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32))();
}

uint64_t sub_100137EB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100137EF4()
{
}

void *sub_100137F00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100137F84(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy((void *)(*(void *)(a1 + 64) + v4), *(const void **)a2, v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::write(const sg_entry &)";
    *((void *)&v6 + 1) = 14;
    int v7 = 16;
    sub_1001380A4(v8, &v6);
    sub_1000039A0(v9, (uint64_t)"Trying to write @ ", 18);
    std::ostream::operator<<();
    sub_1000039A0(v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    sub_1000039A0(v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    sub_10013884C((uint64_t)v8);
    std::ios::~ios();
    return 4294967274;
  }
}

void sub_100138088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001381C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001380A4(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  sub_100139500((uint64_t)a1, a2);
  *a1 = off_1001C1E30;
  a1[45] = &off_1001C1F30;
  a1[46] = &off_1001C1F58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C1E30;
  a1[45] = off_1001C1EB8;
  a1[46] = off_1001C1EE0;
  return a1;
}

void sub_1001381A4(_Unwind_Exception *a1)
{
  sub_10013884C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001381C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013820C(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy(*(void **)a2, (const void *)(*(void *)(a1 + 64) + v4), v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::read(const sg_entry &)";
    *((void *)&v6 + 1) = 13;
    int v7 = 16;
    sub_100138330(v8, &v6);
    sub_1000039A0(v9, (uint64_t)"Trying to read @ ", 17);
    std::ostream::operator<<();
    sub_1000039A0(v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    sub_1000039A0(v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    sub_100138FC0((uint64_t)v8);
    std::ios::~ios();
    return 4294967274;
  }
}

void sub_100138314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100138454((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100138330(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  sub_100139590((uint64_t)a1, a2);
  *a1 = off_1001C2050;
  a1[45] = &off_1001C2150;
  a1[46] = &off_1001C2178;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C2050;
  a1[45] = off_1001C20D8;
  a1[46] = off_1001C2100;
  return a1;
}

void sub_100138430(_Unwind_Exception *a1)
{
  sub_100138FC0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100138454(uint64_t a1)
{
  return a1;
}

void sub_10013849C(void *a1)
{
  sub_1001394A4(a1);
  operator delete();
}

uint64_t sub_1001384D4()
{
  return 0;
}

uint64_t sub_1001384DC(void *a1, unint64_t a2, uint64_t a3)
{
  if (a3 == -1) {
    return 0;
  }
  unint64_t v3 = a1[12];
  unint64_t v4 = (a2 + v3 - 1) / v3 * v3;
  if (a2 > v4 || v4 >= a3 + a2) {
    return 0;
  }
  unint64_t v6 = a2 - v4 + a3;
  size_t v7 = v6 / v3 * v3;
  if (v6 == v6 % v3) {
    return 0;
  }
  uint64_t v8 = 4294967262;
  if (__CFADD__(v4, v7)) {
    return v8;
  }
  unint64_t v10 = a1[9];
  if (v4 > v10 || v7 + v4 > v10) {
    return v8;
  }
  return madvise((void *)(a1[8] + v4), v7, 5);
}

uint64_t sub_100138560()
{
  return 1;
}

uint64_t sub_100138568(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_100138570()
{
  return 1;
}

uint64_t sub_100138578(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) < a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(void *)(a1 + 72) = a2;
  return result;
}

void *sub_10013859C(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"ram", 3);
}

uint64_t sub_1001385B0(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1001385BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013884C(v1);
  return std::ios::~ios();
}

uint64_t sub_100138608(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013884C(v1);
  return std::ios::~ios();
}

void sub_100138668(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10013884C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001386D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100138708(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100138770(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10013884C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1001387D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10013884C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10013884C(uint64_t a1)
{
  *(void *)a1 = off_1001C1FC8;
  sub_100138988(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100138988(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100138B48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100138AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100138B10(uint64_t a1)
{
  sub_10013884C(a1);
  operator delete();
}

int *sub_100138B48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 30;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 30;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100138D30(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100138FC0(v1);
  return std::ios::~ios();
}

uint64_t sub_100138D7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100138FC0(v1);
  return std::ios::~ios();
}

void sub_100138DDC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100138FC0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100138E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100138E7C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100138EE4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100138FC0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100138F48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100138FC0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100138FC0(uint64_t a1)
{
  *(void *)a1 = off_1001C21E8;
  sub_1001390FC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1001390FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001392BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100139258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100139284(uint64_t a1)
{
  sub_100138FC0(a1);
  operator delete();
}

int *sub_1001392BC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 42;
    __int16 v22 = 2082;
    long long v23 = v8;
    id v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unsigned int v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        id v14 = a2;
      }
      else {
        id v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 42;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1001394A4(void *a1)
{
  *a1 = off_1001C1D50;
  sub_10004A3B4(a1 + 3, 0);
  sub_10004A330(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_100139500(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C1FC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10013957C(_Unwind_Exception *a1)
{
}

uint64_t sub_100139590(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C21E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10013960C(_Unwind_Exception *a1)
{
}

uint64_t sub_100139620(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_10013BE50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013BE7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4io_rings_get_max_version(0, 0) = 0;
  return result;
}

void sub_10013BE8C(uint64_t a1)
{
}

void sub_10013BE94(void *a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v6;
    uint64_t v8 = (void *)a1[4];
    id v9 = [v7 filePath];
    unint64_t v10 = [v9 lastPathComponent];
    unsigned int v11 = [v8 URLByAppendingPathComponent:v10];

    os_log_type_t v12 = (void *)a1[5];
    uint64_t v13 = [v7 filePath];
    uint64_t v14 = *(void *)(a1[6] + 8);
    obuint64_t j = *(id *)(v14 + 40);
    LOBYTE(v12) = [v12 copyItemAtURL:v13 toURL:v11 error:&obj];
    objc_storeStrong((id *)(v14 + 40), obj);

    if (v12) {
      [*(id *)(*(void *)(a1[7] + 8) + 40) addObject:v11];
    }
    else {
      *a4 = 1;
    }
  }
  else
  {
    *a4 = 1;
    uint64_t v15 = *(void *)(a1[6] + 8);
    id v18 = *(id *)(v15 + 40);
    +[DIError failWithPOSIXCode:45 verboseInfo:@"Clone of plugin nodes is not supported." error:&v18];
    id v16 = v18;
    id v7 = *(id *)(v15 + 40);
    *(void *)(v15 + 4io_rings_get_max_version(0, 0) = v16;
  }
}

id sub_10013C000(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeItemAtURL:a2 error:0];
}

void sub_10013C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013C5A0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  id v7 = *(void **)(a1 + 32);
  id v8 = a2;
  id v9 = [v7 URLByDeletingLastPathComponent];
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v10 + 40);
  unsigned int v11 = +[DiskImageGraphNode GraphNodeWithDictionary:v8 updateChangesToDict:v6 workDir:v9 error:&obj];

  objc_storeStrong((id *)(v10 + 40), obj);
  if (v11)
  {
    os_log_type_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = [v11 UUID];
    uint64_t v14 = [v13 UUIDString];
    [v12 setObject:v11 forKey:v14];
  }
  else
  {
    *a4 = 1;
  }
}

void sub_10013C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013C7C4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v15 = a3;
  uint64_t v6 = [v15 parentUUID];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [v15 parentUUID];
    id v9 = [v8 UUIDString];
    uint64_t v10 = [v7 objectForKey:v9];

    if (v10)
    {
      [v15 setParent:v10];
      unsigned int v11 = [v15 parent];
      os_log_type_t v12 = [v11 children];
      [v12 addObject:v15];
    }
    else
    {
      *a4 = 1;
      uint64_t v13 = +[DIError errorWithPOSIXCode:22 verboseInfo:@"Missing parent node in graph."];
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
      unsigned int v11 = *(void **)(v14 + 40);
      *(void *)(v14 + 4io_rings_get_max_version(0, 0) = v13;
    }
  }
}

void sub_10013CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10013CD20(uint64_t a1, uint64_t a2, void *a3)
{
  char v4 = [a3 tag];
  id v5 = [v4 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

  return v5;
}

uint64_t sub_10013D4A8(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = 1919118949;
  int v6 = 1919118949;
  sub_100019EB0((uint64_t)"sig1_t", 1919118949, &v6, 1);
  *(_DWORD *)(a1 + 4) = 1634952291;
  int v6 = 1634952291;
  sub_100019EB0((uint64_t)"sig2_t", 1634952291, &v6, 1);
  *(_DWORD *)(a1 + 8) = 2;
  int v6 = 2;
  sub_100019EB0((uint64_t)"version_t", 2, &v6, 1);
  *(_DWORD *)(a1 + 12) = 16;
  int v6 = 16;
  sub_100019EB0((uint64_t)"iv_size_t", 16, &v6, 1);
  *(_DWORD *)(a1 + 16) = 5;
  int v6 = 5;
  sub_100019EB0((uint64_t)"encryption_mode", 5, &v6, 1);
  *(_DWORD *)(a1 + 2io_rings_get_max_version(0, 0) = -2147483647;
  int v6 = -2147483647;
  sub_100019EB0((uint64_t)"algorithm_type", -2147483647, &v6, 1);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = 91;
  int v6 = 91;
  sub_100019EB0((uint64_t)"prng_algorithm_type", 91, &v6, 1);
  *(_DWORD *)(a1 + 32) = 160;
  int v6 = 160;
  sub_100019EB0((uint64_t)"prng_key_bits_size_t", 160, &v6, 1);
  *(_DWORD *)(a1 + 52) = 512;
  *(_OWORD *)(a1 + 56) = xmmword_1001790D0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 36) = sub_10014B80C();
  *(void *)(a1 + 44) = v4;
  return a1;
}

void sub_10013D634(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 6io_rings_get_max_version(0, 0) = 0;
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  if (v3 < 0xC
    || (sub_1000496D0(a2, (uint64_t)v8, 12, v3 - 12) & 0x80000000) != 0
    || v8[0] != 0x1000000
    || v8[1] != 1634952291
    || v8[2] != 1919118949)
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) > 0x4B) {
      operator new[]();
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    void *exception = &off_1001BB640;
    exception[1] = "crypto";
    exception[2] = 76;
    exception[3] = v5;
  }
  int v6 = __cxa_allocate_exception(0x40uLL);
  id v7 = (void *)sub_100002B24((uint64_t)v6, (uint64_t)"The image is encrypted with obsolete encoding version 1", 0xA0u);
}

void sub_10013DAE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10013DAF4()
{
}

void sub_10013DAFC(_Unwind_Exception *a1)
{
}

void sub_10013DBB8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10000359C((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x10013DBF4);
}

void sub_10013DC14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10013DC28(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 6io_rings_get_max_version(0, 0) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 6io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10013DC64(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(_DWORD *)(a2 + 16) = bswap32(*(_DWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 2io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a1 + 20));
  *(_DWORD *)(a2 + 24) = bswap32(*(_DWORD *)(a1 + 24));
  *(_DWORD *)(a2 + 28) = bswap32(*(_DWORD *)(a1 + 28));
  *(_DWORD *)(a2 + 32) = bswap32(*(_DWORD *)(a1 + 32));
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 52) = bswap32(*(_DWORD *)(a1 + 52));
  *(void *)(a2 + 56) = bswap64(*(void *)(a1 + 56));
  *(void *)(a2 + 64) = bswap64(*(void *)(a1 + 64));
  *(_DWORD *)(a2 + 72) = bswap32(*(_DWORD *)(a1 + 72));
  return a2 + 76;
}

const void **sub_10013DD08(uint64_t a1, char *a2)
{
  uint64_t v3 = (*(uint64_t (**)(char *))(*(void *)&a2[*(void *)(*(void *)a2 - 40)] + 16))(&a2[*(void *)(*(void *)a2 - 40)]);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    id v9 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Image contains crypto format but info class is missing EncryptionInfo", 0x16u);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!*(unsigned char *)(v3 + 16)) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  *(void *)(v3 + 8) = v5;
  CFUUIDRef v11 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(a1 + 36));
  CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, v11);
  CFStringRef v10 = v6;
  if (*(void *)(v4 + 24))
  {
    CFRelease(*(CFTypeRef *)(v4 + 24));
    CFStringRef v6 = v10;
  }
  *(void *)(v4 + 24) = v6;
  CFStringRef v10 = 0;
  sub_10004044C((const void **)&v10);
  return sub_1000409DC((const void **)&v11);
}

void sub_10013DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10013DE48(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  LODWORD(v9) = 0;
  sub_100019EB0((uint64_t)"public_key_crypto_algo_mode", 0, &v9, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  LODWORD(v9) = bswap32(*(_DWORD *)a2);
  sub_10013E4A0((_DWORD *)a1, &v9);
  long long v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 2io_rings_get_max_version(0, 0) = v4;
  int v5 = bswap32(*(_DWORD *)(a2 + 36));
  LODWORD(v9) = 42;
  sub_100019EB0((uint64_t)"public_key_crypto_algo", v5, &v9, 1);
  *(_DWORD *)(a1 + 36) = v5;
  int v6 = bswap32(*(_DWORD *)(a2 + 40));
  unint64_t v9 = 0x800000010000000ALL;
  sub_100019EB0((uint64_t)"public_key_padding_algo", v6, &v9, 2);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = v6;
  int v7 = bswap32(*(_DWORD *)(a2 + 44));
  LODWORD(v9) = 0;
  sub_100019EB0((uint64_t)"public_key_crypto_algo_mode", v7, &v9, 1);
  *(_DWORD *)(a1 + 44) = v7;
  LODWORD(v9) = bswap32(*(_DWORD *)(a2 + 48));
  sub_10013E59C((_DWORD *)(a1 + 48), &v9);
  memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  return a1;
}

uint64_t sub_10013DFC8(uint64_t a1, uint64_t a2, SecKeyRef *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x2A00000000;
  LODWORD(__p) = 42;
  sub_100019EB0((uint64_t)"public_key_crypto_algo", 42, &__p, 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = 10;
  __p = (void *)0x800000010000000ALL;
  sub_100019EB0((uint64_t)"public_key_padding_algo", 10, &__p, 2);
  *(_DWORD *)(a1 + 44) = 0;
  LODWORD(__p) = 0;
  sub_100019EB0((uint64_t)"public_key_crypto_algo_mode", 0, &__p, 1);
  bzero((void *)(a1 + 48), 0x204uLL);
  sub_10013E358(a2, &__p);
  CFErrorRef error = 0;
  CFDataRef v23 = SecKeyCopyExternalRepresentation(*a3, &error);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &off_1001C3DE8;
    uint64_t v14 = std::generic_category();
    exception[1] = Code;
    exception[2] = v14;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Key from the certificate is not exportable.";
  }
  sub_10013E3EC((uint64_t *)&v23, (uint64_t *)&theData);
  BytePtr = CFDataGetBytePtr(theData);
  CC_LONG Length = CFDataGetLength(theData);
  CC_SHA1(BytePtr, Length, (unsigned __int8 *)(a1 + 4));
  LODWORD(plaintext) = 20;
  sub_10013E4A0((_DWORD *)a1, &plaintext);
  CFDataRef v20 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)__p, v26 - (unsigned char *)__p);
  sub_10013E3EC((uint64_t *)&v20, (uint64_t *)&plaintext);
  id v8 = *a3;
  CFStringRef v9 = sub_10013E518(a1);
  CFDataRef v20 = SecKeyCreateEncryptedData(v8, v9, plaintext, &error);
  if (!v20)
  {
    id v15 = __cxa_allocate_exception(0x40uLL);
    unsigned int v16 = CFErrorGetCode(error);
    void *v15 = &off_1001C3DE8;
    int v17 = std::generic_category();
    v15[1] = v16;
    void v15[2] = v17;
    *((unsigned char *)v15 + 24) = 0;
    *((unsigned char *)v15 + 48) = 0;
    v15[7] = "Failed to encrypt data using public key from certificate.";
  }
  sub_10013E3EC((uint64_t *)&v20, (uint64_t *)&v19);
  int v18 = CFDataGetLength(v19);
  sub_10013E59C((_DWORD *)(a1 + 48), &v18);
  CFDataRef v10 = v19;
  v27.length = CFDataGetLength(v19);
  v27.location = 0;
  CFDataGetBytes(v10, v27, (UInt8 *)(a1 + 52));
  sub_10002D56C((const void **)&v19);
  sub_10002D56C((const void **)&plaintext);
  sub_10002D56C((const void **)&theData);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_10013E2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  __cxa_free_exception(v18);
  sub_10002D56C(&a13);
  sub_10002D56C(&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **sub_10013E358@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = (void **)sub_1001424C0(a2, *(void *)(a1 + 8) + *(void *)(a1 + 32) - (*(void *)a1 + *(void *)(a1 + 24)) + 5);
  long long v4 = (char *)*result;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = v5 - *(void *)a1;
  if (v5 != *(void *)a1) {
    __n128 result = (void **)memmove(*result, *(const void **)a1, v5 - *(void *)a1);
  }
  int v7 = &v4[v6];
  id v8 = *(unsigned char **)(a1 + 24);
  CFStringRef v9 = *(unsigned char **)(a1 + 32);
  int64_t v10 = v9 - v8;
  if (v9 != v8) {
    __n128 result = (void **)memmove(v7, v8, v9 - v8);
  }
  strcpy(&v7[v10], "CKIE");
  return result;
}

uint64_t *sub_10013E3EC@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    long long v4 = std::generic_category();
    exception[1] = 22;
    exception[2] = v4;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  return result;
}

void sub_10013E48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
}

_DWORD *sub_10013E4A0(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_publicKeyHash";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

SecKeyAlgorithm sub_10013E518(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) != 42) {
    goto LABEL_7;
  }
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1 == 10)
  {
    uint64_t v2 = &kSecKeyAlgorithmRSAEncryptionPKCS1;
    return *v2;
  }
  if (v1 != -2147483647)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Unsupported public key algorithm.", 0xA1u);
  }
  uint64_t v2 = &kSecKeyAlgorithmRSAEncryptionOAEPSHA1;
  return *v2;
}

_DWORD *sub_10013E59C(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_encryptedBlob";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

int *sub_10013E614(int *a1, uint64_t a2)
{
  long long v4 = a1 + 3;
  uint64_t v5 = a1 + 12;
  uint64_t v6 = a1 + 25;
  bzero(a1, 0x268uLL);
  int v7 = bswap32(*(_DWORD *)a2);
  LODWORD(v12) = 103;
  sub_100019EB0((uint64_t)"key_derivation_algorithm_t", v7, &v12, 1);
  *a1 = v7;
  int v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v12) = 0;
  sub_100019EB0((uint64_t)"key_derivation_prng_algorithm_t", v8, &v12, 1);
  a1[1] = v8;
  a1[2] = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 12));
  sub_10013EA4C(v4, &v12);
  long long v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)a1 + 2) = v9;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 48));
  sub_10013EAC4(v5, &v12);
  long long v10 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 17) = v10;
  a1[21] = bswap32(*(_DWORD *)(a2 + 84));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 88));
  unint64_t v12 = 0x8000000100000011;
  sub_100019EB0((uint64_t)"wrap_key_crypto_algo", (int)v5, &v12, 2);
  a1[22] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 92));
  LODWORD(v12) = 7;
  sub_100019EB0((uint64_t)"wrap_key_crypto_padding_algo", (int)v5, &v12, 1);
  a1[23] = (int)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 96));
  LODWORD(v12) = 6;
  sub_100019EB0((uint64_t)"crypto_mode", (int)v5, &v12, 1);
  a1[24] = (int)v5;
  LODWORD(v12) = bswap32(*(_DWORD *)(a2 + 100));
  sub_10013EE3C(v6, &v12);
  memcpy(a1 + 26, (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t sub_10013E7FC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(_DWORD *)(a2 + 48) = bswap32(*(_DWORD *)(a1 + 48));
  long long v4 = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 52) = v4;
  *(_DWORD *)(a2 + 84) = bswap32(*(_DWORD *)(a1 + 84));
  *(_DWORD *)(a2 + 88) = bswap32(*(_DWORD *)(a1 + 88));
  *(_DWORD *)(a2 + 92) = bswap32(*(_DWORD *)(a1 + 92));
  *(_DWORD *)(a2 + 96) = bswap32(*(_DWORD *)(a1 + 96));
  *(_DWORD *)(a2 + 10io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a1 + 100));
  memcpy((void *)(a2 + 104), (const void *)(a1 + 104), 0x200uLL);
  return a2 + 616;
}

uint64_t sub_10013E8C4(uint64_t a1)
{
  *(_DWORD *)a1 = 103;
  LODWORD(v3) = 103;
  sub_100019EB0((uint64_t)"key_derivation_algorithm_t", 103, &v3, 1);
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(v3) = 0;
  sub_100019EB0((uint64_t)"key_derivation_prng_algorithm_t", 0, &v3, 1);
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4io_rings_get_max_version(0, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 84) = 0x11000000C0;
  unint64_t v3 = 0x8000000100000011;
  sub_100019EB0((uint64_t)"wrap_key_crypto_algo", 17, &v3, 2);
  *(_DWORD *)(a1 + 92) = 7;
  LODWORD(v3) = 7;
  sub_100019EB0((uint64_t)"wrap_key_crypto_padding_algo", 7, &v3, 1);
  *(_DWORD *)(a1 + 96) = 6;
  LODWORD(v3) = 6;
  sub_100019EB0((uint64_t)"crypto_mode", 6, &v3, 1);
  bzero((void *)(a1 + 100), 0x204uLL);
  LODWORD(v3) = 20;
  sub_10013EA4C((_DWORD *)(a1 + 12), &v3);
  LODWORD(v3) = 8;
  sub_10013EAC4((_DWORD *)(a1 + 48), &v3);
  sub_10013EB3C((void *)(a1 + 16), *(unsigned int *)(a1 + 12));
  sub_10013EB3C((void *)(a1 + 52), *(unsigned int *)(a1 + 48));
  return a1;
}

_DWORD *sub_10013EA4C(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_salt";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

_DWORD *sub_10013EAC4(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_blob_encryption_iv";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

uint64_t sub_10013EB3C(void *a1, size_t a2)
{
  uint64_t result = CCRandomGenerateBytes(a1, a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v4);
    sub_1000039A0(v4, (uint64_t)"random generation failed with err code ", 39);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v4, 0x9Au);
  }
  return result;
}

void sub_10013EBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10013EC10(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if (v1 == -2147483647) {
    return 0;
  }
  if (v1 != 17)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v4);
    sub_1000039A0(v4, (uint64_t)"Unsupported key decryption algo", 31);
    sub_10000550C((uint64_t)exception, (uint64_t)v4, 0xA1u);
  }
  return 2;
}

void sub_10013ECBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10013ECF0@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint8_t **a3@<X8>)
{
  unint64_t v4 = *(unsigned int *)(a1 + 84);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFUUIDRef v11 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"crypto_format: key size isn't a multiple of 8", 0x16u);
  }
  char v14 = 0;
  sub_100141C60(a3, v4 >> 3, &v14);
  size_t v7 = strlen(a2);
  uint64_t result = CCKeyDerivationPBKDF(2u, a2, v7, (const uint8_t *)(a1 + 16), *(unsigned int *)(a1 + 12), 1u, *(_DWORD *)(a1 + 8), *a3, a3[1] - *a3);
  unsigned int v9 = result;
  if (result)
  {
    unint64_t v12 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v12 = &off_1001C3DE8;
    uint64_t v13 = std::generic_category();
    v12[1] = v9;
    void v12[2] = v13;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "crypto_format: Can't derive key";
  }
  return result;
}

void sub_10013EE20(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10013EE3C(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_blob";
    exception[2] = "field size too large";
  }
  *uint64_t result = *a2;
  return result;
}

_DWORD *sub_10013EEB4(_DWORD *a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = sub_10013E8C4((uint64_t)a1);
  LODWORD(v11[0]) = 8;
  sub_10013EAC4((_DWORD *)(v6 + 48), v11);
  size_t v7 = strlen(a3);
  a1[2] = CCCalibratePBKDF(2u, v7, a1[3], 1u, (unint64_t)a1[21] >> 3, 0x64u);
  sub_10013E358(a2, &v15);
  size_t dataOutMoved = 0;
  sub_10013ECF0((uint64_t)a1, a3, &v12);
  CCAlgorithm v8 = sub_10013EC10((uint64_t)a1);
  LODWORD(a3) = CCCrypt(0, v8, 1u, v12, v13 - v12, a1 + 13, v15, v16 - (unsigned char *)v15, a1 + 26, 0x200uLL, &dataOutMoved);
  bzero(v12, v13 - v12);
  if (a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v11);
    sub_1000039A0(v11, (uint64_t)"Image key encoding failed with err code ", 40);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v11, 0x9Au);
  }
  LODWORD(v11[0]) = dataOutMoved;
  sub_10013EE3C(a1 + 25, v11);
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    unsigned int v16 = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_10013F044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10000359C((uint64_t)va);
  size_t v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(void *)(v5 - 8io_rings_get_max_version(0, 0) = v7;
    operator delete(v7);
  }
  CCAlgorithm v8 = *(void **)(v5 - 56);
  if (v8)
  {
    *(void *)(v5 - 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013F0AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  int v4 = bswap32(*(_DWORD *)a2);
  long long v6 = xmmword_10016E360;
  int v7 = 9;
  sub_100019EB0((uint64_t)"auth_table_entry_mechanism", v4, &v6, 5);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 4) = bswap64(*(void *)(a2 + 4));
  *(void *)(a1 + 12) = bswap64(*(void *)(a2 + 12));
  return a1;
}

void sub_10013F16C(unsigned int *a1@<X1>, const char *a2@<X2>, unint64_t *a3@<X8>)
{
  size_t __sz = 0;
  sub_10013ECF0((uint64_t)a1, a2, (uint8_t **)&__p);
  CCAlgorithm v5 = sub_10013EC10((uint64_t)a1);
  unsigned int v6 = CCCrypt(1u, v5, 1u, __p, v10 - (unsigned char *)__p, a1 + 13, a1 + 26, a1[25], __src, a1[25], &__sz);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    CCAlgorithm v8 = std::generic_category();
    exception[1] = v6;
    exception[2] = v8;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't decrypt wrapped key";
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_100123290(a3, __sz);
  sub_1001234A4((uint64_t)a3, (char *)*a3, __src, &__src[__sz], __sz);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_10013F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unsigned int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10013F310@<D0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  if (!sub_10013F418(a1, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v14 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"crypto_format: Cookie differs", 0x23u);
  }
  unsigned int v6 = *a2;
  size_t v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 3;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_100141CE0(&v17, v6, (uint64_t)v6 + v7, v7);
  unint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = (char *)*a2 + (v8 >> 3);
  uint64_t v10 = (*(_DWORD *)(a1 + 32) + v8) >> 3;
  uint64_t v11 = (uint64_t)*a2 + v10;
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  sub_100141CE0(&v15, v9, v11, v10 - (v8 >> 3));
  *(_OWORD *)a3 = v17;
  *(void *)(a3 + 16) = v18;
  double result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  *(void *)(a3 + 4io_rings_get_max_version(0, 0) = v16;
  return result;
}

void sub_10013F3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10013F418(uint64_t a1, void *a2)
{
  uint64_t v2 = ((*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24)) >> 3) + 5;
  if (a2[1] - *a2 != v2) {
    return 0;
  }
  uint64_t v3 = *a2 + v2;
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 4;
  LODWORD(v6.__r_.__value_.__l.__data_) = *(_DWORD *)(v3 - 5);
  v6.__r_.__value_.__s.__data_[4] = 0;
  BOOL v4 = std::string::compare(&v6, "CKIE") == 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_10013F4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 == 616) {
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  std::string v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"UDIF encryption: password header size mismatch", 0x16u);
}

void sub_10013F664(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete[]();
}

uint64_t sub_10013F6A8(uint64_t a1, uint64_t a2, uint64_t *a3, __SecKey *a4, uint64_t a5)
{
  unsigned int v9 = (void *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFErrorRef error = 0;
  *(void *)&long long v21 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a5 + 52), *(unsigned int *)(a5 + 48));
  sub_10013E3EC((uint64_t *)&v21, (uint64_t *)&v27);
  CFStringRef v10 = sub_10013E518(a5);
  CFDataRef v26 = SecKeyCreateDecryptedData(a4, v10, v27, &error);
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &off_1001C3DE8;
    CFDataRef v19 = std::generic_category();
    exception[1] = Code;
    exception[2] = v19;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Error while decrypting data using keychain";
  }
  sub_10013E3EC((uint64_t *)&v26, (uint64_t *)&v25);
  uint64_t v11 = *a3;
  sub_1001231A8(v25, 0, 0, (unint64_t *)__p);
  sub_10013F310(v11, (const void **)__p, (uint64_t)&v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v12;
  if (v13) {
    operator delete();
  }
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v14;
    operator delete(v14);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v21;
  *(void *)(a1 + 16) = v22;
  long long v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(void *)(a1 + 32) = v15;
    operator delete(v15);
    *unsigned int v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = v23;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = v24;
  sub_10002D56C((const void **)&v25);
  sub_10002D56C((const void **)&v27);
  return a1;
}

void sub_10013F898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v20);
  sub_10002D56C((const void **)(v22 - 64));
  uint64_t v24 = *(void **)(v19 + 56);
  if (v24)
  {
    *(void *)(v19 + 64) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void *)(v19 + 48);
  *(void *)(v19 + 48) = 0;
  if (v25) {
    operator delete();
  }
  CFDataRef v26 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 32) = v26;
    operator delete(v26);
  }
  CFDataRef v27 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10013F940(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10013F988(_OWORD *a1)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new[]();
}

void sub_10013FC98()
{
  __cxa_end_catch();
  sub_10013F940((uint64_t)&v0);
  JUMPOUT(0x10013FCCCLL);
}

void sub_10013FCBC()
{
}

__n128 sub_10013FD4C(void *a1, uint64_t a2, __n128 *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  uint64_t v5 = *a4;
  *a4 = 0;
  a1[6] = v5;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return result;
}

const void **sub_10013FDA0(uint64_t a1, char *a2)
{
  return sub_10013DD08(*(void *)(a1 + 48), a2);
}

uint64_t sub_10013FDA8(uint64_t a1, CCOperation a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = a1 + 24;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  sub_10006AA10((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(void *)(v10 + 24) = a5;
  *(void *)(v10 + 32) = a4;
  CCCryptorStatus v11 = CCCryptorCreate(a2, 0, 0, *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3, 0, (CCCryptorRef *)(v10 - 16));
  if (v11)
  {
    unsigned int v13 = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    long long v15 = std::generic_category();
    exception[1] = v13;
    exception[2] = v15;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't initialize aes cryptor";
  }
  *(unsigned char *)a1 = 1;
  return a1;
}

void sub_10013FEAC(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10013FEC8(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    CCCryptorRelease(*(CCCryptorRef *)(a1 + 8));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10013FF10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v3 = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 4io_rings_get_max_version(0, 0) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v3;
  sub_1001451C4(a1 + 24, &v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v4;
  if (v5)
  {
    sub_100004944(v5);
    if (*((void *)&v7 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  return a1;
}

void sub_10013FFCC(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v5) {
    operator delete();
  }
  std::string v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100140028(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4, __SecKey *a5)
{
  SecKeyRef v27 = a5;
  unsigned int v9 = (unint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v10;
  unint64_t v11 = (unint64_t)*(unsigned int *)(v10 + 24) >> 3;
  uint64_t v12 = *(char **)a1;
  unsigned int v13 = *(char **)(a1 + 8);
  if (v11 <= v13 - v12)
  {
    if (v11 < v13 - v12)
    {
      unsigned int v13 = &v12[v11];
      *(void *)(a1 + 8) = &v12[v11];
    }
  }
  else
  {
    sub_100141D5C((unint64_t *)a1, v11 - (v13 - v12));
    uint64_t v12 = *(char **)a1;
    unsigned int v13 = *(char **)(a1 + 8);
  }
  sub_10013EB3C(v12, v13 - v12);
  unint64_t v15 = (unint64_t)*(unsigned int *)(*(void *)(a1 + 48) + 32) >> 3;
  uint64_t v16 = *(char **)(a1 + 24);
  long long v17 = *(char **)(a1 + 32);
  if (v15 <= v17 - v16)
  {
    if (v15 < v17 - v16)
    {
      long long v17 = &v16[v15];
      *(void *)(a1 + 32) = &v16[v15];
    }
  }
  else
  {
    sub_100141D5C(v9, v15 - (v17 - v16));
    uint64_t v16 = *(char **)(a1 + 24);
    long long v17 = *(char **)(a1 + 32);
  }
  sub_10013EB3C(v16, v17 - v16);
  sub_1001451C4((uint64_t)v9, v28);
  long long v18 = *(_OWORD *)v28;
  *(_OWORD *)uint64_t v28 = 0uLL;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v18;
  if (v19)
  {
    sub_100004944(v19);
    if (*(void *)&v28[8]) {
      sub_100004944(*(std::__shared_weak_count **)&v28[8]);
    }
  }
  __p = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  if (a4)
  {
    sub_10013EEB4(v28, a1, a4);
    unint64_t v25 = sub_100141E98((uint64_t *)&__p, (uint64_t)v28);
  }
  if (a5)
  {
    sub_10013DFC8((uint64_t)v28, a1, &v27);
    unint64_t v20 = v25;
    if (v25 >= v26)
    {
      uint64_t v22 = sub_1001422C8((uint64_t *)&__p, (uint64_t)v28);
    }
    else
    {
      *(_DWORD *)(v25 + 32) = 0;
      *(_OWORD *)unint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_DWORD *)unint64_t v20 = *(_DWORD *)v28;
      long long v21 = *(_OWORD *)&v28[4];
      *(_OWORD *)(v20 + 2io_rings_get_max_version(0, 0) = v29;
      *(_OWORD *)(v20 + 4) = v21;
      *(void *)(v20 + 36) = v30;
      *(_DWORD *)(v20 + 44) = v31;
      bzero((void *)(v20 + 48), 0x204uLL);
      *(_DWORD *)(v20 + 48) = v32;
      memcpy((void *)(v20 + 52), v33, 0x200uLL);
      *(_DWORD *)(v20 + 616) = 1;
      uint64_t v22 = v20 + 620;
    }
    unint64_t v25 = v22;
  }
  sub_100140394(a1, a3, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v25 = (unint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_100140318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v10 + 64);
  if (v13) {
    sub_100004944(v13);
  }
  uint64_t v14 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = 0;
  if (v14) {
    operator delete();
  }
  unint64_t v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100140394(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(*(void *)(a1 + 48) + 72) = 1496311187 * v6;
  uint64_t v30 = 76;
  unint64_t v7 = 0xBDEF7BDEF7BDEF7CLL * v6 + 76;
  unint64_t v29 = v7;
  uint64_t v8 = sub_1001406B4(a1, a3);
  sub_100142544(&__p, v8 + v7);
  sub_10013DC64(*(void *)(a1 + 48), (uint64_t)__p);
  uint64_t v9 = *a3;
  for (uint64_t i = a3[1]; v9 != i; v9 += 620)
  {
    long long v21 = &v30;
    uint64_t v22 = (std::__shared_weak_count *)&v29;
    p_p = &__p;
    uint64_t v11 = *(unsigned int *)(v9 + 616);
    if (v11 == -1) {
      sub_1000289E8();
    }
    int v31 = &v21;
    ((void (*)(uint64_t ***, uint64_t))off_1001C2458[v11])(&v31, v9);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) < *(void *)(*(void *)(a1 + 48) + 64))
  {
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    if (v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      unint64_t v20 = std::generic_category();
      exception[1] = v12;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed truncating crypto header";
    }
  }
  unsigned int v13 = (uint64_t *)__p;
  uint64_t v14 = v28;
  unint64_t v15 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  long long v21 = v13;
  uint64_t v22 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  p_p = (void **)(v14 - (unsigned char *)v13);
  uint64_t v24 = 0;
  int64_t v25 = v14 - (unsigned char *)v13;
  char v26 = 0;
  unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)a2 + 80))(a2, &v21);
  if (p_p != (void **)(int)v16)
  {
    long long v17 = __cxa_allocate_exception(0x40uLL);
    void *v17 = &off_1001C3DE8;
    long long v18 = std::generic_category();
    v17[1] = v16;
    v17[2] = v18;
    *((unsigned char *)v17 + 24) = 0;
    *((unsigned char *)v17 + 48) = 0;
    v17[7] = "Failed writing crypto header";
  }
  if (v22) {
    sub_100004944(v22);
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
}

void sub_100140670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001406B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  int v4 = 0;
  do
  {
    uint64_t v5 = *(unsigned int *)(v2 + 616);
    if (v5 == -1) {
      sub_1000289E8();
    }
    uint64_t v8 = &v7;
    v4 += ((uint64_t (*)(char **, uint64_t))off_1001C2448[v5])(&v8, v2);
    v2 += 620;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_100140744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a4;
  uint64_t v9 = 0;
  unint64_t v10 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  while (1)
  {
    int v11 = sub_100140898(a2, (a5 + v9) / v10, (const void *)(a3 + v9), (void *)(a3 + v9), 1);
    if (v11) {
      break;
    }
    v9 += v10;
    if (!--v6) {
      return 0;
    }
  }
  int v13 = v11;
  *(void *)&long long v14 = "crypto_format_backend::crypt_chunk(crypto::format::aes_context &, char *, size_t, uint64_t)";
  *((void *)&v14 + 1) = 34;
  int v15 = 16;
  sub_100140B34(v16, &v14);
  sub_1000039A0(v17, (uint64_t)"Crypto operation on data of ", 28);
  std::ostream::operator<<();
  sub_1000039A0(v17, (uint64_t)" failed with ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100143D4C((uint64_t)v16);
  std::ios::~ios();
  if (v13 < 0) {
    return v13;
  }
  else {
    return -v13;
  }
}

void sub_100140880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100140C58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100140898(uint64_t a1, unsigned int a2, const void *a3, void *a4, uint64_t a5)
{
  macOut[0] = 0;
  macOut[1] = 0;
  int v17 = 0;
  unint64_t v10 = *(const void **)(a1 + 56);
  LODWORD(v13) = bswap32(a2);
  memcpy(&__dst, v10, sizeof(__dst));
  CCHmacUpdate(&__dst, &v13, 4uLL);
  CCHmacFinal(&__dst, macOut);
  CCCryptorStatus v11 = CCCryptorReset(*(CCCryptorRef *)(a1 + 8), macOut);
  if (v11)
  {
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    sub_1001427E4(&__dst, &v13);
    sub_1000039A0(&__dst.ctx[90], (uint64_t)"CommonCryptoReset @ ", 20);
    std::ostream::operator<<();
    sub_1000039A0(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    sub_1000039A0(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100142B44((uint64_t)&__dst);
  }
  else
  {
    CCCryptorStatus v11 = CCCryptorUpdate(*(CCCryptorRef *)(a1 + 8), a3, *(void *)(a1 + 48) * a5, a4, *(void *)(a1 + 48) * a5, 0);
    if (!v11) {
      return 0;
    }
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    sub_10014294C(&__dst, &v13);
    sub_1000039A0(&__dst.ctx[90], (uint64_t)"CommonCryptoUpdate @ ", 21);
    std::ostream::operator<<();
    sub_1000039A0(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    sub_1000039A0(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100143348((uint64_t)&__dst);
  }
  std::ios::~ios();
  if (v11 < 0) {
    return v11;
  }
  else {
    return -v11;
  }
}

void sub_100140B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100142A70((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100140B34(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100145304((uint64_t)a1, a2);
  *a1 = off_1001C28C0;
  a1[45] = &off_1001C29C0;
  a1[46] = &off_1001C29E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C28C0;
  a1[45] = off_1001C2948;
  a1[46] = off_1001C2970;
  return a1;
}

void sub_100140C34(_Unwind_Exception *a1)
{
  sub_100143D4C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100140C58(uint64_t a1)
{
  return a1;
}

uint64_t sub_100140C9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4 >= 0x21 && (int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 48) + 52), qos_class_self() > 0x14))
  {
    unsigned int v14 = 0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100140DB4;
    block[3] = &unk_1001C2338;
    block[4] = a1;
    block[5] = a4;
    block[6] = a2;
    block[7] = a3;
    int v13 = v10;
    block[8] = a5;
    block[9] = &v14;
    dispatch_apply((a4 + 31) >> 5, 0, block);
    return atomic_load(&v14);
  }
  else
  {
    return sub_100140744(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_100140DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if ((unint64_t)(*(void *)(a1 + 40) - 32 * a2) >= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 40) - 32 * a2;
  }
  sub_10013FDA8((uint64_t)v8, *(_DWORD *)(*(void *)(a1 + 48) + 16), *(void *)(a1 + 48) + 24, *(void *)(*(void *)(a1 + 48) + 56), *(void *)(*(void *)(a1 + 48) + 48));
  unsigned int v6 = sub_100140744(v4, (uint64_t)v8, *(void *)(a1 + 56) + v3 * *(unsigned int *)(a1 + 80), v5, v3 * *(unsigned int *)(a1 + 80) + *(void *)(a1 + 64));
  if (v6) {
    atomic_store(v6, *(unsigned int **)(a1 + 72));
  }
  return sub_10013FEC8((uint64_t)v8);
}

void sub_100140E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100140E60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48);
  uint64_t v9 = *(unsigned int *)(v8 + 52);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(v8 + 64);
  }
  uint64_t v11 = sub_1000496D0(*(void *)(a1 + 24), a2, v9 * a3, v10 + a4);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v13 = v11;
    *(void *)&long long v14 = "crypto_format_backend::read_aligned(char *, ssize_t, uint64_t)";
    *((void *)&v14 + 1) = 35;
    int v15 = 16;
    sub_100140FE8(v16, &v14);
    sub_1000039A0(v17, (uint64_t)"Crypto couldn't read from inner backend @ ", 42);
    std::ostream::operator<<();
    sub_1000039A0(v17, (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_1001444C0((uint64_t)v16);
    std::ios::~ios();
    return v13;
  }
  return sub_100140C9C(a1, a1 + 120, a2, a3, a4);
}

void sub_100140FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10014110C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100140FE8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100145394((uint64_t)a1, a2);
  *a1 = off_1001C2AE0;
  a1[45] = &off_1001C2BE0;
  a1[46] = &off_1001C2C08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C2AE0;
  a1[45] = off_1001C2B68;
  a1[46] = off_1001C2B90;
  return a1;
}

void sub_1001410E8(_Unwind_Exception *a1)
{
  sub_1001444C0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10014110C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100141150(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  uint64_t v6 = (uint64_t)a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  uint64_t v8 = (unint64_t)v5 / v7 * v7;
  unint64_t v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    uint64_t result = sub_100140E60(a1, *(void *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if (result) {
      return result;
    }
    unint64_t v11 = v9;
    if (v6 >= (uint64_t)(v7 - v9)) {
      size_t v12 = v7 - v9;
    }
    else {
      size_t v12 = v6;
    }
    memcpy(v4, (const void *)(*(void *)(a1 + 184) + v11), v12);
    v6 -= v12;
    v4 += v12;
    v8 += v7;
  }
  uint64_t result = sub_100140E60(a1, (uint64_t)v4, v6 / v7, v8);
  if (result) {
    return result;
  }
  if (!(v6 % v7)) {
    return *((unsigned int *)a2 + 4);
  }
  uint64_t result = sub_100140E60(a1, *(void *)(a1 + 184), 1uLL, v6 - v6 % v7 + v8);
  if (!result)
  {
    memcpy(&v4[v6 / v7 * v7], *(const void **)(a1 + 184), v6 % v7);
    return *((unsigned int *)a2 + 4);
  }
  return result;
}

uint64_t sub_100141260(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 48);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(unsigned int *)(v8 + 52);
  uint64_t v11 = sub_100140C9C(a1, a1 + 56, a2, a3, a4);
  if (!v11)
  {
    uint64_t v12 = sub_10004DFDC(*(void *)(a1 + 24), a2, v10 * a3, v9 + a4);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v11 = v12;
      *(void *)&long long v14 = "crypto_format_backend::write_aligned(char *, ssize_t, uint64_t)";
      *((void *)&v14 + 1) = 36;
      int v15 = 16;
      sub_1001413C4(v16, &v14);
      sub_1000039A0(v17, (uint64_t)"Crypto couldn't write to inner backend @ ", 41);
      std::ostream::operator<<();
      sub_1000039A0(v17, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_100144C34((uint64_t)v16);
      std::ios::~ios();
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_1001413AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001414E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1001413C4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100145424((uint64_t)a1, a2);
  *a1 = off_1001C2D00;
  a1[45] = &off_1001C2E00;
  a1[46] = &off_1001C2E28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C2D00;
  a1[45] = off_1001C2D88;
  a1[46] = off_1001C2DB0;
  return a1;
}

void sub_1001414C4(_Unwind_Exception *a1)
{
  sub_100144C34(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001414E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10014152C(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  int64_t v6 = (int64_t)a2[2];
  uint64_t v5 = a2[3];
  int64_t v7 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 48) + 52);
  uint64_t v8 = (unint64_t)v5 / v7 * v7;
  unint64_t v9 = (unint64_t)v5 % v7;
  if ((unint64_t)v5 % v7)
  {
    uint64_t result = sub_100140E60(a1, *(void *)(a1 + 184), 1uLL, (unint64_t)v5 / v7 * v7);
    if (result) {
      return result;
    }
    uint64_t v12 = &v4[v9];
    size_t v13 = v6 >= (uint64_t)(v7 - v9) ? v7 - v9 : v6;
    memcpy(*(void **)(a1 + 184), v12, v13);
    uint64_t result = sub_100141260(a1, *(void *)(a1 + 184), 1uLL, v8);
    if (result) {
      return result;
    }
    v6 -= v13;
    v4 += v13;
    v8 += v13;
  }
  if (!*((unsigned char *)a2 + 40))
  {
    uint64_t v10 = v6 / v7;
    uint64_t result = sub_100141260(a1, (uint64_t)v4, v6 / v7, v8);
    if (result) {
      return result;
    }
    v4 += v10 * v7;
    v8 += v10 * v7;
    v6 %= v7;
    goto LABEL_5;
  }
  if (v6 < v7)
  {
LABEL_5:
    if (!v6) {
      return *((unsigned int *)a2 + 4);
    }
    uint64_t result = sub_100140E60(a1, *(void *)(a1 + 184), 1uLL, v8);
    if (!result)
    {
      memcpy(*(void **)(a1 + 184), v4, v6);
      uint64_t result = sub_100141260(a1, *(void *)(a1 + 184), 1uLL, v8);
      if (!result) {
        return *((unsigned int *)a2 + 4);
      }
    }
    return result;
  }
  uint64_t v14 = 0;
  while (1)
  {
    memcpy(*(void **)(a1 + 184), &v4[v14], v7);
    uint64_t result = sub_100141260(a1, *(void *)(a1 + 184), 1uLL, v8 + v14);
    if (result) {
      return result;
    }
    v6 -= v7;
    v14 += v7;
    if (v6 < v7)
    {
      v8 += v14;
      v4 += v14;
      goto LABEL_5;
    }
  }
}

uint64_t sub_1001416BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(unsigned char *)(a1 + 192)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v4 + a2);
}

uint64_t sub_100141708(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 192);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 48);
  if ((v3 & 2) == 0) {
    *(void *)(v4 + 56) = a2;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v5 + 56))(v5, (a2 + (unint64_t)*(unsigned int *)(v4 + 52) - 1)/ *(unsigned int *)(v4 + 52)* *(unsigned int *)(v4 + 52)+ v6);
  if (!v7)
  {
    sub_10013DC64(*(void *)(*(void *)(a1 + 40) + 48), (uint64_t)v16);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
    uint64_t v11 = v16;
    uint64_t v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v13 = xmmword_1001790E0;
    uint64_t v14 = 76;
    char v15 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, unsigned char **))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v11);
    if ((void)v13 == v9) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v9;
    }
    if (v12) {
      sub_100004944(v12);
    }
  }
  return v7;
}

void sub_100141858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_100004944(a11);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100141878(uint64_t a1, char *a2)
{
  return sub_10013DD08(*(void *)(*(void *)(a1 + 40) + 48), a2);
}

void sub_100141884(void *a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 72))(&v6);
  sub_10004D088(a1, &v6);
  if (v7) {
    sub_100004944(v7);
  }
  *a1 = off_1001C2368;
  a1[5] = *a3;
  uint64_t v5 = a3[1];
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10013FDA8((uint64_t)(a1 + 7), 0, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  sub_10013FDA8((uint64_t)(a1 + 15), 1u, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  operator new[]();
}

void sub_1001419AC(_Unwind_Exception *a1)
{
  sub_10013FEC8(v3);
  sub_10013FEC8(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[6];
  if (v5) {
    sub_100004944(v5);
  }
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

void sub_1001419F0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_10004D088(a1, a3);
  *uint64_t v5 = off_1001C2368;
  uint64_t v6 = *(void *)(a2 + 48);
  v5[5] = *(void *)(a2 + 40);
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10013FDA8((uint64_t)(a1 + 7), *(_DWORD *)(a2 + 72), a2 + 80, *(void *)(a2 + 112), *(void *)(a2 + 104));
  sub_10013FDA8((uint64_t)(a1 + 15), *(_DWORD *)(a2 + 136), a2 + 144, *(void *)(a2 + 176), *(void *)(a2 + 168));
  operator new[]();
}

void sub_100141AB8(_Unwind_Exception *a1)
{
  sub_10013FEC8(v3);
  sub_10013FEC8(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[6];
  if (v5) {
    sub_100004944(v5);
  }
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

void sub_100141AF8(uint64_t a1, void *a2)
{
  sub_1001454B4((uint64_t)&v2, a1, a2);
}

uint64_t sub_100141B3C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 192) & 2) != 0 || (uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 56)) == 0)
  {
    unint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 192)) {
      unint64_t v4 = 0;
    }
    else {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
    }
    if (v3 <= v4)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
      if (*(unsigned char *)(a1 + 192)) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 48) + 64);
      }
      return v5 - v6;
    }
  }
  return result;
}

void sub_100141C14(void *a1)
{
  sub_100145118(a1);
  operator delete();
}

void *sub_100141C4C(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"crypto", 6);
}

void *sub_100141C60(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_10006AA8C(a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_100141CC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100141CE0(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10006AA8C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100141D40(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100141D5C(unint64_t *a1, size_t a2)
{
  size_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_10004B570();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    long long v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      size_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_100141E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)sub_1001421E0(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  __p = v10;
  uint64_t v14 = &v10[620 * v4];
  uint64_t v15 = (uint64_t)v14;
  unsigned int v16 = &v10[620 * v9];
  *(_DWORD *)(sub_10014203C((uint64_t)v14, a2) + 616) = 0;
  v15 += 620;
  sub_100142100(a1, &__p);
  uint64_t v11 = a1[1];
  if ((char *)v15 != v14) {
    uint64_t v15 = (uint64_t)&v14[(v15 - (uint64_t)v14 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_100141FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014203C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  bzero((void *)(a1 + 100), 0x204uLL);
  *(_DWORD *)(a1 + 10io_rings_get_max_version(0, 0) = *(_DWORD *)(a2 + 100);
  memcpy((void *)(a1 + 104), (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t *sub_100142100(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = v6 - 620;
    do
    {
      uint64_t v8 = v4 - 620;
      *(unsigned char *)uint64_t v7 = 0;
      *(_DWORD *)(v7 + 616) = -1;
      uint64_t v9 = *(unsigned int *)(v4 - 4);
      if (v9 != -1)
      {
        uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1001C2438[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 616) = v9;
      }
      v7 -= 620;
      uint64_t v4 = v8;
    }
    while (v8 != v5);
    uint64_t v6 = v7 + 620;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  int v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_1001421E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x69B4069B4069B5) {
    sub_10004B1A4();
  }
  return operator new(620 * a2);
}

uint64_t sub_10014222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014203C(a2, a3);
}

void *sub_100142238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(a2 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 4io_rings_get_max_version(0, 0) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  bzero((void *)(a2 + 48), 0x204uLL);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  return memcpy((void *)(a2 + 52), (const void *)(a3 + 52), 0x200uLL);
}

uint64_t sub_1001422C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1001421E0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[620 * v4];
  __p = v10;
  unsigned int v16 = v11;
  long long v18 = &v10[620 * v9];
  *((_DWORD *)v11 + 8) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v11 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v11 + 4) = v12;
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v11 + 1io_rings_get_max_version(0, 0) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  bzero(v11 + 48, 0x204uLL);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  memcpy(v11 + 52, (const void *)(a2 + 52), 0x200uLL);
  *((_DWORD *)v11 + 154) = 1;
  int v17 = v11 + 620;
  sub_100142100(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    int v17 = &v16[(v17 - v16 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_10014246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001424C0(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10006AA8C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100142518(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100142534()
{
  return 616;
}

uint64_t sub_10014253C()
{
  return 564;
}

void *sub_100142544(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10006AA8C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_10014259C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001425B8(void ***a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v7 = xmmword_10016E360;
  int v8 = 9;
  sub_100019EB0((uint64_t)"auth_table_entry_mechanism", 1, &v7, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x1000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x6802000000000000;
  **v3 += 20;
  uint64_t result = sub_10013E7FC(a2, *v3[2] + *v3[1]);
  *v3[1] += 616;
  return result;
}

void *sub_1001426A4(void ***a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v9 = xmmword_10016E360;
  int v10 = 9;
  sub_100019EB0((uint64_t)"auth_table_entry_mechanism", 2, &v9, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x2000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x3402000000000000;
  **v3 += 20;
  uint64_t v6 = *v3[2] + *v3[1];
  *(_DWORD *)uint64_t v6 = bswap32(*(_DWORD *)a2);
  long long v7 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 2io_rings_get_max_version(0, 0) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v6 + 4) = v7;
  *(_DWORD *)(v6 + 36) = bswap32(*(_DWORD *)(a2 + 36));
  *(_DWORD *)(v6 + 4io_rings_get_max_version(0, 0) = bswap32(*(_DWORD *)(a2 + 40));
  *(_DWORD *)(v6 + 44) = bswap32(*(_DWORD *)(a2 + 44));
  *(_DWORD *)(v6 + 48) = bswap32(*(_DWORD *)(a2 + 48));
  uint64_t result = memcpy((void *)(v6 + 52), (const void *)(a2 + 52), 0x200uLL);
  *v3[1] += 564;
  return result;
}

void *sub_1001427E4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100142AB4((uint64_t)a1, a2);
  *a1 = off_1001C2480;
  a1[45] = &off_1001C2580;
  a1[46] = &off_1001C25A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C2480;
  a1[45] = off_1001C2508;
  a1[46] = off_1001C2530;
  return a1;
}

void sub_1001428E4(_Unwind_Exception *a1)
{
  sub_100142B44(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100142908(uint64_t a1)
{
  return a1;
}

void *sub_10014294C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001432B8((uint64_t)a1, a2);
  *a1 = off_1001C26A0;
  a1[45] = &off_1001C27A0;
  a1[46] = &off_1001C27C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C26A0;
  a1[45] = off_1001C2728;
  a1[46] = off_1001C2750;
  return a1;
}

void sub_100142A4C(_Unwind_Exception *a1)
{
  sub_100143348(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100142A70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100142AB4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C2618;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100142B30(_Unwind_Exception *a1)
{
}

uint64_t sub_100142B44(uint64_t a1)
{
  *(void *)a1 = off_1001C2618;
  sub_100142F4C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100142C80(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100142B44(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100142CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100142D20(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100142D88(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100142B44(v1);
  return std::ios::~ios();
}

void sub_100142DD4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100142B44(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100142E38(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100142B44(v1);
  return std::ios::~ios();
}

void sub_100142E98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100142B44(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100142F14(uint64_t a1)
{
  sub_100142B44(a1);
  operator delete();
}

uint64_t sub_100142F4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001430D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001430A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1001430D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 564;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 564;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001432B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C2838;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100143334(_Unwind_Exception *a1)
{
}

uint64_t sub_100143348(uint64_t a1)
{
  *(void *)a1 = off_1001C2838;
  sub_100143750(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100143484(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100143348(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001434EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100143524(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10014358C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100143348(v1);
  return std::ios::~ios();
}

void sub_1001435D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100143348(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10014363C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100143348(v1);
  return std::ios::~ios();
}

void sub_10014369C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100143348(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100143718(uint64_t a1)
{
  sub_100143348(a1);
  operator delete();
}

uint64_t sub_100143750(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001438D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1001438AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1001438D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 578;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 578;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100143ABC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100143D4C(v1);
  return std::ios::~ios();
}

uint64_t sub_100143B08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100143D4C(v1);
  return std::ios::~ios();
}

void sub_100143B68(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100143D4C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100143BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100143C08(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100143C70(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100143D4C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100143CD4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100143D4C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100143D4C(uint64_t a1)
{
  *(void *)a1 = off_1001C2A58;
  sub_100143E88(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100143E88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100144048((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100143FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144010(uint64_t a1)
{
  sub_100143D4C(a1);
  operator delete();
}

int *sub_100144048(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 690;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 690;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100144230(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001444C0(v1);
  return std::ios::~ios();
}

uint64_t sub_10014427C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001444C0(v1);
  return std::ios::~ios();
}

void sub_1001442DC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001444C0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100144344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10014437C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001443E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001444C0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100144448(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001444C0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001444C0(uint64_t a1)
{
  *(void *)a1 = off_1001C2C78;
  sub_1001445FC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1001445FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001447BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100144758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144784(uint64_t a1)
{
  sub_1001444C0(a1);
  operator delete();
}

int *sub_1001447BC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 738;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 738;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1001449A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100144C34(v1);
  return std::ios::~ios();
}

uint64_t sub_1001449F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100144C34(v1);
  return std::ios::~ios();
}

void sub_100144A50(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100144C34(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100144AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100144AF0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100144B58(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100144C34(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100144BBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100144C34(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100144C34(uint64_t a1)
{
  *(void *)a1 = off_1001C2E98;
  sub_100144D70(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100144D70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100144F30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100144ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100144EF8(uint64_t a1)
{
  sub_100144C34(a1);
  operator delete();
}

int *sub_100144F30(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 806;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 806;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100145118(void *a1)
{
  *a1 = off_1001C2368;
  if (a1[23]) {
    operator delete[]();
  }
  sub_10013FEC8((uint64_t)(a1 + 15));
  sub_10013FEC8((uint64_t)(a1 + 7));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100004944(v2);
  }
  *a1 = off_1001A4E78;
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100004944(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_1001451C4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x198uLL);
  uint64_t result = sub_100145220((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10014520C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100145220(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001C2F18;
  CCHmacInit((CCHmacContext *)(a1 + 24), 0, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_100145274(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100145288(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001C2F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001452A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001C2F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100145304(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C2A58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100145380(_Unwind_Exception *a1)
{
}

uint64_t sub_100145394(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C2C78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100145410(_Unwind_Exception *a1)
{
}

uint64_t sub_100145424(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C2E98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1001454A0(_Unwind_Exception *a1)
{
}

void sub_1001454B4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0xE0uLL);
  sub_100145530(v5, a2, a3);
}

void sub_10014551C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100145530(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A8548;
  sub_1001419F0(a1 + 3, a2, a3);
}

void sub_100145578(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10014558C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  operator new();
}

void sub_1001456DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v15 + 8);
  *(void *)(v15 + 8) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014578C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)(*(void *)(*(void *)(a1 + 8) + 16) + 7) >> 3;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  BOOL v4 = v3 == v2 || v3 == v2 + 16;
  uint64_t v5 = v4;
  if (v4)
  {
    unint64_t v6 = v3 - v2;
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
    uint64_t v8 = *((void *)sub_10014B860() + 1);
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v20 = v2;
    unint64_t v21 = v6;
    unint64_t v22 = v2;
    char v23 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), &v19);
    if (v2 != v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003404((uint64_t)v17);
      sub_1000039A0(v17, (uint64_t)"Failed reading ", 15);
      sub_100146B4C(v17);
      sub_10000550C((uint64_t)exception, (uint64_t)v17, v9);
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v15 = "sparse_bundles::mapped_blocks_t::load_file()";
      *((void *)&v15 + 1) = 42;
      int v16 = 2;
      sub_1001460A4(v17, &v15);
      sub_1000039A0(v18, (uint64_t)"Found a valid file for ", 23);
      sub_100146B4C(v18);
      std::ostream::~ostream();
      sub_100146E78((uint64_t)v17);
      std::ios::~ios();
    }
    *(unsigned char *)(a1 + 24) = 0;
    if (*((void *)&v19 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  else if (v3)
  {
    *(void *)&long long v19 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v19 + 1) = 42;
    LODWORD(v2io_rings_get_max_version(0, 0) = 16;
    sub_10007E564(v17, &v19);
    sub_1000039A0(v18, (uint64_t)"invalid file size for ", 22);
    sub_100146B4C(v18);
    sub_1000039A0(v18, (uint64_t)", current is ", 13);
    std::ostream::operator<<();
    sub_1000039A0(v18, (uint64_t)" while expected is ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v18, (uint64_t)", truncating", 12);
    std::ostream::~ostream();
    sub_100081BF4((uint64_t)v17);
    std::ios::~ios();
    unsigned int v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), 0);
    if (v10)
    {
      unsigned int v11 = v10;
      os_log_type_t v12 = __cxa_allocate_exception(0x40uLL);
      sub_100003404((uint64_t)v17);
      sub_1000039A0(v17, (uint64_t)"Failed truncating ", 18);
      sub_100146B4C(v17);
      sub_10000550C((uint64_t)v12, (uint64_t)v17, v11);
    }
  }
  else if (sub_1000D8524())
  {
    *(void *)&long long v19 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v19 + 1) = 42;
    LODWORD(v2io_rings_get_max_version(0, 0) = 2;
    sub_10014620C(v17, &v19);
    sub_1000039A0(v18, (uint64_t)"file of ", 8);
    sub_100146B4C(v18);
    sub_1000039A0(v18, (uint64_t)" was just created (truncated)", 29);
    std::ostream::~ostream();
    sub_1001475EC((uint64_t)v17);
    std::ios::~ios();
  }
  return v5;
}

void sub_100145B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100145C10(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 + a3 - 1;
  unint64_t result = sub_1000D8524();
  if (result)
  {
    *(void *)&long long v10 = "sparse_bundles::mapped_blocks_t::map_range(uint64_t, uint64_t)";
    *((void *)&v10 + 1) = 42;
    int v11 = 2;
    sub_1001467AC(v12, &v10);
    sub_100146B4C(v13);
    sub_1000039A0(v13, (uint64_t)" - map_range: [", 15);
    uint64_t v8 = v13[0];
    *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) |= 0x200u;
    *(_DWORD *)((char *)&v13[1] + *(void *)(v8 - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v8 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    sub_1000039A0(v13, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v9 = v13[0];
    *(_DWORD *)((char *)&v13[1] + *(void *)(v13[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v13[1] + *(void *)(v9 - 24)) = *(_DWORD *)((unsigned char *)&v13[1] + *(void *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v13, (uint64_t)"]", 1);
    std::ostream::~ostream();
    sub_1001484D4((uint64_t)v12);
    unint64_t result = std::ios::~ios();
  }
  if (a3)
  {
    unint64_t result = sub_1000ABDF0(*(void *)(a1 + 8), a2 >> 12, v6 >> 12, 1);
    if (result) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_100145E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001468D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100145E20(void *a1)
{
  (**(void (***)(void))*a1)(*a1);
  sub_100053BA0(&__p);
  operator new();
}

void sub_100145EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100145F24(uint64_t a1, uint64_t a2)
{
}

void sub_100145FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100151B40();
  }
  _Unwind_Resume(exception_object);
}

void sub_100145FEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_100146088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100151B40();
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001460A4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1001489B8((uint64_t)a1, a2);
  *a1 = off_1001C2F70;
  a1[45] = &off_1001C3070;
  a1[46] = &off_1001C3098;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C2F70;
  a1[45] = off_1001C2FF8;
  a1[46] = off_1001C3020;
  return a1;
}

void sub_1001461A4(_Unwind_Exception *a1)
{
  sub_100146E78(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001461C8(uint64_t a1)
{
  return a1;
}

void *sub_10014620C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100148A48((uint64_t)a1, a2);
  *a1 = off_1001C3190;
  a1[45] = &off_1001C3290;
  a1[46] = &off_1001C32B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C3190;
  a1[45] = off_1001C3218;
  a1[46] = off_1001C3240;
  return a1;
}

void sub_10014630C(_Unwind_Exception *a1)
{
  sub_1001475EC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100146330(uint64_t a1)
{
  return a1;
}

unint64_t sub_100146374(uint64_t a1, uint64_t a2)
{
  return sub_100145C10(a1, *(void *)(a2 + 24), *(void *)(a2 + 16));
}

uint64_t sub_100146380(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void *)(*(void *)(a1 + 8) + 16) + 7;
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16)) == v3 >> 3
      || (uint64_t v2 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), 0),
          !v2))
    {
      unint64_t v4 = v3 >> 3;
      *(unsigned char *)(a1 + 24) = 0;
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
      uint64_t v11 = v6;
      os_log_type_t v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = v4;
      uint64_t v14 = 0;
      unint64_t v15 = v4;
      char v16 = 0;
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 80))(v5, &v11);
      if (v12) {
        sub_100004944(v12);
      }
      if (v4 == (int)v2)
      {
        uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1);
        if (v2) {
          *(unsigned char *)(a1 + 24) = 1;
        }
        if (sub_1000D8524())
        {
          *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
          *((void *)&v9 + 1) = 38;
          int v10 = 2;
          sub_100146644(&v11, &v9);
          sub_1000039A0(v17, (uint64_t)"Flushed ", 8);
          sub_100146B4C(v17);
          sub_1000039A0(v17, (uint64_t)", res=", 6);
          std::ostream::operator<<();
          std::ostream::~ostream();
          sub_100147D60((uint64_t)&v11);
          std::ios::~ios();
        }
      }
      else
      {
        *(unsigned char *)(a1 + 24) = 1;
      }
    }
  }
  else
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
      *((void *)&v9 + 1) = 38;
      int v10 = 2;
      sub_10010CF5C(&v11, &v9);
      sub_100146B4C(v17);
      sub_1000039A0(v17, (uint64_t)" is clean, skipping flush", 25);
      std::ostream::~ostream();
      sub_10010DE1C((uint64_t)&v11);
      std::ios::~ios();
    }
    return 0;
  }
  return v2;
}

void sub_10014660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100146768((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100146644(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100148AD8((uint64_t)a1, a2);
  *a1 = off_1001C33B0;
  a1[45] = &off_1001C34B0;
  a1[46] = &off_1001C34D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C33B0;
  a1[45] = off_1001C3438;
  a1[46] = off_1001C3460;
  return a1;
}

void sub_100146744(_Unwind_Exception *a1)
{
  sub_100147D60(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100146768(uint64_t a1)
{
  return a1;
}

void *sub_1001467AC(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100148B68((uint64_t)a1, a2);
  *a1 = off_1001C35D0;
  a1[45] = &off_1001C36D0;
  a1[46] = &off_1001C36F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C35D0;
  a1[45] = off_1001C3658;
  a1[46] = off_1001C3680;
  return a1;
}

void sub_1001468AC(_Unwind_Exception *a1)
{
  sub_1001484D4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1001468D0(uint64_t a1)
{
  return a1;
}

unint64_t sub_100146914(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = sub_1000D8524();
  if (result)
  {
    *(void *)&long long v11 = "sparse_bundles::mapped_blocks_t::unmap_interval(uint64_t, uint64_t)";
    *((void *)&v11 + 1) = 47;
    int v12 = 2;
    sub_100004BA0(v13, &v11);
    sub_100146B4C(v14);
    sub_1000039A0(v14, (uint64_t)" - unmap_range: [", 17);
    uint64_t v7 = v14[0];
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) |= 0x200u;
    *(_DWORD *)((char *)&v14[1] + *(void *)(v7 - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v7 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    sub_1000039A0(v14, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v8 = v14[0];
    *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) &= ~0x200u;
    *(_DWORD *)((char *)&v14[1] + *(void *)(v8 - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v8 - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v14, (uint64_t)"]", 1);
    std::ostream::~ostream();
    sub_100004D98((uint64_t)v13);
    unint64_t result = std::ios::~ios();
  }
  if (a3 != a2)
  {
    unint64_t v9 = a2 >> 12;
    unint64_t v10 = a3 >> 12;
    if ((a2 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      ++v9;
    }
    if ((~(_WORD)a3 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      --v10;
    }
    unint64_t result = sub_1000ABDF0(*(void *)(a1 + 8), v9, v10, 0);
    if (result) {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_100146B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100004CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100146B4C(void *a1)
{
  uint64_t v2 = sub_1000039A0(a1, (uint64_t)"mapped blocks of band ", 22);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v3 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  return a1;
}

uint64_t sub_100146BE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100146E78(v1);
  return std::ios::~ios();
}

uint64_t sub_100146C34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100146E78(v1);
  return std::ios::~ios();
}

void sub_100146C94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100146E78(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100146CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100146D34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100146D9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100146E78(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100146E00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100146E78(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100146E78(uint64_t a1)
{
  *(void *)a1 = off_1001C3108;
  sub_100146FB4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100146FB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100147174((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100147110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014713C(uint64_t a1)
{
  sub_100146E78(a1);
  operator delete();
}

int *sub_100147174(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 89;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 89;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10014735C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001475EC(v1);
  return std::ios::~ios();
}

uint64_t sub_1001473A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001475EC(v1);
  return std::ios::~ios();
}

void sub_100147408(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001475EC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100147470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1001474A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100147510(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001475EC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100147574(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001475EC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001475EC(uint64_t a1)
{
  *(void *)a1 = off_1001C3328;
  sub_100147728(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100147728(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001478E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100147884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001478B0(uint64_t a1)
{
  sub_1001475EC(a1);
  operator delete();
}

int *sub_1001478E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 99;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 99;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100147AD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100147D60(v1);
  return std::ios::~ios();
}

uint64_t sub_100147B1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100147D60(v1);
  return std::ios::~ios();
}

void sub_100147B7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100147D60(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100147BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100147C1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100147C84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100147D60(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100147CE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100147D60(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100147D60(uint64_t a1)
{
  *(void *)a1 = off_1001C3548;
  sub_100147E9C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100147E9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10014805C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100147FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100148024(uint64_t a1)
{
  sub_100147D60(a1);
  operator delete();
}

int *sub_10014805C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 141;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 141;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100148244(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001484D4(v1);
  return std::ios::~ios();
}

uint64_t sub_100148290(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001484D4(v1);
  return std::ios::~ios();
}

void sub_1001482F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1001484D4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100148358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100148390(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1001483F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1001484D4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10014845C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1001484D4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1001484D4(uint64_t a1)
{
  *(void *)a1 = off_1001C3768;
  sub_100148610(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100148610(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1001487D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10014876C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100148798(uint64_t a1)
{
  sub_1001484D4(a1);
  operator delete();
}

int *sub_1001487D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 150;
    __int16 v22 = 2082;
    char v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 150;
      __int16 v22 = 2082;
      char v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1001489B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C3108;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100148A34(_Unwind_Exception *a1)
{
}

uint64_t sub_100148A48(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C3328;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100148AC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100148AD8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C3548;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100148B54(_Unwind_Exception *a1)
{
}

uint64_t sub_100148B68(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C3768;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100148BE4(_Unwind_Exception *a1)
{
}

char *sub_100148BF8(unint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4858, memory_order_acquire) & 1) == 0)
  {
    unint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(&qword_1001D4858);
    a1 = v5;
    if (v4)
    {
      __cxa_atexit((void (*)(void *))sub_100149004, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001D4858);
      a1 = v5;
    }
  }
  unint64_t v1 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v2 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v1 >> 47) ^ v1);
  return (char *)&unk_1001D3F98
       + 64 * (unint64_t)((9 * ((v2 >> 47) ^ v2)) & 0xF);
}

char *sub_100148CC4(unint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1001D4860, memory_order_acquire) & 1) == 0)
  {
    unint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(qword_1001D4860);
    a1 = v5;
    if (v4)
    {
      __cxa_atexit((void (*)(void *))sub_100149040, 0, (void *)&_mh_execute_header);
      __cxa_guard_release(qword_1001D4860);
      a1 = v5;
    }
  }
  unint64_t v1 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v2 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v1 >> 47) ^ v1);
  return (char *)&unk_1001D4398 + 48 * ((9 * ((v2 >> 47) ^ v2)) & 0xF);
}

uint64_t sub_100148D94(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)unint64_t result = off_1001C37E8;
  *(void *)(result + 8) = v2;
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_100148DC4(uint64_t a1)
{
  *(void *)a1 = off_1001C37E8;
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      sub_100148F7C(v2);
    }
  }
  return a1;
}

void sub_100148E2C(uint64_t a1)
{
  sub_100148DC4(a1);
  operator delete();
}

atomic_ullong *sub_100148E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(a1 + 16);
  unint64_t result = *(atomic_ullong **)(a1 + 8);
  if (v6)
  {
    if (atomic_fetch_add_explicit(result, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      sub_100148F7C((unint64_t)result);
    }
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    return (atomic_ullong *)sub_1000E9BE4(v8, a2, a3);
  }
  else
  {
    *(unsigned char *)(a3 + 16) = 0;
    *(void *)a3 = off_1001C3808;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 24) = a2;
  }
  return result;
}

uint64_t sub_100148F08(uint64_t a1)
{
  *(void *)a1 = off_1001C3808;
  if (*(unsigned char *)(a1 + 16))
  {
    atomic_store(*(void *)(a1 + 24), *(unint64_t **)(a1 + 8));
    sub_100148F7C(*(void *)(a1 + 8));
  }
  *(unsigned char *)(a1 + 16) = 0;
  return sub_100148DC4(a1);
}

void sub_100148F7C(unint64_t a1)
{
  unint64_t v2 = sub_100148BF8(a1);
  std::mutex::lock((std::mutex *)v2);
  uint64_t v3 = sub_100148CC4(a1);
  std::condition_variable::notify_all((std::condition_variable *)v3);
  std::mutex::unlock((std::mutex *)v2);
}

void sub_100148FCC(uint64_t a1)
{
  sub_100148F08(a1);
  operator delete();
}

void sub_100149004()
{
  for (uint64_t i = &stru_100000380.flags; i != -64; i -= 64)
    std::mutex::~mutex((std::mutex *)((char *)&unk_1001D3F98 + i));
}

void sub_100149040()
{
  for (uint64_t i = &stru_100000290.flags; i != -48; i -= 48)
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)&unk_1001D4398 + i));
}

void *sub_10014907C(void *a1, int a2)
{
  if (a2 == 2)
  {
    unint64_t v2 = "full_fsync";
    uint64_t v3 = 10;
  }
  else if (a2 == 1)
  {
    unint64_t v2 = "fsync";
    uint64_t v3 = 5;
  }
  else if (a2)
  {
    sub_1000039A0(a1, (uint64_t)"bad flush type (", 16);
    a1 = (void *)std::ostream::operator<<();
    unint64_t v2 = ")";
    uint64_t v3 = 1;
  }
  else
  {
    unint64_t v2 = "barrier";
    uint64_t v3 = 7;
  }
  return sub_1000039A0(a1, (uint64_t)v2, v3);
}

void *sub_100149114(void *a1)
{
  unint64_t v2 = (char *)a1 + *(void *)(*a1 - 24);
  int v3 = *((_DWORD *)v2 + 2);
  *((_DWORD *)v2 + 2) = v3 & 0xFFFFFFB5 | 8;
  char v16 = 48;
  int v4 = sub_10000ED30(a1, &v16);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) |= 0x200u;
  sub_1000039A0(v4, (uint64_t)"sg: buffer = ", 13);
  int v6 = (void *)std::ostream::operator<<();
  sub_1000039A0(v6, (uint64_t)" [", 2);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = sub_1000039A0(v7, (uint64_t)"] ", 2);
  uint64_t v9 = *v8;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v8 + *(void *)(v9 - 24) + 24) = 0;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) &= ~0x200u;
  sub_1000039A0(v8, (uint64_t)" std::string::size_type size = ", 8);
  unint64_t v10 = (void *)std::ostream::operator<<();
  sub_1000039A0(v10, (uint64_t)" buffer_std::string::size_type size = ", 15);
  long long v11 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  os_log_type_t v12 = sub_10000ED30(v11, &v15);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) |= 0x200u;
  sub_1000039A0(v12, (uint64_t)" offset = ", 10);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v3;
  return a1;
}

void *sub_100149398(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *unint64_t result = off_1001C3860;
  return result;
}

uint64_t sub_1001493BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, a1);
}

void sub_1001493EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (*(void *)a1
  {
    int v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 4);
    v9[0] = *((void *)v5 + 3);
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1001493EC(v9);
    if (v7) {
      sub_100004944(v7);
    }
    if (v6)
    {
      sub_100004944(v6);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1001494F8(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100004944(v2);
  }
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014951C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (v4
  {
    int v6 = *(std::__shared_weak_count **)(a1 + 8);
    v11[0] = v5;
    v11[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 4);
    v9[0] = *((void *)v5 + 3);
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100149658((uint64_t)v9, v11, &v10);
    *(_OWORD *)a2 = v10;
    if (v7) {
      sub_100004944(v7);
    }
    if (v6)
    {
      sub_100004944(v6);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    *(void *)(a2 + 8) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_100149634(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100004944(v2);
  }
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100149658(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  int v6 = *(const void **)a1;
  if (v6
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
    v12[0] = v7;
    v12[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 + 4);
    v11[0] = *((void *)v7 + 3);
    v11[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100149658(v11, v12);
    if (v9) {
      sub_100004944(v9);
    }
    if (v8)
    {
      sub_100004944(v8);
    }
  }
  else
  {
    uint64_t v10 = a2[1];
    *a3 = *a2;
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_10014976C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100004944(v2);
  }
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100149790(uint64_t a1, const void **a2, uint64_t *a3)
{
  int v4 = *(const void **)a1;
  if (v4 == *a2) {
    return 4294967274;
  }
  if (!v4) {
    return 4294967294;
  }
  if (!v7) {
    return 4294967294;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (const void *)*((void *)v7 + 3);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 4);
  v16[0] = v9;
  v16[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9 == *a2)
  {
    uint64_t v14 = *a3;
    uint64_t v13 = a3[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    char v15 = (std::__shared_weak_count *)*((void *)v7 + 4);
    *((void *)v7 + 3) = v14;
    *((void *)v7 + 4) = v13;
    if (v15) {
      sub_100004944(v15);
    }
    uint64_t v11 = 0;
    if (!v10) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = sub_100149790(v16, a2, a3);
    if (!v10) {
      goto LABEL_11;
    }
  }
  sub_100004944(v10);
LABEL_11:
  if (v8) {
    sub_100004944(v8);
  }
  return v11;
}

void sub_1001498CC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_100004944(v2);
  }
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001498F0(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (*(void *)a1
  {
    int v6 = v5;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6[3];
    uint64_t v8 = v6[4];
    *a2 = v9;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      sub_100004944(v7);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

uint64_t sub_1001499D8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v10 = a4;
  uint64_t v11 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001A4E78;
  *(void *)(a1 + 24) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001C3920;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = a3;
  unsigned int v9 = 0;
  sub_10014B06C(&v11, &v9, &v10, (void *)(a1 + 48));
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0u;
  *(unsigned char *)(a1 + 112) = a5;
  return a1;
}

void sub_100149A98(_Unwind_Exception *a1)
{
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

void sub_100149AB0(uint64_t a1)
{
  sub_1001243FC(*(void *)(a1 + 48), &v1);
}

void sub_100149BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10001B94C((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 40);
  if (v8) {
    sub_100004944(v8);
  }
  _Unwind_Resume(a1);
}

void sub_100149C24(uint64_t a1)
{
  sub_1001243FC(*(void *)(a1 + 48), &v1);
}

void sub_100149D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100149ED4((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 56);
  if (v8) {
    sub_100004944(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_100149DB0(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10014B1C8((uint64_t)a1, a2);
  *a1 = off_1001C3AE8;
  a1[45] = &off_1001C3BE8;
  a1[46] = &off_1001C3C10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C3AE8;
  a1[45] = off_1001C3B70;
  a1[46] = off_1001C3B98;
  return a1;
}

void sub_100149EB0(_Unwind_Exception *a1)
{
  sub_10014AAF0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100149ED4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100149F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24));
  if (v4)
  {
    *(void *)&long long v11 = "int BackendSG::truncate(uint64_t)";
    *((void *)&v11 + 1) = 23;
    int v12 = 16;
    sub_100074A38(v13, &v11);
    sub_1000039A0(v14, (uint64_t)"BackendSG: truncating the inner backend failed, CFErrorRef error = ", 56);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100079BF8((uint64_t)v13);
    std::ios::~ios();
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 88);
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 64);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v6;
      if (v8)
      {
        long long v10 = v5;
        sub_100004944(v8);
        long long v5 = v10;
      }
    }
    else
    {
      *(void *)(a1 + 72) = 0;
    }
    *(void *)(a1 + 8io_rings_get_max_version(0, 0) = a2;
    *(_OWORD *)(a1 + 88) = v5;
    *(unsigned char *)(a1 + 104) = 0;
  }
  return v4;
}

void sub_10014A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100074B5C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10014A050(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001A4E78;
  uint64_t v3 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001C3920;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  *(__n128 *)(a1 + 8io_rings_get_max_version(0, 0) = result;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return result;
}

double sub_10014A0F8@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10014B258(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t sub_10014A13C(uint64_t a1, void *a2, size_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001A4E78;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_1001C39E8;
  *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 850045863;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8io_rings_get_max_version(0, 0) = 0u;
  *(void *)(a1 + 96) = 0;
  sub_100142544((void *)(a1 + 104), a3);
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  return a1;
}

void sub_10014A1F0(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10014A210(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  unint64_t v5 = a2 % (*(void *)(a1 + 112) - v4);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v9 = v4;
  long long v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = v5;
  uint64_t v12 = a2 - v5;
  unint64_t v13 = v5;
  char v14 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v9);
  if (v10) {
    sub_100004944(v10);
  }
  if (v5 == (int)v7)
  {
LABEL_7:
    uint64_t v7 = 0;
    *(void *)(a1 + 128) = a2;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return v7;
}

void sub_10014A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10014A2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (!*(unsigned char *)(a1 + 136))
  {
    unint64_t v13 = sub_10014A210(a1, *(void *)(a2 + 24));
    if (v13) {
      goto LABEL_26;
    }
  }
  unint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 104);
  size_t v7 = *(void *)(a1 + 112) - v6;
  unint64_t v8 = v5 % v7;
  if (v5 % v7)
  {
    size_t v9 = v7 - v8;
    if (v9 >= *(void *)(a2 + 16)) {
      size_t v10 = *(void *)(a2 + 16);
    }
    else {
      size_t v10 = v9;
    }
    memcpy((void *)(v6 + v8), *(const void **)a2, v10);
    size_t v11 = *(void *)(a1 + 104);
    size_t v7 = *(void *)(a1 + 112) - v11;
    if (v10 + v8 == v7)
    {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
      size_t v20 = v11;
      uint64_t v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v22 = v10 + v8;
      size_t v23 = v5 - v8;
      size_t v24 = v10 + v8;
      char v25 = 0;
      unint64_t v13 = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
      unint64_t v14 = v22;
      if (v21) {
        sub_100004944(v21);
      }
      if (v14 != (int)v13) {
        goto LABEL_26;
      }
      size_t v7 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
    }
  }
  else
  {
    size_t v10 = 0;
  }
  unint64_t v13 = *(void *)(a2 + 16);
  unint64_t v15 = (v13 - v10) / v7 * v7;
  if (v13 - v10 == (v13 - v10) % v7)
  {
LABEL_23:
    if (v13 > v10)
    {
      memcpy(*(void **)(a1 + 104), (const void *)(*(void *)a2 + v10), v13 - v10);
      unint64_t v13 = *(void *)(a2 + 16);
    }
    *(void *)(a1 + 128) += v13;
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  size_t v17 = *(void *)(a2 + 24) + v10;
  __int16 v18 = *(std::__shared_weak_count **)(a2 + 8);
  size_t v20 = *(void *)a2 + v10;
  uint64_t v21 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v15;
  size_t v23 = v17;
  size_t v24 = v16 - v10;
  char v25 = 0;
  unint64_t v13 = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
  if (v21) {
    sub_100004944(v21);
  }
  if (v15 == (int)v13)
  {
    v10 += v15;
    unint64_t v13 = *(void *)(a2 + 16);
    goto LABEL_23;
  }
LABEL_26:
  std::mutex::unlock(v4);
  return v13;
}

void sub_10014A514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10014A544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v5 = *(void *)(a1 + 104);
    unint64_t v6 = *(void *)(a1 + 112) - v5;
    unint64_t v7 = *(void *)(a1 + 128) % v6;
    if (!v7) {
      goto LABEL_11;
    }
    bzero((void *)(v5 + v7), v6 - v7);
    uint64_t v8 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    size_t v11 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
    uint64_t v17 = v9;
    __int16 v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v10 - v9;
    uint64_t v20 = v8 - v7;
    uint64_t v21 = v10 - v9;
    char v22 = 0;
    int v12 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v17);
    uint64_t v13 = v12;
    uint64_t v14 = v12 >= 0 ? 4294967291 : v12;
    uint64_t v15 = v19;
    if (v18) {
      sub_100004944(v18);
    }
    if (v15 == v13) {
LABEL_11:
    }
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2);
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v4);
  return v14;
}

void sub_10014A68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_10014A6BC(uint64_t a1)
{
  sub_10014AFD4(a1);
  operator delete();
}

void *sub_10014A6F4(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"BufferedWriteBackend", 20);
}

void *sub_10014A708@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10001B798(a2, (void *)(a1 + 8));
}

void *sub_10014A714(void *a1)
{
  *a1 = off_1001C3920;
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_100004944(v3);
  }
  *a1 = off_1001A4E78;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_10014A7A0(void *a1)
{
  *a1 = off_1001C3920;
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_100004944(v3);
  }
  *a1 = off_1001A4E78;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete();
}

void *sub_10014A84C(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"BackendSG", 9);
}

uint64_t sub_10014A860(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10014AAF0(v1);
  return std::ios::~ios();
}

uint64_t sub_10014A8AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10014AAF0(v1);
  return std::ios::~ios();
}

void sub_10014A90C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10014AAF0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10014A974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10014A9AC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10014AA14(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10014AAF0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10014AA78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10014AAF0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10014AAF0(uint64_t a1)
{
  *(void *)a1 = off_1001C3C80;
  sub_10014AC2C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10014AC2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10014ADEC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10014AD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014ADB4(uint64_t a1)
{
  sub_10014AAF0(a1);
  operator delete();
}

int *sub_10014ADEC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 138;
    __int16 v22 = 2082;
    size_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    size_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 138;
      __int16 v22 = 2082;
      size_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10014AFD4(uint64_t a1)
{
  *(void *)a1 = off_1001C39E8;
  sub_10014A544(a1, 1);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  *(void *)a1 = off_1001A4E78;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_100004944(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *sub_10014B06C@<X0>(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xB8uLL);
  double result = sub_10014B0E0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10014B0CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10014B0E0(void *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001C3D00;
  sub_10012434C((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_10014B134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10014B148(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001C3D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10014B168(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001C3D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10014B1BC(uint64_t a1)
{
  return sub_1001243F8(a1 + 24);
}

uint64_t sub_10014B1C8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C3C80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10014B244(_Unwind_Exception *a1)
{
}

void sub_10014B258(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x90uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = off_10019F128;
  sub_10014A050((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10014B2F0(char *__s, void *a2)
{
  uint64_t v3 = &v17;
  sub_100004890(&v17, __s);
  uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v8 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v3 != v8)
  {
    do
    {
      v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
      uint64_t v3 = (std::string *)((char *)v3 + 1);
    }
    while (v3 != v8);
    uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 >= 0)
  {
    uint64_t v9 = &v17;
  }
  else
  {
    uint64_t v4 = size;
    uint64_t v9 = (std::string *)v6;
  }
  if (v4 >= 2)
  {
    uint64_t v10 = (std::string *)((char *)v9 + v4);
    size_t v11 = v9;
    while (1)
    {
      os_log_type_t v12 = (std::string *)memchr(v11, 48, v4 - 1);
      if (!v12) {
        goto LABEL_21;
      }
      if (LOWORD(v12->__r_.__value_.__l.__data_) == 30768) {
        break;
      }
      size_t v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      uint64_t v4 = (char *)v10 - (char *)v11;
      if ((char *)v10 - (char *)v11 < 2) {
        goto LABEL_21;
      }
    }
    if (v12 != v10 && v12 == v9)
    {
      uint64_t v13 = std::string::erase(&v17, 0, 2uLL);
      std::string::operator=(&v17, v13);
    }
  }
LABEL_21:
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_10014B674((uint64_t)&v17, &v14);
  if (a2) {
    *a2 = v15 - v14;
  }
  operator new[]();
}

void sub_10014B48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  switch(a2)
  {
    case 3:
      __cxa_begin_catch(exception_object);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      __int16 v20 = std::generic_category();
      exception[1] = 22;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Does not contain an \"even number\" of hex digits.";
    case 2:
      __cxa_begin_catch(exception_object);
      uint64_t v21 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v21 = &off_1001C3DE8;
      __int16 v22 = std::generic_category();
      v21[1] = 22;
      uint64_t v21[2] = v22;
      *((unsigned char *)v21 + 24) = 0;
      *((unsigned char *)v21 + 48) = 0;
      v21[7] = "Contains non-hexadecimal characters.";
    case 1:
      __cxa_begin_catch(exception_object);
      size_t v23 = __cxa_allocate_exception(0x40uLL);
      void *v23 = &off_1001C3DE8;
      size_t v24 = std::generic_category();
      v23[1] = 22;
      v23[2] = v24;
      *((unsigned char *)v23 + 24) = 0;
      *((unsigned char *)v23 + 48) = 0;
      v23[7] = "Decoding error.";
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_10014B674(uint64_t a1, unint64_t *a2)
{
  int v3 = *(char *)(a1 + 23);
  BOOL v4 = v3 < 0;
  uint64_t v5 = *(void *)a1;
  if (v3 >= 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v9 = v5;
  if (v6)
  {
    uint64_t v7 = v5 + v6;
    do
      a2 = sub_10014C2F8(&v9, v7, a2, (unsigned int (*)(uint64_t, uint64_t))sub_10014C424);
    while (v9 != v7);
  }
  return a2;
}

uint64_t sub_10014B6F0(char *a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return sub_10009B40C((uint64_t)v3, a1, a2);
}

void *sub_10014B74C(void *a1, uint64_t a2)
{
  int v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v4 = strlen(v3);
  uint64_t v5 = sub_1000039A0(a1, (uint64_t)v3, v4);
  sub_1000039A0(v5, (uint64_t)" (error code ", 13);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_1000039A0(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t sub_10014B7E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t result = a1 + 56;
    return *(void *)result;
  }
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_10014B80C()
{
  uuid_generate_random(out);
  return *(void *)out;
}

void *sub_10014B860()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D4890))
  {
    __cxa_atexit((void (*)(void *))sub_10014B91C, &unk_1001D4880, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D4890);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1001D4870, memory_order_acquire) != -1)
  {
    int v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(qword_1001D4870, &v2, (void (__cdecl *)(void *))sub_10014DD70);
  }
  return &unk_1001D4880;
}

uint64_t sub_10014B91C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

uint64_t sub_10014B94C()
{
  if (byte_1001D4698)
  {
    char v0 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)&unk_1001D48A0, (unsigned __int8 *)&v0, 1u);
    if (!v0)
    {
      *(void *)&long long v2 = "void process_terminator::terminate()";
      *((void *)&v2 + 1) = 34;
      int v3 = 16;
      sub_1000F1F50(v4, &v2);
      sub_1000039A0(v5, (uint64_t)"Terminating due to unrecoverable I/O error", 42);
      std::ostream::~ostream();
      sub_1000F2148((uint64_t)v4);
      std::ios::~ios();
      return raise(15);
    }
  }
  return result;
}

void sub_10014BA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000F2074((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10014BA1C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 144);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v7 = a4[1];
  unint64_t v8 = *a4 - (v5 - v7);
  if (v8 >= a3) {
    unint64_t v8 = a3;
  }
  unint64_t v34 = v8;
  unint64_t v9 = v5 - v7;
  if (v5 == v7) {
    goto LABEL_86;
  }
  os_log_type_t v12 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v93 = *(void **)a1;
  uint64_t v94 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v95 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v95[9] = *(_OWORD *)(a1 + 25);
  uint64_t v96 = *(void *)(a1 + 48);
  long long v97 = *(_OWORD *)(a1 + 56);
  long long v98 = *(_OWORD *)(a1 + 72);
  long long v99 = *(_OWORD *)(a1 + 88);
  char v100 = *(unsigned char *)(a1 + 104);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v101 = *(void *)(a1 + 112);
  long long v102 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v103 = *(_OWORD *)(a1 + 128);
  uint64_t v104 = *v6;
  char v105 = *(unsigned char *)(a1 + 152);
  unint64_t v14 = v8 + v9;
  sub_100041B0C((uint64_t)&v93, v8 + v9);
  sub_100040F70(&v97);
  uint64_t v15 = (_OWORD *)(a1 + 16);
  uint64_t v16 = (long long *)(a1 + 72);
  std::string v17 = *(std::__shared_weak_count **)(a1 + 8);
  long long v62 = *(void **)a1;
  long long v63 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v64 = *v15;
  *(_OWORD *)&v64[9] = *(_OWORD *)(a1 + 25);
  long long v66 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v67 = *v16;
  uint64_t v19 = (long long *)(a1 + 128);
  uint64_t v65 = *(void *)(a1 + 48);
  long long v68 = v18;
  char v69 = *(unsigned char *)(a1 + 104);
  __int16 v20 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v70 = *(void *)(a1 + 112);
  uint64_t v71 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v72 = *v19;
  uint64_t v73 = *v6;
  char v74 = *((unsigned char *)v6 + 8);
  sub_100042718((uint64_t)&v62, a2, a4[1], v14, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v75);
  if (v71) {
    sub_100004944(v71);
  }
  if (v63) {
    sub_100004944(v63);
  }
  sub_1000414AC((uint64_t)&v75, (uint64_t)v121);
  sub_100018CC8((uint64_t)&v93, v121);
  if (v122) {
    sub_100004944(v122);
  }
  if (*((void *)&v121[0] + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v121[0] + 1));
  }
  sub_100041B0C((uint64_t)&v93, v9);
  sub_1000411FC((uint64_t)&v75, (uint64_t)v59);
  statfs __src = v93;
  long long v49 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v50[0] = *(_OWORD *)v95;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v95[9];
  v52[0] = v97;
  v52[1] = v98;
  uint64_t v51 = v96;
  v52[2] = v99;
  char v53 = v100;
  uint64_t v54 = v101;
  long long v55 = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v56 = v103;
  uint64_t v57 = v104;
  char v58 = v105;
  uint64_t v21 = *(void **)a1;
  __int16 v22 = *(std::__shared_weak_count **)(a1 + 8);
  int v35 = *(void **)a1;
  __int16 v36 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v37 = *v15;
  *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 25);
  long long v23 = *v16;
  long long v24 = *(_OWORD *)(a1 + 88);
  long long v39 = *(_OWORD *)(a1 + 56);
  long long v40 = v23;
  uint64_t v38 = *(void *)(a1 + 48);
  long long v41 = v24;
  char v42 = *(unsigned char *)(a1 + 104);
  char v25 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v43 = *(void *)(a1 + 112);
  int v44 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = *v19;
  uint64_t v46 = *v6;
  char v47 = *((unsigned char *)v6 + 8);
  CCHmacContext __dst = v21;
  long long v107 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v108 = *(_OWORD *)v37;
  *(_OWORD *)&v108[9] = *(_OWORD *)&v37[9];
  long long v110 = v39;
  long long v111 = v40;
  uint64_t v109 = v38;
  long long v112 = v41;
  char v113 = v42;
  uint64_t v114 = v43;
  long long v115 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  long long v116 = v45;
  uint64_t v117 = v46;
  char v118 = 0;
  while (!sub_1000410B8((uint64_t)&__src, (uint64_t)v59))
  {
    sub_100042828((uint64_t)v52);
    SecKeyRef v27 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v56 + 1))
    {
      unint64_t v28 = *(void *)&v108[16];
      if (*(void *)&v50[0] < *(void *)&v108[16]) {
        unint64_t v28 = *(void *)&v50[0];
      }
      if (v28 >= *((void *)&v56 + 1)) {
        int64_t v29 = *((void *)&v56 + 1);
      }
      else {
        int64_t v29 = v28;
      }
      if (v29)
      {
        memmove(__dst, __src, v29);
        if (v29 > 0)
        {
          sub_100041B0C((uint64_t)&__src, v29);
          sub_100041C48((uint64_t)&__dst, v29);
          int v30 = 0;
          v26 += v29;
          if (!v27) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
      else
      {
        *(void *)&long long v119 = "trim_data(const sg_vec::iterator &, const sg_vec::iterator &, size_t, const io_result_t &)::(anonymous class)::operator()(const auto &, const auto &, size_t) const [src:auto = sg_vec_ns::details::sg_vec_iterator, dst:auto = sg_vec_ns::details::sg_vec_iterator]";
        *((void *)&v119 + 1) = 121;
        int v120 = 16;
        sub_10014DF0C(v121, &v119);
        sub_1000039A0(v123, (uint64_t)"Trimming: Written ", 18);
        std::ostream::operator<<();
        sub_1000039A0(v123, (uint64_t)", dest buffer_size ", 19);
        std::ostream::operator<<();
        sub_1000039A0(v123, (uint64_t)" src size ", 10);
        std::ostream::operator<<();
        sub_1000039A0(v123, (uint64_t)", trimmed size", 14);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_10014E104((uint64_t)v121);
        std::ios::~ios();
      }
      *(void *)&long long v119 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/utils.cpp:180:13)]";
      *((void *)&v119 + 1) = 97;
      int v120 = 16;
      sub_10004C3C4(v121, &v119);
      sub_1000039A0(v123, (uint64_t)"IO error with sg: ", 18);
      sub_100149114(v123);
      sub_1000039A0(v123, (uint64_t)" dest ", 6);
      sub_100149114(v123);
      sub_1000039A0(v123, (uint64_t)" returned status ", 17);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10004C5BC((uint64_t)v121);
      std::ios::~ios();
      int v30 = 1;
      if (!v27) {
        goto LABEL_48;
      }
LABEL_47:
      sub_100004944(v27);
      goto LABEL_48;
    }
    sub_100041D84((uint64_t)&__src);
    int v30 = 2;
    if (v27) {
      goto LABEL_47;
    }
LABEL_48:
    if ((v30 | 2) != 2) {
      goto LABEL_54;
    }
  }
  sub_100041C48((uint64_t)&v35, v26);
LABEL_54:
  if (v115) {
    sub_100004944(v115);
  }
  if (v107) {
    sub_100004944(v107);
  }
  if (v44) {
    sub_100004944(v44);
  }
  if (v36) {
    sub_100004944(v36);
  }
  if (v55) {
    sub_100004944(v55);
  }
  if (v49) {
    sub_100004944(v49);
  }
  if (v61) {
    sub_100004944(v61);
  }
  if (v60) {
    sub_100004944(v60);
  }
  if (v92) {
    sub_100004944(v92);
  }
  if (v91) {
    sub_100004944(v91);
  }
  if (v90) {
    sub_100004944(v90);
  }
  if (v89) {
    sub_100004944(v89);
  }
  if (v88) {
    sub_100004944(v88);
  }
  if ((void)v80) {
    sub_100004944((std::__shared_weak_count *)v80);
  }
  if (v102) {
    sub_100004944(v102);
  }
  if (v94) {
    sub_100004944(v94);
  }
LABEL_86:
  int v31 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v75 = *(void **)a1;
  uint64_t v76 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v77[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v78 = *(void *)(a1 + 48);
  long long v79 = *(_OWORD *)(a1 + 56);
  long long v80 = *(_OWORD *)(a1 + 72);
  long long v81 = *(_OWORD *)(a1 + 88);
  char v82 = *(unsigned char *)(a1 + 104);
  int v32 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v83 = *(void *)(a1 + 112);
  uint64_t v84 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v85 = *(_OWORD *)(a1 + 128);
  uint64_t v86 = *v6;
  char v87 = *((unsigned char *)v6 + 8);
  sub_100041B0C((uint64_t)&v75, v34);
  sub_100040F70(&v79);
  if (v84) {
    sub_100004944(v84);
  }
  if (v76) {
    sub_100004944(v76);
  }
  return v34;
}

void sub_10014C200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_10014C2C0(std::exception *a1)
{
  sub_1000036A0(a1);
  operator delete();
}

unint64_t *sub_10014C2F8(uint64_t *a1, uint64_t a2, unint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  int v7 = 0;
  std::string v17 = a3;
  uint64_t v8 = *a1;
  char v9 = 1;
  do
  {
    char v10 = v9;
    if (a4(v8, a2))
    {
      long long v14 = 0u;
      long long v15 = 0u;
      DWORD2(v15) = -1;
      v13[0] = off_1001C3E50;
      v13[1] = off_1001C3E80;
      sub_10014C430(v13);
    }
    int v11 = sub_10014C4DC(*(char *)*a1);
    char v9 = 0;
    int v7 = v11 + 16 * v7;
    char v16 = v7;
    uint64_t v8 = *a1 + 1;
    *a1 = v8;
  }
  while ((v10 & 1) != 0);
  sub_10014C5F8(&v17, &v16);
  return v17;
}

void sub_10014C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10014C48C((std::exception *)va);
  _Unwind_Resume(a1);
}

BOOL sub_10014C424(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_10014C430(void *a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  sub_10014C700((uint64_t)exception, a1);
}

void sub_10014C478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_10014C48C(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v2 + 8) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_10014C4DC(int a1)
{
  unsigned __int8 v1 = a1 - 48;
  if ((a1 - 48) >= 0xA)
  {
    if ((a1 - 65) > 5)
    {
      if ((a1 - 97) > 5) {
        sub_10014CC74();
      }
      return (a1 - 87);
    }
    else
    {
      return (a1 - 55);
    }
  }
  return v1;
}

void sub_10014C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10014C9F0((std::exception *)va);
  _Unwind_Resume(a1);
}

unint64_t **sub_10014C5F8(unint64_t **a1, unsigned char *a2)
{
  size_t v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    char v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      sub_10004B570();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    unint64_t *v4 = v13;
    v4[1] = v7;
    int v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    unsigned char *v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_10014C700(uint64_t a1, void *a2)
{
  int v3 = (char *)a2 + *(void *)(*a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = &off_1001C3EA0;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = off_1001C3E50;
  *(void *)(a1 + 8) = off_1001C3E80;
  return a1;
}

void sub_10014C7D8(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v1 + 8) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)(v1 + 16));
  operator delete();
}

uint64_t *sub_10014C848(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &off_1001C3EA0;
  uint64_t v2 = (uint64_t *)(v1 + 16);
  return sub_10014C934(v2);
}

void sub_10014C8AC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)v1 + 2);
  operator delete();
}

uint64_t *sub_10014C934(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void sub_10014C990(void *a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  sub_10014CA40((uint64_t)exception, a1);
}

void sub_10014C9D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::exception *sub_10014C9F0(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v2 + 8) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)(v2 + 16));
  return a1;
}

uint64_t sub_10014CA40(uint64_t a1, void *a2)
{
  int v3 = (char *)a2 + *(void *)(*a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = &off_1001C3EA0;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 4io_rings_get_max_version(0, 0) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = off_1001C3EE8;
  *(void *)(a1 + 8) = off_1001C3F18;
  return a1;
}

void sub_10014CB18(std::exception *a1)
{
  std::exception::~exception(a1);
  *(void *)(v1 + 8) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)(v1 + 16));
  operator delete();
}

uint64_t *sub_10014CB88(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &off_1001C3EA0;
  uint64_t v2 = (uint64_t *)(v1 + 16);
  return sub_10014C934(v2);
}

void sub_10014CBEC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &off_1001C3EA0;
  sub_10014C934((uint64_t *)v1 + 2);
  operator delete();
}

void sub_10014CC74()
{
}

void sub_10014CDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014CE04(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void sub_10014CEA0()
{
}

void sub_10014CEFC()
{
}

void sub_10014CF10(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10014D114((char **)__p, (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL));
  if (__p[0]) {
    uint64_t v4 = (char *)__p[0];
  }
  else {
    uint64_t v4 = (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL);
  }
  sub_100004890(&v14, v4);
  free(__p[0]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v14;
  }
  else {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v14.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v14, v5, 91);
  std::string v15 = v14;
  memset(&v14, 0, sizeof(v14));
  uint64_t v6 = std::string::append(&v15, "] = ", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10014D164((char *)(a1 + 8), __p);
  if ((v13 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v9 = v13;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  unint64_t v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 10);
  *a2 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_10014D088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char **sub_10014D114(char **a1, char *lpmangled)
{
  int status = 0;
  size_t v4 = 0;
  *a1 = __cxa_demangle(lpmangled, 0, &v4, &status);
  return a1;
}

uint64_t sub_10014D164@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  sub_100003404((uint64_t)&v5);
  char v8 = *a1;
  sub_1000039A0(&v5, (uint64_t)&v8, 1);
  sub_100004624((uint64_t)v6, a2);
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10014D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10014D2BC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10014D324(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100151B7C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014D340(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10014D378(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10014D3A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10014D3EC(uint64_t a1, const char *a2)
{
  if (a2)
  {
    sub_100003404((uint64_t)&v16);
    size_t v4 = strlen(a2);
    sub_1000039A0(&v16, (uint64_t)a2, v4);
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5 != (void *)(a1 + 16))
    {
      do
      {
        (**(void (***)(void **__return_ptr))v5[5])(__p);
        if (v15 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        if (v15 >= 0) {
          uint64_t v7 = HIBYTE(v15);
        }
        else {
          uint64_t v7 = (uint64_t)__p[1];
        }
        sub_1000039A0(&v16, (uint64_t)v6, v7);
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        char v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            std::string::size_type v9 = v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            std::string::size_type v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            uint64_t v5 = v9;
          }
          while (!v10);
        }
        uint64_t v5 = v9;
      }
      while (v9 != (void *)(a1 + 16));
    }
    sub_100004624((uint64_t)v17, __p);
    uint64_t v11 = v15;
    long long v12 = *(_OWORD *)__p;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v12;
    *(void *)(a1 + 48) = v11;
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete((void *)v17[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t result = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_10014D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *sub_10014D658@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10014D940(a1 + 8, a2);
  if ((void *)(a1 + 16) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[6];
    *a3 = result[5];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_10014D6B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::string::size_type v9 = a3;
  uint64_t v5 = sub_10014DA2C((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_1001705CC, &v9);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = (std::__shared_weak_count *)v5[6];
  v5[5] = v7;
  v5[6] = v6;
  if (v8) {
    sub_100004944(v8);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 4io_rings_get_max_version(0, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t sub_10014D748(uint64_t result)
{
  return result;
}

BOOL sub_10014D758(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56) - 1;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 56) = v1;
  if (a1 && !v1)
  {
    sub_10014DB70(a1);
    operator delete();
  }
  return v1 == 0;
}

void sub_10014D7A8(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_10014D908(_Unwind_Exception *a1)
{
  sub_10014C934(v1);
  _Unwind_Resume(a1);
}

void *sub_10014D940(uint64_t a1, uint64_t *a2)
{
  int v3 = (void *)(a1 + 8);
  size_t v4 = sub_10014D9B4(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4[4];
  if (*a2 != v6
    && strcmp((const char *)(*(void *)(*a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
  {
    return v3;
  }
  return v5;
}

void *sub_10014D9B4(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = v5[4];
      if (v7 == v6)
      {
        a4 = v5;
      }
      else if (strcmp((const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *sub_10014DA2C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)sub_10014DAB8((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x38uLL);
    void v7[4] = **a4;
    void v7[5] = 0;
    void v7[6] = 0;
    sub_10000CAA0(a1, v10, v8, v7);
  }
  return v7;
}

void *sub_10014DAB8(uint64_t a1, void *a2, uint64_t *a3)
{
  size_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = v5[4];
    if (*a3 != v7)
    {
      char v8 = (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        std::string::size_type v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          size_t v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          size_t v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        uint64_t v5 = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t sub_10014DB70(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_100019CE0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_10014DBB0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10014DC18(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100151B7C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10014DC34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10014DC6C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10014DC9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *sub_10014DCE0(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_10014DAB8((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x38uLL);
    *((void *)v6 + 4) = *(void *)a3;
    *(_OWORD *)(v6 + 4io_rings_get_max_version(0, 0) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_10000CAA0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_10014DD70()
{
}

void sub_10014DDDC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10014DE44(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_10014DE70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10014DEA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_10014DEC8(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_10014DF0C(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10014E074((uint64_t)a1, a2);
  *a1 = off_1001C4168;
  a1[45] = &off_1001C4268;
  a1[46] = &off_1001C4290;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001C4168;
  a1[45] = off_1001C41F0;
  a1[46] = off_1001C4218;
  return a1;
}

void sub_10014E00C(_Unwind_Exception *a1)
{
  sub_10014E104(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10014E030(uint64_t a1)
{
  return a1;
}

uint64_t sub_10014E074(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001C4300;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10014E0F0(_Unwind_Exception *a1)
{
}

uint64_t sub_10014E104(uint64_t a1)
{
  *(void *)a1 = off_1001C4300;
  sub_10014E50C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10014E240(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10014E104(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10014E2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10014E2E0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10014E348(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10014E104(v1);
  return std::ios::~ios();
}

void sub_10014E394(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10014E104(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10014E3F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10014E104(v1);
  return std::ios::~ios();
}

void sub_10014E458(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10014E104(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10014E4D4(uint64_t a1)
{
  sub_10014E104(a1);
  operator delete();
}

uint64_t sub_10014E50C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10014E690((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10014E668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10014E690(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 183;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::string v14 = a2;
      }
      else {
        std::string v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 183;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

id frk_unwrapped_symmetric_key_with_shipping_private_key(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a1 objectForKey:@"com.apple.wkms.fcs-response"];
  uint64_t v7 = (void *)v6;
  if (!v5)
  {
    char v25 = a3;
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    CFStringRef v38 = @"ERROR: Shipping private key is NULL.";
    id v12 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    uint64_t v18 = 26;
LABEL_14:
    id v15 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:v18 userInfo:v12];
    char v8 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
LABEL_16:
    std::string v14 = 0;
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  if (!v6)
  {
    char v25 = a3;
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    CFStringRef v36 = @"ERROR: This archive does not contain a shipping key response.";
    id v12 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    uint64_t v18 = 25;
    goto LABEL_14;
  }
  id v28 = 0;
  char v8 = +[NSJSONSerialization JSONObjectWithData:v6 options:0 error:&v28];
  id v9 = v28;
  if (!v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    std::string v14 = 0;
    uint64_t v16 = 0;
    if (!a3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v10 = [v8 objectForKey:@"wrapped-key"];
  uint64_t v11 = [v8 objectForKey:@"enc-request"];
  char v25 = a3;
  if (!v10
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || !v11
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
    CFStringRef v34 = @"ERROR: Response dictionary is missing required keys. Will fail";
    id v12 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    id v15 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:23 userInfo:v12];

    goto LABEL_16;
  }
  id v12 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v10 options:0];
  id v13 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v11 options:0];
  long long v24 = v13;
  if (!v12)
  {
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    CFStringRef v32 = @"ERROR: shipping key wrapped-key failed base64 decode";
    uint64_t v21 = &v32;
    __int16 v22 = &v31;
LABEL_24:
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v22, 1, v13);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:19 userInfo:v15];

    id v17 = (id)v23;
    std::string v14 = 0;
    uint64_t v16 = 0;
    goto LABEL_25;
  }
  if (!v13)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    CFStringRef v30 = @"ERROR: shipping key enc-request failed base64 decode";
    uint64_t v21 = &v30;
    __int16 v22 = &v29;
    goto LABEL_24;
  }
  id v27 = v9;
  std::string v14 = +[CryptoKitWrapper convertPrivateKeyTox963WithPemPrivateKey:v5 error:&v27];
  id v15 = v27;

  if (!v14)
  {
    uint64_t v16 = 0;
    goto LABEL_26;
  }
  id v26 = v15;
  uint64_t v16 = +[CryptoKitWrapper unwrapEncryptionKeyWithWrappedKey:v12 encapsulatedKey:v24 privateKey:v14 error:&v26];
  id v17 = v26;
LABEL_25:

  id v15 = v17;
LABEL_26:

LABEL_17:
  id v9 = v15;
  a3 = v25;
  if (v25) {
LABEL_18:
  }
    *a3 = v9;
LABEL_19:
  id v19 = v16;

  return v19;
}

id frk_metadata_from_aea_auth_data(AEAAuthData_impl *a1, void *a2)
{
  int v4 = +[NSMutableDictionary dictionary];
  EntryCFIndex Count = AEAAuthDataGetEntryCount(a1);
  if (!EntryCount)
  {
LABEL_12:
    id v16 = [v4 copy];
    id v17 = 0;
    if (a2) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  uint32_t v6 = EntryCount;
  uint32_t v7 = 0;
  while (1)
  {
    data_std::string::size_type size = 0;
    size_t key_length = 0;
    if (AEAAuthDataGetEntry(a1, v7, 0, 0, &key_length, 0, 0, &data_size))
    {
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      CFStringRef v26 = @"Failed to parse auth data blob.";
      uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v18];

      goto LABEL_22;
    }
    if (!key_length)
    {
      NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
      CFStringRef v38 = @"Failed to parse key in KVS (zero size key).";
      id v19 = &v38;
      __int16 v20 = &v37;
LABEL_20:
      id v13 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v20 count:1];
      id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v13];
      goto LABEL_21;
    }
    size_t v8 = ++key_length;
    if (!data_size)
    {
      NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
      CFStringRef v36 = @"Failed to parse key in KVS (zero size data).";
      id v19 = &v36;
      __int16 v20 = &v35;
      goto LABEL_20;
    }
    id v9 = malloc_type_calloc(1uLL, v8, 0xA4E106D4uLL);
    if (!v9)
    {
      NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
      CFStringRef v34 = @"KVS keyBuffer allocation failure.";
      id v19 = &v34;
      __int16 v20 = &v33;
      goto LABEL_20;
    }
    uint64_t v10 = v9;
    uint64_t v11 = (uint8_t *)malloc_type_calloc(1uLL, data_size, 0xE9F1B555uLL);
    if (!v11)
    {
      free(v10);
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      CFStringRef v32 = @"KVS dataBuffer allocation failure.";
      id v19 = &v32;
      __int16 v20 = &v31;
      goto LABEL_20;
    }
    id v12 = v11;
    if (AEAAuthDataGetEntry(a1, v7, key_length, (char *)v10, &key_length, data_size, v11, &data_size))
    {
      free(v10);
      free(v12);
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      CFStringRef v30 = @"KVS data fetch failure.";
      id v19 = &v30;
      __int16 v20 = &v29;
      goto LABEL_20;
    }
    id v13 = [objc_alloc((Class)NSString) initWithUTF8String:v10];
    id v14 = objc_alloc((Class)NSData);
    id v15 = [v14 initWithBytesNoCopy:v12 length:data_size freeWhenDone:1];
    free(v10);
    if (!v13 || !v15) {
      break;
    }
    [v4 setObject:v15 forKey:v13];

    if (v6 == ++v7) {
      goto LABEL_12;
    }
  }
  NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
  CFStringRef v28 = @"KVS key value - parse failure.";
  __int16 v22 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  id v17 = +[NSError errorWithDomain:@"com.apple.internal.fetchrestorekeys" code:17 userInfo:v22];

LABEL_21:
LABEL_22:
  id v16 = 0;
  if (a2) {
LABEL_23:
  }
    *a2 = v17;
LABEL_24:

  return v16;
}

void *sub_10014F144(uint64_t a1, void *a2)
{
  return sub_10014F9F4(a1, a2);
}

unint64_t sub_10014F15C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100151298(&qword_1001D46E8);
  uint64_t v2 = sub_100151D90();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100151388(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10014F898(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1001513F0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10014F288(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100151298(&qword_1001D46E0);
  uint64_t v2 = (void *)sub_100151D90();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10014F898(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    int v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10014F3C4()
{
  return sub_10014FD1C();
}

Class sub_10014F3F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  id v6 = a3;
  uint64_t v7 = sub_100151C00();
  unint64_t v9 = v8;

  uint64_t v10 = a5(v7, v9);
  unint64_t v12 = v11;
  sub_100151240(v7, v9);
  v13.super.isa = sub_100151BE0().super.isa;
  sub_100151240(v10, v12);
  return v13.super.isa;
}

id sub_10014F4F4(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5, unint64_t a6)
{
  return sub_10014FFE8(a1, a2, a3, a4, a5, a6);
}

char *static CryptoKitWrapper.wrappedDataDictionaryWithCert(plainText:certificate:)(uint64_t a1, unint64_t a2, __SecCertificate *a3)
{
  return sub_100150604(a1, a2, a3);
}

id CryptoKitWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

id CryptoKitWrapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "init");
}

id CryptoKitWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoKitWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_10014F898(uint64_t a1, uint64_t a2)
{
  sub_100151DB0();
  sub_100151D80();
  Swift::Int v4 = sub_100151DC0();
  return sub_10014F910(a1, a2, v4);
}

unint64_t sub_10014F910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_100151DA0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        NSData v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_100151DA0() & 1) == 0);
    }
  }
  return v6;
}

void *sub_10014F9F4(uint64_t a1, void *isa)
{
  uint64_t v5 = sub_100151D70();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7, v8);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100151D00();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13, v14);
  uint64_t v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = a1;
  CFStringRef v26 = isa;
  sub_100151330(a1, (unint64_t)isa);
  sub_100151CF0();
  if (!v2)
  {
    uint64_t v27 = v12;
    sub_100151CD0();
    sub_100151D60();
    isa = (void *)sub_100151D40();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v10, v5);
    if (v18 >> 60 == 15)
    {
      sub_100151D30();
      sub_100151298(&qword_1001D46C8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100179B10;
      *(void *)(inited + 32) = sub_100151D30();
      *(void *)(inited + 4io_rings_get_max_version(0, 0) = v20;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = 0xD000000000000017;
      *(void *)(inited + ++*(_DWORD *)(result + 56) = 0x8000000100189380;
      sub_10014F15C(inited);
      id v21 = objc_allocWithZone((Class)NSError);
      NSString v22 = sub_100151D20();
      swift_bridgeObjectRelease();
      isa = sub_100151D10().super.isa;
      swift_bridgeObjectRelease();
      [v21 initWithDomain:v22 code:31 userInfo:isa];

      swift_willThrow();
      (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v16, v11);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v16, v11);
    }
  }
  return isa;
}

void *sub_10014FD1C()
{
  isa = v0;
  uint64_t v2 = sub_100151D70();
  __chkstk_darwin(v2 - 8, v3, v4);
  uint64_t v5 = sub_100151D00();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8, v9);
  unint64_t v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_100151D60();
  uint64_t v11 = sub_100151D50();
  if (v12)
  {
    __chkstk_darwin(v11, v12, v13);
    sub_100151CC0();
    if (!v0)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(&v19[-v10], &v19[-v10], v5);
      isa = (void *)sub_100151CE0();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(&v19[-v10], v5);
    }
  }
  else
  {
    sub_100151D30();
    sub_100151298(&qword_1001D46C8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100179B10;
    *(void *)(inited + 32) = sub_100151D30();
    *(void *)(inited + 4io_rings_get_max_version(0, 0) = v15;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000017;
    *(void *)(inited + ++*(_DWORD *)(result + 56) = 0x8000000100189380;
    sub_10014F15C(inited);
    id v16 = objc_allocWithZone((Class)NSError);
    NSString v17 = sub_100151D20();
    swift_bridgeObjectRelease();
    isa = sub_100151D10().super.isa;
    swift_bridgeObjectRelease();
    [v16 initWithDomain:v17 code:31 userInfo:isa];

    swift_willThrow();
  }
  return isa;
}

id sub_10014FFE8(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, id a5, unint64_t a6)
{
  if (&type metadata accessor for HPKE) {
    BOOL v7 = &type metadata for HPKE == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || &nominal type descriptor for HPKE == 0)
  {
    sub_100151D30();
    sub_100151298(&qword_1001D46C8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100179B10;
    *(void *)(inited + 32) = sub_100151D30();
    *(void *)(inited + 4io_rings_get_max_version(0, 0) = v18;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000027;
    *(void *)(inited + ++*(_DWORD *)(result + 56) = 0x8000000100189350;
    sub_10014F15C(inited);
    a5 = objc_allocWithZone((Class)NSError);
    NSString v19 = sub_100151D20();
    swift_bridgeObjectRelease();
    Class isa = sub_100151D10().super.isa;
    swift_bridgeObjectRelease();
    [a5 initWithDomain:v19 code:12 userInfo:isa];

    swift_willThrow();
  }
  else
  {
    unint64_t v55 = a2;
    unint64_t v56 = a4;
    uint64_t v54 = a1;
    uint64_t v12 = sub_100151D00();
    uint64_t v59 = *(void *)(v12 - 8);
    uint64_t v13 = *(void *)(v59 + 64);
    __chkstk_darwin(v12, v14, v15);
    unint64_t v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    id v57 = a5;
    unint64_t v58 = a6;
    sub_100151330((uint64_t)a5, a6);
    sub_100151CF0();
    if (!v6)
    {
      uint64_t v51 = &v42;
      uint64_t v53 = sub_100151C20();
      uint64_t v46 = &v42;
      uint64_t v22 = *(void *)(v53 - 8);
      uint64_t v23 = *(void *)(v22 + 64);
      __chkstk_darwin(v53, v24, v25);
      uint64_t v52 = a3;
      sub_100151C10();
      uint64_t v26 = sub_100151C90();
      long long v45 = &v42;
      uint64_t v42 = v26;
      uint64_t v43 = *(void *)(v26 - 8);
      uint64_t v29 = __chkstk_darwin(v26, v27, v28);
      NSErrorUserInfoKey v31 = (char *)&v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      long long v49 = &v42;
      __chkstk_darwin(v29, (char *)&v42 - v16, v32);
      NSErrorUserInfoKey v33 = *(uint64_t (**)(char *))(v59 + 16);
      uint64_t v48 = v34;
      uint64_t v35 = v33((char *)&v42 - v16);
      char v47 = &v42;
      __chkstk_darwin(v35, v36, v37);
      uint64_t v50 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v53);
      sub_100151330(v52, v56);
      int v44 = v31;
      sub_100151C70();
      uint64_t v38 = v59;
      uint64_t v39 = v43;
      unint64_t v56 = (unint64_t)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v40 = v50;
      uint64_t v41 = v48;
      id v57 = v54;
      unint64_t v58 = v55;
      sub_100151400();
      a5 = (id)sub_100151C80();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v42);
      (*(void (**)(unint64_t, uint64_t))(v40 + 8))(v56, v53);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v12);
    }
  }
  return a5;
}

char *sub_100150604(uint64_t a1, unint64_t a2, SecCertificateRef certificate)
{
  if (&type metadata accessor for HPKE) {
    BOOL v4 = &type metadata for HPKE == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || &nominal type descriptor for HPKE == 0)
  {
    sub_100151D30();
    sub_100151298(&qword_1001D46C8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100179B10;
    *(void *)(inited + 32) = sub_100151D30();
    *(void *)(inited + 4io_rings_get_max_version(0, 0) = v18;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000027;
    *(void *)(inited + ++*(_DWORD *)(result + 56) = 0x8000000100189350;
    sub_10014F15C(inited);
    id v19 = objc_allocWithZone((Class)NSError);
    NSString v20 = sub_100151D20();
    swift_bridgeObjectRelease();
    Class isa = (char *)sub_100151D10().super.isa;
    swift_bridgeObjectRelease();
    [v19 initWithDomain:v20 code:12 userInfo:isa];

    swift_willThrow();
    return isa;
  }
  unint64_t v99 = a2;
  uint64_t v98 = a1;
  uint64_t v6 = SecCertificateCopyKey(certificate);
  if (!v6)
  {
    __break(1u);
    goto LABEL_47;
  }
  BOOL v7 = v6;
  CFDataRef v8 = SecKeyCopyExternalRepresentation(v6, 0);
  if (!v8)
  {
LABEL_47:
    __break(1u);
    JUMPOUT(0x10015120CLL);
  }
  CFDataRef v9 = v8;
  uint64_t v10 = sub_100151CB0();
  uint64_t v11 = *(void *)(v10 - 8);
  Class isa = *(char **)(v11 + 64);
  __chkstk_darwin(v10, v13, v14);
  unint64_t v15 = (unint64_t)(isa + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v102 = (void *)sub_100151C00();
  long long v103 = v16;
  sub_100151CA0();
  if (v3)
  {

    return isa;
  }
  CFDataRef v88 = v9;
  char v89 = v7;
  uint64_t v94 = &v83;
  uint64_t v22 = sub_100151C20();
  __n128 v92 = 0;
  uint64_t v23 = (uint64_t *)v22;
  uint64_t v96 = &v83;
  uint64_t v97 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v97 + 64);
  __chkstk_darwin(v22, v25, v26);
  uint64_t v100 = v10;
  uint64_t v27 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100151C10();
  uint64_t v28 = sub_100151C60();
  uint64_t v93 = &v83;
  uint64_t v87 = v28;
  uint64_t v86 = *(void *)(v28 - 8);
  uint64_t v31 = __chkstk_darwin(v28, v29, v30);
  NSErrorUserInfoKey v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v91 = &v83;
  __chkstk_darwin(v31, v34, v35);
  Class isa = (char *)&v83 - v15;
  uint64_t v36 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
  long long v95 = (char *)&v83 - v15;
  uint64_t v37 = v36((char *)&v83 - v15, (char *)&v83 - v15, v100);
  uint64_t v90 = &v83;
  __chkstk_darwin(v37, v38, v39);
  uint64_t v40 = v100;
  uint64_t v41 = v97;
  (*(void (**)(char *, char *, uint64_t *))(v97 + 16))(v27, v27, v23);
  uint64_t v42 = v92;
  sub_100151C30();
  if (v42)
  {

    (*(void (**)(char *, uint64_t *))(v41 + 8))(v27, v23);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v95, v40);
    return isa;
  }
  __n128 v92 = v33;
  uint64_t v84 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v11;
  switch(v99 >> 62)
  {
    case 1uLL:
      __n128 v91 = v23;
      uint64_t v44 = v98;
      uint64_t v45 = (int)v98;
      uint64_t v46 = (v44 >> 32) - (int)v44;
      if (v44 >> 32 < (int)v44)
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      sub_100151330(v98, v99);
      uint64_t v47 = sub_100151BA0();
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = sub_100151BC0();
        if (!__OFSUB__(v45, v49))
        {
          uint64_t v50 = (void *)(v48 + v45 - v49);
          goto LABEL_34;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      uint64_t v50 = 0;
LABEL_34:
      uint64_t v67 = sub_100151BB0();
      if (v67 >= v46) {
        uint64_t v68 = v46;
      }
      else {
        uint64_t v68 = v67;
      }
      char v69 = (char *)v50 + v68;
      if (!v50) {
        char v69 = 0;
      }
      long long v102 = v50;
      long long v103 = v69;
      sub_1001512DC();
      uint64_t v62 = sub_100151C50();
      unint64_t v64 = v71;
      sub_100151240(v98, v99);
      CFDataRef v65 = v88;
LABEL_40:
      uint64_t v43 = v92;
LABEL_41:
      unint64_t v99 = sub_100151BF0(0);
      uint64_t v98 = v72;
      unint64_t v73 = v64;
      uint64_t v74 = v62;
      uint64_t v75 = sub_100151C40();
      unint64_t v77 = v76;
      uint64_t v78 = sub_100151BF0(0);
      uint64_t v80 = v79;
      sub_100151240(v75, v77);
      sub_100151298(&qword_1001D46D8);
      uint64_t v81 = swift_initStackObject();
      *(_OWORD *)(v81 + 16) = xmmword_100179B20;
      *(void *)(v81 + 32) = 0x2D64657070617277;
      *(void *)(v81 + 4io_rings_get_max_version(0, 0) = 0xEB0000000079656BLL;
      uint64_t v82 = v98;
      *(void *)(v81 + 48) = v99;
      *(void *)(v81 + ++*(_DWORD *)(result + 56) = v82;
      *(void *)(v81 + 64) = 0x757165722D636E65;
      *(void *)(v81 + 72) = 0xEB00000000747365;
      *(void *)(v81 + 8io_rings_get_max_version(0, 0) = v78;
      *(void *)(v81 + 88) = v80;
      Class isa = (char *)sub_10014F288(v81);
      sub_100151240(v74, v73);

      (*(void (**)(char *, uint64_t *))(v97 + 8))(v84, v91);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v95, v100);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v43, v87);
      return isa;
    case 2uLL:
      uint64_t v51 = *(void *)(v98 + 16);
      uint64_t v52 = *(void *)(v98 + 24);
      swift_retain();
      swift_retain();
      uint64_t v53 = sub_100151BA0();
      if (!v53) {
        goto LABEL_25;
      }
      uint64_t v54 = sub_100151BC0();
      if (__OFSUB__(v51, v54)) {
        goto LABEL_45;
      }
      v53 += v51 - v54;
LABEL_25:
      BOOL v55 = __OFSUB__(v52, v51);
      uint64_t v56 = v52 - v51;
      if (v55) {
        goto LABEL_43;
      }
      uint64_t v57 = sub_100151BB0();
      if (v57 >= v56) {
        uint64_t v58 = v56;
      }
      else {
        uint64_t v58 = v57;
      }
      uint64_t v59 = (char *)(v53 + v58);
      if (!v53) {
        uint64_t v59 = 0;
      }
      long long v102 = (void *)v53;
      long long v103 = v59;
      sub_1001512DC();
      uint64_t v60 = sub_100151C50();
      CFDataRef v65 = v88;
      uint64_t v62 = v60;
      unint64_t v64 = v70;
      swift_release();
      swift_release();
      __n128 v91 = v23;
      goto LABEL_40;
    case 3uLL:
      __n128 v91 = v23;
      memset(v101, 0, 14);
      long long v102 = v101;
      long long v103 = (char *)v101;
      sub_1001512DC();
      uint64_t v43 = v92;
      uint64_t v61 = sub_100151C50();
      unint64_t v64 = v66;
      CFDataRef v65 = v88;
      uint64_t v62 = v61;
      goto LABEL_41;
    default:
      __n128 v91 = v23;
      v101[0] = v98;
      LODWORD(v101[1]) = v99;
      WORD2(v101[1]) = WORD2(v99);
      long long v102 = v101;
      long long v103 = (char *)v101 + BYTE6(v99);
      sub_1001512DC();
      uint64_t v43 = v92;
      uint64_t v62 = sub_100151C50();
      unint64_t v64 = v63;
      CFDataRef v65 = v88;
      goto LABEL_41;
  }
}

uint64_t type metadata accessor for CryptoKitWrapper()
{
  return self;
}

uint64_t sub_100151240(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100151298(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1001512DC()
{
  unint64_t result = qword_1001D46D0;
  if (!qword_1001D46D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D46D0);
  }
  return result;
}

uint64_t sub_100151330(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_100151388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100151298(&qword_1001D46F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1001513F0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100151400()
{
  unint64_t result = qword_1001D46F8;
  if (!qword_1001D46F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D46F8);
  }
  return result;
}

uint64_t sub_100151454(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t sub_1001514C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void sub_1001514E4()
{
}

void sub_100151504(void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)((char *)__cxa_begin_catch(a1) + 8);
  if (*(unsigned char *)(a3 + 89))
  {
    long long v5 = v4;
    sub_10000C6D4(a3);
    long long v4 = v5;
    *(unsigned char *)(a3 + 89) = 0;
  }
  *(_OWORD *)a3 = v4;
  __cxa_end_catch();
}

uint64_t sub_100151558()
{
  sub_10002EA6C();
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_10015158C()
{
  sub_10002EA6C();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001515C0()
{
  sub_10002EA6C();
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_1001515F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_1001516E0(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t sub_10015174C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_100151784()
{
  return std::ios::~ios();
}

uint64_t sub_1001517C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
}

void sub_100151804(std::__shared_weak_count **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDataRef v8 = *a1;
  if (v8) {
    sub_100004944(v8);
  }
  __cxa_begin_catch(a2);
  for (; a5 != a4; a5 += 104)
  {
    uint64_t v9 = *(void *)(a5 + 48);
    if (v9) {
      *(void *)(v9 + 32) = 0;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a5 + 8);
    if (v10) {
      sub_100004944(v10);
    }
  }
}

void sub_10015187C(void *a1)
{
  id v1 = __cxa_begin_catch(a1);
  sub_10006DC78(v1);
}

uint64_t sub_1001518A4()
{
  sub_10002EA6C();
  return (*(uint64_t (**)(void))(v0 + 40))();
}

void sub_1001518DC(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    sub_100004944(v3);
  }
}

uint64_t sub_10015192C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_100151950(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t sub_100151990(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1001519D4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void (***sub_100151A00())(void)
{
  sub_10010A29C();
  do
  {
    uint64_t v3 = *v2;
    v2 += 4;
    (*v3)();
    v1 += 32;
    uint64_t result = v2;
  }
  while (v2 != v0);
  return result;
}

void (***sub_100151A5C())(void)
{
  sub_10010A29C();
  do
  {
    uint64_t v3 = *v2;
    v2 += 3;
    (*v3)();
    v1 += 24;
    uint64_t result = v2;
  }
  while (v2 != v0);
  return result;
}

void sub_100151AB8(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_100004944(v3);
  }
}

void sub_100151AF0(uint64_t a1, std::__shared_weak_count **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_100004944(v3);
  }
  long long v4 = *a2;
  if (*a2)
  {
    sub_100004944(v4);
  }
}

uint64_t sub_100151B40()
{
  sub_10002EA6C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100151B7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_100151BA0()
{
  return __DataStorage._bytes.getter();
}

uint64_t sub_100151BB0()
{
  return __DataStorage._length.getter();
}

uint64_t sub_100151BC0()
{
  return __DataStorage._offset.getter();
}

uint64_t sub_100151BD0()
{
  return _convertErrorToNSError(_:)();
}

NSData sub_100151BE0()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_100151BF0(NSDataBase64EncodingOptions options)
{
  return Data.base64EncodedString(options:)(options)._countAndFlagsBits;
}

uint64_t sub_100151C00()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100151C10()
{
  return static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter();
}

uint64_t sub_100151C20()
{
  return type metadata accessor for HPKE.Ciphersuite();
}

uint64_t sub_100151C30()
{
  return HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
}

uint64_t sub_100151C40()
{
  return HPKE.Sender.encapsulatedKey.getter();
}

uint64_t sub_100151C50()
{
  return HPKE.Sender.seal<A>(_:)();
}

uint64_t sub_100151C60()
{
  return type metadata accessor for HPKE.Sender();
}

uint64_t sub_100151C70()
{
  return HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
}

uint64_t sub_100151C80()
{
  return HPKE.Recipient.open<A>(_:)();
}

uint64_t sub_100151C90()
{
  return type metadata accessor for HPKE.Recipient();
}

uint64_t sub_100151CA0()
{
  return P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
}

uint64_t sub_100151CB0()
{
  return type metadata accessor for P256.KeyAgreement.PublicKey();
}

uint64_t sub_100151CC0()
{
  return P256.KeyAgreement.PrivateKey.init(pemRepresentation:)();
}

uint64_t sub_100151CD0()
{
  return P256.KeyAgreement.PrivateKey.pemRepresentation.getter();
}

uint64_t sub_100151CE0()
{
  return P256.KeyAgreement.PrivateKey.x963Representation.getter();
}

uint64_t sub_100151CF0()
{
  return P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
}

uint64_t sub_100151D00()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey();
}

NSDictionary sub_100151D10()
{
  return Dictionary._bridgeToObjectiveC()();
}

NSString sub_100151D20()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100151D30()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100151D40()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t sub_100151D50()
{
  return String.init(data:encoding:)();
}

uint64_t sub_100151D60()
{
  return static String.Encoding.ascii.getter();
}

uint64_t sub_100151D70()
{
  return type metadata accessor for String.Encoding();
}

uint64_t sub_100151D80()
{
  return String.hash(into:)();
}

uint64_t sub_100151D90()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_100151DA0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100151DB0()
{
  return Hasher.init(_seed:)();
}

Swift::Int sub_100151DC0()
{
  return Hasher._finalize()();
}

uint64_t AAAsyncByteStreamProcess()
{
  return _AAAsyncByteStreamProcess();
}

int AAByteStreamClose(AAByteStream s)
{
  return _AAByteStreamClose(s);
}

ssize_t AAByteStreamPRead(AAByteStream s, void *buf, size_t nbyte, off_t offset)
{
  return _AAByteStreamPRead(s, buf, nbyte, offset);
}

ssize_t AAByteStreamRead(AAByteStream s, void *buf, size_t nbyte)
{
  return _AAByteStreamRead(s, buf, nbyte);
}

off_t AAByteStreamSeek(AAByteStream s, off_t offset, int whence)
{
  return _AAByteStreamSeek(s, offset, whence);
}

ssize_t AAByteStreamWrite(AAByteStream s, const void *buf, size_t nbyte)
{
  return _AAByteStreamWrite(s, buf, nbyte);
}

AAByteStream AACustomByteStreamOpen(void)
{
  return _AACustomByteStreamOpen();
}

void AACustomByteStreamSetCloseProc(AAByteStream s, AAByteStreamCloseProc proc)
{
}

void AACustomByteStreamSetData(AAByteStream s, void *data)
{
}

void AACustomByteStreamSetPReadProc(AAByteStream s, AAByteStreamPReadProc proc)
{
}

void AACustomByteStreamSetReadProc(AAByteStream s, AAByteStreamReadProc proc)
{
}

AAByteStream AAFileStreamOpenWithFD(int fd, int automatic_close)
{
  return _AAFileStreamOpenWithFD(fd, automatic_close);
}

uint64_t AATempStreamOpen()
{
  return _AATempStreamOpen();
}

AEAAuthData AEAAuthDataCreateWithContext(AEAContext context)
{
  return _AEAAuthDataCreateWithContext(context);
}

void AEAAuthDataDestroy(AEAAuthData auth_data)
{
}

int AEAAuthDataGetEntry(AEAAuthData auth_data, uint32_t i, size_t key_capacity, char *key, size_t *key_length, size_t data_capacity, uint8_t *data, size_t *data_size)
{
  return _AEAAuthDataGetEntry(auth_data, i, key_capacity, key, key_length, data_capacity, data, data_size);
}

uint32_t AEAAuthDataGetEntryCount(AEAAuthData auth_data)
{
  return _AEAAuthDataGetEntryCount(auth_data);
}

AEAContext AEAContextCreateWithEncryptedStream(AAByteStream encrypted_stream)
{
  return _AEAContextCreateWithEncryptedStream(encrypted_stream);
}

void AEAContextDestroy(AEAContext context)
{
}

int AEAContextGetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, size_t buf_capacity, uint8_t *buf, size_t *buf_size)
{
  return _AEAContextGetFieldBlob(context, field, representation, buf_capacity, buf, buf_size);
}

uint64_t AEAContextGetFieldUInt(AEAContext context, AEAContextField field)
{
  return _AEAContextGetFieldUInt(context, field);
}

int AEAContextSetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, const uint8_t *buf, size_t buf_size)
{
  return _AEAContextSetFieldBlob(context, field, representation, buf, buf_size);
}

AAByteStream AEADecryptionRandomAccessInputStreamOpen(AAByteStream encrypted_stream, AEAContext context, size_t alloc_limit, AAFlagSet flags, int n_threads)
{
  return _AEADecryptionRandomAccessInputStreamOpen(encrypted_stream, context, alloc_limit, flags, n_threads);
}

int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)
{
  return _BZ2_bzBuffToBuffCompress(dest, destLen, source, sourceLen, blockSize100k, verbosity, workFactor);
}

int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)
{
  return _BZ2_bzBuffToBuffDecompress(dest, destLen, source, sourceLen, small, verbosity);
}

unsigned int CCCalibratePBKDF(CCPBKDFAlgorithm algorithm, size_t passwordLen, size_t saltLen, CCPseudoRandomAlgorithm prf, size_t derivedKeyLen, uint32_t msec)
{
  return _CCCalibratePBKDF(algorithm, passwordLen, saltLen, prf, derivedKeyLen, msec);
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCrypt(op, alg, options, key, keyLength, iv, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return _CCCryptorCreate(op, alg, options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return _CCCryptorRelease(cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return _CCCryptorReset(cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCryptorUpdate(cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return _CCKeyDerivationPBKDF(algorithm, password, passwordLen, salt, saltLen, prf, rounds, derivedKey, derivedKeyLen);
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return _CCRandomGenerateBytes(bytes, count);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return _CFErrorGetCode(err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return _CFStringCreateWithBytes(alloc, bytes, numBytes, encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return _CFStringGetMaximumSizeForEncoding(length, encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return _CFUUIDCreateFromUUIDBytes(alloc, bytes);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  CFUUIDBytes v3 = _CFUUIDGetUUIDBytes(uuid);
  uint64_t v2 = *(void *)&v3.byte8;
  uint64_t v1 = *(void *)&v3.byte0;
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFStringRef CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx)
{
  return _CFUserNotificationGetResponseValue(userNotification, key, idx);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return _IOBSDNameMatching(mainPort, options, bsdName);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

BOOLean_t IOIteratorIsValid(io_iterator_t iterator)
{
  return _IOIteratorIsValid(iterator);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

void IOIteratorReset(io_iterator_t iterator)
{
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return _IOObjectConformsTo(object, className);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return _IOObjectCopyClass(object);
}

BOOLean_t IOObjectIsEqualTo(io_object_t object, io_object_t anObject)
{
  return _IOObjectIsEqualTo(object, anObject);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return _IOObjectRetain(object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return _IORegistryEntryCreateIterator(entry, plane, options, iterator);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return _IORegistryEntryIDMatching(entryID);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

kern_return_t IOServiceWaitQuiet(io_service_t service, mach_timespec_t *waitTime)
{
  return _IOServiceWaitQuiet(service, waitTime);
}

uint64_t MKCFCreateFSInfo()
{
  return _MKCFCreateFSInfo();
}

uint64_t MKCFReadMedia()
{
  return _MKCFReadMedia();
}

uint64_t MKMediaCopyProperty()
{
  return _MKMediaCopyProperty();
}

uint64_t MKMediaCreate()
{
  return _MKMediaCreate();
}

uint64_t MKMediaCreateWithSubRange()
{
  return _MKMediaCreateWithSubRange();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return _SecKeyCreateDecryptedData(key, algorithm, ciphertext, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return _SecKeyCreateEncryptedData(key, algorithm, plaintext, error);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return std::exception::what(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return std::__get_sp_mut(a1);
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return std::string::insert(this, __pos, __c);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::write()
{
  return std::ostream::write();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return std::__thread_struct::__thread_struct(this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

uint64_t std::stringbuf::basic_stringbuf()
{
  return std::stringbuf::basic_stringbuf();
}

const std::error_category *std::system_category(void)
{
  return std::system_category();
}

const std::error_category *std::generic_category(void)
{
  return std::generic_category();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return std::__shared_mutex_base::__shared_mutex_base(this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return std::__thread_local_data();
}

void std::__libcpp_atomic_wait(const void *a1, std::__cxx_contention_t a2)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__cxx_atomic_notify_all(const void *a1)
{
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const void *a1)
{
  return std::__libcpp_atomic_monitor(a1);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__status(a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return std::chrono::steady_clock::now();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return std::chrono::system_clock::now();
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return std::to_string(retstr, __val);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return std::bad_alloc::bad_alloc(this);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return ___cxa_demangle(lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __strlcat_chk()
{
  return ___strlcat_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return __os_log_send_and_compose_impl();
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

int access(const char *a1, int a2)
{
  return _access(a1, a2);
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  return _basename_r(a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return _calloc(__count, __size);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_decode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_decode_scratch_buffer_size(algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return _compression_encode_buffer(dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return _compression_encode_scratch_buffer_size(algorithm);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return _crc32(crc, buf, len);
}

void curl_easy_cleanup(CURL *curl)
{
}

CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...)
{
  return _curl_easy_getinfo(curl, info);
}

CURL *curl_easy_init(void)
{
  return _curl_easy_init();
}

CURLcode curl_easy_perform(CURL *curl)
{
  return _curl_easy_perform(curl);
}

CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...)
{
  return _curl_easy_setopt(curl, option);
}

const char *__cdecl curl_easy_strerror(CURLcode a1)
{
  return _curl_easy_strerror(a1);
}

CURLcode curl_global_init(uint64_t flags)
{
  return _curl_global_init(flags);
}

curl_slist *__cdecl curl_slist_append(curl_slist *list, const char *data)
{
  return _curl_slist_append(list, data);
}

void curl_slist_free_all(curl_slist *list)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

int dup(int a1)
{
  return _dup(a1);
}

int dup2(int a1, int a2)
{
  return _dup2(a1, a2);
}

int faccessat(int a1, const char *a2, int a3, int a4)
{
  return _faccessat(a1, a2, a3, a4);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return _fchmodat(a1, a2, a3, a4);
}

int fchownat(int a1, const char *a2, uid_t a3, gid_t a4, int a5)
{
  return _fchownat(a1, a2, a3, a4, a5);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return _fdopendir(a1);
}

int feof(FILE *a1)
{
  return _feof(a1);
}

int ferror(FILE *a1)
{
  return _ferror(a1);
}

int fileno(FILE *a1)
{
  return _fileno(a1);
}

int flock(int a1, int a2)
{
  return _flock(a1, a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return _fstatat(a1, a2, a3, a4);
}

int fstatfs(int a1, statfs *a2)
{
  return _fstatfs(a1, a2);
}

int fsync(int a1)
{
  return _fsync(a1);
}

int ftruncate(int a1, off_t a2)
{
  return _ftruncate(a1, a2);
}

int futimes(int a1, const timeval *a2)
{
  return _futimes(a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t geteuid(void)
{
  return _geteuid();
}

group *__cdecl getgrgid(gid_t a1)
{
  return _getgrgid(a1);
}

int getpagesize(void)
{
  return _getpagesize();
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

int isatty(int a1)
{
  return _isatty(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

int madvise(void *a1, size_t a2, int a3)
{
  return _madvise(a1, a2, a3);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_valloc(size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return _mkdirat(a1, a2, a3);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

int pclose(FILE *a1)
{
  return _pclose(a1);
}

void perror(const char *a1)
{
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return _popen(a1, a2);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return _pread(__fd, __buf, __nbyte, a4);
}

ssize_t preadv(int a1, const iovec *a2, int a3, off_t a4)
{
  return _preadv(a1, a2, a3, a4);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return _pthread_getspecific(a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return _pthread_key_create(a1, a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return _pthread_setspecific(a1, a2);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return _pwrite(__fd, __buf, __nbyte, a4);
}

ssize_t pwritev(int a1, const iovec *a2, int a3, off_t a4)
{
  return _pwritev(a1, a2, a3, a4);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

int raise(int a1)
{
  return _raise(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  return _readpassphrase(a1, a2, a3, a4);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return _realloc(__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

int sched_yield(void)
{
  return _sched_yield();
}

int seteuid(uid_t a1)
{
  return _seteuid(a1);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return _strcasecmp(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return _strncasecmp(a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return _strnlen(__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return _strtoll(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

mode_t umask(mode_t a1)
{
  return _umask(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void uuid_generate_random(uuid_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return _xpc_connection_set_oneshot_instance();
}

id objc_msgSend_BSDName(void *a1, const char *a2, ...)
{
  return _[a1 BSDName];
}

id objc_msgSend_CLIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 CLIPassphrasePrompt];
}

id objc_msgSend_CLIVerifyPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 CLIVerifyPassphrasePrompt];
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIAskForPassphraseWithEncryptionFrontend:error:");
}

id objc_msgSend_GUIAskForPassphraseWithEncryptionFrontend_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIAskForPassphraseWithEncryptionFrontend:reply:");
}

id objc_msgSend_GUIAskForPassphraseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GUIAskForPassphraseWithError:");
}

id objc_msgSend_GUIPassphraseLabel(void *a1, const char *a2, ...)
{
  return _[a1 GUIPassphraseLabel];
}

id objc_msgSend_GUIPassphrasePrompt(void *a1, const char *a2, ...)
{
  return _[a1 GUIPassphrasePrompt];
}

id objc_msgSend_GUIVerifyPassphraseLabel(void *a1, const char *a2, ...)
{
  return _[a1 GUIVerifyPassphraseLabel];
}

id objc_msgSend_GraphNodeWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "GraphNodeWithDictionary:updateChangesToDict:workDir:error:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KKMSKeyWithURL_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "KKMSKeyWithURL:destKey:destKeySize:error:");
}

id objc_msgSend_RAMdisk(void *a1, const char *a2, ...)
{
  return _[a1 RAMdisk];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 URLByDeletingLastPathComponent];
}

id objc_msgSend_URLByStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 URLByStandardizingPath];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_WKMSKeyWithURL_authData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "WKMSKeyWithURL:authData:destKey:destKeySize:error:");
}

id objc_msgSend__xpcConnection(void *a1, const char *a2, ...)
{
  return _[a1 _xpcConnection];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _[a1 absoluteURL];
}

id objc_msgSend_activeNode(void *a1, const char *a2, ...)
{
  return _[a1 activeNode];
}

id objc_msgSend_activeShadowURL(void *a1, const char *a2, ...)
{
  return _[a1 activeShadowURL];
}

id objc_msgSend_addBytesDownloaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBytesDownloaded:");
}

id objc_msgSend_addDecendantsToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDecendantsToArray:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addShadowNodes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShadowNodes:error:");
}

id objc_msgSend_addShadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addShadowURLs:error:");
}

id objc_msgSend_addToRefCountWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRefCountWithError:");
}

id objc_msgSend_addToRefCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRefCountWithReply:");
}

id objc_msgSend_addValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:forHTTPHeaderField:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allowOnDiskCacheWithSinkDiskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowOnDiskCacheWithSinkDiskImage:");
}

id objc_msgSend_allowStoringInKeychain(void *a1, const char *a2, ...)
{
  return _[a1 allowStoringInKeychain];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_applyMountPointsWithBSDName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyMountPointsWithBSDName:error:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_askPermissionWithRememberPassword_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "askPermissionWithRememberPassword:error:");
}

id objc_msgSend_attachCompletedWithHandle_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachCompletedWithHandle:reply:");
}

id objc_msgSend_attachParams(void *a1, const char *a2, ...)
{
  return _[a1 attachParams];
}

id objc_msgSend_attachToExistingDeviceWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToExistingDeviceWithParams:reply:");
}

id objc_msgSend_attachToNewDeviceWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToNewDeviceWithParams:reply:");
}

id objc_msgSend_attachWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachWithParams:reply:");
}

id objc_msgSend_autoMount(void *a1, const char *a2, ...)
{
  return _[a1 autoMount];
}

id objc_msgSend_backend(void *a1, const char *a2, ...)
{
  return _[a1 backend];
}

id objc_msgSend_backendXPC(void *a1, const char *a2, ...)
{
  return _[a1 backendXPC];
}

id objc_msgSend_baseBackendXPC(void *a1, const char *a2, ...)
{
  return _[a1 baseBackendXPC];
}

id objc_msgSend_blockSize(void *a1, const char *a2, ...)
{
  return _[a1 blockSize];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buf(void *a1, const char *a2, ...)
{
  return _[a1 buf];
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_bytesDownloaded(void *a1, const char *a2, ...)
{
  return _[a1 bytesDownloaded];
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _[a1 cache];
}

id objc_msgSend_cacheDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheDocument:");
}

id objc_msgSend_cacheLock(void *a1, const char *a2, ...)
{
  return _[a1 cacheLock];
}

id objc_msgSend_cacheURL(void *a1, const char *a2, ...)
{
  return _[a1 cacheURL];
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _[a1 certificate];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_checkAttachEntitlementWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAttachEntitlementWithError:");
}

id objc_msgSend_checkBeforeSetWithIsPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkBeforeSetWithIsPassphrase:error:");
}

id objc_msgSend_checkExistingFileWithURL_isDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExistingFileWithURL:isDirectory:error:");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkStackValidityWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkStackValidityWithError:");
}

id objc_msgSend_checkWithHasIcloudKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkWithHasIcloudKeychain:error:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _[a1 children];
}

id objc_msgSend_client2IOhandler(void *a1, const char *a2, ...)
{
  return _[a1 client2IOhandler];
}

id objc_msgSend_closeConnection(void *a1, const char *a2, ...)
{
  return _[a1 closeConnection];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_commandSize(void *a1, const char *a2, ...)
{
  return _[a1 commandSize];
}

id objc_msgSend_completeCommandWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeCommandWithError:");
}

id objc_msgSend_completeRequest_data_response_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRequest:data:response:error:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_connectWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectWithError:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_consoleAskForPassphraseWithUseStdin_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consoleAskForPassphraseWithUseStdin:error:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_conversionMethod(void *a1, const char *a2, ...)
{
  return _[a1 conversionMethod];
}

id objc_msgSend_convertParams(void *a1, const char *a2, ...)
{
  return _[a1 convertParams];
}

id objc_msgSend_convertPrivateKeyTox963WithPemPrivateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPrivateKeyTox963WithPemPrivateKey:error:");
}

id objc_msgSend_convertUserDataWithDiskImage_destination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertUserDataWithDiskImage:destination:");
}

id objc_msgSend_convertWithDiskImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertWithDiskImage:error:");
}

id objc_msgSend_convertWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertWithParams:reply:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyBlockDeviceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBlockDeviceWithError:");
}

id objc_msgSend_copyDefaultLocalizedStringForDIErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDefaultLocalizedStringForDIErrorCode:");
}

id objc_msgSend_copyDevicePathWithStatfs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDevicePathWithStatfs:");
}

id objc_msgSend_copyDictNodesToFolder_dict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDictNodesToFolder:dict:error:");
}

id objc_msgSend_copyDiskImagesControllerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDiskImagesControllerWithError:");
}

id objc_msgSend_copyIOMediaWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyIOMediaWithError:");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyNextObject(void *a1, const char *a2, ...)
{
  return _[a1 copyNextObject];
}

id objc_msgSend_copyPropertyWithClass_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPropertyWithClass:key:");
}

id objc_msgSend_copyRootBlockDeviceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRootBlockDeviceWithError:");
}

id objc_msgSend_copyUnmatchedDiskImageWithRegEntryID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUnmatchedDiskImageWithRegEntryID:error:");
}

id objc_msgSend_copyUpdatedOutputURLWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUpdatedOutputURLWithError:");
}

id objc_msgSend_copyWithURL_outURLStr_maxLen_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithURL:outURLStr:maxLen:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAEABackendWithBackendXPC:error:");
}

id objc_msgSend_createAndResumeTask(void *a1, const char *a2, ...)
{
  return _[a1 createAndResumeTask];
}

id objc_msgSend_createAndStoreInSystemKeychainWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndStoreInSystemKeychainWithAccount:error:");
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndStoreInSystemKeychainWithCreator:account:error:");
}

id objc_msgSend_createAndStoreInSystemKeychainWithCreator_account_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndStoreInSystemKeychainWithCreator:account:reply:");
}

id objc_msgSend_createBackendWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBackendWithFlags:");
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _[a1 createConnection];
}

id objc_msgSend_createDeviceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDeviceWithError:");
}

id objc_msgSend_createDiskImageParamsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDiskImageParamsWithError:");
}

id objc_msgSend_createDiskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _[a1 createDiskImageParamsXPC];
}

id objc_msgSend_createDiskImageWithCache_shadowValidation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDiskImageWithCache:shadowValidation:");
}

id objc_msgSend_createEncryptionWithXPCHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createEncryptionWithXPCHandler:error:");
}

id objc_msgSend_createListener(void *a1, const char *a2, ...)
{
  return _[a1 createListener];
}

id objc_msgSend_createNodesConnectivityWithNodesDict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNodesConnectivityWithNodesDict:error:");
}

id objc_msgSend_createPstackDictWithNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPstackDictWithNode:");
}

id objc_msgSend_createPublicKeyHeaderWithBackendXPC_publicKeyHeader_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPublicKeyHeaderWithBackendXPC:publicKeyHeader:error:");
}

id objc_msgSend_createRamBackend(void *a1, const char *a2, ...)
{
  return _[a1 createRamBackend];
}

id objc_msgSend_createShadowDiskImageWithBackend_numBlocks_sinkDiskImage_cache_only_stack_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createShadowDiskImageWithBackend:numBlocks:sinkDiskImage:cache_only:stack_size:");
}

id objc_msgSend_createSinkDiskImage(void *a1, const char *a2, ...)
{
  return _[a1 createSinkDiskImage];
}

id objc_msgSend_createWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createWithXpcHandler:error:");
}

id objc_msgSend_cryptoHeader(void *a1, const char *a2, ...)
{
  return _[a1 cryptoHeader];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_customCacheURL(void *a1, const char *a2, ...)
{
  return _[a1 customCacheURL];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeBytesForKey_returnedLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBytesForKey:returnedLength:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decryptKeyWithData_destKey_destKeySize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decryptKeyWithData:destKey:destKeySize:error:");
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _[a1 defaultCStringEncoding];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_deleteImage(void *a1, const char *a2, ...)
{
  return _[a1 deleteImage];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_deserializationError(void *a1, const char *a2, ...)
{
  return _[a1 deserializationError];
}

id objc_msgSend_deviceHandle(void *a1, const char *a2, ...)
{
  return _[a1 deviceHandle];
}

id objc_msgSend_diParams(void *a1, const char *a2, ...)
{
  return _[a1 diParams];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_disconnectFromDriverWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectFromDriverWithError:");
}

id objc_msgSend_diskImageParamsXPC(void *a1, const char *a2, ...)
{
  return _[a1 diskImageParamsXPC];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_downloadSession(void *a1, const char *a2, ...)
{
  return _[a1 downloadSession];
}

id objc_msgSend_dupStderrWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dupStderrWithError:");
}

id objc_msgSend_dupWithStderrHandle_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dupWithStderrHandle:reply:");
}

id objc_msgSend_effectiveUserIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveUserIdentifier];
}

id objc_msgSend_embedUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedUserDataWithParams:reply:");
}

id objc_msgSend_embedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedWithError:");
}

id objc_msgSend_emulateExternalDisk(void *a1, const char *a2, ...)
{
  return _[a1 emulateExternalDisk];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeBytes_length_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBytes:length:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encryptionMethod(void *a1, const char *a2, ...)
{
  return _[a1 encryptionMethod];
}

id objc_msgSend_encryptionUUID(void *a1, const char *a2, ...)
{
  return _[a1 encryptionUUID];
}

id objc_msgSend_enqueueRequestWithSize_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueRequestWithSize:atOffset:destinationBuffer:destinationStream:completionSemaphore:");
}

id objc_msgSend_enterSandbox(void *a1, const char *a2, ...)
{
  return _[a1 enterSandbox];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_eraseIfExistingWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseIfExistingWithURL:error:");
}

id objc_msgSend_errorWithDIException_description_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDIException:description:prefix:error:");
}

id objc_msgSend_errorWithDomain_code_description_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:description:verboseInfo:error:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithEnumValue_verboseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithEnumValue:verboseInfo:");
}

id objc_msgSend_errorWithPOSIXCode_verboseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithPOSIXCode:verboseInfo:");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _[a1 executablePath];
}

id objc_msgSend_extraInfo(void *a1, const char *a2, ...)
{
  return _[a1 extraInfo];
}

id objc_msgSend_failWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithDIException:description:error:");
}

id objc_msgSend_failWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithDIException:prefix:error:");
}

id objc_msgSend_failWithEnumValue_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithEnumValue:description:error:");
}

id objc_msgSend_failWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithEnumValue:verboseInfo:error:");
}

id objc_msgSend_failWithNoPstackError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithNoPstackError:");
}

id objc_msgSend_failWithOSStatus_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithOSStatus:description:error:");
}

id objc_msgSend_failWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:description:error:");
}

id objc_msgSend_failWithPOSIXCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:error:");
}

id objc_msgSend_failWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failWithPOSIXCode:verboseInfo:error:");
}

id objc_msgSend_fileBackend(void *a1, const char *a2, ...)
{
  return _[a1 fileBackend];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForReading(void *a1, const char *a2, ...)
{
  return _[a1 fileHandleForReading];
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingFromURL:error:");
}

id objc_msgSend_fileMode(void *a1, const char *a2, ...)
{
  return _[a1 fileMode];
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _[a1 filePath];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:relativeToURL:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_getAEAKeyFromSAKSWithMetadata_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAEAKeyFromSAKSWithMetadata:key:error:");
}

id objc_msgSend_getAEAKeyWithHelper_keyBuffer_bufferSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAEAKeyWithHelper:keyBuffer:bufferSize:error:");
}

id objc_msgSend_getAuthEntryWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthEntryWithBackend:authTableNumEntries:mechanism:error:");
}

id objc_msgSend_getAuthValueWithBackend_authTableNumEntries_mechanism_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthValueWithBackend:authTableNumEntries:mechanism:error:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 getCFRunLoop];
}

id objc_msgSend_getCertificateWithCertificatePath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithCertificatePath:error:");
}

id objc_msgSend_getCertificateWithEncryptionCreator_outCertificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithEncryptionCreator:outCertificate:error:");
}

id objc_msgSend_getCertificateWithPublicKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCertificateWithPublicKey:error:");
}

id objc_msgSend_getCryptoHeaderBackend(void *a1, const char *a2, ...)
{
  return _[a1 getCryptoHeaderBackend];
}

id objc_msgSend_getDescendants(void *a1, const char *a2, ...)
{
  return _[a1 getDescendants];
}

id objc_msgSend_getFileInfoWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFileInfoWithError:");
}

id objc_msgSend_getImageInfoWithExtra_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageInfoWithExtra:error:");
}

id objc_msgSend_getImageWithTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageWithTag:error:");
}

id objc_msgSend_getInterconnectLocation(void *a1, const char *a2, ...)
{
  return _[a1 getInterconnectLocation];
}

id objc_msgSend_getPassphraseUsingSaksWithBackendXPC_passPhrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPassphraseUsingSaksWithBackendXPC:passPhrase:error:");
}

id objc_msgSend_getPrivateKeyWithHeader_privateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPrivateKeyWithHeader:privateKey:error:");
}

id objc_msgSend_getPublicKeyWithCertificate_key_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPublicKeyWithCertificate:key:error:");
}

id objc_msgSend_getRequestWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRequestWithURL:error:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_handleRefCount(void *a1, const char *a2, ...)
{
  return _[a1 handleRefCount];
}

id objc_msgSend_hasBaseImageCache(void *a1, const char *a2, ...)
{
  return _[a1 hasBaseImageCache];
}

id objc_msgSend_hasDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 hasDirectoryPath];
}

id objc_msgSend_hasGUIaccess(void *a1, const char *a2, ...)
{
  return _[a1 hasGUIaccess];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasUnlockedBackend(void *a1, const char *a2, ...)
{
  return _[a1 hasUnlockedBackend];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hintFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hintFormat:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_imagesDictsArray(void *a1, const char *a2, ...)
{
  return _[a1 imagesDictsArray];
}

id objc_msgSend_imported(void *a1, const char *a2, ...)
{
  return _[a1 imported];
}

id objc_msgSend_inPlaceConversion(void *a1, const char *a2, ...)
{
  return _[a1 inPlaceConversion];
}

id objc_msgSend_initWithBackend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackend:");
}

id objc_msgSend_initWithBackend_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackend:key:");
}

id objc_msgSend_initWithBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:");
}

id objc_msgSend_initWithBackendXPC_blockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:blockSize:");
}

id objc_msgSend_initWithBackendXPC_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackendXPC:header:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithClassName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClassName:error:");
}

id objc_msgSend_initWithDIIOObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDIIOObject:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_pstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:pstackURL:imported:error:");
}

id objc_msgSend_initWithDevName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevName:error:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDictionary_updateChangesToDict_workDir_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:updateChangesToDict:workDir:error:");
}

id objc_msgSend_initWithEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:");
}

id objc_msgSend_initWithFD_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFD:error:");
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:");
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:closeOnDealloc:");
}

id objc_msgSend_initWithFileDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:error:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithIOIterator_retain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIOIterator:retain:");
}

id objc_msgSend_initWithIOObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIOObject:");
}

id objc_msgSend_initWithInputURL_outputURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInputURL:outputURL:shadowURLs:error:");
}

id objc_msgSend_initWithIteratorNext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIteratorNext:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParams:");
}

id objc_msgSend_initWithPluginName_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPluginName:params:");
}

id objc_msgSend_initWithPluginName_pluginParams_tag_UUID_parentNode_metadata_isCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPluginName:pluginParams:tag:UUID:parentNode:metadata:isCache:");
}

id objc_msgSend_initWithPstackURL_imported_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPstackURL:imported:error:");
}

id objc_msgSend_initWithRegistryEntryID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegistryEntryID:error:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithSession_size_atOffset_destinationBuffer_destinationStream_completionSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:size:atOffset:destinationBuffer:destinationStream:completionSemaphore:");
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:error:");
}

id objc_msgSend_initWithURL_fileOpenFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:fileOpenFlags:");
}

id objc_msgSend_initWithURL_fileOpenFlags_bandSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:fileOpenFlags:bandSize:");
}

id objc_msgSend_initWithURL_isCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:isCache:");
}

id objc_msgSend_initWithURL_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:key:");
}

id objc_msgSend_initWithURL_openMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:openMode:");
}

id objc_msgSend_initWithURL_shadowURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:shadowURLs:error:");
}

id objc_msgSend_initWithURL_streamBase_maxAttempts_pauseInterval_maxRequestsInFlight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_inputStatFS(void *a1, const char *a2, ...)
{
  return _[a1 inputStatFS];
}

id objc_msgSend_inputURL(void *a1, const char *a2, ...)
{
  return _[a1 inputURL];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return _[a1 instanceID];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_ioObj(void *a1, const char *a2, ...)
{
  return _[a1 ioObj];
}

id objc_msgSend_ioObjectWithClassName_iterateParent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ioObjectWithClassName:iterateParent:error:");
}

id objc_msgSend_isCache(void *a1, const char *a2, ...)
{
  return _[a1 isCache];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isNewDevice(void *a1, const char *a2, ...)
{
  return _[a1 isNewDevice];
}

id objc_msgSend_isPlugin(void *a1, const char *a2, ...)
{
  return _[a1 isPlugin];
}

id objc_msgSend_isPrivileged(void *a1, const char *a2, ...)
{
  return _[a1 isPrivileged];
}

id objc_msgSend_isPstack(void *a1, const char *a2, ...)
{
  return _[a1 isPstack];
}

id objc_msgSend_isQuarantined(void *a1, const char *a2, ...)
{
  return _[a1 isQuarantined];
}

id objc_msgSend_isUDIFWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUDIFWithFormat:");
}

id objc_msgSend_isUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 isUnlocked];
}

id objc_msgSend_isWritableFileAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWritableFileAtPath:");
}

id objc_msgSend_isWritableFormat(void *a1, const char *a2, ...)
{
  return _[a1 isWritableFormat];
}

id objc_msgSend_jsonResponseWithRequest_session_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonResponseWithRequest:session:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithEncryptionUnlocker:error:");
}

id objc_msgSend_keychainUnlockWithEncryptionUnlocker_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithEncryptionUnlocker:reply:");
}

id objc_msgSend_keychainUnlockWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithError:");
}

id objc_msgSend_keychainUnlockWithIsSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainUnlockWithIsSystemKeychain:error:");
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_launchAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAndReturnError:");
}

id objc_msgSend_launchIODaemonWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchIODaemonWithError:");
}

id objc_msgSend_launchedTaskWithExecutableURL_arguments_error_terminationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_loadImportedNodesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadImportedNodesWithError:");
}

id objc_msgSend_loadPlistDictFromURL_dict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPlistDictFromURL:dict:error:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockBackendsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockBackendsWithError:");
}

id objc_msgSend_lockWritableBackendsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockWritableBackendsWithError:");
}

id objc_msgSend_logWithHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logWithHeader:");
}

id objc_msgSend_lookupLegacyKeychainWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupLegacyKeychainWithXpcHandler:error:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_makeCryptoFormatWithIsNewImage_pass_certificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeCryptoFormatWithIsNewImage:pass:certificate:error:");
}

id objc_msgSend_makeNewImageEncryptedWithPassphrase_certificate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeNewImageEncryptedWithPassphrase:certificate:error:");
}

id objc_msgSend_maxAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maxAttempts];
}

id objc_msgSend_maxRawUDIFRunSize(void *a1, const char *a2, ...)
{
  return _[a1 maxRawUDIFRunSize];
}

id objc_msgSend_maxRequests(void *a1, const char *a2, ...)
{
  return _[a1 maxRequests];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_mountedFrom(void *a1, const char *a2, ...)
{
  return _[a1 mountedFrom];
}

id objc_msgSend_mountedOnAPFS(void *a1, const char *a2, ...)
{
  return _[a1 mountedOnAPFS];
}

id objc_msgSend_mountedOnURL(void *a1, const char *a2, ...)
{
  return _[a1 mountedOnURL];
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_nbyte(void *a1, const char *a2, ...)
{
  return _[a1 nbyte];
}

id objc_msgSend_newACEndpointWithEnvironment_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newACEndpointWithEnvironment:error:");
}

id objc_msgSend_newAttachWithParams_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAttachWithParams:error:");
}

id objc_msgSend_newDIURLWithNSURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDIURLWithNSURL:");
}

id objc_msgSend_newDIURLWithPluginName_params_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDIURLWithPluginName:params:");
}

id objc_msgSend_newDawTokenWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDawTokenWithError:");
}

id objc_msgSend_newEnvWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newEnvWithDictionary:error:");
}

id objc_msgSend_newFileBackendWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFileBackendWithURL:fileOpenFlags:error:");
}

id objc_msgSend_newIteratorWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newIteratorWithOptions:error:");
}

id objc_msgSend_newSessionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSessionWithError:");
}

id objc_msgSend_newUnlockBackendXPCValidateArgsWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUnlockBackendXPCValidateArgsWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUnlockedBackendXPCWithPassphrase_certificate_isNewImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUnlockedBackendXPCWithPassphrase:certificate:isNewImage:error:");
}

id objc_msgSend_newUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUrl:");
}

id objc_msgSend_newWithCryptoFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithCryptoFormat:");
}

id objc_msgSend_newWithPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithPassphrase:error:");
}

id objc_msgSend_newWithURL_fileOpenFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithURL:fileOpenFlags:error:");
}

id objc_msgSend_newWithUnlockedBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newWithUnlockedBackendXPC:error:");
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nilWithDIException_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithDIException:description:error:");
}

id objc_msgSend_nilWithDIException_prefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithDIException:prefix:error:");
}

id objc_msgSend_nilWithEnumValue_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithEnumValue:description:error:");
}

id objc_msgSend_nilWithEnumValue_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithEnumValue:verboseInfo:error:");
}

id objc_msgSend_nilWithOSStatus_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithOSStatus:verboseInfo:error:");
}

id objc_msgSend_nilWithPOSIXCode_description_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithPOSIXCode:description:error:");
}

id objc_msgSend_nilWithPOSIXCode_verboseInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nilWithPOSIXCode:verboseInfo:error:");
}

id objc_msgSend_nodes(void *a1, const char *a2, ...)
{
  return _[a1 nodes];
}

id objc_msgSend_nonCacheNodes(void *a1, const char *a2, ...)
{
  return _[a1 nonCacheNodes];
}

id objc_msgSend_numBlocks(void *a1, const char *a2, ...)
{
  return _[a1 numBlocks];
}

id objc_msgSend_numBlocksWithSizeStr_blockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numBlocksWithSizeStr:blockSize:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_onDiskCache(void *a1, const char *a2, ...)
{
  return _[a1 onDiskCache];
}

id objc_msgSend_onErrorCleanup(void *a1, const char *a2, ...)
{
  return _[a1 onErrorCleanup];
}

id objc_msgSend_openEncryption(void *a1, const char *a2, ...)
{
  return _[a1 openEncryption];
}

id objc_msgSend_openExistingImageWithFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openExistingImageWithFlags:error:");
}

id objc_msgSend_openWritable_createNonExisting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWritable:createNonExisting:");
}

id objc_msgSend_outputFormat(void *a1, const char *a2, ...)
{
  return _[a1 outputFormat];
}

id objc_msgSend_outputParams(void *a1, const char *a2, ...)
{
  return _[a1 outputParams];
}

id objc_msgSend_outputURL(void *a1, const char *a2, ...)
{
  return _[a1 outputURL];
}

id objc_msgSend_params(void *a1, const char *a2, ...)
{
  return _[a1 params];
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return _[a1 parent];
}

id objc_msgSend_parentUUID(void *a1, const char *a2, ...)
{
  return _[a1 parentUUID];
}

id objc_msgSend_passphrase(void *a1, const char *a2, ...)
{
  return _[a1 passphrase];
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _[a1 password];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pauseInterval(void *a1, const char *a2, ...)
{
  return _[a1 pauseInterval];
}

id objc_msgSend_pipe(void *a1, const char *a2, ...)
{
  return _[a1 pipe];
}

id objc_msgSend_pluginHeader(void *a1, const char *a2, ...)
{
  return _[a1 pluginHeader];
}

id objc_msgSend_pluginName(void *a1, const char *a2, ...)
{
  return _[a1 pluginName];
}

id objc_msgSend_pluginParams(void *a1, const char *a2, ...)
{
  return _[a1 pluginParams];
}

id objc_msgSend_popObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popObjectForKey:");
}

id objc_msgSend_populateNodesDictsWithArray_pstackURL_nodesDict_isTopLevelPstack_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateNodesDictsWithArray:pstackURL:nodesDict:isTopLevelPstack:error:");
}

id objc_msgSend_postRequestWithURL_session_data_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postRequestWithURL:session:data:error:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_prepareImageWithXpcHandler_fileMode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareImageWithXpcHandler:fileMode:error:");
}

id objc_msgSend_prepareParamsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareParamsWithError:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_pstackDB(void *a1, const char *a2, ...)
{
  return _[a1 pstackDB];
}

id objc_msgSend_pstackDict(void *a1, const char *a2, ...)
{
  return _[a1 pstackDict];
}

id objc_msgSend_pstackURL(void *a1, const char *a2, ...)
{
  return _[a1 pstackURL];
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _[a1 publicKey];
}

id objc_msgSend_ramSizeStr(void *a1, const char *a2, ...)
{
  return _[a1 ramSizeStr];
}

id objc_msgSend_rawBlockSize(void *a1, const char *a2, ...)
{
  return _[a1 rawBlockSize];
}

id objc_msgSend_reOpenIfWritableWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reOpenIfWritableWithError:");
}

id objc_msgSend_readDataToEndOfFileAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataToEndOfFileAndReturnError:");
}

id objc_msgSend_readDataUpToLength_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataUpToLength:error:");
}

id objc_msgSend_readPassphraseFlags(void *a1, const char *a2, ...)
{
  return _[a1 readPassphraseFlags];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_regEntryID(void *a1, const char *a2, ...)
{
  return _[a1 regEntryID];
}

id objc_msgSend_registryEntryIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registryEntryIDWithError:");
}

id objc_msgSend_relativePath(void *a1, const char *a2, ...)
{
  return _[a1 relativePath];
}

id objc_msgSend_relativeString(void *a1, const char *a2, ...)
{
  return _[a1 relativeString];
}

id objc_msgSend_remainingAttempts(void *a1, const char *a2, ...)
{
  return _[a1 remainingAttempts];
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteProxy];
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRequest:");
}

id objc_msgSend_removeWithNode_recursive_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeWithNode:recursive:error:");
}

id objc_msgSend_replaceWithBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceWithBackendXPC:");
}

id objc_msgSend_requestSynchronousDataWithRequest_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSynchronousDataWithRequest:session:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requests(void *a1, const char *a2, ...)
{
  return _[a1 requests];
}

id objc_msgSend_requestsLock(void *a1, const char *a2, ...)
{
  return _[a1 requestsLock];
}

id objc_msgSend_requestsSem(void *a1, const char *a2, ...)
{
  return _[a1 requestsSem];
}

id objc_msgSend_requiresRootDaemon(void *a1, const char *a2, ...)
{
  return _[a1 requiresRootDaemon];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retrieveStatsWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveStatsWithParams:reply:");
}

id objc_msgSend_retrieveUserDataWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveUserDataWithParams:reply:");
}

id objc_msgSend_retrieveWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveWithError:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runMode_beforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runMode:beforeDate:");
}

id objc_msgSend_runWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithError:");
}

id objc_msgSend_saveToPlistWithDictionary_URL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToPlistWithDictionary:URL:error:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_sem(void *a1, const char *a2, ...)
{
  return _[a1 sem];
}

id objc_msgSend_semaphore(void *a1, const char *a2, ...)
{
  return _[a1 semaphore];
}

id objc_msgSend_sendHandleToClient_clientConnection_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHandleToClient:clientConnection:outError:");
}

id objc_msgSend_serviceListener(void *a1, const char *a2, ...)
{
  return _[a1 serviceListener];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_setActiveNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveNode:");
}

id objc_msgSend_setAllowStoringInKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowStoringInKeychain:");
}

id objc_msgSend_setArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArguments:");
}

id objc_msgSend_setBSDName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBSDName:");
}

id objc_msgSend_setBackend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackend:");
}

id objc_msgSend_setBackendXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackendXPC:");
}

id objc_msgSend_setBlockSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlockSize:");
}

id objc_msgSend_setCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCache:");
}

id objc_msgSend_setCacheURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheURL:");
}

id objc_msgSend_setCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificate:");
}

id objc_msgSend_setClient2IOhandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient2IOhandler:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionMode(void *a1, const char *a2, ...)
{
  return _[a1 setConnectionMode];
}

id objc_msgSend_setConversionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConversionMethod:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeserializationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeserializationError:");
}

id objc_msgSend_setDeviceHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceHandle:");
}

id objc_msgSend_setDiskImageParamsXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiskImageParamsXPC:");
}

id objc_msgSend_setEncryptionMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptionMethod:");
}

id objc_msgSend_setExecutableURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExecutableURL:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFileMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileMode:");
}

id objc_msgSend_setHTTPAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPAdditionalHeaders:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMaximumConnectionsPerHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMaximumConnectionsPerHost:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHandleRefCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandleRefCount:");
}

id objc_msgSend_setInputStatFS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputStatFS:");
}

id objc_msgSend_setInputURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputURL:");
}

id objc_msgSend_setInstanceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstanceID:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsNewDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsNewDevice:");
}

id objc_msgSend_setIsPrivileged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPrivileged:");
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:");
}

id objc_msgSend_setNumBlocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumBlocks:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOutputParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputParams:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setPassphrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassphrase:");
}

id objc_msgSend_setPassphrase_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassphrase:error:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPauseInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseInterval:");
}

id objc_msgSend_setPstackDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPstackDict:");
}

id objc_msgSend_setPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicKey:");
}

id objc_msgSend_setReadPassphraseFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadPassphraseFlags:");
}

id objc_msgSend_setRegEntryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegEntryID:");
}

id objc_msgSend_setRemainingAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingAttempts:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteProxy:");
}

id objc_msgSend_setSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSemaphore:");
}

id objc_msgSend_setShadowChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowChain:");
}

id objc_msgSend_setShouldValidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldValidate:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSizeWithDiskImage_newSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSizeWithDiskImage:newSize:");
}

id objc_msgSend_setSparseBundleBandSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSparseBundleBandSize:");
}

id objc_msgSend_setStandardOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardOutput:");
}

id objc_msgSend_setStartedOver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedOver:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setUserDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDict:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setXpcError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcError:");
}

id objc_msgSend_setupDefaults(void *a1, const char *a2, ...)
{
  return _[a1 setupDefaults];
}

id objc_msgSend_setupDriverWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDriverWithError:");
}

id objc_msgSend_setupNewConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupNewConnection:");
}

id objc_msgSend_shadowChain(void *a1, const char *a2, ...)
{
  return _[a1 shadowChain];
}

id objc_msgSend_shadowStats(void *a1, const char *a2, ...)
{
  return _[a1 shadowStats];
}

id objc_msgSend_shadowURLs(void *a1, const char *a2, ...)
{
  return _[a1 shadowURLs];
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedSession];
}

id objc_msgSend_shouldPerformInplaceSquash(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformInplaceSquash];
}

id objc_msgSend_shouldValidate(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidate];
}

id objc_msgSend_shouldValidateShadows(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidateShadows];
}

id objc_msgSend_signalCommandCompletedWithXpcError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalCommandCompletedWithXpcError:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_sparseBundleBandSize(void *a1, const char *a2, ...)
{
  return _[a1 sparseBundleBandSize];
}

id objc_msgSend_startXPClistener(void *a1, const char *a2, ...)
{
  return _[a1 startXPClistener];
}

id objc_msgSend_statWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statWithError:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_storeInKeychainWithPassphrase_forceSystemKeychain_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeInKeychainWithPassphrase:forceSystemKeychain:error:");
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _[a1 stream];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithImageFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithImageFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_supportsPstack(void *a1, const char *a2, ...)
{
  return _[a1 supportsPstack];
}

id objc_msgSend_syncRequests(void *a1, const char *a2, ...)
{
  return _[a1 syncRequests];
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemKeychainAccount(void *a1, const char *a2, ...)
{
  return _[a1 systemKeychainAccount];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_terminationStatus(void *a1, const char *a2, ...)
{
  return _[a1 terminationStatus];
}

id objc_msgSend_toDIShadowNode(void *a1, const char *a2, ...)
{
  return _[a1 toDIShadowNode];
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return _[a1 toDictionary];
}

id objc_msgSend_topDiskImageNumBlocks(void *a1, const char *a2, ...)
{
  return _[a1 topDiskImageNumBlocks];
}

id objc_msgSend_tryAttachWithParams_clientConnection_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryAttachWithParams:clientConnection:outError:");
}

id objc_msgSend_tryCreateAEABackendWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryCreateAEABackendWithBackendXPC:error:");
}

id objc_msgSend_tryCreateUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryCreateUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryCreatingCryptoHeader(void *a1, const char *a2, ...)
{
  return _[a1 tryCreatingCryptoHeader];
}

id objc_msgSend_tryResolvePstackChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryResolvePstackChain:");
}

id objc_msgSend_tryUnlockUsingKeychainCertificateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryUnlockUsingKeychainCertificateWithError:");
}

id objc_msgSend_tryUnlockUsingSaksWithHasSaksKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryUnlockUsingSaksWithHasSaksKey:error:");
}

id objc_msgSend_ucConnection(void *a1, const char *a2, ...)
{
  return _[a1 ucConnection];
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uniqueDevice(void *a1, const char *a2, ...)
{
  return _[a1 uniqueDevice];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unlockWithXpcHandler_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlockWithXpcHandler:error:");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unwrapEncryptionKeyWithWrappedKey_encapsulatedKey_privateKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unwrapEncryptionKeyWithWrappedKey:encapsulatedKey:privateKey:error:");
}

id objc_msgSend_updateBSDNameWithBlockDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBSDNameWithBlockDevice:error:");
}

id objc_msgSend_updateDiskImageParamsWithFrontend_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDiskImageParamsWithFrontend:error:");
}

id objc_msgSend_updateFileBackingInfoWithRootDeviceEntryID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFileBackingInfoWithRootDeviceEntryID:error:");
}

id objc_msgSend_updateStatFSWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStatFSWithError:");
}

id objc_msgSend_updateSystemKeychainAttrWithDict_isStoring_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSystemKeychainAttrWithDict:isStoring:error:");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_urlRequest(void *a1, const char *a2, ...)
{
  return _[a1 urlRequest];
}

id objc_msgSend_urlSession(void *a1, const char *a2, ...)
{
  return _[a1 urlSession];
}

id objc_msgSend_useFormatMappingInfo(void *a1, const char *a2, ...)
{
  return _[a1 useFormatMappingInfo];
}

id objc_msgSend_userDataParams(void *a1, const char *a2, ...)
{
  return _[a1 userDataParams];
}

id objc_msgSend_userDict(void *a1, const char *a2, ...)
{
  return _[a1 userDict];
}

id objc_msgSend_validateAndPopObjectForKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAndPopObjectForKey:className:isOptional:error:");
}

id objc_msgSend_validateConnection(void *a1, const char *a2, ...)
{
  return _[a1 validateConnection];
}

id objc_msgSend_validateDeserializationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateDeserializationWithError:");
}

id objc_msgSend_validateFileWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateFileWithURL:error:");
}

id objc_msgSend_validateFormatsWithDiskImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateFormatsWithDiskImage:error:");
}

id objc_msgSend_validateObjWithKey_className_isOptional_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateObjWithKey:className:isOptional:error:");
}

id objc_msgSend_validateSquashFormats(void *a1, const char *a2, ...)
{
  return _[a1 validateSquashFormats];
}

id objc_msgSend_validateSupportedFormatWithBackendXPC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateSupportedFormatWithBackendXPC:error:");
}

id objc_msgSend_validateWithDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateWithDictionary:error:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_verifyNodes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyNodes:error:");
}

id objc_msgSend_verifyParams(void *a1, const char *a2, ...)
{
  return _[a1 verifyParams];
}

id objc_msgSend_verifyWithParams_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyWithParams:reply:");
}

id objc_msgSend_waitForQuietWithService_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForQuietWithService:error:");
}

id objc_msgSend_waitUntilExit(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilExit];
}

id objc_msgSend_writeHexKeyToBuffer_hexKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeHexKeyToBuffer:hexKey:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_xpcEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 xpcEndpoint];
}

id objc_msgSend_xpcError(void *a1, const char *a2, ...)
{
  return _[a1 xpcError];
}

id objc_msgSend_xpcListenerEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 xpcListenerEndpoint];
}