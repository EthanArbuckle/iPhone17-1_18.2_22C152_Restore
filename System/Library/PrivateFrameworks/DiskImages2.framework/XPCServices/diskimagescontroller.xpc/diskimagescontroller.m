uint64_t sub_10000293C(const __CFAllocator *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  CFNumberRef v7;
  CFMutableDictionaryRef theDict;
  __CFDictionary *Mutable;
  uint64_t valuePtr;

  valuePtr = 0;
  Mutable = CFDictionaryCreateMutable(a1, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  theDict = CFDictionaryCreateMutable(a1, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if ((*(unsigned int (**)(void))(**(void **)a2 + 40))()) {
    v4 = 16;
  }
  else {
    v4 = 18;
  }
  HIDWORD(valuePtr) = v4;
  v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFDictionarySetValue(theDict, @"attributes", v7);
  CFDictionarySetValue(theDict, @"valid", v7);
  CFDictionarySetValue(Mutable, @"Characteristics", theDict);
  v5 = MKMediaCreate();
  sub_1000055E0((const void **)&v7);
  sub_1000055AC((const void **)&theDict);
  sub_1000055AC((const void **)&Mutable);
  return v5;
}

void sub_100002AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  sub_1000055AC((const void **)va);
  sub_1000055AC((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100002B24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001C3DE8;
  v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  return a1;
}

uint64_t sub_100002B90()
{
  return 0;
}

__CFDictionary *sub_100002BA0(uint64_t a1, __CFDictionary *cf1)
{
  Mutable = cf1;
  if (cf1)
  {
    if (CFEqual(cf1, @"Geometry"))
    {
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)a1 + 24))();
      sub_100122C78(Mutable, @"Sector Count", (unint64_t)(v5 * v4) >> 9);
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a1 + 24))();
      sub_100122C78(Mutable, @"Block Size", v6);
      sub_100122C78(Mutable, @"Maximum Transfer Sector Count", 0);
    }
    else if (CFEqual(Mutable, @"Writable"))
    {
      int v7 = (*(uint64_t (**)(void))(**(void **)a1 + 40))();
      v8 = &kCFBooleanTrue;
      if (!v7) {
        v8 = &kCFBooleanFalse;
      }
      return *v8;
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

__CFDictionary *sub_100002D34(uint64_t a1)
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    v3 = sub_100002BA0(a1, (__CFDictionary *)@"Geometry");
    CFTypeRef cf = v3;
    if (v3) {
      CFDictionarySetValue(Mutable, @"Geometry", v3);
    }
    uint64_t v4 = sub_100002BA0(a1, (__CFDictionary *)@"Writable");
    uint64_t v6 = v4;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v4 = v6;
    }
    uint64_t v6 = 0;
    CFTypeRef cf = v4;
    sub_100005614((const void **)&v6);
    if (cf) {
      CFDictionarySetValue(Mutable, @"Writable", cf);
    }
    sub_100005614(&cf);
  }
  return Mutable;
}

void sub_100002E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100002E34()
{
  return 102;
}

CFStringRef sub_100002E3C()
{
  return @"New disk image";
}

uint64_t sub_100002E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_100002EA0(a1, a2, a3, a4);
  if (a5)
  {
    if (!result) {
      *a5 = a3;
    }
  }
  return result;
}

uint64_t sub_100002EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 << 9;
  uint64_t v7 = a2 << 9;
  v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v11 = a4;
  v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  char v16 = 0;
  sub_100042770(&v11, v23);
  sub_1000414AC((uint64_t)v24, (uint64_t)v20);
  sub_1000411FC((uint64_t)v24, (uint64_t)v17);
  uint64_t v9 = sub_100003758(*(void *)(a1 + 8));
  if (v19) {
    sub_100004944(v19);
  }
  if (v18) {
    sub_100004944(v18);
  }
  if (v22) {
    sub_100004944(v22);
  }
  if (v21) {
    sub_100004944(v21);
  }
  sub_1000049B8(v23);
  if (v12) {
    sub_100004944(v12);
  }
  if (v9 < 0) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_100002FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a11) {
    sub_100004944(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000300C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_100003040(a1, a2, a3, a4);
  if (a5)
  {
    if (!result) {
      *a5 = a3;
    }
  }
  return result;
}

uint64_t sub_100003040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 << 9;
  uint64_t v7 = a2 << 9;
  v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v11 = a4;
  v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  char v16 = 0;
  sub_100042770(&v11, v23);
  sub_1000414AC((uint64_t)v24, (uint64_t)v20);
  sub_1000411FC((uint64_t)v24, (uint64_t)v17);
  uint64_t v9 = sub_100004AC0(*(void **)(a1 + 8));
  if (v19) {
    sub_100004944(v19);
  }
  if (v18) {
    sub_100004944(v18);
  }
  if (v22) {
    sub_100004944(v22);
  }
  if (v21) {
    sub_100004944(v21);
  }
  sub_1000049B8(v23);
  if (v12) {
    sub_100004944(v12);
  }
  if (v9 < 0) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_100003164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a11) {
    sub_100004944(a11);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_1000031AC(void *a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(*(void *)*a1 + 24))(*a1) >> 9;
}

unint64_t sub_1000031EC(uint64_t a1, CFNumberRef number, const char *a3)
{
  if (!number)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)valuePtr);
    sub_1000039A0(valuePtr, (uint64_t)"Couldn't parse ", 15);
    size_t v8 = strlen(a3);
    sub_1000039A0(valuePtr, (uint64_t)a3, v8);
    sub_10000550C((uint64_t)exception, (uint64_t)valuePtr, 0x16u);
  }
  valuePtr[0] = 0;
  if (!CFNumberGetValue(number, kCFNumberLongLongType, valuePtr))
  {
    uint64_t v9 = __cxa_allocate_exception(0x40uLL);
    v10 = (void *)sub_100002B24((uint64_t)v9, (uint64_t)"Failed converting CFNumber to longlong", 0x16u);
  }
  unint64_t v5 = valuePtr[0];
  if (v5 % ((unint64_t)(*(uint64_t (**)(void))(**(void **)a1 + 24))() >> 9))
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)valuePtr);
    size_t v12 = strlen(a3);
    sub_1000039A0(valuePtr, (uint64_t)a3, v12);
    sub_1000039A0(valuePtr, (uint64_t)" is not aligned to block size", 29);
    sub_10000550C((uint64_t)v11, (uint64_t)valuePtr, 0x16u);
  }
  return v5 / ((unint64_t)(*(uint64_t (**)(void))(**(void **)a1 + 24))() >> 9);
}

void sub_1000033C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100003404(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  uint64_t v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100003574(_Unwind_Exception *a1)
{
}

uint64_t sub_10000359C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_1000036A0(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1001C3DE8;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_100003708(void *a1)
{
}

uint64_t sub_10000371C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_100004944(v3);
  }
  return a1;
}

uint64_t sub_100003758(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 8) + 8) & 1) == 0) {
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v2 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 24;
    int v3 = 2;
    sub_100003838(v4, &v2);
    sub_1000039A0(v5, (uint64_t)"Disk image is terminated, skipping read", 39);
    std::ostream::~ostream();
    sub_100003EB0((uint64_t)v4);
    std::ios::~ios();
  }
  return -6;
}

void sub_100003824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000395C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100003838(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100003E20((uint64_t)a1, a2);
  *a1 = off_10019D410;
  a1[45] = &off_10019D510;
  a1[46] = &off_10019D538;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D410;
  a1[45] = off_10019D498;
  a1[46] = off_10019D4C0;
  return a1;
}

void sub_100003938(_Unwind_Exception *a1)
{
  sub_100003EB0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10000395C(uint64_t a1)
{
  return a1;
}

void *sub_1000039A0(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100003B44(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_100003ADC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100003ABCLL);
}

void sub_100003B30(_Unwind_Exception *a1)
{
}

uint64_t sub_100003B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_100003CCC(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_100003CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100003CCC(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003D78();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_100003D78()
{
}

void sub_100003D90(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100003DEC(exception, a1);
}

void sub_100003DD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100003DEC(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_100003E20(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019D5A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100003E9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100003EB0(uint64_t a1)
{
  *(void *)a1 = off_10019D5A8;
  sub_1000042B8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100003FEC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100003EB0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100004054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10000408C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000040F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100003EB0(v1);
  return std::ios::~ios();
}

void sub_100004140(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100003EB0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000041A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100003EB0(v1);
  return std::ios::~ios();
}

void sub_100004204(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100003EB0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100004280(uint64_t a1)
{
  sub_100003EB0(a1);
  operator delete();
}

uint64_t sub_1000042B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10000443C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100004414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10000443C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 159;
    __int16 v22 = 2082;
    v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 159;
      __int16 v22 = 2082;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100004624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000046C4(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003D78();
  }
  int v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t sub_1000046C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_100004710(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_10000477C(a1);
}

void sub_10000477C(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  unsigned __int8 v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *sub_100004890(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003D78();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_100004944(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *sub_1000049B8(void *a1)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)a1[87];
  if (v2) {
    sub_100004944(v2);
  }
  char v3 = (std::__shared_weak_count *)a1[73];
  if (v3) {
    sub_100004944(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[67];
  if (v4) {
    sub_100004944(v4);
  }
  size_t v5 = (std::__shared_weak_count *)a1[53];
  if (v5) {
    sub_100004944(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[46];
  if (v6) {
    sub_100004944(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[35];
  if (v7) {
    sub_100004944(v7);
  }
  if (a1[20])
  {
    uint64_t v8 = (void *)a1[18];
    if (a1 + 21 != v8) {
      operator delete(v8);
    }
  }
  return sub_100004A50(a1);
}

void *sub_100004A50(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    char v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        sub_100004944(*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_100004AC0(void *a1)
{
  if ((*(unsigned char *)(a1[1] + 8) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 8))(a1);
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v2 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 25;
    int v3 = 2;
    sub_100004BA0(v4, &v2);
    sub_1000039A0(v5, (uint64_t)"Disk image is terminated, skipping write", 40);
    std::ostream::~ostream();
    sub_100004D98((uint64_t)v4);
    std::ios::~ios();
  }
  return -6;
}

void sub_100004B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100004CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100004BA0(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100004D08((uint64_t)a1, a2);
  *a1 = off_10019D630;
  a1[45] = &off_10019D730;
  a1[46] = &off_10019D758;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D630;
  a1[45] = off_10019D6B8;
  a1[46] = off_10019D6E0;
  return a1;
}

void sub_100004CA0(_Unwind_Exception *a1)
{
  sub_100004D98(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100004CC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100004D08(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019D7C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100004D84(_Unwind_Exception *a1)
{
}

uint64_t sub_100004D98(uint64_t a1)
{
  *(void *)a1 = off_10019D7C8;
  sub_1000051A0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100004ED4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100004D98(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100004F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100004F74(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100004FDC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100004D98(v1);
  return std::ios::~ios();
}

void sub_100005028(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100004D98(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000508C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100004D98(v1);
  return std::ios::~ios();
}

void sub_1000050EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100004D98(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100005168(uint64_t a1)
{
  sub_100004D98(a1);
  operator delete();
}

uint64_t sub_1000051A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100005324((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000052FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100005324(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 166;
    __int16 v22 = 2082;
    v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 166;
      __int16 v22 = 2082;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10000550C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001C3DE8;
  char v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  sub_100004624(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_100005598(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_1000055AC(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_1000055E0(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100005614(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100005648@<X0>(CFDictionaryRef theDict@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  Value = CFDictionaryGetValue(theDict, @"Data Runs");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    v30 = std::generic_category();
    exception[1] = 22;
    exception[2] = v30;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Couldn't get runs array from Media Kit";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    v31 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    v32 = sub_100009370(v31);
  }
  uint64_t result = CFArrayGetCount((CFArrayRef)Value);
  uint64_t v9 = result;
  if (result >= 1)
  {
    CFIndex v10 = 0;
    unint64_t v11 = 0;
    char v12 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v10);
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (ValueAtIndex && CFGetTypeID(ValueAtIndex) != v14)
      {
        v23 = __cxa_allocate_exception(0x40uLL);
        CFGetTypeID(ValueAtIndex);
        v24 = sub_100009370(v23);
      }
      uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Origin");
      CFTypeID v16 = CFNumberGetTypeID();
      if (v15 && CFGetTypeID(v15) != v16)
      {
        v25 = __cxa_allocate_exception(0x40uLL);
        CFGetTypeID(v15);
        v26 = sub_100009370(v25);
      }
      unint64_t v17 = sub_1000031EC(a2, (CFNumberRef)v15, "run offset");
      __int16 v18 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Length");
      CFTypeID v19 = CFNumberGetTypeID();
      if (v18 && CFGetTypeID(v18) != v19)
      {
        v27 = __cxa_allocate_exception(0x40uLL);
        CFGetTypeID(v18);
        v28 = sub_100009370(v27);
      }
      unint64_t v20 = sub_1000031EC(a2, (CFNumberRef)v18, "run length");
      unint64_t v21 = v17 + a3;
      if ((v12 & 1) == 0)
      {
        unint64_t v34 = v11;
        unint64_t v35 = v21;
        char v36 = 2;
        uint64_t v22 = qword_1001D3B40;
        if (v21 > v11) {
          uint64_t v22 = v21 - v11;
        }
        if ((unint64_t)(v22 - 1) <= 0x7FE) {
          sub_10000C844((uint64_t **)a4, (uint64_t)&v34);
        }
      }
      unint64_t v11 = v20 + v21;
      unint64_t v34 = v21;
      unint64_t v35 = v20 + v21;
      char v36 = 2;
      uint64_t result = (uint64_t)sub_10000C844((uint64_t **)a4, (uint64_t)&v34);
      char v12 = 0;
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

void sub_10000599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_10000953C(a9, *(void **)(a9 + 8));
  _Unwind_Resume(a1);
}

const void **sub_1000059FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[1] = 0;
  v15[0] = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue((CFMutableDictionaryRef)v15[0], @"Record On Bits", kCFBooleanTrue);
  sub_1000031AC(a1);
  sub_1000031AC(a1);
  uint64_t v14 = MKMediaCreateWithSubRange();
  CFDictionaryRef theDict = (CFDictionaryRef)MKCFCreateFSInfo();
  if (sub_1000D8524())
  {
    int v6 = *__error();
    if (sub_1000D850C())
    {
      uint64_t v12 = 0;
      uint64_t v7 = sub_1000D848C();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 30;
      __int16 v17 = 2080;
      __int16 v18 = "MediaInfo::process_mapped_data(uint64_t, uint64_t)";
      __int16 v19 = 2114;
      CFDictionaryRef v20 = theDict;
      long long v8 = (const char *)_os_log_send_and_compose_impl();
      if (v8)
      {
        uint64_t v9 = (char *)v8;
        fprintf(__stderrp, "%s\n", v8);
        free(v9);
      }
    }
    else
    {
      CFIndex v10 = sub_1000D848C();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 30;
        __int16 v17 = 2080;
        __int16 v18 = "MediaInfo::process_mapped_data(uint64_t, uint64_t)";
        __int16 v19 = 2114;
        CFDictionaryRef v20 = theDict;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%.*s: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v6;
  }
  sub_100005648(theDict, (uint64_t)a1, a2, a3);
  sub_10000D758((const void **)&theDict);
  sub_10000C810((const void **)&v14);
  return sub_1000055AC(v15);
}

void sub_100005E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, const void *a16, uint64_t a17, std::locale a18, char a19)
{
}

void *sub_100005EC8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000D78C((uint64_t)a1, a2);
  *a1 = off_10019D8E8;
  a1[45] = &off_10019D9E8;
  a1[46] = &off_10019DA10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019D8E8;
  a1[45] = off_10019D970;
  a1[46] = off_10019D998;
  return a1;
}

void sub_100005FC8(_Unwind_Exception *a1)
{
  sub_100009820(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100005FEC(uint64_t a1)
{
  return a1;
}

void sub_100006030(uint64_t a1, CFDictionaryRef theDict)
{
  Value = CFDictionaryGetValue(theDict, @"Offset");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) != TypeID)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
  }
  else
  {
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Size");
    CFTypeID v7 = CFNumberGetTypeID();
    if (!v6 || CFGetTypeID(v6) == v7)
    {
      sub_1000031EC(a1, v6, "partition size");
      CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"Name");
      CFTypeID v9 = CFStringGetTypeID();
      if (v8)
      {
        if (CFGetTypeID(v8) != v9)
        {
LABEL_17:
          __int16 v17 = __cxa_allocate_exception(0x40uLL);
          CFGetTypeID(v8);
          uint64_t v12 = v17;
          goto LABEL_18;
        }
      }
      else
      {
        CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"Type");
        CFTypeID v10 = CFStringGetTypeID();
        if (!v8)
        {
          uint64_t v13 = __cxa_allocate_exception(0x40uLL);
          uint64_t v14 = (void *)sub_100002B24((uint64_t)v13, (uint64_t)"Couldn't parse partition name or type", 0x16u);
          CFTypeID v16 = (void (*)(void *))sub_100002B8C;
          goto LABEL_19;
        }
        if (CFGetTypeID(v8) != v10) {
          goto LABEL_17;
        }
      }
      if (Value) {
        sub_1000031EC(a1, (CFNumberRef)Value, "partition offset");
      }
      sub_10012299C(v8);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v6);
  }
  uint64_t v12 = exception;
LABEL_18:
  uint64_t v14 = sub_100009368(v12);
  CFTypeID v16 = (void (*)(void *))sub_10000936C;
LABEL_19:
  __cxa_throw(v14, v15, v16);
}

void sub_10000646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_free_exception(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_10000650C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_100006540(uint64_t **a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  int v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    int v5 = (uint64_t *)(a1 + 1);
    do
    {
      int v5 = sub_10000E338(a1, v5, (uint64_t)(v4 + 4));
      CFNumberRef v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          CFTypeID v7 = v6;
          CFNumberRef v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          CFTypeID v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          int v4 = v7;
        }
        while (!v8);
      }
      int v4 = v7;
    }
    while (v7 != v3);
  }
  return a1;
}

void sub_1000065C8(uint64_t a1, CFDictionaryRef theDict, unint64_t *a3, uint64_t a4, unsigned __int16 *a5)
{
  Value = CFDictionaryGetValue(theDict, @"Offset");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) != TypeID) {
    goto LABEL_56;
  }
  LOBYTE(v60[0]) = 0;
  char v63 = 0;
  unint64_t v12 = sub_1000031EC(a1, (CFNumberRef)Value, "section offset");
  Value = CFDictionaryGetValue(theDict, @"Media Block Size");
  CFTypeID v13 = CFNumberGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v35 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Couldn't parse media block size", 0x16u);
    v37 = (void (*)(void *))sub_100002B8C;
    goto LABEL_57;
  }
  if (CFGetTypeID(Value) != v13)
  {
LABEL_56:
    v48 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    unint64_t v35 = sub_100009368(v48);
    v37 = (void (*)(void *))sub_10000936C;
LABEL_57:
    __cxa_throw(v35, v36, v37);
  }
  unint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberLongType, &valuePtr))
  {
    v38 = __cxa_allocate_exception(0x40uLL);
    v39 = (void *)sub_100002B24((uint64_t)v38, (uint64_t)"Failed converting CFNumber to long", 0x16u);
  }
  unint64_t v14 = valuePtr;
  if (v14 % (*(uint64_t (**)(void))(**(void **)a1 + 24))())
  {
    v40 = __cxa_allocate_exception(0x40uLL);
    v41 = (void *)sub_100002B24((uint64_t)v40, (uint64_t)"Invalid media block size", 0x16u);
  }
  uint64_t v15 = CFDictionaryGetValue(theDict, @"Section Block Count");
  CFTypeID v16 = CFNumberGetTypeID();
  if (v15 && CFGetTypeID(v15) != v16)
  {
    v49 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v15);
    v50 = sub_100009368(v49);
  }
  unint64_t v17 = sub_1000031EC(a1, (CFNumberRef)v15, "media block count");
  uint64_t v18 = v17;
  unint64_t v19 = *(void *)(a1 + 80);
  if (v19 <= v17) {
    unint64_t v19 = v17;
  }
  *(void *)(a1 + 80) = v19;
  if ((v17 & 0x8000000000000000) != 0)
  {
    v42 = __cxa_allocate_exception(0x40uLL);
    v43 = (void *)sub_100002B24((uint64_t)v42, (uint64_t)"Invalid negative media block count", 0x16u);
  }
  uint64_t v20 = *((unsigned __int8 *)a5 + 23);
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *((void *)a5 + 1);
  }
  if (v20 == 3
    && (v21 >= 0 ? (uint64_t v22 = a5) : (uint64_t v22 = *(unsigned __int16 **)a5),
        (int v23 = *v22, v24 = *((unsigned __int8 *)v22 + 2), v23 == 20551) ? (v25 = v24 == 84) : (v25 = 0),
        v25))
  {
    v60[0] = *a3;
    v60[1] = v12;
    char v61 = 2;
    unint64_t v62 = v17;
    char v63 = 1;
    sub_100006CCC((uint64_t)v60, (uint64_t **)(a1 + 32), (uint64_t **)(a1 + 56));
  }
  else
  {
    unint64_t v26 = *a3;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_10000A2C4(v51, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v51 = *(_OWORD *)a4;
      uint64_t v52 = *(void *)(a4 + 16);
    }
    int v53 = 1;
    v64 = &_mh_execute_header;
    int v65 = 2;
    sub_100009D04(1, &v64, 3);
    unint64_t valuePtr = v26;
    unint64_t v55 = v12;
    char v56 = 2;
    *(_OWORD *)__p = *(_OWORD *)v51;
    uint64_t v58 = v52;
    v51[0] = 0;
    v51[1] = 0;
    uint64_t v52 = 0;
    int v59 = v53;
    sub_10000D86C((uint64_t **)(a1 + 32), (uint64_t)&valuePtr);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    unint64_t valuePtr = *a3;
    unint64_t v55 = v12;
    char v56 = 2;
    sub_10000EABC((uint64_t **)(a1 + 56), (uint64_t)&valuePtr);
  }
  *a3 = v12;
  v27 = CFDictionaryGetValue(theDict, @"Partitions");
  CFTypeID v28 = CFArrayGetTypeID();
  if (!v27)
  {
    v44 = __cxa_allocate_exception(0x40uLL);
    v45 = (void *)sub_100002B24((uint64_t)v44, (uint64_t)"Couldn't find partitions key", 0x16u);
  }
  if (CFGetTypeID(v27) != v28)
  {
    v46 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v27);
    v47 = sub_100009368(v46);
  }
  if (CFArrayGetCount((CFArrayRef)v27) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v27, 0);
    CFTypeID v30 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) != v30)
      {
        v32 = __cxa_allocate_exception(0x40uLL);
        CFGetTypeID(ValueAtIndex);
        v33 = sub_100009368(v32);
      }
    }
    sub_100006030(a1, (CFDictionaryRef)ValueAtIndex);
  }
  if (v63) {
    uint64_t v18 = v18 - sub_10000A364(v60) + 1;
  }
  unint64_t v31 = *a3;
  if (*a3 != v18)
  {
    sub_100004890(v51, "Apple_Free");
    int v53 = 0;
    v64 = &_mh_execute_header;
    int v65 = 2;
    sub_100009D04(0, &v64, 3);
    unint64_t valuePtr = v31;
    unint64_t v55 = v18;
    char v56 = 2;
    *(_OWORD *)__p = *(_OWORD *)v51;
    uint64_t v58 = v52;
    v51[0] = 0;
    v51[1] = 0;
    uint64_t v52 = 0;
    int v59 = v53;
    sub_10000D86C((uint64_t **)(a1 + 32), (uint64_t)&valuePtr);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    *a3 = v18;
  }
  if (v63)
  {
    sub_100006F98(v60, (uint64_t **)(a1 + 32), (uint64_t **)(a1 + 56));
    *a3 = sub_10000A364(v60) + *a3 - 1;
  }
}

void sub_100006C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t **sub_100006CCC(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v5 = *(void *)a1;
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    ++v5;
  }
  *(void *)&long long v19 = v5;
  *((void *)&v19 + 1) = v5 + 1;
  LOBYTE(v20) = 2;
  *(void *)&long long v17 = v5 + 1;
  *((void *)&v17 + 1) = v5 + 2;
  LOBYTE(v18) = 2;
  *(void *)&long long v15 = v5 + 2;
  *((void *)&v15 + 1) = sub_10000A364((unint64_t *)a1);
  LOBYTE(v16) = 2;
  sub_100004890(v7, "MBR");
  int v9 = 1;
  int v21 = &_mh_execute_header;
  int v22 = 2;
  sub_100009D04(1, &v21, 3);
  long long v10 = v19;
  uint64_t v11 = v20;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  int v14 = v9;
  sub_10000D86C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  sub_10000EABC(a3, (uint64_t)&v19);
  sub_100004890(v7, "Primary GPT Header");
  int v9 = 1;
  int v21 = &_mh_execute_header;
  int v22 = 2;
  sub_100009D04(1, &v21, 3);
  long long v10 = v17;
  uint64_t v11 = v18;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  int v14 = v9;
  sub_10000D86C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  sub_10000EABC(a3, (uint64_t)&v17);
  sub_100004890(v7, "Primary GPT Table");
  int v9 = 1;
  int v21 = &_mh_execute_header;
  int v22 = 2;
  sub_100009D04(1, &v21, 3);
  long long v10 = v15;
  uint64_t v11 = v16;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  int v14 = v9;
  sub_10000D86C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return sub_10000EABC(a3, (uint64_t)&v15);
}

void sub_100006F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100006F98(unint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v6 = a1[3];
  *(void *)&long long v20 = v6 - 1;
  *((void *)&v20 + 1) = v6;
  LOBYTE(v21) = 2;
  uint64_t v7 = sub_10000A364(a1);
  uint64_t v8 = a1[3] - 1;
  *(void *)&long long v18 = v6 - v7 + 1;
  *((void *)&v18 + 1) = v8;
  LOBYTE(v19) = 2;
  sub_100004890(v10, "Backup GPT Header");
  int v12 = 1;
  int v22 = &_mh_execute_header;
  int v23 = 2;
  sub_100009D04(1, &v22, 3);
  long long v13 = v20;
  uint64_t v14 = v21;
  *(_OWORD *)__p = *(_OWORD *)v10;
  uint64_t v16 = v11;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  int v17 = v12;
  sub_10000D86C(a2, (uint64_t)&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  sub_10000EABC(a3, (uint64_t)&v20);
  sub_100004890(v10, "Backup GPT Table");
  int v12 = 1;
  int v22 = &_mh_execute_header;
  int v23 = 2;
  sub_100009D04(1, &v22, 3);
  long long v13 = v18;
  uint64_t v14 = v19;
  *(_OWORD *)__p = *(_OWORD *)v10;
  uint64_t v16 = v11;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  int v17 = v12;
  sub_10000D86C(a2, (uint64_t)&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return sub_10000EABC(a3, (uint64_t)&v18);
}

void sub_100007178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000071BC(int a1, CFDictionaryRef theDict)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Name");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      long long v10 = exception;
LABEL_11:
      uint64_t v11 = sub_100009368(v10);
      long long v13 = (void (*)(void *))sub_10000936C;
LABEL_12:
      __cxa_throw(v11, v12, v13);
    }
    unint64_t v5 = CFDictionaryGetValue(theDict, @"ID");
    CFTypeID v6 = CFStringGetTypeID();
    if (v5)
    {
      if (CFGetTypeID(v5) == v6) {
        sub_10012299C(Value);
      }
      uint64_t v14 = __cxa_allocate_exception(0x40uLL);
      CFGetTypeID(v5);
      long long v10 = v14;
      goto LABEL_11;
    }
    uint64_t v7 = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = "Couldn't parse scheme id";
  }
  else
  {
    uint64_t v7 = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = "Couldn't parse scheme name";
  }
  uint64_t v11 = (void *)sub_100002B24((uint64_t)v7, (uint64_t)v8, 0x16u);
  long long v13 = (void (*)(void *))sub_100002B8C;
  goto LABEL_12;
}

void sub_1000074D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_100007538(uint64_t a1, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, @"Block Size");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v11 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Couldn't parse media block size in whole disk mode", 0x16u);
    long long v13 = (void (*)(void *))sub_100002B8C;
    goto LABEL_15;
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    uint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    uint64_t v11 = sub_100009368(v14);
    long long v13 = (void (*)(void *))sub_10000936C;
LABEL_15:
    __cxa_throw(v11, v12, v13);
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberLongType, &valuePtr))
  {
    long long v15 = __cxa_allocate_exception(0x40uLL);
    uint64_t v16 = (void *)sub_100002B24((uint64_t)v15, (uint64_t)"Failed converting CFNumber to long", 0x16u);
  }
  uint64_t v6 = valuePtr;
  if (v6 != (*(uint64_t (**)(void))(**(void **)a1 + 24))())
  {
    int v17 = __cxa_allocate_exception(0x40uLL);
    long long v18 = (void *)sub_100002B24((uint64_t)v17, (uint64_t)"MediaKit returned unsupported block size", 0x2Du);
  }
  uint64_t v7 = CFDictionaryGetValue(theDict, @"Sector Count");
  CFTypeID v8 = CFNumberGetTypeID();
  if (v7 && CFGetTypeID(v7) != v8)
  {
    uint64_t v21 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    int v22 = sub_100009368(v21);
  }
  int v9 = (void *)sub_1000031EC(a1, (CFNumberRef)v7, "media block count");
  if (!v9)
  {
    uint64_t v19 = __cxa_allocate_exception(0x40uLL);
    long long v20 = (void *)sub_100002B24((uint64_t)v19, (uint64_t)"Can't parse disk image with MediaKit. No partition scheme or partition scheme not supported by MediaKit", 0x16u);
  }
  sub_100004890(v23, "Whole_Disk");
  int v25 = 2;
  v32 = &_mh_execute_header;
  int v33 = 2;
  sub_100009D04(2, &v32, 3);
  uint64_t valuePtr = 0;
  v27 = v9;
  char v28 = 2;
  *(_OWORD *)__p = *(_OWORD *)v23;
  uint64_t v30 = v24;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  int v31 = v25;
  sub_10000D86C((uint64_t **)(a1 + 32), (uint64_t)&valuePtr);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  *(void *)(a1 + 80) = v9;
  sub_1000059FC((void *)a1, 0, (uint64_t)&valuePtr);
  sub_100006540((uint64_t **)(a1 + 56), &valuePtr);
  sub_10000953C((uint64_t)&valuePtr, v27);
}

void sub_100007878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void sub_1000078E4()
{
}

void sub_1000081B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20,const void *a21,uint64_t a22,uint64_t a23,std::locale a24,char a25)
{
  sub_1000055AC(&a20);
  sub_1000055AC(&a21);
  sub_10000953C(a13, *v27);
  sub_10000C460(v26, *a15);
  sub_10000C810(v28);
  sub_100008888(v25);
  _Unwind_Resume(a1);
}

void *sub_1000082E8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000EB80((uint64_t)a1, a2);
  *a1 = off_10019DBB0;
  a1[45] = &off_10019DCB0;
  a1[46] = &off_10019DCD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DBB0;
  a1[45] = off_10019DC38;
  a1[46] = off_10019DC60;
  return a1;
}

void sub_1000083E8(_Unwind_Exception *a1)
{
  sub_10000A920(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10000840C(uint64_t a1)
{
  return a1;
}

void *sub_100008450(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000EC10((uint64_t)a1, a2);
  *a1 = off_10019DDD0;
  a1[45] = &off_10019DED0;
  a1[46] = &off_10019DEF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DDD0;
  a1[45] = off_10019DE58;
  a1[46] = off_10019DE80;
  return a1;
}

void sub_100008550(_Unwind_Exception *a1)
{
  sub_10000B094(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100008574(uint64_t a1)
{
  return a1;
}

void *sub_1000085B8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000ECA0((uint64_t)a1, a2);
  *a1 = off_10019DFF0;
  a1[45] = &off_10019E0F0;
  a1[46] = &off_10019E118;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019DFF0;
  a1[45] = off_10019E078;
  a1[46] = off_10019E0A0;
  return a1;
}

void sub_1000086B8(_Unwind_Exception *a1)
{
  sub_10000B808(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000086DC(uint64_t a1)
{
  return a1;
}

void *sub_100008720(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000EDF8((uint64_t)a1, a2);
  *a1 = off_10019E210;
  a1[45] = &off_10019E310;
  a1[46] = &off_10019E338;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E210;
  a1[45] = off_10019E298;
  a1[46] = off_10019E2C0;
  return a1;
}

void sub_100008820(_Unwind_Exception *a1)
{
  sub_10000BF7C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100008844(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100008888(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  return a1;
}

void *sub_10000890C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)result[7];
  if (v2 == (void *)result[8])
  {
    int v9 = 0;
    uint64_t v10 = result[3];
    *(void *)a2 = result[5];
    *(void *)(a2 + 8) = v10;
LABEL_11:
    *(unsigned char *)(a2 + 16) = 2;
    goto LABEL_12;
  }
  uint64_t v3 = result[5];
  int v4 = v2 + 4;
  uint64_t v5 = v2[4];
  if (v3 != v5)
  {
    int v9 = 0;
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v5;
    goto LABEL_11;
  }
  uint64_t v6 = (void *)v2[1];
  if (v6)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)*v6;
    }
    while (v6);
  }
  else
  {
    do
    {
      uint64_t v7 = (void *)v2[2];
      BOOL v8 = *v7 == (void)v2;
      uint64_t v2 = v7;
    }
    while (!v8);
  }
  result[7] = v7;
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(void *)(a2 + 16) = v4[2];
  int v9 = 1;
LABEL_12:
  *(_DWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_1000089A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 136))(v6);
  uint64_t v13 = v6;
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = v7;
  LOBYTE(v15) = 2;
  uint64_t v16 = v8;
  uint64_t v17 = v8;
  int v18 = a2;
  v19[0] = off_10019E428;
  v19[3] = v19;
  v12[0] = off_10019E500;
  v12[1] = v5;
  v12[3] = v12;
  long long v10 = v14;
  uint64_t v11 = v15;
  sub_1000B00E4((long long *)&v13, (uint64_t)v12, &v10, a3);
  sub_10000C78C(v12);
  sub_10000C78C(v19);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_100008B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10000C78C((uint64_t *)va);
  sub_100008B48((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100008B48(uint64_t a1)
{
  sub_10000C78C((void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

void *sub_100008BA4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_1000039A0(a1, (uint64_t)"name: ", 6);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = sub_1000039A0(v3, v5, v6);
  uint64_t v8 = sub_1000039A0(v7, (uint64_t)" ", 1);
  uint64_t v9 = sub_1000039A0(v8, (uint64_t)" status: ", 9);
  int v11 = *(_DWORD *)(a2 + 24);
  return sub_100008C28(v9, &v11);
}

void *sub_100008C28(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_10019E4A8[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 18)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &dword_10019E4A8[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

void sub_100008C6C(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))sub_10000EFEC);
  }
}

uint64_t sub_100008CC8(uint64_t a1, unint64_t a2, int a3, int a4)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a4;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = std::system_category();
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (a3 == 2)
  {
    uint64_t v9 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 32))(a2);
    uint64_t v10 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 136))(a2);
    long long v18 = a2;
    uint64_t v19 = v9;
    char v20 = 2;
    uint64_t v21 = v10;
    uint64_t v22 = v10;
    int v23 = a4;
    v24[0] = off_10019E428;
    int v25 = v24;
    sub_100009004(a1 + 120, (uint64_t)&v18);
    goto LABEL_17;
  }
  sub_100008C6C(a1);
  char v11 = *(unsigned char *)(a1 + 113);
  if (v11)
  {
    *(void *)&long long v18 = a1 + 24;
    char v11 = 1;
  }
  else
  {
    long long v18 = *(_OWORD *)(a1 + 24);
  }
  LOBYTE(v19) = v11;
  uint64_t v12 = sub_10000907C(&v18, (uint64_t)"Could not get media info");
  if ((*(unsigned int (**)(unint64_t))(*(void *)a2 + 88))(a2))
  {
    if (a3 == 1) {
      BOOL v13 = sub_10000914C(v12);
    }
    else {
      BOOL v13 = sub_10000914C(v12) || *(unsigned char *)(v12 + 88) != 0;
    }
    *(unsigned char *)(a1 + 8) = v13;
    if (!v13) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(a1 + 8))
  {
LABEL_15:
    sub_1000089A0(v12, a4, (uint64_t)&v18);
    goto LABEL_16;
  }
  uint64_t v14 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 136))(a2);
  long long v18 = a2;
  uint64_t v19 = v14;
  char v20 = 2;
  uint64_t v21 = v15;
  uint64_t v22 = v15;
  int v23 = a4;
  v24[0] = off_10019E428;
  int v25 = v24;
LABEL_16:
  sub_100009004(a1 + 120, (uint64_t)&v18);
LABEL_17:
  sub_10000C78C(v24);
  uint64_t v16 = v21;
  uint64_t v21 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
  }
  return a1;
}

void sub_100008FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100008B48((uint64_t)&a9);
  sub_10000C670(v11);
  if (*(unsigned char *)(v9 + 113)) {
    sub_10000C6D4(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100009004(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_10010B8F8(a1, a2);
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a1 + 32) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    sub_10000C5F0(a1 + 56, a2 + 56);
    *(unsigned char *)(a1 + 88) = 1;
  }
  return a1;
}

uint64_t sub_10000907C(unsigned char *a1, uint64_t a2)
{
  if (!a1[16])
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    long long v6 = *(_OWORD *)a1;
    *(void *)exception = &off_1001C3DE8;
    *(_OWORD *)(exception + 8) = v6;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = a2;
  }
  return *(void *)a1;
}

void sub_100009100(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100008C6C(a1);
  uint64_t v4 = (_OWORD *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 113);
  if (v5)
  {
    *(void *)a2 = v4;
    char v5 = 1;
  }
  else
  {
    *(_OWORD *)a2 = *v4;
  }
  *(unsigned char *)(a2 + 16) = v5;
}

BOOL sub_10000914C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 == a1 + 40) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(v1 + 79);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(v1 + 64);
  }
  if (v2 != 10) {
    return 0;
  }
  long long v6 = *(uint64_t **)(v1 + 56);
  uint64_t v4 = (uint64_t *)(v1 + 56);
  char v5 = v6;
  if (v3 < 0) {
    uint64_t v4 = v5;
  }
  uint64_t v7 = *v4;
  int v8 = *((unsigned __int16 *)v4 + 4);
  return v7 == 0x69445F656C6F6857 && v8 == 27507;
}

uint64_t sub_1000091B8@<X0>(unint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_100008CC8((uint64_t)v6, a1, a2, a3);
  sub_10000F1DC(a4, (uint64_t)v6);
  *(unsigned char *)(a4 + 216) = 1;
  uint64_t result = sub_10000C670((uint64_t)&v8);
  if (v7[89]) {
    return sub_10000C6D4((uint64_t)v7);
  }
  return result;
}

void sub_100009260(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_10000C670((uint64_t)va1);
  if (BYTE1(v20)) {
    sub_10000C6D4((uint64_t)va);
  }
  if (a2 == 1)
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)((char *)__cxa_begin_catch(a1) + 8);
    *(unsigned char *)(v5 + 216) = 0;
    __cxa_end_catch();
    JUMPOUT(0x100009230);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000092C4(uint64_t a1)
{
  return a1 + 120;
}

void sub_1000092CC()
{
}

void sub_100009354()
{
}

void *sub_100009370(void *a1)
{
  sub_100003404((uint64_t)v3);
  sub_1000039A0(v3, (uint64_t)"CoreFoundation type mismatch: ", 30);
  std::ostream::operator<<();
  sub_1000039A0(v3, (uint64_t)" while expecting ", 17);
  std::ostream::operator<<();
  sub_10000550C((uint64_t)a1, (uint64_t)v3, 0x16u);
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  *a1 = &off_10019D8B8;
  return a1;
}

void sub_100009504(std::exception *a1)
{
  sub_1000036A0(a1);
  operator delete();
}

void sub_10000953C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10000953C(a1, *a2);
    sub_10000953C(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_100009590(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100009820(v1);
  return std::ios::~ios();
}

uint64_t sub_1000095DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100009820(v1);
  return std::ios::~ios();
}

void sub_10000963C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100009820(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000096A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000096DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100009744(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100009820(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000097A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100009820(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100009820(uint64_t a1)
{
  *(void *)a1 = off_10019DA80;
  sub_10000995C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10000995C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100009B1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100009AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100009AE4(uint64_t a1)
{
  sub_100009820(a1);
  operator delete();
}

int *sub_100009B1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 100;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 100;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100009D04(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
LABEL_5:
    int v4 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "status";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10019DB18;
    *((_DWORD *)exception + 8) = v4;
  }
  uint64_t v3 = 4 * a3;
  while (*a2 != result)
  {
    ++a2;
    v3 -= 4;
    if (!v3) {
      goto LABEL_5;
    }
  }
  return result;
}

void sub_100009DAC(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_100009DE4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)sub_100139620(a1);
  sub_100004890(v14, v3);
  sub_100009FEC((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    int v4 = v14;
  }
  else {
    int v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  char v6 = sub_1000039A0(&v11, (uint64_t)v4, v5);
  uint64_t v7 = sub_1000039A0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_1000039A0(v8, (uint64_t)"]", 1);
  sub_100004624((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

uint64_t sub_100009FEC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10000A29C(_Unwind_Exception *a1)
{
}

void *sub_10000A2C4(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_100003D78();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_10000A364(unint64_t *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v1 == 3)
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (v2 >= *a1) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
    else
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (*a1 < v2) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
  }
  else
  {
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2) {
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }
  return qword_1001D3B38;
}

void sub_10000A3CC()
{
}

void sub_10000A4E0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  uint64_t v12 = v9[1];
  v9[1] = 0;
  if (v12) {
    sub_1001514C0(v12);
  }
  sub_100151454(v9, a1, a2, (uint64_t)&exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10000A538(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10000A59C(void *a1)
{
}

void sub_10000A5A8(_Unwind_Exception *a1)
{
}

void sub_10000A5C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10000A5FC(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_10019DB88)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

BOOL sub_10000A640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t sub_10000A690(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000A920(v1);
  return std::ios::~ios();
}

uint64_t sub_10000A6DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000A920(v1);
  return std::ios::~ios();
}

void sub_10000A73C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10000A920(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000A7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10000A7DC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10000A844(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000A920(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10000A8A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000A920(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000A920(uint64_t a1)
{
  *(void *)a1 = off_10019DD48;
  sub_10000AA5C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10000AA5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10000AC1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10000ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000ABE4(uint64_t a1)
{
  sub_10000A920(a1);
  operator delete();
}

int *sub_10000AC1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 358;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 358;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10000AE04(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000B094(v1);
  return std::ios::~ios();
}

uint64_t sub_10000AE50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000B094(v1);
  return std::ios::~ios();
}

void sub_10000AEB0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10000B094(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000AF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10000AF50(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10000AFB8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000B094(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10000B01C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000B094(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000B094(uint64_t a1)
{
  *(void *)a1 = off_10019DF68;
  sub_10000B1D0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10000B1D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10000B390((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10000B32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000B358(uint64_t a1)
{
  sub_10000B094(a1);
  operator delete();
}

int *sub_10000B390(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 359;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 359;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10000B578(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000B808(v1);
  return std::ios::~ios();
}

uint64_t sub_10000B5C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000B808(v1);
  return std::ios::~ios();
}

void sub_10000B624(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10000B808(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000B68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10000B6C4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10000B72C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000B808(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10000B790(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000B808(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000B808(uint64_t a1)
{
  *(void *)a1 = off_10019E188;
  sub_10000B944(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10000B944(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10000BB04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10000BAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000BACC(uint64_t a1)
{
  sub_10000B808(a1);
  operator delete();
}

int *sub_10000BB04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 361;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 361;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10000BCEC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000BF7C(v1);
  return std::ios::~ios();
}

uint64_t sub_10000BD38(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000BF7C(v1);
  return std::ios::~ios();
}

void sub_10000BD98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10000BF7C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000BE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10000BE38(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10000BEA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10000BF7C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10000BF04(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10000BF7C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10000BF7C(uint64_t a1)
{
  *(void *)a1 = off_10019E3A8;
  sub_10000C0B8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10000C0B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10000C278((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10000C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C240(uint64_t a1)
{
  sub_10000BF7C(a1);
  operator delete();
}

int *sub_10000C278(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 373;
    __int16 v22 = 2082;
    int v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 373;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_10000C460(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10000C460(a1, *(void *)a2);
    sub_10000C460(a1, *((void *)a2 + 1));
    if (a2[79] < 0) {
      operator delete(*((void **)a2 + 7));
    }
    operator delete(a2);
  }
}

void sub_10000C4C8()
{
}

void *sub_10000C4DC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_10019E428;
  return result;
}

void sub_10000C514(uint64_t a1, void *a2)
{
  *a2 = off_10019E428;
}

void *sub_10000C53C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 128))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_10000C5A4(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_10019E498)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10000C5E4()
{
  return &off_10019E498;
}

uint64_t sub_10000C5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_10000C670(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_10000C78C((void *)(a1 + 56));
    uint64_t v2 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  return a1;
}

uint64_t sub_10000C6D4(uint64_t a1)
{
  sub_10000953C(a1 + 56, *(void **)(a1 + 64));
  sub_10000C460(a1 + 32, *(char **)(a1 + 40));
  sub_10000C810((const void **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t result = *(void *)a1;
  *(void *)a1 = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v4();
  }
  return result;
}

void *sub_10000C78C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const void **sub_10000C810(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t **sub_10000C844(uint64_t **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 < v11 && *(void *)a2 + 1 < v11) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(unsigned char *)(a2 + 16) == 3)
  {
    if (*(void *)(a2 + 8) >= *(void *)a2) {
      goto LABEL_4;
    }
    return a1 + 1;
  }
  if (*(void *)a2 >= *(void *)(a2 + 8)) {
    return a1 + 1;
  }
LABEL_4:
  uint64_t v4 = (uint64_t *)sub_10000C990(a1, a2, a2);
  if (v5)
  {
    uint64_t v13 = v4;
    sub_10000CC90(a1, &v13);
    return sub_10000CD90(a1, (uint64_t ***)&v13);
  }
  else
  {
    char v6 = (void *)sub_10000D384((uint64_t)a1, a2);
    uint64_t v7 = (void *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        char v6 = v8;
      }
      while (v9);
    }
    return sub_10000C948(a1, (unint64_t *)a2, (uint64_t)v8);
  }
}

uint64_t **sub_10000C948(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)sub_10000D3CC(a1, a2, a3);
  sub_10000CC90(a1, &v5);
  return sub_10000CD90(a1, (uint64_t ***)&v5);
}

_OWORD *sub_10000C990(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void **)sub_10000CA1C((uint64_t)a1, &v9, a2);
  char v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    char v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_10000CAA0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_10000CA1C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1;
    }
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        char v8 = *(unsigned char *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        if ((unint64_t)(*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1 >= v9) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }
      if ((unint64_t)(v8 & 1) + v7[5] - 1 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_14:
  *a2 = v7;
  return result;
}

uint64_t *sub_10000CAA0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_10000CAF8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_10000CAF8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_10000CC90(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }
    while (v7);
  }
  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(unsigned char *)(v5 + 48) & 1) + *(void *)(v5 + 40))
  {
    long long v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    sub_10000CF8C(a1, v2);
    operator delete(v2);
    long long v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    sub_10000CE98((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(unsigned char *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **sub_10000CD90(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    long long v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      long long v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      long long v17 = *((_OWORD *)v7 + 2);
      __int16 v18 = v7[6];
      sub_10000CF8C(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      long long v13 = *((_OWORD *)*a2 + 2);
      long long v14 = v11[6];
      sub_10000CE98((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      long long v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((unsigned char *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

unint64_t *sub_10000CE98@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    if (v3 == 3)
    {
      uint64_t v5 = (uint64_t *)*a2;
      unint64_t v4 = a2[1];
      if (v4 >= *a2) {
        goto LABEL_4;
      }
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      unint64_t v15 = result[2];
LABEL_33:
      *(void *)(a3 + 16) = v15;
      return result;
    }
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4) {
      goto LABEL_24;
    }
  }
LABEL_4:
  int v6 = *((unsigned __int8 *)result + 16);
  if (!*((unsigned char *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t *)*result;
  unint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    unint64_t v15 = a2[2];
    goto LABEL_33;
  }
LABEL_7:
  char v9 = v6 & 2;
  if ((v6 & 2) != 0) {
    unint64_t v10 = (unint64_t)v8;
  }
  else {
    unint64_t v10 = (unint64_t)v8 + 1;
  }
  char v11 = v3 & 2;
  if ((v3 & 2) != 0) {
    uint64_t result = (unint64_t *)v5;
  }
  else {
    uint64_t result = (unint64_t *)((char *)v5 + 1);
  }
  int v12 = v6 & 1;
  int v13 = v3 & 1;
  if (v10 >= (unint64_t)result) {
    char v9 = v11;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    unint64_t v4 = v7;
    LOBYTE(v13) = v12;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v13 | v9;
  return result;
}

uint64_t *sub_10000CF8C(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    unint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10000D000(v6, a2);
  return v3;
}

uint64_t *sub_10000D000(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      char v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        char v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  __int16 v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    __int16 v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *__int16 v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10000D384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = (*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1;
    do
    {
      unint64_t v6 = *(void *)(v3 + 32);
      if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
        ++v6;
      }
      BOOL v7 = v5 >= v6;
      if (v5 >= v6) {
        int v8 = (uint64_t *)(v3 + 8);
      }
      else {
        int v8 = (uint64_t *)v3;
      }
      if (!v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t sub_10000D3CC(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D6B0((uint64_t)a1, (uint64_t)a2);
  uint64_t v7 = v6;
  int v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      int v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v9 = *(uint64_t **)(v10 + 16);
      BOOL v11 = *v9 == v10;
      uint64_t v10 = (uint64_t)v9;
    }
    while (!v11);
  }
  uint64_t v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      int v13 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v14 = (uint64_t *)a3;
    do
    {
      int v13 = (uint64_t *)v14[2];
      BOOL v11 = *v13 == (void)v14;
      uint64_t v14 = v13;
    }
    while (!v11);
  }
  long long v24 = *(_OWORD *)(v6 + 32);
  uint64_t v25 = *(void *)(v6 + 48);
  sub_10000D508((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  long long v21 = *(_OWORD *)(a3 + 32);
  uint64_t v22 = *(void *)(a3 + 48);
  sub_10000D5DC((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  sub_10000D6F8(a1, v9, v13);
  long long v16 = v26;
  uint64_t v17 = v27;
  sub_10000CE98((unint64_t *)&v16, a2, (uint64_t)v18);
  sub_10000CE98(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 32) = v19;
  *(unsigned char *)(v7 + 48) = v20;
  return v7;
}

unint64_t *sub_10000D508@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 16);
  if (*((unsigned char *)result + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (v5 < *result) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (*result >= v5) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v4 = *result;
    unint64_t v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5) {
      goto LABEL_27;
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v9 || *(void *)a2 + 1 >= v9) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v7 != 3)
  {
    unint64_t v8 = *(void *)a2;
    if (*(void *)a2 < *(void *)(a2 + 8)) {
      goto LABEL_23;
    }
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = result[2];
    return result;
  }
  unint64_t v8 = *(void *)a2;
  if (*(void *)(a2 + 8) < *(void *)a2) {
    goto LABEL_27;
  }
LABEL_23:
  unint64_t v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = v8 + 1;
  }
  if (v11 < v12) {
    goto LABEL_27;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t sub_10000D5DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (v4 < *(void *)a2) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v4) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1 >= v4) {
      goto LABEL_26;
    }
  }
  int v6 = *(unsigned __int8 *)(result + 16);
  if (!*(unsigned char *)(result + 16))
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result >= v7 || *(void *)result + 1 >= v7) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (v6 != 3)
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result < v7) {
      goto LABEL_23;
    }
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = *(void *)(result + 16);
    return result;
  }
  unint64_t v8 = *(void *)result;
  unint64_t v7 = *(void *)(result + 8);
  if (v7 < *(void *)result) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v6 & 2) == 0) {
    ++v8;
  }
  if ((v3 & 1) + v4 - 1 < v8) {
    goto LABEL_26;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t sub_10000D6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = *(void *)a2;
    if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
      ++v5;
    }
    do
    {
      unint64_t v6 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
  }
  return result;
}

uint64_t *sub_10000D6F8(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v6 = sub_10000CF8C(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

const void **sub_10000D758(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10000D78C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DA80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10000D808(_Unwind_Exception *a1)
{
}

uint64_t sub_10000D81C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_10000C844((uint64_t **)a1, a2);
  return a1;
}

void sub_10000D854(_Unwind_Exception *a1)
{
  sub_10000953C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10000D86C(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return (uint64_t *)(a1 + 1);
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  long long v5 = (long long *)(a2 + 24);
  if (sub_10000D98C((unsigned __int8 *)(a2 + 24))) {
    return (uint64_t *)(a1 + 1);
  }
  uint64_t result = sub_10000DF44(a1, a2, (long long *)a2);
  if ((v7 & 1) == 0)
  {
    unint64_t v8 = (uint64_t *)sub_10000D6B0((uint64_t)a1, (uint64_t)&v14);
    unint64_t v9 = (uint64_t **)sub_10000D384((uint64_t)a1, (uint64_t)&v14);
    uint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        unint64_t v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        unint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        unint64_t v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    int v13 = v11;
    long long v16 = v8;
    sub_10000D9FC(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL sub_10000D98C(unsigned __int8 *a1)
{
  sub_10000DDEC((uint64_t)__p);
  BOOL v2 = sub_10000DD38(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10000D9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000D9FC(uint64_t **a1, long long *a2, long long *a3, uint64_t **a4, uint64_t **a5)
{
  unint64_t v8 = *a5;
  unint64_t v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      uint64_t v10 = v9;
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    unint64_t v11 = *a5;
    do
    {
      uint64_t v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      unint64_t v11 = v10;
    }
    while (!v12);
  }
  int v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      long long v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        long long v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = qword_1001D3B40;
  *((void *)&v37 + 1) = qword_1001D3B40;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  while (v13 != v10)
  {
    long long v37 = *((_OWORD *)v13 + 2);
    char v38 = *((unsigned char *)v13 + 48);
    long long v33 = v39;
    uint64_t v34 = v40;
    sub_10000D508((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v28);
    if ((_BYTE)v29)
    {
      if (v29 == 3)
      {
        if (*((void *)&v28 + 1) >= (unint64_t)v28) {
          goto LABEL_23;
        }
      }
      else if ((unint64_t)v28 < *((void *)&v28 + 1))
      {
        goto LABEL_23;
      }
    }
    else if ((unint64_t)v28 < *((void *)&v28 + 1) && (unint64_t)(v28 + 1) < *((void *)&v28 + 1))
    {
LABEL_23:
      if (*((char *)a3 + 23) < 0)
      {
        sub_10000A2C4(&__p, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long __p = *a3;
        uint64_t v31 = *((void *)a3 + 2);
      }
      int v32 = *((_DWORD *)a3 + 6);
      uint64_t v17 = (uint64_t *)sub_10000E110(a1, v15, (uint64_t)&v28, (uint64_t)&v28);
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      *a4 = v17;
    }
    long long v26 = v39;
    uint64_t v27 = v40;
    sub_10000D5DC((uint64_t)&v26, (uint64_t)&v37, (uint64_t)&v28);
    long long v39 = v28;
    LOBYTE(v40) = v29;
    uint64_t v15 = *a4;
    uint64_t v18 = (uint64_t *)(*a4)[1];
    long long v19 = *a4;
    if (v18)
    {
      do
      {
        int v13 = v18;
        uint64_t v18 = (uint64_t *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        int v13 = (uint64_t *)v19[2];
        BOOL v12 = *v13 == (void)v19;
        long long v19 = v13;
      }
      while (!v12);
    }
    *a4 = v13;
  }
  long long v22 = v39;
  uint64_t v23 = v40;
  sub_10000D5DC((uint64_t)&v22, (uint64_t)&v35, (uint64_t)&v24);
  if (!(_BYTE)v25)
  {
    unint64_t v20 = *((void *)&v24 + 1);
    if ((unint64_t)v24 >= *((void *)&v24 + 1)) {
      goto LABEL_48;
    }
    unint64_t v21 = v24 + 1;
    goto LABEL_42;
  }
  if (v25 != 3)
  {
    unint64_t v20 = *((void *)&v24 + 1);
    unint64_t v21 = v24;
LABEL_42:
    if (v21 >= v20) {
      goto LABEL_48;
    }
    goto LABEL_43;
  }
  if (*((void *)&v24 + 1) < (unint64_t)v24) {
    goto LABEL_48;
  }
LABEL_43:
  long long v28 = v24;
  uint64_t v29 = v25;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000A2C4(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v31 = *((void *)a3 + 2);
  }
  int v32 = *((_DWORD *)a3 + 6);
  uint64_t v15 = (uint64_t *)sub_10000E110(a1, v15, (uint64_t)&v28, (uint64_t)&v28);
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
LABEL_48:
  *a4 = v15;
}

void sub_10000DD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000DD38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
    }
    return 0;
  }
  if (a1[23])
  {
    for (i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2) {
        return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
      }
    }
    return 0;
  }
  return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
}

void sub_10000DDEC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D3B68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D3B68))
  {
    xmmword_1001D3B48 = 0uLL;
    dword_1001D3B60 = 0;
    unk_1001D3B58 = 0;
    uint64_t v2 = &_mh_execute_header;
    int v3 = 2;
    sub_100009D04(0, &v2, 3);
    __cxa_atexit((void (*)(void *))sub_10000650C, &xmmword_1001D3B48, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D3B68);
  }
  if (byte_1001D3B5F < 0)
  {
    sub_10000A2C4((unsigned char *)a1, (void *)xmmword_1001D3B48, *((unint64_t *)&xmmword_1001D3B48 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1001D3B48;
    *(void *)(a1 + 16) = unk_1001D3B58;
  }
  *(_DWORD *)(a1 + 24) = dword_1001D3B60;
}

void sub_10000DF14(_Unwind_Exception *a1)
{
  if (byte_1001D3B5F < 0) {
    sub_1001514E4();
  }
  __cxa_guard_abort(&qword_1001D3B68);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000DF44(uint64_t **a1, uint64_t a2, long long *a3)
{
  int v5 = (uint64_t **)sub_10000CA1C((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10000DFC4((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10000CAA0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t sub_10000DFC4@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10000E048((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10000E02C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10000E0B0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E048(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10000A2C4((unsigned char *)v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(v5 + 16) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  return a1;
}

void sub_10000E0B0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 79) < 0) {
      operator delete(__p[7]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_OWORD *sub_10000E110(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = sub_10000E1C0(a1, a2, &v11, &v10, a3);
  char v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    char v7 = operator new(0x58uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)(a4 + 24);
    *((void *)v7 + 9) = *(void *)(a4 + 40);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *((_DWORD *)v7 + 20) = *(_DWORD *)(a4 + 48);
    sub_10000CAA0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10000E1C0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  char v5 = *(unsigned char *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    uint64_t v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v11);
    }
    unint64_t v16 = *(void *)a5;
    if ((*(unsigned char *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    if ((unint64_t)(v10[6] & 1) + v10[5] - 1 < v16) {
      goto LABEL_23;
    }
    return sub_10000CA1C((uint64_t)a1, a3, a5);
  }
  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        long long v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        uint64_t v17 = (uint64_t *)a4;
      }
      while (!v11);
    }
    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_10000CA1C((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10000E338(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = (unint64_t *)a2;
  if (*(unsigned char *)(a3 + 16))
  {
    if (*(unsigned char *)(a3 + 16) == 3)
    {
      if (*(void *)(a3 + 8) < *(void *)a3) {
        return (uint64_t *)v4;
      }
    }
    else if (*(void *)a3 >= *(void *)(a3 + 8))
    {
      return (uint64_t *)v4;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(a3 + 8);
    if (*(void *)a3 >= v6 || *(void *)a3 + 1 >= v6) {
      return (uint64_t *)v4;
    }
  }
  long long v4 = (unint64_t *)sub_10000E674(a1, a2, a3, a3);
  if (sub_10000E438(v4 + 4, (unint64_t *)a3)) {
    return (uint64_t *)v4;
  }
  unint64_t v9 = (uint64_t **)sub_10000D384((uint64_t)a1, a3);
  uint64_t v10 = *v9;
  if (*v9)
  {
    do
    {
      BOOL v11 = v10;
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    do
    {
      BOOL v11 = v9[2];
      BOOL v12 = *v11 == (void)v9;
      unint64_t v9 = (uint64_t **)v11;
    }
    while (v12);
  }
  return sub_10000E510(a1, a3, v11);
}

BOOL sub_10000E438(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_21;
    }
  }
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7) {
      goto LABEL_21;
    }
    return 1;
  }
  if (*((unsigned char *)a2 + 16) == 3)
  {
    if (a2[1] < *a2) {
      return 1;
    }
  }
  else if (*a2 >= a2[1])
  {
    return 1;
  }
LABEL_21:
  if ((v2 & 2) != 0) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v4 + 1;
  }
  unint64_t v10 = *a2;
  if ((a2[2] & 2) == 0) {
    ++v10;
  }
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

uint64_t *sub_10000E510(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = a3;
  uint64_t v5 = sub_10000D6B0((uint64_t)a1, a2);
  unint64_t v16 = (uint64_t *)v5;
  long long v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  long long v21 = *(_OWORD *)(v5 + 32);
  uint64_t v22 = *(void *)(v5 + 48);
  sub_10000D508((unint64_t *)&v21, (uint64_t)&v13, (uint64_t)&v23);
  if (!v25)
  {
    unint64_t v6 = v24;
    if (v23 >= v24) {
      goto LABEL_17;
    }
    unint64_t v7 = v23 + 1;
    goto LABEL_8;
  }
  if (v25 != 3)
  {
    unint64_t v7 = v23;
    unint64_t v6 = v24;
LABEL_8:
    if (v7 >= v6) {
      goto LABEL_17;
    }
    goto LABEL_9;
  }
  if (v24 < v23) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v8 = v5 + 32;
  if (*a1 == (uint64_t *)v5)
  {
    unint64_t v10 = (uint64_t *)(a1 + 1);
  }
  else
  {
    uint64_t v9 = *(void *)v5;
    if (*(void *)v5)
    {
      do
      {
        unint64_t v10 = (uint64_t *)v9;
        uint64_t v9 = *(void *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v10 = *(uint64_t **)(v5 + 16);
        BOOL v11 = *v10 == v5;
        uint64_t v5 = (uint64_t)v10;
      }
      while (v11);
    }
  }
  long long v17 = *(_OWORD *)v8;
  uint64_t v18 = *(void *)(v8 + 16);
  sub_10000D5DC((uint64_t)&v17, (uint64_t)&v23, (uint64_t)&v19);
  *(_OWORD *)uint64_t v8 = v19;
  *(unsigned char *)(v8 + 16) = v20;
  sub_10000E674(a1, v10, (uint64_t)&v23, (uint64_t)&v23);
LABEL_17:
  sub_10000E704(a1, &v13, &v16, &v15);
  sub_10000E890(a1, (uint64_t)&v13, &v16);
  return v16;
}

_OWORD *sub_10000E674(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = sub_10000E1C0(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_10000CAA0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

double sub_10000E704(uint64_t **a1, long long *a2, uint64_t **a3, uint64_t **a4)
{
  unint64_t v4 = *a3;
  if (*a3 != *a4)
  {
    uint64_t v9 = (uint64_t *)(a1 + 1);
    do
    {
      long long v22 = *((_OWORD *)v4 + 2);
      char v23 = *((unsigned char *)v4 + 48);
      long long v24 = *a2;
      uint64_t v25 = *((void *)a2 + 2);
      sub_10000D508((unint64_t *)&v24, (uint64_t)(v4 + 4), (uint64_t)&v26);
      if (v27)
      {
        if (v27 == 3)
        {
          if (*((void *)&v26 + 1) >= (unint64_t)v26) {
            goto LABEL_11;
          }
          goto LABEL_17;
        }
        unint64_t v10 = *((void *)&v26 + 1);
        unint64_t v11 = v26;
      }
      else
      {
        unint64_t v10 = *((void *)&v26 + 1);
        if ((unint64_t)v26 >= *((void *)&v26 + 1)) {
          goto LABEL_17;
        }
        unint64_t v11 = v26 + 1;
      }
      if (v11 < v10)
      {
LABEL_11:
        BOOL v12 = *a3;
        long long v13 = v9;
        if (*a1 != *a3)
        {
          uint64_t v14 = (uint64_t *)*v12;
          if (*v12)
          {
            do
            {
              long long v13 = v14;
              uint64_t v14 = (uint64_t *)v14[1];
            }
            while (v14);
          }
          else
          {
            do
            {
              long long v13 = (uint64_t *)v12[2];
              BOOL v15 = *v13 == (void)v12;
              BOOL v12 = v13;
            }
            while (v15);
          }
        }
        sub_10000E674(a1, v13, (uint64_t)&v26, (uint64_t)&v26);
      }
LABEL_17:
      unint64_t v16 = *a3;
      long long v17 = (uint64_t *)(*a3)[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          long long v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (uint64_t *)v16[2];
          BOOL v15 = *v18 == (void)v16;
          unint64_t v16 = v18;
        }
        while (!v15);
      }
      *a3 = v18;
      long long v20 = *a2;
      uint64_t v21 = *((void *)a2 + 2);
      sub_10000D5DC((uint64_t)&v20, (uint64_t)&v22, (uint64_t)&v26);
      double result = *(double *)&v26;
      *a2 = v26;
      *((unsigned char *)a2 + 16) = v27;
      unint64_t v4 = *a3;
    }
    while (*a3 != *a4);
  }
  return result;
}

uint64_t sub_10000E890(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v6 = *a3;
  if (*a1 == *a3)
  {
    uint64_t v8 = (uint64_t *)(a1 + 1);
  }
  else
  {
    unint64_t v7 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v8 = v7;
        unint64_t v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      uint64_t v9 = *a3;
      do
      {
        uint64_t v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        uint64_t v9 = v8;
      }
      while (v10);
    }
  }
  long long v42 = *((_OWORD *)v6 + 2);
  uint64_t v43 = v6[6];
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  sub_10000D508((unint64_t *)&v37, (uint64_t)&v42, (uint64_t)&v39);
  if (!v41)
  {
    unint64_t v11 = v40;
    if (v39 >= v40) {
      goto LABEL_17;
    }
    unint64_t v12 = v39 + 1;
LABEL_15:
    if (v12 >= v11) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v41 != 3)
  {
    unint64_t v12 = v39;
    unint64_t v11 = v40;
    goto LABEL_15;
  }
  if (v40 >= v39) {
LABEL_16:
  }
    sub_10000E674(a1, v8, (uint64_t)&v39, (uint64_t)&v39);
LABEL_17:
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  sub_10000D5DC((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34);
  if (!v36)
  {
    unint64_t v13 = v35;
    if (v34 >= v35) {
      goto LABEL_26;
    }
    unint64_t v14 = v34 + 1;
LABEL_24:
    if (v14 >= v13) {
      goto LABEL_26;
    }
LABEL_25:
    BOOL v15 = *a3;
    unint64_t v16 = &v34;
    long long v17 = &v34;
LABEL_35:
    uint64_t result = (uint64_t)sub_10000E674(a1, v15, (uint64_t)v16, (uint64_t)v17);
    *a3 = (uint64_t *)result;
    return result;
  }
  if (v36 != 3)
  {
    unint64_t v14 = v34;
    unint64_t v13 = v35;
    goto LABEL_24;
  }
  if (v35 >= v34) {
    goto LABEL_25;
  }
LABEL_26:
  long long v27 = v42;
  uint64_t v28 = v43;
  uint64_t result = sub_10000D5DC((uint64_t)&v27, a2, (uint64_t)&v29);
  if (!v31)
  {
    unint64_t v19 = v30;
    if (v29 >= v30) {
      return result;
    }
    unint64_t v20 = v29 + 1;
LABEL_33:
    if (v20 >= v19) {
      return result;
    }
    goto LABEL_34;
  }
  if (v31 != 3)
  {
    unint64_t v20 = v29;
    unint64_t v19 = v30;
    goto LABEL_33;
  }
  if (v30 >= v29)
  {
LABEL_34:
    uint64_t v21 = *a3;
    long long v23 = *((_OWORD *)*a3 + 2);
    uint64_t v24 = v21[6];
    sub_10000D508((unint64_t *)&v23, (uint64_t)&v29, (uint64_t)&v25);
    long long v22 = *a3;
    *((_OWORD *)v22 + 2) = v25;
    *((unsigned char *)v22 + 48) = v26;
    BOOL v15 = *a3;
    unint64_t v16 = &v29;
    long long v17 = &v29;
    goto LABEL_35;
  }
  return result;
}

uint64_t **sub_10000EABC(uint64_t **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (*(void *)(a2 + 8) < *(void *)a2) {
        return a1;
      }
    }
    else if (*(void *)a2 >= *(void *)(a2 + 8))
    {
      return a1;
    }
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1 >= v4) {
      return a1;
    }
  }
  sub_10000C990(a1, a2, a2);
  if ((v6 & 1) == 0)
  {
    unint64_t v7 = (uint64_t **)sub_10000D384((uint64_t)a1, a2);
    uint64_t v8 = *v7;
    if (*v7)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = v7[2];
        BOOL v10 = *v9 == (void)v7;
        unint64_t v7 = (uint64_t **)v9;
      }
      while (v10);
    }
    sub_10000E510(a1, a2, v9);
  }
  return a1;
}

uint64_t sub_10000EB80(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DD48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10000EBFC(_Unwind_Exception *a1)
{
}

uint64_t sub_10000EC10(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019DF68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10000EC8C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000ECA0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E188;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10000ED1C(_Unwind_Exception *a1)
{
}

void *sub_10000ED30(void *a1, char *a2)
{
  unint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    long long v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10000EDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10000EDF8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E3A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10000EE74(_Unwind_Exception *a1)
{
}

void sub_10000EE8C()
{
}

void *sub_10000EEA0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10019E500;
  result[1] = v3;
  return result;
}

uint64_t sub_10000EEE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10019E500;
  a2[1] = v2;
  return result;
}

void sub_10000EF14()
{
}

uint64_t sub_10000EFA0(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_10019E560)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10000EFE0()
{
  return &off_10019E560;
}

uint64_t sub_10000EFEC(uint64_t ***a1)
{
  uint64_t result = ***a1;
  if (!*(unsigned char *)(result + 113)) {
    sub_10000F00C();
  }
  return result;
}

void sub_10000F00C()
{
}

uint64_t sub_10000F0E8(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 89)) {
    sub_10000C6D4(a1);
  }
  uint64_t result = sub_10000F130(a1, a2);
  *(unsigned char *)(a1 + 89) = 1;
  return result;
}

uint64_t sub_10000F130(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = 0;
  uint64_t v4 = a2[3];
  *(void *)(result + 16) = a2[2];
  a2[2] = 0;
  *(void *)(result + 24) = v4;
  *(void *)(result + 32) = a2[4];
  long long v5 = a2 + 5;
  uint64_t v6 = a2[5];
  *(void *)(result + 40) = v6;
  uint64_t v7 = result + 40;
  uint64_t v8 = a2[6];
  *(void *)(result + 48) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    a2[4] = (uint64_t)v5;
    *long long v5 = 0;
    a2[6] = 0;
  }
  else
  {
    *(void *)(result + 32) = v7;
  }
  *(void *)(result + 56) = a2[7];
  uint64_t v9 = a2 + 8;
  uint64_t v10 = a2[8];
  *(void *)(result + 64) = v10;
  uint64_t v11 = result + 64;
  uint64_t v12 = a2[9];
  *(void *)(result + 72) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    a2[7] = (uint64_t)v9;
    *uint64_t v9 = 0;
    a2[9] = 0;
  }
  else
  {
    *(void *)(result + 56) = v11;
  }
  uint64_t v13 = a2[10];
  *(unsigned char *)(result + 88) = *((unsigned char *)a2 + 88);
  *(void *)(result + 80) = v13;
  return result;
}

uint64_t sub_10000F1DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = 0;
  long long v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (uint64_t *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 113);
  if (v7)
  {
    sub_10000F130(a1 + 24, v6);
    int v4 = *(unsigned __int8 *)(a1 + 8);
    char v7 = 1;
  }
  else
  {
    *long long v5 = *(_OWORD *)v6;
  }
  *(unsigned char *)(a1 + 113) = v7;
  if (v4)
  {
    sub_10000F348(a1 + 120, (long long *)(a2 + 120));
  }
  else
  {
    sub_1000089A0((uint64_t)v5, *(_DWORD *)(a2 + 12), (uint64_t)v12);
    *(_OWORD *)(a1 + 120) = v12[0];
    *(_OWORD *)(a1 + 129) = *(_OWORD *)((char *)v12 + 9);
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    uint64_t v13 = 0;
    *(void *)(a1 + 152) = v8;
    *(void *)(a1 + 160) = v9;
    *(_DWORD *)(a1 + 168) = v15;
    sub_10000C5F0(a1 + 176, (uint64_t)v16);
    *(unsigned char *)(a1 + 208) = 1;
    sub_10000C78C(v16);
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
  }
  return a1;
}

void sub_10000F32C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 113)) {
    sub_10000C6D4(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000F348(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
    *(_OWORD *)a1 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    *((void *)a2 + 4) = 0;
    *(void *)(a1 + 32) = v4;
    uint64_t v5 = *((void *)a2 + 5);
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    *(void *)(a1 + 40) = v5;
    sub_10000C5F0(a1 + 56, (uint64_t)a2 + 56);
    *(unsigned char *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_10000F430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_10000F990((uint64_t)&a20);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"verify failed" error:v20];
    __cxa_end_catch();
    JUMPOUT(0x10000F834);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000F990(uint64_t a1)
{
  long long v3 = (void **)(a1 + 24);
  sub_10000F9FC(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10000F9FC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (NSObject **)**a1;
  if (v2)
  {
    uint64_t v4 = (NSObject **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_100125ECC(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10000FAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(exception_object) prefix:@"user data embedding failed" error:v12];
    __cxa_end_catch();
    JUMPOUT(0x10000FEDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000104B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14)
{
  sub_10000D758(&a13);
  uint64_t v20 = a14;
  a14 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"user data retrieving failed" error:v14];
    __cxa_end_catch();
    JUMPOUT(0x10001047CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1000106D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100010968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000129EC(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x218];
  STACK[0x218] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_100028D58((uint64_t)&STACK[0x9E0]);
  sub_100008B48((uint64_t)&STACK[0x788]);
  sub_100013CE8((uint64_t)&STACK[0xAE0]);
  if (LOBYTE(STACK[0x408])) {
    sub_1000274B0((uint64_t)&STACK[0x330]);
  }
  _Unwind_Resume(a1);
}

void sub_100012BC4()
{
  unint64_t v2 = STACK[0x908];
  STACK[0x908] = 0;
  if (v2) {
    sub_10015158C();
  }

  if (STACK[0x668]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x668]);
  }

  JUMPOUT(0x1000130B4);
}

void sub_100012BDC()
{
}

void sub_100012BFC()
{
}

void sub_100012C04()
{
  sub_100028D58((uint64_t)&STACK[0x9E0]);
  JUMPOUT(0x100013204);
}

void sub_100012C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::ostream::~ostream();
  sub_10002AA20((uint64_t)&STACK[0xAE0]);
  std::ios::~ios();
  sub_10000953C(a14, (void *)STACK[0x5B0]);
  sub_10001A194((void *)STACK[0x590]);
  sub_1000273E4(a15);
  STACK[0x330] = (unint64_t)off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x420]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x3F0]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3B0]);
  sub_100019B70((uint64_t)&STACK[0x330]);
  if (STACK[0x270]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x270]);
  }
  sub_1000273E4((uint64_t)&STACK[0x668]);
  sub_1000273E4((uint64_t)&STACK[0x790]);
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 24))(a63);
  }
  unint64_t v64 = STACK[0x218];
  STACK[0x218] = 0;
  if (v64) {
    (*(void (**)(unint64_t))(*(void *)v64 + 24))(v64);
  }
  sub_100008B48((uint64_t)&STACK[0x8B0]);
  sub_100013CE8((uint64_t)&STACK[0x908]);
  if (LOBYTE(STACK[0xAB8])) {
    sub_1000274B0((uint64_t)&STACK[0x9E0]);
  }
  if (STACK[0x258]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x258]);
  }
  _Unwind_Resume(a1);
}

void sub_100012C90()
{
  JUMPOUT(0x100013204);
}

void sub_100012C9C()
{
  if (STACK[0xAE8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0xAE8]);
  }

  JUMPOUT(0x100013058);
}

void sub_100012CA4()
{
}

void sub_100012CB4()
{
  sub_100013BA8((uint64_t)&STACK[0xAE0]);
  (*(void (**)(uint64_t))(*(void *)v0 + 16))(v0);
  sub_100013C44((uint64_t)&STACK[0x330]);
  JUMPOUT(0x10001334CLL);
}

void sub_100012CE4()
{
}

void sub_100012D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100013C04((uint64_t)&a37);
  sub_100013C04((uint64_t)&STACK[0x300]);
  __cxa_end_catch();
  (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
  sub_100013C44((uint64_t)&STACK[0x330]);
  JUMPOUT(0x10001334CLL);
}

void sub_100012D94(void *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  JUMPOUT(0x1000133F0);
}

void sub_100012DC8()
{
  sub_100028D58((uint64_t)&STACK[0x9E0]);
  JUMPOUT(0x100013204);
}

void sub_100012DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a43) {
    sub_100151558();
  }
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 24))(a49);
  }
  (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
  sub_100013C44((uint64_t)&STACK[0x330]);
  JUMPOUT(0x10001334CLL);
}

void sub_100012E24()
{
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  sub_100013C44((uint64_t)&STACK[0x330]);
  JUMPOUT(0x10001334CLL);
}

void sub_100012E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_10001524C(a20);
  char v26 = *(std::__shared_weak_count **)(v25 + 896);
  if (v26) {
    sub_100004944(v26);
  }
  *(void *)uint64_t v25 = a22;
  *(void *)(v25 + 64) = v24;
  sub_10000953C(a21, *(void **)(v25 + 704));
  sub_10001A194(*(void **)(v25 + 672));
  sub_1000273E4(a23);
  *(void *)(v25 + 64) = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(v25 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(v25 + 256));
  std::mutex::~mutex((std::mutex *)(v25 + 192));
  sub_100019B70(a24);
  long long v27 = *(std::__shared_weak_count **)(v25 + 56);
  if (v27) {
    sub_100004944(v27);
  }
  operator delete();
}

void sub_100012E38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::mutex *a20)
{
  uint64_t v25 = *v21;
  uint64_t *v21 = 0;
  if (v25) {
    sub_100151558();
  }
  uint64_t v26 = *v22;
  uint64_t *v22 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  uint64_t v27 = *v24;
  uint64_t *v24 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  sub_10001AD54(v23 + 976, *v20);
  std::mutex::~mutex(a20);
  JUMPOUT(0x1000130F0);
}

void sub_100012EDC()
{
}

void sub_100012EEC()
{
}

void sub_100012EF4()
{
}

void sub_100012EFC()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x100013190);
}

void sub_100012F10()
{
  unint64_t v1 = STACK[0xBB0];
  STACK[0xBB0] = 0;
  if (v1) {
    sub_100151558();
  }
  unint64_t v2 = STACK[0xB78];
  STACK[0xB78] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 24))(v2);
  }
  unint64_t v3 = STACK[0xB40];
  STACK[0xB40] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 24))(v3);
  }
  sub_10000953C(v0 + 72, (void *)STACK[0xB30]);
  std::mutex::~mutex((std::mutex *)&STACK[0xAE0]);
  JUMPOUT(0x1000131F4);
}

void sub_100012FB4()
{
  JUMPOUT(0x1000131F4);
}

void sub_100012FC0()
{
}

void sub_100012FCC()
{
}

void sub_100012FD4()
{
}

void sub_100012FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57) {
    sub_100151558();
  }
  JUMPOUT(0x100013394);
}

void sub_100012FF4()
{
}

void sub_100012FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70) {
    sub_100151558();
  }
  JUMPOUT(0x1000133C4);
}

void sub_100013014()
{
}

void sub_10001301C()
{
}

void sub_100013024()
{
}

void sub_10001302C()
{
  JUMPOUT(0x100013034);
}

void sub_10001304C()
{
}

void sub_1000130A4()
{
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  sub_100013C44((uint64_t)&STACK[0x330]);
  JUMPOUT(0x10001334CLL);
}

void sub_1000130CC()
{
}

void sub_1000130D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26 = *(std::__shared_weak_count **)(v25 + 1208);
  if (v26) {
    sub_100004944(v26);
  }
  sub_10001524C(a20);
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 896);
  if (v27) {
    sub_100004944(v27);
  }
  *(void *)uint64_t v25 = a22;
  *(void *)(v25 + 64) = v24;
  sub_10000953C(a21, *(void **)(v25 + 704));
  sub_10001A194(*(void **)(v25 + 672));
  sub_1000273E4(a23);
  *(void *)(v25 + 64) = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(v25 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(v25 + 256));
  std::mutex::~mutex((std::mutex *)(v25 + 192));
  sub_100019B70(a24);
  uint64_t v28 = *(std::__shared_weak_count **)(v25 + 56);
  if (v28) {
    sub_100004944(v28);
  }
  operator delete();
}

void sub_10001319C()
{
}

void sub_1000131A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000273E4(&STACK[0x668]);
  sub_1000273E4(&STACK[0x790]);
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 24))(a63);
  }
  unint64_t v64 = STACK[0x218];
  STACK[0x218] = 0;
  if (v64) {
    (*(void (**)(unint64_t))(*(void *)v64 + 24))(v64);
  }
  sub_100008B48(&STACK[0x8B0]);
  sub_100013CE8(&STACK[0x908]);
  if (LOBYTE(STACK[0xAB8])) {
    sub_1000274B0(&STACK[0x9E0]);
  }
  if (STACK[0x258]) {
    sub_100004944();
  }
  _Unwind_Resume(a1);
}

void sub_1000131AC()
{
}

void sub_1000131B4()
{
}

void sub_1000131BC()
{
  JUMPOUT(0x1000133F0);
}

void sub_100013228()
{
  JUMPOUT(0x1000133F0);
}

void sub_100013238()
{
  if (STACK[0x320]) {
    sub_100004944(STACK[0x320]);
  }
  JUMPOUT(0x1000132E0);
}

void sub_100013244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v16);
  sub_10000953C(a14, (void *)STACK[0x5B0]);
  sub_10001A194((void *)STACK[0x590]);
  sub_1000273E4(a15);
  STACK[0x330] = (unint64_t)off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x420]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x3F0]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3B0]);
  sub_100019B70((uint64_t)&STACK[0x330]);
  if (STACK[0x270]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x270]);
  }
  JUMPOUT(0x10001334CLL);
}

void sub_100013280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  STACK[0x330] = (unint64_t)off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x420]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x3F0]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3B0]);
  sub_100019B70(&STACK[0x330]);
  if (STACK[0x270]) {
    sub_100004944(STACK[0x270]);
  }
  JUMPOUT(0x10001334CLL);
}

void sub_100013288()
{
}

void sub_100013290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (STACK[0xB00]) {
    sub_100004944((std::__shared_weak_count *)STACK[0xB00]);
  }
  if (v15) {
    sub_100004944(v15);
  }
  sub_10000953C(a14, (void *)STACK[0x5B0]);
  sub_10001A194((void *)STACK[0x590]);
  sub_1000273E4(a15);
  STACK[0x330] = (unint64_t)off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x420]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x3F0]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3B0]);
  sub_100019B70((uint64_t)&STACK[0x330]);
  if (STACK[0x270]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x270]);
  }
  JUMPOUT(0x10001334CLL);
}

uint64_t sub_1000133F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 216))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    long long v7 = *(_OWORD *)a1;
    *(void *)exception = &off_1001C3DE8;
    *(_OWORD *)(exception + 8) = v7;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = a2;
  }
  return sub_10000F1DC(a3, a1);
}

uint64_t sub_100013494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100015084(a1 + 56, a1, *(void *)(a1 + 8));
  sub_100015160(a2, &v5, *(_DWORD *)(a1 + 48));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_100013514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100151558();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100013530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100015084(a1 + 56, a1, *(void *)(a1 + 16));
  sub_100015160(a2, &v5, *(_DWORD *)(a1 + 48));
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_1000135B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100151558();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000135CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100027038((uint64_t)v4, a1, a2, 0);
  *(_DWORD *)a3 = crc32(0, 0, 0);
  sub_100019D40(a3 + 8, (uint64_t)v4);
  *(unsigned char *)(a3 + 288) = 0;
  sub_1000273E4((uint64_t)v4);
}

void sub_100013660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10001367C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  sub_10000953C(a1 + 72, *(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_10001374C(uint64_t a1, void *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4770, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D4770))
  {
    sub_10001AE40(&unk_1001D4718);
    byte_1001D471C = 0;
    byte_1001D4720 = 0;
    sub_10001AE40(&algn_1001D4721[3]);
    byte_1001D4728 = 0;
    byte_1001D472C = 0;
    sub_10002236C(&v14, 1);
    dword_1001D4730 = v14;
    byte_1001D4734 = 0;
    byte_1001D4738 = 0;
    sub_10002236C(&v13, -2147483643);
    dword_1001D473C = v13;
    byte_1001D4740 = 0;
    byte_1001D4744 = 0;
    sub_10002236C(&v12, -2147483641);
    dword_1001D4748 = v12;
    byte_1001D474C = 0;
    byte_1001D4750 = 0;
    sub_10002236C(&v11, -2147483640);
    dword_1001D4754 = v11;
    byte_1001D4758 = 0;
    byte_1001D475C = 0;
    sub_10002236C(&v10, -2147483643);
    dword_1001D4760 = v10;
    *(_DWORD *)algn_1001D4764 = 3;
    byte_1001D4768 = 1;
    __cxa_guard_release(&qword_1001D4770);
  }
  uint64_t v6 = (char *)&unk_1001D4718 + 12 * *a2;
  unsigned int v7 = *(_DWORD *)v6;
  if (v6[8])
  {
    unsigned int v9 = *(_DWORD *)v6;
    int v8 = *((_DWORD *)v6 + 1);
    int v15 = &v9;
    *((_DWORD *)sub_10002B1A4((uint64_t **)(a1 + 696), &v9, (uint64_t)&unk_1001705CC, &v15) + 8) = v8;
  }
  *(_DWORD *)(a1 + 1184) = v7;
  *(void *)(a1 + 1192) = a3;
  LODWORD(v15) = v7;
  sub_10011875C(a1 + 64, (int *)&v15, a3);
}

void sub_100013918(_Unwind_Exception *a1)
{
}

void *sub_100013930(void *result, uint64_t a2)
{
  uint64_t v2 = 0;
  *uint64_t result = a2;
  v5[0] = xmmword_10016E330;
  v5[1] = xmmword_10016E340;
  uint64_t v6 = 6;
  while (*(void *)((char *)v5 + v2) != a2)
  {
    v2 += 8;
    if (v2 == 40)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[1] = "format_type";
      exception[2] = "invalid value";
      exception[3] = "value validator";
      exception[4] = a2;
      void *exception = &off_1001A0E40;
    }
  }
  return result;
}

void sub_100013A24(uint64_t a1, uint64_t *a2, void *a3)
{
  crc32(0, 0, 0);
  sub_10002B264((uint64_t)&v6, *(_DWORD **)(a1 + 888));
  *(void *)(a1 + 720) = v6;
  *(_OWORD *)(a1 + 792) = v11;
  *(_OWORD *)(a1 + 808) = v12;
  *(_OWORD *)(a1 + 824) = v13;
  *(_OWORD *)(a1 + 840) = v14;
  *(_OWORD *)(a1 + 728) = v7;
  *(_OWORD *)(a1 + 744) = v8;
  *(_OWORD *)(a1 + 760) = v9;
  *(_OWORD *)(a1 + 776) = v10;
  sub_10002B4F8(a1 + 64, a2, a3);
}

void sub_100013B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_100013BA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    sub_10000D758((const void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    sub_10000D758((const void **)(a1 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_100004944(v3);
  }
  return a1;
}

uint64_t sub_100013C04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    sub_10000D758((const void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

uint64_t sub_100013C44(uint64_t a1)
{
  *(void *)a1 = off_10019E9F8;
  sub_10000953C(a1 + 632, *(void **)(a1 + 640));
  sub_10001A194(*(void **)(a1 + 608));
  sub_1000273E4(a1 + 304);
  *(void *)a1 = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  return sub_100019B70(a1);
}

uint64_t sub_100013CE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 113)) {
    sub_10000C6D4(a1 + 24);
  }
  return a1;
}

void sub_100013F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    if (*((_DWORD *)__cxa_begin_catch(exception_object) + 2) == 45)
    {
      __cxa_end_catch();
      JUMPOUT(0x100013F34);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000146D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001494C(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v3 = "DiskImage::Context::flush(di_flush_mode)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      sub_100028E1C(v5, &v3);
      sub_1000039A0(v6, (uint64_t)"Disk image is terminated, skipping flush", 40);
      std::ostream::~ostream();
      sub_100029014((uint64_t)v5);
      std::ios::~ios();
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 24);
    return v1();
  }
}

void sub_100014A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100028F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100014B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v15) {
    sub_100004944(v15);
  }
  if (a15) {
    sub_100004944(a15);
  }
  a9.super_class = (Class)DIConvertManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t sub_100014C40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  long long v5 = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + 8) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = off_10019E428;
  *(void *)(a1 + 80) = a1 + 56;
  sub_100014D0C((void *)(a1 + 56), (uint64_t)(a2 + 7));
  return a1;
}

void sub_100014CE8(_Unwind_Exception *a1)
{
  sub_10000C78C(v2);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v4) {
    sub_1001514C0(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_100014D0C(void *a1, uint64_t a2)
{
  sub_100014D80((uint64_t)v4, a2);
  sub_100014E18(v4, a1);
  sub_10000C78C(v4);
  return a1;
}

uint64_t sub_100014D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100014E18(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100015078(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100003708(a1);
}

uint64_t sub_100015084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_1000150D8()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_10019E5C8;
}

void sub_100015128(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_100015160(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = qword_1001D3B40;
  *(void *)(a1 + 8) = qword_1001D3B40;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  sub_10010B5DC((_DWORD *)a1, (uint64_t)v8);
  _OWORD *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_1000151D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_100151558();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000151F0(void *a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v1 = a1 + 1;
  if (v2 == v1) {
    return qword_1001D3B40;
  }
  uint64_t v3 = *v1;
  if (*v1)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    do
    {
      uint64_t v4 = v1[2];
      BOOL v5 = *(void *)v4 == (void)v1;
      uint64_t v1 = (uint64_t *)v4;
    }
    while (v5);
  }
  return (*(unsigned char *)(v4 + 48) & 1) + *(void *)(v4 + 40) - 1;
}

void sub_10001524C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  sub_10001AD54(a1 + 72, *(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_100015324(uint64_t a1)
{
  *(void *)a1 = off_10019E5F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1208);
  if (v2) {
    sub_100004944(v2);
  }
  sub_10001524C(a1 + 904);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 896);
  if (v3) {
    sub_100004944(v3);
  }
  *(void *)a1 = &off_10019E708;
  *(void *)(a1 + 64) = off_10019E9F8;
  sub_10000953C(a1 + 696, *(void **)(a1 + 704));
  sub_10001A194(*(void **)(a1 + 672));
  sub_1000273E4(a1 + 368);
  *(void *)(a1 + 64) = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  sub_100019B70(a1 + 64);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    sub_100004944(v4);
  }
  return a1;
}

void sub_100015430(uint64_t a1)
{
  sub_100015324(a1);
  operator delete();
}

uint64_t sub_100015468()
{
  return 512;
}

uint64_t sub_100015470(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_100015478()
{
  return 1;
}

void sub_100015480()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Image info is not supported for the given image type", 0x16u);
}

uint64_t sub_1000154C0()
{
  return 1;
}

uint64_t sub_1000154C8()
{
  return 4294967218;
}

uint64_t sub_1000154D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = *(void *)(result + 1192);
  a2[2] = 0;
  a2[3] = v2;
  return result;
}

uint64_t sub_1000154E0()
{
  return 0;
}

uint64_t sub_1000154E8()
{
  return 0;
}

uint64_t sub_1000154F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void sub_1000154FC()
{
}

void sub_10001558C(uint64_t a1)
{
  if (!*(void *)(a1 + 1200))
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    sub_10001AF98(&v5, &v4);
    long long v2 = v4;
    long long v4 = 0uLL;
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1208);
    *(_OWORD *)(a1 + 1200) = v2;
    if (v3)
    {
      sub_100004944(v3);
      if (*((void *)&v4 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v4 + 1));
      }
    }
  }
  operator new();
}

void sub_1000157B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  int v15 = *(std::__shared_weak_count **)(v12 + 48);
  if (v15) {
    sub_100004944(v15);
  }
  sub_100019CE0(v13, *v14);
  if (a12) {
    sub_100004944(a12);
  }
  operator delete();
}

uint64_t sub_100015828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v133 = v135;
  long long v134 = xmmword_10016E350;
  long long __p = v132;
  long long v131 = xmmword_10016E350;
  unint64_t v8 = sub_10001CF70(a3, a4);
  uint64_t v9 = v8;
  if (v8 > 0x10)
  {
    if (v8 >= 0x333333333333334) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    long long v10 = operator new(40 * v8);
    sub_10001D8B0((uint64_t *)&__p, (unint64_t)v10, v9, (uint64_t)__p + 40 * v131, 0, 0);
  }
  uint64_t v11 = a4[18] - *(void *)(a3 + 144);
  sub_10001D068(a1 + 64, *(void *)(a3 + 24), v11 & ~(v11 >> 63), (uint64_t *)&v133);
  uint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v116 = *a4;
  v117 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v82 = a1;
  long long v13 = *(_OWORD *)(a4 + 7);
  v118[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v119 = a4[6];
  long long v120 = v13;
  long long v14 = *(_OWORD *)(a4 + 11);
  long long v121 = *(_OWORD *)(a4 + 9);
  long long v122 = v14;
  char v123 = *((unsigned char *)a4 + 104);
  int v15 = (std::__shared_weak_count *)a4[15];
  uint64_t v124 = a4[14];
  v125 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v126 = *((_OWORD *)a4 + 8);
  uint64_t v127 = a4[18];
  char v128 = *((unsigned char *)a4 + 152);
  v114[0] = 0;
  char v115 = 0;
  unint64_t v16 = (char *)v133;
  uint64_t v17 = *((void *)v133 + 3);
  uint64_t v18 = *(std::__shared_weak_count **)(a3 + 8);
  v101 = *(void **)a3;
  v102 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a3 + 56;
  long long v20 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v103 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v103[9] = *(_OWORD *)(a3 + 25);
  uint64_t v104 = *(void *)(a3 + 48);
  long long v105 = v20;
  long long v21 = *(_OWORD *)(a3 + 88);
  long long v106 = *(_OWORD *)(a3 + 72);
  long long v107 = v21;
  char v108 = *(unsigned char *)(a3 + 104);
  long long v22 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v109 = *(void *)(a3 + 112);
  v110 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v111 = *(_OWORD *)(a3 + 128);
  uint64_t v112 = *(void *)(a3 + 144);
  char v113 = *(unsigned char *)(a3 + 152);
  uint64_t v83 = a2;
  if (!(void)v134)
  {
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    goto LABEL_97;
  }
  uint64_t v80 = (uint64_t)(a4 + 7);
  uint64_t v81 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v16[64 * (void)v134];
  v84 = (uint64_t **)(a2 + 16);
  v85 = v25;
  while (1)
  {
    unint64_t v26 = *((void *)v16 + 4);
    if (v26)
    {
      if (sub_1000410B8((uint64_t)&v101, (uint64_t)&v116)) {
        break;
      }
    }
    if (v26 > *(void *)&v103[16]) {
      sub_100041D84((uint64_t)&v101);
    }
    if (sub_1000410B8((uint64_t)&v101, (uint64_t)&v116))
    {
      *(void *)&long long __dst = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
      *((void *)&__dst + 1) = 264;
      v98.i32[0] = 16;
      sub_10001D250(v86, &__dst);
      sub_1000039A0(v92, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      sub_10011BD44(v92, (int *)v16);
      sub_1000039A0(v92, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(v92[0] - 24)));
      int v65 = std::locale::use_facet((const std::locale *)&v95, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale((std::locale *)&v95);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      sub_10001E348((uint64_t)v86);
      goto LABEL_96;
    }
    uint64_t v27 = v101;
    uint64_t v28 = v102;
    if (v102) {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v29 = *(void *)&v103[16];
    if (v26 <= *(void *)&v103[16])
    {
      if (*(_DWORD *)v16)
      {
        int8x16_t v32 = *(int8x16_t *)(v16 + 8);
        uint64_t v33 = *((void *)v16 + 4);
        *(void *)&long long __dst = v27;
        *((void *)&__dst + 1) = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v98 = vextq_s8(v32, v32, 8uLL);
        uint64_t v99 = v33;
        char v100 = 0;
        if (v23)
        {
          *(void *)&long long v95 = v16;
          unint64_t v34 = sub_10001F2E0(v84, (unsigned int *)v16, (uint64_t)&unk_1001705CC, (_DWORD **)&v95);
          (*(void (**)(long long *__return_ptr))(*v34[5] + 128))(v86);
          if ((void)v131 == *((void *)&v131 + 1))
          {
            sub_10001FC2C((uint64_t *)&__p, (uint64_t)__p + 40 * v131, 1, (uint64_t)v86, &v95);
          }
          else
          {
            sub_10001CB94((unint64_t)__p + 40 * v131, (uint64_t)v86);
            *(void *)&long long v131 = v131 + 1;
          }
          sub_100041C48((uint64_t)&v101, v26);
          uint64_t v35 = v23;
          goto LABEL_31;
        }
        *(void *)&v86[0] = v16;
        uint64_t v37 = sub_10001F2E0(v84, (unsigned int *)v16, (uint64_t)&unk_1001705CC, (_DWORD **)v86);
        int v38 = (*(uint64_t (**)(uint64_t *, long long *))(*v37[5] + 88))(v37[5], &__dst);
        uint64_t v24 = v38;
        if (v38 < 0)
        {
          uint64_t v35 = 0;
          char v36 = 0;
          int v31 = 2;
          goto LABEL_32;
        }
        if (*(unsigned char *)(v83 + 56) && *((int *)v16 + 8) > (uint64_t)v38)
        {
          *(void *)&long long v95 = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
          *((void *)&v95 + 1) = 264;
          int v96 = 16;
          sub_10001D520(v86, &v95);
          sub_1000039A0(v92, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_1000039A0(v92, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_1000039A0(v92, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(v92[0] - 24)));
          unint64_t v39 = std::locale::use_facet(&v129, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
          std::locale::~locale(&v129);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v35 = 0;
          std::ostream::~ostream();
          sub_10001F434((uint64_t)v86);
          std::ios::~ios();
          char v36 = 0;
          int v31 = 2;
          uint64_t v24 = -5;
          goto LABEL_32;
        }
        if ((void)v134)
        {
          unint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = (void)v134 << 6;
          uint64_t v43 = (uint64_t *)((char *)v133 + 32);
          do
          {
            uint64_t v45 = *v43;
            v43 += 8;
            uint64_t v44 = v45;
            uint64_t v46 = v45 + v40;
            uint64_t v47 = v45 + v41;
            uint64_t v48 = v29 - v41;
            BOOL v49 = v45 + v41 > v29;
            if (v45 + v41 >= v29) {
              uint64_t v41 = 0;
            }
            else {
              uint64_t v41 = v47;
            }
            if (v49)
            {
              uint64_t v41 = v44;
              uint64_t v50 = v48;
            }
            else
            {
              uint64_t v50 = 0;
            }
            unint64_t v40 = v46 + v50;
            v42 -= 64;
          }
          while (v42);
          uint64_t v35 = 0;
          if (v40 > v29 + v29 * *(void *)(v82 + 24))
          {
            uint64_t v51 = *((void *)v16 + 6);
            memmove((void *)__dst, (const void *)(__dst + v51), *((void *)v16 + 4) - v51);
LABEL_61:
            v26 -= v51;
            sub_100041C48((uint64_t)&v101, v26);
            uint64_t v79 = v17;
            if ((void)v134)
            {
              uint64_t v52 = 0;
              uint64_t v53 = 0;
              uint64_t v54 = (void)v134 << 6;
              unint64_t v55 = (uint64_t *)((char *)v133 + 32);
              do
              {
                uint64_t v57 = *v55;
                v55 += 8;
                uint64_t v56 = v57;
                uint64_t v58 = v57 + v52;
                uint64_t v59 = v57 + v53;
                uint64_t v60 = v29 - v53;
                BOOL v61 = v57 + v53 > v29;
                if (v57 + v53 >= v29) {
                  uint64_t v53 = 0;
                }
                else {
                  uint64_t v53 = v59;
                }
                if (v61)
                {
                  uint64_t v53 = v56;
                  uint64_t v62 = v60;
                }
                else
                {
                  uint64_t v62 = 0;
                }
                uint64_t v52 = v58 + v62;
                v54 -= 64;
              }
              while (v54);
            }
            else
            {
              uint64_t v52 = 0;
            }
            char v63 = sub_10004270C(v81);
            uint64_t v64 = v52 - v51;
            uint64_t v17 = v51 + v79;
            sub_10004133C((uint64_t)v86, v19, v80, v51 + v79, v64, v63);
            sub_10001FBB8((uint64_t)v114);
            sub_1000196DC((uint64_t)v114, (uint64_t)v86);
            char v115 = 1;
            if (v94) {
              sub_100004944(v94);
            }
            if (v93) {
              sub_100004944(v93);
            }
            if (v91) {
              sub_100004944(v91);
            }
            if (v90) {
              sub_100004944(v90);
            }
            if (v89) {
              sub_100004944(v89);
            }
            if (v87) {
              sub_100004944(v87);
            }
            sub_1000414AC((uint64_t)v114, (uint64_t)v86);
            sub_100018CC8((uint64_t)&v101, v86);
            if (v88) {
              sub_100004944(v88);
            }
            if (*((void *)&v86[0] + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v86[0] + 1));
            }
            sub_100041B0C((uint64_t)&v101, v26);
            sub_1000411FC((uint64_t)v114, (uint64_t)v86);
            sub_100018CC8((uint64_t)&v116, v86);
            if (v88) {
              sub_100004944(v88);
            }
            if (*((void *)&v86[0] + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&v86[0] + 1));
            }
LABEL_31:
            int v31 = 0;
            char v36 = 1;
LABEL_32:
            if (*((void *)&__dst + 1)) {
              sub_100004944(*((std::__shared_weak_count **)&__dst + 1));
            }
            if ((v36 & 1) == 0)
            {
              uint64_t v23 = v35;
              goto LABEL_38;
            }
LABEL_37:
            int v31 = 0;
            uint64_t v23 = v26 + v35;
LABEL_38:
            uint64_t v25 = v85;
            if (!v28) {
              goto LABEL_40;
            }
LABEL_39:
            sub_100004944(v28);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v51 = 0;
        goto LABEL_61;
      }
      uint64_t v35 = v23;
      bzero(v27, v26);
      sub_100041C48((uint64_t)&v101, v26);
      goto LABEL_37;
    }
    *(void *)&long long __dst = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
    *((void *)&__dst + 1) = 264;
    v98.i32[0] = 16;
    sub_10001D3B8(v86, &__dst);
    sub_1000039A0(v92, (uint64_t)"Udif: needs to read ", 20);
    sub_10011BD44(v92, (int *)v16);
    sub_1000039A0(v92, (uint64_t)" but buffer is too small ", 25);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(v92[0] - 24)));
    unint64_t v30 = std::locale::use_facet((const std::locale *)&v95, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)&v95);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10001EB5C((uint64_t)v86);
    std::ios::~ios();
    int v31 = 2;
    uint64_t v24 = -28;
    if (v28) {
      goto LABEL_39;
    }
LABEL_40:
    if (!v31)
    {
      v16 += 64;
      if (v16 != v25) {
        continue;
      }
    }
    goto LABEL_97;
  }
  *(void *)&long long __dst = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
  *((void *)&__dst + 1) = 264;
  v98.i32[0] = 16;
  sub_10001D0E8(v86, &__dst);
  sub_1000039A0(v92, (uint64_t)"Udif: needs to read ", 20);
  sub_10011BD44(v92, (int *)v16);
  sub_1000039A0(v92, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(v92[0] - 24)));
  v66 = std::locale::use_facet((const std::locale *)&v95, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale((std::locale *)&v95);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  sub_10001DB34((uint64_t)v86);
LABEL_96:
  std::ios::~ios();
  uint64_t v24 = -28;
LABEL_97:
  uint64_t v67 = v23;
  v68 = *(void **)(v83 + 16);
  if (v68 != (void *)(v83 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v68[5] + 144))(v68[5]);
      v69 = (void *)v68[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (void *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (void *)v68[2];
          BOOL v71 = *v70 == (void)v68;
          v68 = v70;
        }
        while (!v71);
      }
      v68 = v70;
    }
    while (v70 != (void *)(v83 + 24));
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if ((void)v131)
    {
      v72 = (unsigned int *)__p;
      v73 = (unsigned int *)((char *)__p + 40 * v131);
      v74 = v133;
      while (1)
      {
        do
        {
          int v75 = v74[16];
          v74 += 16;
        }
        while (!v75);
        int v76 = sub_10001D688(v72);
        uint64_t v24 = v76;
        if (v76 < 0) {
          break;
        }
        if (*(unsigned char *)(v83 + 56) && (int)v74[8] > (uint64_t)v76)
        {
          *(void *)&long long __dst = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
          *((void *)&__dst + 1) = 264;
          v98.i32[0] = 16;
          sub_10001D748(v86, &__dst);
          sub_1000039A0(v92, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_1000039A0(v92, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_1000039A0(v92, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(v92[0] - 24)));
          v77 = std::locale::use_facet((const std::locale *)&v95, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
          std::locale::~locale((std::locale *)&v95);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_10001FFAC((uint64_t)v86);
          std::ios::~ios();
          uint64_t v24 = -5;
          break;
        }
        v72 += 10;
        if (v72 == v73)
        {
          uint64_t v24 = v67;
          break;
        }
      }
    }
    else
    {
      uint64_t v24 = v67;
    }
  }
  if (v110) {
    sub_100004944(v110);
  }
  if (v102) {
    sub_100004944(v102);
  }
  sub_1000197F0((uint64_t)v114);
  if (v125) {
    sub_100004944(v125);
  }
  if (v117) {
    sub_100004944(v117);
  }
  if (*((void *)&v131 + 1) && v132 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v134 + 1) && v135 != v133) {
    operator delete(v133);
  }
  return v24;
}

void sub_1000165E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (STACK[0x620] && a14 != STACK[0x610]) {
    operator delete((void *)STACK[0x610]);
  }
  if (STACK[0x8B8])
  {
    if (a15 != STACK[0x8A8]) {
      operator delete((void *)STACK[0x8A8]);
    }
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10001674C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v34[0] = sub_100020730;
  v34[1] = 0;
  v34[2] = a1;
  v34[3] = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v24 = *(void *)(a3 + 48);
  long long v25 = *(_OWORD *)(a3 + 56);
  long long v26 = *(_OWORD *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 88);
  char v28 = *(unsigned char *)(a3 + 104);
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v29 = *(void *)(a3 + 112);
  unint64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *(_OWORD *)(a3 + 128);
  uint64_t v32 = *(void *)(a3 + 144);
  char v33 = *(unsigned char *)(a3 + 152);
  uint64_t v6 = *(void *)(a4 + 8);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v12 = *(void *)(a4 + 48);
  long long v13 = *(_OWORD *)(a4 + 56);
  long long v14 = *(_OWORD *)(a4 + 72);
  long long v15 = *(_OWORD *)(a4 + 88);
  char v16 = *(unsigned char *)(a4 + 104);
  long long v7 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v17 = *(void *)(a4 + 112);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *(_OWORD *)(a4 + 128);
  uint64_t v20 = *(void *)(a4 + 144);
  char v21 = *(unsigned char *)(a4 + 152);
  unint64_t v8 = sub_100018640((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    sub_100004944(v18);
  }
  if (*((void *)&v10 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    sub_100004944(v30);
  }
  if (*((void *)&v22 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_1000168E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100016904(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10001A470(v14, a3);
  sub_1000414AC((uint64_t)v15, (uint64_t)v11);
  double v5 = sub_1000411FC((uint64_t)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 144))(a1, a2, v11, v8, v5);
  if (v10) {
    sub_100004944(v10);
  }
  if (v9) {
    sub_100004944(v9);
  }
  if (v13) {
    sub_100004944(v13);
  }
  if (v12) {
    sub_100004944(v12);
  }
  sub_1000049B8(v14);
  return v6;
}

void sub_100016A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_100016A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = *(void *)(a3 + 24);
  std::locale v129 = (long long *)(a3 + 24);
  unint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = 512;
  if (v7 > 0x200) {
    uint64_t v8 = *(void *)(a3 + 16);
  }
  if (!v7) {
    uint64_t v8 = 0;
  }
  *(void *)&long long v157 = v6 >> 9;
  *((void *)&v157 + 1) = (v6 + v8 + 511) >> 9;
  LOBYTE(v158) = 2;
  uint64_t v9 = sub_10000D6B0(a1 + 664, (uint64_t)&v157);
  uint64_t v133 = a1;
  uint64_t v10 = a1 + 672;
  if (a1 + 672 != v9) {
    uint64_t v10 = *(void *)(v9 + 56);
  }
  uint64_t v11 = v10 + 24;
  *(_OWORD *)long long __p = v157;
  __p[16] = v158;
  uint64_t v12 = *(void *)(v3 + 8);
  v170 = *(uint64_t (***)())v3;
  *(void *)&long long v171 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v171 + 1) = v7;
  sub_1000209E8(v11, (uint64_t *)__p);
  if ((void)v171) {
    sub_100004944((std::__shared_weak_count *)v171);
  }
  long long v13 = *(std::__shared_weak_count **)(v3 + 8);
  uint64_t v14 = *(void *)(v3 + 16);
  long long v15 = *(uint64_t (***)())v3;
  long long v131 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(void *)(v3 + 16);
  long long v155 = *v129;
  char v156 = *((unsigned char *)v129 + 16);
  unsigned int v154 = *(_DWORD *)(a1 + 1184);
  *(void *)long long __p = &v154;
  uint64_t v17 = sub_10001F2E0((uint64_t **)(a2 + 16), &v154, (uint64_t)&unk_1001705CC, (_DWORD **)__p);
  uint64_t v18 = v17[5];
  long long v19 = (std::__shared_weak_count *)v17[6];
  v152 = v18;
  v153 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18)
  {
    int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v18 + 80))(v18, v3);
    sub_10014951C((uint64_t)&v152, (uint64_t)__p);
    uint64_t v21 = *(void *)__p;
    if (*(void *)&__p[8]) {
      sub_100004944(*(std::__shared_weak_count **)&__p[8]);
    }
    if (v20 < 1)
    {
      if (v20 == -5)
      {
        uint64_t v23 = v153;
        v152 = 0;
        v153 = 0;
        if (v23) {
          sub_100004944(v23);
        }
        int v20 = v14;
      }
    }
    else
    {
      long long v15 = *(uint64_t (***)())(v21 + 64);
      long long v22 = *(std::__shared_weak_count **)(v21 + 72);
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v16 = *(void *)(v21 + 80);
      *(_OWORD *)long long __p = *(_OWORD *)(v21 + 88);
      __p[16] = *(unsigned char *)(v21 + 104);
      if (v131) {
        sub_100004944(v131);
      }
      long long v155 = *(_OWORD *)__p;
      char v156 = __p[16];
      long long v131 = v22;
    }
    uint64_t v24 = *(std::__shared_weak_count **)(v21 + 72);
    *(void *)(v21 + 64) = 0;
    *(void *)(v21 + 72) = 0;
    if (v24) {
      sub_100004944(v24);
    }
    *(void *)(v21 + 80) = 0;
    *(void *)(v21 + 88) = 0;
    *(unsigned char *)(v21 + 104) = 0;
    *(void *)(v21 + 96) = 0;
  }
  else
  {
    int v20 = v14;
  }
  if (v20 <= 0)
  {
    *(void *)&long long v162 = "io_result_t DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::write(DiskImage::Context &, const sg_entry &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v162 + 1) = 1016;
    LODWORD(v163) = 16;
    sub_100020754(__p, &v162);
    char v28 = v131;
    sub_1000039A0(v181, (uint64_t)"DiskImageUDIFWritable: context backend returned ", 48);
    std::ostream::operator<<();
    sub_1000039A0(v181, (uint64_t)" while writing ", 15);
    sub_100149114(v181);
    std::ostream::~ostream();
    sub_100021160((uint64_t)__p);
    std::ios::~ios();
    sub_1000208BC(v133);
    if (v20 >= 0) {
      uint64_t v29 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v29 = v20;
    }
    goto LABEL_230;
  }
  if (!v152)
  {
    sub_10002236C((int *)__p, 1);
    unsigned int v154 = *(_DWORD *)__p;
  }
  uint64_t v25 = *(void *)(v133 + 888);
  *(_OWORD *)long long __p = v157;
  __p[16] = v158;
  v170 = v15;
  *(void *)&long long v171 = v131;
  if (v131) {
    atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)&v171 + 1) = v16;
  sub_1000209E8(v25, (uint64_t *)__p);
  if ((void)v171) {
    sub_100004944((std::__shared_weak_count *)v171);
  }
  unsigned int v26 = v154;
  long long v143 = v157;
  uint64_t v144 = v158;
  unsigned long long v145 = __PAIR128__(v151, v16);
  *(void *)&long long v146 = v15;
  *((void *)&v146 + 1) = v131;
  if (v131) {
    atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)v147 = v16;
  *(_OWORD *)&v147[8] = v155;
  v147[24] = v156;
  long long v27 = *(std::__shared_weak_count **)(a2 + 48);
  *(void *)&long long v148 = v133;
  *((void *)&v148 + 1) = *(void *)(a2 + 40);
  v149 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v150 = v26;
  v159[0] = *(_DWORD *)((char *)&v144 + 1);
  *(_DWORD *)((char *)v159 + 3) = HIDWORD(v144);
  v132 = (std::mutex *)(v133 + 904);
  char v28 = v131;
  std::mutex::lock((std::mutex *)(v133 + 904));
  if (*(unsigned char *)(v133 + 1176))
  {
    std::mutex::unlock(v132);
    LODWORD(v29) = -53;
    goto LABEL_45;
  }
  *(_OWORD *)long long __p = v143;
  __p[16] = v144;
  *(_DWORD *)&__p[17] = v159[0];
  *(_DWORD *)&__p[20] = *(_DWORD *)((char *)v159 + 3);
  long long v171 = v143;
  uint64_t v172 = v144;
  unsigned long long v173 = v145;
  *(_OWORD *)((char *)v177 + 9) = *(_OWORD *)&v147[9];
  long long v176 = v146;
  v177[0] = *(_OWORD *)v147;
  v170 = off_1001A02D0;
  uint64_t v174 = v133 + 880;
  char v175 = 0;
  long long v146 = 0uLL;
  long long v178 = v148;
  v179 = v149;
  v149 = 0;
  unsigned int v180 = v150;
  unint64_t v30 = (void *)(v133 + 984);
  long long v31 = (void *)(v133 + 984);
  v130 = (void *)(v133 + 984);
  uint64_t v32 = *(void **)(v133 + 984);
  if (!v32) {
    goto LABEL_60;
  }
  long long v31 = (void *)(v133 + 984);
  while (1)
  {
    while (1)
    {
      unint64_t v30 = v32;
      char v33 = v32 + 4;
      if (!sub_100022410((unint64_t *)__p, v32 + 4)) {
        break;
      }
      uint64_t v32 = (void *)*v30;
      long long v31 = v30;
      if (!*v30) {
        goto LABEL_60;
      }
    }
    if (!sub_100022410(v33, (unint64_t *)__p)) {
      break;
    }
    long long v31 = v30 + 1;
    uint64_t v32 = (void *)v30[1];
    if (!v32) {
      goto LABEL_60;
    }
  }
  if (!*v31)
  {
LABEL_60:
    unint64_t v34 = operator new(0xC8uLL);
    v34[2] = *(_OWORD *)__p;
    uint64_t v35 = *(void *)&__p[16];
    void v34[4] = v171;
    *((void *)v34 + 10) = v172;
    *(_OWORD *)((char *)v34 + 88) = v173;
    *((void *)v34 + 6) = v35;
    *((void *)v34 + 7) = off_1001A02D0;
    *((void *)v34 + 13) = v174;
    *((unsigned char *)v34 + 112) = v175;
    *(_OWORD *)((char *)v34 + 120) = v176;
    long long v176 = 0uLL;
    *(_OWORD *)((char *)v34 + 145) = *(_OWORD *)((char *)v177 + 9);
    *(_OWORD *)((char *)v34 + 136) = v177[0];
    *(_OWORD *)((char *)v34 + 168) = v178;
    *((void *)v34 + 23) = v179;
    *((void *)&v178 + 1) = 0;
    v179 = 0;
    *((_DWORD *)v34 + 48) = v180;
    *(void *)unint64_t v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = v30;
    void *v31 = v34;
    uint64_t v36 = **(void **)(v133 + 976);
    if (v36)
    {
      *(void *)(v133 + 976) = v36;
      unint64_t v34 = (_OWORD *)*v31;
    }
    sub_10000CAF8(*(uint64_t **)(v133 + 984), (uint64_t *)v34);
    ++*(void *)(v133 + 992);
  }
  if (v179) {
    sub_100004944(v179);
  }
  char v28 = v131;
  if (*((void *)&v176 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v176 + 1));
  }
  if ((v144 & 2) != 0) {
    uint64_t v37 = v143;
  }
  else {
    uint64_t v37 = v143 + 1;
  }
  uint64_t v38 = *(void *)(v133 + 1168);
  std::mutex::unlock(v132);
  if (v37 != v38)
  {
LABEL_225:
    uint64_t v29 = *(void *)(v3 + 16);
    goto LABEL_226;
  }
  uint64_t v127 = v3;
  uint64_t v141 = v133 + 1112;
  v142 = (uint64_t *)(v133 + 1000);
  char v128 = "T_E_ENS_9allocatorIcEEEE";
  do
  {
    *(void *)long long __p = &v170;
    *(_OWORD *)&__p[8] = xmmword_10016E350;
    std::mutex::lock(v132);
    unint64_t v39 = *(void **)(v133 + 976);
    unint64_t v40 = *(void *)(v133 + 1168);
    if (v39 != v130)
    {
      uint64_t v41 = *(void **)(v133 + 976);
      while (!sub_10010B4D0((uint64_t)v142, v141))
      {
        uint64_t v42 = v41[4];
        if ((v41[6] & 2) == 0) {
          ++v42;
        }
        if (v42 != v40) {
          break;
        }
        unint64_t v40 = v41[5] + (v41[6] & 1);
        uint64_t v43 = *(void *)(v133 + 1016);
        char v44 = *(unsigned char *)(v133 + 1024);
        while (v40 > (unint64_t)(v44 & 1) + v43 - 1)
        {
          sub_10010B7F8(v142);
          if (sub_10010B4D0((uint64_t)v142, v141)) {
            break;
          }
          char v44 = *(unsigned char *)(v133 + 1024);
          if ((v44 & 2) != 0) {
            unint64_t v40 = *(void *)(v133 + 1008);
          }
          else {
            unint64_t v40 = *(void *)(v133 + 1008) + 1;
          }
          uint64_t v43 = *(void *)(v133 + 1016);
        }
        uint64_t v45 = (void *)v41[1];
        if (v45)
        {
          do
          {
            uint64_t v46 = v45;
            uint64_t v45 = (void *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            uint64_t v46 = (void *)v41[2];
            BOOL v47 = *v46 == (void)v41;
            uint64_t v41 = v46;
          }
          while (!v47);
        }
        uint64_t v41 = v46;
        if (v46 == v130)
        {
          uint64_t v41 = (void *)(v133 + 984);
          break;
        }
      }
      if (v39 != v41)
      {
        unint64_t v48 = 0;
        BOOL v49 = v39;
        do
        {
          unint64_t v50 = v48;
          uint64_t v51 = (void *)v49[1];
          if (v51)
          {
            do
            {
              uint64_t v52 = v51;
              uint64_t v51 = (void *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              uint64_t v52 = (void *)v49[2];
              BOOL v47 = *v52 == (void)v49;
              BOOL v49 = v52;
            }
            while (!v47);
          }
          ++v48;
          BOOL v49 = v52;
        }
        while (v52 != v41);
        if (*(void *)&__p[16] <= v50)
        {
          if (v50 >= 0xE38E38E38E38E3) {
            sub_10001A67C("get_next_capacity, allocator's max size reached");
          }
          uint64_t v53 = (char *)operator new(144 * v48);
          uint64_t v54 = v53;
          uint64_t v55 = *(void *)__p;
          v163 = __p;
          if (*(void *)&__p[8])
          {
            uint64_t v56 = 0;
            uint64_t v57 = 144 * *(void *)&__p[8];
            do
            {
              uint64_t v58 = &v53[v56];
              uint64_t v59 = (void *)(v55 + v56);
              long long v60 = *(_OWORD *)(v55 + v56 + 8);
              *((void *)v58 + 3) = *(void *)(v55 + v56 + 24);
              *(_OWORD *)(v58 + 8) = v60;
              *((_OWORD *)v58 + 2) = *(_OWORD *)(v55 + v56 + 32);
              *(void *)uint64_t v58 = off_1001A02D0;
              uint64_t v61 = *(void *)(v55 + v56 + 48);
              v58[56] = *(unsigned char *)(v55 + v56 + 56);
              *((void *)v58 + 6) = v61;
              *((_OWORD *)v58 + 4) = *(_OWORD *)(v55 + v56 + 64);
              long long v62 = *(_OWORD *)(v55 + v56 + 80);
              long long v63 = *(_OWORD *)(v55 + v56 + 89);
              v59[8] = 0;
              v59[9] = 0;
              *(_OWORD *)(v58 + 89) = v63;
              *((_OWORD *)v58 + 5) = v62;
              *((void *)v58 + 14) = *(void *)(v55 + v56 + 112);
              *(_OWORD *)(v58 + 120) = *(_OWORD *)(v55 + v56 + 120);
              v59[15] = 0;
              v59[16] = 0;
              *((_DWORD *)v58 + 34) = *(_DWORD *)(v55 + v56 + 136);
              v56 += 144;
            }
            while (v57 != v56);
          }
          long long v162 = 0uLL;
          sub_1000231D0((uint64_t *)&v162);
          if (v55)
          {
            uint64_t v64 = *(void *)&__p[8];
            if (*(void *)&__p[8])
            {
              int v65 = (std::__shared_weak_count **)(v55 + 72);
              do
              {
                v66 = v65[7];
                if (v66) {
                  sub_100004944(v66);
                }
                if (*v65) {
                  sub_100004944(*v65);
                }
                v65 += 18;
                --v64;
              }
              while (v64);
            }
            if (&v170 != *(uint64_t (****)())__p) {
              operator delete(*(void **)__p);
            }
          }
          *(void *)long long __p = v54;
          *(void *)&__p[16] = v48;
        }
        do
        {
          uint64_t v67 = *(void *)__p;
          uint64_t v68 = *(void *)&__p[8];
          uint64_t v69 = *(void *)__p + 144 * *(void *)&__p[8];
          if (*(void *)&__p[8] == *(void *)&__p[16])
          {
            sub_10002322C((uint64_t)__p, (char *)v69, (uint64_t)(v39 + 7), &v162);
          }
          else
          {
            *(void *)uint64_t v69 = off_1001A0318;
            long long v70 = *((_OWORD *)v39 + 4);
            *(void *)(v69 + 24) = v39[10];
            *(_OWORD *)(v69 + 8) = v70;
            *(_OWORD *)(v69 + 32) = *(_OWORD *)(v39 + 11);
            *(void *)uint64_t v69 = off_1001A02D0;
            uint64_t v71 = v39[13];
            *(unsigned char *)(v69 + 56) = *((unsigned char *)v39 + 112);
            *(void *)(v69 + 48) = v71;
            uint64_t v72 = v67 + 144 * v68;
            *(_OWORD *)(v72 + 64) = *(_OWORD *)(v39 + 15);
            v39[15] = 0;
            v39[16] = 0;
            long long v73 = *(_OWORD *)(v39 + 17);
            *(_OWORD *)(v72 + 89) = *(_OWORD *)((char *)v39 + 145);
            *(_OWORD *)(v72 + 80) = v73;
            *(void *)(v72 + 112) = v39[21];
            *(_OWORD *)(v72 + 120) = *((_OWORD *)v39 + 11);
            v39[22] = 0;
            v39[23] = 0;
            *(_DWORD *)(v72 + 136) = *((_DWORD *)v39 + 48);
            ++*(void *)&__p[8];
          }
          v74 = (void *)v39[1];
          int v75 = v39;
          if (v74)
          {
            do
            {
              int v76 = v74;
              v74 = (void *)*v74;
            }
            while (v74);
          }
          else
          {
            do
            {
              int v76 = (void *)v75[2];
              BOOL v47 = *v76 == (void)v75;
              int v75 = v76;
            }
            while (!v47);
          }
          if (*(void **)(v133 + 976) == v39) {
            *(void *)(v133 + 976) = v76;
          }
          --*(void *)(v133 + 992);
          sub_10000D000(*(uint64_t **)(v133 + 984), v39);
          sub_10001ADB0((uint64_t)(v39 + 4));
          operator delete(v39);
          unint64_t v39 = v76;
        }
        while (v76 != v41);
      }
    }
    std::mutex::unlock(v132);
    if (!*(void *)&__p[8])
    {
      int v77 = 0;
      goto LABEL_201;
    }
    int v77 = 0;
    uint64_t v78 = *(void *)__p;
    uint64_t v140 = *(void *)__p + 144 * *(void *)&__p[8];
    do
    {
      uint64_t v79 = *(void *)(v78 + 120);
      uint64_t v80 = *(unsigned char **)(v78 + 80);
      if (*(unsigned char *)(v78 + 56))
      {
        unint64_t add = *(void *)(v78 + 40);
      }
      else
      {
        *(unsigned char *)(v78 + 56) = 1;
        unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)(v78 + 48), *(void *)(v78 + 32));
        *(void *)(v78 + 40) = add;
      }
      unint64_t v82 = *(void *)(v78 + 96);
      uint64_t v83 = *(void *)(v78 + 72);
      *(void *)&long long v162 = *(void *)(v78 + 64);
      *((void *)&v162 + 1) = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      v163 = v80;
      unint64_t v164 = add;
      unint64_t v165 = v82;
      LOBYTE(v166) = 0;
      int v84 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v79 + 96))(v79, &v162);
      if (*((void *)&v162 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v162 + 1));
      }
      uint64_t v85 = *(void *)(v78 + 112);
      if (v84 < 1)
      {
        sub_1000208BC(*(void *)(v78 + 112));
        *(void *)&long long v160 = "DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work::execute() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
        *((void *)&v160 + 1) = 974;
        int v161 = 16;
        sub_100023550(&v162, &v160);
        sub_1000039A0(v167, (uint64_t)"DiskImageUDIFWritable: Sink backend returned ", 45);
        std::ostream::operator<<();
        sub_1000039A0(v167, (uint64_t)" while writing ", 15);
        sub_100149114(v167);
        std::ostream::~ostream();
        sub_100023F8C((uint64_t)&v162);
        std::ios::~ios();
        goto LABEL_185;
      }
      if (*(unsigned char *)(v78 + 56))
      {
        unint64_t v86 = *(void *)(v78 + 40);
      }
      else
      {
        *(unsigned char *)(v78 + 56) = 1;
        unint64_t v86 = atomic_fetch_add(*(atomic_ullong *volatile *)(v78 + 48), *(void *)(v78 + 32));
        *(void *)(v78 + 40) = v86;
      }
      int v87 = *(_DWORD *)(v78 + 136);
      uint64_t v88 = sub_10000D6B0(v85 + 664, v78 + 8);
      if (v85 + 672 == v88)
      {
        unint64_t v89 = 0;
      }
      else
      {
        char v139 = *(unsigned char *)(v88 + 48);
        unint64_t v89 = *(void *)(v88 + 32);
        uint64_t v138 = *(void *)(v88 + 40);
      }
      unint64_t v90 = atomic_load((unint64_t *)(v85 + 688));
      unint64_t v91 = v86 + v84;
      unint64_t v92 = v90;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v85 + 688), &v92, v91);
      if (v92 != v90)
      {
        unint64_t v93 = v92;
        do
        {
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v85 + 688), &v93, v91);
          BOOL v47 = v93 == v92;
          unint64_t v92 = v93;
        }
        while (!v47);
      }
      *(void *)&long long v160 = v85 + 192;
      BYTE8(v160) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v85 + 192));
      if (v87 == 1 && *(unsigned char *)(v85 + 856))
      {
        unint64_t v136 = v86;
        uint64_t v137 = v84;
        uint64_t v94 = *(void *)(v78 + 8);
        uint64_t v95 = *(void *)(v78 + 16);
        char v96 = *(unsigned char *)(v78 + 24);
        char v97 = v96;
        v168[0] = *(_DWORD *)(v78 + 25);
        *(_DWORD *)((char *)v168 + 3) = *(_DWORD *)(v78 + 28);
        char v98 = v139;
        if ((v139 & 2) != 0) {
          unint64_t v99 = v89;
        }
        else {
          unint64_t v99 = v89 + 1;
        }
        uint64_t v135 = v94;
        if ((v96 & 2) != 0) {
          uint64_t v100 = v94;
        }
        else {
          uint64_t v100 = v94 + 1;
        }
        if (v99 == v100)
        {
          uint64_t v101 = v138;
        }
        else
        {
          *(void *)&long long v162 = v100 - 1;
          *((void *)&v162 + 1) = v100;
          LOBYTE(v163) = 2;
          uint64_t v103 = sub_10000D6B0(v85 + 72, (uint64_t)&v162);
          sub_10000D384(v85 + 72, (uint64_t)&v162);
          if (v85 + 80 == v103
            || (char v104 = *(unsigned char *)(v103 + 48), v105 = (v104 & 1) + *(void *)(v103 + 40), v105 - 1 < v99))
          {
            char v97 = v96;
            uint64_t v101 = v138;
          }
          else
          {
            uint64_t v101 = v138;
            if (v100 == v105 && *(_DWORD *)(v103 + 56) == 1)
            {
              unint64_t v136 = *(void *)(v103 + 64);
              uint64_t v137 = *(void *)(v103 + 72) + v84;
              BOOL v47 = (v104 & 2) == 0;
              uint64_t v106 = *(void *)(v103 + 32);
              if (v47) {
                ++v106;
              }
              uint64_t v135 = v106;
              v95 += v96 & 1;
              sub_10000CF8C((uint64_t **)(v85 + 72), (uint64_t *)v103);
              operator delete((void *)v103);
              uint64_t v101 = v138;
              char v97 = 2;
            }
            else
            {
              char v97 = v96;
            }
          }
          char v98 = v139;
        }
        unint64_t v107 = v101 + (v98 & 1) - 1;
        uint64_t v108 = v95 + (v97 & 1) - 1;
        if (v107 == v108)
        {
          unint64_t v110 = v136;
          uint64_t v109 = v137;
          uint64_t v111 = v135;
        }
        else
        {
          char v134 = v97;
          *(void *)&long long v162 = v95 + (v97 & 1) - 1;
          *((void *)&v162 + 1) = v108 + 1;
          LOBYTE(v163) = 2;
          uint64_t v112 = sub_10000D6B0(v85 + 72, (uint64_t)&v162);
          sub_10000D384(v85 + 72, (uint64_t)&v162);
          uint64_t v109 = v137;
          if (v85 + 80 == v112) {
            goto LABEL_181;
          }
          uint64_t v113 = *(void *)(v112 + 32);
          if ((*(unsigned char *)(v112 + 48) & 2) == 0) {
            ++v113;
          }
          if (v108 != v113)
          {
LABEL_181:
            uint64_t v111 = v135;
            unint64_t v110 = v136;
          }
          else
          {
            BOOL v114 = (unint64_t)(*(unsigned char *)(v112 + 48) & 1) + *(void *)(v112 + 40) - 1 > v107;
            uint64_t v111 = v135;
            unint64_t v110 = v136;
            if (!v114 && *(_DWORD *)(v112 + 56) == 1)
            {
              uint64_t v115 = *(void *)(v112 + 72) + v137;
              if ((v134 & 2) == 0) {
                uint64_t v111 = v135 + 1;
              }
              uint64_t v95 = (*(unsigned char *)(v112 + 48) & 1) + *(void *)(v112 + 40);
              sub_10000CF8C((uint64_t **)(v85 + 72), (uint64_t *)v112);
              operator delete((void *)v112);
              uint64_t v109 = v115;
              char v97 = 2;
              goto LABEL_183;
            }
          }
          char v97 = v134;
        }
LABEL_183:
        *(void *)&long long v162 = v111;
        *((void *)&v162 + 1) = v95;
        LOBYTE(v163) = v97;
        *(_DWORD *)((char *)&v163 + 1) = v168[0];
        HIDWORD(v163) = *(_DWORD *)((char *)v168 + 3);
        LODWORD(v164) = 1;
        unint64_t v165 = v110;
        uint64_t v166 = v109;
        sub_1000236B8((uint64_t **)(v85 + 72), (uint64_t)&v162);
        goto LABEL_184;
      }
      long long v102 = *(_OWORD *)(v78 + 8);
      v163 = *(unsigned char **)(v78 + 24);
      long long v162 = v102;
      LODWORD(v164) = v87;
      unint64_t v165 = v86;
      uint64_t v166 = v84;
      sub_1000236B8((uint64_t **)(v85 + 72), (uint64_t)&v162);
LABEL_184:
      sub_10001DA6C((uint64_t)&v160);
LABEL_185:
      if (v84 < 0)
      {
        *(void *)&long long v160 = "ExecutionSchedulerSortedConsecutiveIt<DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::run_vectored_works(works_t &) [Context = DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work, LockingPolicy = locks::Std, iterator_type = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>]";
        *((void *)&v160 + 1) = 1703;
        int v161 = 16;
        sub_100022770(&v162, &v160);
        sub_1000039A0(v167, (uint64_t)"ExecutionSchedulerSorted: work returned ", 40);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_100022968((uint64_t)&v162);
        std::ios::~ios();
      }
      if (!v77) {
        int v77 = v84 & (v84 >> 31);
      }
      v78 += 144;
    }
    while (v78 != v140);
    if (v77 && !*(_DWORD *)(v133 + 968))
    {
      char v28 = v131;
      sub_100021A4C((uint64_t)v132);
      int v120 = 1;
      LODWORD(v128) = v77;
    }
    else
    {
      uint64_t v116 = *(void *)&__p[8];
      char v28 = v131;
      if (*(void *)&__p[8])
      {
        uint64_t v117 = *(void *)__p + 72;
        do
        {
          v118 = *(std::__shared_weak_count **)(v117 + 56);
          if (v118) {
            sub_100004944(v118);
          }
          if (*(void *)v117) {
            sub_100004944(*(std::__shared_weak_count **)v117);
          }
          v117 += 144;
          --v116;
        }
        while (v116);
      }
LABEL_201:
      *(void *)&__p[8] = 0;
      std::mutex::lock(v132);
      *(void *)(v133 + 1168) = v40;
      uint64_t v119 = *(void *)(v133 + 976);
      if ((void *)v119 == v130 || sub_10010B4D0((uint64_t)v142, v141))
      {
        std::mutex::unlock(v132);
        int v120 = 3;
      }
      else
      {
        uint64_t v121 = *(void *)(v119 + 32);
        if ((*(unsigned char *)(v119 + 48) & 2) == 0) {
          ++v121;
        }
        BOOL v122 = v121 == *(void *)(v133 + 1168);
        std::mutex::unlock(v132);
        if (v122) {
          int v120 = 0;
        }
        else {
          int v120 = 3;
        }
      }
    }
    uint64_t v123 = *(void *)&__p[8];
    if (*(void *)&__p[8])
    {
      uint64_t v124 = *(void *)__p + 72;
      do
      {
        v125 = *(std::__shared_weak_count **)(v124 + 56);
        if (v125) {
          sub_100004944(v125);
        }
        if (*(void *)v124) {
          sub_100004944(*(std::__shared_weak_count **)v124);
        }
        v124 += 144;
        --v123;
      }
      while (v123);
    }
    if (*(void *)&__p[16] && &v170 != *(uint64_t (****)())__p) {
      operator delete(*(void **)__p);
    }
  }
  while (!v120);
  BOOL v47 = v120 == 3;
  LODWORD(v29) = v128;
  if (v47) {
    LODWORD(v29) = v77;
  }
  uint64_t v3 = v127;
  if (!v29) {
    goto LABEL_225;
  }
LABEL_45:
  sub_1000208BC(v133);
  if ((int)v29 >= 0) {
    uint64_t v29 = *(void *)(v3 + 16);
  }
  else {
    uint64_t v29 = (int)v29;
  }
LABEL_226:
  if (v149) {
    sub_100004944(v149);
  }
  if (*((void *)&v146 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v146 + 1));
  }
LABEL_230:
  if (v153) {
    sub_100004944(v153);
  }
  if (v28) {
    sub_100004944(v28);
  }
  return v29;
}

void sub_100017C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::mutex *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  std::mutex::unlock(a20);
  sub_100023154((uint64_t)&STACK[0x410]);
  sub_10001AE00((uint64_t)&a33);
  if (a60) {
    sub_100004944((std::__shared_weak_count *)a60);
  }
  if (v60) {
    sub_100004944(v60);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100017DB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 3)
  {
    *(void *)&long long v23 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v23 + 1) = 1005;
    int v24 = 16;
    sub_100024710(&v25, &v23);
    sub_1000039A0(v28, (uint64_t)"DiskImageUDIFWritable: got a flush with error, aborting", 55);
    std::ostream::~ostream();
    sub_100024D40((uint64_t)&v25);
    std::ios::~ios();
    sub_1000208BC(a1);
    return 4294967274;
  }
  unint64_t v6 = *(void **)(a2 + 16);
  unint64_t v7 = (void *)(a2 + 24);
  unsigned int v8 = 0;
  if (v6 != (void *)(a2 + 24))
  {
    do
    {
      if (v6[5])
      {
        sub_10014951C((uint64_t)(v6 + 5), (uint64_t)&v25);
        uint64_t v9 = v25;
        if (v26) {
          sub_100004944(v26);
        }
        unsigned int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
        if (v10)
        {
          unsigned int v11 = v10;
          *(void *)&long long v23 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
          *((void *)&v23 + 1) = 1005;
          int v24 = 16;
          sub_100024878(&v25, &v23);
          sub_1000039A0(v28, (uint64_t)"Flush failed. BackendSG = ", 26);
          sub_1001493BC((uint64_t)v28, v9);
          sub_1000039A0(v28, (uint64_t)" ret = ", 7);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24)));
          uint64_t v12 = std::locale::use_facet(&v29, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
          std::locale::~locale(&v29);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_100025554((uint64_t)&v25);
        }
        else
        {
          unsigned int v13 = (*(uint64_t (**)(void, uint64_t))(*(void *)v6[5] + 16))(v6[5], 1);
          if (!v13)
          {
            uint64_t v18 = *(std::__shared_weak_count **)(v9 + 72);
            uint64_t v25 = *(void *)(v9 + 64);
            unsigned int v26 = v18;
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v27[0] = *(_OWORD *)(v9 + 80);
            *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)(v9 + 89);
            if (*(void *)&v27[0])
            {
              (*(void (**)(void, uint64_t *))(**(void **)(a2 + 40) + 96))(*(void *)(a2 + 40), &v25);
              long long v19 = *(std::__shared_weak_count **)(v9 + 72);
              *(void *)(v9 + 64) = 0;
              *(void *)(v9 + 72) = 0;
              if (v19) {
                sub_100004944(v19);
              }
              *(void *)(v9 + 80) = 0;
              *(void *)(v9 + 88) = 0;
              *(unsigned char *)(v9 + 104) = 0;
              *(void *)(v9 + 96) = 0;
            }
            if (v26) {
              sub_100004944(v26);
            }
            goto LABEL_13;
          }
          unsigned int v11 = v13;
          *(void *)&long long v23 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
          *((void *)&v23 + 1) = 1005;
          int v24 = 16;
          sub_1000249E0(&v25, &v23);
          sub_1000039A0(v28, (uint64_t)"Flush failed. Backend = ", 24);
          std::ostream::operator<<();
          sub_1000039A0(v28, (uint64_t)" ret = ", 7);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24)));
          uint64_t v14 = std::locale::use_facet(&v29, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
          std::locale::~locale(&v29);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_100025D68((uint64_t)&v25);
        }
        std::ios::~ios();
        if (!v8) {
          unsigned int v8 = v11;
        }
      }
LABEL_13:
      long long v15 = (void *)v6[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (void *)v6[2];
          BOOL v17 = *v16 == (void)v6;
          unint64_t v6 = v16;
        }
        while (!v17);
      }
      unint64_t v6 = v16;
    }
    while (v16 != v7);
  }
  unsigned int v20 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  if (v20)
  {
    *(void *)&long long v23 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v23 + 1) = 1005;
    int v24 = 16;
    sub_100024B48(&v25, &v23);
    sub_1000039A0(v28, (uint64_t)"Flush failed. Backend = ", 24);
    std::ostream::operator<<();
    sub_1000039A0(v28, (uint64_t)" ret = ", 7);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24)));
    uint64_t v21 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10002657C((uint64_t)&v25);
    std::ios::~ios();
  }
  if (v8) {
    return v8;
  }
  else {
    return v20;
  }
}

void sub_100018338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100024834((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000183C0()
{
  return 4294967251;
}

__n128 sub_1000183D0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1000183DC()
{
}

void sub_1000184A4()
{
  long long v2 = *(std::__shared_weak_count **)(v0 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(v1, *(void **)(v0 + 24));
  operator delete();
}

uint64_t sub_1000184E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10001A470(v14, a3);
  sub_1000414AC((uint64_t)v15, (uint64_t)v11);
  double v5 = sub_1000411FC((uint64_t)v15, (uint64_t)v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, unsigned char *, double))(*(void *)a1 + 152))(a1, a2, v11, v8, v5);
  if (v10) {
    sub_100004944(v10);
  }
  if (v9) {
    sub_100004944(v9);
  }
  if (v13) {
    sub_100004944(v13);
  }
  if (v12) {
    sub_100004944(v12);
  }
  sub_1000049B8(v14);
  return v6;
}

void sub_1000185E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_100018624()
{
  return 4294967251;
}

double sub_10001862C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100018638()
{
  return 0;
}

unint64_t sub_100018640(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = sub_10001878C(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_100018770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

unint64_t sub_10001878C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0;
  unint64_t v9 = *(void *)(a3 + 144);
  v31[0] = 0;
  v31[528] = 0;
  while (!sub_1000410B8((uint64_t)a2, a3))
  {
    if (a2[18] >= v9 || v8 >= a4) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v29 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v29 + 1) = 142;
      int v30 = 2;
      sub_100018AAC(&v26, &v29);
      sub_1000039A0(v28, (uint64_t)"sg: ", 4);
      sub_100149114(v28);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v26);
      std::ios::~ios();
    }
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = v9;
    char v27 = 2;
    sub_10008A630(a2, (uint64_t)&v26, (uint64_t)&v29);
    long long v11 = *(uint64_t (**)(void *, void, long long *))a1;
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = (void *)(*(void *)(a1 + 16) + (v12 >> 1));
    if (v12) {
      long long v11 = *(uint64_t (**)(void *, void, long long *))(*v13 + v11);
    }
    int64_t v14 = v11(v13, *(void *)(a1 + 24), &v29);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = v15;
      if (sub_100042754((uint64_t)a2, a3, v15, v14))
      {
        sub_100019864((uint64_t)v25, (uint64_t)a2);
        sub_100042718((uint64_t)v25, a3, v19, v16, a4, (uint64_t)&v26);
        sub_100018C14((uint64_t)v31, (uint64_t)&v26);
        sub_100018C5C(&v26);
        sub_10000371C((uint64_t)v25);
        sub_1000414AC((uint64_t)v31, (uint64_t)&v26);
        sub_100018CC8((uint64_t)a2, &v26);
        sub_10000371C((uint64_t)&v26);
        sub_1000411FC((uint64_t)v31, (uint64_t)&v26);
        sub_100018CC8(a3, &v26);
        sub_10000371C((uint64_t)&v26);
      }
      if (a5) {
        sub_100041B0C((uint64_t)a2, v16);
      }
      else {
        sub_100041C48((uint64_t)a2, v16);
      }
      v8 += v16;
    }
    else
    {
      if ((int)v14 >= 0) {
        uint64_t v20 = v14;
      }
      else {
        uint64_t v20 = -(int)v14;
      }
      unint64_t v22 = -v20;
    }
    if (*((void *)&v29 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v29 + 1));
    }
    if ((v18 & 1) == 0) {
      goto LABEL_34;
    }
  }
  unint64_t v22 = v8;
LABEL_34:
  sub_1000197F0((uint64_t)v31);
  return v22;
}

void sub_100018A3C(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x2E8]);
  }
  sub_1000197F0((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void *sub_100018AAC(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100018D78((uint64_t)a1, a2);
  *a1 = off_10019E7E0;
  a1[45] = &off_10019E8E0;
  a1[46] = &off_10019E908;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019E7E0;
  a1[45] = off_10019E868;
  a1[46] = off_10019E890;
  return a1;
}

void sub_100018BAC(_Unwind_Exception *a1)
{
  sub_100018E08(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100018BD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100018C14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 528))
  {
    sub_10001958C(a1, a2);
  }
  else
  {
    sub_1000196DC(a1, a2);
    *(unsigned char *)(a1 + 528) = 1;
  }
  return a1;
}

void *sub_100018C5C(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[61];
  if (v2) {
    sub_100004944(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[47];
  if (v3) {
    sub_100004944(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[41];
  if (v4) {
    sub_100004944(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[27];
  if (v5) {
    sub_100004944(v5);
  }
  long long v6 = (std::__shared_weak_count *)a1[20];
  if (v6) {
    sub_100004944(v6);
  }
  long long v7 = (std::__shared_weak_count *)a1[9];
  if (v7) {
    sub_100004944(v7);
  }
  return a1;
}

uint64_t sub_100018CC8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_100004944(v5);
  }
  long long v6 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  long long v7 = *(long long *)((char *)a2 + 72);
  long long v8 = *(long long *)((char *)a2 + 88);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  long long v9 = a2[7];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v10 = *(std::__shared_weak_count **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = v9;
  if (v10) {
    sub_100004944(v10);
  }
  *(_OWORD *)(a1 + 128) = a2[8];
  uint64_t v11 = *((void *)a2 + 18);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v11;
  return a1;
}

uint64_t sub_100018D78(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019E978;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100018DF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100018E08(uint64_t a1)
{
  *(void *)a1 = off_10019E978;
  sub_100019210(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100018F44(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100018E08(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100018FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100018FE4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001904C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100018E08(v1);
  return std::ios::~ios();
}

void sub_100019098(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100018E08(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000190FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100018E08(v1);
  return std::ios::~ios();
}

void sub_10001915C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100018E08(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000191D8(uint64_t a1)
{
  sub_100018E08(a1);
  operator delete();
}

uint64_t sub_100019210(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100019394((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100019394(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 545;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    long long v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 545;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10001958C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  long long v8 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v7;
  if (v8) {
    sub_100004944(v8);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  long long v11 = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v11;
  if (v12) {
    sub_100004944(v12);
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  sub_100041338(v14, a1, v4, 1);
  sub_100018CC8(a1 + 368, v14);
  if (v15) {
    sub_100004944(v15);
  }
  if (*((void *)&v14[0] + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v14[0] + 1));
  }
  sub_100041338(v14, a1, a1 + 96, 0);
  sub_100018CC8(a1 + 208, v14);
  if (v15) {
    sub_100004944(v15);
  }
  if (*((void *)&v14[0] + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v14[0] + 1));
  }
  return a1;
}

uint64_t sub_1000196DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  sub_100041338(a1 + 208, a1, a1 + 96, 0);
  sub_100041338(a1 + 368, a1, v4, 1);
  return a1;
}

void sub_1000197BC(_Unwind_Exception *a1)
{
  sub_10000371C(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100004944(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100004944(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000197F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      sub_100004944(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      sub_100004944(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      sub_100004944(v4);
    }
    long long v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      sub_100004944(v5);
    }
    long long v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      sub_100004944(v6);
    }
    long long v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      sub_100004944(v7);
    }
  }
  return a1;
}

__n128 sub_100019864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  uint64_t v8 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v8;
  return result;
}

uint64_t sub_1000198F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100019A84(a1, a2);
  *(void *)uint64_t v3 = off_10019EA50;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v3 + 128));
  return a1;
}

void sub_100019938(_Unwind_Exception *a1)
{
  sub_100019B70(v1);
  _Unwind_Resume(a1);
}

void sub_10001994C(uint64_t a1)
{
  *(void *)a1 = off_10019E9F8;
  sub_10000953C(a1 + 632, *(void **)(a1 + 640));
  sub_10001A194(*(void **)(a1 + 608));
  sub_1000273E4(a1 + 304);
  *(void *)a1 = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  sub_100019B70(a1);
  operator delete();
}

void *sub_100019A04@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[80];
  unsigned int v4 = *a2;
  if (!v3) {
    goto LABEL_12;
  }
  long long v5 = result + 80;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      long long v5 = (_DWORD *)v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != (_DWORD *)(result + 80) && v4 >= v5[7])
  {
    *(_DWORD *)a3 = v5[8];
    *(unsigned char *)(a3 + 4) = 1;
  }
  else
  {
LABEL_12:
    unsigned int v9 = *a2;
    return sub_100118440(&v9, a3);
  }
  return result;
}

uint64_t sub_100019A84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = &off_1001BD5F0;
  *(void *)(result + 8) = v2;
  uint64_t v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + 8) = v3;
    void *v3 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(result + 8) = v5;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  BOOL v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *BOOL v7 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(result + 32) = v9;
  }
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(result + 72) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  long long v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 120) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    *long long v13 = 0;
    *(void *)(a2 + 120) = 0;
  }
  else
  {
    *(void *)(result + 104) = v15;
  }
  return result;
}

uint64_t sub_100019B70(uint64_t a1)
{
  *(void *)a1 = &off_1001BD5F0;
  sub_100019CE0(a1 + 104, *(void **)(a1 + 112));
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_100004944(v3);
  }
  sub_10000953C(a1 + 32, *(void **)(a1 + 40));
  sub_10000953C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100019BFC(uint64_t a1)
{
  *(void *)a1 = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  return sub_100019B70(a1);
}

void sub_100019C64(uint64_t a1)
{
  *(void *)a1 = off_10019EA50;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  sub_100019B70(a1);
  operator delete();
}

void sub_100019CE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100019CE0(a1, *a2);
    sub_100019CE0(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      sub_100004944(v4);
    }
    operator delete(a2);
  }
}

__n128 sub_100019D40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v2 = (void *)(a2 + 80);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v3;
  uint64_t v4 = a1 + 80;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 72) = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 88) = 0;
  }
  else
  {
    *(void *)(a1 + 72) = v4;
  }
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 152) = v9;
  long long v10 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  uint64_t v12 = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 208) = v12;
  __n128 result = *(__n128 *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v14;
  *(__n128 *)(a1 + 216) = result;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(unsigned char *)(a1 + 272) = 0;
  return result;
}

_DWORD *sub_100019E14(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_10016E360;
  v3[1] = xmmword_10016E370;
  uint64_t v4 = 0x900000008;
  int v5 = 10;
  sub_100019EB0((uint64_t)"checksum_type", 0, v3, 11);
  return a1;
}

uint64_t sub_100019EB0(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
LABEL_5:
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v5;
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = a2;
  }
  uint64_t v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  return result;
}

void sub_100019F54(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_100019F8C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)sub_100139620(a1);
  sub_100004890(v14, v3);
  sub_100009FEC((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v14;
  }
  else {
    uint64_t v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  uint64_t v6 = sub_1000039A0(&v11, (uint64_t)v4, v5);
  long long v7 = sub_1000039A0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  long long v8 = (void *)std::ostream::operator<<();
  sub_1000039A0(v8, (uint64_t)"]", 1);
  sub_100004624((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_10001A194(void *a1)
{
  if (a1)
  {
    sub_10001A194(*a1);
    sub_10001A194(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[8];
    if (v2) {
      sub_100004944(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_10001A1EC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

uint64_t *sub_10001A21C(uint64_t *a1, uint64_t a2)
{
  sub_10001A404(*a1, (void *)a2);
  uint64_t v4 = a1[1];
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    sub_100004944(v6);
  }
  return a1;
}

uint64_t sub_10001A268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_10001A29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_10001A2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), a1, a2, a3);
}

uint64_t sub_10001A304(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a1, a2);
}

uint64_t sub_10001A334(uint64_t a1)
{
  *(void *)a1 = off_10019EAC0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10001A38C(uint64_t a1)
{
  *(void *)a1 = off_10019EAC0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  operator delete();
}

void sub_10001A404(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_100019CE0(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *long long v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t *sub_10001A470(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10014B860();
  uint64_t v5 = *a2;
  uint64_t v6 = v4[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[4];
  unsigned __int8 v15 = v17;
  v17[0] = v5;
  v17[1] = v6;
  v17[2] = v7;
  long long v16 = xmmword_10016E380;
  sub_10001A580((uint64_t)a1, &v15);
  sub_100004A50(&v15);
  uint64_t v8 = a1[1];
  unsigned __int8 v15 = (void *)*a1;
  uint64_t v9 = (uint64_t)&v15[3 * v8];
  uint64_t v10 = a1[19];
  char v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  uint64_t v12 = &v13[v10];
  sub_100041340((uint64_t)(a1 + 26), (uint64_t *)&v15, &v14, &v13, &v12, a2[3], a2[2]);
  return a1;
}

void sub_10001A55C(_Unwind_Exception *a1)
{
  sub_10001A62C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A580(uint64_t a1, void *a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_10016E390;
  sub_10001A6D8(a1, a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_10016E390;
  sub_10001AA14(a1 + 144, v3);
  return a1;
}

void sub_10001A5FC(_Unwind_Exception *a1)
{
  if (v1[20])
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }
  sub_100004A50(v1);
  _Unwind_Resume(a1);
}

void *sub_10001A62C(void *a1)
{
  if (a1[20])
  {
    uint64_t v2 = (void *)a1[18];
    if (a1 + 21 != v2) {
      operator delete(v2);
    }
  }
  return sub_100004A50(a1);
}

void sub_10001A67C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100003DEC(exception, a1);
}

void sub_10001A6C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10001A6D8(uint64_t a1, void *a2)
{
  uint64_t v4 = (long long *)(a2 + 3);
  unint64_t v3 = (long long *)*a2;
  if (v4 == v3)
  {
    sub_10001A750((uint64_t *)a1, v3, (uint64_t)v3 + 24 * a2[1]);
    sub_10001A844(a2);
  }
  else
  {
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_10001A750(uint64_t *a1, long long *a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  if (v5 <= a1[2])
  {
    sub_10001A8F4((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x555555555555556) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    uint64_t v7 = operator new(a3 - (void)a2);
    uint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_10001A844(a1);
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    sub_10001A898(a1, (uint64_t)a2, a3);
  }
}

void sub_10001A844(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        sub_100004944(*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void *sub_10001A898(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v3 = result[1];
  }
  result[1] = v3 - 0x5555555555555555 * ((v5 - v4) >> 3);
  return result;
}

void sub_10001A8F4(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v15 = a3;
      do
      {
        long long v16 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        __int16 v17 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v16;
        if (v17) {
          sub_100004944(v17);
        }
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        a4 += 24;
        uint64_t v8 = (long long *)((char *)v8 + 24);
        --v15;
      }
      while (v15);
    }
    if (a5 != a3)
    {
      unint64_t v18 = a3 - a5;
      __int16 v19 = (std::__shared_weak_count **)(a4 + 8);
      do
      {
        if (*v19) {
          sub_100004944(*v19);
        }
        v19 += 3;
        BOOL v14 = __CFADD__(v18++, 1);
      }
      while (!v14);
    }
  }
  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = (long long *)((char *)a2 + 24 * a5);
      unint64_t v11 = a5;
      do
      {
        long long v12 = *v10;
        *(void *)uint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
        char v13 = *(std::__shared_weak_count **)(a4 + 8);
        *(_OWORD *)a4 = v12;
        if (v13) {
          sub_100004944(v13);
        }
        *(void *)(a4 + 16) = *((void *)v10 + 2);
        a4 += 24;
        uint64_t v10 = (long long *)((char *)v10 + 24);
        --v11;
      }
      while (v11);
    }
    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *(void *)(a4 + 16) = *((void *)v8 + 2);
        uint64_t v8 = (long long *)((char *)v8 + 24);
        a4 += 24;
        BOOL v14 = __CFADD__(v9++, 1);
      }
      while (!v14);
    }
  }
}

void sub_10001AA14(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      sub_10001AA98((void **)a1, v5, v4, &v6);
    }
    else
    {
      sub_10001AB28(a1, v5, v5, v4);
      *(void *)(a1 + 8) += v4;
    }
  }
  else
  {
    *(void *)(a1 + 8) = a2;
  }
}

void sub_10001AA98(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = sub_10001AC0C((uint64_t)a1, a3);
  if (v9 >> 60) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v10 = (char *)v9;
  unint64_t v11 = (char *)operator new(8 * v9);
  sub_10001AC84(a1, v11, v10, a2, a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void sub_10001AB28(int a1, unsigned char *__src, unsigned char *__dst, unint64_t a4)
{
  if (!a4) {
    return;
  }
  int64_t v7 = __dst - __src;
  if (__dst == __src)
  {
    size_t v9 = 8 * a4;
    goto LABEL_9;
  }
  if (a4 <= v7 >> 3)
  {
    uint64_t v11 = 8 * a4;
    long long v12 = &__dst[-8 * a4];
    memmove(__dst, v12, 8 * a4);
    if (v12 != __src) {
      memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
    }
    uint64_t v10 = __src;
    size_t v9 = v11;
    goto LABEL_13;
  }
  uint64_t v8 = v7 >> 3;
  if (__src) {
    memmove(&__src[8 * a4], __src, __dst - __src);
  }
  bzero(__src, v7);
  if (a4 != v8)
  {
    size_t v9 = 8 * (a4 - v8);
LABEL_9:
    uint64_t v10 = __dst;
LABEL_13:
    bzero(v10, v9);
  }
}

unint64_t sub_10001AC0C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10001AC84(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  BOOL v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    BOOL v14 = &__dst[__src - v10];
  }
  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    unint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }
  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  __int16 v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

void sub_10001AD54(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10001AD54(a1, *a2);
    sub_10001AD54(a1, a2[1]);
    sub_10001ADB0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10001ADB0(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3)
  {
    sub_100004944(v3);
  }
}

uint64_t sub_10001AE00(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_100004944(v3);
  }
  return a1;
}

_DWORD *sub_10001AE40(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_10016E3A0;
  v3[1] = xmmword_10016E3B0;
  _OWORD v3[2] = xmmword_10016E3C0;
  unint64_t v4 = 0x8000000880000007;
  int v5 = -1;
  sub_100019EB0((uint64_t)"run_type", 0, v3, 15);
  return a1;
}

__n128 sub_10001AEE8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

void sub_10001AF04()
{
}

void sub_10001AF84()
{
}

void sub_10001AF98(uint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  sub_10001B00C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10001AFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001B00C(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019EB88;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_10014B80C();
  uint64_t v6 = v5;
  sub_100149398(a1 + 3);
  a1[3] = off_10019EBD8;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_10001B094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001B0A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019EB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001B0C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019EB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10001B11C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10001B144(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10001B174(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  operator delete();
}

uint64_t sub_10001B1C4()
{
  return 0;
}

uint64_t sub_10001B1CC()
{
  return 4294967251;
}

uint64_t sub_10001B1D4()
{
  return 0;
}

uint64_t sub_10001B1DC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10001B1E4()
{
  return 1;
}

uint64_t sub_10001B1EC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 0;
}

void *sub_10001B1F8(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"BackendNull", 11);
}

void *sub_10001B20C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10001B798(a2, (void *)(a1 + 8));
}

uint64_t sub_10001B218(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10001B220(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10001B228(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 80))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_10001B29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001B2B4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = v2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, &v6);
  if (*((void *)&v6 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_10001B328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001B340(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17;
  int v10 = 16;
  sub_10001B828(v11, &v9);
  sub_1000039A0(v12, (uint64_t)"Backend: failed reading element in vector", 41);
  std::ostream::~ostream();
  sub_10001BA20((uint64_t)v11);
  std::ios::~ios();
  return v7;
}

void sub_10001B438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001B94C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B44C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48;
    v5 -= 48;
    if (!v5) {
      return 0;
    }
  }
  uint64_t v7 = v6;
  *(void *)&long long v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18;
  int v10 = 16;
  sub_10001C1A4(v11, &v9);
  sub_1000039A0(v12, (uint64_t)"Backend: failed writing element in vector", 41);
  std::ostream::~ostream();
  sub_10001C39C((uint64_t)v11);
  std::ios::~ios();
  return v7;
}

void sub_10001B544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10001C2C8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10001B558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  void v12[4] = 0;
  uint64_t v13 = 0;
  BOOL v14 = sub_100148BF8((unint64_t)v12);
  uint64_t v11 = v12;
  unint64_t v15 = sub_100148CC4((unint64_t)v12);
  long long v16 = &v11;
  sub_10001CB94((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10001CB20((uint64_t)&v10);
  unint64_t result = sub_10001CB94(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0;
  }
  return result;
}

void sub_10001B63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10001B65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  void v12[4] = 0;
  uint64_t v13 = 0;
  BOOL v14 = sub_100148BF8((unint64_t)v12);
  uint64_t v11 = v12;
  unint64_t v15 = sub_100148CC4((unint64_t)v12);
  long long v16 = &v11;
  sub_10001CB94((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10001CB20((uint64_t)&v10);
  unint64_t result = sub_10001CB94(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0;
  }
  return result;
}

void sub_10001B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001B764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t sub_10001B788(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_10001B798(void *a1, void *a2)
{
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_10001B7DC();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_10001B7DC()
{
  exception = __cxa_allocate_exception(8uLL);
}

void *sub_10001B828(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10001B990((uint64_t)a1, a2);
  *a1 = off_10019ECF0;
  a1[45] = &off_10019EDF0;
  a1[46] = &off_10019EE18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019ECF0;
  a1[45] = off_10019ED78;
  a1[46] = off_10019EDA0;
  return a1;
}

void sub_10001B928(_Unwind_Exception *a1)
{
  sub_10001BA20(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001B94C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001B990(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019EE88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001BA0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001BA20(uint64_t a1)
{
  *(void *)a1 = off_10019EE88;
  sub_10001BE28(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001BB5C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001BA20(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001BBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001BBFC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001BC64(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001BA20(v1);
  return std::ios::~ios();
}

void sub_10001BCB0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001BA20(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001BD14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001BA20(v1);
  return std::ios::~ios();
}

void sub_10001BD74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001BA20(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001BDF0(uint64_t a1)
{
  sub_10001BA20(a1);
  operator delete();
}

uint64_t sub_10001BE28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001BFAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001BFAC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 124;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 124;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_10001C1A4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001C30C((uint64_t)a1, a2);
  *a1 = off_10019EF10;
  a1[45] = &off_10019F010;
  a1[46] = &off_10019F038;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019EF10;
  a1[45] = off_10019EF98;
  a1[46] = off_10019EFC0;
  return a1;
}

void sub_10001C2A4(_Unwind_Exception *a1)
{
  sub_10001C39C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001C2C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001C30C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F0A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001C388(_Unwind_Exception *a1)
{
}

uint64_t sub_10001C39C(uint64_t a1)
{
  *(void *)a1 = off_10019F0A8;
  sub_10001C7A4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001C4D8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001C39C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001C540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001C578(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001C5E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001C39C(v1);
  return std::ios::~ios();
}

void sub_10001C62C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001C39C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001C690(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001C39C(v1);
  return std::ios::~ios();
}

void sub_10001C6F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001C39C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001C76C(uint64_t a1)
{
  sub_10001C39C(a1);
  operator delete();
}

uint64_t sub_10001C7A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001C928((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001C900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001C928(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 135;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 135;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10001CB20(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8))
  {
    unsigned __int8 v2 = *(std::mutex **)(*(void *)a1 + 16);
    std::mutex::lock(v2);
    if (atomic_load((unint64_t *)(*(void *)a1 + 8))) {
      std::condition_variable::notify_all(*(std::condition_variable **)(*(void *)a1 + 24));
    }
    std::mutex::unlock(v2);
  }
}

unint64_t sub_10001CB94(unint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = sub_100148BF8(a1);
  *(void *)(a1 + 24) = sub_100148CC4(a1);
  if (*(unsigned char *)(a2 + 4))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  int v4 = *(unint64_t **)(a1 + 32);
  if (v4) {
    *int v4 = a1;
  }
  return a1;
}

void sub_10001CC0C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_100004944(v5);
      }
    }
  }
}

void sub_10001CC94(uint64_t *a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x90uLL);
  sub_10001CD28(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10001CC0C((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_10001CD14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001CD28(void *a1, uint64_t *a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019F128;
  sub_10001CE20((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_10001CD70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10001CD84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10019F128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001CDA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10019F128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10001CDF8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10001CE20(uint64_t a1, uint64_t *a2, void *a3, int *a4, unsigned __int8 *a5)
{
  char v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  long long v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100149AAC(a1, &v8, *a3, *a4, *a5);
  if (v9) {
    sub_100004944(v9);
  }
  return a1;
}

void sub_10001CE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001CEA0(uint64_t a1)
{
  *(void *)a1 = off_10019F178;
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10001CEF8(uint64_t a1)
{
  *(void *)a1 = off_10019F178;
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  operator delete();
}

uint64_t sub_10001CF70(uint64_t a1, void *a2)
{
  long long v2 = *(_OWORD *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 56);
  long long v13 = v2;
  long long v14 = *(_OWORD *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  __int16 v17 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a1 + 128);
  uint64_t v4 = a2[7];
  uint64_t v5 = a2[8];
  uint64_t v6 = a2[9];
  uint64_t v7 = (std::__shared_weak_count *)a2[15];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t i = 0; ; ++i)
  {
    BOOL v9 = (void)v12 == v4 && *((void *)&v12 + 1) == v5;
    if (v9 && (void)v13 == v6) {
      break;
    }
    sub_100040CA0((uint64_t)&v12);
  }
  if (v7) {
    sub_100004944(v7);
  }
  if (v17) {
    sub_100004944(v17);
  }
  return i;
}

void sub_10001D044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (v17) {
    sub_100004944(v17);
  }
  if (a17) {
    sub_100004944(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001D068(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a1 + 128;
  char v10 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 128));
  sub_100119B78(a1, a2, a3, a4);
  return sub_10001DA6C((uint64_t)&v9);
}

void sub_10001D0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10001D0E8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001DAA4((uint64_t)a1, a2);
  *a1 = off_10019F1D8;
  a1[45] = &off_10019F2D8;
  a1[46] = &off_10019F300;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F1D8;
  a1[45] = off_10019F260;
  a1[46] = off_10019F288;
  return a1;
}

void sub_10001D1E8(_Unwind_Exception *a1)
{
  sub_10001DB34(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001D20C(uint64_t a1)
{
  return a1;
}

void *sub_10001D250(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001E2B8((uint64_t)a1, a2);
  *a1 = off_10019F3F8;
  a1[45] = &off_10019F4F8;
  a1[46] = &off_10019F520;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F3F8;
  a1[45] = off_10019F480;
  a1[46] = off_10019F4A8;
  return a1;
}

void sub_10001D350(_Unwind_Exception *a1)
{
  sub_10001E348(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001D374(uint64_t a1)
{
  return a1;
}

void *sub_10001D3B8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001EACC((uint64_t)a1, a2);
  *a1 = off_10019F618;
  a1[45] = &off_10019F718;
  a1[46] = &off_10019F740;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F618;
  a1[45] = off_10019F6A0;
  a1[46] = off_10019F6C8;
  return a1;
}

void sub_10001D4B8(_Unwind_Exception *a1)
{
  sub_10001EB5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001D4DC(uint64_t a1)
{
  return a1;
}

void *sub_10001D520(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001F3A4((uint64_t)a1, a2);
  *a1 = off_10019F838;
  a1[45] = &off_10019F938;
  a1[46] = &off_10019F960;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019F838;
  a1[45] = off_10019F8C0;
  a1[46] = off_10019F8E8;
  return a1;
}

void sub_10001D620(_Unwind_Exception *a1)
{
  sub_10001F434(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001D644(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001D688(unsigned int *a1)
{
  if (*((unsigned char *)a1 + 4)) {
    return *a1;
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 1uLL);
  uint64_t v4 = (std::mutex *)*((void *)a1 + 2);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v6.__owns_ = 1;
  std::mutex::lock(v4);
  if (!*((unsigned char *)a1 + 4))
  {
    uint64_t v5 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v5, &v6);
    while (!*((unsigned char *)a1 + 4));
  }
  atomic_fetch_add((atomic_ullong *volatile)a1 + 1, 0xFFFFFFFFFFFFFFFFLL);
  sub_10001FED8((uint64_t)&v6);
  uint64_t v2 = *a1;
  if (v6.__owns_) {
    std::mutex::unlock(v6.__m_);
  }
  return v2;
}

void sub_10001D72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001D748(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001FF1C((uint64_t)a1, a2);
  *a1 = off_10019FA58;
  a1[45] = &off_10019FB58;
  a1[46] = &off_10019FB80;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019FA58;
  a1[45] = off_10019FAE0;
  a1[46] = off_10019FB08;
  return a1;
}

void sub_10001D848(_Unwind_Exception *a1)
{
  sub_10001FFAC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10001D86C(uint64_t a1)
{
  return a1;
}

void sub_10001D8B0(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10001D960((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1) {
    operator delete((void *)*a1);
  }
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10001D93C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10001D960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_10001CB94(a5, v12);
      v12 += 40;
      a5 += 40;
    }
    while (v12 != v11);
  }
  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = sub_10001CB94(v14, a7);
      a7 += 40;
      unint64_t v14 = v15 + 40;
      --v13;
    }
    while (v13);
  }
  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = sub_10001CB94(v16, v11);
      v11 += 40;
      unint64_t v16 = v17 + 40;
    }
    while (v11 != a4);
  }
}

void sub_10001DA14(void *a1)
{
}

void sub_10001DA1C()
{
}

void sub_10001DA58()
{
}

uint64_t sub_10001DA6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t sub_10001DAA4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F370;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001DB20(_Unwind_Exception *a1)
{
}

uint64_t sub_10001DB34(uint64_t a1)
{
  *(void *)a1 = off_10019F370;
  sub_10001DF3C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001DC70(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001DB34(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001DCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001DD10(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001DD78(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001DB34(v1);
  return std::ios::~ios();
}

void sub_10001DDC4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001DB34(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001DE28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001DB34(v1);
  return std::ios::~ios();
}

void sub_10001DE88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001DB34(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001DF04(uint64_t a1)
{
  sub_10001DB34(a1);
  operator delete();
}

uint64_t sub_10001DF3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001E0C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001E098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001E0C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 175;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 175;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10001E2B8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F590;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001E334(_Unwind_Exception *a1)
{
}

uint64_t sub_10001E348(uint64_t a1)
{
  *(void *)a1 = off_10019F590;
  sub_10001E750(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001E484(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001E348(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001E4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001E524(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001E58C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001E348(v1);
  return std::ios::~ios();
}

void sub_10001E5D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001E348(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001E63C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001E348(v1);
  return std::ios::~ios();
}

void sub_10001E69C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001E348(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001E718(uint64_t a1)
{
  sub_10001E348(a1);
  operator delete();
}

uint64_t sub_10001E750(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001E8D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001E8D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 184;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 184;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10001EACC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F7B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001EB48(_Unwind_Exception *a1)
{
}

uint64_t sub_10001EB5C(uint64_t a1)
{
  *(void *)a1 = off_10019F7B0;
  sub_10001EF64(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001EC98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001EB5C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001ED00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001ED38(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001EDA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001EB5C(v1);
  return std::ios::~ios();
}

void sub_10001EDEC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001EB5C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001EE50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001EB5C(v1);
  return std::ios::~ios();
}

void sub_10001EEB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001EB5C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001EF2C(uint64_t a1)
{
  sub_10001EB5C(a1);
  operator delete();
}

uint64_t sub_10001EF64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001F0E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001F0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001F0E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 193;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 193;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t **sub_10001F2E0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        char v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    os_log_type_t v11 = operator new(0x38uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    sub_10000CAA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10001F3A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019F9D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001F420(_Unwind_Exception *a1)
{
}

uint64_t sub_10001F434(uint64_t a1)
{
  *(void *)a1 = off_10019F9D0;
  sub_10001F83C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10001F570(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001F434(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001F5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10001F610(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10001F678(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001F434(v1);
  return std::ios::~ios();
}

void sub_10001F6C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001F434(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10001F728(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001F434(v1);
  return std::ios::~ios();
}

void sub_10001F788(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001F434(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10001F804(uint64_t a1)
{
  sub_10001F434(a1);
  operator delete();
}

uint64_t sub_10001F83C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10001F9C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10001F998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001F9C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 214;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unsigned int v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 214;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10001FBB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 488);
    if (v2) {
      sub_100004944(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
    if (v3) {
      sub_100004944(v3);
    }
    int v4 = *(std::__shared_weak_count **)(a1 + 328);
    if (v4) {
      sub_100004944(v4);
    }
    int v5 = *(std::__shared_weak_count **)(a1 + 216);
    if (v5) {
      sub_100004944(v5);
    }
    char v6 = *(std::__shared_weak_count **)(a1 + 160);
    if (v6) {
      sub_100004944(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
    if (v7) {
      sub_100004944(v7);
    }
    *(unsigned char *)(a1 + 528) = 0;
  }
}

void sub_10001FC2C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10001FCDC((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(40 * v11);
  sub_10001FD58(a1, (unint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10001FCDC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x333333333333333;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x333333333333333 - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x333333333333333) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10001FD58(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10001FE08((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  if (v10 && a1 + 3 != (uint64_t *)*a1) {
    operator delete((void *)*a1);
  }
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10001FDE4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10001FE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = sub_10001CB94(a5, v12);
      v12 += 40;
      a5 = v13 + 40;
    }
    while (v12 != v11);
  }
  unint64_t result = sub_10001CB94(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = sub_10001CB94(result, v11);
      v11 += 40;
      unint64_t result = v15 + 40;
    }
    while (v11 != a4);
  }
  return result;
}

void sub_10001FE9C(void *a1)
{
}

void sub_10001FEA4()
{
}

void sub_10001FEC4()
{
}

void sub_10001FED8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_10001FF1C();
  }
}

uint64_t sub_10001FF1C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019FBF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10001FF98(_Unwind_Exception *a1)
{
}

uint64_t sub_10001FFAC(uint64_t a1)
{
  *(void *)a1 = off_10019FBF0;
  sub_1000203B4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000200E8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10001FFAC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100020150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100020188(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000201F0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001FFAC(v1);
  return std::ios::~ios();
}

void sub_10002023C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10001FFAC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000202A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001FFAC(v1);
  return std::ios::~ios();
}

void sub_100020300(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10001FFAC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002037C(uint64_t a1)
{
  sub_10001FFAC(a1);
  operator delete();
}

uint64_t sub_1000203B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100020538((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100020510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100020538(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 254;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v13 = a2;
      }
      else {
        unint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 254;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_100020730(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

void *sub_100020754(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000210D0((uint64_t)a1, a2);
  *a1 = off_10019FC78;
  a1[45] = &off_10019FD78;
  a1[46] = &off_10019FDA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019FC78;
  a1[45] = off_10019FD00;
  a1[46] = off_10019FD28;
  return a1;
}

void sub_100020854(_Unwind_Exception *a1)
{
  sub_100021160(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100020878(uint64_t a1)
{
  return a1;
}

void sub_1000208BC(uint64_t a1)
{
  char v1 = 0;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 1216), (unsigned __int8 *)&v1, 1u);
  if (!v1)
  {
    *(void *)&long long v10 = "DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::abort() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v10 + 1) = 966;
    int v11 = 0;
    sub_1000218E4(v12, &v10);
    sub_1000039A0(v13, (uint64_t)"DiskImageUDIFWritable: aborting", 31);
    std::ostream::~ostream();
    sub_100021B38((uint64_t)v12);
    std::ios::~ios();
    sub_100021A4C(a1 + 904);
    uint64_t v3 = *(void *)(a1 + 888);
    *(unsigned char *)(v3 + 288) = 1;
    sub_1000222BC(v3 + 8);
    int v4 = *(void **)(a1 + 664);
    int v5 = (void *)(a1 + 672);
    if (v4 != v5)
    {
      do
      {
        uint64_t v6 = v4[7];
        *(unsigned char *)(v6 + 312) = 1;
        sub_1000222BC(v6 + 32);
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            unint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            int v4 = v8;
          }
          while (!v9);
        }
        int v4 = v8;
      }
      while (v8 != v5);
    }
  }
}

void sub_1000209D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100021A08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000209E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::mutex *)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  *(_DWORD *)int v65 = *(_DWORD *)((char *)a2 + 17);
  *(_DWORD *)&v65[3] = *((_DWORD *)a2 + 5);
  uint64_t v8 = a2[3];
  uint64_t v7 = (std::__shared_weak_count *)a2[4];
  a2[3] = 0;
  a2[4] = 0;
  uint64_t v9 = a2[5];
  *(_DWORD *)v66 = *(_DWORD *)((char *)a2 + 17);
  *(_DWORD *)&v66[3] = *((_DWORD *)a2 + 5);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 280))
  {
    std::mutex::unlock(v3);
    if (v7) {
      sub_100004944(v7);
    }
    return a1;
  }
  *(void *)long long __p = v5;
  *(void *)&__p[8] = v4;
  __p[16] = v6;
  *(_DWORD *)&__p[17] = *(_DWORD *)v66;
  *(_DWORD *)&__p[20] = *(_DWORD *)&v66[3];
  uint64_t v69 = a1;
  *(void *)&long long v70 = v5;
  *((void *)&v70 + 1) = v4;
  LOBYTE(v71) = v6;
  *(_DWORD *)((char *)&v71 + 1) = *(_DWORD *)v65;
  HIDWORD(v71) = *(_DWORD *)&v65[3];
  *(void *)&long long v72 = v8;
  *((void *)&v72 + 1) = v7;
  long long v10 = *(void **)(a1 + 88);
  int v11 = (void *)(a1 + 88);
  uint64_t v12 = (void *)(a1 + 88);
  uint64_t v73 = v9;
  unint64_t v13 = (void *)(a1 + 88);
  uint64_t v64 = v3;
  if (!v10) {
    goto LABEL_13;
  }
  int v11 = (void *)(a1 + 88);
  while (1)
  {
    while (1)
    {
      uint64_t v12 = v10;
      unint64_t v14 = v10 + 4;
      if (!sub_100022410((unint64_t *)__p, v10 + 4)) {
        break;
      }
      long long v10 = (void *)*v12;
      int v11 = v12;
      if (!*v12) {
        goto LABEL_13;
      }
    }
    if (!sub_100022410(v14, (unint64_t *)__p)) {
      break;
    }
    int v11 = v12 + 1;
    long long v10 = (void *)v12[1];
    if (!v10) {
      goto LABEL_13;
    }
  }
  if (!*v11)
  {
LABEL_13:
    unint64_t v15 = operator new(0x70uLL);
    v15[2] = *(_OWORD *)__p;
    uint64_t v16 = v69;
    *((void *)v15 + 6) = *(void *)&__p[16];
    *((void *)v15 + 7) = v16;
    v15[4] = v70;
    *((void *)v15 + 10) = v71;
    *(_OWORD *)((char *)v15 + 88) = v72;
    long long v72 = 0uLL;
    *((void *)v15 + 13) = v73;
    *(void *)unint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v12;
    *int v11 = v15;
    uint64_t v17 = **(void **)(a1 + 80);
    if (v17)
    {
      *(void *)(a1 + 80) = v17;
      unint64_t v15 = (_OWORD *)*v11;
    }
    sub_10000CAF8(*(uint64_t **)(a1 + 88), (uint64_t *)v15);
    ++*(void *)(a1 + 96);
  }
  if (*((void *)&v72 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v72 + 1));
  }
  if ((v6 & 2) != 0) {
    uint64_t v18 = v5;
  }
  else {
    uint64_t v18 = v5 + 1;
  }
  uint64_t v19 = *(void *)(a1 + 272);
  std::mutex::unlock(v3);
  if (v18 == v19)
  {
    while (1)
    {
      *(void *)long long __p = &v69;
      *(_OWORD *)&__p[8] = xmmword_10016E350;
      std::mutex::lock(v3);
      uint64_t v20 = *(void **)(a1 + 80);
      unint64_t v21 = *(void *)(a1 + 272);
      if (v20 == v13) {
        goto LABEL_79;
      }
      unint64_t v22 = *(void **)(a1 + 80);
      while (!sub_10010B4D0(a1 + 104, a1 + 216))
      {
        uint64_t v23 = v22[4];
        if ((v22[6] & 2) == 0) {
          ++v23;
        }
        if (v23 != v21) {
          break;
        }
        unint64_t v21 = v22[5] + (v22[6] & 1);
        for (uint64_t i = (*(unsigned char *)(a1 + 128) & 1) + *(void *)(a1 + 120);
              v21 > i - 1;
              uint64_t i = (*(unsigned char *)(a1 + 128) & 1) + *(void *)(a1 + 120))
        {
          sub_10010B7F8((uint64_t *)(a1 + 104));
          if (sub_10010B4D0(a1 + 104, a1 + 216)) {
            break;
          }
          if ((*(unsigned char *)(a1 + 128) & 2) != 0) {
            unint64_t v21 = *(void *)(a1 + 112);
          }
          else {
            unint64_t v21 = *(void *)(a1 + 112) + 1;
          }
        }
        long long v25 = (void *)v22[1];
        if (v25)
        {
          do
          {
            long long v26 = v25;
            long long v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            long long v26 = (void *)v22[2];
            BOOL v27 = *v26 == (void)v22;
            unint64_t v22 = v26;
          }
          while (!v27);
        }
        unint64_t v22 = v26;
        if (v26 == v13)
        {
          unint64_t v22 = v13;
          break;
        }
      }
      if (v20 == v22) {
        goto LABEL_79;
      }
      unint64_t v28 = 0;
      long long v29 = v20;
      do
      {
        unint64_t v30 = v28;
        long long v31 = (void *)v29[1];
        if (v31)
        {
          do
          {
            long long v32 = v31;
            long long v31 = (void *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            long long v32 = (void *)v29[2];
            BOOL v27 = *v32 == (void)v29;
            long long v29 = v32;
          }
          while (!v27);
        }
        ++v28;
        long long v29 = v32;
      }
      while (v32 != v22);
      if (*(void *)&__p[16] <= v30) {
        break;
      }
      do
      {
LABEL_65:
        uint64_t v42 = *(void *)__p;
        uint64_t v43 = *(void *)&__p[8];
        char v44 = (char *)(*(void *)__p + 56 * *(void *)&__p[8]);
        if (*(void *)&__p[8] == *(void *)&__p[16])
        {
          sub_100022578((void **)__p, v44, (uint64_t)(v20 + 7), &v67);
        }
        else
        {
          *(void *)char v44 = v20[7];
          uint64_t v45 = v42 + 56 * v43;
          long long v46 = *((_OWORD *)v20 + 4);
          *(void *)(v45 + 24) = v20[10];
          *(_OWORD *)(v45 + 8) = v46;
          *(_OWORD *)(v45 + 32) = *(_OWORD *)(v20 + 11);
          v20[11] = 0;
          v20[12] = 0;
          *(void *)(v45 + 48) = v20[13];
          ++*(void *)&__p[8];
        }
        BOOL v47 = (void *)v20[1];
        unint64_t v48 = v20;
        if (v47)
        {
          do
          {
            BOOL v49 = v47;
            BOOL v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            BOOL v49 = (void *)v48[2];
            BOOL v27 = *v49 == (void)v48;
            unint64_t v48 = v49;
          }
          while (!v27);
        }
        if (*(void **)(a1 + 80) == v20) {
          *(void *)(a1 + 80) = v49;
        }
        unint64_t v50 = *(uint64_t **)(a1 + 88);
        --*(void *)(a1 + 96);
        sub_10000D000(v50, v20);
        uint64_t v51 = (std::__shared_weak_count *)v20[12];
        if (v51) {
          sub_100004944(v51);
        }
        operator delete(v20);
        uint64_t v20 = v49;
      }
      while (v49 != v22);
LABEL_79:
      std::mutex::unlock(v3);
      if (*(void *)&__p[8])
      {
        uint64_t v52 = *(unsigned int ***)__p;
        uint64_t v53 = *(void *)__p + 56 * *(void *)&__p[8];
        do
        {
          uint64_t v54 = *v52;
          *uint64_t v54 = crc32(**v52, (const Bytef *)v52[4], *((_DWORD *)v52 + 12));
          v52 += 7;
        }
        while (v52 != (unsigned int **)v53);
        uint64_t v55 = *(void *)&__p[8];
        if (*(void *)&__p[8])
        {
          uint64_t v56 = (std::__shared_weak_count **)(*(void *)__p + 40);
          do
          {
            if (*v56) {
              sub_100004944(*v56);
            }
            v56 += 7;
            --v55;
          }
          while (v55);
        }
      }
      *(void *)&__p[8] = 0;
      std::mutex::lock(v3);
      *(void *)(a1 + 272) = v21;
      uint64_t v57 = *(void *)(a1 + 80);
      if ((void *)v57 == v13 || sub_10010B4D0(a1 + 104, a1 + 216))
      {
        std::mutex::unlock(v3);
        int v58 = 3;
      }
      else
      {
        uint64_t v59 = *(void *)(v57 + 32);
        if ((*(unsigned char *)(v57 + 48) & 2) == 0) {
          ++v59;
        }
        BOOL v60 = v59 == *(void *)(a1 + 272);
        std::mutex::unlock(v3);
        if (v60) {
          int v58 = 0;
        }
        else {
          int v58 = 3;
        }
      }
      uint64_t v61 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        long long v62 = (std::__shared_weak_count **)(*(void *)__p + 40);
        do
        {
          if (*v62) {
            sub_100004944(*v62);
          }
          v62 += 7;
          --v61;
        }
        while (v61);
      }
      if (*(void *)&__p[16] && &v69 != *(uint64_t **)__p) {
        operator delete(*(void **)__p);
      }
      if (v58) {
        return a1;
      }
    }
    if (v30 >= 0x249249249249249) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    long long v33 = (char *)operator new(56 * v28);
    char v34 = *(std::__shared_weak_count ***)__p;
    uint64_t v35 = *(void *)&__p[8];
    if (*(void *)&__p[8])
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)__p + 56 * *(void *)&__p[8];
      do
      {
        char v38 = &v34[v36];
        unint64_t v39 = &v33[v36 * 8];
        *(void *)unint64_t v39 = v34[v36];
        long long v40 = *(_OWORD *)&v34[v36 + 1];
        *((void *)v39 + 3) = v34[v36 + 3];
        *(_OWORD *)(v39 + 8) = v40;
        *((_OWORD *)v39 + 2) = *(_OWORD *)&v34[v36 + 4];
        v38[4] = 0;
        v38[5] = 0;
        *((void *)v39 + 6) = v34[v36 + 6];
        v36 += 7;
      }
      while (v38 + 7 != (std::__shared_weak_count **)v37);
      if (v34)
      {
        uint64_t v41 = v34 + 5;
        do
        {
          if (*v41) {
            sub_100004944(*v41);
          }
          v41 += 7;
          --v35;
        }
        while (v35);
        char v34 = *(std::__shared_weak_count ***)__p;
        uint64_t v3 = v64;
        goto LABEL_62;
      }
    }
    else if (*(void *)__p)
    {
LABEL_62:
      if (&v69 != (uint64_t *)v34) {
        operator delete(v34);
      }
    }
    *(void *)long long __p = v33;
    *(void *)&__p[16] = v28;
    unint64_t v13 = (void *)(a1 + 88);
    goto LABEL_65;
  }
  return a1;
}

void sub_100021058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::mutex::unlock(v26);
  sub_100022508(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1000210D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_10019FE10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10002114C(_Unwind_Exception *a1)
{
}

uint64_t sub_100021160(uint64_t a1)
{
  *(void *)a1 = off_10019FE10;
  sub_100021568(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10002129C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100021160(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100021304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10002133C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000213A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100021160(v1);
  return std::ios::~ios();
}

void sub_1000213F0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100021160(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100021454(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100021160(v1);
  return std::ios::~ios();
}

void sub_1000214B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100021160(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100021530(uint64_t a1)
{
  sub_100021160(a1);
  operator delete();
}

uint64_t sub_100021568(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000216EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000216C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000216EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 587;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    long long v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v13 = a2;
      }
      else {
        unint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 587;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_1000218E4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100021AA8((uint64_t)a1, a2);
  *a1 = off_10019FE98;
  a1[45] = &off_10019FF98;
  a1[46] = &off_10019FFC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_10019FE98;
  a1[45] = off_10019FF20;
  a1[46] = off_10019FF48;
  return a1;
}

void sub_1000219E4(_Unwind_Exception *a1)
{
  sub_100021B38(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100021A08(uint64_t a1)
{
  return a1;
}

void sub_100021A4C(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(unsigned char *)(a1 + 272) = 1;
  sub_10001AD54(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t sub_100021AA8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0030;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100021B24(_Unwind_Exception *a1)
{
}

uint64_t sub_100021B38(uint64_t a1)
{
  *(void *)a1 = off_1001A0030;
  sub_100021F40(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100021C74(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100021B38(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100021CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100021D14(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100021D7C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100021B38(v1);
  return std::ios::~ios();
}

void sub_100021DC8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100021B38(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100021E2C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100021B38(v1);
  return std::ios::~ios();
}

void sub_100021E8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100021B38(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100021F08(uint64_t a1)
{
  sub_100021B38(a1);
  operator delete();
}

uint64_t sub_100021F40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000220C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10002209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000220C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 535;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    long long v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v13 = a2;
      }
      else {
        unint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 535;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_1000222BC(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  *(unsigned char *)(a1 + 272) = 1;
  sub_100022314(*(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  std::mutex::unlock((std::mutex *)a1);
}

void sub_100022314(void *a1)
{
  if (a1)
  {
    sub_100022314(*a1);
    sub_100022314(a1[1]);
    unsigned __int8 v2 = (std::__shared_weak_count *)a1[12];
    if (v2) {
      sub_100004944(v2);
    }
    operator delete(a1);
  }
}

int *sub_10002236C(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_10016E3A0;
  v4[1] = xmmword_10016E3B0;
  v4[2] = xmmword_10016E3C0;
  unint64_t v5 = 0x8000000880000007;
  int v6 = -1;
  sub_100019EB0((uint64_t)"run_type", a2, v4, 15);
  return a1;
}

uint64_t sub_100022410(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0) {
          unint64_t v5 = v4;
        }
        else {
          unint64_t v5 = v4 + 1;
        }
        unint64_t v6 = *a2;
        if ((a2[2] & 2) == 0) {
          ++v6;
        }
        if (v5 < v6) {
          return 1;
        }
        if (v6 == v5) {
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        }
        return 0;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_4;
    }
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3) {
      BOOL v9 = a2[1] < *a2;
    }
    else {
      BOOL v9 = *a2 >= a2[1];
    }
  }
  else
  {
    unint64_t v10 = a2[1];
    BOOL v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }
  return !v9;
}

void *sub_100022508(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 40);
    do
    {
      if (*v3) {
        sub_100004944(*v3);
      }
      v3 += 7;
      --v2;
    }
    while (v2);
  }
  if (a1[2] && a1 + 3 != (void *)*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_100022578(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if (0x249249249249249 - v6 < (unint64_t)&v5[-v6 + 1]) {
    goto LABEL_28;
  }
  unint64_t v7 = v6 >> 61;
  unint64_t v8 = 8 * v6;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x249249249249249) {
    unint64_t v10 = 0x249249249249249;
  }
  unint64_t v11 = (unint64_t)(v5 + 1) > v10 ? (unint64_t)(v5 + 1) : v10;
  if (v11 > 0x249249249249249) {
LABEL_28:
  }
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  unint64_t v15 = (char *)*a1;
  int v16 = (char *)operator new(56 * v11);
  __int16 v17 = v16;
  uint64_t v18 = (char *)*a1;
  uint64_t v19 = (uint64_t)*a1 + 56 * (void)a1[1];
  uint64_t v20 = v16;
  if (*a1 != a2)
  {
    __int16 v21 = (char *)*a1;
    uint64_t v20 = v16;
    do
    {
      *(void *)uint64_t v20 = *(void *)v21;
      long long v22 = *(_OWORD *)(v21 + 8);
      *((void *)v20 + 3) = *((void *)v21 + 3);
      *(_OWORD *)(v20 + 8) = v22;
      *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
      *((void *)v21 + 4) = 0;
      *((void *)v21 + 5) = 0;
      *((void *)v20 + 6) = *((void *)v21 + 6);
      v20 += 56;
      v21 += 56;
    }
    while (v21 != a2);
  }
  *(void *)uint64_t v20 = *(void *)a3;
  long long v23 = *(_OWORD *)(a3 + 8);
  *((void *)v20 + 3) = *(void *)(a3 + 24);
  *(_OWORD *)(v20 + 8) = v23;
  *((_OWORD *)v20 + 2) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *((void *)v20 + 6) = *(void *)(a3 + 48);
  if ((char *)v19 != a2)
  {
    long long v24 = v20 + 104;
    long long v25 = a2;
    do
    {
      *(v24 - 6) = *(void *)v25;
      long long v26 = *(_OWORD *)(v25 + 8);
      *(v24 - 3) = *((void *)v25 + 3);
      *(_OWORD *)(v24 - 5) = v26;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 + 2);
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 5) = 0;
      void *v24 = *((void *)v25 + 6);
      v24 += 7;
      v25 += 56;
    }
    while (v25 != (char *)v19);
  }
  if (v18)
  {
    BOOL v27 = (char *)a1[1];
    if (v27)
    {
      unint64_t v28 = (std::__shared_weak_count **)(v18 + 40);
      do
      {
        if (*v28) {
          sub_100004944(*v28);
        }
        v28 += 7;
        --v27;
      }
      while (v27);
    }
    if (a1 + 3 != *a1) {
      operator delete(*a1);
    }
  }
  uint64_t v29 = (uint64_t)a1[1] + 1;
  *a1 = v17;
  a1[1] = (void *)v29;
  a1[2] = (void *)v11;
  *a4 = &v17[a2 - v15];
}

void *sub_100022770(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000228D8((uint64_t)a1, a2);
  *a1 = off_1001A00B8;
  a1[45] = &off_1001A01B8;
  a1[46] = &off_1001A01E0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A00B8;
  a1[45] = off_1001A0140;
  a1[46] = off_1001A0168;
  return a1;
}

void sub_100022870(_Unwind_Exception *a1)
{
  sub_100022968(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100022894(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000228D8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0250;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100022954(_Unwind_Exception *a1)
{
}

uint64_t sub_100022968(uint64_t a1)
{
  *(void *)a1 = off_1001A0250;
  sub_100022D70(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100022AA4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100022968(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100022B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100022B44(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100022BAC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100022968(v1);
  return std::ios::~ios();
}

void sub_100022BF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100022968(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100022C5C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100022968(v1);
  return std::ios::~ios();
}

void sub_100022CBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100022968(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100022D38(uint64_t a1)
{
  sub_100022968(a1);
  operator delete();
}

uint64_t sub_100022D70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100022EF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100022ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100022EF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 132;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    unint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v13 = a2;
      }
      else {
        unint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 132;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_1000230EC()
{
}

void sub_100023104()
{
}

uint64_t sub_100023118(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    sub_100004944(v3);
  }
  return a1;
}

uint64_t sub_100023154(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 72;
    do
    {
      int v4 = *(std::__shared_weak_count **)(v3 + 56);
      if (v4) {
        sub_100004944(v4);
      }
      if (*(void *)v3) {
        sub_100004944(*(std::__shared_weak_count **)v3);
      }
      v3 += 144;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1000231D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 128);
      if (v3) {
        sub_100004944(v3);
      }
      int v4 = *(std::__shared_weak_count **)(v2 + 72);
      if (v4) {
        sub_100004944(v4);
      }
      uint64_t v5 = a1[1];
      uint64_t v2 = *a1 + 144;
      *a1 = v2;
    }
    while (v2 != v5);
  }
  return a1;
}

void sub_10002322C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (0xE38E38E38E38E3 - v6 < v5 - v6 + 1) {
    goto LABEL_31;
  }
  unint64_t v7 = v6 >> 61;
  unint64_t v8 = 8 * v6;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 >= 0xE38E38E38E38E3) {
    unint64_t v10 = 0xE38E38E38E38E3;
  }
  unint64_t v11 = v5 + 1 > v10 ? v5 + 1 : v10;
  if (v11 > 0xE38E38E38E38E3) {
LABEL_31:
  }
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  unint64_t v15 = *(char **)a1;
  int v16 = (char *)operator new(144 * v11);
  __int16 v17 = v16;
  uint64_t v18 = *(char **)a1;
  uint64_t v19 = *(void *)a1 + 144 * *(void *)(a1 + 8);
  v39[0] = (uint64_t)v16;
  v39[2] = a1;
  uint64_t v20 = v16;
  if (v18 != a2)
  {
    uint64_t v21 = 0;
    do
    {
      long long v22 = &v18[v21];
      long long v23 = *(_OWORD *)&v18[v21 + 8];
      long long v24 = &v16[v21];
      *((void *)v24 + 3) = *(void *)&v18[v21 + 24];
      *(_OWORD *)(v24 + 8) = v23;
      *((_OWORD *)v24 + 2) = *(_OWORD *)&v18[v21 + 32];
      *(void *)long long v24 = off_1001A02D0;
      uint64_t v25 = *(void *)&v18[v21 + 48];
      v24[56] = v18[v21 + 56];
      *((void *)v24 + 6) = v25;
      *((_OWORD *)v24 + 4) = *(_OWORD *)&v18[v21 + 64];
      *((void *)v22 + 8) = 0;
      *((void *)v22 + 9) = 0;
      long long v26 = *(_OWORD *)&v18[v21 + 80];
      *(_OWORD *)(v24 + 89) = *(_OWORD *)&v18[v21 + 89];
      *((_OWORD *)v24 + 5) = v26;
      *((void *)v24 + 14) = *(void *)&v18[v21 + 112];
      *(_OWORD *)(v24 + 120) = *(_OWORD *)&v18[v21 + 120];
      *((void *)v22 + 15) = 0;
      *((void *)v22 + 16) = 0;
      *((_DWORD *)v24 + 34) = *(_DWORD *)&v18[v21 + 136];
      v21 += 144;
    }
    while (&v18[v21] != a2);
    uint64_t v20 = &v16[v21];
  }
  long long v27 = *(_OWORD *)(a3 + 8);
  *((void *)v20 + 3) = *(void *)(a3 + 24);
  *(_OWORD *)(v20 + 8) = v27;
  *((_OWORD *)v20 + 2) = *(_OWORD *)(a3 + 32);
  *(void *)uint64_t v20 = off_1001A02D0;
  uint64_t v28 = *(void *)(a3 + 48);
  v20[56] = *(unsigned char *)(a3 + 56);
  *((void *)v20 + 6) = v28;
  *((_OWORD *)v20 + 4) = *(_OWORD *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  long long v29 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v20 + 89) = *(_OWORD *)(a3 + 89);
  *((_OWORD *)v20 + 5) = v29;
  *((void *)v20 + 14) = *(void *)(a3 + 112);
  *(_OWORD *)(v20 + 120) = *(_OWORD *)(a3 + 120);
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *((_DWORD *)v20 + 34) = *(_DWORD *)(a3 + 136);
  if ((char *)v19 != a2)
  {
    uint64_t v30 = 0;
    do
    {
      long long v31 = &a2[v30];
      long long v32 = &v20[v30];
      *(_OWORD *)(v32 + 152) = *(_OWORD *)&a2[v30 + 8];
      *((void *)v32 + 21) = *(void *)&a2[v30 + 24];
      *((_OWORD *)v32 + 11) = *(_OWORD *)&a2[v30 + 32];
      *((void *)v32 + 18) = off_1001A02D0;
      *((void *)v32 + 24) = *(void *)&a2[v30 + 48];
      v32[200] = a2[v30 + 56];
      *(_OWORD *)(v32 + 233) = *(_OWORD *)&a2[v30 + 89];
      long long v33 = *(_OWORD *)&a2[v30 + 64];
      long long v34 = *(_OWORD *)&a2[v30 + 80];
      *((void *)v31 + 8) = 0;
      *((void *)v31 + 9) = 0;
      *((_OWORD *)v32 + 13) = v33;
      *((_OWORD *)v32 + 14) = v34;
      *((void *)v32 + 32) = *(void *)&a2[v30 + 112];
      *(_OWORD *)&v20[v30 + 264] = *(_OWORD *)&a2[v30 + 120];
      *((void *)v31 + 15) = 0;
      *((void *)v31 + 16) = 0;
      LODWORD(v31) = *(_DWORD *)&a2[v30 + 136];
      v30 += 144;
      *((_DWORD *)v32 + 70) = v31;
    }
    while (&a2[v30] != (char *)v19);
  }
  v39[0] = 0;
  v39[1] = 0;
  sub_1000231D0(v39);
  if (v18)
  {
    uint64_t v35 = *(void *)(a1 + 8);
    if (v35)
    {
      uint64_t v36 = (std::__shared_weak_count **)(v18 + 72);
      do
      {
        uint64_t v37 = v36[7];
        if (v37) {
          sub_100004944(v37);
        }
        if (*v36) {
          sub_100004944(*v36);
        }
        v36 += 18;
        --v35;
      }
      while (v35);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v38 = *(void *)(a1 + 8) + 1;
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v38;
  *(void *)(a1 + 16) = v11;
  *a4 = &v17[a2 - v15];
}

void *sub_100023550(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100023EFC((uint64_t)a1, a2);
  *a1 = off_1001A0340;
  a1[45] = &off_1001A0440;
  a1[46] = &off_1001A0468;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0340;
  a1[45] = off_1001A03C8;
  a1[46] = off_1001A03F0;
  return a1;
}

void sub_100023650(_Unwind_Exception *a1)
{
  sub_100023F8C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100023674(uint64_t a1)
{
  return a1;
}

uint64_t **sub_1000236B8(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return a1 + 1;
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return a1 + 1;
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return a1 + 1;
  }
  uint64_t v5 = (int *)(a2 + 24);
  if (sub_1000237F4(a2 + 24)) {
    return a1 + 1;
  }
  unint64_t v7 = (uint64_t *)sub_100023B88(a1, a2, a2);
  if (v8)
  {
    __int16 v17 = v7;
    sub_100023C24(a1, &v17);
    return sub_100023D3C(a1, (uint64_t ***)&v17);
  }
  else
  {
    uint64_t v9 = (uint64_t *)sub_10000D6B0((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = (uint64_t **)sub_10000D384((uint64_t)a1, (uint64_t)&v14);
    unint64_t v11 = *v10;
    if (*v10)
    {
      do
      {
        uint64_t v12 = v11;
        unint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = v10[2];
        BOOL v13 = *v12 == (void)v10;
        unint64_t v10 = (uint64_t **)v12;
      }
      while (v13);
    }
    int v16 = v9;
    __int16 v17 = v12;
    sub_100023894(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }
}

BOOL sub_1000237F4(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D3B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D3B88))
  {
    sub_100116FD0(&dword_1001D3B70);
    __cxa_guard_release(&qword_1001D3B88);
  }
  int v3 = dword_1001D3B70;
  long long v4 = unk_1001D3B78;
  return sub_100116FF0(a1, (uint64_t)&v3);
}

void sub_10002387C(_Unwind_Exception *a1)
{
}

uint64_t sub_100023894(uint64_t **a1, long long *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  char v8 = *a5;
  uint64_t v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      unint64_t v10 = v9;
      uint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    unint64_t v11 = *a5;
    do
    {
      unint64_t v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      unint64_t v11 = v10;
    }
    while (!v12);
  }
  BOOL v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      int v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        int v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = qword_1001D3B40;
  *((void *)&v37 + 1) = qword_1001D3B40;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    __int16 v17 = (long long *)(a3 + 2);
    while (1)
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      sub_10000D508((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30) {
        break;
      }
      if ((unint64_t)v29 < *((void *)&v29 + 1) && (unint64_t)(v29 + 1) < *((void *)&v29 + 1)) {
        goto LABEL_22;
      }
LABEL_23:
      long long v27 = v39;
      uint64_t v28 = v40;
      sub_10000D5DC((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      long long v39 = v29;
      LOBYTE(v40) = v30;
      uint64_t v15 = *a4;
      uint64_t v18 = (uint64_t *)(*a4)[1];
      uint64_t v19 = *a4;
      if (v18)
      {
        do
        {
          BOOL v13 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v19[2];
          BOOL v12 = *v13 == (void)v19;
          uint64_t v19 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
      if (v13 == v10) {
        goto LABEL_32;
      }
    }
    if (v30 == 3)
    {
      if (*((void *)&v29 + 1) < (unint64_t)v29) {
        goto LABEL_23;
      }
    }
    else if ((unint64_t)v29 >= *((void *)&v29 + 1))
    {
      goto LABEL_23;
    }
LABEL_22:
    int v31 = *a3;
    long long v32 = *v17;
    *(void *)&long long v29 = sub_100023E5C(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100023C24(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)sub_100023D3C(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }
LABEL_32:
  long long v23 = v39;
  uint64_t v24 = v40;
  uint64_t result = sub_10000D5DC((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      if (*((void *)&v25 + 1) < (unint64_t)v25) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    unint64_t v21 = *((void *)&v25 + 1);
    unint64_t v22 = v25;
  }
  else
  {
    unint64_t v21 = *((void *)&v25 + 1);
    if ((unint64_t)v25 >= *((void *)&v25 + 1)) {
      goto LABEL_41;
    }
    unint64_t v22 = v25 + 1;
  }
  if (v22 < v21)
  {
LABEL_40:
    long long v29 = v25;
    uint64_t v30 = v26;
    int v31 = *a3;
    long long v32 = *(_OWORD *)(a3 + 2);
    *(void *)&long long v29 = sub_100023E5C(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100023C24(a1, (uint64_t **)&v29);
    uint64_t result = (uint64_t)sub_100023D3C(a1, (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }
LABEL_41:
  *a4 = v15;
  return result;
}

_OWORD *sub_100023B88(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_10000CA1C((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x50uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    sub_10000CAA0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_100023C24(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = (uint64_t)*a2;
    do
    {
      uint64_t v6 = *(void *)(v7 + 16);
      BOOL v8 = *(void *)v6 == v7;
      uint64_t v7 = v6;
    }
    while (v8);
  }
  uint64_t v9 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v9;
  }
  if (v9 == (*(unsigned char *)(v6 + 48) & 1) + *(void *)(v6 + 40))
  {
    BOOL v10 = sub_100116FF0(v6 + 56, (uint64_t)(v2 + 7));
    uint64_t v2 = *a2;
    if (v10)
    {
      long long v16 = *((_OWORD *)v2 + 2);
      uint64_t v17 = v2[6];
      sub_10000CF8C(a1, v2);
      operator delete(v2);
      long long v12 = *(_OWORD *)(v6 + 32);
      uint64_t v13 = *(void *)(v6 + 48);
      sub_10000CE98((unint64_t *)&v12, (unint64_t *)&v16, (uint64_t)&v14);
      *(_OWORD *)(v6 + 32) = v14;
      *(unsigned char *)(v6 + 48) = v15;
      *a2 = (uint64_t *)v6;
      return (uint64_t *)v6;
    }
  }
  return v2;
}

uint64_t **sub_100023D3C(uint64_t **a1, uint64_t ***a2)
{
  int v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      uint64_t v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    BOOL v8 = *a2;
    do
    {
      uint64_t v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      BOOL v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    BOOL v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      BOOL v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      if (sub_100116FF0((uint64_t)(result + 7), (uint64_t)(v7 + 7)))
      {
        long long v17 = *((_OWORD *)v7 + 2);
        uint64_t v18 = v7[6];
        sub_10000CF8C(a1, (uint64_t *)v7);
        operator delete(v7);
        unint64_t v11 = *a2;
        long long v13 = *((_OWORD *)*a2 + 2);
        long long v14 = v11[6];
        sub_10000CE98((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
        long long v12 = *a2;
        *((_OWORD *)v12 + 2) = v15;
        *((unsigned char *)v12 + 48) = v16;
      }
      return *a2;
    }
  }
  return result;
}

_OWORD *sub_100023E5C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000E1C0(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    _OWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_10000CAA0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_100023EFC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A04D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100023F78(_Unwind_Exception *a1)
{
}

uint64_t sub_100023F8C(uint64_t a1)
{
  *(void *)a1 = off_1001A04D8;
  sub_100024394(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000240C8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100023F8C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100024130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100024168(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000241D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100023F8C(v1);
  return std::ios::~ios();
}

void sub_10002421C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100023F8C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100024280(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100023F8C(v1);
  return std::ios::~ios();
}

void sub_1000242E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100023F8C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002435C(uint64_t a1)
{
  sub_100023F8C(a1);
  operator delete();
}

uint64_t sub_100024394(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100024518((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000244F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100024518(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 505;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 505;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100024710(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100024CB0((uint64_t)a1, a2);
  *a1 = off_1001A0560;
  a1[45] = &off_1001A0660;
  a1[46] = &off_1001A0688;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0560;
  a1[45] = off_1001A05E8;
  a1[46] = off_1001A0610;
  return a1;
}

void sub_100024810(_Unwind_Exception *a1)
{
  sub_100024D40(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100024834(uint64_t a1)
{
  return a1;
}

void *sub_100024878(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000254C4((uint64_t)a1, a2);
  *a1 = off_1001A0780;
  a1[45] = &off_1001A0880;
  a1[46] = &off_1001A08A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0780;
  a1[45] = off_1001A0808;
  a1[46] = off_1001A0830;
  return a1;
}

void sub_100024978(_Unwind_Exception *a1)
{
  sub_100025554(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10002499C(uint64_t a1)
{
  return a1;
}

void *sub_1000249E0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100025CD8((uint64_t)a1, a2);
  *a1 = off_1001A09A0;
  a1[45] = &off_1001A0AA0;
  a1[46] = &off_1001A0AC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A09A0;
  a1[45] = off_1001A0A28;
  a1[46] = off_1001A0A50;
  return a1;
}

void sub_100024AE0(_Unwind_Exception *a1)
{
  sub_100025D68(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100024B04(uint64_t a1)
{
  return a1;
}

void *sub_100024B48(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000264EC((uint64_t)a1, a2);
  *a1 = off_1001A0BC0;
  a1[45] = &off_1001A0CC0;
  a1[46] = &off_1001A0CE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0BC0;
  a1[45] = off_1001A0C48;
  a1[46] = off_1001A0C70;
  return a1;
}

void sub_100024C48(_Unwind_Exception *a1)
{
  sub_10002657C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100024C6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100024CB0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A06F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100024D2C(_Unwind_Exception *a1)
{
}

uint64_t sub_100024D40(uint64_t a1)
{
  *(void *)a1 = off_1001A06F8;
  sub_100025148(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100024E7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100024D40(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100024EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100024F1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100024F84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100024D40(v1);
  return std::ios::~ios();
}

void sub_100024FD0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100024D40(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100025034(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100024D40(v1);
  return std::ios::~ios();
}

void sub_100025094(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100024D40(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100025110(uint64_t a1)
{
  sub_100024D40(a1);
  operator delete();
}

uint64_t sub_100025148(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000252CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000252A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000252CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 636;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 636;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000254C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0918;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100025540(_Unwind_Exception *a1)
{
}

uint64_t sub_100025554(uint64_t a1)
{
  *(void *)a1 = off_1001A0918;
  sub_10002595C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100025690(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100025554(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000256F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100025730(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100025798(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100025554(v1);
  return std::ios::~ios();
}

void sub_1000257E4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100025554(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100025848(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100025554(v1);
  return std::ios::~ios();
}

void sub_1000258A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100025554(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100025924(uint64_t a1)
{
  sub_100025554(a1);
  operator delete();
}

uint64_t sub_10002595C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100025AE0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100025AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100025AE0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 651;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 651;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100025CD8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0B38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100025D54(_Unwind_Exception *a1)
{
}

uint64_t sub_100025D68(uint64_t a1)
{
  *(void *)a1 = off_1001A0B38;
  sub_100026170(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100025EA4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100025D68(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100025F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100025F44(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100025FAC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100025D68(v1);
  return std::ios::~ios();
}

void sub_100025FF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100025D68(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002605C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100025D68(v1);
  return std::ios::~ios();
}

void sub_1000260BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100025D68(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100026138(uint64_t a1)
{
  sub_100025D68(a1);
  operator delete();
}

uint64_t sub_100026170(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000262F4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000262CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000262F4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 665;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 665;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000264EC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A0D58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100026568(_Unwind_Exception *a1)
{
}

uint64_t sub_10002657C(uint64_t a1)
{
  *(void *)a1 = off_1001A0D58;
  sub_100026984(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000266B8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10002657C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100026720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100026758(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000267C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002657C(v1);
  return std::ios::~ios();
}

void sub_10002680C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002657C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100026870(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002657C(v1);
  return std::ios::~ios();
}

void sub_1000268D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002657C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002694C(uint64_t a1)
{
  sub_10002657C(a1);
  operator delete();
}

uint64_t sub_100026984(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100026B08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100026AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100026B08(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 672;
    __int16 v21 = 2082;
    unint64_t v22 = v8;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v13 = a2;
      }
      else {
        long long v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 672;
      __int16 v21 = 2082;
      unint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100026D00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A0DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100026D20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A0DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100026D74(uint64_t a1)
{
}

uint64_t sub_100026D80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 20);
  *(void *)a1 = v6;
  uint64_t v7 = a1 + 8;
  if ((*(unsigned char *)(a3 + 16) & 2) != 0) {
    unint64_t v8 = *(void *)a3;
  }
  else {
    unint64_t v8 = *(void *)a3 + 1;
  }
  unint64_t v9 = (*(unsigned char *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1;
  sub_10010B464((uint64_t)&v22, v5);
  while (!sub_10010B4D0((uint64_t)&v22, (uint64_t)(a2 + 27)))
  {
    unint64_t v10 = v23;
    if ((v24 & 2) == 0) {
      unint64_t v10 = v23 + 1;
    }
    if (v10 >= v8) {
      break;
    }
    sub_10010B464((uint64_t)v21, (uint64_t)&v22);
    sub_10010B7F8(&v22);
    uint64_t v11 = v21[0];
    v21[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
  }
  if (sub_10010B4D0((uint64_t)&v22, (uint64_t)(a2 + 27)))
  {
    sub_100027038(v7, (uint64_t)(a2 + 27), (uint64_t)(a2 + 27), *((_DWORD *)a2 + 18));
  }
  else
  {
    sub_10010B464((uint64_t)&v18, (uint64_t)&v22);
    while (!sub_10010B4D0((uint64_t)&v18, (uint64_t)(a2 + 27)))
    {
      unint64_t v12 = v19;
      if ((v20 & 2) == 0) {
        unint64_t v12 = v19 + 1;
      }
      if (v12 > v9) {
        break;
      }
      sub_10010B464((uint64_t)v17, (uint64_t)&v18);
      sub_10010B7F8(&v18);
      uint64_t v13 = v17[0];
      v17[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
      }
    }
    sub_100027038(v7, (uint64_t)&v22, (uint64_t)&v18, *((_DWORD *)a2 + 18));
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
  }
  uint64_t v15 = v22;
  uint64_t v22 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  *(unsigned char *)(a1 + 288) = 0;
  return a1;
}

void sub_100026F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  uint64_t v25 = *(void *)(v23 - 120);
  *(void *)(v23 - 120) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100027038(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = a4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v7 = a1 + 96;
  *(void *)(a1 + 72) = a1 + 80;
  sub_10010B464(a1 + 96, a2);
  sub_10010B464(a1 + 152, a2);
  sub_10010B464(a1 + 208, a3);
  *(unsigned char *)(a1 + 272) = 0;
  if (!sub_10010B4D0(v7, a1 + 208))
  {
    uint64_t v8 = *(void *)(a1 + 104);
    if ((*(unsigned char *)(a1 + 120) & 2) == 0) {
      ++v8;
    }
    *(void *)(a1 + 264) = v8;
  }
  return a1;
}

void sub_1000270FC(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  *int v4 = 0;
  if (v6) {
    sub_1001515F4(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *v2;
  *unsigned __int8 v2 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  sub_100022314(*(void **)(v1 + 80));
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void sub_1000271A4(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_1000271DC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)sub_100139620(a1);
  sub_100004890(v14, v3);
  sub_100009FEC((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    int v4 = v14;
  }
  else {
    int v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  uint64_t v6 = sub_1000039A0(&v11, (uint64_t)v4, v5);
  uint64_t v7 = sub_1000039A0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_1000039A0(v8, (uint64_t)"]", 1);
  sub_100004624((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1000273E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  sub_100022314(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_1000274B0(uint64_t a1)
{
  uint64_t result = sub_10000C670(a1 + 120);
  if (*(unsigned char *)(a1 + 113))
  {
    return sub_10000C6D4(a1 + 24);
  }
  return result;
}

uint64_t sub_100027500(uint64_t a1, void *a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001A0E70;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40))() % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_1001C3DE8;
    uint64_t v7 = std::generic_category();
    exception[1] = 152;
    exception[2] = v7;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Size is not a multiple of block size";
  }
  return a1;
}

void sub_100027604(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100027624(void *a1)
{
  *a1 = off_1001A0E70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_100027670(void *a1)
{
  *a1 = off_1001A0E70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

uint64_t sub_1000276DC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_1000276E4(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
       / *(void *)(a1 + 32);
}

uint64_t sub_100027734(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_10002775C()
{
}

void sub_1000277C8()
{
}

uint64_t sub_1000277EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t sub_100027814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

void sub_10002783C()
{
}

void sub_1000278C4()
{
}

uint64_t sub_1000278E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long __p = v47;
  long long v46 = xmmword_10016E350;
  unint64_t v7 = sub_10001CF70(a3, (void *)a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(40 * v7);
    sub_10001D8B0((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v46, 0, 0);
  }
  v44[0] = &__p;
  v44[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&long long v32 = *(void *)a3;
  *((void *)&v32 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v33[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v34 = *(void *)(a3 + 48);
  long long v35 = *(_OWORD *)(a3 + 56);
  long long v36 = *(_OWORD *)(a3 + 72);
  long long v37 = *(_OWORD *)(a3 + 88);
  char v38 = *(unsigned char *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v39 = *(void *)(a3 + 112);
  uint64_t v40 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v41 = *(_OWORD *)(a3 + 128);
  uint64_t v42 = *(void *)(a3 + 144);
  char v43 = *(unsigned char *)(a3 + 152);
  uint64_t v12 = *(void *)(a4 + 8);
  *(void *)&long long v20 = *(void *)a4;
  *((void *)&v20 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v21[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v22 = *(void *)(a4 + 48);
  long long v23 = *(_OWORD *)(a4 + 56);
  long long v24 = *(_OWORD *)(a4 + 72);
  long long v25 = *(_OWORD *)(a4 + 88);
  char v26 = *(unsigned char *)(a4 + 104);
  char v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v27 = *(void *)(a4 + 112);
  uint64_t v28 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = *(_OWORD *)(a4 + 128);
  uint64_t v30 = *(void *)(a4 + 144);
  char v31 = *(unsigned char *)(a4 + 152);
  sub_100028098((uint64_t)v44, &v32, &v20, 0xFFFFFFFFFFFFFFFFLL);
  if (v28) {
    sub_100004944(v28);
  }
  if (*((void *)&v20 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v40) {
    sub_100004944(v40);
  }
  if (*((void *)&v32 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v32 + 1));
  }
  (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
  if ((void)v46)
  {
    int v14 = 0;
    unsigned __int8 v15 = (unsigned int *)__p;
    uint64_t v16 = 40 * v46;
    do
    {
      int v17 = sub_10001D688(v15);
      int v18 = v17;
      if (v17 < 0) {
        break;
      }
      v14 += v17;
      v15 += 10;
      int v18 = v14;
      v16 -= 40;
    }
    while (v16);
  }
  else
  {
    int v18 = 0;
  }
  if (*((void *)&v46 + 1) && v47 != __p) {
    operator delete(__p);
  }
  return v18;
}

void sub_100027BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sub_10000371C((uint64_t)&a9);
  sub_10000371C((uint64_t)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100027C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long __p = v47;
  long long v46 = xmmword_10016E350;
  unint64_t v7 = sub_10001CF70(a3, (void *)a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(40 * v7);
    sub_10001D8B0((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v46, 0, 0);
  }
  v44[0] = &__p;
  v44[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&long long v32 = *(void *)a3;
  *((void *)&v32 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v33[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v34 = *(void *)(a3 + 48);
  long long v35 = *(_OWORD *)(a3 + 56);
  long long v36 = *(_OWORD *)(a3 + 72);
  long long v37 = *(_OWORD *)(a3 + 88);
  char v38 = *(unsigned char *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v39 = *(void *)(a3 + 112);
  uint64_t v40 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v41 = *(_OWORD *)(a3 + 128);
  uint64_t v42 = *(void *)(a3 + 144);
  char v43 = *(unsigned char *)(a3 + 152);
  uint64_t v12 = *(void *)(a4 + 8);
  *(void *)&long long v20 = *(void *)a4;
  *((void *)&v20 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v21[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v22 = *(void *)(a4 + 48);
  long long v23 = *(_OWORD *)(a4 + 56);
  long long v24 = *(_OWORD *)(a4 + 72);
  long long v25 = *(_OWORD *)(a4 + 88);
  char v26 = *(unsigned char *)(a4 + 104);
  char v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v27 = *(void *)(a4 + 112);
  uint64_t v28 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = *(_OWORD *)(a4 + 128);
  uint64_t v30 = *(void *)(a4 + 144);
  char v31 = *(unsigned char *)(a4 + 152);
  sub_100028540((uint64_t)v44, &v32, &v20, 0xFFFFFFFFFFFFFFFFLL);
  if (v28) {
    sub_100004944(v28);
  }
  if (*((void *)&v20 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v40) {
    sub_100004944(v40);
  }
  if (*((void *)&v32 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v32 + 1));
  }
  (*(void (**)(void))(**(void **)(a2 + 16) + 144))(*(void *)(a2 + 16));
  if ((void)v46)
  {
    int v14 = 0;
    unsigned __int8 v15 = (unsigned int *)__p;
    uint64_t v16 = 40 * v46;
    do
    {
      int v17 = sub_10001D688(v15);
      int v18 = v17;
      if (v17 < 0) {
        break;
      }
      v14 += v17;
      v15 += 10;
      int v18 = v14;
      v16 -= 40;
    }
    while (v16);
  }
  else
  {
    int v18 = 0;
  }
  if (*((void *)&v46 + 1) && v47 != __p) {
    operator delete(__p);
  }
  return v18;
}

void sub_100027EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  sub_10000371C((uint64_t)&a9);
  sub_10000371C((uint64_t)&a29);
  if (a53)
  {
    if (v53 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100027F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16), a3);
}

uint64_t sub_100027F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24))(*(void *)(a2 + 16), *(void *)(a1 + 32) * *(i - 1), *i * *(void *)(a1 + 32));
    if (result) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return result;
}

void *sub_100027FE0(void *a1)
{
  *a1 = off_1001A0F40;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_10002802C(void *a1)
{
  *a1 = off_1001A0F40;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

uint64_t sub_100028098(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = sub_1000281E4(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_1000281C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1000281E4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v29[0] = 0;
  v29[528] = 0;
  while (!sub_1000410B8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v26 + 1) = 104;
      LODWORD(v27) = 2;
      sub_100018AAC(&v23, &v26);
      sub_1000039A0(v25, (uint64_t)"sg: ", 4);
      sub_100149114(v25);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_10008A630(a2, (uint64_t)&v23, (uint64_t)&v26);
    long long v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 128))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10001FC2C(v10, *v10 + 40 * v11, 1, (uint64_t)&v23, &v30);
    }
    else
    {
      sub_10001CB94(*v10 + 40 * v11, (uint64_t)&v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v27;
    if ((v27 & 0x80000000) != 0) {
      int64_t v13 = (int)v27;
    }
    else {
      int64_t v13 = v27;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v28;
      if (sub_100042754((uint64_t)a2, a3, v28, v13))
      {
        sub_100019864((uint64_t)v22, (uint64_t)a2);
        sub_100042718((uint64_t)v22, a3, v16, v13, a4, (uint64_t)&v23);
        sub_100018C14((uint64_t)v29, (uint64_t)&v23);
        sub_100018C5C(&v23);
        sub_10000371C((uint64_t)v22);
        sub_1000414AC((uint64_t)v29, (uint64_t)&v23);
        sub_100018CC8((uint64_t)a2, &v23);
        sub_10000371C((uint64_t)&v23);
        sub_1000411FC((uint64_t)v29, (uint64_t)&v23);
        sub_100018CC8(a3, &v23);
        sub_10000371C((uint64_t)&v23);
      }
      if (a5) {
        sub_100041B0C((uint64_t)a2, v13);
      }
      else {
        sub_100041C48((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v27 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v27;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v26 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  sub_1000197F0((uint64_t)v29);
  return v18;
}

void sub_1000284D0(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x2E0]);
  }
  sub_1000197F0((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t sub_100028540(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  uint64_t v15 = sub_10002868C(a1, &v28, (uint64_t)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_100028670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10002868C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *(void *)(a3 + 144);
  v29[0] = 0;
  v29[528] = 0;
  while (!sub_1000410B8((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v26 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v26 + 1) = 104;
      LODWORD(v27) = 2;
      sub_100018AAC(&v23, &v26);
      sub_1000039A0(v25, (uint64_t)"sg: ", 4);
      sub_100149114(v25);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v23);
      std::ios::~ios();
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    sub_10008A630(a2, (uint64_t)&v23, (uint64_t)&v26);
    long long v10 = *(uint64_t **)a1;
    (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 16) + 136))(&v23);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10001FC2C(v10, *v10 + 40 * v11, 1, (uint64_t)&v23, &v30);
    }
    else
    {
      sub_10001CB94(*v10 + 40 * v11, (uint64_t)&v23);
      ++v10[1];
    }
    uint64_t v12 = (int)v27;
    if ((v27 & 0x80000000) != 0) {
      int64_t v13 = (int)v27;
    }
    else {
      int64_t v13 = v27;
    }
    BOOL v14 = v13 >= 0 || v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v28;
      if (sub_100042754((uint64_t)a2, a3, v28, v13))
      {
        sub_100019864((uint64_t)v22, (uint64_t)a2);
        sub_100042718((uint64_t)v22, a3, v16, v13, a4, (uint64_t)&v23);
        sub_100018C14((uint64_t)v29, (uint64_t)&v23);
        sub_100018C5C(&v23);
        sub_10000371C((uint64_t)v22);
        sub_1000414AC((uint64_t)v29, (uint64_t)&v23);
        sub_100018CC8((uint64_t)a2, &v23);
        sub_10000371C((uint64_t)&v23);
        sub_1000411FC((uint64_t)v29, (uint64_t)&v23);
        sub_100018CC8(a3, &v23);
        sub_10000371C((uint64_t)&v23);
      }
      if (a5) {
        sub_100041B0C((uint64_t)a2, v13);
      }
      else {
        sub_100041C48((uint64_t)a2, v13);
      }
      v7 += v13;
    }
    else
    {
      if ((int)v27 >= 0) {
        uint64_t v12 = -(uint64_t)(int)v27;
      }
      uint64_t v18 = v12;
    }
    if (*((void *)&v26 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v26 + 1));
    }
    if ((v15 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = v7;
LABEL_37:
  sub_1000197F0((uint64_t)v29);
  return v18;
}

void sub_100028978(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x2E0]);
  }
  sub_1000197F0((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void sub_1000289E8()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_100028A38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  sub_100013494(*(void *)(*a1 + 8), (uint64_t)v5);
  sub_100013530(*(void *)(v3 + 8), (uint64_t)v4);
  sub_10010BC3C((uint64_t)v5, (uint64_t)v4, **(void **)v3, *a2);
}

void sub_100028B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    sub_100151558();
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100028BC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  sub_100013494(*(void *)(*a1 + 8), (uint64_t)v5);
  sub_100013530(*(void *)(v3 + 8), (uint64_t)v4);
  sub_10010BC3C((uint64_t)v5, (uint64_t)v4, **(void **)v3, *a2);
}

void sub_100028D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    sub_100151558();
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100028D58(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001A0F98[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

uint64_t sub_100028DB4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_100028DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void *sub_100028E1C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100028F84((uint64_t)a1, a2);
  *a1 = off_1001A0FC0;
  a1[45] = &off_1001A10C0;
  a1[46] = &off_1001A10E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A0FC0;
  a1[45] = off_1001A1048;
  a1[46] = off_1001A1070;
  return a1;
}

void sub_100028F1C(_Unwind_Exception *a1)
{
  sub_100029014(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100028F40(uint64_t a1)
{
  return a1;
}

uint64_t sub_100028F84(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1158;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100029000(_Unwind_Exception *a1)
{
}

uint64_t sub_100029014(uint64_t a1)
{
  *(void *)a1 = off_1001A1158;
  sub_10002941C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100029150(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100029014(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000291B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000291F0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100029258(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100029014(v1);
  return std::ios::~ios();
}

void sub_1000292A4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100029014(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100029308(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100029014(v1);
  return std::ios::~ios();
}

void sub_100029368(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100029014(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000293E4(uint64_t a1)
{
  sub_100029014(a1);
  operator delete();
}

uint64_t sub_10002941C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000295A0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100029578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000295A0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 191;
    __int16 v21 = 2082;
    long long v22 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    long long v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int64_t v13 = a2;
      }
      else {
        int64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 191;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100029798(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  sub_100029814(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100029800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100029814(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A11D8;
  sub_10014A20C(a1 + 3, a2, *a3);
  return a1;
}

void sub_100029860(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100029874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A11D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100029894(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A11D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000298E8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100029910(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_10011AE9C(a1, a2, a3);
  *(void *)uint64_t v4 = off_10019EA50;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v4 + 128));
  return a1;
}

void sub_100029958(_Unwind_Exception *a1)
{
  sub_100019B70(v1);
  _Unwind_Resume(a1);
}

void *sub_10002996C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10002A17C((uint64_t)a1, a2);
  *a1 = off_1001A1280;
  a1[45] = &off_1001A1380;
  a1[46] = &off_1001A13A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1280;
  a1[45] = off_1001A1308;
  a1[46] = off_1001A1330;
  return a1;
}

void sub_100029A6C(_Unwind_Exception *a1)
{
  sub_10002A20C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100029A90(uint64_t a1)
{
  return a1;
}

void *sub_100029AD4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10002A990((uint64_t)a1, a2);
  *a1 = off_1001A14A0;
  a1[45] = &off_1001A15A0;
  a1[46] = &off_1001A15C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A14A0;
  a1[45] = off_1001A1528;
  a1[46] = off_1001A1550;
  return a1;
}

void sub_100029BD4(_Unwind_Exception *a1)
{
  sub_10002AA20(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100029BF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100029C3C(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[8];
      if (v3) {
        sub_100004944(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_100029C88(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)a2;
  char v6 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  char v7 = *(unsigned char *)(a3 + 16);
  unint64_t v8 = (v7 & 1) + *(void *)(a3 + 8) - 1;
  unint64_t v9 = *(void *)(a2 + 32);
  if ((*(unsigned char *)(a2 + 48) & 2) == 0) {
    ++v9;
  }
  if (v8 < v9)
  {
LABEL_5:
    uint64_t v10 = *(void *)a2;
    if (*a1 == (uint64_t *)a2)
    {
      uint64_t v12 = a2;
LABEL_23:
      if (v10)
      {
        long long v25 = (void *)v12;
        __int16 v17 = (uint64_t **)(v12 + 8);
      }
      else
      {
        long long v25 = (void *)a2;
        __int16 v17 = (uint64_t **)a2;
      }
      goto LABEL_36;
    }
    if (v10)
    {
      uint64_t v11 = *(void *)a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v12 = *(void *)(v18 + 16);
        BOOL v13 = *(void *)v12 == v18;
        uint64_t v18 = v12;
      }
      while (v13);
    }
    unint64_t v19 = *(void *)a3;
    if ((*(unsigned char *)(a3 + 16) & 2) == 0) {
      ++v19;
    }
    if ((unint64_t)(*(unsigned char *)(v12 + 48) & 1) + *(void *)(v12 + 40) - 1 < v19) {
      goto LABEL_23;
    }
LABEL_35:
    __int16 v17 = (uint64_t **)sub_10000CA1C((uint64_t)a1, &v25, a3);
    goto LABEL_36;
  }
  BOOL v13 = (v7 & 2) == 0;
  unint64_t v14 = *(void *)a3;
  if (v13) {
    ++v14;
  }
  if ((unint64_t)(*(unsigned char *)(a2 + 48) & 1) + *(void *)(a2 + 40) - 1 < v14)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    if (v15)
    {
      int v16 = *(uint64_t **)(a2 + 8);
      do
      {
        __int16 v17 = (uint64_t **)v16;
        int v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      uint64_t v20 = (uint64_t **)a2;
      do
      {
        __int16 v17 = (uint64_t **)v20[2];
        BOOL v13 = *v17 == (uint64_t *)v20;
        uint64_t v20 = v17;
      }
      while (!v13);
    }
    if (v17 == v6) {
      goto LABEL_33;
    }
    unint64_t v21 = (unint64_t)v17[4];
    if (((_BYTE)v17[6] & 2) == 0) {
      ++v21;
    }
    if (v8 < v21)
    {
LABEL_33:
      if (v15)
      {
        long long v25 = v17;
      }
      else
      {
        long long v25 = (void *)a2;
        __int16 v17 = (uint64_t **)(a2 + 8);
      }
LABEL_36:
      uint64_t v4 = *v17;
      if (!*v17)
      {
        uint64_t v4 = (uint64_t *)operator new(0x48uLL);
        v23[1] = v6;
        *((_OWORD *)v4 + 2) = *(_OWORD *)a3;
        void v4[6] = *(void *)(a3 + 16);
        *(_OWORD *)(v4 + 7) = *(_OWORD *)(a3 + 24);
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        char v24 = 1;
        sub_10000CAA0(a1, (uint64_t)v25, v17, v4);
        v23[0] = 0;
        sub_100029C3C((uint64_t)v23);
      }
      return v4;
    }
    goto LABEL_35;
  }
  return v4;
}

void sub_100029E98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A1228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100029EB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A1228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100029F0C(uint64_t a1)
{
  sub_1000273E4(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
  {
    unsigned __int8 v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void *sub_100029F60(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_1000039A0(a1, (uint64_t)"name: ", 6);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  char v7 = sub_1000039A0(v3, v5, v6);
  unint64_t v8 = sub_1000039A0(v7, (uint64_t)" checksum: ", 11);
  return sub_100029FD0(v8);
}

void *sub_100029FD0(void *a1)
{
  uint64_t v1 = sub_1000039A0(a1, (uint64_t)"crc32 {", 7);
  uint64_t v2 = 0;
  int v3 = *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8);
  do
  {
    *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
    char v9 = 48;
    int v4 = sub_10000ED30(v1, &v9);
    *(void *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
    uint64_t v5 = (void *)std::ostream::operator<<();
    sub_1000039A0(v5, (uint64_t)" ", 1);
    ++v2;
  }
  while (v2 != 3);
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v8 = 48;
  uint64_t v6 = sub_10000ED30(v1, &v8);
  *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  std::ostream::operator<<();
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = v3;
  return sub_1000039A0(v1, (uint64_t)"}", 1);
}

uint64_t sub_10002A17C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1418;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10002A1F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10002A20C(uint64_t a1)
{
  *(void *)a1 = off_1001A1418;
  sub_10002A614(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10002A348(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10002A20C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002A3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10002A3E8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10002A450(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002A20C(v1);
  return std::ios::~ios();
}

void sub_10002A49C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002A20C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002A500(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002A20C(v1);
  return std::ios::~ios();
}

void sub_10002A560(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002A20C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002A5DC(uint64_t a1)
{
  sub_10002A20C(a1);
  operator delete();
}

uint64_t sub_10002A614(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10002A798((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10002A770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002A798(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 107;
    __int16 v21 = 2082;
    long long v22 = v8;
    char v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 107;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10002A990(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1638;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10002AA0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002AA20(uint64_t a1)
{
  *(void *)a1 = off_1001A1638;
  sub_10002AE28(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10002AB5C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10002AA20(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002ABC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10002ABFC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10002AC64(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002AA20(v1);
  return std::ios::~ios();
}

void sub_10002ACB0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002AA20(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002AD14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002AA20(v1);
  return std::ios::~ios();
}

void sub_10002AD74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002AA20(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002ADF0(uint64_t a1)
{
  sub_10002AA20(a1);
  operator delete();
}

uint64_t sub_10002AE28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10002AFAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10002AF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002AFAC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 108;
    __int16 v21 = 2082;
    long long v22 = v8;
    char v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    uint64_t v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 108;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *sub_10002B1A4(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        char v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    os_log_type_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_10000CAA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t sub_10002B264(uint64_t a1, _DWORD *a2)
{
  sub_10002C70C(&v5, 2);
  *(_DWORD *)a1 = v5;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a2) = *a2;
  int v6 = 32;
  sub_10002C7A4(&v7, &v6);
  *(_DWORD *)unsigned int v8 = a2;
  memset(&v8[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v7;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v8[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v8[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v8[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v8[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v8[48];
  return a1;
}

void sub_10002B35C(uint64_t a1)
{
  DWORD1(v6) = crc32(0, 0, 0);
  HIDWORD(v6) = 1;
  unsigned __int8 v2 = *(void **)(a1 + 600);
  if (v2 != (void *)(a1 + 608))
  {
    do
    {
      crc32(0, 0, 0);
      sub_10002B264((uint64_t)v7, (_DWORD *)(v2[7] + 24));
      long long v6 = *(_OWORD *)sub_10002CE7C((uint64_t)&v6, v7);
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          unsigned __int8 v2 = v4;
        }
        while (!v5);
      }
      unsigned __int8 v2 = v4;
    }
    while (v4 != (void *)(a1 + 608));
  }
  sub_100116D94((uint64_t)v7, (uint64_t)&v6);
  operator new();
}

void sub_10002B4CC()
{
}

void sub_10002B4F8(uint64_t a1, uint64_t *a2, void *a3)
{
  CFTypeRef cf = 0;
  sub_10002D11C((uint64_t)&v65, a2);
  sub_10002D11C((uint64_t)&v57, &v65);
  sub_10002D11C((uint64_t)v53, a3);
  for (; !sub_10011C258((uint64_t)&v57, (uint64_t)v53); ++v60)
  {
    int v5 = sub_10011C0F4(&v57);
    sub_10011C1F4((uint64_t)&v57);
    if (v5 == sub_100122ADC(@"plst")) {
      break;
    }
  }
  long long v61 = v57;
  long long v57 = 0uLL;
  LOBYTE(v62) = 0;
  char v63 = 0;
  if (v59)
  {
    long long v62 = v58;
    int v58 = 0;
    char v63 = 1;
  }
  uint64_t v64 = v60;
  if (v56) {
    sub_10000D758(&v55);
  }
  if (v54) {
    sub_100004944(v54);
  }
  if (v59) {
    sub_10000D758(&v58);
  }
  if (*((void *)&v57 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v57 + 1));
  }
  if (sub_10011C258((uint64_t)&v61, (uint64_t)a3))
  {
    sub_10011B4E0(buf);
    operator new[]();
  }
  sub_10011C0F4(&v61);
  long long v6 = sub_10011C1F4((uint64_t)&v61);
  CFRetain(v6);
  sub_10011C0F4(&v61);
  int v7 = (void *)sub_10011C1F4((uint64_t)&v61);
  *(void *)buf = v7;
  if (cf)
  {
    CFRelease(cf);
    int v7 = *(void **)buf;
  }
  CFTypeRef cf = v7;
  *(void *)buf = 0;
  sub_10002D538((const void **)buf);
  sub_10002CFDC((uint64_t)&v65, a2);
  sub_10002D11C((uint64_t)&v46, &v65);
  sub_10002D11C((uint64_t)v42, a3);
  uint64_t v8 = 0;
  if (!sub_10011C258((uint64_t)&v46, (uint64_t)v42))
  {
    do
    {
      int v9 = sub_10011C0F4(&v46);
      sub_10011C1F4((uint64_t)&v46);
      int v10 = sub_100122ADC(@"blkx");
      ++v50;
      BOOL v11 = sub_10011C258((uint64_t)&v46, (uint64_t)v42);
      if (v9 == v10) {
        ++v8;
      }
    }
    while (!v11);
  }
  if (v45) {
    sub_10000D758(&v44);
  }
  if (v43) {
    sub_100004944(v43);
  }
  if (v49) {
    sub_10000D758(&v48);
  }
  if (v47) {
    sub_100004944(v47);
  }
  CFDataRef v52 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a1 + 793), 16);
  sub_100004890(&values, "");
  buf[0] = 0;
  BYTE4(v71) = 0;
  sub_10002D1F4(&__p, 80);
  sub_10011B7BC((uint64_t)&values, (uint64_t)buf, 0, v52, (CFDictionaryRef *)&value);
  if (BYTE4(v71) && SBYTE3(v71) < 0) {
    operator delete(*(void **)buf);
  }
  if (v75 < 0) {
    operator delete((void *)values);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(Mutable, value);
  sub_10002D11C((uint64_t)&v36, &v65);
  sub_10002D11C((uint64_t)&v32, a3);
  sub_10002D03C(&v36, &v32);
  sub_10011C258((uint64_t)&v61, (uint64_t)a3);
  if (v35) {
    sub_10000D758(&v34);
  }
  if (v33) {
    sub_100004944(v33);
  }
  if (v39) {
    sub_10000D758(&v38);
  }
  if (v37) {
    sub_100004944(v37);
  }
  uint64_t v12 = *(void **)(a1 + 600);
  BOOL v13 = (void *)(a1 + 608);
  if (v12 == (void *)(a1 + 608))
  {
    CFIndex v14 = 0;
  }
  else
  {
    CFIndex v14 = 0;
    do
    {
      uint64_t v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v12[2];
          BOOL v17 = *v16 == (void)v12;
          uint64_t v12 = v16;
        }
        while (!v17);
      }
      ++v14;
      uint64_t v12 = v16;
    }
    while (v16 != v13);
  }
  CFMutableArrayRef v18 = CFArrayCreateMutable(kCFAllocatorDefault, v14, &kCFTypeArrayCallBacks);
  __int16 v19 = *(void **)(a1 + 600);
  if (v19 != v13)
  {
    uint64_t v20 = v19[7];
    int v67 = 0;
    if (sub_1000D8524())
    {
      *(void *)&long long values = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blk(const interval_sectors &, struct block &, const descriptor_t &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      *((void *)&values + 1) = 204;
      int v74 = 2;
      sub_10002D66C(buf, &values);
      sub_1000039A0(v72, (uint64_t)"generating for blkx ", 20);
      sub_100029F60(v72, v20);
      std::ostream::~ostream();
      sub_10002D9CC((uint64_t)buf);
      std::ios::~ios();
    }
    uint64_t v21 = sub_100119D88(a1, (uint64_t)(v19 + 4));
    if ((void *)v21 != v22)
    {
      uint64_t v23 = 0;
      char v24 = (void *)v21;
      do
      {
        long long v25 = (void *)v24[1];
        if (v25)
        {
          do
          {
            long long v26 = v25;
            long long v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            long long v26 = (void *)v24[2];
            BOOL v17 = *v26 == (void)v24;
            char v24 = v26;
          }
          while (!v17);
        }
        ++v23;
        char v24 = v26;
      }
      while (v26 != v22);
    }
    if (sub_1000D8524())
    {
      *(void *)&long long values = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blk(const interval_sectors &, struct block &, const descriptor_t &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      *((void *)&values + 1) = 204;
      int v74 = 2;
      sub_10002D7D4(buf, &values);
      sub_1000039A0(v72, (uint64_t)"num of runs ", 12);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10002E1E0((uint64_t)buf);
      std::ios::~ios();
    }
    operator new[]();
  }
  if (sub_1000D8524())
  {
    int v27 = *__error();
    if (sub_1000D850C())
    {
      *(void *)&long long values = 0;
      unint64_t v28 = sub_1000D848C();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 205;
      v69[0] = 2080;
      *(void *)&v69[1] = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blkx() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      __int16 v70 = 2114;
      CFMutableArrayRef v71 = v18;
      long long v29 = (char *)_os_log_send_and_compose_impl();

      if (v29)
      {
        fprintf(__stderrp, "%s\n", v29);
        free(v29);
      }
    }
    else
    {
      uint64_t v30 = sub_1000D848C();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 205;
        v69[0] = 2080;
        *(void *)&v69[1] = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blkx() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
        __int16 v70 = 2114;
        CFMutableArrayRef v71 = v18;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%.*s: blocks array: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v27;
  }
  operator new[]();
}

void sub_10002C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,const void *a42,const void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,const void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10002E964(&a31);
  sub_10002E964(&a42);
  sub_10000D758(&a43);
  sub_10002D56C(&a57);
  sub_100013C04((uint64_t)&a69);
  sub_100013C04((uint64_t)&STACK[0x208]);
  sub_10002D538((const void **)&STACK[0x230]);
  _Unwind_Resume(a1);
}

int *sub_10002C70C(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_10016E360;
  v4[1] = xmmword_10016E370;
  uint64_t v5 = 0x900000008;
  int v6 = 10;
  sub_100019EB0((uint64_t)"checksum_type", a2, v4, 11);
  return a1;
}

_DWORD *sub_10002C7A4(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x408u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_1001A16D0;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }
  *uint64_t result = *a2;
  return result;
}

void sub_10002C820(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10002C858(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_10002C860@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_100009FEC((uint64_t)v12);
  size_t v4 = strlen(*(const char **)(a1 + 8));
  sub_1000039A0(v13, *(void *)(a1 + 8), v4);
  sub_1000039A0(v13, (uint64_t)" - ", 3);
  uint64_t v5 = *(const char **)(a1 + 16);
  size_t v6 = strlen(v5);
  sub_1000039A0(v13, (uint64_t)v5, v6);
  sub_10002CAE0(v15, v12);
  *(void *)((char *)v12
  int v10 = v8;
  v13[0] = v8;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  sub_10002CDD0((uint64_t)v16, a2);
  v15[0] = v7;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v15 + (void)*(v7 - 3)) = v9;
  v15[2] = v10;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void (__cdecl ***sub_10002CAE0(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), void *a2))(std::basic_stringstream<char> *__hidden this)
{
  *a1 = v4;
  *(void *)((char *)*(v4 - 3) + (void)a1) = v3;
  a1[1] = (void (__cdecl **)(std::basic_stringstream<char> *__hidden))a2[1];
  a2[1] = 0;
  uint64_t v5 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  size_t v6 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v5, v6);
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = 0;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  a1[2] = v8;
  *(void *)((char *)*(v8 - 3) + (void)(a1 + 2)) = v7;
  *a1 = v9;
  *(void *)((char *)*(*a1 - 3) + (void)a1 + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_10002CDA8(_Unwind_Exception *a1)
{
}

void sub_10002CDD0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_1000046C4(a1);
  if (v5)
  {
    size_t v6 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      size_t v6 = (void *)*v6;
    }
    std::string::size_type v7 = v4 - (void)v6;
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0, v7);
  sub_10000477C(a1);
}

void sub_10002CE60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002CE7C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  unint64_t v4 = a2[1];
  long long v5 = *(_OWORD *)(a2 + 22);
  long long v15 = *(_OWORD *)(a2 + 18);
  long long v16 = v5;
  long long v6 = *(_OWORD *)(a2 + 30);
  long long v17 = *(_OWORD *)(a2 + 26);
  long long v18 = v6;
  long long v7 = *(_OWORD *)(a2 + 6);
  long long v11 = *(_OWORD *)(a2 + 2);
  long long v12 = v7;
  long long v8 = *(_OWORD *)(a2 + 14);
  long long v13 = *(_OWORD *)(a2 + 10);
  long long v14 = v8;
  int v10 = (uint64_t *)__PAIR64__(v4, v3);
  sub_100116EB4((uint64_t)&v10, (uint64_t)v19);
  int v10 = &v20;
  *(void *)&long long v11 = v4 >> 3;
  sub_10002CF3C(a1, (uint64_t)&v10);
  return a1;
}

uint64_t sub_10002CF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 == -1) {
    sub_1000289E8();
  }
  long long v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_1001A16F0[v2])(&v6, a1 + 4);
  return a1;
}

uLong sub_10002CFA0(const Bytef ****a1, _DWORD *a2)
{
  uLong result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t sub_10002CFDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_100004944(v6);
  }
  sub_10002D5A0((CFTypeRef *)(a1 + 16), (uint64_t)(a2 + 2));
  *(void *)(a1 + 32) = a2[4];
  return a1;
}

uint64_t sub_10002D03C(void *a1, void *a2)
{
  sub_10002D11C((uint64_t)v9, a1);
  sub_10002D11C((uint64_t)&v5, a2);
  for (uint64_t i = 0; !sub_10011C258((uint64_t)v9, (uint64_t)&v5); ++i)
    ++v13;
  if (v8) {
    sub_10000D758(&v7);
  }
  if (v6) {
    sub_100004944(v6);
  }
  if (v12) {
    sub_10000D758(&v11);
  }
  if (v10) {
    sub_100004944(v10);
  }
  return i;
}

void sub_10002D0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_10002D11C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10002D188((unsigned char *)(a1 + 16), (uint64_t)(a2 + 2));
  *(void *)(a1 + 32) = a2[4];
  return a1;
}

void sub_10002D170(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10002D188(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)a1 = 0;
    unsigned int v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }
  return a1;
}

void sub_10002D1D8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8)) {
    sub_10000D758((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_10002D1F4(_WORD *result, int a2)
{
  uint64_t v2 = 0;
  *uLong result = a2;
  uint64_t v5 = 0x10000800040002;
  int v6 = 4194336;
  __int16 v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2;
  }
  while (v2 != 14);
  if (a2)
  {
    __int16 v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "block_attributes";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_1001A1728;
    *((_WORD *)exception + 16) = v3;
  }
  return result;
}

void sub_10002D2F8(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void sub_10002D330(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int16 v3 = (char *)sub_100139620(a1);
  sub_100004890(v14, v3);
  sub_100009FEC((uint64_t)v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = v14;
  }
  else {
    uint64_t v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  int v6 = sub_1000039A0(&v11, (uint64_t)v4, v5);
  __int16 v7 = sub_1000039A0(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v8 = (void *)std::ostream::operator<<();
  sub_1000039A0(v8, (uint64_t)"]", 1);
  sub_100004624((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

const void **sub_10002D538(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10002D56C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef *sub_10002D5A0(CFTypeRef *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*((unsigned __int8 *)result + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*((unsigned char *)result + 8))
    {
      return sub_10002D624(result, (CFTypeRef *)a2);
    }
  }
  else if (*((unsigned char *)result + 8))
  {
    uLong result = sub_10000D758(result);
    *((unsigned char *)v2 + 8) = 0;
  }
  else
  {
    *uLong result = 0;
    uLong result = *(CFTypeRef **)a2;
    *uint64_t v2 = *(CFTypeRef *)a2;
    if (result) {
      uLong result = (CFTypeRef *)CFRetain(result);
    }
    *((unsigned char *)v2 + 8) = 1;
  }
  return result;
}

CFTypeRef *sub_10002D624(CFTypeRef *a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRetain(*a2);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  *a1 = *a2;
  return a1;
}

void *sub_10002D66C(void *a1, long long *a2)
{
  __int16 v3 = (std::ios_base *)(a1 + 46);
  sub_10002D93C((uint64_t)a1, a2);
  *a1 = off_1001A1760;
  a1[45] = &off_1001A1860;
  a1[46] = &off_1001A1888;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1760;
  a1[45] = off_1001A17E8;
  a1[46] = off_1001A1810;
  return a1;
}

void sub_10002D76C(_Unwind_Exception *a1)
{
  sub_10002D9CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10002D790(uint64_t a1)
{
  return a1;
}

void *sub_10002D7D4(void *a1, long long *a2)
{
  __int16 v3 = (std::ios_base *)(a1 + 46);
  sub_10002E150((uint64_t)a1, a2);
  *a1 = off_1001A1980;
  a1[45] = &off_1001A1A80;
  a1[46] = &off_1001A1AA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A1980;
  a1[45] = off_1001A1A08;
  a1[46] = off_1001A1A30;
  return a1;
}

void sub_10002D8D4(_Unwind_Exception *a1)
{
  sub_10002E1E0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10002D8F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002D93C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A18F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10002D9B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D9CC(uint64_t a1)
{
  *(void *)a1 = off_1001A18F8;
  sub_10002DDD4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10002DB08(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10002D9CC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002DB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10002DBA8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10002DC10(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002D9CC(v1);
  return std::ios::~ios();
}

void sub_10002DC5C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002D9CC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002DCC0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002D9CC(v1);
  return std::ios::~ios();
}

void sub_10002DD20(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002D9CC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002DD9C(uint64_t a1)
{
  sub_10002D9CC(a1);
  operator delete();
}

uint64_t sub_10002DDD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10002DF58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10002DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002DF58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 136;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v13 = a2;
      }
      else {
        char v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 136;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uLong result = __error();
  *uLong result = v5;
  return result;
}

uint64_t sub_10002E150(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A1B18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10002E1CC(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E1E0(uint64_t a1)
{
  *(void *)a1 = off_1001A1B18;
  sub_10002E5E8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10002E31C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10002E1E0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002E384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10002E3BC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10002E424(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002E1E0(v1);
  return std::ios::~ios();
}

void sub_10002E470(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10002E1E0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10002E4D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002E1E0(v1);
  return std::ios::~ios();
}

void sub_10002E534(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10002E1E0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10002E5B0(uint64_t a1)
{
  sub_10002E1E0(a1);
  operator delete();
}

uint64_t sub_10002E5E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10002E76C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10002E744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002E76C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 147;
    __int16 v21 = 2082;
    long long v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    int v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v13 = a2;
      }
      else {
        char v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 147;
      __int16 v21 = 2082;
      long long v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uLong result = __error();
  *uLong result = v5;
  return result;
}

const void **sub_10002E964(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10002E998(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A0F98[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_10002EA00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A0F98[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

void sub_10002EB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002EBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002EDA8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10002EEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10002F3D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002F3E8(uint64_t a1)
{
}

void sub_10002F3F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_10002F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002F568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FD2C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100030B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void *sub_100030EC8@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  unsigned __int8 v2 = a1;
  uLong result = *a1;
  if (result
  {
    id v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    unsigned __int8 v2 = a2;
  }
  *unsigned __int8 v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_100031098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000312B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000312C4(uint64_t a1)
{
}

void sub_1000312CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *__error();
  if (sub_1000D850C())
  {
    id v5 = sub_1000D848C();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68158210;
    int v11 = 89;
    __int16 v12 = 2080;
    char v13 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
    __int16 v14 = 2114;
    id v15 = v3;
    id v6 = (char *)_os_log_send_and_compose_impl();

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }
  else
  {
    uint64_t v7 = sub_1000D848C();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      int v11 = 89;
      __int16 v12 = 2080;
      char v13 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      __int16 v14 = 2114;
      id v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%.*s: Error calling back the client via XPC: %{public}@", buf, 0x1Cu);
    }
  }
  *__error() = v4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v3;
}

void sub_10003149C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    int v5 = *__error();
    if (sub_1000D850C())
    {
      id v6 = sub_1000D848C();
      os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 68158210;
      int v14 = 89;
      __int16 v15 = 2080;
      int v16 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      __int16 v17 = 2114;
      id v18 = v4;
      goto LABEL_6;
    }
    uint64_t v8 = sub_1000D848C();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      int v14 = 89;
      __int16 v15 = 2080;
      int v16 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      __int16 v17 = 2114;
      id v18 = v4;
      uint64_t v9 = "%.*s: Client reported error: %{public}@";
      int v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 28;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  int v5 = *__error();
  if (!sub_1000D850C())
  {
    uint64_t v8 = sub_1000D848C();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v14 = 89;
      __int16 v15 = 2080;
      int v16 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      uint64_t v9 = "%.*s: Client acknowledged receiving the device handle";
      int v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
      uint32_t v12 = 18;
      goto LABEL_12;
    }
LABEL_13:

    goto LABEL_14;
  }
  id v6 = sub_1000D848C();
  os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  *(_DWORD *)buf = 68157954;
  int v14 = 89;
  __int16 v15 = 2080;
  int v16 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
LABEL_6:
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  if (v7)
  {
    fprintf(__stderrp, "%s\n", v7);
    free(v7);
  }
LABEL_14:
  *__error() = v5;
}

void sub_100031E0C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    id v4 = [v3 reason];
    +[DIError errorWithEnumValue:150 verboseInfo:v4];
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x100031D70);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032294(uint64_t *a1)
{
  unsigned __int8 v2 = (void *)a1[4];
  id v9 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
    id v8 = v4;
    +[DIControllerServiceDelegate tryAttachWithParams:v5 clientConnection:v6 outError:&v8];
    id v7 = v8;

    id v4 = v7;
  }
  [(id)a1[4] invalidate];
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100032620(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v8 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = [[DIConvertManager alloc] initWithParams:*(void *)(a1 + 32)];
    id v7 = v4;
    [(DIConvertManager *)v5 runWithError:&v7];
    id v6 = v7;

    id v4 = v6;
  }
  [*(id *)(a1 + 32) invalidate];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100032820(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v8 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = [[DIVerifyManager alloc] initWithParams:*(void *)(a1 + 32)];
    id v7 = v4;
    [(DIVerifyManager *)v5 runWithError:&v7];
    id v6 = v7;

    id v4 = v6;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100032A18(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v8 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = [[DIUserDataManager alloc] initWithParams:*(void *)(a1 + 32)];
    id v7 = v4;
    [(DIUserDataManager *)v5 embedWithError:&v7];
    id v6 = v7;

    id v4 = v6;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100032C10(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v10 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v10];
  id v4 = v10;
  uint64_t v5 = v4;
  if (!v3)
  {
    id v8 = v4;
LABEL_6:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_7;
  }
  id v6 = [[DIUserDataManager alloc] initWithParams:*(void *)(a1 + 32)];
  id v9 = v5;
  unsigned int v7 = [(DIUserDataManager *)v6 retrieveWithError:&v9];
  id v8 = v9;

  if (!v7)
  {

    goto LABEL_6;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

LABEL_7:
}

void sub_100032E34(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v9 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v4;
  unsigned int v6 = [v5 keychainUnlockWithError:&v8];
  id v7 = v8;

  if (!v6)
  {
    id v4 = v7;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v7 = v4;
    goto LABEL_6;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_6:
}

void sub_100033040(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v9 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v4;
  unsigned int v6 = [v5 GUIAskForPassphraseWithError:&v8];
  id v7 = v8;

  if (!v6)
  {
    id v4 = v7;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v7 = v4;
    goto LABEL_6;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_6:
}

void sub_100033270(void *a1)
{
  unsigned __int8 v2 = (void *)a1[4];
  id v10 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v10];
  id v4 = v10;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v9 = v4;
  unsigned int v7 = [v5 createAndStoreInSystemKeychainWithAccount:v6 error:&v9];
  id v8 = v9;

  if (!v7)
  {
    id v4 = v8;
LABEL_5:
    (*(void (**)(void))(a1[6] + 16))();
    id v8 = v4;
    goto LABEL_6;
  }
  (*(void (**)(void))(a1[6] + 16))();
LABEL_6:
}

void sub_100033480(uint64_t a1)
{
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_1000312B4;
  v17[4] = sub_1000312C4;
  id v18 = 0;
  unsigned __int8 v2 = *(void **)(a1 + 32);
  id v16 = 0;
  unsigned int v3 = [v2 validateDeserializationWithError:&v16];
  id v4 = v16;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = [[DIController2IO_XPCHandlerBase alloc] initWithParams:*(void *)(a1 + 32)];
  id v15 = v4;
  unsigned __int8 v6 = [(DIBaseXPCHandler *)v5 connectWithError:&v15];
  id v7 = v15;

  if ((v6 & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_8:

    id v4 = v7;
    goto LABEL_9;
  }
  id v8 = [(DIBaseXPCHandler *)v5 remoteProxy];
  uint64_t v9 = *(void *)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000336A4;
  v12[3] = &unk_1001A1C78;
  int v14 = v17;
  id v10 = v5;
  char v13 = v10;
  [v8 retrieveStatsWithParams:v9 reply:v12];

  id v11 = v7;
  LODWORD(v9) = [(DIBaseXPCHandler *)v10 completeCommandWithError:&v11];
  id v4 = v11;

  if (!v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

    id v7 = v4;
    goto LABEL_8;
  }

LABEL_5:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_9:
  _Block_object_dispose(v17, 8);
}

void sub_100033688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000336A4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  [*(id *)(a1 + 32) signalCommandCompletedWithXpcError:v6];
}

void sub_1000337F0(id a1)
{
  int v1 = *__error();
  if (sub_1000D850C())
  {
    unsigned __int8 v2 = sub_1000D848C();
    os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68157954;
    int v6 = 63;
    __int16 v7 = 2080;
    id v8 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    id v4 = sub_1000D848C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 63;
      __int16 v7 = 2080;
      id v8 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%.*s: Got to XPC interruption handler", buf, 0x12u);
    }
  }
  *__error() = v1;
}

void sub_100033980(id a1)
{
  int v1 = *__error();
  if (sub_1000D850C())
  {
    unsigned __int8 v2 = sub_1000D848C();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68157954;
    int v6 = 63;
    __int16 v7 = 2080;
    id v8 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    id v4 = sub_1000D848C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v6 = 63;
      __int16 v7 = 2080;
      id v8 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Got to XPC invalidation handler", buf, 0x12u);
    }
  }
  *__error() = v1;
}

uint64_t start()
{
  int v0 = *__error();
  if (sub_1000D850C())
  {
    int v1 = sub_1000D848C();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    unsigned __int8 v2 = +[NSBundle mainBundle];
    [v2 executablePath];
    *(_DWORD *)buf = 68158210;
    int v25 = 28;
    __int16 v26 = 2080;
    int v27 = "int main(int, const char **)";
    __int16 v28 = 2114;
    long long v29 = (char *)objc_claimAutoreleasedReturnValue();
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();

    if (v3)
    {
      fprintf(__stderrp, "%s\n", v3);
      free(v3);
    }
  }
  else
  {
    id v4 = sub_1000D848C();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = +[NSBundle mainBundle];
      int v6 = [v5 executablePath];
      *(_DWORD *)buf = 68158210;
      int v25 = 28;
      __int16 v26 = 2080;
      int v27 = "int main(int, const char **)";
      __int16 v28 = 2114;
      long long v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%.*s: Controller path: %{public}@", buf, 0x1Cu);
    }
  }
  *__error() = v0;
  int v7 = *__error();
  if (sub_1000D850C())
  {
    id v8 = sub_1000D848C();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uid_t v9 = geteuid();
    *(_DWORD *)buf = 68158210;
    int v25 = 28;
    __int16 v26 = 2080;
    int v27 = "int main(int, const char **)";
    __int16 v28 = 1024;
    LODWORD(v29) = v9;
    id v10 = (char *)_os_log_send_and_compose_impl();

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }
  else
  {
    id v11 = sub_1000D848C();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uid_t v12 = geteuid();
      *(_DWORD *)buf = 68158210;
      int v25 = 28;
      __int16 v26 = 2080;
      int v27 = "int main(int, const char **)";
      __int16 v28 = 1024;
      LODWORD(v29) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Controller euid: %d", buf, 0x18u);
    }
  }
  *__error() = v7;
  int v13 = *__error();
  if (sub_1000D850C())
  {
    int v14 = sub_1000D848C();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)buf = 68158210;
    int v25 = 28;
    __int16 v26 = 2080;
    int v27 = "int main(int, const char **)";
    __int16 v28 = 2080;
    long long v29 = "379.60.1";
    id v15 = (char *)_os_log_send_and_compose_impl();

    if (v15)
    {
      fprintf(__stderrp, "%s\n", v15);
      free(v15);
    }
  }
  else
  {
    id v16 = sub_1000D848C();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68158210;
      int v25 = 28;
      __int16 v26 = 2080;
      int v27 = "int main(int, const char **)";
      __int16 v28 = 2080;
      long long v29 = "379.60.1";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%.*s: DiskImages2 framework version: %s", buf, 0x1Cu);
    }
  }
  *__error() = v13;
  __int16 v17 = objc_alloc_init(DIControllerServiceDelegate);
  [(DIControllerServiceDelegate *)v17 enterSandbox];
  [(DIBaseServiceDelegate *)v17 startXPClistener];
  id v18 = +[NSRunLoop currentRunLoop];
  [v18 run];

  int v19 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v20 = sub_1000D848C();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 68157954;
    int v25 = 28;
    __int16 v26 = 2080;
    int v27 = "int main(int, const char **)";
    __int16 v21 = (char *)_os_log_send_and_compose_impl();

    if (v21)
    {
      fprintf(__stderrp, "%s\n", v21);
      free(v21);
    }
  }
  else
  {
    long long v22 = sub_1000D848C();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v25 = 28;
      __int16 v26 = 2080;
      int v27 = "int main(int, const char **)";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%.*s: Run loop aborted", buf, 0x12u);
    }
  }
  *__error() = v19;

  return 0;
}

void sub_100034BB0(uint64_t a1, uint64_t a2)
{
  uid_t v9 = [[DIIOIterator alloc] initWithIOIterator:a2 retain:1];
  unsigned int v3 = [[DIIOObject alloc] initWithIteratorNext:v9];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    do
    {
      id v6 = [(DIIOObject *)v4 newIteratorWithOptions:3 error:0];
      if (v6)
      {
        while (1)
        {
          int v7 = v5;
          uint64_t v5 = [[DIIOObject alloc] initWithIteratorNext:v6];

          if (!v5 || IOObjectConformsTo([(DIIOObject *)v5 ioObj], "IOMedia")) {
            break;
          }
          if (IOObjectIsEqualTo([(DIIOObject *)v5 ioObj], *(_DWORD *)(a1 + 8)))
          {
            **(unsigned char **)a1 = 1;

            goto LABEL_9;
          }
        }
      }

      id v8 = [[DIIOObject alloc] initWithIteratorNext:v9];
      id v4 = v8;
    }
    while (v8);
LABEL_9:
  }
}

uint64_t sub_1000350EC(uint64_t a1)
{
  unsigned __int8 v2 = malloc(0xAF8uLL);
  uint64_t v3 = (uint64_t)v2;
  if (!v2)
  {
    __int16 v7 = 192;
LABEL_36:
    long long v33 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"aaS3ContextClone", v7, 80, *v33, "malloc", v34, v35, v46);
    AAS3ContextDestroy(v3);
    return 0;
  }
  memset_s(v2, 0xAF8uLL, 0, 0xAF8uLL);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)uint64_t v3 = 1;
    memcpy((void *)(v3 + 4), (const void *)(a1 + 4), 0xAC4uLL);
  }
  id v4 = *(const void **)(a1 + 2760);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 2760));
    size_t v6 = v5 + 1;
    if (v5 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_13:
      int v13 = (void *)(v3 + 2760);
      __int16 v7 = 198;
LABEL_35:
      *int v13 = 0;
      goto LABEL_36;
    }
    id v8 = malloc(v5 + 1);
    if (!v8) {
      goto LABEL_13;
    }
    uid_t v9 = v8;
    memcpy(v8, v4, v6);
    *(void *)(v3 + 2760) = v9;
  }
  id v10 = *(const void **)(a1 + 2768);
  if (v10)
  {
    size_t v11 = strlen(*(const char **)(a1 + 2768));
    size_t v12 = v11 + 1;
    if (v11 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_19:
      int v13 = (void *)(v3 + 2768);
      __int16 v7 = 199;
      goto LABEL_35;
    }
    int v14 = malloc(v11 + 1);
    if (!v14) {
      goto LABEL_19;
    }
    id v15 = v14;
    memcpy(v14, v10, v12);
    *(void *)(v3 + 2768) = v15;
  }
  id v16 = *(const void **)(a1 + 2776);
  if (v16)
  {
    size_t v17 = strlen(*(const char **)(a1 + 2776));
    size_t v18 = v17 + 1;
    if (v17 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_25:
      int v13 = (void *)(v3 + 2776);
      __int16 v7 = 200;
      goto LABEL_35;
    }
    int v19 = malloc(v17 + 1);
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v20 = v19;
    memcpy(v19, v16, v18);
    *(void *)(v3 + 2776) = v20;
  }
  __int16 v21 = *(const void **)(a1 + 2784);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(a1 + 2784));
    size_t v23 = v22 + 1;
    if (v22 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_34:
      int v13 = (void *)(v3 + 2784);
      __int16 v7 = 201;
      goto LABEL_35;
    }
    char v24 = malloc(v22 + 1);
    if (!v24) {
      goto LABEL_34;
    }
    int v25 = v24;
    memcpy(v24, v21, v23);
    *(void *)(v3 + 2784) = v25;
  }
  uint64_t v26 = *(void *)(a1 + 2792);
  if (v26)
  {
    list = 0;
    p_list = &list;
    while (1)
    {
      __int16 v28 = (curl_slist *)malloc(0x10uLL);
      if (!v28) {
        break;
      }
      p_data = &v28->data;
      v28->data = 0;
      v28->next = 0;
      *p_list = v28;
      uint64_t v30 = strdup(*(const char **)v26);
      *p_data = v30;
      if (!v30) {
        break;
      }
      p_list = (curl_slist **)(p_data + 1);
      uint64_t v26 = *(void *)(v26 + 8);
      if (!v26)
      {
        BOOL v31 = 1;
        uint64_t v32 = list;
        goto LABEL_39;
      }
    }
    curl_slist_free_all(list);
    uint64_t v32 = 0;
    BOOL v31 = *(void *)(a1 + 2792) != 0;
LABEL_39:
    *(void *)(v3 + 2792) = v32;
    if (v31 && v32 == 0)
    {
      __int16 v7 = 202;
      goto LABEL_36;
    }
  }
  else
  {
    *(void *)(v3 + 2792) = 0;
  }
  uint64_t v38 = *(void *)(a1 + 2800);
  if (!v38)
  {
    *(void *)(v3 + 2800) = 0;
    return v3;
  }
  list = 0;
  char v39 = &list;
  while (1)
  {
    uint64_t v40 = (curl_slist *)malloc(0x10uLL);
    if (!v40) {
      break;
    }
    long long v41 = &v40->data;
    v40->data = 0;
    v40->next = 0;
    char *v39 = v40;
    uint64_t v42 = strdup(*(const char **)v38);
    void *v41 = v42;
    if (!v42) {
      break;
    }
    char v39 = (curl_slist **)(v41 + 1);
    uint64_t v38 = *(void *)(v38 + 8);
    if (!v38)
    {
      BOOL v43 = 1;
      char v44 = list;
      goto LABEL_53;
    }
  }
  curl_slist_free_all(list);
  char v44 = 0;
  BOOL v43 = *(void *)(a1 + 2800) != 0;
LABEL_53:
  *(void *)(v3 + 2800) = v44;
  if (v43 && v44 == 0)
  {
    __int16 v7 = 203;
    goto LABEL_36;
  }
  return v3;
}

void AAS3ContextDestroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 2760));
    free(*(void **)(a1 + 2768));
    free(*(void **)(a1 + 2776));
    free(*(void **)(a1 + 2784));
    curl_slist_free_all(*(curl_slist **)(a1 + 2792));
    curl_slist_free_all(*(curl_slist **)(a1 + 2800));
    memset_s((void *)a1, 0xAF8uLL, 0, 0xAF8uLL);
    free((void *)a1);
  }
}

void *AAS3ContextCreate()
{
  int v0 = malloc(0xAF8uLL);
  int v1 = v0;
  if (!v0)
  {
    uid_t v9 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 355, 80, *v9, "malloc", v10, v11, v13);
    goto LABEL_5;
  }
  memset_s(v0, 0xAF8uLL, 0, 0xAF8uLL);
  if ((AAS3ContextSetFieldString((uint64_t)v1, 5, "Not A Ninja/1.0", v2, v3, v4, v5, v6) & 0x80000000) != 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextCreate", 358, 80, 0, "set context", v7, v8, v13);
    memset_s(v1, 0xAF8uLL, 0, 0xAF8uLL);
LABEL_5:
    free(v1);
    return 0;
  }
  return v1;
}

uint64_t AAS3ContextSetFieldString(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      uid_t v9 = (void **)(a1 + 2760);
      if (__s) {
        goto LABEL_17;
      }
      goto LABEL_20;
    case 1:
      uid_t v9 = (void **)(a1 + 2768);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 2:
      uid_t v9 = (void **)(a1 + 2776);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      uint64_t v10 = (curl_slist **)(a1 + 2792);
      if (!__s) {
        return 0;
      }
      goto LABEL_12;
    case 4:
      uint64_t v10 = (curl_slist **)(a1 + 2800);
      if (!__s) {
        return 0;
      }
LABEL_12:
      if (!*__s) {
        return 0;
      }
      uint64_t v11 = curl_slist_append(*v10, __s);
      if (v11)
      {
        size_t v12 = v11;
        uint64_t result = 0;
        const void *v10 = v12;
        return result;
      }
      int v18 = *__error();
      __int16 v21 = 407;
      goto LABEL_26;
    case 5:
      uid_t v9 = (void **)(a1 + 2784);
      if (!__s) {
        goto LABEL_20;
      }
LABEL_17:
      if (!*__s)
      {
LABEL_20:
        id v16 = 0;
LABEL_21:
        free(*v9);
        uint64_t result = 0;
        *uid_t v9 = v16;
        return result;
      }
      size_t v14 = strlen(__s);
      size_t v15 = v14 + 1;
      if (v14 + 1 >= 0x2000000001)
      {
        *__error() = 12;
        goto LABEL_24;
      }
      size_t v17 = malloc(v14 + 1);
      if (v17)
      {
        id v16 = v17;
        memcpy(v17, __s, v15);
        goto LABEL_21;
      }
LABEL_24:
      int v18 = *__error();
      __int16 v21 = 399;
LABEL_26:
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", v21, 80, v18, "malloc", v19, v20, v22);
      return 0xFFFFFFFFLL;
    default:
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c", (uint64_t)"AAS3ContextSetFieldString", 391, 80, 0, "invalid field %u", a7, a8, a2);
      return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100035760(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1 >> 62)
    {
      v9.tv_sec = 0;
      *(void *)&v9.tv_usec = 0;
      gettimeofday(&v9, 0);
      double v2 = (double)v9.tv_sec + (double)v9.tv_usec * 0.000001 - *(double *)(a1 + 40);
      fwrite("AAS3DownloadStream (curl)\n", 0x1AuLL, 1uLL, __stderrp);
      uint64_t v3 = __stderrp;
      unint64_t v4 = atomic_load((unint64_t *)(a1 + 32));
      unint64_t v5 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v3, "%12llu bytes downloaded (%.2f MB)\n", v4, (double)v5 * 0.000000953674316);
      uint64_t v6 = __stderrp;
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v6, "%12.2f MB/s download speed\n", (double)v7 / v2 * 0.000000953674316);
    }
    sub_1000375A0(a1);
    memset_s((void *)a1, 0x30uLL, 0, 0x30uLL);
    free((void *)a1);
  }
  return 0;
}

AAByteStream_impl *sub_100035880(char *a1, uint64_t a2, uint64_t a3)
{
  curl_global_init(3);
  uint64_t v6 = AACustomByteStreamOpen();
  unint64_t v7 = (double *)malloc(0x30uLL);
  if (!v7 || (uint64_t v8 = v7, memset_s(v7, 0x30uLL, 0, 0x30uLL), !v6))
  {
    perror("malloc");
    goto LABEL_7;
  }
  if ((sub_100037470(v8, a1, a2, a3) & 0x80000000) != 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"s3DownloadStreamOpen_curl", 132, 83, 0, "s3StreamBaseInit", v9, v10, v12.tv_sec);
LABEL_7:
    AAByteStreamClose(v6);
    return 0;
  }
  v12.tv_sec = 0;
  *(void *)&v12.tv_usec = 0;
  gettimeofday(&v12, 0);
  v8[5] = (double)v12.tv_sec + (double)v12.tv_usec * 0.000001;
  AACustomByteStreamSetData(v6, v8);
  AACustomByteStreamSetCloseProc(v6, (AAByteStreamCloseProc)sub_100035760);
  AACustomByteStreamSetPReadProc(v6, (AAByteStreamPReadProc)sub_1000359DC);
  AACustomByteStreamSetReadProc(v6, (AAByteStreamReadProc)sub_100035B9C);
  return v6;
}

uint64_t sub_1000359DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v19 = a2;
  *((void *)&v19 + 1) = a3;
  uint64_t v20 = 0;
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v16 = a2;
    uint64_t v6 = a4 + a3;
    uint64_t v7 = a4 + a3 - 1;
    while (1)
    {
      snprintf(__str, 0xC8uLL, "Range: bytes=%llu-%llu", v6 - a3, v7);
      unsigned int v11 = 0;
      v21[0] = __str;
      v21[1] = 0;
      long long v17 = v19;
      uint64_t v18 = v20;
      useconds_t v12 = 125000;
      do
      {
        if (v11)
        {
          sub_10003BAB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 65, 83, "s3Perform retry after %u ms", v8, v9, v10, v12 / 0x3E8);
          usleep(v12);
          v12 *= 2;
        }
        long long v19 = v17;
        uint64_t v20 = v18;
        int v13 = sub_100036118(1u, *(char **)(a1 + 8), a1, 0, &v19, 0, v21);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
      }
      while (v11++ < 3);
      if (v13 < 0) {
        break;
      }
      a3 = *((void *)&v19 + 1);
      if (!*((void *)&v19 + 1))
      {
        uint64_t v5 = v19;
        a2 = v16;
        goto LABEL_12;
      }
    }
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c", (uint64_t)"downloadStreamPRead", 81, 83, 0, "s3Perform failed (after retry), %s", v9, v10, (char)__str);
    return -1;
  }
  else
  {
LABEL_12:
    uint64_t result = v5 - a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 32), v5 - a2, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100035B9C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000359DC(a1, a2, a3, atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), a3));
}

uint64_t sub_100035BA8(_DWORD *a1, unsigned int *a2, const void *a3, size_t a4)
{
  memset(&v8, 0, sizeof(v8));
  CCHmacInit(&v8, 2u, a2 + 1, *a2);
  CCHmacUpdate(&v8, a3, a4);
  CCHmacFinal(&v8, a1 + 1);
  *a1 = 32;
  memset_s(a1 + 9, 0xE0uLL, 0, 0xE0uLL);
  memset_s(&v8, 0x180uLL, 0, 0x180uLL);
  return 0;
}

uint64_t sub_100035C78(uint64_t a1, const void *a2, CC_LONG a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA256_Init(&v7);
  CC_SHA256_Update(&v7, a2, a3);
  CC_SHA256_Final((unsigned __int8 *)(a1 + 4), &v7);
  *(_DWORD *)a1 = 32;
  memset_s((void *)(a1 + 36), 0xE0uLL, 0, 0xE0uLL);
  return memset_s(&v7, 0x68uLL, 0, 0x68uLL);
}

size_t sub_100035D18(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = __src;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 24))
    {
      uint64_t v7 = 0;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 24))(*(void *)v6, v4, v5);
          if (v8 < 1) {
            break;
          }
          v4 += v8;
          v7 += v8;
          v5 -= v8;
          if (!v5) {
            return v7 & ~(v7 >> 63);
          }
        }
        uint64_t v7 = v8;
      }
    }
    else
    {
      uint64_t v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(*(void **)a4, __src, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + 8) = v10;
    return v5;
  }
}

size_t sub_100035DD0(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = __dst;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
      uint64_t v7 = 0;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 16))(*(void *)v6, v4, v5);
          if (v8 < 0) {
            break;
          }
          if (v8)
          {
            v4 += v8;
            v7 += v8;
            v5 -= v8;
            if (v5) {
              continue;
            }
          }
          return v7 & ~(v7 >> 63);
        }
        uint64_t v7 = v8;
      }
    }
    else
    {
      uint64_t v7 = -1;
    }
    return v7 & ~(v7 >> 63);
  }
  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(__dst, *(const void **)a4, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + 8) = v10;
    return v5;
  }
}

uint64_t sub_100035E88(curl_slist **a1, char *__format, ...)
{
  va_start(va, __format);
  int v4 = vsnprintf(0, 0, __format, va);
  if (v4 < 0)
  {
    unsigned int v11 = 0;
LABEL_8:
    useconds_t v12 = "vsnprintf";
    __int16 v13 = 156;
    int v14 = 0;
LABEL_12:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", v13, 84, v14, v12, v5, v6, v20);
    uint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v7 = v11;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 1;
    while ((v8 & 1) != 0)
    {
      size_t v9 = (v4 + 1);
      size_t v10 = (char *)realloc(v7, v9);
      unsigned int v11 = v10;
      if (!v10)
      {
        free(v7);
        int v14 = *__error();
        useconds_t v12 = "malloc";
        __int16 v13 = 161;
        goto LABEL_12;
      }
      int v4 = vsnprintf(v10, v9, __format, va);
      char v8 = 0;
      uint64_t v7 = v11;
      if (v4 < 0) {
        goto LABEL_8;
      }
    }
    size_t v15 = curl_slist_append(*a1, v7);
    if (v15)
    {
      uint64_t v18 = 0;
      *a1 = v15;
    }
    else
    {
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppendWithFormat", 168, 84, 0, "curl_slist_append failed\n", v16, v17, v20);
      uint64_t v18 = 0xFFFFFFFFLL;
    }
  }
  free(v7);
  return v18;
}

uint64_t sub_100035FF0(curl_slist **a1, const char *a2)
{
  uint64_t v3 = curl_slist_append(*a1, a2);
  uint64_t v6 = v3;
  if (v3) {
    *a1 = v3;
  }
  else {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3HeaderAppend", 182, 84, 0, "curl_slist_append failed\n", v4, v5, v8);
  }
  if (v6) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

unint64_t sub_100036058(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 * a2;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
  {
    uint64_t v11 = 499;
    curl_easy_getinfo(*(CURL **)a4, CURLINFO_RESPONSE_CODE, &v11);
    int v7 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    if (v7 == 200)
    {
      if (*(_DWORD *)(a4 + 12)) {
        *(void *)(a4 + 24) = *(void *)(a4 + 16);
      }
    }
  }
  unint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = v6 - v8;
  if (v6 >= v8)
  {
    if (v8)
    {
      a1 += v8;
      *(void *)(a4 + 24) = 0;
    }
    else
    {
      uint64_t v9 = v6;
    }
    sub_100035D18(a1, v9, 1, *(void *)(a4 + 32));
  }
  else
  {
    *(void *)(a4 + 24) = v8 - v6;
  }
  return v6;
}

uint64_t sub_100036118(unsigned int a1, char *a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, const char **a7)
{
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v60 = 0;
  if (a4) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v15 = -1;
  }
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  if (a5)
  {
    long long v58 = *a5;
    uint64_t v59 = *((void *)a5 + 2);
  }
  long long v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v16 = curl_easy_init();
  if (!v16)
  {
    uint64_t v26 = __stderrp;
    int v27 = "curl_easy_init failed\n";
    size_t v28 = 22;
LABEL_42:
    fwrite(v27, v28, 1uLL, v26);
    goto LABEL_43;
  }
  if ((sub_100035FF0(&v60, "Content-Type:") & 0x80000000) != 0
    || (sub_100035FF0(&v60, "Transfer-Encoding:") & 0x80000000) != 0
    || (sub_100035FF0(&v60, "Accept: application/xml") & 0x80000000) != 0
    || (v15 & 0x8000000000000000) == 0 && (sub_100035E88(&v60, "Content-Length: %zd", v15) & 0x80000000) != 0)
  {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) + 2792);
  if (v17)
  {
    while ((sub_100035FF0(&v60, *(const char **)v17) & 0x80000000) == 0)
    {
      uint64_t v17 = *(void *)(v17 + 8);
      if (!v17) {
        goto LABEL_15;
      }
    }
    goto LABEL_43;
  }
LABEL_15:
  if (a7)
  {
    uint64_t v18 = *a7;
    if (*a7)
    {
      long long v19 = a7 + 1;
      while ((sub_100035FF0(&v60, v18) & 0x80000000) == 0)
      {
        char v20 = *v19++;
        uint64_t v18 = v20;
        if (!v20) {
          goto LABEL_20;
        }
      }
      goto LABEL_43;
    }
  }
LABEL_20:
  if (*(_DWORD *)v14 && (sub_10003674C(&v60, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    uint64_t v26 = __stderrp;
    int v27 = "Failed to sign request\n";
    size_t v28 = 23;
    goto LABEL_42;
  }
  CURLcode v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  CURLcode v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v60);
  CURLcode v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400);
  BOOL v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1) | v23 | v22 | v21) == 0;
  if (*(void *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(void *)(v14 + 2784))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(void *)(v14 + 2760))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(void *)(v14 + 2768))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(void *)(v14 + 2776))) {
    BOOL v24 = 0;
  }
  if (*(void *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(void *)(v14 + 2800))) {
    BOOL v24 = 0;
  }
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      CURLcode v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      BOOL v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1) | v33) == 0;
    }
    else
    {
      if (a1) {
        goto LABEL_53;
      }
      BOOL v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1) == CURLE_OK;
    }
    if (!v25) {
      BOOL v24 = 0;
    }
LABEL_53:
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }
  if (curl_easy_setopt(v16, CURLOPT_POST, 1)) {
    BOOL v24 = 0;
  }
  if (!a4)
  {
    CURLcode v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0) | v31;
    goto LABEL_55;
  }
LABEL_54:
  CURLcode v34 = curl_easy_setopt(v16, CURLOPT_READFUNCTION, sub_100035DD0);
  unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_READDATA, a4) | v34;
LABEL_55:
  if (v32) {
    BOOL v24 = 0;
  }
LABEL_57:
  if (a5)
  {
    *(void *)&long long v55 = v16;
    long long v57 = a5;
    DWORD2(v55) = -1;
    if (a7)
    {
      uint64_t v35 = *a7;
      if (*a7)
      {
        uint64_t v36 = 0;
        do
        {
          if (!strncmp(v35, "Range:", 6uLL))
          {
            int v39 = *((unsigned __int8 *)v35 + 6);
            uint64_t v38 = v35 + 6;
            char v37 = v39;
            if (v39)
            {
              do
              {
                if (v37 < 0)
                {
                  if (!__maskrune(v37, 0x4000uLL)) {
                    break;
                  }
                }
                else if ((_DefaultRuneLocale.__runetype[v37] & 0x4000) == 0)
                {
                  break;
                }
                int v40 = *(unsigned __int8 *)++v38;
                char v37 = v40;
              }
              while (v40);
            }
            if (!strncmp(v38, "bytes=", 6uLL))
            {
              int v43 = *((unsigned __int8 *)v38 + 6);
              uint64_t v42 = v38 + 6;
              char v41 = v43;
              if (v43)
              {
                do
                {
                  if (v41 < 0)
                  {
                    if (!__maskrune(v41, 0x4000uLL)) {
                      break;
                    }
                  }
                  else if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) == 0)
                  {
                    break;
                  }
                  int v44 = *(unsigned __int8 *)++v42;
                  char v41 = v44;
                }
                while (v44);
              }
              HIDWORD(v55) = 1;
              *(void *)&long long v56 = strtoull(v42, 0, 0);
            }
          }
          uint64_t v35 = a7[++v36];
        }
        while (v35);
      }
    }
    CURLcode v45 = curl_easy_setopt(v16, CURLOPT_WRITEFUNCTION, sub_100036058);
    if (curl_easy_setopt(v16, CURLOPT_WRITEDATA, &v55) | v45) {
      BOOL v24 = 0;
    }
  }
  if (a6)
  {
    if (curl_easy_setopt(v16, CURLOPT_HEADERFUNCTION, sub_100035D18)) {
      BOOL v24 = 0;
    }
    if (curl_easy_setopt(v16, CURLOPT_HEADERDATA, a6)) {
      goto LABEL_86;
    }
  }
  if (!v24)
  {
LABEL_86:
    uint64_t v26 = __stderrp;
    int v27 = "curl_easy_setopt failed\n";
    size_t v28 = 24;
    goto LABEL_42;
  }
  CURLcode v46 = curl_easy_perform(v16);
  if (v46 == CURLE_OK)
  {
    uint64_t v54 = 499;
    curl_easy_getinfo(v16, CURLINFO_RESPONSE_CODE, &v54);
    if ((unint64_t)(v54 - 400) <= 0xC7)
    {
      if (a1 != 1 || v54 != 416)
      {
        sub_10003BAB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 401, 84, "HTTP %u\n", v51, v52, v53, v54);
        goto LABEL_43;
      }
      if (a5)
      {
        uint64_t v29 = 0;
        *a5 = v58;
        *((void *)a5 + 2) = v59;
        goto LABEL_44;
      }
    }
    uint64_t v29 = 0;
    goto LABEL_44;
  }
  char v47 = v46;
  curl_easy_strerror(v46);
  sub_10003BAB4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Perform", 379, 84, "> %d %s\n", v48, v49, v50, v47);
LABEL_43:
  uint64_t v29 = 0xFFFFFFFFLL;
LABEL_44:
  curl_slist_free_all(v60);
  curl_easy_cleanup(v16);
  return v29;
}

uint64_t sub_10003674C(curl_slist **a1, unsigned int a2, char *__s, uint64_t a4, uint64_t a5)
{
  v118[0] = 0;
  v118[1] = 0;
  uint64_t v119 = 0;
  v116[0] = 0;
  v116[1] = 0;
  uint64_t v117 = 0;
  v114[0] = 0;
  v114[1] = 0;
  uint64_t v115 = 0;
  v112[0] = 0;
  v112[1] = 0;
  uint64_t v113 = 0;
  int v123 = 0;
  memset(__sa, 0, sizeof(__sa));
  size_t v10 = strlen(__s);
  if (v10 < 7) {
    goto LABEL_8;
  }
  if (*(_DWORD *)__s == 1886680168 && *(_DWORD *)(__s + 3) == 791624304)
  {
    uint64_t v19 = 7;
  }
  else
  {
    if (v10 < 8 || *(void *)__s != 0x2F2F3A7370747468)
    {
LABEL_8:
      uint64_t v14 = "Invalid URL";
      __int16 v15 = 486;
LABEL_9:
      int v16 = 0;
LABEL_10:
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v15, 84, v16, v14, v11, v12, v100);
LABEL_11:
      BOOL v17 = 0;
      goto LABEL_12;
    }
    uint64_t v19 = 8;
  }
  char v20 = &__s[v19];
  CURLcode v21 = strchr(&__s[v19], 47);
  if (!v21)
  {
    uint64_t v14 = "Invalid URL";
    __int16 v15 = 488;
    goto LABEL_9;
  }
  CURLcode v22 = v21;
  unint64_t v110 = v20;
  unsigned int v108 = a2;
  CURLcode v23 = strchr(v21, 63);
  BOOL v24 = "/";
  uint64_t v109 = v22;
  if (!v23)
  {
    size_t v30 = strlen(v22);
    if (v30 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v30;
    }
    if (v30) {
      BOOL v24 = v22;
    }
    goto LABEL_32;
  }
  BOOL v25 = v23;
  uint64_t v26 = v23 + 1;
  size_t v27 = strlen(v23 + 1);
  BOOL v28 = v25 == v22;
  if (v25 == v22) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v25 - v22;
  }
  if (!v28) {
    BOOL v24 = v22;
  }
  if (!v27)
  {
LABEL_32:
    size_t v27 = 0;
    uint64_t v26 = "";
  }
  size_t __n = v27;
  unint64_t v107 = (char *)v26;
  if ((sub_100035E88(a1, "X-Amz-Date: %s", (const char *)(a4 + 68)) & 0x80000000) != 0
    || *(unsigned char *)(a4 + 452)
    && (sub_100035E88(a1, "X-Amz-Security-Token: %s", (const char *)(a4 + 452)) & 0x80000000) != 0)
  {
    goto LABEL_11;
  }
  __src = (char *)v24;
  if (a5)
  {
    CURLcode v31 = *(const void **)a5;
    uint64_t v32 = *(void *)(a5 + 8);
    int v140 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    sub_100035C78((uint64_t)&v124, v31, v32);
    if (v124)
    {
      uint64_t v33 = v29;
      CURLcode v34 = (unsigned __int8 *)&v124 + 4;
      uint64_t v35 = 2 * v124;
      size_t v36 = v35 | 1;
      char v37 = __str;
      do
      {
        int v38 = *v34++;
        snprintf(v37, v36, "%02x", v38);
        v36 -= 2;
        v37 += 2;
      }
      while (v36 != 1);
LABEL_44:
      uint64_t v29 = v33;
      goto LABEL_46;
    }
  }
  else
  {
    int v140 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    sub_100035C78((uint64_t)&v124, 0, 0);
    if (v124)
    {
      uint64_t v33 = v29;
      int v39 = (unsigned __int8 *)&v124 + 4;
      uint64_t v35 = 2 * v124;
      size_t v40 = v35 | 1;
      char v41 = __str;
      do
      {
        int v42 = *v39++;
        snprintf(v41, v40, "%02x", v42);
        v40 -= 2;
        v41 += 2;
      }
      while (v40 != 1);
      goto LABEL_44;
    }
  }
  uint64_t v35 = 0;
LABEL_46:
  __str[v35] = 0;
  memset_s(&v124, 0x104uLL, 0, 0x104uLL);
  if ((sub_100035E88(a1, "X-Amz-Content-Sha256: %s", __str) & 0x80000000) != 0) {
    goto LABEL_11;
  }
  int v43 = *a1;
  if (*a1)
  {
    uint64_t v44 = 0;
    do
    {
      ++v44;
      int v43 = v43->next;
    }
    while (v43);
  }
  else
  {
    uint64_t v44 = 0;
  }
  uint64_t v111 = calloc(v44 + 1, 8uLL);
  if (!v111)
  {
    int v16 = *__error();
    uint64_t v14 = "malloc";
    __int16 v15 = 520;
    goto LABEL_10;
  }
  uint64_t v103 = (char *)(a4 + 68);
  size_t v104 = v29;
  uint64_t v101 = a1;
  uint64_t v102 = a4;
  CURLcode v45 = *a1;
  if (!v45)
  {
    uint64_t v46 = 0;
LABEL_77:
    size_t v55 = v22 - v110;
    size_t v56 = v109 - v110 + 6;
    if (v56 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_82:
      int v60 = *__error();
      __int16 v63 = 554;
      goto LABEL_85;
    }
    long long v57 = (char *)malloc(v56);
    if (!v57) {
      goto LABEL_82;
    }
    long long v58 = &v57[v55];
    v111[v46] = v57;
    v57[4] = 58;
    *(_DWORD *)long long v57 = 1953722216;
    memcpy(v57 + 5, v110, v55);
    v58[5] = 0;
    qsort(v111, v46 + 1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_10003730C);
    if (v108 > 3) {
      uint64_t v59 = "???";
    }
    else {
      uint64_t v59 = off_1001A1CF8[v108];
    }
    size_t v64 = strlen(v59);
    if ((sub_100037318(v118, v59, v64) & 0x80000000) == 0
      && (sub_100037318(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100037318(v118, __src, v104) & 0x80000000) == 0
      && (sub_100037318(v118, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100037318(v118, v107, __n) & 0x80000000) == 0
      && (sub_100037318(v118, "\n", 1uLL) & 0x80000000) == 0)
    {
      if (v46 == -1)
      {
LABEL_102:
        if ((sub_100037318(v118, "\n", 1uLL) & 0x80000000) == 0)
        {
          long long v72 = v117;
          size_t v73 = strlen(v117);
          if ((sub_100037318(v118, v117, v73) & 0x80000000) == 0 && (sub_100037318(v118, "\n", 1uLL) & 0x80000000) == 0)
          {
            size_t v74 = strlen(__str);
            if ((sub_100037318(v118, __str, v74) & 0x80000000) == 0
              && (sub_100037318(v114, "AWS4-HMAC-SHA256\n", 0x11uLL) & 0x80000000) == 0)
            {
              size_t v75 = strlen(v103);
              if ((sub_100037318(v114, v103, v75) & 0x80000000) == 0
                && (sub_100037318(v114, "\n", 1uLL) & 0x80000000) == 0)
              {
                int v76 = (char *)(v102 + 4);
                size_t v77 = strlen((const char *)(v102 + 4));
                if ((sub_100037318(v114, (void *)(v102 + 4), v77) & 0x80000000) == 0
                  && (sub_100037318(v114, "/", 1uLL) & 0x80000000) == 0)
                {
                  uint64_t v78 = (char *)(v102 + 132);
                  size_t v79 = strlen((const char *)(v102 + 132));
                  if ((sub_100037318(v114, (void *)(v102 + 132), v79) & 0x80000000) == 0
                    && (sub_100037318(v114, "/s3/aws4_request\n", 0x11uLL) & 0x80000000) == 0)
                  {
                    int v140 = 0;
                    long long v138 = 0u;
                    long long v139 = 0u;
                    long long v136 = 0u;
                    long long v137 = 0u;
                    long long v134 = 0u;
                    long long v135 = 0u;
                    long long v132 = 0u;
                    long long v133 = 0u;
                    long long v130 = 0u;
                    long long v131 = 0u;
                    long long v128 = 0u;
                    long long v129 = 0u;
                    long long v126 = 0u;
                    long long v127 = 0u;
                    long long v124 = 0u;
                    long long v125 = 0u;
                    CC_LONG v80 = strlen(v119);
                    sub_100035C78((uint64_t)&v124, v119, v80);
                    if (v124)
                    {
                      uint64_t v81 = (unsigned __int8 *)&v124 + 4;
                      uint64_t v82 = 2 * v124;
                      size_t v83 = v82 | 1;
                      int v84 = v120;
                      do
                      {
                        int v85 = *v81++;
                        snprintf(v84, v83, "%02x", v85);
                        v83 -= 2;
                        v84 += 2;
                      }
                      while (v83 != 1);
                    }
                    else
                    {
                      uint64_t v82 = 0;
                    }
                    v120[v82] = 0;
                    memset_s(&v124, 0x104uLL, 0, 0x104uLL);
                    size_t v88 = strlen(v120);
                    if ((sub_100037318(v114, v120, v88) & 0x80000000) == 0)
                    {
                      size_t v89 = strlen(v115);
                      sub_100035BA8(__sa, (unsigned int *)(v102 + 2500), v115, v89);
                      if (LODWORD(__sa[0]))
                      {
                        unint64_t v90 = (unsigned __int8 *)__sa + 4;
                        uint64_t v91 = 2 * LODWORD(__sa[0]);
                        size_t v92 = v91 | 1;
                        unint64_t v93 = v120;
                        do
                        {
                          int v94 = *v90++;
                          snprintf(v93, v92, "%02x", v94);
                          v92 -= 2;
                          v93 += 2;
                        }
                        while (v92 != 1);
                      }
                      else
                      {
                        uint64_t v91 = 0;
                      }
                      v120[v91] = 0;
                      if ((sub_100037318(v112, "AWS4-HMAC-SHA256 Credential=", 0x1CuLL) & 0x80000000) == 0)
                      {
                        size_t v95 = strlen((const char *)(v102 + 196));
                        if ((sub_100037318(v112, (void *)(v102 + 196), v95) & 0x80000000) == 0
                          && (sub_100037318(v112, "/", 1uLL) & 0x80000000) == 0)
                        {
                          size_t v96 = strlen(v76);
                          if ((sub_100037318(v112, v76, v96) & 0x80000000) == 0
                            && (sub_100037318(v112, "/", 1uLL) & 0x80000000) == 0)
                          {
                            size_t v97 = strlen(v78);
                            if ((sub_100037318(v112, v78, v97) & 0x80000000) == 0
                              && (sub_100037318(v112, "/s3/aws4_request,SignedHeaders=", 0x1FuLL) & 0x80000000) == 0)
                            {
                              size_t v98 = strlen(v72);
                              if ((sub_100037318(v112, v72, v98) & 0x80000000) == 0
                                && (sub_100037318(v112, ",Signature=", 0xBuLL) & 0x80000000) == 0)
                              {
                                size_t v99 = strlen(v120);
                                if ((sub_100037318(v112, v120, v99) & 0x80000000) == 0)
                                {
                                  BOOL v17 = (int)sub_100035E88(v101, "Authorization: %s", v113) >= 0;
                                  goto LABEL_119;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v65 = 0;
        while (1)
        {
          v66 = (char *)v111[v65];
          int v67 = strchr(v66, 58);
          if (!v67) {
            break;
          }
          __int16 v70 = v67;
          size_t v71 = strlen(v66);
          if ((sub_100037318(v118, v66, v71) & 0x80000000) != 0
            || (sub_100037318(v118, "\n", 1uLL) & 0x80000000) != 0
            || v65 && (sub_100037318(v116, ";", 1uLL) & 0x80000000) != 0
            || (sub_100037318(v116, v66, v70 - v66) & 0x80000000) != 0)
          {
            goto LABEL_118;
          }
          if (v46 + 1 == ++v65) {
            goto LABEL_102;
          }
        }
        sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", 580, 84, 0, "Invalid header: %s", v68, v69, (char)v66);
      }
    }
LABEL_118:
    BOOL v17 = 0;
LABEL_119:
    ++v46;
    goto LABEL_120;
  }
  uint64_t v46 = 0;
  while (1)
  {
    data = v45->data;
    if (strncasecmp(v45->data, "x-amz-", 6uLL)) {
      goto LABEL_73;
    }
    size_t v48 = strlen(data);
    if (v48 + 1 >= 0x2000000001) {
      break;
    }
    uint64_t v49 = malloc(v48 + 1);
    if (!v49) {
      goto LABEL_84;
    }
    uint64_t v50 = v49;
    v111[v46] = v49;
    if (v48)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v53 = 1;
      while (1)
      {
        __darwin_ct_rune_t v54 = v45->data[v51];
        if (v54 < 0)
        {
          if (!__maskrune(v45->data[v51], 0x4000uLL))
          {
LABEL_64:
            if (v54 == 58) {
              int v53 = 0;
            }
            if (v53) {
              LOBYTE(v54) = __tolower(v54);
            }
            v50[v52++] = v54;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[v54] & 0x4000) == 0)
        {
          goto LABEL_64;
        }
        if (v48 == ++v51) {
          goto LABEL_72;
        }
      }
    }
    uint64_t v52 = 0;
LABEL_72:
    ++v46;
    v50[v52] = 0;
LABEL_73:
    CURLcode v45 = v45->next;
    if (!v45) {
      goto LABEL_77;
    }
  }
  *__error() = 12;
LABEL_84:
  int v60 = *__error();
  __int16 v63 = 538;
LABEL_85:
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3Sign", v63, 84, v60, "malloc", v61, v62, v100);
  BOOL v17 = 0;
LABEL_120:
  if (v46)
  {
    unint64_t v86 = (void **)v111;
    do
    {
      int v87 = *v86++;
      free(v87);
      --v46;
    }
    while (v46);
  }
  free(v111);
LABEL_12:
  memset_s(__sa, 0x104uLL, 0, 0x104uLL);
  memset_s(v120, 0x80uLL, 0, 0x80uLL);
  memset_s(__str, 0x80uLL, 0, 0x80uLL);
  sub_100037424((uint64_t)v118);
  sub_100037424((uint64_t)v116);
  sub_100037424((uint64_t)v114);
  sub_100037424((uint64_t)v112);
  if (v17) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10003730C(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_100037318(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  size_t v8 = v6 + __n + 1;
  BOOL v9 = v8 >= *a1;
  size_t v10 = v8 - *a1;
  if (!v9) {
    size_t v10 = 0;
  }
  unint64_t v11 = (v10 + 255) & 0xFFFFFFFFFFFFFF00;
  unint64_t v12 = v7 + v11;
  __int16 v13 = (char *)a1[2];
  if (v7 + v11 <= v7) {
    goto LABEL_8;
  }
  if (v12 < 0x2000000001)
  {
    uint64_t v14 = (char *)realloc((void *)a1[2], v7 + v11);
    if (!v14)
    {
      free(v13);
      goto LABEL_10;
    }
    a1[2] = (unint64_t)v14;
    *a1 = v12;
    __int16 v13 = v14;
    unint64_t v6 = a1[1];
LABEL_8:
    memcpy(&v13[v6], __src, __n);
    uint64_t result = 0;
    unint64_t v16 = a1[2];
    uint64_t v17 = a1[1] + __n;
    a1[1] = v17;
    *(unsigned char *)(v16 + v17) = 0;
    return result;
  }
  *__error() = 12;
LABEL_10:
  a1[2] = 0;
  uint64_t v18 = __error();
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StringBufferAppend", 431, 84, *v18, "malloc", v19, v20, v21);
  *a1 = 0;
  a1[1] = 0;
  return 0xFFFFFFFFLL;
}

void sub_100037424(uint64_t a1)
{
  int v1 = *(void **)(a1 + 16);
  if (v1) {
    memset_s(*(void **)(a1 + 16), *(void *)a1, 0, *(void *)a1);
  }
  free(v1);
}

uint64_t sub_100037470(void *__s, char *a2, uint64_t a3, uint64_t a4)
{
  if (__s) {
    memset_s(__s, 0x18uLL, 0, 0x18uLL);
  }
  *__s = a4;
  if (a2)
  {
    size_t v8 = strlen(a2);
    size_t v9 = v8 + 1;
    if (v8 + 1 >= 0x2000000001)
    {
      *__error() = 12;
LABEL_10:
      __s[1] = 0;
      int v13 = *__error();
      unint64_t v16 = "strdup";
      __int16 v17 = 653;
      goto LABEL_15;
    }
    size_t v10 = malloc(v8 + 1);
    if (!v10) {
      goto LABEL_10;
    }
    unint64_t v11 = v10;
    memcpy(v10, a2, v9);
    __s[1] = v11;
  }
  if (a3) {
    uint64_t v12 = sub_1000350EC(a3);
  }
  else {
    uint64_t v12 = (uint64_t)AAS3ContextCreate();
  }
  __s[2] = v12;
  if (v12) {
    return 0;
  }
  int v13 = *__error();
  unint64_t v16 = "malloc";
  __int16 v17 = 656;
LABEL_15:
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c", (uint64_t)"s3StreamBaseInit", v17, 84, v13, v16, v14, v15, v19);
  sub_1000375A0((uint64_t)__s);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000375A0(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  AAS3ContextDestroy(*(void *)(a1 + 16));
  return memset_s((void *)a1, 0x18uLL, 0, 0x18uLL);
}

AAByteStream_impl *AAS3DownloadStreamOpen(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && *(_DWORD *)a2) {
    return sub_100035880(a1, a2, a3);
  }
  else {
    return sub_100038FC4(a1, a2, a3, a4);
  }
}

void sub_100037978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000379A4(uint64_t a1, void *a2, void *a3, id a4)
{
  unint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  +[AAS3DownloadSession completeRequest:WeakRetained data:v9 response:v8 error:v7];
}

void sub_100037A58(uint64_t a1, uint64_t a2)
{
}

void sub_100037A64(uint64_t a1)
{
}

uint64_t sub_100038E2C(void *a1)
{
  if (a1)
  {
    double v2 = (void *)a1[3];
    if (v2)
    {
      a1[3] = 0;
      atomic_store((unint64_t)[v2 bytesDownloaded], a1 + 5);
      [v2 invalidateAndCancel];
    }
    if (*a1 >> 62)
    {
      v10.tv_sec = 0;
      *(void *)&v10.tv_usec = 0;
      gettimeofday(&v10, 0);
      double v3 = (double)v10.tv_sec + (double)v10.tv_usec * 0.000001 - *((double *)a1 + 6);
      fwrite("AAS3DownloadStream (NSURLSession)\n", 0x22uLL, 1uLL, __stderrp);
      fprintf(__stderrp, "%12u max attempts for a request\n", *((_DWORD *)a1 + 14));
      fprintf(__stderrp, "%12u max requests in flight\n", *((_DWORD *)a1 + 16));
      fprintf(__stderrp, "%12.2f initial interval between retries (s)\n", *((float *)a1 + 15));
      uint64_t v4 = __stderrp;
      unint64_t v5 = atomic_load(a1 + 5);
      unint64_t v6 = atomic_load(a1 + 5);
      fprintf(v4, "%12llu bytes downloaded (%.2f MB)\n", v5, (double)v6 * 0.000000953674316);
      id v7 = __stderrp;
      unint64_t v8 = atomic_load(a1 + 5);
      fprintf(v7, "%12.2f MB/s download speed\n", (double)v8 / v3 * 0.000000953674316);
    }
    sub_1000375A0((uint64_t)a1);
    memset_s(a1, 0x48uLL, 0, 0x48uLL);
    free(a1);
  }
  return 0;
}

AAByteStream sub_100038FC4(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  AAByteStream v8 = AACustomByteStreamOpen();
  id v9 = (double *)malloc(0x48uLL);
  timeval v10 = v9;
  if (!v9 || (memset_s(v9, 0x48uLL, 0, 0x48uLL), !v8))
  {
    perror("malloc");
    goto LABEL_12;
  }
  if ((sub_100037470(v10, a1, a2, a3) & 0x80000000) != 0)
  {
    char v19 = "s3StreamBaseInit";
    __int16 v20 = 697;
LABEL_11:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamURLSession.m", (uint64_t)"s3DownloadStreamOpen_urlsession", v20, 121, 0, v19, v11, v12, v22.tv_sec);
LABEL_12:
    free(v8);
    sub_100038E2C(v10);
    return 0;
  }
  v22.tv_sec = 0;
  *(void *)&v22.tv_usec = 0;
  gettimeofday(&v22, 0);
  v10[6] = (double)v22.tv_sec + (double)v22.tv_usec * 0.000001;
  v10[7] = 32.0;
  if (a4) {
    int v13 = a4;
  }
  else {
    int v13 = 16;
  }
  *((_DWORD *)v10 + 16) = v13;
  uint64_t v14 = [AAS3DownloadSession alloc];
  uint64_t v15 = +[NSString stringWithUTF8String:a1];
  unint64_t v16 = +[NSURL URLWithString:v15];
  LODWORD(v17) = *((_DWORD *)v10 + 15);
  uint64_t v18 = [(AAS3DownloadSession *)v14 initWithURL:v16 streamBase:v10 maxAttempts:*((unsigned int *)v10 + 14) pauseInterval:*((unsigned int *)v10 + 16) maxRequestsInFlight:v17];

  if (!v18)
  {
    char v19 = "creating session";
    __int16 v20 = 710;
    goto LABEL_11;
  }
  *((void *)v10 + 3) = v18;
  *(void *)AAByteStream v8 = v10;
  *((void *)v8 + 1) = sub_100038E2C;
  *((void *)v8 + 4) = sub_1000391D4;
  *((void *)v8 + 2) = sub_10003925C;
  *((void *)v8 + 10) = sub_100039268;
  return v8;
}

id sub_1000391D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 >> 62 == 3) {
    fprintf(__stderrp, "NSURLSession read to buffer nbyte=%zx offset=%llx\n", a3, a4);
  }
  AAByteStream v8 = (void *)a1[3];
  return _[v8 readToBuffer:a2 size:a3 atOffset:a4];
}

id sub_10003925C(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000391D4(a1, a2, a3, atomic_fetch_add(a1 + 4, a3));
}

id sub_100039268(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 >> 62 == 3) {
    fprintf(__stderrp, "NSURLSession read to stream nbyte=%zx offset=%llx\n", a3, a4);
  }
  AAByteStream v8 = (void *)a1[3];
  return _[v8 readToAsyncByteStream:a2 size:a3 atOffset:a4];
}

uint64_t sub_1000392F0(char **a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x58uLL);
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    int v7 = *__error();
    timeval v10 = "malloc";
    __int16 v11 = 308;
LABEL_12:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextCreate", v11, 125, v7, v10, v8, v9, v16);
    goto LABEL_13;
  }
  memset_s(v4, 0x58uLL, 0, 0x58uLL);
  *(void *)(v5 + 80) = a2;
  if (a1)
  {
    if ((sub_10003B3C0(v5, 0, *a1, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 1u, a1[1], "KNOX_KEYTAB_FILE") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 2u, a1[2], "KNOX_DAW_TOKEN") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 3u, a1[3], "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 4u, a1[4], "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 5u, a1[5], "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0
      || (sub_10003B3C0(v5, 8u, a1[6], "KNOX_USER_AGENT") & 0x80000000) != 0)
    {
      goto LABEL_13;
    }
    unint64_t v6 = a1[7];
  }
  else
  {
    if ((sub_10003B3C0(v5, 0, 0, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_10003B3C0(v5, 1u, 0, "KNOX_KEYTAB_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_10003B3C0(v5, 2u, 0, "KNOX_DAW_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_10003B3C0(v5, 3u, 0, "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_10003B3C0(v5, 4u, 0, "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_10003B3C0(v5, 5u, 0, "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    int v13 = sub_10003B3C0(v5, 8u, 0, "KNOX_USER_AGENT");
    unint64_t v6 = 0;
    if (v13 < 0) {
      goto LABEL_13;
    }
  }
  if ((sub_10003B3C0(v5, 9u, v6, "KNOX_PROXY") & 0x80000000) != 0)
  {
LABEL_13:
    sub_10003A2C0((char *)v5);
    return 0;
  }
  if (!*(void *)(v5 + 16))
  {
    uint64_t v15 = *(char **)(v5 + 24);
    if (v15)
    {
      if ((sub_10003B4A4(v5, 2u, v15) & 0x80000000) != 0)
      {
        timeval v10 = "loading daw token";
        __int16 v11 = 324;
        goto LABEL_31;
      }
    }
  }
  if (!*(void *)(v5 + 32))
  {
    uint64_t v14 = *(char **)(v5 + 40);
    if (v14)
    {
      if ((sub_10003B4A4(v5, 4u, v14) & 0x80000000) != 0)
      {
        timeval v10 = "loading westgate token";
        __int16 v11 = 327;
LABEL_31:
        int v7 = 0;
        goto LABEL_12;
      }
    }
  }
  return v5;
}

uint64_t sub_1000395B8(uint64_t a1, char *__s)
{
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    goto LABEL_4;
  }
  size_t v11 = strlen(__s);
  size_t v12 = v11 + 200;
  if (v11 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_72:
    size_t v64 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", 345, 125, *v64, "malloc", v65, v66, v115);
    size_t v27 = 0;
    int v38 = 0;
    size_t v30 = 0;
LABEL_101:
    sub_10003C1F8(v38);
    AAByteStreamClose(v30);
    free(v27);
    BOOL v24 = "getting service name and realm";
    __int16 v25 = 649;
    goto LABEL_102;
  }
  uint64_t v26 = malloc(v11 + 200);
  if (!v26) {
    goto LABEL_72;
  }
  size_t v27 = v26;
  size_t v30 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v30)
  {
    int v87 = "AATempStreamOpen";
    __int16 v88 = 348;
LABEL_94:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v88, 125, 0, v87, v28, v29, v115);
    int v38 = 0;
    goto LABEL_101;
  }
  snprintf((char *)v27, v12, "https://%s/westgate/appinfo", __s);
  if ((sub_10003A314(a1, 1u, (char *)v27, 0, (uint64_t)v30) & 0x80000000) != 0)
  {
    char v115 = (char)v27;
    int v87 = "Knox request failed: %s";
    __int16 v88 = 351;
    goto LABEL_94;
  }
  AAByteStreamSeek(v30, 0, 0);
  CURLcode v31 = (void **)sub_10003C10C((uint64_t)v30);
  int v38 = v31;
  if (!v31)
  {
    size_t v99 = "AAJSONInputStreamOpen";
    __int16 v100 = 356;
    goto LABEL_100;
  }
  uint64_t v120 = 0;
  *(_OWORD *)__sa = 0u;
  long long v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_10003C254((uint64_t)v31, (int *)__s1, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0)
  {
LABEL_95:
    size_t v99 = "parsing JSON";
    __int16 v100 = 363;
    goto LABEL_100;
  }
  int v43 = 0;
  int v44 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      if (v44 == 1 && __s1[1] && !strcmp(__s1[1], "idms")) {
        int v43 = 1;
      }
      ++v44;
      goto LABEL_41;
    }
    if (LODWORD(__s1[0]) != 2)
    {
      if (LODWORD(__s1[0]) == 3)
      {
        if (v43)
        {
          CURLcode v45 = __s1[1];
          if (__s1[1])
          {
            if (strcmp(__s1[1], "realm"))
            {
LABEL_33:
              if (!strcmp(v45, "serviceName") && (sub_10003B3C0(a1, 7u, __sa[0], 0) & 0x80000000) != 0)
              {
                size_t v99 = "serviceName";
                __int16 v100 = 378;
                goto LABEL_100;
              }
              goto LABEL_41;
            }
            if ((sub_10003B3C0(a1, 6u, __sa[0], 0) & 0x80000000) == 0)
            {
              CURLcode v45 = __s1[1];
              goto LABEL_33;
            }
            size_t v99 = "realm";
            __int16 v100 = 377;
LABEL_100:
            sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetServiceName", v100, 125, 0, v99, v36, v37, v116);
            goto LABEL_101;
          }
        }
      }
LABEL_41:
      if (!v44) {
        break;
      }
      goto LABEL_42;
    }
    int v43 = 0;
    if (!--v44) {
      break;
    }
LABEL_42:
    uint64_t v120 = 0;
    *(_OWORD *)__sa = 0u;
    long long v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_10003C254((uint64_t)v38, (int *)__s1, v39, v40, v41, v42, v36, v37) & 0x80000000) != 0) {
      goto LABEL_95;
    }
  }
  if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    size_t v99 = "could not parse service name and realm";
    __int16 v100 = 389;
    goto LABEL_100;
  }
  sub_10003C1F8(v38);
  AAByteStreamClose(v30);
  free(v27);
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
  size_t v48 = *(const char **)(a1 + 48);
  if (!v48 || (uint64_t v49 = *(const char **)(a1 + 56)) == 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 411, 125, 0, "missing service name or realm", v46, v47, v116);
    uint64_t v52 = 0;
LABEL_111:
    int v93 = 0;
    __darwin_ct_rune_t v54 = 0;
    goto LABEL_156;
  }
  uint64_t v50 = *(void *)(a1 + 80) >> 62;
  if (v50)
  {
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  - realm: %s\n", v48);
    fprintf(__stderrp, "  - service name: %s\n", v49);
  }
  uint64_t v51 = (char *)malloc(0x4000uLL);
  uint64_t v52 = v51;
  if (!v51)
  {
    __s1[0] = 0;
    __s1[1] = 0;
    __sa[0] = 0;
    unint64_t v90 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", 420, 125, *v90, "malloc", v91, v92, v116);
    goto LABEL_111;
  }
  __s1[1] = (char *)0x4000;
  __sa[0] = v51;
  int v53 = (char *)malloc(0x4000uLL);
  __darwin_ct_rune_t v54 = v53;
  if (!v53)
  {
    int v94 = *__error();
    size_t v97 = "malloc";
    __int16 v98 = 422;
LABEL_115:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v98, 125, v94, v97, v95, v96, v116);
    int v93 = 0;
    goto LABEL_156;
  }
  snprintf(v53, 0x4000uLL, "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s", v48, v49);
  if (*(void *)a1)
  {
    if (v50) {
      fprintf(__stderrp, "  - account: %s\n", *(const char **)a1);
    }
    __strlcat_chk();
    __strlcat_chk();
  }
  if (*(void *)(a1 + 8))
  {
    if (v50) {
      fprintf(__stderrp, "  - keytab file: %s\n", *(const char **)(a1 + 8));
    }
    __strlcat_chk();
    __strlcat_chk();
  }
  size_t v55 = popen(v54, "r");
  if (!v55)
  {
    int v94 = *__error();
    char v116 = (char)v54;
    size_t v97 = "%s";
    __int16 v98 = 444;
    goto LABEL_115;
  }
  size_t v56 = v55;
  long long v57 = 0;
  while (1)
  {
    size_t v58 = fread(&v57[(void)v52], 1uLL, 0x4000 - (void)v57, v56);
    if (v58)
    {
      unint64_t v61 = (unint64_t)&v57[v58];
      if (__CFADD__(v57, v58) || v61 > 0x4000)
      {
        __s1[0] = v57;
        uint64_t v62 = "invalid read";
        __int16 v63 = 454;
        goto LABEL_153;
      }
      goto LABEL_70;
    }
    if (feof(v56)) {
      break;
    }
    if (ferror(v56))
    {
      __s1[0] = v57;
      int v109 = *__error();
      uint64_t v62 = "fread";
      __int16 v63 = 452;
      goto LABEL_154;
    }
    unint64_t v61 = (unint64_t)v57;
LABEL_70:
    long long v57 = (char *)v61;
    if (v61 == 0x4000)
    {
      __s1[0] = (char *)0x4000;
      uint64_t v62 = "token is too long";
      __int16 v63 = 447;
      goto LABEL_153;
    }
  }
  __s1[0] = v57;
  if (v57)
  {
    uint64_t v101 = (char *)v52 - 1;
    do
    {
      uint64_t v102 = v57[(void)v101];
      if (v57[(void)v101] < 0) {
        __uint32_t v103 = __maskrune(v102, 0x4000uLL);
      }
      else {
        __uint32_t v103 = _DefaultRuneLocale.__runetype[v102] & 0x4000;
      }
      if (!v103) {
        break;
      }
      --v57;
    }
    while (v57);
    __s1[0] = v57;
  }
  unint64_t v104 = (unint64_t)(v57 + 1);
  uint64_t v105 = v57 == (char *)-1;
  uint64_t v106 = v105 << 63 >> 63;
  if (v106 != v105 || v106 < 0 || (v104 & 0x8000000000000000) != 0) {
    goto LABEL_152;
  }
  if (v104 <= 0x4000)
  {
    unint64_t v110 = __sa[0];
LABEL_140:
    __s1[0] = v57 + 1;
    v57[(void)v52] = 0;
    if ((unint64_t)(v57 + 1) >= 6
      && (*(_DWORD *)v110 == 1415004484 ? (BOOL v112 = *((unsigned __int16 *)v110 + 2) == 20043) : (BOOL v112 = 0), v112))
    {
      if ((sub_10003B3C0(a1, 2u, v110, 0) & 0x80000000) == 0)
      {
        int v93 = 1;
        goto LABEL_147;
      }
      uint64_t v113 = "daw token";
      __int16 v114 = 463;
    }
    else
    {
      uint64_t v113 = "invalid token format";
      __int16 v114 = 460;
    }
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v114, 125, 0, v113, v59, v60, v115);
    int v93 = 0;
LABEL_147:
    uint64_t v52 = v110;
    goto LABEL_155;
  }
  for (size_t i = 0x4000; i < v104; i += v108)
  {
    size_t v108 = i >> 1;
    if ((i & (i >> 1)) != 0) {
      size_t v108 = i & (i >> 1);
    }
  }
  if (i >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_151;
  }
  uint64_t v111 = (char *)realloc(v52, i);
  if (v111)
  {
    unint64_t v110 = v111;
    __s1[1] = (char *)i;
    __sa[0] = v111;
    uint64_t v52 = v111;
    goto LABEL_140;
  }
  free(v52);
LABEL_151:
  uint64_t v52 = 0;
  __s1[0] = 0;
  __s1[1] = 0;
  __sa[0] = 0;
LABEL_152:
  uint64_t v62 = "token is too long";
  __int16 v63 = 459;
LABEL_153:
  int v109 = 0;
LABEL_154:
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDAWToken", v63, 125, v109, v62, v59, v60, v115);
  int v93 = 0;
LABEL_155:
  pclose(v56);
LABEL_156:
  free(v54);
  free(v52);
  memset_s(__s1, 0x18uLL, 0, 0x18uLL);
  if (!v93)
  {
    BOOL v24 = "getting DAW token";
    __int16 v25 = 650;
    goto LABEL_102;
  }
  if (*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  if (!v5)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 486, 125, 0, "missing host or DAW token", v22, v23, v115);
    __int16 v20 = 0;
    uint64_t v8 = 0;
LABEL_17:
    char v21 = 0;
    double v17 = 0;
LABEL_18:
    sub_10003C1F8(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    BOOL v24 = "getting Westgate token";
    __int16 v25 = 655;
LABEL_102:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextResolveWestgateToken", v25, 125, 0, v24, v22, v23, v115);
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if (*(void *)(a1 + 80) >> 62) {
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, __stderrp);
  }
  uint64_t v8 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v8)
  {
    int v13 = "AATempStreamOpen";
    __int16 v14 = 491;
    int v15 = 0;
LABEL_16:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v14, 125, v15, v13, v6, v7, v115);
    __int16 v20 = 0;
    goto LABEL_17;
  }
  size_t v9 = strlen(__s);
  size_t v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001)
  {
    *__error() = 12;
    goto LABEL_15;
  }
  char v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    int v15 = *__error();
    int v13 = "malloc";
    __int16 v14 = 495;
    goto LABEL_16;
  }
  double v17 = v16;
  size_t v18 = strlen(v5);
  size_t v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_91:
    int v84 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 498, 125, *v84, "malloc", v85, v86, v115);
    __int16 v20 = 0;
    char v21 = 0;
    goto LABEL_18;
  }
  int v67 = (char *)malloc(v18 + 200);
  if (!v67) {
    goto LABEL_91;
  }
  char v21 = v67;
  snprintf(v67, v19, "Authorization: Bearer %s", v5);
  v121[0] = v21;
  v121[1] = 0;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((sub_10003A314(a1, 2u, (char *)v17, v121, (uint64_t)v8) & 0x80000000) != 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", 505, 125, 0, "Knox request failed: %s", v68, v69, (char)v17);
    __int16 v20 = 0;
    goto LABEL_18;
  }
  AAByteStreamSeek(v8, 0, 0);
  __int16 v70 = (void **)sub_10003C10C((uint64_t)v8);
  __int16 v20 = v70;
  if (!v70)
  {
    uint64_t v82 = "AAJSONInputStreamOpen";
    __int16 v83 = 510;
    goto LABEL_106;
  }
  uint64_t v120 = 0;
  *(_OWORD *)__sa = 0u;
  long long v119 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_10003C254((uint64_t)v70, (int *)__s1, v71, v72, v73, v74, v75, v76) & 0x80000000) != 0)
  {
LABEL_90:
    uint64_t v82 = "parsing JSON";
    __int16 v83 = 516;
LABEL_106:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetWestgateToken", v83, 125, 0, v82, v75, v76, v115);
    goto LABEL_18;
  }
  int v81 = 0;
  while (1)
  {
    if (LODWORD(__s1[0]) < 2)
    {
      ++v81;
      goto LABEL_88;
    }
    if (LODWORD(__s1[0]) == 2) {
      break;
    }
    if (LODWORD(__s1[0]) != 3 || v81 != 1 || !__s1[1]) {
      goto LABEL_88;
    }
    if (!strcasecmp(__s1[1], "password") && (sub_10003B3C0(a1, 4u, __sa[0], 0) & 0x80000000) != 0)
    {
      uint64_t v82 = "password";
      __int16 v83 = 529;
      goto LABEL_106;
    }
    int v81 = 1;
LABEL_89:
    uint64_t v120 = 0;
    *(_OWORD *)__sa = 0u;
    long long v119 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_10003C254((uint64_t)v20, (int *)__s1, v77, v78, v79, v80, v75, v76) & 0x80000000) != 0) {
      goto LABEL_90;
    }
  }
  --v81;
LABEL_88:
  if (v81) {
    goto LABEL_89;
  }
  size_t v89 = *(const char **)(a1 + 32);
  if (!v89 || strncmp(v89, "WGTKN", 5uLL))
  {
    uint64_t v82 = "invalid/missing token";
    __int16 v83 = 537;
    goto LABEL_106;
  }
  sub_10003C1F8(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!*(void *)(a1 + 32))
  {
    BOOL v24 = "invalid Westgate token";
    __int16 v25 = 658;
    goto LABEL_102;
  }
  return 0;
}

void sub_10003A2C0(char *a1)
{
  if (a1)
  {
    for (uint64_t i = 0; i != 80; i += 8)
      free(*(void **)&a1[i]);
    free(a1);
  }
}

uint64_t sub_10003A314(uint64_t a1, unsigned int a2, char *a3, const char **a4, uint64_t a5)
{
  v77[0] = 0;
  v77[1] = 0;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  size_t v10 = AAS3ContextCreate();
  uint64_t v78 = (uint64_t)v10;
  if (!v10)
  {
    long long v57 = "AAS3ContextCreate";
    __int16 v58 = 189;
LABEL_41:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v58, 125, 0, v57, v11, v12, v68);
    uint64_t v22 = 0;
LABEL_42:
    uint64_t v29 = 0;
    uint64_t v28 = 0;
LABEL_43:
    uint64_t v59 = 0xFFFFFFFFLL;
    goto LABEL_44;
  }
  uint64_t v13 = (uint64_t)v10;
  __int16 v14 = malloc(0x18uLL);
  int v15 = v14;
  if (!v14)
  {
    uint64_t v22 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
    goto LABEL_40;
  }
  memset_s(v14, 0x18uLL, 0, 0x18uLL);
  char v16 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
  uint64_t v22 = v16;
  if (!v16)
  {
LABEL_40:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamOpen", 165, 125, 0, "malloc", v20, v21, v68);
    free(v15);
    free(v22);
    long long v57 = "open page stream";
    __int16 v58 = 192;
    goto LABEL_41;
  }
  *int v15 = a5;
  *char v16 = (uint64_t (*)(int *))v15;
  v16[1] = sub_10003B6CC;
  v16[3] = (uint64_t (*)(int *))sub_10003B768;
  if ((AAS3ContextSetFieldString(v13, 5, *(char **)(a1 + 64), v17, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    __int16 v61 = 194;
LABEL_47:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v61, 125, 0, "setup context", v26, v27, v68);
    goto LABEL_42;
  }
  if ((AAS3ContextSetFieldString(v13, 0, *(char **)(a1 + 72), v23, v24, v25, v26, v27) & 0x80000000) != 0)
  {
    __int16 v61 = 195;
    goto LABEL_47;
  }
  uint64_t v28 = (char *)malloc(0x800uLL);
  if (!v28)
  {
    int v62 = *__error();
    __int16 v63 = 200;
LABEL_53:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", v63, 125, v62, "malloc", v55, v56, v68);
    uint64_t v29 = 0;
    goto LABEL_43;
  }
  uint64_t v29 = 0;
  size_t v30 = "link:";
  __int16 v70 = a3;
  uint64_t v71 = a4;
  while (2)
  {
    memset_s(v28, 0x800uLL, 0, 0x800uLL);
    long long v75 = 0uLL;
    uint64_t v76 = v22;
    uint64_t v72 = v28;
    uint64_t v73 = 2047;
    uint64_t v33 = a3;
    uint64_t v74 = 0;
    if (v29)
    {
      if (v22[1] == sub_10003B6CC)
      {
        uint64_t v34 = *v22;
        if (*((int *)*v22 + 2) < 1 || !*((_DWORD *)v34 + 4)) {
          goto LABEL_15;
        }
        if (!*((_DWORD *)v34 + 5) || AAByteStreamWrite(*(AAByteStream *)v34, ",", 1uLL) == 1)
        {
          *(void *)((char *)v34 + 12) = 1;
LABEL_15:
          *((_DWORD *)v34 + 5) = 0;
          uint64_t v33 = v29;
          goto LABEL_16;
        }
        size_t v64 = "writing ','";
        __int16 v65 = 146;
      }
      else
      {
        size_t v64 = "invalid stream";
        __int16 v65 = 132;
      }
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamEndPage", v65, 125, 0, v64, v31, v32, v68);
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 209, 125, 0, "page stream next page", v66, v67, v69);
      goto LABEL_43;
    }
LABEL_16:
    if ((sub_100036118(a2, v33, (uint64_t)v77, 0, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 212, 125, 0, "request: %s", v35, v36, (char)v33);
      goto LABEL_43;
    }
    free(v29);
    size_t v37 = strlen(v28);
    if (v37)
    {
      unint64_t v38 = v37;
      uint64_t v29 = 0;
      unint64_t v39 = 0;
      do
      {
        if (v38 <= v39 + 1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v38;
        }
        unint64_t v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            unint64_t v41 = v40;
            break;
          }
        }
        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          uint64_t v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            int v43 = v30;
            int v44 = strchr(v42, 60);
            CURLcode v45 = strrchr(v42, 62);
            if (!v44 || (size_t v48 = v45) == 0 || v45 <= v44)
            {
              sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 231, 125, 0, "invalid link header (1): %s", v46, v47, (char)v42);
              goto LABEL_43;
            }
            if (!strstr(v45, "rel=\"next\""))
            {
              sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxRequest", 233, 125, 0, "invalid link header (2): %s", v49, v50, (char)v42);
              goto LABEL_43;
            }
            char *v48 = 0;
            uint64_t v51 = v44 + 1;
            size_t v52 = strlen(v51);
            size_t v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001)
            {
              *__error() = 12;
LABEL_52:
              __int16 v63 = 236;
              int v62 = 0;
              goto LABEL_53;
            }
            __darwin_ct_rune_t v54 = (char *)malloc(v52 + 1);
            if (!v54) {
              goto LABEL_52;
            }
            uint64_t v29 = v54;
            memcpy(v54, v51, v53);
            size_t v30 = v43;
          }
        }
        unint64_t v39 = v41 + 1;
      }
      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29) {
        continue;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    break;
  }
  uint64_t v59 = 0;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

uint64_t sub_10003A878(uint64_t a1, const char *a2, const char *a3, const char *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(char **)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 80);
  *a5 = 0;
  *a6 = 0;
  if (!v8)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 568, 125, 0, "missing Westgate token", a7, a8, v64);
    uint64_t v21 = 0;
    uint64_t v18 = 0;
LABEL_14:
    uint64_t v27 = 0;
    goto LABEL_15;
  }
  if (v9 >> 62) {
    fwrite("  requesting decryption components from the Knox server\n", 0x38uLL, 1uLL, __stderrp);
  }
  uint64_t v18 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v18)
  {
    uint64_t v22 = "AATempStreamOpen";
    __int16 v23 = 573;
    int v24 = 0;
LABEL_13:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v23, 125, v24, v22, v16, v17, v64);
    uint64_t v21 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  size_t v19 = strlen(a2);
  size_t v20 = v19 + 200;
  if (v19 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    int v24 = *__error();
    uint64_t v22 = "malloc";
    __int16 v23 = 577;
    goto LABEL_13;
  }
  __str = (char *)malloc(v19 + 200);
  if (!__str) {
    goto LABEL_12;
  }
  size_t v25 = strlen(v8);
  size_t v26 = v25 + 200;
  if (v25 + 200 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_54:
    uint64_t v59 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 580, 125, *v59, "malloc", v60, v61, v64);
    uint64_t v21 = 0;
    uint64_t v8 = 0;
    uint64_t v28 = 0xFFFFFFFFLL;
    uint64_t v27 = __str;
    goto LABEL_16;
  }
  size_t v30 = (char *)malloc(v25 + 200);
  if (!v30) {
    goto LABEL_54;
  }
  __int16 v65 = v8;
  uint64_t v8 = v30;
  snprintf(v30, v26, "Authorization: Bearer %s", v65);
  v76[0] = v8;
  v76[1] = 0;
  uint64_t v67 = a4;
  uint64_t v27 = __str;
  snprintf(__str, v20, "https://%s/spaces/%s/files/%s/decryption-components", a2, a3, v67);
  if ((sub_10003A314(a1, 2u, __str, v76, (uint64_t)v18) & 0x80000000) != 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 587, 125, 0, "Knox request failed: %s", v31, v32, (char)__str);
    uint64_t v21 = 0;
    goto LABEL_15;
  }
  AAByteStreamSeek(v18, 0, 0);
  uint64_t v33 = (void **)sub_10003C10C((uint64_t)v18);
  uint64_t v21 = v33;
  if (!v33)
  {
    int v62 = "AAJSONInputStreamOpen";
    __int16 v63 = 592;
    goto LABEL_62;
  }
  uint64_t v75 = 0;
  *(_OWORD *)__s = 0u;
  long long v74 = 0u;
  *(_OWORD *)__s1 = 0u;
  if ((sub_10003C254((uint64_t)v33, (int *)__s1, v34, v35, v36, v37, v38, v39) & 0x80000000) != 0)
  {
LABEL_56:
    int v62 = "parsing JSON";
    __int16 v63 = 600;
    goto LABEL_62;
  }
  int v44 = 0;
  int v45 = 0;
  int v46 = 0;
  __int16 v70 = v8;
  while (LODWORD(__s1[0]) >= 2)
  {
    if (LODWORD(__s1[0]) == 2)
    {
      int v45 = 0;
      int v44 = 0;
      --v46;
      goto LABEL_47;
    }
    if (LODWORD(__s1[0]) != 3) {
      goto LABEL_47;
    }
    uint64_t v47 = __s1[1];
    if (v46 == 2 && v45 && __s1[1] && !strcmp(__s1[1], "key"))
    {
      int v68 = v44;
      size_t v48 = __s[0];
      if (!__s[0]) {
        goto LABEL_64;
      }
      size_t v49 = strlen(__s[0]);
      size_t v50 = v49 + 1;
      if (v49 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_64:
        *a6 = 0;
        sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 618, 125, 0, "key", v38, v39, v66);
        uint64_t v8 = v70;
        uint64_t v27 = __str;
        goto LABEL_15;
      }
      uint64_t v51 = malloc(v49 + 1);
      if (!v51) {
        goto LABEL_64;
      }
      size_t v52 = v51;
      memcpy(v51, v48, v50);
      *a6 = v52;
      uint64_t v27 = __str;
      int v44 = v68;
    }
    if (v46 != 2 || !v44 || !v47)
    {
      uint64_t v8 = v70;
      goto LABEL_47;
    }
    if (!strcmp(v47, "uri"))
    {
      int v69 = v44;
      __darwin_ct_rune_t v54 = __s[0];
      uint64_t v8 = v70;
      if (!__s[0]) {
        goto LABEL_66;
      }
      size_t v55 = strlen(__s[0]);
      size_t v56 = v55 + 1;
      if (v55 + 1 >= 0x2000000001)
      {
        *__error() = 12;
LABEL_66:
        *a5 = 0;
        sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", 623, 125, 0, "uri", v38, v39, v66);
        uint64_t v27 = __str;
        goto LABEL_15;
      }
      long long v57 = malloc(v55 + 1);
      if (!v57) {
        goto LABEL_66;
      }
      __int16 v58 = v57;
      memcpy(v57, v54, v56);
      *a5 = v58;
      int v46 = 2;
      uint64_t v27 = __str;
      int v44 = v69;
    }
    else
    {
      int v46 = 2;
      uint64_t v8 = v70;
    }
LABEL_48:
    uint64_t v75 = 0;
    *(_OWORD *)__s = 0u;
    long long v74 = 0u;
    *(_OWORD *)__s1 = 0u;
    if ((sub_10003C254((uint64_t)v21, (int *)__s1, v40, v41, v42, v43, v38, v39) & 0x80000000) != 0) {
      goto LABEL_56;
    }
  }
  if (v46 == 1)
  {
    size_t v53 = __s1[1];
    if (__s1[1])
    {
      if (!strcmp(__s1[1], "encryption")) {
        int v45 = 1;
      }
      if (!strcmp(v53, "location")) {
        int v44 = 1;
      }
    }
  }
  ++v46;
LABEL_47:
  if (v46) {
    goto LABEL_48;
  }
  if (*a5 && *a6)
  {
    uint64_t v28 = 0;
    goto LABEL_16;
  }
  int v62 = "invalid/missing decryption components";
  __int16 v63 = 631;
LABEL_62:
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextGetDecryptionComponents", v63, 125, 0, v62, v38, v39, v66);
LABEL_15:
  uint64_t v28 = 0xFFFFFFFFLL;
LABEL_16:
  sub_10003C1F8(v21);
  AAByteStreamClose(v18);
  free(v27);
  free(v8);
  return v28;
}

uint64_t AAS3KnoxResolveURL(uint64_t a1, char **a2, void *a3, size_t a4, unsigned char *a5, size_t *a6, unint64_t a7)
{
  __s = 0;
  if (strncmp((const char *)a1, "knox://", 7uLL))
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 854, 125, 0, "invalid Knox scheme: %s", v14, v15, a1);
LABEL_13:
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 7;
  uint64_t v17 = strchr((char *)(a1 + 7), 47);
  size_t v20 = v17;
  if (!v17)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 859, 125, 0, "invalid Knox host: %s", v18, v19, a1);
    __int16 v23 = 0;
    int v24 = 0;
LABEL_14:
    uint64_t v32 = 0;
    size_t v26 = 0;
    goto LABEL_15;
  }
  uint64_t v21 = &v17[-v16];
  size_t v22 = (size_t)&v17[-v16 + 1];
  if (v22 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_12:
    int v33 = *__error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 863, 125, v33, "malloc", v34, v35, v71);
    goto LABEL_13;
  }
  uint64_t v72 = a6;
  size_t v25 = (char *)malloc(v22);
  if (!v25) {
    goto LABEL_12;
  }
  size_t v26 = v25;
  memcpy(v25, (const void *)(a1 + 7), (size_t)&v20[-v16]);
  v21[(void)v26] = 0;
  if (strncmp(v20 + 1, "download/", 9uLL))
  {
    char v71 = a1;
    uint64_t v29 = "invalid Knox action: %s";
    __int16 v30 = 869;
LABEL_10:
    int v31 = 0;
LABEL_11:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v30, 125, v31, v29, v27, v28, v71);
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    uint64_t v32 = 0;
    goto LABEL_15;
  }
  uint64_t v38 = v20 + 10;
  uint64_t v39 = strchr(v38, 47);
  if (!v39)
  {
    char v71 = a1;
    uint64_t v29 = "invalid Knox space: %s";
    __int16 v30 = 874;
    goto LABEL_10;
  }
  uint64_t v40 = v39;
  size_t v41 = v39 - v38;
  size_t v42 = v39 - v38 + 1;
  if (v42 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_37:
    int v31 = *__error();
    uint64_t v29 = "malloc";
    __int16 v30 = 878;
    goto LABEL_11;
  }
  uint64_t v43 = (char *)malloc(v42);
  if (!v43) {
    goto LABEL_37;
  }
  uint64_t v32 = v43;
  memcpy(v43, v38, v41);
  size_t v44 = 0;
  v32[v41] = 0;
  int v45 = v40 + 1;
  int v46 = v40 + 1;
  do
  {
    size_t v47 = v44;
    int v48 = (char)v45[v44];
    if (!v45[v44]) {
      break;
    }
    if (v48 < 0)
    {
      __uint32_t v49 = __maskrune((char)v45[v44], 0x4000uLL);
      int v45 = v46;
    }
    else
    {
      __uint32_t v49 = _DefaultRuneLocale.__runetype[v48] & 0x4000;
    }
    if ((v48 - 127) < 0xA1u) {
      break;
    }
    if (v48 == 47 || (v48 - 37) < 2u) {
      break;
    }
    if (v48 == 35) {
      break;
    }
    size_t v44 = v47 + 1;
  }
  while (!v49);
  if (v47 + 1 >= 0x2000000001)
  {
    *__error() = 12;
LABEL_48:
    char v66 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 895, 125, *v66, "malloc", v67, v68, v71);
    __int16 v23 = 0;
    int v24 = 0;
    size_t v20 = 0;
    goto LABEL_15;
  }
  uint64_t v51 = (char *)malloc(v47 + 1);
  if (!v51) {
    goto LABEL_48;
  }
  size_t v20 = v51;
  memcpy(v51, v46, v47);
  v20[v47] = 0;
  if (a7 >> 62)
  {
    fwrite("Knox resolve URL\n", 0x11uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  host: %s\n", v26);
    fprintf(__stderrp, "  space: %s\n", v32);
    fprintf(__stderrp, "  file digest: %s\n", v20);
  }
  uint64_t v52 = sub_1000392F0(a2, a7);
  int v24 = (char *)v52;
  if (!v52)
  {
    int v69 = "contextInit failed";
    __int16 v70 = 909;
LABEL_51:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v70, 125, 0, v69, v53, v54, v71);
    __int16 v23 = 0;
    goto LABEL_15;
  }
  if ((sub_1000395B8(v52, v26) & 0x80000000) != 0)
  {
    int v69 = "getting Westgate token";
    __int16 v70 = 912;
    goto LABEL_51;
  }
  if ((sub_10003A878((uint64_t)v24, v26, v32, v20, a3, &__s, v53, v54) & 0x80000000) != 0)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", 915, 125, 0, "getting decryption credentials", v55, v56, v71);
    uint64_t v36 = 0xFFFFFFFFLL;
    __int16 v23 = __s;
    goto LABEL_16;
  }
  __int16 v23 = __s;
  size_t v57 = strlen(__s);
  if (!v57 || (v57 & 1) != 0)
  {
    char v71 = v57;
    char v64 = "invalid key length: %zu";
    __int16 v65 = 919;
  }
  else
  {
    size_t v63 = v57 >> 1;
    if (v57 >> 1 <= a4)
    {
      if ((sub_10003BEAC(v57 >> 1, a5, (uint64_t)__s, v58, v59, v60, v61, v62) & 0x80000000) == 0)
      {
        uint64_t v36 = 0;
        size_t *v72 = v63;
        goto LABEL_16;
      }
      char v64 = "invalid hex key";
      __int16 v65 = 922;
    }
    else
    {
      char v64 = "key_capacity is too low";
      __int16 v65 = 921;
    }
  }
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"AAS3KnoxResolveURL", v65, 125, 0, v64, v61, v62, v71);
LABEL_15:
  uint64_t v36 = 0xFFFFFFFFLL;
LABEL_16:
  free(v26);
  free(v32);
  free(v20);
  free(v23);
  sub_10003A2C0(v24);
  return v36;
}

uint64_t sub_10003B3C0(uint64_t a1, unsigned int a2, char *__s, char *a4)
{
  uint64_t v4 = __s;
  if (!__s)
  {
    if (a4) {
      uint64_t v4 = getenv(a4);
    }
  }
  if (!v4)
  {
    uint64_t result = 0;
    *(void *)(a1 + 8 * a2) = 0;
    return result;
  }
  size_t v7 = strlen(v4);
  size_t v8 = v7 + 1;
  if (v7 + 1 < 0x2000000001)
  {
    size_t v10 = malloc(v7 + 1);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, v4, v8);
      uint64_t result = 0;
      *(void *)(a1 + 8 * a2) = v11;
      return result;
    }
  }
  else
  {
    *__error() = 12;
  }
  *(void *)(a1 + 8 * a2) = 0;
  uint64_t v12 = __error();
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextSetString", 259, 125, *v12, "malloc", v13, v14, v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10003B4A4(uint64_t a1, unsigned int a2, char *a3)
{
  memset(&v32, 0, sizeof(v32));
  int v6 = open(a3, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v32) < 0
      || ((st_size = v32.st_size, (v32.st_mode & 0xF000) == 0x8000) ? (BOOL v11 = v32.st_size == 0) : (BOOL v11 = 1), v11))
    {
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 274, 125, 0, "invalid file: %s", v8, v9, (char)a3);
    }
    else
    {
      if ((unint64_t)(v32.st_size + 1) < 0x2000000001)
      {
        uint64_t v16 = malloc(v32.st_size + 1);
        if (v16)
        {
          uint64_t v17 = v16;
          ssize_t v18 = read(v7, v16, st_size);
          if (v18 < 0)
          {
            int v28 = *__error();
            __int16 v29 = 280;
            __int16 v30 = a3;
          }
          else
          {
            if (v18 == st_size)
            {
              do
              {
                off_t v21 = st_size;
                if (!st_size) {
                  break;
                }
                __darwin_ct_rune_t v22 = (char)v17[st_size - 1];
                __uint32_t v23 = v22 < 0 ? __maskrune(v22, 0x4000uLL) : _DefaultRuneLocale.__runetype[v22] & 0x4000;
                --st_size;
              }
              while (v23);
              uint64_t v15 = 0;
              v17[v21] = 0;
              *(void *)(a1 + 8 * a2) = v17;
              goto LABEL_24;
            }
            __int16 v30 = "truncated read";
            __int16 v29 = 281;
            int v28 = 0;
          }
          sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", v29, 125, v28, v30, v19, v20, v31);
LABEL_23:
          free(v17);
          uint64_t v15 = 0xFFFFFFFFLL;
LABEL_24:
          close(v7);
          return v15;
        }
      }
      else
      {
        *__error() = 12;
      }
      int v24 = *__error();
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 277, 125, v24, "malloc", v25, v26, v31);
    }
    uint64_t v17 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = __error();
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"contextLoadString", 273, 125, *v12, a3, v13, v14, v31);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10003B6CC(int *a1)
{
  if (!a1) {
    return 0;
  }
  if (a1[2] >= 1 && a1[4] && AAByteStreamWrite(*(AAByteStream *)a1, "]\n", 2uLL) != 2)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamClose", 67, 125, 0, "writing final ']'", v2, v3, v6);
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = 0;
  }
  free(a1);
  return v4;
}

uint64_t sub_10003B768(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    if (v11 < 1)
    {
      uint64_t v12 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    if (!a3 || *a2 != 91)
    {
      uint64_t v12 = 0;
      *(_DWORD *)(a1 + 8) = -1;
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 8) = 1;
  }
  uint64_t v12 = 0;
  if (a3 && *(_DWORD *)(a1 + 12))
  {
    if (*a2 != 91)
    {
      uint64_t v14 = "expected '['";
      __int16 v15 = 93;
LABEL_41:
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", v15, 125, 0, v14, a7, a8, v22);
      return -1;
    }
    *(_DWORD *)(a1 + 12) = 0;
    uint64_t v9 = a2 + 1;
    uint64_t v8 = a3 - 1;
    uint64_t v12 = 1;
  }
  if (!v8) {
    goto LABEL_35;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    uint64_t v13 = 0;
    goto LABEL_18;
  }
  if (AAByteStreamWrite(*(AAByteStream *)a1, "]", 1uLL) != 1)
  {
    uint64_t v14 = "writing ']'";
    __int16 v15 = 105;
    goto LABEL_41;
  }
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v13 = 1;
LABEL_18:
  uint64_t v16 = v12 + 1;
  uint64_t v17 = v8 - 1;
  while (1)
  {
    __darwin_ct_rune_t v18 = (char)v9[v17];
    if (v18 < 0) {
      break;
    }
    if ((_DefaultRuneLocale.__runetype[v18] & 0x4000) == 0) {
      goto LABEL_25;
    }
LABEL_23:
    ++v16;
    if (--v17 == -1) {
      goto LABEL_27;
    }
  }
  if (__maskrune(v18, 0x4000uLL)) {
    goto LABEL_23;
  }
LABEL_25:
  if (v9[v17] == 93)
  {
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v12 = v16;
    uint64_t v8 = v17;
  }
LABEL_27:
  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 20) = 1;
    AAByteStream v19 = *(AAByteStream *)a1;
    if (*((void *)v19 + 3))
    {
      if (v8)
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v20 = (*((uint64_t (**)(void, unsigned char *, uint64_t))v19 + 3))(*(void *)v19, v9, v8);
          if (v20 < 1) {
            break;
          }
          v9 += v20;
          v13 += v20;
          v8 -= v20;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_37;
          }
        }
        uint64_t v13 = v20;
        if (v20 < 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }
LABEL_35:
      uint64_t v13 = 0;
      goto LABEL_39;
    }
    uint64_t v13 = -1;
LABEL_37:
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c", (uint64_t)"knoxPageStreamWrite", 124, 125, 0, "write", a7, a8, v22);
  }
  else
  {
LABEL_39:
    v13 += v12;
  }
  return v13;
}

size_t sub_10003B9A0(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__str, 0x400uLL);
  uint64_t v13 = (_WORD *)(((a3 & 0x3FFF) << 10) | (a4 << 24) | a5 & 0x3FF | 0x80000000);
  if (a5 >= 1)
  {
    uint64_t v14 = strerror(a5);
    snprintf(__str, 0x400uLL, "%s: ", v14);
  }
  size_t v15 = strlen(__str);
  vsnprintf(&__str[v15], 1024 - v15, a6, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10003BBCC((uint64_t)__str, (int)v13);
  }
  return ParallelCompressionUpdateError(v13, (size_t)__str);
}

uint64_t sub_10003BAB4(uint64_t a1, uint64_t a2, __int16 a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  bzero(__s, 0x400uLL);
  uint64_t v12 = ((a3 & 0x3FFF) << 10) | (a4 << 24) | 0x80000000;
  size_t v13 = strlen(__s);
  vsnprintf(&__s[v13], 1024 - v13, a5, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    int v16 = v12;
    __int16 v17 = 2080;
    __darwin_ct_rune_t v18 = __s;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "[0x%08x](warning) %s", buf, 0x12u);
  }
  return ParallelCompressionUpdateWarning(v12, __s);
}

void sub_10003BBCC(uint64_t a1, int a2)
{
  v2[0] = 67109378;
  v2[1] = a2;
  __int16 v3 = 2080;
  uint64_t v4 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "[0x%08x] %s", (uint8_t *)v2, 0x12u);
}

size_t sub_10003BC58(size_t result)
{
  if (result)
  {
    int v1 = (const void *)result;
    uint64_t result = strlen((const char *)result);
    if (result - 8193 >= 0xFFFFFFFFFFFFE000)
    {
      size_t v2 = result;
      pthread_key_t v3 = sub_10003BDDC();
      uint64_t result = (size_t)pthread_getspecific(v3);
      if (result)
      {
        size_t v4 = result;
        __int16 v5 = v2 + 3;
        uint64_t v6 = *(unsigned __int16 *)(result + 72);
        if (v6 + (unsigned __int16)(v2 + 3) <= *(unsigned __int16 *)(result + 74))
        {
          size_t v7 = result + v6;
          *(_WORD *)(v7 + 76) = v5;
          size_t v8 = v7 + 78;
          uint64_t result = (size_t)memcpy((void *)(v7 + 78), v1, v2);
          *(unsigned char *)(v8 + v2) = 0;
          *(_WORD *)(v4 + 72) += v5;
        }
      }
    }
  }
  return result;
}

_WORD *sub_10003BCFC(_WORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_10003BDDC();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*(_DWORD *)result & 0x80000000) == 0)
      {
        *(_DWORD *)uint64_t result = v1;
        result[3] = 0;
      }
    }
  }
  return result;
}

_DWORD *sub_10003BD44(_DWORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_10003BDDC();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*result & 0x80000000) == 0)
      {
        uint64_t v3 = *((unsigned __int16 *)result + 3);
        if (v3 <= 0xF)
        {
          result[v3 + 2] = v1;
          *((_WORD *)result + 3) = v3 + 1;
        }
      }
    }
  }
  return result;
}

size_t ParallelCompressionUpdateError(_WORD *a1, size_t a2)
{
  sub_10003BCFC(a1);
  return sub_10003BC58(a2);
}

uint64_t sub_10003BDDC()
{
  if (pthread_once(&stru_1001D3D70, (void (*)(void))sub_10003BE44))
  {
    int v0 = __error();
    sub_10003B9A0("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "getErrorContextKey", 53, 5, *v0, "pthread_once");
  }
  return qword_1001D4778;
}

uint64_t sub_10003BE44()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&qword_1001D4778, 0);
  if (result)
  {
    uint64_t v1 = *__error();
    return sub_10003B9A0("/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c", "createErrorContextKey", 42, 5, v1, "pthread_key_create");
  }
  return result;
}

uint64_t sub_10003BEAC(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = (2 * a1);
  if (!v8)
  {
LABEL_13:
    int v11 = 0;
    return (v11 << 31 >> 31);
  }
  uint64_t v9 = 0;
  char v10 = 0;
  int v11 = 1;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a3 + v9);
    if (!*(unsigned char *)(a3 + v9))
    {
      uint64_t v14 = "truncated hex string";
      __int16 v15 = 13;
      goto LABEL_16;
    }
    if ((v12 - 48) >= 0xA) {
      break;
    }
    char v13 = -48;
LABEL_10:
    char v10 = v13 + 16 * v10 + v12;
    if (v9)
    {
      *a2++ = v10;
      char v10 = 0;
    }
    int v11 = ++v9 < v8;
    if (v8 == v9) {
      goto LABEL_13;
    }
  }
  if ((v12 - 97) < 6)
  {
    char v13 = -87;
    goto LABEL_10;
  }
  if ((v12 - 65) < 6)
  {
    char v13 = -55;
    goto LABEL_10;
  }
  uint64_t v14 = "invalid hex string";
  __int16 v15 = 18;
LABEL_16:
  sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AASerialization.c", (uint64_t)"aaParseHexString", v15, 106, 0, v14, a7, a8, v17);
  return (v11 << 31 >> 31);
}

uint64_t sub_10003BF9C(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = (void *)(a1 + 72);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256;
    }
    *(void *)(a1 + 72) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 88), v8);
    *(void *)(a1 + 88) = v7;
    if (!v7)
    {
      char v10 = __error();
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushLabel", 358, 109, *v10, "malloc", v11, v12, v14);
      void *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    unint64_t v5 = *(void *)(a1 + 80);
  }
  else
  {
    size_t v7 = *(unsigned char **)(a1 + 88);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 80) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

uint64_t sub_10003C054(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 96);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256;
    }
    *(void *)(a1 + 96) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 112), v8);
    *(void *)(a1 + 112) = v7;
    if (!v7)
    {
      char v10 = __error();
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"jsonPushValue", 372, 109, *v10, "malloc", v11, v12, v14);
      void *v6 = 0;
      v6[1] = 0;
      return 0xFFFFFFFFLL;
    }
    unint64_t v5 = *(void *)(a1 + 104);
  }
  else
  {
    size_t v7 = *(unsigned char **)(a1 + 112);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 104) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

void *sub_10003C10C(uint64_t a1)
{
  pthread_key_t v2 = malloc(0x78uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    memset_s(v2, 0x78uLL, 0, 0x78uLL);
    v3[1] = a1;
    v3[5] = 0x10000;
    unint64_t v4 = malloc(0x10000uLL);
    v3[8] = v4;
    if (v4)
    {
      *(void *)((char *)v3 + 20) = 32;
      v3[4] = calloc(0x20uLL, 4uLL);
    }
    else
    {
      size_t v8 = __error();
      sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 387, 109, *v8, "malloc", v9, v10, v12);
      sub_10003C1F8((void **)v3);
      return 0;
    }
  }
  else
  {
    unint64_t v5 = __error();
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamOpen", 382, 109, *v5, "malloc", v6, v7, v12);
  }
  return v3;
}

void sub_10003C1F8(void **a1)
{
  if (a1)
  {
    free(a1[4]);
    free(a1[11]);
    free(a1[14]);
    free(a1[8]);
    free(a1);
  }
}

uint64_t sub_10003C254(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (atomic_load((unsigned int *)a1)) {
    return 0xFFFFFFFFLL;
  }
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 == 9 || v10 == -1)
  {
    sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 418, 109, 0, "unexpected read call", a7, a8, v45);
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = 0;
  while (2)
  {
    unint64_t v14 = *(void *)(a1 + 56);
    __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 >= *(void *)(a1 + 48))
    {
      ssize_t v16 = AAByteStreamRead(*(AAByteStream *)(a1 + 8), v15, *(void *)(a1 + 40));
      if (v16 < 0)
      {
        sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", 430, 109, 0, "read error: %zd", a7, a8, v16);
LABEL_104:
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 16) = -1;
        return result;
      }
      if (!v16)
      {
        __int16 v29 = "EOF reached";
        __int16 v30 = 431;
        goto LABEL_103;
      }
      unint64_t v14 = 0;
      *(void *)(a1 + 48) = v16;
      __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    }
    *(void *)(a1 + 56) = v14 + 1;
    int v17 = v15[v14];
    char v18 = v15[v14];
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        *(void *)(a1 + 104) = 0;
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if (v17 == 34) {
          goto LABEL_68;
        }
        if (v17 == 43 || v17 == 45 || ((char)v17 - 48) <= 9)
        {
          if ((sub_10003C054(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 3;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 451;
          goto LABEL_103;
        }
        if (v17 == 123)
        {
          uint64_t v31 = *(unsigned int *)(a1 + 24);
          if (v31 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 465;
            goto LABEL_103;
          }
          int v26 = 0;
          uint64_t v43 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v31 + 1;
          *(_DWORD *)(v43 + 4 * v31) = 0;
          int v36 = 6;
          goto LABEL_125;
        }
        if (v17 == 91)
        {
          uint64_t v32 = *(unsigned int *)(a1 + 24);
          if (v32 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 457;
            goto LABEL_103;
          }
          int v36 = 0;
          uint64_t v44 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v32 + 1;
          int v26 = 1;
          *(_DWORD *)(v44 + 4 * v32) = 1;
          goto LABEL_125;
        }
        if (((char)v17 - 97) <= 0x19)
        {
          if ((sub_10003C054(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 4;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 473;
          goto LABEL_103;
        }
        unsigned int v24 = *(_DWORD *)(a1 + 24) - 1;
        BOOL v33 = (*(_DWORD *)(*(void *)(a1 + 32) + 4 * v24) & 1) == 0 || (char)v17 != 93;
        BOOL v34 = (*(_DWORD *)(*(void *)(a1 + 32) + 4 * v24) & 1) == 0 && (char)v17 == 125;
        if (v33 && !v34) {
          goto LABEL_102;
        }
        goto LABEL_121;
      case 1:
        if (v17 == 92)
        {
          int v22 = 2;
          goto LABEL_69;
        }
        if (v17 == 34)
        {
          *(_DWORD *)(a1 + 16) = 5;
          if ((sub_10003C054(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 3;
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 499;
          goto LABEL_103;
        }
        if ((sub_10003C054(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 503;
          goto LABEL_103;
        }
        continue;
      case 2:
        HIDWORD(v20) = (char)v17;
        LODWORD(v20) = ((char)v17 << 24) - 1644167168;
        unsigned __int8 v19 = v20 >> 25;
        if (v19 < 0xAu && ((0x341u >> v19) & 1) != 0)
        {
          char v21 = aN4info7details[(char)v19];
        }
        else if ((char)v17 == 102)
        {
          char v21 = 12;
        }
        else
        {
          char v21 = v18;
        }
        if ((sub_10003C054(a1, v21) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 512;
          goto LABEL_103;
        }
LABEL_68:
        int v22 = 1;
        goto LABEL_69;
      case 3:
        if (((char)v17 - 48) > 9)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_10003C054(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 4;
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 539;
          goto LABEL_103;
        }
        if ((sub_10003C054(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 533;
          goto LABEL_103;
        }
        continue;
      case 4:
        if (((char)v17 - 97) > 0x19)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_10003C054(a1, 0) & 0x80000000) == 0)
          {
            uint64_t v27 = *(const char **)(a1 + 112);
            if (!strcmp(v27, "false") || !strcmp(v27, "true"))
            {
              int v26 = 6;
            }
            else
            {
              if (strcmp(v27, "null")) {
                goto LABEL_102;
              }
              int v26 = 7;
            }
            goto LABEL_126;
          }
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 524;
          goto LABEL_103;
        }
        if ((sub_10003C054(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 519;
          goto LABEL_103;
        }
        continue;
      case 5:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        int v23 = *(_DWORD *)(a1 + 24);
        if (!v23)
        {
          __int16 v29 = "invalid JSON state";
          __int16 v30 = 546;
          goto LABEL_103;
        }
        unsigned int v24 = v23 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v24);
        if (v17 != 44)
        {
          if (v17 == 93)
          {
            if (v25) {
              goto LABEL_121;
            }
            char v18 = 93;
          }
          else if (v17 == 125)
          {
            goto LABEL_91;
          }
LABEL_102:
          char v45 = v18;
          __int16 v29 = "invalid char %c %s";
          __int16 v30 = 610;
          goto LABEL_103;
        }
        if (v25) {
          int v22 = 0;
        }
        else {
          int v22 = 6;
        }
LABEL_69:
        *(_DWORD *)(a1 + 16) = v22;
        continue;
      case 6:
        *(void *)(a1 + 80) = 0;
        if (((char)v17 & 0x80000000) == 0)
        {
          if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) == 0) {
            goto LABEL_61;
          }
          continue;
        }
        if (__maskrune((char)v17, 0x4000uLL)) {
          continue;
        }
LABEL_61:
        if (v17 == 34)
        {
          int v22 = 7;
          goto LABEL_69;
        }
        if (v17 != 125) {
          goto LABEL_102;
        }
        int v28 = *(_DWORD *)(a1 + 24);
        if (!v28) {
          goto LABEL_92;
        }
        unsigned int v24 = v28 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v24);
LABEL_91:
        if (v25)
        {
LABEL_92:
          char v18 = 125;
          goto LABEL_102;
        }
LABEL_121:
        *(_DWORD *)(a1 + 24) = v24;
        if (v24) {
          int v36 = 5;
        }
        else {
          int v36 = 9;
        }
        int v26 = 2;
LABEL_125:
        *(_DWORD *)(a1 + 16) = v36;
LABEL_126:
        if (a2) {
          memset_s(a2, 0x38uLL, 0, 0x38uLL);
        }
        *a2 = v26;
        uint64_t v37 = *(void *)(a1 + 80);
        if (v37) {
          uint64_t v37 = *(void *)(a1 + 88);
        }
        *((void *)a2 + 1) = v37;
        a2[12] = *(_DWORD *)(a1 + 24);
        if (v26 == 6)
        {
          int v38 = strcmp(*(const char **)(a1 + 112), "true");
          uint64_t result = 0;
          a2[9] = v38 == 0;
        }
        else if (v26 == 4)
        {
          uint64_t v39 = *(const char **)(a1 + 112);
          if (*v39 == 45)
          {
            unint64_t v40 = strtoull(v39 + 1, 0, 10);
            uint64_t result = 0;
            *((void *)a2 + 3) = v40;
            int v41 = -1;
          }
          else
          {
            unint64_t v42 = strtoull(v39, 0, 0);
            uint64_t result = 0;
            *((void *)a2 + 3) = v42;
            int v41 = v42 != 0;
          }
          a2[8] = v41;
        }
        else
        {
          uint64_t result = 0;
          if (v26 == 3) {
            *((void *)a2 + 2) = *(void *)(a1 + 112);
          }
        }
        return result;
      case 7:
        if ((char)v17 == 34)
        {
          if ((sub_10003BF9C(a1, 0) & 0x80000000) == 0)
          {
            int v22 = 8;
            goto LABEL_69;
          }
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 587;
LABEL_103:
          sub_10003B9A0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c", (uint64_t)"AAJSONInputStreamRead", v30, 109, 0, v29, a7, a8, v45);
          goto LABEL_104;
        }
        if ((sub_10003BF9C(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 591;
          goto LABEL_103;
        }
        continue;
      case 8:
        if ((char)v17 < 0)
        {
          if (__maskrune((char)v17, 0x4000uLL)) {
            continue;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }
        if ((char)v17 != 58) {
          goto LABEL_102;
        }
        int v22 = 0;
        goto LABEL_69;
      default:
        goto LABEL_102;
    }
  }
}

BOOL sub_10003CAB0(const char *a1)
{
  return !strcmp(a1, "lifs") || strcmp(a1, "fskit") == 0;
}

uint64_t _FSGetLocationFromStatfs(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x400uLL, 0x1359B406uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_10003CAB0((const char *)(a1 + 72)))
    {
      size_t v8 = strstr((char *)(a1 + 1112), "://");
      if (!v8 || (uint64_t v9 = v8 + 3, (v10 = strchr(v8 + 3, 47)) == 0))
      {
        uint64_t v12 = 22;
LABEL_17:
        free(v7);
        return v12;
      }
      if (v10 - v9 >= 1023) {
        uint64_t v11 = 1023;
      }
      else {
        uint64_t v11 = v10 - v9;
      }
      __memcpy_chk();
      *((unsigned char *)v7 + v11) = 0;
      if (!a2)
      {
LABEL_16:
        uint64_t v12 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      if (strncmp((const char *)(a1 + 1112), "/dev/disk", 9uLL)) {
        strncmp((const char *)(a1 + 1112), "/dev/rdisk", 0xAuLL);
      }
      __strlcpy_chk();
      if (!a2) {
        goto LABEL_16;
      }
    }
    strlcpy(a2, (const char *)v7, a3);
    goto LABEL_16;
  }
  return 12;
}

void sub_10003CC40(void *a1, uint64_t a2)
{
  sub_100040A10((uint64_t)&v14, a2 + 72);
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    unint64_t v4 = a1 + 1;
    uint64_t v5 = *a1;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_10016FA30[v7];
          int v9 = dword_10016FA40[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *unint64_t v4 = v9;
        }
      }
      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)a1 + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)a1 + *(void *)(v5 - 112) + 56) -= v10 << 9;
      uint64_t v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != v15);
  }
  sub_10000953C((uint64_t)&v14, v15[0]);
}

uint64_t sub_10003CD84(void *a1, uint64_t a2)
{
  sub_100003404((uint64_t)&v22);
  int v21 = *(_DWORD *)(*(void *)(a2 + 136) + 352);
  sub_10003E210(&v22, &v21);
  sub_100004624((uint64_t)v23, __p);
  unint64_t v4 = (char *)a1 + *(void *)(*a1 - 136);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + 2) = v20;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  sub_100004710((uint64_t)v23, (long long *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    uint64_t v8 = v6 + 360;
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = v22;
    int v11 = *(_DWORD *)((char *)v23 + *(void *)(v22 - 24));
    if (v9 != 1)
    {
      unint64_t v12 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v22 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        BOOL v13 = sub_10000ED30(&v22, (char *)__p);
        *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
        unint64_t v14 = (void *)std::ostream::operator<<();
        sub_1000039A0(v14, (uint64_t)" ", 1);
        ++v8;
        --v12;
      }
      while (v12);
      uint64_t v10 = v22;
    }
    *(_DWORD *)((char *)v23 + *(void *)(v10 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v10 - 24)) & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    __int16 v15 = sub_10000ED30(&v22, (char *)__p);
    *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) = v11;
  }
  sub_100004624((uint64_t)v23, __p);
  ssize_t v16 = (char *)a1 + *(void *)(*a1 - 136);
  int v17 = v16 + 32;
  if (v16[55] < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)int v17 = *(_OWORD *)__p;
  *((void *)v17 + 2) = v20;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10003D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
}

void sub_10003D12C(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100004944(v3);
      }
      sub_1001498F0((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100004944(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_10003D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100004944(v12);
  }
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003D264()
{
}

void sub_10003D380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100013BA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003D39C(uint64_t a1)
{
  *(void *)(a1 + 40) = off_1001A31A8;
  *(void *)(a1 + 48) = off_1001A31D8;
  *(void *)(a1 + 56) = off_1001A3208;
  *(void *)(a1 + 64) = off_1001A3238;
  *(void *)a1 = off_1001A2708;
  *(void *)(a1 + 24) = off_1001A2750;
  *(void *)(a1 + 32) = off_1001A2798;
  *(void *)(a1 + 40) = off_1001A27E0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A2828;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A2870;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A28B8;
  *(void *)a1 = off_1001A23C0;
  *(void *)(a1 + 24) = off_1001A2408;
  *(void *)(a1 + 32) = off_1001A2450;
  *(void *)(a1 + 40) = off_1001A2498;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A24E0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A2528;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A2570;
  *(void *)(a1 + 72) = off_1001A2918;
  *(void *)(a1 + 24) = off_1001A2970;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = off_1001A2AC0;
  *(void *)(a1 + 40) = off_1001A2B18;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = off_1001A2C68;
  *(void *)(a1 + 32) = off_1001A2CC0;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = off_1001A2E10;
  *(void *)(a1 + 48) = off_1001A2E68;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  sub_10003DC44((uint64_t *)(a1 + 256), (uint64_t *)&off_1001A2340);
}

void sub_10003DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10002E964((const void **)va);
  sub_10002E964(v8);
  sub_10003DE58(v9, (uint64_t *)&off_1001A2340);
  sub_10003DF18(v7, (uint64_t *)&off_1001A2320);
  sub_10003DFE0(v6, (uint64_t *)&off_1001A22E0);
  _Unwind_Resume(a1);
}

void sub_10003DC44(uint64_t *a1, uint64_t *a2)
{
  *a1 = (uint64_t)off_1001A3688;
  uint64_t v2 = a2[1];
  *a1 = v2;
  *(uint64_t *)((char *)a1 + *(void *)(v2 - 24)) = a2[2];
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_10011A954();
}

void sub_10003DE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10004044C(&a9);
  sub_1000409DC(&a10);
  sub_10004044C((const void **)(v10 + 24));
  sub_10004044C((const void **)(v10 + 16));
  sub_10004044C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10003DE58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10004044C((const void **)(a1 + 24));
  sub_10004044C((const void **)(a1 + 16));
  sub_10004044C((const void **)(a1 + 8));
  return a1;
}

uint64_t sub_10003DF18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10003DFE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[3];
  sub_10004044C((const void **)(a1 + 24));
  return a1;
}

CFStringRef sub_10003E090(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

CFStringRef sub_10003E0BC(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

CFStringRef sub_10003E100(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

CFStringRef sub_10003E144(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

CFStringRef sub_10003E188(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

CFStringRef sub_10003E1CC(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_1001A36A8[v1];
  }
}

void *sub_10003E210(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001A3258[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  long long v5 = &dword_1001A3258[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

void sub_10003E254(int a1, CFArrayRef theArray)
{
}

void sub_10003E4D4()
{
}

void sub_10003E540(uint64_t a1, int *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v5 = *a2;
  sub_100009FEC((uint64_t)v13);
  int v12 = v5;
  sub_100040480(&v14, &v12);
  sub_100004624((uint64_t)v15, __p);
  if (v10 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v6, 0x8000100u);
  CFStringRef v11 = v7;
  sub_10004044C((const void **)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v13
  uint64_t v14 = v8;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  CFDictionaryAddValue(Mutable, @"Type", v7);
  CFRelease(v7);
  sub_100122C78(Mutable, @"Reserved", a2[1]);
  sub_100122C78(Mutable, @"Sector Count", *((void *)a2 + 2));
  sub_100122C78(Mutable, @"Start Offset", *((void *)a2 + 1));
  sub_100122C78(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  sub_100122C78(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_10003E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (__cdecl **a21)(std::stringbuf *__hidden this),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(uint64_t *)((char *)&a18
  a20 = v35;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_10003E900()
{
}

const void **sub_10003E914@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100122DAC((CFMutableDictionaryRef *)&v6);
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v8 = (const __CFString **)@"Total Bytes";
  uint64_t v9 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v10 = @"Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v11 = 0;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v12 = @"Empty Bytes";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v13 = 0;
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFStringRef v14 = (const __CFString *)&v8;
  uint64_t v15 = 3;
  sub_1001233EC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v14);
  for (uint64_t i = 5; i != -1; i -= 2)
    sub_100005614((const void **)&(&v8)[i]);
  if (*(unsigned char *)(a1 + 48))
  {
    CFStringRef v14 = @"Max Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 40);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100005614((const void **)&v15);
  }
  if (*(unsigned char *)(a1 + 32))
  {
    CFStringRef v14 = @"Min Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 24);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100005614((const void **)&v15);
  }
  *a2 = v6;
  uint64_t v6 = 0;
  return sub_1000055AC(&v6);
}

void sub_10003EAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100005614(v2);
  sub_1000055AC((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10003EB7C()
{
}

CFStringRef sub_10003EB84()
{
  return @"Size Info";
}

void sub_10003EB94()
{
}

uint64_t sub_10003EBC0(uint64_t a1)
{
  *(void *)a1 = off_1001A34E0;
  *(void *)(a1 + 32) = off_1001A3538;
  sub_10004044C((const void **)(a1 + 24));
  return a1;
}

void sub_10003EC28(uint64_t a1)
{
  *(void *)a1 = off_1001A34E0;
  *(void *)(a1 + 32) = off_1001A3538;
  sub_10004044C((const void **)(a1 + 24));
  operator delete();
}

const void **sub_10003ECB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = &kCFBooleanTrue;
  }
  else {
    uint64_t v4 = &kCFBooleanFalse;
  }
  CFBooleanRef v5 = *v4;
  uint64_t v15 = (uint64_t *)@"Is Encrypted";
  uint64_t v16 = (uint64_t)v5;
  uint64_t valuePtr = 0;
  CFNumberRef v11 = &v15;
  uint64_t v12 = 1;
  sub_100123438((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  sub_100005614((const void **)&v16);
  sub_1000404C4(&valuePtr);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t valuePtr = *(const void **)(a1 + 8);
    CFNumberRef v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    CFStringRef v13 = @"UUID";
    uint64_t v6 = *(const void **)(a1 + 24);
    CFStringRef v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v15 = (uint64_t *)&v11;
    uint64_t v16 = 2;
    sub_1001233EC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3; i != -1; i -= 2)
      sub_100005614((const void **)&(&v11)[i]);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_1000055AC(&v9);
}

void sub_10003EE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100005614(v2);
  sub_1000055AC((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef sub_10003EE64()
{
  return @"Encryption Info";
}

const void **sub_10003EE70(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unsigned int v1 = off_1001A34E0;
  *((void *)v1 + 4) = off_1001A3538;
  return sub_10004044C((const void **)v1 + 3);
}

void sub_10003EECC(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)unsigned int v1 = off_1001A34E0;
  *((void *)v1 + 4) = off_1001A3538;
  sub_10004044C((const void **)v1 + 3);
  operator delete();
}

void sub_10003EF6C()
{
}

const void **sub_10003EF80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 16);
  v11[0] = @"Compressed Bytes";
  v11[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 24);
  _OWORD v11[2] = @"Compression Ratio";
  CFNumberRef v12 = 0;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  unsigned int v4 = *(_DWORD *)(a1 + 8) - 1;
  if (v4 > 3) {
    CFStringRef v5 = @"raw";
  }
  else {
    CFStringRef v5 = off_1001A36E8[v4];
  }
  CFStringRef v13 = @"Compression Type";
  CFStringRef v14 = v5;
  v8[0] = (uint64_t)v11;
  v8[1] = 3;
  sub_100123438(v8, (CFMutableDictionaryRef *)&v9);
  *a2 = v9;
  uint64_t v9 = 0;
  sub_1000055AC(&v9);
  for (uint64_t i = 5; i != -1; i -= 2)
    uint64_t result = sub_100005614((const void **)&v11[i]);
  return result;
}

void sub_10003F0B8(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    sub_100005614((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10003F0F4()
{
  return @"Compression Info";
}

void sub_10003F104()
{
}

uint64_t sub_10003F130(uint64_t a1)
{
  *(void *)a1 = off_1001A3570;
  *(void *)(a1 + 56) = off_1001A35C8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10003F1B0(uint64_t a1)
{
  *(void *)a1 = off_1001A3570;
  *(void *)(a1 + 56) = off_1001A35C8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  operator delete();
}

const void **sub_10003F250@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    unsigned int v4 = *(const UInt8 **)(a1 + 32);
    CFIndex v5 = *(void *)(a1 + 40);
  }
  else
  {
    unsigned int v4 = (const UInt8 *)(a1 + 32);
    CFIndex v5 = *(unsigned __int8 *)(a1 + 55);
  }
  CFTypeRef cf = CFStringCreateWithBytes(kCFAllocatorDefault, v4, v5, 0x8000100u, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v6 = *(const UInt8 **)(a1 + 8);
    CFIndex v7 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v6 = (const UInt8 *)(a1 + 8);
    CFIndex v7 = *(unsigned __int8 *)(a1 + 31);
  }
  uint64_t v8 = CFStringCreateWithBytes(kCFAllocatorDefault, v6, v7, 0x8000100u, 0);
  CFTypeRef v13 = v8;
  v15[0] = @"Checksum Value";
  v15[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v8 = v13;
  }
  v15[2] = @"Checksum Type";
  v15[3] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v11[0] = (uint64_t)v15;
  v11[1] = 2;
  sub_100123438(v11, (CFMutableDictionaryRef *)&v12);
  *a2 = v12;
  CFNumberRef v12 = 0;
  sub_1000055AC(&v12);
  for (uint64_t i = 3; i != -1; i -= 2)
    sub_100005614((const void **)&v15[i]);
  sub_10004044C(&v13);
  return sub_10004044C(&cf);
}

void sub_10003F3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, const void *);
  sub_100005614(v4);
  sub_10004044C((const void **)va);
  sub_10004044C((const void **)va1);
  _Unwind_Resume(a1);
}

CFStringRef sub_10003F400()
{
  return @"Master Checksum Info";
}

void sub_10003F40C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001A3570;
  *((void *)v1 + 7) = off_1001A35C8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

void sub_10003F49C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001A3570;
  *((void *)v1 + 7) = off_1001A35C8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  operator delete();
}

uint64_t sub_10003F550(uint64_t a1)
{
  *(void *)a1 = off_1001A3600;
  *(void *)(a1 + 32) = off_1001A3658;
  sub_10004044C((const void **)(a1 + 24));
  sub_10004044C((const void **)(a1 + 16));
  sub_10004044C((const void **)(a1 + 8));
  return a1;
}

void sub_10003F5C8(uint64_t a1)
{
  *(void *)a1 = off_1001A3600;
  *(void *)(a1 + 32) = off_1001A3658;
  sub_10004044C((const void **)(a1 + 24));
  sub_10004044C((const void **)(a1 + 16));
  sub_10004044C((const void **)(a1 + 8));
  operator delete();
}

const void **sub_10003F660@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (const void *)a1[1];
  CFStringRef v11 = @"UUID";
  CFNumberRef v12 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v8 = &v11;
  uint64_t v9 = 1;
  sub_100123438((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  sub_100005614(&v12);
  CFIndex v5 = (const void *)a1[3];
  if (v5)
  {
    CFStringRef v11 = @"Parent UUID";
    CFNumberRef v12 = v5;
    CFRetain(v5);
    uint64_t v8 = &v11;
    uint64_t v9 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100005614(&v12);
  }
  uint64_t v6 = (const void *)a1[2];
  if (v6)
  {
    CFStringRef v11 = @"Stable UUID";
    CFNumberRef v12 = v6;
    CFRetain(v6);
    uint64_t v8 = &v11;
    uint64_t v9 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100005614(&v12);
  }
  *a2 = v10;
  CFStringRef v10 = 0;
  return sub_1000055AC(&v10);
}

void sub_10003F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100005614(v3);
  sub_1000055AC((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef sub_10003F7D4()
{
  return @"Identity Info";
}

const void **sub_10003F7E0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001A3600;
  *((void *)v1 + 4) = off_1001A3658;
  sub_10004044C((const void **)v1 + 3);
  sub_10004044C((const void **)v1 + 2);
  return sub_10004044C((const void **)v1 + 1);
}

void sub_10003F874(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = off_1001A3600;
  *((void *)v1 + 4) = off_1001A3658;
  sub_10004044C((const void **)v1 + 3);
  sub_10004044C((const void **)v1 + 2);
  sub_10004044C((const void **)v1 + 1);
  operator delete();
}

uint64_t sub_10003F920(uint64_t a1)
{
  uint64_t v2 = sub_1000404F8(a1, (uint64_t *)off_1001A21D8);
  *(void *)(v2 + 256) = off_1001A2FB8;
  *(void *)(v2 + 64) = off_1001A3010;
  sub_10004044C((const void **)(v2 + 280));
  sub_10004044C((const void **)(a1 + 272));
  sub_10004044C((const void **)(a1 + 264));
  *(void *)(a1 + 200) = off_1001A2E10;
  *(void *)(a1 + 48) = off_1001A2E68;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  *(void *)(a1 + 136) = off_1001A2AC0;
  *(void *)(a1 + 40) = off_1001A2B18;
  sub_10004044C((const void **)(a1 + 160));
  return a1;
}

void sub_10003FA50(uint64_t a1)
{
  sub_10003F920(a1);
  operator delete();
}

const void **sub_10003FA88@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  CFStringRef v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  sub_100040938(a1, (CFStringRef *)&cf);
  CFStringRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_10003E914((uint64_t)a1 + *(void *)(*a1 - 112), &v10);
  CFStringRef v15 = @"Size Info";
  uint64_t v16 = v10;
  CFStringRef v10 = 0;
  sub_10000D758(&v10);
  sub_10003ECB0((uint64_t)a1 + *(void *)(*a1 - 120), &v10);
  CFStringRef v17 = @"Encryption Info";
  char v18 = v10;
  CFStringRef v10 = 0;
  sub_10000D758(&v10);
  sub_10003EF80((uint64_t)a1 + *(void *)(*a1 - 128), &v10);
  CFStringRef v19 = @"Compression Info";
  uint64_t v20 = v10;
  CFStringRef v10 = 0;
  sub_10000D758(&v10);
  sub_10003F250((uint64_t)a1 + *(void *)(*a1 - 136), &v10);
  CFStringRef v21 = @"Master Checksum Info";
  uint64_t v22 = v10;
  CFStringRef v10 = 0;
  sub_10000D758(&v10);
  sub_10003F660((void *)((char *)a1 + *(void *)(*a1 - 144)), &v10);
  CFStringRef v23 = @"Identity Info";
  char v24 = v10;
  CFStringRef v10 = 0;
  sub_10000D758(&v10);
  int v25 = (uint64_t *)&v11;
  uint64_t v26 = 7;
  sub_100123438((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13; i != -1; i -= 2)
    sub_100005614((const void **)&(&v11)[i]);
  sub_10004044C(&cf);
  uint64_t v6 = (const void *)a1[2];
  if (v6)
  {
    int v25 = (uint64_t *)@"Runs";
    uint64_t v26 = (uint64_t)v6;
    CFRetain(v6);
    CFStringRef v11 = &v25;
    uint64_t v12 = 1;
    sub_1001233EC((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100005614((const void **)&v26);
  }
  *a2 = v9;
  uint64_t v9 = 0;
  return sub_1000055AC(&v9);
}

void sub_10003FD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100005614(v2);
  sub_1000055AC((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FDA4(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FDC0(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10003FE10(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FE2C(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10003FE7C(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FE98(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10003FEE8(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FF04(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10003FF54(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FF70(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10003FFC0(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
}

void sub_10003FFDC(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 24));
  operator delete();
}

uint64_t sub_10004002C(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_100040048(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
  operator delete();
}

const void **sub_100040098@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003FA88((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_1000400B4(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_1000400D0(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
  operator delete();
}

const void **sub_100040120@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003FA88((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10004013C(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_100040158(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
  operator delete();
}

const void **sub_1000401A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003FA88((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_1000401C4(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_1000401E0(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
  operator delete();
}

const void **sub_100040230@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003FA88((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

uint64_t sub_10004024C(void *a1)
{
  return sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
}

void sub_100040268(void *a1)
{
  sub_10003F920((uint64_t)a1 + *(void *)(*a1 - 32));
  operator delete();
}

const void **sub_1000402B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003FA88((void *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

char *sub_1000402D4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_1000402F0(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10004030C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_100040328(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_100040344(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_100040360(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_10004037C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_100040398(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

char *sub_1000403B4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32);
}

char *sub_1000403D0(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40);
}

void sub_1000403F0()
{
}

void sub_100040408()
{
}

void sub_100040420()
{
}

void sub_100040438()
{
}

const void **sub_10004044C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_100040480(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001A3360[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  CFIndex v5 = &dword_1001A3360[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

const void **sub_1000404C4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1000404F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 104)) = a2[1];
  *(void *)(a1 + *(void *)(*(void *)a1 - 96)) = a2[2];
  *(void *)(a1 + *(void *)(*(void *)a1 - 24)) = a2[3];
  *(void *)(a1 + *(void *)(*(void *)a1 - 32)) = a2[4];
  *(void *)(a1 + *(void *)(*(void *)a1 - 40)) = a2[5];
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 112)) = a2[9];
  *(void *)(a1 + *(void *)(*(void *)a1 - 120)) = a2[10];
  *(void *)(a1 + *(void *)(*(void *)a1 - 128)) = a2[11];
  *(void *)(a1 + *(void *)(*(void *)a1 - 136)) = a2[12];
  *(void *)(a1 + *(void *)(*(void *)a1 - 144)) = a2[13];
  sub_10002E964((const void **)(a1 + 16));
  return a1;
}

CFStringRef sub_100040938@<X0>(void *a1@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 128) + 8);
  if (v3)
  {
    if (v3 > 4) {
      CFStringRef v4 = @"raw";
    }
    else {
      CFStringRef v4 = off_1001A36E8[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%s (%@)", "UDIF read-only compressed image", v4);
  }
  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }
  *a2 = result;
  return result;
}

const void **sub_1000409DC(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100040A10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100040A68((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100040A50(_Unwind_Exception *a1)
{
  sub_10000953C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100040A68(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFStringRef v4 = a2;
    CFIndex v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = sub_100023E5C(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      CFIndex v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          CFIndex v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CFStringRef v4 = v8;
        }
        while (!v9);
      }
      CFStringRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_100040B14()
{
  return 0;
}

uint64_t sub_100040B1C()
{
  return 0;
}

uint64_t sub_100040B2C()
{
  return 0;
}

uint64_t sub_100040B34()
{
  return 0;
}

uint64_t sub_100040B3C()
{
  return 0;
}

uint64_t sub_100040B44()
{
  return 0;
}

uint64_t sub_100040B4C()
{
  return 0;
}

uint64_t sub_100040B54()
{
  return 0;
}

uint64_t sub_100040B5C()
{
  return 0;
}

uint64_t sub_100040B64()
{
  return 0;
}

uint64_t sub_100040B6C()
{
  return 0;
}

uint64_t sub_100040B74()
{
  return 0;
}

uint64_t sub_100040B7C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 24) == *(void *)(result + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v3 = **(void **)result + *(void *)(result + 32);
  if (*(void *)(result + 56)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)result + 8);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(result + 64);
  if (v5) {
LABEL_10:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v5;
  unint64_t v6 = *(void *)(result + 32);
  unint64_t v7 = *(void *)(*(void *)result + 16) - v6;
  if (v7 >= *(void *)(result + 24) - *(void *)(result + 16)) {
    unint64_t v7 = *(void *)(result + 24) - *(void *)(result + 16);
  }
  unint64_t v8 = **(void **)(result + 8);
  BOOL v9 = v8 >= v6;
  unint64_t v10 = v8 - v6;
  if (!v9) {
    unint64_t v10 = 0;
  }
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_100040C0C(uint64_t a1, void *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8 = 0;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(unsigned char *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (a4 < a5)
  {
    unint64_t v8 = **a3;
    if (v8 >= a6) {
      unint64_t v8 = a6;
    }
  }
  *(void *)(a1 + 40) = v8;
  sub_100040B7C(a1, 1, (uint64_t)v11);
  BOOL v9 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v11[0];
  if (v9) {
    sub_100004944(v9);
  }
  *(_OWORD *)(a1 + 72) = v11[1];
  return a1;
}

uint64_t sub_100040CA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(*(void *)a1 + 16) + v2 - *(void *)(a1 + 32);
    uint64_t v6 = *(void *)a1 + 24;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v4 + 8;
    *(void *)(a1 + 16) = v5;
  }
  sub_100040B7C(a1, v2 != v3, (uint64_t)v9);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v9[0];
  if (v7) {
    sub_100004944(v7);
  }
  *(_OWORD *)(a1 + 72) = v9[1];
  return a1;
}

uint64_t sub_100040D30(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 24) - v3;
    if (*(void *)(*(void *)a1 + 16) - *(void *)(a1 + 32) < v4) {
      unint64_t v4 = *(void *)(*(void *)a1 + 16) - *(void *)(a1 + 32);
    }
    BOOL v5 = v4 <= a2;
    if (v4 <= a2)
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 8) + 8;
      uint64_t v8 = *(void *)a1 + 24;
      do
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        if (v6)
        {
          *(void *)(v7 - 8) = *(void *)(a1 + 40) + v4;
          uint64_t v3 = *(void *)(a1 + 16);
        }
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        v3 += v4;
        *(void *)(a1 + 16) = v3;
        a2 -= v4;
        if (!a2) {
          break;
        }
        unint64_t v4 = *(void *)(v8 + 16);
        if (v4 >= *(void *)(a1 + 24) - v3) {
          unint64_t v4 = *(void *)(a1 + 24) - v3;
        }
        v7 += 8;
        v8 += 24;
        BOOL v11 = v4 > a2;
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
      }
      while (!v11);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v9;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  unint64_t v12 = *(void *)(a1 + 40) + a2;
  *(void *)(a1 + 40) = v12;
  if (v12 && *(unsigned char *)(a1 + 48)) {
    **(void **)(a1 + 8) = v12;
  }
  *(void *)(a1 + 16) += a2;
  *(void *)(a1 + 32) += a2;
  sub_100040B7C(a1, v5, (uint64_t)v15);
  CFStringRef v13 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v15[0];
  if (v13) {
    sub_100004944(v13);
  }
  *(_OWORD *)(a1 + 72) = v15[1];
  return a1;
}

uint64_t sub_100040E68(uint64_t a1, unint64_t a2)
{
  char v3 = 0;
  if (a2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8) + 8;
    uint64_t v8 = *(void *)a1 + 24;
    while (1)
    {
      unint64_t v9 = v6 - v5;
      if (*(void *)(v8 - 8) - v4 < v6 - v5) {
        unint64_t v9 = *(void *)(v8 - 8) - v4;
      }
      unint64_t v10 = *(void *)(v7 - 8);
      BOOL v11 = v10 >= v4;
      unint64_t v12 = v10 - v4;
      unint64_t v13 = v11 ? v12 : 0;
      unint64_t v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14)) {
        break;
      }
      unint64_t v4 = 0;
      v5 += v9;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v5;
      *(void *)a1 = v8;
      if (a2 >= v14) {
        unint64_t v16 = a2 - v14;
      }
      else {
        unint64_t v16 = 0;
      }
      v7 += 8;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      char v3 = 1;
      v8 += 24;
      BOOL v11 = v14 >= a2;
      a2 = v16;
      if (v11) {
        goto LABEL_22;
      }
    }
    unint64_t v17 = *(void *)(a1 + 40) + a2;
    *(void *)(a1 + 16) = v5 + a2;
    *(void *)(a1 + 32) = v4 + a2;
    *(void *)(a1 + 40) = v17;
  }
LABEL_22:
  sub_100040B7C(a1, v3 & 1, (uint64_t)v20);
  char v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v20[0];
  if (v18) {
    sub_100004944(v18);
  }
  *(_OWORD *)(a1 + 72) = v20[1];
  return a1;
}

void *sub_100040F70(void *result)
{
  uint64_t v1 = result[2];
  if (v1 != result[3])
  {
    uint64_t v2 = result[4];
    char v3 = (void *)result[1];
    unint64_t v4 = (uint64_t *)(*result + 16);
    do
    {
      *v3++ = v2;
      uint64_t v5 = *v4;
      v4 += 3;
      uint64_t v6 = result[3];
      unint64_t v7 = v5 - v2;
      if (v7 >= v6 - v1) {
        unint64_t v7 = v6 - v1;
      }
      v1 += v7;
      uint64_t v2 = 0;
    }
    while (v1 != v6);
  }
  return result;
}

void sub_100040FB8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[6];
  if (sub_1000410B8((uint64_t)a1, a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sub_100042828((uint64_t)(a1 + 7));
    uint64_t v7 = a1[14];
    uint64_t v8 = (std::__shared_weak_count *)a1[15];
    if (v8)
    {
      p_shared_owners = &v8->__shared_owners_;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = a1[16];
      uint64_t v11 = a1[18];
      unint64_t v12 = *(void *)(a2 + 144) - v11;
      if (v12 >= v10) {
        unint64_t v12 = a1[16];
      }
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      char v13 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v8;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v11;
      *(void *)(a3 + 32) = v10;
      *(unsigned char *)(a3 + 40) = v13;
      sub_100004944(v8);
      sub_100004944(v8);
    }
    else
    {
      unint64_t v14 = a1[16];
      uint64_t v15 = a1[18];
      unint64_t v16 = *(void *)(a2 + 144) - v15;
      if (v16 >= v14) {
        unint64_t v16 = a1[16];
      }
      char v17 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v15;
      *(void *)(a3 + 32) = v14;
      *(unsigned char *)(a3 + 40) = v17;
    }
  }
}

BOOL sub_1000410B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != *(void **)(a2 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152)) {
    BOOL v5 = *(unsigned char *)(a2 + 152) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return *(void *)(a1 + 144) == *(void *)(a2 + 144);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[27];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v2[33];
  uint64_t v8 = v2[34];
  uint64_t v9 = v2[35];
  unint64_t v10 = (std::__shared_weak_count *)v2[41];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  BOOL v12 = v11 == v7 && *(void *)(a1 + 64) == v8 && *(void *)(a1 + 72) == v9;
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  if (v14 == v7 && v13 == v8)
  {
    int v17 = v12 ^ (*(void *)(a2 + 72) != v9);
    if (v11 != v7 || v17 == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    char v16 = v11 != v14 || v12;
    if (v16) {
      goto LABEL_32;
    }
  }
  if (*(void *)(a1 + 64) != v13 || *(void *)(a1 + 72) != *(void *)(a2 + 72))
  {
LABEL_32:
    BOOL v3 = 0;
    goto LABEL_33;
  }
  BOOL v3 = *(void *)(a1 + 144) == *(void *)(a2 + 144);
LABEL_33:
  if (v10) {
    sub_100004944(v10);
  }
  if (v6) {
    sub_100004944(v6);
  }
  return v3;
}

double sub_1000411FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100019864(a2, a1 + 208).n128_u64[0];
  return result;
}

uint64_t sub_100041208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = v7 - *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)a3;
  *(void *)(a1 + 104) = *(void *)(a3 + 8);
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a3 + 48);
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  uint64_t v15 = *(void *)(a3 + 64);
  *(void *)(a1 + 152) = *(void *)(a3 + 56);
  *(void *)(a1 + 160) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 192) = a5;
  *(unsigned char *)(a1 + 200) = a6;
  sub_1000423F8(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_1000423F8(a1 + 368, a1, v8, 1);
  return a1;
}

void sub_100041304(_Unwind_Exception *a1)
{
  sub_10000371C(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100004944(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100004944(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100041340(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a3;
  if (*a2 == *a3)
  {
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(void *)(v12 + 16);
        sub_100004944(v15);
      }
      else
      {
        uint64_t v16 = *(void *)(v12 + 16);
      }
      v14 += v16;
      v12 += 24;
    }
    while (v12 != v13);
  }
  *(void *)a1 = v14;
  sub_100040C0C(a1 + 8, a2, a4, 0, v14, 0, 1);
  sub_100040C0C(a1 + 96, a3, a5, *(void *)a1, *(void *)a1, 0, 1);
  *(void *)(a1 + 184) = a6;
  *(void *)(a1 + 192) = a7;
  *(unsigned char *)(a1 + 200) = 0;
  sub_1000423F8(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_1000423F8(a1 + 368, a1, (uint64_t *)(a1 + 8), 1);
  return a1;
}

void sub_100041478(_Unwind_Exception *a1)
{
  sub_10000371C(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    sub_100004944(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    sub_100004944(v5);
  }
  _Unwind_Resume(a1);
}

double sub_1000414AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100019864(a2, a1 + 368).n128_u64[0];
  return result;
}

void sub_1000414B8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v64 = *(void *)(a1 + 208);
  __int16 v65 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a1 + 233);
  long long v10 = (long long *)(a1 + 264);
  long long v68 = *(_OWORD *)(a1 + 264);
  long long v11 = *(_OWORD *)(a1 + 296);
  long long v69 = *(_OWORD *)(a1 + 280);
  uint64_t v67 = *(void *)(a1 + 256);
  char v71 = *(unsigned char *)(a1 + 312);
  long long v70 = v11;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)&long long v72 = *(void *)(a1 + 320);
  *((void *)&v72 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v73 = *(_OWORD *)(a1 + 336);
  uint64_t v74 = *(void *)(a1 + 352);
  char v75 = *(unsigned char *)(a1 + 360);
  BOOL v13 = sub_1000410B8(a2, (uint64_t)&v64);
  if (v12) {
    sub_100004944(v12);
  }
  if (v9) {
    sub_100004944(v9);
  }
  unint64_t v14 = (_OWORD *)(a1 + 224);
  uint64_t v15 = (long long *)(a1 + 280);
  int v48 = (long long *)(a1 + 336);
  uint64_t v16 = (uint64_t *)(a1 + 352);
  if (!v13)
  {
    uint64_t v17 = *(void *)(a1 + 192);
    if (v17 + *(void *)(a1 + 184) < a3) {
      a3 = v17 + *(void *)(a1 + 184);
    }
    if (a3 >= *(void *)(a2 + 144))
    {
      int v25 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v64 = *(void *)a2;
      __int16 v65 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v66[0] = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a2 + 25);
      uint64_t v67 = *(void *)(a2 + 48);
      long long v68 = *(_OWORD *)(a2 + 56);
      long long v69 = *(_OWORD *)(a2 + 72);
      long long v70 = *(_OWORD *)(a2 + 88);
      char v71 = *(unsigned char *)(a2 + 104);
      uint64_t v26 = *(void *)(a2 + 120);
      *(void *)&long long v72 = *(void *)(a2 + 112);
      *((void *)&v72 + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      long long v73 = *(_OWORD *)(a2 + 128);
      uint64_t v74 = *(void *)(a2 + 144);
      char v75 = *(unsigned char *)(a2 + 152);
      if (a4)
      {
        unint64_t v27 = *(void *)(a1 + 112);
        if ((unint64_t)v69 <= v27)
        {
          long long v52 = v68;
          *(_OWORD *)uint64_t v53 = v69;
          *(_OWORD *)&v53[16] = v70;
          LOBYTE(v54) = v71;
          __int16 v29 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          long long v55 = v72;
          if (*((void *)&v72 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            unint64_t v27 = *(void *)(a1 + 112);
          }
          long long v56 = v73;
          if (*(void *)v53 >= v27)
          {
            unint64_t v28 = 0;
          }
          else
          {
            unint64_t v28 = 0;
            do
            {
              sub_100042828((uint64_t)&v52);
              if (*(void *)(a1 + 112) - (void)v69 >= *((void *)&v56 + 1)) {
                unint64_t v30 = *((void *)&v56 + 1);
              }
              else {
                unint64_t v30 = *(void *)(a1 + 112) - v69;
              }
              if (v30) {
                sub_100040E68((uint64_t)&v52, v30);
              }
              else {
                sub_100040CA0((uint64_t)&v52);
              }
              v28 += v30;
            }
            while (*(void *)v53 < *(void *)(a1 + 112));
            __int16 v29 = (std::__shared_weak_count *)*((void *)&v55 + 1);
          }
          if (v29) {
            sub_100004944(v29);
          }
        }
        else
        {
          unint64_t v28 = 0;
        }
        if (v28 >= a4) {
          unint64_t v31 = a4;
        }
        else {
          unint64_t v31 = v28;
        }
        if (v31) {
          sub_100041B0C((uint64_t)&v64, v31);
        }
        if (v28 < a4) {
          sub_100041C48((uint64_t)&v64, a4 - v31);
        }
      }
      uint64_t v33 = *(void *)(a1 + 208);
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 216);
      *(void *)&long long v52 = v33;
      *((void *)&v52 + 1) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = v33;
      *(_OWORD *)uint64_t v53 = *v14;
      *(_OWORD *)&v53[9] = *(_OWORD *)(a1 + 233);
      long long v34 = *(_OWORD *)(a1 + 296);
      long long v56 = *v15;
      uint64_t v35 = *(void *)(a1 + 264);
      uint64_t v36 = *(void *)(a1 + 256);
      uint64_t v54 = v36;
      *(void *)&long long v55 = v35;
      uint64_t v37 = v35;
      uint64_t v38 = *(void *)(a1 + 272);
      *((void *)&v55 + 1) = v38;
      long long v57 = v34;
      char v58 = *(unsigned char *)(a1 + 312);
      uint64_t v40 = *(void *)(a1 + 320);
      uint64_t v39 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v59 = v40;
      uint64_t v60 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v61 = *v48;
      char v63 = *((unsigned char *)v16 + 8);
      unint64_t v62 = a3;
      sub_100040FB8(&v64, (uint64_t)&v52, (uint64_t)&v49);
      int v41 = v50;
      unint64_t v42 = v65;
      uint64_t v64 = v49;
      __int16 v65 = v50;
      if (v42)
      {
        sub_100004944(v42);
        int v41 = v65;
      }
      v66[0] = v51[0];
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v51 + 9);
      *(void *)a5 = v64;
      *(void *)(a5 + 8) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 16) = v66[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v66 + 9);
      *(_OWORD *)(a5 + 56) = v68;
      long long v43 = v70;
      *(_OWORD *)(a5 + 72) = v69;
      *(void *)(a5 + 48) = v67;
      *(_OWORD *)(a5 + 88) = v43;
      *(unsigned char *)(a5 + 104) = v71;
      uint64_t v44 = *((void *)&v72 + 1);
      *(void *)(a5 + 112) = v72;
      *(void *)(a5 + 120) = v44;
      if (v44) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 128) = v73;
      *(void *)(a5 + 144) = v74;
      *(unsigned char *)(a5 + 152) = v75;
      *(void *)(a5 + 160) = v47;
      *(void *)(a5 + 168) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 176) = *(_OWORD *)v53;
      *(_OWORD *)(a5 + 185) = *(_OWORD *)&v53[9];
      long long v45 = v57;
      *(_OWORD *)(a5 + 232) = v56;
      *(void *)(a5 + 208) = v36;
      *(void *)(a5 + 216) = v37;
      *(void *)(a5 + 224) = v38;
      *(_OWORD *)(a5 + 248) = v45;
      *(unsigned char *)(a5 + 264) = v58;
      *(void *)(a5 + 272) = v40;
      *(void *)(a5 + 280) = v39;
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        sub_100004944(v39);
        if (!v32) {
          goto LABEL_72;
        }
      }
      else
      {
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        if (!v32) {
          goto LABEL_72;
        }
      }
      char v24 = v32;
LABEL_71:
      sub_100004944(v24);
      goto LABEL_72;
    }
  }
  char v18 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v64 = *(void *)(a1 + 208);
  __int16 v65 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *v14;
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)(a1 + 233);
  long long v68 = *v10;
  long long v19 = v10[2];
  long long v69 = *v15;
  uint64_t v67 = *(void *)(a1 + 256);
  long long v70 = v19;
  char v71 = *((unsigned char *)v10 + 48);
  uint64_t v20 = *(void *)(a1 + 328);
  *(void *)&long long v72 = *(void *)(a1 + 320);
  *((void *)&v72 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v73 = *v48;
  uint64_t v74 = *v16;
  char v75 = *(unsigned char *)(a1 + 360);
  uint64_t v21 = *(void *)(a1 + 216);
  *(void *)&long long v52 = *(void *)(a1 + 208);
  *((void *)&v52 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v53 = *v14;
  *(_OWORD *)&v53[9] = *(_OWORD *)(a1 + 233);
  long long v55 = *v10;
  long long v22 = v10[2];
  long long v56 = *v15;
  uint64_t v54 = *(void *)(a1 + 256);
  long long v57 = v22;
  char v58 = *((unsigned char *)v10 + 48);
  CFStringRef v23 = *(std::__shared_weak_count **)(a1 + 328);
  uint64_t v59 = *(void *)(a1 + 320);
  uint64_t v60 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *v48;
  unint64_t v62 = *v16;
  char v63 = *(unsigned char *)(a1 + 360);
  sub_100042878(a5, (uint64_t)&v64, (uint64_t)&v52);
  if (v60) {
    sub_100004944(v60);
  }
  char v24 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1)) {
    goto LABEL_71;
  }
LABEL_72:
  if (*((void *)&v72 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v72 + 1));
  }
  if (v65) {
    sub_100004944(v65);
  }
}

void sub_100041AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_100041B0C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_100040E68(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    BOOL v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sub_100040FB8((void *)a1, (uint64_t)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      sub_100004944(v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      sub_100004944(v5);
    }
    if (v4) {
      sub_100004944(v4);
    }
  }
  return a1;
}

void sub_100041C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100041C48(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_100040D30(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    BOOL v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sub_100040FB8((void *)a1, (uint64_t)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      sub_100004944(v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      sub_100004944(v5);
    }
    if (v4) {
      sub_100004944(v4);
    }
  }
  return a1;
}

void sub_100041D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100041D84(uint64_t a1)
{
  sub_100040CA0(a1 + 56);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 216);
    v7[0] = *(void *)(v2 + 208);
    v7[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v8[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(v2 + 233);
    uint64_t v9 = *(void *)(v2 + 256);
    long long v10 = *(_OWORD *)(v2 + 264);
    char v13 = *(unsigned char *)(v2 + 312);
    long long v11 = *(_OWORD *)(v2 + 280);
    long long v12 = *(_OWORD *)(v2 + 296);
    unint64_t v4 = *(std::__shared_weak_count **)(v2 + 328);
    uint64_t v14 = *(void *)(v2 + 320);
    uint64_t v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v16 = *(_OWORD *)(v2 + 336);
    uint64_t v17 = *(void *)(v2 + 352);
    char v18 = *(unsigned char *)(v2 + 360);
    sub_100040FB8((void *)a1, (uint64_t)v7, (uint64_t)&v19);
    BOOL v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v19;
    if (v5) {
      sub_100004944(v5);
    }
    *(_OWORD *)(a1 + 16) = v20[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v20 + 9);
    if (v4) {
      sub_100004944(v4);
    }
    if (v3) {
      sub_100004944(v3);
    }
  }
  return a1;
}

void sub_100041EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100041EB4(uint64_t a1)
{
  return *(void *)(a1 + 80) == *(void *)(a1 + 72);
}

void sub_100041EC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 24);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < (unint64_t)(v7 & 1) + *(void *)(a2 + 8) - 1)
  {
    unint64_t v10 = *(void *)(a1 + 16) + v6;
    char v11 = v7 & 2;
    unint64_t v12 = *(void *)a2;
    if ((v7 & 2) != 0) {
      unint64_t v13 = *(void *)a2;
    }
    else {
      unint64_t v13 = v12 + 1;
    }
    if (v10 <= v13)
    {
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
      uint64_t v73 = *(void *)a1;
      uint64_t v74 = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v16 = v14;
      }
      v75[0] = *(_OWORD *)(a1 + 16);
      *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)(a1 + 25);
      uint64_t v76 = v16;
      long long v77 = *(_OWORD *)(a1 + 56);
      long long v78 = *(_OWORD *)(a1 + 72);
      long long v79 = *(_OWORD *)(a1 + 88);
      char v80 = *(unsigned char *)(a1 + 104);
      uint64_t v17 = *(std::__shared_weak_count **)(a1 + 120);
      uint64_t v81 = *(void *)(a1 + 112);
      uint64_t v82 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v83 = *(_OWORD *)(a1 + 128);
      uint64_t v84 = *(void *)(a1 + 144);
      char v85 = *(unsigned char *)(a1 + 152);
      while (!sub_1000410B8((uint64_t)&v73, a3))
      {
        v10 += *(void *)&v75[0];
        unint64_t v18 = *(void *)a2;
        if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
          ++v18;
        }
        if (v10 >= v18) {
          break;
        }
        sub_100041D84((uint64_t)&v73);
      }
      long long v19 = *(std::__shared_weak_count **)(v14 + 216);
      uint64_t v60 = *(void *)(v14 + 208);
      long long v61 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v62[0] = *(_OWORD *)(v14 + 224);
      *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
      long long v20 = (long long *)(v14 + 264);
      long long v64 = *(_OWORD *)(v14 + 264);
      long long v21 = *(_OWORD *)(v14 + 296);
      long long v65 = *(_OWORD *)(v14 + 280);
      uint64_t v63 = *(void *)(v14 + 256);
      char v67 = *(unsigned char *)(v14 + 312);
      long long v66 = v21;
      long long v22 = *(std::__shared_weak_count **)(v14 + 328);
      uint64_t v68 = *(void *)(v14 + 320);
      long long v69 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v70 = *(_OWORD *)(v14 + 336);
      uint64_t v71 = *(void *)(v14 + 352);
      char v72 = *(unsigned char *)(v14 + 360);
      BOOL v23 = sub_1000410B8((uint64_t)&v73, (uint64_t)&v60);
      if (v22) {
        sub_100004944(v22);
      }
      if (v19) {
        sub_100004944(v19);
      }
      if (v23)
      {
        char v24 = (_OWORD *)(v14 + 224);
        int v25 = (long long *)(v14 + 280);
        uint64_t v26 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v60 = *(void *)(v14 + 208);
        long long v61 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v62[0] = *v24;
        *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
        long long v64 = *v20;
        long long v27 = *(_OWORD *)(v14 + 296);
        long long v65 = *v25;
        unint64_t v28 = (long long *)(v14 + 336);
        __int16 v29 = (uint64_t *)(v14 + 352);
        uint64_t v63 = *(void *)(v14 + 256);
        long long v66 = v27;
        char v67 = *(unsigned char *)(v14 + 312);
        unint64_t v30 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v68 = *(void *)(v14 + 320);
        long long v69 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v70 = *v28;
        uint64_t v71 = *v29;
        char v72 = *(unsigned char *)(v14 + 360);
        unint64_t v31 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v47 = *(void *)(v14 + 208);
        int v48 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)uint64_t v49 = *v24;
        *(_OWORD *)&v49[9] = *(_OWORD *)(v14 + 233);
        long long v32 = *v25;
        long long v33 = *(_OWORD *)(v14 + 296);
        long long v51 = *v20;
        long long v52 = v32;
        uint64_t v50 = *(void *)(v14 + 256);
        long long v53 = v33;
        char v54 = *(unsigned char *)(v14 + 312);
        long long v34 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v55 = *(void *)(v14 + 320);
        long long v56 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v57 = *v28;
        uint64_t v58 = *v29;
        char v59 = *(unsigned char *)(v14 + 360);
        sub_100042878(a4, (uint64_t)&v60, (uint64_t)&v47);
        if (v56) {
          sub_100004944(v56);
        }
        if (v48) {
          sub_100004944(v48);
        }
        if (v69) {
          sub_100004944(v69);
        }
        if (v61) {
          sub_100004944(v61);
        }
        if (v82) {
          sub_100004944(v82);
        }
        if (v74) {
          sub_100004944(v74);
        }
        return;
      }
      if (v82) {
        sub_100004944(v82);
      }
      if (v74) {
        sub_100004944(v74);
      }
      unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
      unint64_t v12 = *(void *)a2;
      unint64_t v6 = *(void *)(a1 + 24);
      char v11 = v7 & 2;
    }
    if (v11) {
      unint64_t v35 = v12;
    }
    else {
      unint64_t v35 = v12 + 1;
    }
    unint64_t v36 = v35 - v6;
    if (v35 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v37 < v12) {
            goto LABEL_70;
          }
        }
        else
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v12 >= v37)
          {
LABEL_70:
            uint64_t v39 = qword_1001D3B40;
            goto LABEL_71;
          }
        }
      }
      else
      {
        unint64_t v37 = *(void *)(a2 + 8);
        if (v12 >= v37 || v12 + 1 >= v37) {
          goto LABEL_70;
        }
      }
      uint64_t v39 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v37;
LABEL_71:
      unint64_t v40 = v39 + v35;
      uint64_t v41 = *(void *)(a1 + 48);
      if (*(void *)(a3 + 144) >= v40) {
        unint64_t v42 = v40;
      }
      else {
        unint64_t v42 = *(void *)(a3 + 144);
      }
      uint64_t v43 = a4;
      uint64_t v44 = a1;
      unint64_t v36 = 0;
LABEL_84:
      sub_1000414B8(v41, v44, v42, v36, v43);
      return;
    }
    if (v7)
    {
      if (v7 == 3)
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v38 < v12) {
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v12 >= v38)
        {
LABEL_79:
          uint64_t v45 = qword_1001D3B40;
          goto LABEL_80;
        }
      }
    }
    else
    {
      unint64_t v38 = *(void *)(a2 + 8);
      if (v12 >= v38 || v12 + 1 >= v38) {
        goto LABEL_79;
      }
    }
    uint64_t v45 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v38;
LABEL_80:
    unint64_t v46 = v45 + v35;
    uint64_t v41 = *(void *)(a1 + 48);
    if (*(void *)(a3 + 144) >= v46) {
      unint64_t v42 = v46;
    }
    else {
      unint64_t v42 = *(void *)(a3 + 144);
    }
    uint64_t v43 = a4;
    uint64_t v44 = a1;
    goto LABEL_84;
  }
  sub_100019864(a4, a3);
  sub_100019864(a4 + 160, a3);
}

void sub_1000423C8(_Unwind_Exception *a1)
{
  sub_10000371C(v1 - 248);
  _Unwind_Resume(a1);
}

void sub_1000423DC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(void *)(a3 + 144) >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)(a3 + 144);
  }
  sub_1000414B8(v6, a1, v7, a4, a5);
}

uint64_t sub_1000423F8(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + 64) = a3[1];
  long long v6 = *((_OWORD *)a3 + 1);
  long long v7 = *((_OWORD *)a3 + 2);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a3 + 48);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 112) = a3[7];
  uint64_t v8 = a3[8];
  *(void *)(a1 + 120) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 9);
  *(unsigned char *)(a1 + 152) = a4;
  uint64_t v9 = *a3;
  if (*a3 == *(void *)(a2 + 96) && a3[1] == *(void *)(a2 + 104) && a3[2] == *(void *)(a2 + 112))
  {
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + *(void *)(a2 + 192);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 8);
    long long v11 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)unint64_t v40 = v10;
    *(_OWORD *)&v40[16] = v11;
    long long v41 = *(_OWORD *)(a2 + 40);
    char v42 = *(unsigned char *)(a2 + 56);
    unint64_t v12 = *(std::__shared_weak_count **)(a2 + 72);
    uint64_t v43 = *(void *)(a2 + 64);
    uint64_t v44 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *a3;
    }
    long long v45 = *(_OWORD *)(a2 + 80);
    unint64_t v13 = a3[1];
    unint64_t v14 = a3[2];
    uint64_t v15 = (std::__shared_weak_count *)a3[8];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((void)v10 == v9 && *(_OWORD *)&v40[8] == __PAIR128__(v14, v13))
    {
      uint64_t v16 = 0;
    }
    else
    {
      int v17 = 0;
      do
      {
        sub_100042828((uint64_t)v40);
        unint64_t v18 = v44;
        if (v44)
        {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          int v19 = DWORD2(v45);
          sub_100004944(v18);
        }
        else
        {
          int v19 = DWORD2(v45);
        }
        v17 += v19;
        sub_100040CA0((uint64_t)v40);
      }
      while (*(void *)v40 != v9 || *(void *)&v40[8] != v13 || *(void *)&v40[16] != v14);
      uint64_t v16 = v17;
    }
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + v16;
    if (v15) {
      sub_100004944(v15);
    }
    if (v44) {
      sub_100004944(v44);
    }
    long long v22 = *(std::__shared_weak_count **)(a2 + 216);
    v26[0] = *(void *)(a2 + 208);
    v26[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v27[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)(a2 + 233);
    uint64_t v28 = *(void *)(a2 + 256);
    long long v29 = *(_OWORD *)(a2 + 264);
    char v32 = *(unsigned char *)(a2 + 312);
    long long v30 = *(_OWORD *)(a2 + 280);
    long long v31 = *(_OWORD *)(a2 + 296);
    BOOL v23 = *(std::__shared_weak_count **)(a2 + 328);
    uint64_t v33 = *(void *)(a2 + 320);
    long long v34 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v35 = *(_OWORD *)(a2 + 336);
    uint64_t v36 = *(void *)(a2 + 352);
    char v37 = *(unsigned char *)(a2 + 360);
    sub_100040FB8((void *)a1, (uint64_t)v26, (uint64_t)&v38);
    char v24 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v38;
    if (v24) {
      sub_100004944(v24);
    }
    *(_OWORD *)(a1 + 16) = v39[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v39 + 9);
    if (v23) {
      sub_100004944(v23);
    }
    if (v22) {
      sub_100004944(v22);
    }
  }
  return a1;
}

void sub_1000426C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000371C((uint64_t)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (v11) {
    sub_100004944(v11);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12) {
    sub_100004944(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004270C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 48) + 200);
}

uint64_t sub_100042718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = *(void *)(a2 + 144) - a3;
  if (v6 <= a4) {
    unint64_t v6 = a4;
  }
  if (v6 < a5) {
    a5 = v6;
  }
  return sub_100041208(a6, a1 + 56, a2 + 56, a3, a5, *(unsigned char *)(*(void *)(a1 + 48) + 200));
}

BOOL sub_100042754(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 144);
  return v4 > a3 || *(void *)(a2 + 144) - v4 < a4;
}

void *sub_100042770@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v9 = v11;
  v11[0] = v5;
  v11[1] = v4;
  _OWORD v11[2] = v7;
  long long v10 = xmmword_10016E380;
  sub_10004295C(a2, &v9, v6, a1[2]);
  return sub_100004A50(&v9);
}

void sub_100042814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100004A50((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_100042828(uint64_t a1)
{
  sub_100040B7C(a1, 1, (uint64_t)&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v4;
  if (v2) {
    sub_100004944(v2);
  }
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

__n128 sub_100042878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a3 + 25);
  *(_OWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 208) = *(void *)(a3 + 48);
  *(void *)(a1 + 216) = *(void *)(a3 + 56);
  *(void *)(a1 + 224) = *(void *)(a3 + 64);
  long long v8 = *(_OWORD *)(a3 + 72);
  long long v9 = *(_OWORD *)(a3 + 88);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a3 + 104);
  *(_OWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a3 + 112);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  __n128 result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a1 + 288) = result;
  uint64_t v11 = *(void *)(a3 + 144);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a3 + 152);
  *(void *)(a1 + 304) = v11;
  return result;
}

uint64_t *sub_10004295C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10001A580((uint64_t)a1, a2);
  uint64_t v8 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v9 = v15 + 24 * v8;
  uint64_t v10 = a1[19];
  unint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  unint64_t v12 = &v13[v10];
  sub_100041340(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_1000429DC(_Unwind_Exception *a1)
{
  sub_10001A62C(v1);
  _Unwind_Resume(a1);
}

void sub_1000431B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    int v25 = [v24 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v25 error:v23];

    objc_end_catch();
    JUMPOUT(0x100043178);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100043280(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100043290(uint64_t a1)
{
}

void sub_100043298(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

void sub_100043670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    int v19 = [v18 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v19 error:v17];

    objc_end_catch();
    JUMPOUT(0x100043638);
  }
  _Unwind_Resume(exception_object);
}

id sub_100043720(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10004376C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v2 = (unint64_t)(*(void *)(*(void *)(a2 + 560) + 120) + *(void *)(*(void *)(a2 + 560) + 128) - 1)
     / *(void *)(*(void *)(a2 + 560) + 128);
  sub_100080BC8();
}

void sub_100043884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100045DD8((uint64_t *)va);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 16))(a6);
  }
  _Unwind_Resume(a1);
}

void sub_100043920(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100004944(v3);
      }
      sub_1001498F0((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      id v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100004944(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_100043A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100004944(v12);
  }
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100043A58(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = off_1001A31A8;
  *(void *)(a1 + 32) = off_1001A31D8;
  *(void *)(a1 + 40) = off_1001A3208;
  *(void *)(a1 + 48) = off_1001A3238;
  *(void *)a1 = off_1001A3E90;
  *(void *)(a1 + 8) = off_1001A3ED8;
  *(void *)(a1 + 16) = off_1001A3F20;
  *(void *)(a1 + 24) = off_1001A3F68;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A3FB0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A3FF8;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A4040;
  *(void *)a1 = off_1001A3C68;
  *(void *)(a1 + 8) = off_1001A3CB0;
  *(void *)(a1 + 16) = off_1001A3CF8;
  *(void *)(a1 + 24) = off_1001A3D40;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001A3D88;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001A3DD0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001A3E18;
  *(void *)(a1 + 56) = off_1001A40A0;
  *(void *)(a1 + 8) = off_1001A40F8;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = off_1001A41E8;
  *(void *)(a1 + 24) = off_1001A4240;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_100044190((uint64_t *)(a1 + 152), (uint64_t *)&off_1001A3BE8, a2);
  *(void *)a1 = off_1001A37B0;
  *(void *)(a1 + 8) = off_1001A37F8;
  *(void *)(a1 + 16) = off_1001A3840;
  *(void *)(a1 + 24) = off_1001A3888;
  *(void *)(a1 + 32) = off_1001A38D0;
  *(void *)(a1 + 40) = off_1001A3918;
  *(void *)(a1 + 48) = off_1001A3960;
  *(void *)(a1 + 56) = off_1001A39C0;
  *(void *)(a1 + 120) = off_1001A3A30;
  *(void *)(a1 + 152) = off_1001A3AA0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112) + 8) = (*(uint64_t (**)(void))(**(void **)(a2 + 560)
                                                                                               + 40))(*(void *)(a2 + 560));
  sub_10004376C(a1, a2);
}

void sub_100044138(_Unwind_Exception *a1)
{
  if (v1) {
    sub_100004944(v1);
  }
  sub_10003DE58(v2, (uint64_t *)&off_1001A3BE8);
  sub_10003DFE0(v3, (uint64_t *)&off_1001A3BC8);
  _Unwind_Resume(a1);
}

uint64_t *sub_100044190(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_1001A3688;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0;
  a1[2] = 0;
  id v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136));
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, v10);
  CFStringRef v9 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v7 = v9;
  }
  a1[1] = (uint64_t)v7;
  CFStringRef v9 = 0;
  sub_10004044C((const void **)&v9);
  sub_1000409DC((const void **)&v10);
  return a1;
}

void sub_100044348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_10004044C(&a9);
  sub_1000409DC(&a10);
  sub_10004044C((const void **)(v10 + 24));
  sub_10004044C((const void **)(v10 + 16));
  sub_10004044C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100044390(uint64_t a1)
{
  *(void *)(a1 + 152) = off_1001A4330;
  *(void *)(a1 + 48) = off_1001A4388;
  sub_10004044C((const void **)(a1 + 176));
  sub_10004044C((const void **)(a1 + 168));
  sub_10004044C((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_1001A41E8;
  *(void *)(a1 + 24) = off_1001A4240;
  sub_10004044C((const void **)(a1 + 144));
  return a1;
}

void sub_100044454(uint64_t a1)
{
  *(void *)(a1 + 152) = off_1001A4330;
  *(void *)(a1 + 48) = off_1001A4388;
  sub_10004044C((const void **)(a1 + 176));
  sub_10004044C((const void **)(a1 + 168));
  sub_10004044C((const void **)(a1 + 160));
  *(void *)(a1 + 120) = off_1001A41E8;
  *(void *)(a1 + 24) = off_1001A4240;
  sub_10004044C((const void **)(a1 + 144));
  operator delete();
}

const void **sub_100044538@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  sub_10003E914(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  CFStringRef v9 = 0;
  sub_10000D758(&v9);
  sub_10003ECB0(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  CFStringRef v9 = 0;
  sub_10000D758(&v9);
  sub_10003F660((void *)(a1 + *(void *)(*(void *)a1 - 128)), &v9);
  v10[8] = @"Identity Info";
  v10[9] = v9;
  CFStringRef v9 = 0;
  sub_10000D758(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5;
  sub_100123438(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  long long v8 = 0;
  sub_1000055AC(&v8);
  for (uint64_t i = 9; i != -1; i -= 2)
    __n128 result = sub_100005614((const void **)&v10[i]);
  return result;
}

void sub_1000446F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72; i != -8; i -= 16)
    sub_100005614((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_100044738()
{
  return @"UDSB";
}

const void **sub_100044744(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100044824(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10004491C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000449FC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100044AF4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100044BD4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100044CCC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100044DAC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100044EA4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100044F84(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10004507C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_10004515C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_100045254(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100045334(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10004542C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100044538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100045448()
{
  return @"UDSB";
}

const void **sub_100045454(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100045534(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10004562C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100044538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100045648()
{
  return @"UDSB";
}

const void **sub_100045654(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_100045734(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 19) = off_1001A4330;
  *((void *)v1 + 6) = off_1001A4388;
  sub_10004044C((const void **)v1 + 22);
  sub_10004044C((const void **)v1 + 21);
  sub_10004044C((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001A41E8;
  *((void *)v1 + 3) = off_1001A4240;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_10004582C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100044538((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_100045848()
{
  return @"UDSB";
}

void sub_100045858()
{
}

__n128 sub_10004586C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1001A44A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1000458C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001A44A0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100045908(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**(void **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)&v12);
    sub_1000039A0(&v12, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_1000039A0(&v12, v10, v11);
    sub_1000039A0(&v12, (uint64_t)")", 1);
    sub_10000550C((uint64_t)exception, (uint64_t)&v12, 0x16u);
  }
  uint64_t v4 = *(void **)(result + 16);
  if (*v4) {
    sub_100145FEC((uint64_t)&v12, *(void *)(result + 24) + 24, *a3, v4);
  }
  uint64_t v5 = *(void *)(result + 24);
  if ((unint64_t)(*(void *)(*(void *)(v5 + 560) + 120) + *(void *)(*(void *)(v5 + 560) + 128) - 1)
     / *(void *)(*(void *)(v5 + 560) + 128)
     - 1 == v3)
    uint64_t v6 = *(void *)(*(void *)(result + 40) + *(void *)(**(void **)(result + 40) - 112) + 8)
       - *(void *)(v5 + 64) * v3;
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  **(void **)(result + 32) += v6;
  return result;
}

void sub_100045AF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_100045D7C()
{
}

uint64_t sub_100045D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100045DCC()
{
}

void *sub_100045DD8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100045F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000465A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100046DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000471C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004730C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000473DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000474E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000484D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000485C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000487B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100048AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100049294(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }

  if (a2 == 1)
  {
    uint64_t v17 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v17 error:v12];

    objc_end_catch();
    JUMPOUT(0x100048CF0);
  }
  _Unwind_Resume(a1);
}

void sub_100049674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    sub_100004944(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000496D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v11 = a2;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v11);
  if (v12) {
    sub_100004944(v12);
  }
  return v9;
}

void sub_100049774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000498D4()
{
}

void sub_100049A74(_Unwind_Exception *a1)
{
  if (v2) {
    sub_100004944(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100049E90(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(unsigned char *)(a1 + 564) = 1;
  }
  return a1;
}

void sub_10004A0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A1E8()
{
}

void *sub_10004A1FC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_1001A4530;
  return result;
}

void sub_10004A234(uint64_t a1, void *a2)
{
  *a2 = off_1001A4530;
}

void sub_10004A25C(uint64_t a1, void **a2)
{
}

uint64_t sub_10004A264(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001A45A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10004A2A4()
{
  return &off_1001A45A0;
}

uint64_t sub_10004A2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_10004A330(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10004A3B4(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *__n128 result = a2;
  if (v3) {
    return (uint64_t *)sub_10004A3E4((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_10004A3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

int64_t sub_10004A438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t result = sub_100003758(*(void *)(a1 + 16));
  v11[0] = result;
  v11[1] = v6;
  if (result <= 0)
  {
    if ((int)result >= 0) {
      uint64_t v10 = result;
    }
    else {
      uint64_t v10 = -(int)result;
    }
    return -v10;
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 144);
    unint64_t v8 = (*(void *)(a3 + 144) - v7) & ~((uint64_t)(*(void *)(a3 + 144) - v7) >> 63);
    if (v7 > v6 || v8 < result) {
      return sub_10014BA1C(a2, a3, v8, v11);
    }
  }
  return result;
}

unint64_t sub_10004A4B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  if (!*(unsigned char *)(a1 + 56))
  {
    if (!a2[6]
      || (uint64_t v7 = *(void *)(a4 + 144) - *(void *)(a3 + 144),
          *(void *)(a4 + 72) - *(void *)(a3 + 72) >= (v7 & (unint64_t)~(v7 >> 63)) + a2[8]))
    {
      sub_100003758(a2[2]);
    }
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v71 = *(void **)a3;
  char v72 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v73 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v73[9] = *(_OWORD *)(a3 + 25);
  uint64_t v74 = *(void *)(a3 + 48);
  long long v75 = *(_OWORD *)(a3 + 56);
  long long v76 = *(_OWORD *)(a3 + 72);
  long long v77 = *(_OWORD *)(a3 + 88);
  char v78 = *(unsigned char *)(a3 + 104);
  uint64_t v9 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v79 = *(void *)(a3 + 112);
  char v80 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a3 + 144);
  uint64_t v10 = a3 + 144;
  long long v81 = *(_OWORD *)(v10 - 16);
  uint64_t v82 = v11;
  char v83 = *(unsigned char *)(v10 + 8);
  if (((*(void *)(v4 + 144) - v11) & (unint64_t)~((*(void *)(v4 + 144) - v11) >> 63)) + v6[8] <= *(void *)&v73[16])
  {
    unint64_t v12 = sub_10004A438((uint64_t)v6, (uint64_t)&v71, v4);
    sub_100041B0C((uint64_t)&v71, v12);
    int64_t v13 = v12;
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v14 = *(void *)(v4 + 144);
  if (v12 == ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)))
  {
    int64_t v13 = v12;
    goto LABEL_107;
  }
  unint64_t v46 = v6;
  uint64_t v43 = v10;
  do
  {
    unint64_t v48 = v12;
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 72);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *(void *)(v4 + 144);
    }
    uint64_t v17 = (char *)v6[3];
    char v16 = (char *)v6[4];
    uint64_t v18 = v82;
    unint64_t v19 = (unint64_t)(v16 - v17 - 8) >> 3;
    if (v16 == v17) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = v19 + 1;
    }
    unint64_t v21 = (v14 - v82) & ~((v14 - v82) >> 63);
    uint64_t v22 = v6[6];
    if (v6[7] * v22 >= v21) {
      unint64_t v23 = v21;
    }
    else {
      unint64_t v23 = v6[7] * v22;
    }
    long long __p = v105;
    long long v104 = xmmword_10016E390;
    uint64_t v47 = v23;
    if (v20 < 6)
    {
      if (v17 != v16)
      {
        unint64_t v32 = v19 + 1;
        uint64_t v33 = v105;
        do
        {
          uint64_t v34 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          void *v33 = v34;
          v33[1] = v15;
          v17 += 8;
          _OWORD v33[2] = v22;
          v33 += 3;
          --v32;
        }
        while (v32);
        unint64_t v12 = v48;
        goto LABEL_49;
      }
      unint64_t v20 = 0;
    }
    else
    {
      uint64_t v44 = v82;
      if (v20 >= 0x555555555555556) {
        sub_10001A67C("get_next_capacity, allocator's max size reached");
      }
      uint64_t v24 = v4;
      int v25 = operator new(24 * v20);
      uint64_t v26 = __p;
      if (__p)
      {
        uint64_t v27 = v104;
        if ((void)v104)
        {
          uint64_t v28 = (std::__shared_weak_count **)((char *)__p + 8);
          do
          {
            if (*v28) {
              sub_100004944(*v28);
            }
            v28 += 3;
            --v27;
          }
          while (v27);
        }
        *(void *)&long long v104 = 0;
        uint64_t v10 = v43;
        if (v105 != v26) {
          operator delete(v26);
        }
      }
      *((void *)&v104 + 1) = v20;
      long long __p = v25;
      *(void *)&long long v104 = 0;
      if (v17 == v16)
      {
        uint64_t v31 = 0;
        long long v29 = (char *)v25;
        uint64_t v4 = v24;
        unint64_t v6 = v46;
        uint64_t v18 = v44;
      }
      else
      {
        long long v29 = (char *)v25;
        uint64_t v4 = v24;
        unint64_t v6 = v46;
        uint64_t v18 = v44;
        do
        {
          uint64_t v30 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)long long v29 = v30;
          *((void *)v29 + 1) = v15;
          *((void *)v29 + 2) = v22;
          v17 += 8;
          v29 += 24;
        }
        while (v17 != v16);
        uint64_t v31 = v104;
      }
      unint64_t v20 = v31 - 0x5555555555555555 * ((v29 - (unsigned char *)v25) >> 3);
    }
    unint64_t v12 = v48;
LABEL_49:
    *(void *)&long long v104 = v20;
    uint64_t v106 = (unint64_t *)&v108;
    long long v107 = xmmword_10016E390;
    sub_10001AA14((uint64_t)&v106, v20);
    uint64_t v86 = __p;
    long long __dst = (char *)__p + 24 * v104;
    unint64_t v62 = v106;
    *(void *)&long long v84 = &v106[v107];
    sub_100041340((uint64_t)v109, (uint64_t *)&v86, (uint64_t *)&__dst, &v62, (unint64_t **)&v84, v18, v47);
    sub_1000414AC((uint64_t)v109, (uint64_t)&v86);
    sub_1000411FC((uint64_t)v109, (uint64_t)&__dst);
    int64_t v13 = sub_10004A438((uint64_t)v6, (uint64_t)&v86, (uint64_t)&__dst);
    if (v99) {
      sub_100004944(v99);
    }
    if (v91) {
      sub_100004944(v91);
    }
    if (v88) {
      sub_100004944(v88);
    }
    if (v87) {
      sub_100004944(v87);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      goto LABEL_103;
    }
    sub_1000414AC((uint64_t)v109, (uint64_t)&__src);
    sub_1000411FC((uint64_t)v109, (uint64_t)&v62);
    long long v35 = v71;
    uint64_t v49 = v71;
    uint64_t v50 = v72;
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v51[0] = *(_OWORD *)v73;
    *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)&v73[9];
    uint64_t v52 = v74;
    long long v53 = v75;
    long long v54 = v76;
    long long v55 = v77;
    char v56 = v78;
    uint64_t v57 = v79;
    uint64_t v58 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v59 = v81;
    uint64_t v60 = v82;
    char v61 = v83;
    long long __dst = v35;
    uint64_t v91 = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v97 = v56;
    uint64_t v93 = v52;
    uint64_t v98 = v57;
    *(_OWORD *)uint64_t v92 = v51[0];
    *(_OWORD *)&v92[9] = *(_OWORD *)((char *)v51 + 9);
    long long v94 = v53;
    long long v95 = v54;
    long long v96 = v55;
    size_t v99 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v36 = 0;
    long long v100 = v59;
    uint64_t v101 = v60;
    char v102 = 0;
    while (!sub_1000410B8((uint64_t)&__src, (uint64_t)&v62))
    {
      sub_100042828((uint64_t)&v68);
      char v37 = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v70)
      {
        sub_100041D84((uint64_t)&__src);
        int v40 = 2;
        if (!v37) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      unint64_t v38 = *(void *)&v92[16];
      if (v67 < *(void *)&v92[16]) {
        unint64_t v38 = v67;
      }
      if (v38 >= v70) {
        int64_t v39 = v70;
      }
      else {
        int64_t v39 = v38;
      }
      memmove(__dst, __src, v39);
      if (v39 <= 0)
      {
        *(void *)&long long v84 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
        *((void *)&v84 + 1) = 97;
        int v85 = 16;
        sub_10004C3C4(&v86, &v84);
        sub_1000039A0(v89, (uint64_t)"IO error with sg: ", 18);
        sub_100149114(v89);
        sub_1000039A0(v89, (uint64_t)" dest ", 6);
        sub_100149114(v89);
        sub_1000039A0(v89, (uint64_t)" returned status ", 17);
        std::ostream::operator<<();
        std::ostream::~ostream();
        sub_10004C5BC((uint64_t)&v86);
        std::ios::~ios();
        int v40 = 1;
        if (!v37) {
          goto LABEL_79;
        }
LABEL_78:
        sub_100004944(v37);
        goto LABEL_79;
      }
      sub_100041B0C((uint64_t)&__src, v39);
      sub_100041C48((uint64_t)&__dst, v39);
      int v40 = 0;
      v36 += v39;
      if (v37) {
        goto LABEL_78;
      }
LABEL_79:
      if ((v40 | 2) != 2) {
        goto LABEL_86;
      }
    }
    sub_100041C48((uint64_t)&v49, v36);
LABEL_86:
    if (v99) {
      sub_100004944(v99);
    }
    if (v91) {
      sub_100004944(v91);
    }
    if (v58) {
      sub_100004944(v58);
    }
    if (v50) {
      sub_100004944(v50);
    }
    if (v64) {
      sub_100004944(v64);
    }
    if (v63) {
      sub_100004944(v63);
    }
    if (v69) {
      sub_100004944(v69);
    }
    if (v66) {
      sub_100004944(v66);
    }
    sub_100041B0C((uint64_t)&v71, v13);
    sub_100040F70(&v75);
    v12 += v13;
LABEL_103:
    sub_1000049B8(&__p);
    if (v15) {
      sub_100004944(v15);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      break;
    }
    uint64_t v14 = *(void *)(v4 + 144);
    unint64_t v6 = v46;
  }
  while (v12 != ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)));
LABEL_107:
  if (v80) {
    sub_100004944(v80);
  }
  if (v72) {
    sub_100004944(v72);
  }
  if (v13 < 0) {
    int v41 = v13;
  }
  else {
    int v41 = 0;
  }
  if (v41 >= 0) {
    return v12;
  }
  else {
    return v41;
  }
}

void sub_10004AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v58) {
    sub_100004944(v58);
  }
  sub_10000371C((uint64_t)&STACK[0x580]);
  sub_10000371C((uint64_t)&a37);
  sub_10000371C((uint64_t)&a57);
  sub_10000371C((uint64_t)&STACK[0x220]);
  sub_1000049B8(&STACK[0x620]);
  if (v57) {
    sub_100004944(v57);
  }
  sub_10000371C((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10004AE84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void *sub_10004AEAC(void *a1)
{
  *a1 = off_1001A45C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_10004AEF8(void *a1)
{
  *a1 = off_1001A45C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[9];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

uint64_t sub_10004AF64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_10004AF8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_10004AFB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_10004AFDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_10004B004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), a2, *(void *)(a3 + 16));
}

uint64_t sub_10004B030(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16))) {
    operator new();
  }
  return 0;
}

void sub_10004B0F8()
{
}

uint64_t sub_10004B15C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  return sub_10004B83C((uint64_t)&v4, a3);
}

uint64_t sub_10004B188(uint64_t a1, uint64_t a2)
{
  return sub_10001494C(*(void **)(a2 + 16));
}

uint64_t sub_10004B194(uint64_t a1, uint64_t a2)
{
  return sub_10004B95C(*(void **)(a2 + 16));
}

void sub_10004B1A4()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_10004B1D8(void *result, uint64_t a2, uint64_t *a3)
{
  *int64_t result = off_1001A46A8;
  result[1] = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  result[3] = 0;
  result[2] = v3;
  result[4] = 0;
  result[5] = 0;
  unint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  result[7] = v4 + 1;
  result[8] = v5;
  unint64_t v6 = v5 + v4;
  result[6] = v6 / (v4 + 1);
  if (v4 < v6) {
    operator new[]();
  }
  return result;
}

void sub_10004B358()
{
}

uint64_t sub_10004B3D4(uint64_t a1)
{
  *(void *)a1 = off_1001A46A8;
  unint64_t v4 = (void **)(a1 + 24);
  sub_10004B784(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

void sub_10004B45C(uint64_t a1)
{
  *(void *)a1 = off_1001A46A8;
  uint64_t v3 = (void **)(a1 + 24);
  sub_10004B784(&v3);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  operator delete();
}

uint64_t sub_10004B4F8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004B5C0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_10004B570()
{
}

void *sub_10004B588(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10004B1A4();
  }
  return operator new(8 * a2);
}

uint64_t sub_10004B5C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10004B658((uint64_t)v13);
  return v11;
}

uint64_t sub_10004B658(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10004B690(a1);
  }
  return a1;
}

uint64_t sub_10004B690(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      operator delete[]();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_10004B6E8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004B720(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete[]();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_10004B784(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10004B7D8((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10004B7D8(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      operator delete[]();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_10004B83C(uint64_t a1, uint64_t *a2)
{
  sub_100042770(a2, v11);
  sub_1000414AC((uint64_t)v12, (uint64_t)v8);
  sub_1000411FC((uint64_t)v12, (uint64_t)v5);
  uint64_t v3 = sub_100004AC0(*(void **)(*(void *)a1 + 16));
  if (v7) {
    sub_100004944(v7);
  }
  if (v6) {
    sub_100004944(v6);
  }
  if (v10) {
    sub_100004944(v10);
  }
  if (v9) {
    sub_100004944(v9);
  }
  sub_1000049B8(v11);
  return v3;
}

void sub_10004B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_10004B95C(void *a1)
{
  if (*(unsigned char *)(a1[1] + 8))
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v3 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
      *((void *)&v3 + 1) = 25;
      int v4 = 2;
      sub_10004BA58(v5, &v3);
      sub_1000039A0(v6, (uint64_t)"Disk image is terminated, skipping unmap", 40);
      std::ostream::~ostream();
      sub_10004BC50((uint64_t)v5);
      std::ios::~ios();
    }
    return 4294967290;
  }
  else
  {
    uint64_t v1 = *(uint64_t (**)(void))(*a1 + 16);
    return v1();
  }
}

void sub_10004BA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10004BB7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004BA58(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10004BBC0((uint64_t)a1, a2);
  *a1 = off_1001A4708;
  a1[45] = &off_1001A4808;
  a1[46] = &off_1001A4830;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A4708;
  a1[45] = off_1001A4790;
  a1[46] = off_1001A47B8;
  return a1;
}

void sub_10004BB58(_Unwind_Exception *a1)
{
  sub_10004BC50(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004BB7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004BBC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A48A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10004BC3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004BC50(uint64_t a1)
{
  *(void *)a1 = off_1001A48A0;
  sub_10004C058(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10004BD8C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10004BC50(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004BDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10004BE2C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10004BE94(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004BC50(v1);
  return std::ios::~ios();
}

void sub_10004BEE0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004BC50(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004BF44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004BC50(v1);
  return std::ios::~ios();
}

void sub_10004BFA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004BC50(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10004C020(uint64_t a1)
{
  sub_10004BC50(a1);
  operator delete();
}

uint64_t sub_10004C058(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10004C1DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10004C1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004C1DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 173;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 173;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10004C3C4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004C52C((uint64_t)a1, a2);
  *a1 = off_1001A4928;
  a1[45] = &off_1001A4A28;
  a1[46] = &off_1001A4A50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A4928;
  a1[45] = off_1001A49B0;
  a1[46] = off_1001A49D8;
  return a1;
}

void sub_10004C4C4(_Unwind_Exception *a1)
{
  sub_10004C5BC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004C4E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004C52C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A4AC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10004C5A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10004C5BC(uint64_t a1)
{
  *(void *)a1 = off_1001A4AC0;
  sub_10004C9C4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10004C6F8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10004C5BC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004C760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10004C798(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10004C800(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004C5BC(v1);
  return std::ios::~ios();
}

void sub_10004C84C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004C5BC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004C8B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004C5BC(v1);
  return std::ios::~ios();
}

void sub_10004C910(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004C5BC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10004C98C(uint64_t a1)
{
  sub_10004C5BC(a1);
  operator delete();
}

uint64_t sub_10004C9C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10004CB48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10004CB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10004CB48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 615;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 615;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10004CD30()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001D4780, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned __int8 v2 = &v3;
    std::__call_once(&qword_1001D4780, &v2, (void (__cdecl *)(void *))sub_10004CF14);
  }
  return dword_1001D4788;
}

uint64_t sub_10004CD98()
{
  return 2 * sub_10004CD30();
}

uint64_t (**sub_10004CDB8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D4798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D4798))
  {
    qword_1001D4790 = (unint64_t)(sub_10004CE60() + 0x3FFFFFFF) >> 30;
    __cxa_guard_release(&qword_1001D4798);
  }
  int v0 = (uint64_t (**)())&unk_10016FD18;
  if ((unint64_t)qword_1001D4790 > 3) {
    int v0 = &off_1001A4B58;
  }
  if ((unint64_t)qword_1001D4790 <= 8) {
    return v0;
  }
  else {
    return &off_1001A4B30;
  }
}

void sub_10004CE48(_Unwind_Exception *a1)
{
}

uint64_t sub_10004CE60()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001D47A0, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned __int8 v2 = &v3;
    std::__call_once(&qword_1001D47A0, &v2, (void (__cdecl *)(void *))sub_10004CEC8);
  }
  return qword_1001D47A8;
}

uint64_t sub_10004CEC8()
{
  size_t v1 = 8;
  uint64_t v2 = 0;
  uint64_t result = sysctlbyname("hw.memsize", &v2, &v1, 0, 0);
  qword_1001D47A8 = v2;
  return result;
}

uint64_t sub_10004CF14()
{
  int v2 = 1;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  dword_1001D4788 = v2;
  return result;
}

void sub_10004CF68(void *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (*a2 == 4) {
    sub_100051E80((uint64_t)&v4, a1, &v3);
  }
  sub_100052028((uint64_t)&v4, a1, a2, &v3);
}

void sub_10004CFD8(void *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  char v6 = sub_10004D088(a1, a2);
  void *v6 = off_1001A4B90;
  *((_DWORD *)v6 + 10) = *a3;
  v6[6] = a4;
  operator new[]();
}

void sub_10004D074(_Unwind_Exception *a1)
{
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

void *sub_10004D088(void *a1, void *a2)
{
  uint64_t result = sub_100149398(a1);
  *uint64_t result = off_1001A4E78;
  uint64_t v4 = a2[1];
  result[3] = *a2;
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_10004D0E4(void *a1)
{
  *a1 = off_1001A4E78;
  int v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10004D13C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_10004D088(a1, a3);
  *uint64_t v4 = off_1001A4B90;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 40);
  void v4[6] = *(void *)(a2 + 48);
  operator new[]();
}

void sub_10004D1DC(_Unwind_Exception *a1)
{
  sub_10004D0E4(v1);
  _Unwind_Resume(a1);
}

void *sub_10004D1F0(void *a1)
{
  *a1 = off_1001A4B90;
  sub_10004F020((uint64_t)(a1 + 9));
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1001A4E78;
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_10004D290(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  if (v4 != a1[7])
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v4 = a1[7];
  }
  uint64_t v5 = sub_1000496D0(a1[3], v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
    *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
    *((void *)&v10 + 1) = 27;
    int v11 = 16;
    sub_10004D4D4(v12, &v10);
    sub_1000039A0(v13, (uint64_t)"Internal backend read() failed. ret=", 36);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24)));
    uint64_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10004F32C((uint64_t)v12);
    std::ios::~ios();
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, a1[7]);
    if (v6)
    {
      return v6;
    }
    else
    {
      *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
      *((void *)&v10 + 1) = 27;
      int v11 = 16;
      sub_10004D63C(v12, &v10);
      sub_1000039A0(v13, (uint64_t)"Decompression failed", 20);
      std::ostream::~ostream();
      sub_10004FAA0((uint64_t)v12);
      std::ios::~ios();
      return 4294967291;
    }
  }
  return v7;
}

void sub_10004D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10004D760((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004D4D4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000521C4((uint64_t)a1, a2);
  *a1 = off_1001A4F48;
  a1[45] = &off_1001A5048;
  a1[46] = &off_1001A5070;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A4F48;
  a1[45] = off_1001A4FD0;
  a1[46] = off_1001A4FF8;
  return a1;
}

void sub_10004D5D4(_Unwind_Exception *a1)
{
  sub_10004F32C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004D5F8(uint64_t a1)
{
  return a1;
}

void *sub_10004D63C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100052254((uint64_t)a1, a2);
  *a1 = off_1001A5168;
  a1[45] = &off_1001A5268;
  a1[46] = &off_1001A5290;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5168;
  a1[45] = off_1001A51F0;
  a1[46] = off_1001A5218;
  return a1;
}

void sub_10004D73C(_Unwind_Exception *a1)
{
  sub_10004FAA0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004D760(uint64_t a1)
{
  return a1;
}

unint64_t sub_10004D7A4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + 2;
  unint64_t v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v6 = a1[8];
    unint64_t v8 = *v7;
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((void *)sub_10014B860() + 1);
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)__int16 v22 = v8;
  *(void *)&v22[8] = v10;
  *(void *)&v22[16] = v8;
  v22[24] = 0;
  (*(void (**)(void *__return_ptr, uint64_t, long long *))(*(void *)v9 + 128))(v28, v9, &v21);
  if (*((void *)&v21 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v21 + 1));
  }
  if (!BYTE4(v28[0]) && !v28[4]) {
    return sub_10001CB94(a3, (uint64_t)v28);
  }
  LOBYTE(v21) = 0;
  BYTE4(v21) = 0;
  *((void *)&v21 + 1) = 0;
  *(void *)__int16 v22 = sub_100148BF8((unint64_t)&v21);
  uint64_t v13 = sub_100148CC4((unint64_t)&v21);
  long long v29 = &v21;
  *(void *)&v22[8] = v13;
  *(void *)&v22[16] = &v29;
  sub_10001CB94((unint64_t)v26, (uint64_t)&v21);
  std::locale v14 = v29;
  uint64_t v27 = v29;
  *((void *)v29 + 4) = &v27;
  uint64_t v15 = a2[1];
  *(void *)&long long v21 = *a2;
  *((void *)&v21 + 1) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    std::locale v14 = v27;
  }
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)__int16 v22 = *(_OWORD *)v7;
  unint64_t v23 = v14;
  uint64_t v27 = 0;
  *((void *)v14 + 4) = &v23;
  sub_10001CB94((unint64_t)v24, (uint64_t)v28);
  uint64_t v16 = a1[9];
  uint64_t v25 = a1[8];
  uint64_t v17 = a1[10];
  __int16 v18 = (_OWORD *)(v16 + 104 * v17);
  if (v17 == a1[11])
  {
    sub_1000522E4(a1 + 9, (void *)(v16 + 104 * v17), 1, (uint64_t)&v21, &v29);
  }
  else
  {
    _OWORD *v18 = v21;
    long long v21 = 0uLL;
    long long v19 = *(_OWORD *)v22;
    *(_OWORD *)((char *)v18 + 25) = *(_OWORD *)&v22[9];
    v18[1] = v19;
    __int16 v20 = (void *)(v16 + 104 * v17);
    v20[6] = v23;
    v20 += 6;
    unint64_t v23 = 0;
    *(void *)(*v20 + 32) = v20;
    sub_10001CB94((unint64_t)(v20 + 1), (uint64_t)v24);
    *(void *)(v16 + 104 * v17 + 96) = v25;
    ++a1[10];
  }
  if (v23) {
    *((void *)v23 + 4) = 0;
  }
  if (*((void *)&v21 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v21 + 1));
  }
  a1[8] += *v7;
  unint64_t result = sub_10001CB94(a3, (uint64_t)v26);
  if (v27) {
    *((void *)v27 + 4) = 0;
  }
  return result;
}

void sub_10004DA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15) {
    *(void *)(a15 + 32) = 0;
  }
  if (a10) {
    sub_100004944(a10);
  }
  if (a28) {
    *(void *)(a28 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_10004DACC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 144))(*(void *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v4 = v3 + 48;
    uint64_t v5 = 104 * v2;
    do
    {
      unsigned int v6 = sub_10001D688((unsigned int *)(v4 + 8));
      unsigned int v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v10 = v3 + 48;
        uint64_t v11 = *(unsigned int **)v4;
        *uint64_t v11 = v7;
        uint64_t v9 = v11 + 1;
      }
      else if (*(void *)(v4 - 32) <= (unint64_t)v6)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192))(a1, v4 - 48, *(void *)(v4 + 48));
        if (v12)
        {
          int v13 = v12;
          uint64_t v10 = v3 + 48;
          std::locale v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = v13;
        }
        else
        {
          *(void *)&long long v15 = "void CompressedBackend::run_futures()";
          *((void *)&v15 + 1) = 35;
          int v16 = 16;
          sub_10004DC90(v17, &v15);
          sub_1000039A0(v18, (uint64_t)"Decompression failed", 20);
          std::ostream::~ostream();
          sub_100050214((uint64_t)v17);
          std::ios::~ios();
          uint64_t v10 = v3 + 48;
          std::locale v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = -5;
        }
        uint64_t v9 = v14 + 1;
      }
      else
      {
        unint64_t v8 = *(unsigned int **)v4;
        unsigned int *v8 = -5;
        uint64_t v9 = v8 + 1;
        uint64_t v10 = v4;
      }
      *uint64_t v9 = 1;
      sub_10001CB20(v10);
      v3 += 104;
      v4 += 104;
      v5 -= 104;
    }
    while (v5);
  }
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  sub_1000527DC((void *)(a1 + 72));
}

void sub_10004DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10004DDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004DC90(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005274C((uint64_t)a1, a2);
  *a1 = off_1001A5388;
  a1[45] = &off_1001A5488;
  a1[46] = &off_1001A54B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5388;
  a1[45] = off_1001A5410;
  a1[46] = off_1001A5438;
  return a1;
}

void sub_10004DD90(_Unwind_Exception *a1)
{
  sub_100050214(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004DDB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004DDF8(uint64_t *a1, uint64_t a2)
{
  if (a1[8] != a1[7]) {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 184))(a1, a2);
  if (!v4) {
    return 4294967291;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_10004DFDC(a1[3], a1[7], v4, *(void *)(a2 + 24));
  if ((v6 & 0x80000000) == 0) {
    return v5;
  }
  uint64_t v7 = v6;
  *(void *)&long long v10 = "int CompressedBackend::write(const sg_entry &)";
  *((void *)&v10 + 1) = 28;
  int v11 = 16;
  sub_10004E098(v12, &v10);
  sub_1000039A0(v13, (uint64_t)"Internal backend write() failed. ret=", 37);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24)));
  unint64_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  sub_100050988((uint64_t)v12);
  std::ios::~ios();
  return v7;
}

void sub_10004DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::locale::~locale((std::locale *)(v5 - 40));
  sub_10004E1BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10004DFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::__shared_weak_count *)*((void *)sub_10014B860() + 1);
  uint64_t v11 = a2;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 96))(a1, &v11);
  if (v12) {
    sub_100004944(v12);
  }
  return v9;
}

void sub_10004E080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004E098(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005283C((uint64_t)a1, a2);
  *a1 = off_1001A55A8;
  a1[45] = &off_1001A56A8;
  a1[46] = &off_1001A56D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A55A8;
  a1[45] = off_1001A5630;
  a1[46] = off_1001A5658;
  return a1;
}

void sub_10004E198(_Unwind_Exception *a1)
{
  sub_100050988(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004E1BC(uint64_t a1)
{
  return a1;
}

void *sub_10004E200(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1000039A0(a2, (uint64_t)"Compressed(", 11);
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = sub_10004E260(v3, &v6);
  return sub_1000039A0(v4, (uint64_t)")", 1);
}

void *sub_10004E260(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  while (dword_1001A57B0[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 30)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return sub_1000039A0(a1, (uint64_t)v3, v4);
    }
  }
  uint64_t v5 = &dword_1001A57B0[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_1000039A0(a1, (uint64_t)v3, v4);
}

void sub_10004E2A4(void *a1, void *a2, int *a3, uint64_t a4)
{
  int v4 = *a3;
  sub_10004CFD8(a1, a2, &v4, a4);
}

void sub_10004E3A4(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[222];
  v1[222] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = v1[221];
  v1[221] = 0;
  if (v4) {
    operator delete[]();
  }
  sub_10004D1F0(v1);
  _Unwind_Resume(a1);
}

void sub_10004E414(void *a1, uint64_t a2, void *a3)
{
}

void sub_10004E4E0(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[222];
  v1[222] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = v1[221];
  v1[221] = 0;
  if (v4) {
    operator delete[]();
  }
  sub_10004D1F0(v1);
  _Unwind_Resume(a1);
}

size_t sub_10004E53C(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer(*(uint8_t **)a2, *(void *)(a2 + 32), a3, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t sub_10004E560(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer(*(uint8_t **)(a1 + 56), *(void *)(a2 + 16), *(const uint8_t **)a2, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

void sub_10004E584(uint64_t a1, void *a2)
{
  sub_1000528CC((uint64_t)&v2, a1, a2);
}

uint64_t sub_10004E5C8(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int destLen = *(void *)(a2 + 32);
  if (!BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0)) {
    return destLen;
  }
  *(void *)&long long v4 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((void *)&v4 + 1) = 40;
  int v5 = 16;
  sub_10004E6AC(v6, &v4);
  sub_1000039A0(v7, (uint64_t)"BZIP decompression failed, res=", 31);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100051228((uint64_t)v6);
  std::ios::~ios();
  return 0;
}

void sub_10004E698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10004E7D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004E6AC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000529A4((uint64_t)a1, a2);
  *a1 = off_1001A5840;
  a1[45] = &off_1001A5940;
  a1[46] = &off_1001A5968;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5840;
  a1[45] = off_1001A58C8;
  a1[46] = off_1001A58F0;
  return a1;
}

void sub_10004E7AC(_Unwind_Exception *a1)
{
  sub_100051228(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004E7D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004E814(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unsigned int destLen = v2;
  unint64_t v3 = v2 / 0x186A0;
  if ((int)(v2 / 0x186A0) >= 8) {
    LODWORD(v3) = 8;
  }
  int v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if (v4 != -8)
  {
    if (!v4) {
      return destLen;
    }
    *(void *)&long long v6 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((void *)&v6 + 1) = 38;
    int v7 = 16;
    sub_10004E92C(v8, &v6);
    sub_1000039A0(v9, (uint64_t)"BZIP compression failed, res=", 29);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10005199C((uint64_t)v8);
    std::ios::~ios();
  }
  return 0;
}

void sub_10004E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10004EA50((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004E92C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100052A34((uint64_t)a1, a2);
  *a1 = off_1001A5A60;
  a1[45] = &off_1001A5B60;
  a1[46] = &off_1001A5B88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5A60;
  a1[45] = off_1001A5AE8;
  a1[46] = off_1001A5B10;
  return a1;
}

void sub_10004EA2C(_Unwind_Exception *a1)
{
  sub_10005199C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10004EA50(uint64_t a1)
{
  return a1;
}

void sub_10004EA94(uint64_t a1, void *a2)
{
  sub_100052AC4((uint64_t)&v2, a1, a2);
}

void *sub_10004EAD8(void *a1)
{
  *a1 = off_1001A4C68;
  uint64_t v2 = a1[222];
  a1[222] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[221];
  a1[221] = 0;
  if (v3) {
    operator delete[]();
  }
  return sub_10004D1F0(a1);
}

void sub_10004EB6C(void *a1)
{
  sub_10004EAD8(a1);
  operator delete();
}

uint64_t sub_10004EBA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t sub_10004EBCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))();
}

uint64_t sub_10004EBF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_10004EC1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

uint64_t sub_10004EC44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

uint64_t sub_10004EC6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

void sub_10004EC94(void **a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 72))(&v2);
  ((void (*)(void **, uint64_t *))(*a1)[22])(a1, &v2);
  if (v3) {
    sub_100004944(v3);
  }
}

void sub_10004ED28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004ED40(void **a1)
{
  uint64_t v2 = (void *)((uint64_t (*)(void **))(*a1)[8])(a1);
  uint64_t v3 = sub_1000039A0(v2, (uint64_t)"(", 1);
  int v4 = (void *)(*(uint64_t (**)(void *, void *))(*a1[3] + 64))(a1[3], v3);
  return sub_1000039A0(v4, (uint64_t)")", 1);
}

uint64_t sub_10004EDDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160))();
}

void sub_10004EE04(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100003404((uint64_t)v3);
  sub_1000039A0(v3, (uint64_t)"Unexpected context construction by ", 35);
  sub_1001493BC((uint64_t)v3, a1);
  sub_10000550C((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_10004EE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (v26) {
    __cxa_free_exception(v24);
  }
  _Unwind_Resume(a1);
}

void sub_10004EF98(void *a1)
{
  sub_10004D1F0(a1);
  operator delete();
}

uint64_t sub_10004EFD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t sub_10004EFF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_10004F020(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      int v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        sub_100004944(v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004F09C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004F32C(v1);
  return std::ios::~ios();
}

uint64_t sub_10004F0E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004F32C(v1);
  return std::ios::~ios();
}

void sub_10004F148(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10004F32C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004F1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10004F1E8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10004F250(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004F32C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10004F2B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004F32C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004F32C(uint64_t a1)
{
  *(void *)a1 = off_1001A50E0;
  sub_10004F468(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10004F468(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10004F628((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10004F5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004F5F0(uint64_t a1)
{
  sub_10004F32C(a1);
  operator delete();
}

int *sub_10004F628(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 49;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 49;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10004F810(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004FAA0(v1);
  return std::ios::~ios();
}

uint64_t sub_10004F85C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004FAA0(v1);
  return std::ios::~ios();
}

void sub_10004F8BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10004FAA0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10004F95C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10004F9C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10004FAA0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10004FA28(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10004FAA0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10004FAA0(uint64_t a1)
{
  *(void *)a1 = off_1001A5300;
  sub_10004FBDC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10004FBDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10004FD9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10004FD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004FD64(uint64_t a1)
{
  sub_10004FAA0(a1);
  operator delete();
}

int *sub_10004FD9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 55;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 55;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10004FF84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100050214(v1);
  return std::ios::~ios();
}

uint64_t sub_10004FFD0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100050214(v1);
  return std::ios::~ios();
}

void sub_100050030(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100050214(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100050098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000500D0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100050138(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100050214(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10005019C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100050214(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100050214(uint64_t a1)
{
  *(void *)a1 = off_1001A5520;
  sub_100050350(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100050350(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100050510((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000504AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000504D8(uint64_t a1)
{
  sub_100050214(a1);
  operator delete();
}

int *sub_100050510(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 94;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 94;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1000506F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100050988(v1);
  return std::ios::~ios();
}

uint64_t sub_100050744(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100050988(v1);
  return std::ios::~ios();
}

void sub_1000507A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100050988(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10005080C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100050844(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000508AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100050988(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100050910(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100050988(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100050988(uint64_t a1)
{
  *(void *)a1 = off_1001A5740;
  sub_100050AC4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100050AC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100050C84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100050C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050C4C(uint64_t a1)
{
  sub_100050988(a1);
  operator delete();
}

int *sub_100050C84(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 117;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 117;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

_DWORD *sub_100050E6C(_DWORD *a1, int *a2)
{
  *a1 = dword_10016FF10[*a2];
  if (sub_1000D8524())
  {
    *(void *)&long long v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((void *)&v5 + 1) = 39;
    int v6 = 2;
    sub_10001D0E8(v7, &v5);
    sub_1000039A0(v8, (uint64_t)"Using compression ", 18);
    int v9 = *a2;
    sub_10004E260(v8, &v9);
    *(_DWORD *)((char *)&v8[1] + *(void *)(v8[0] - 24)) = *(_DWORD *)((unsigned char *)&v8[1] + *(void *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
    sub_1000039A0(v8, (uint64_t)" constant ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10001DB34((uint64_t)v7);
    std::ios::~ios();
  }
  return a1;
}

void sub_100050F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001D20C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100050F98(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100051228(v1);
  return std::ios::~ios();
}

uint64_t sub_100050FE4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100051228(v1);
  return std::ios::~ios();
}

void sub_100051044(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100051228(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000510AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000510E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10005114C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100051228(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000511B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100051228(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100051228(uint64_t a1)
{
  *(void *)a1 = off_1001A59D8;
  sub_100051364(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100051364(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100051524((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000514C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000514EC(uint64_t a1)
{
  sub_100051228(a1);
  operator delete();
}

int *sub_100051524(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 242;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 242;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10005170C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005199C(v1);
  return std::ios::~ios();
}

uint64_t sub_100051758(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005199C(v1);
  return std::ios::~ios();
}

void sub_1000517B8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005199C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100051820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100051858(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000518C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005199C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100051924(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005199C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10005199C(uint64_t a1)
{
  *(void *)a1 = off_1001A5BF8;
  sub_100051AD8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100051AD8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100051C98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100051C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100051C60(uint64_t a1)
{
  sub_10005199C(a1);
  operator delete();
}

int *sub_100051C98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 265;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 265;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_100051E80(uint64_t a1, void *a2, uint64_t *a3)
{
  int v5 = operator new(0x6F8uLL);
  sub_100051EFC(v5, a2, a3);
}

void sub_100051EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100051EFC(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A5C78;
  uint64_t v3 = *a3;
  int v4 = 4;
  sub_10004CFD8(a1 + 3, a2, &v4, v3);
}

void sub_100051F78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100051F8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100051FAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100052000(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100052028(uint64_t a1, void *a2, int *a3, uint64_t *a4)
{
  uint64_t v7 = operator new(0x710uLL);
  sub_1000520B4(v7, a2, a3, a4);
}

void sub_1000520A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000520B4(void *a1, void *a2, int *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A5CC8;
  int v4 = *a3;
  sub_10004E2A4(a1 + 3, a2, &v4, *a4);
}

void sub_100052114(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100052128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100052148(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A5CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10005219C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1000521C4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A50E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100052240(_Unwind_Exception *a1)
{
}

uint64_t sub_100052254(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5300;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000522D0(_Unwind_Exception *a1)
{
}

void sub_1000522E4(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_100052398((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(104 * v11);
  sub_10005241C((uint64_t)a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_100052398(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x13B13B13B13B13BLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x13B13B13B13B13BLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10005241C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)a1;
  sub_1000524FC(a1, *(void **)a1, a4, (void *)(*(void *)a1 + 104 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = v10 + 48;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 40);
        if (v13) {
          sub_100004944(v13);
        }
        v12 += 104;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = a3;
}

void sub_1000524D8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000524FC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a5;
  uint64_t v17 = a1;
  uint64_t v12 = sub_100052608(a1, a2, a3, a5);
  uint64_t v16 = v12;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(void *)(v12 + 48) = *(void *)(a7 + 48);
  *(void *)(a7 + 48) = 0;
  *(void *)(*(void *)(v12 + 48) + 32) = v12 + 48;
  sub_10001CB94(v12 + 56, a7 + 56);
  *(void *)(v12 + 96) = *(void *)(a7 + 96);
  sub_100052608(a1, a3, a4, v12 + 104 * a6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  return sub_1000526F4(&v15);
}

void sub_1000525D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 32) = 0;
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5) {
    sub_100004944(v5);
  }
  sub_1000526F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100052608(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = &a2[v7];
      uint64_t v9 = a4 + v7 * 8;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2[v7];
      void *v8 = 0;
      v8[1] = 0;
      long long v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(a4 + v7 * 8 + 48) = a2[v7 + 6];
      v8[6] = 0;
      *(void *)(*(void *)(a4 + v7 * 8 + 48) + 32) = a4 + v7 * 8 + 48;
      sub_10001CB94(a4 + v7 * 8 + 56, (uint64_t)&a2[v7 + 7]);
      *(void *)(v9 + 96) = a2[v7 + 12];
      v7 += 13;
    }
    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }
  return a4;
}

void sub_1000526B4(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    *(void *)(v4 + 32) = 0;
  }
  sub_100151804((std::__shared_weak_count **)(v3 + 8), a1, a2, v3, v2);
  __cxa_rethrow();
}

void sub_1000526E0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000526F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      sub_100004944(v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 104;
    *a1 = v2;
  }
  return a1;
}

uint64_t sub_10005274C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5520;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000527C8(_Unwind_Exception *a1)
{
}

void sub_1000527DC(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      char v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        sub_100004944(v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

uint64_t sub_10005283C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5740;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000528B8(_Unwind_Exception *a1)
{
}

void sub_1000528CC(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x710uLL);
  sub_100052948(v5, a2, a3);
}

void sub_100052934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100052948(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A5CC8;
  sub_10004E414(a1 + 3, a2, a3);
}

void sub_100052990(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000529A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A59D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100052A20(_Unwind_Exception *a1)
{
}

uint64_t sub_100052A34(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5BF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100052AB0(_Unwind_Exception *a1)
{
}

void sub_100052AC4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x6F8uLL);
  sub_100052B40(v5, a2, a3);
}

void sub_100052B2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100052B40(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A5C78;
  sub_10004D13C(a1 + 3, a2, a3);
}

void sub_100052BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *sub_100052BB8(atomic_ullong *result)
{
  return result;
}

void sub_100052BC4(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)a1, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }
  std::mutex::unlock(v2);
}

uint64_t sub_100052C28(uint64_t result)
{
  *(unsigned char *)(result + 72) = 1;
  return result;
}

void sub_100052C38(uint64_t a1)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    *(unsigned char *)(a1 + 72) = 0;
  }
  else
  {
    while (*(unsigned char *)(a1 + 72))
      std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v2);
  }
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

uint64_t sub_100052CBC(uint64_t a1, unint64_t a2)
{
  unint64_t v18 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  LOBYTE(v15[0]) = 0;
  sub_10005547C((uint64_t **)a1, &v18, &v18, v15);
  char v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      sub_100052FA8(v15, &v13);
      sub_1000039A0(v16, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v16, (uint64_t)" was opened in the background, waiting for it to become available", 65);
      std::ostream::~ostream();
      sub_100053FA8((uint64_t)v15);
      std::ios::~ios();
    }
    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v6 = a1 + 8;
    long long v5 = v7;
    if (v7)
    {
      do
      {
        unint64_t v8 = (void *)v6;
        do
        {
          unint64_t v9 = v5[4];
          BOOL v10 = v9 >= v18;
          if (v9 >= v18) {
            uint64_t v11 = v5;
          }
          else {
            uint64_t v11 = v5 + 1;
          }
          if (v10) {
            unint64_t v8 = v5;
          }
          long long v5 = (void *)*v11;
        }
        while (*v11);
        if (v8 == (void *)v6) {
          break;
        }
        if (v18 < v8[4]) {
          break;
        }
        if (*((unsigned char *)v8 + 40)) {
          break;
        }
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        long long v5 = *(void **)v6;
      }
      while (*(void *)v6);
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      sub_100053110(v15, &v13);
      sub_1000039A0(v16, (uint64_t)"Band ", 5);
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v16[1] + *(void *)(v16[0] - 24)) = *(_DWORD *)((unsigned char *)&v16[1]
                                                                            + *(void *)(v16[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v16, (uint64_t)" is now available", 17);
      std::ostream::~ostream();
      sub_10005471C((uint64_t)v15);
      std::ios::~ios();
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v4 & 1;
}

void sub_100052F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(unsigned char *)(v13 - 64)) {
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *sub_100052FA8(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_100055544((uint64_t)a1, a2);
  *a1 = off_1001A5D48;
  a1[45] = &off_1001A5E48;
  a1[46] = &off_1001A5E70;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5D48;
  a1[45] = off_1001A5DD0;
  a1[46] = off_1001A5DF8;
  return a1;
}

void sub_1000530A8(_Unwind_Exception *a1)
{
  sub_100053FA8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000530CC(uint64_t a1)
{
  return a1;
}

void *sub_100053110(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000555D4((uint64_t)a1, a2);
  *a1 = off_1001A5F68;
  a1[45] = &off_1001A6068;
  a1[46] = &off_1001A6090;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A5F68;
  a1[45] = off_1001A5FF0;
  a1[46] = off_1001A6018;
  return a1;
}

void sub_100053210(_Unwind_Exception *a1)
{
  sub_10005471C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100053234(uint64_t a1)
{
  return a1;
}

void sub_100053278(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = (void *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v7 + 1;
    }
    if (v10) {
      unint64_t v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (void *)(a1 + 8) || v8[4] > a2) {
LABEL_12:
  }
    unint64_t v8 = (void *)(a1 + 8);
  *((unsigned char *)v8 + 40) = a3;
  if (a3) {
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  }
  std::mutex::unlock(v6);
}

void sub_10005331C(uint64_t a1, unint64_t a2)
{
  unint64_t v8 = a2;
  char v3 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100055664(a1, &v8);
  if (sub_1000D8524())
  {
    *(void *)&long long v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((void *)&v4 + 1) = 36;
    int v5 = 2;
    sub_100053488(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Band ", 5);
    *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v7, (uint64_t)" is closed, notifying waiters", 29);
    std::ostream::~ostream();
    sub_100054E90((uint64_t)v6);
    std::ios::~ios();
  }
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v3);
}

void sub_100053460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void *sub_100053488(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000556E0((uint64_t)a1, a2);
  *a1 = off_1001A6188;
  a1[45] = &off_1001A6288;
  a1[46] = &off_1001A62B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6188;
  a1[45] = off_1001A6210;
  a1[46] = off_1001A6238;
  return a1;
}

void sub_100053588(_Unwind_Exception *a1)
{
  sub_100054E90(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000535AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000535F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v7 = 0;
  sub_100055770(&v7, __p);
  long long v3 = *(_OWORD *)__p;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 136) = 1018212795;
  *(_OWORD *)(a1 + 56) = xmmword_100170130;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 1018212795;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_100004890(__p, "com.apple.diskimages.band_management");
  sub_10004CD30();
  sub_100055B5C((void *)(a1 + 328));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_100055E98(a1 + 328, 0, a1 + 392);
  sub_100055B60(a1 + 328, 3);
  return a1;
}

void sub_100053714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v20 = v17;
  sub_100055E14(v20);
  sub_10000F990(v18);
  uint64_t v22 = v14[40];
  v14[40] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sub_10005381C(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)(v15 - 120));
  unint64_t v23 = (std::__shared_weak_count *)v14[4];
  if (v23) {
    sub_100004944(v23);
  }
  uint64_t v24 = v14[2];
  v14[2] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
  }
  uint64_t v25 = *v19;
  uint64_t *v19 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005381C(uint64_t a1)
{
  return a1;
}

void sub_100053860(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  uint64_t v11 = 0x4802000000;
  uint64_t v12 = sub_100053A4C;
  uint64_t v13 = sub_100053A70;
  long long __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  sub_100055E98(a1 + 328, 0, (uint64_t)v18);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100053A84;
  v8[3] = &unk_1001A5D10;
  v8[4] = a2;
  v8[5] = &v9;
  sub_100055C7C(v18, v8);
  sub_100055E14(v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    long long v4 = v10;
    uint64_t v5 = *((unsigned int *)v10 + 16);
    *(void *)exception = &off_1001C3DE8;
    char v6 = std::generic_category();
    *((void *)exception + 1) = v5;
    *((void *)exception + 2) = v6;
    uint64_t v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((void *)exception + 5) = v7;
    void v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    exception[48] = 1;
  }
  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_100053A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100053A4C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100053A70(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t sub_100053A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100053BA0@<X0>(void *a1@<X8>)
{
  sub_100003404((uint64_t)&v3);
  *(_DWORD *)((char *)v4 + *(void *)(v3 - 24)) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v3 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  sub_100004624((uint64_t)v4, a1);
  if (v5 < 0) {
    operator delete((void *)v4[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100053D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100053D18(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100053FA8(v1);
  return std::ios::~ios();
}

uint64_t sub_100053D64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100053FA8(v1);
  return std::ios::~ios();
}

void sub_100053DC4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100053FA8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100053E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100053E64(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100053ECC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100053FA8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100053F30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100053FA8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100053FA8(uint64_t a1)
{
  *(void *)a1 = off_1001A5EE0;
  sub_1000540E4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000540E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000542A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100054240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005426C(uint64_t a1)
{
  sub_100053FA8(a1);
  operator delete();
}

int *sub_1000542A4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 72;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 72;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10005448C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005471C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000544D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005471C(v1);
  return std::ios::~ios();
}

void sub_100054538(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10005471C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000545A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000545D8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100054640(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10005471C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000546A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10005471C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10005471C(uint64_t a1)
{
  *(void *)a1 = off_1001A6100;
  sub_100054858(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100054858(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100054A18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000549B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000549E0(uint64_t a1)
{
  sub_10005471C(a1);
  operator delete();
}

int *sub_100054A18(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 79;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 79;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100054C00(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100054E90(v1);
  return std::ios::~ios();
}

uint64_t sub_100054C4C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100054E90(v1);
  return std::ios::~ios();
}

void sub_100054CAC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100054E90(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100054D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100054D4C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100054DB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100054E90(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100054E18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100054E90(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100054E90(uint64_t a1)
{
  *(void *)a1 = off_1001A6320;
  sub_100054FCC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100054FCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10005518C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100055128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100055154(uint64_t a1)
{
  sub_100054E90(a1);
  operator delete();
}

int *sub_10005518C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 98;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 98;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

std::string *sub_100055374(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_100055434(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_100055374(a1, __s, v4);
}

uint64_t **sub_10005547C(uint64_t **a1, unint64_t *a2, void *a3, unsigned char *a4)
{
  unint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        unint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        unint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    os_log_type_t v12 = operator new(0x30uLL);
    void v12[4] = *a3;
    *((unsigned char *)v12 + 40) = *a4;
    sub_10000CAA0(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t sub_100055544(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A5EE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000555C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000555D4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6100;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100055650(_Unwind_Exception *a1)
{
}

uint64_t sub_100055664(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  char v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      char v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10000CF8C((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t sub_1000556E0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10005575C(_Unwind_Exception *a1)
{
}

void sub_100055770(int *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_1000557E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000557D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000557E4(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10019EB88;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_10014B80C();
  uint64_t v6 = v5;
  sub_100149398(a1 + 3);
  a1[3] = off_10019EBD8;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_10005586C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

char *sub_100055880(char *__dst, long long *a2, unint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000A2C4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[56] = a3 != 0;
  if (a3)
  {
    sub_1000559C0((void *)__dst + 3, a3);
    do
    {
      uint64_t v6 = __dst;
      if (__dst[23] < 0) {
        uint64_t v6 = *(char **)__dst;
      }
      sub_100125F80((int)&v9, v6);
      sub_100055A54((void *)__dst + 3, &v9);
      sub_100125ECC(&v9);
      --a3;
    }
    while (a3);
  }
  else
  {
    uint64_t v7 = __dst;
    if (__dst[23] < 0) {
      uint64_t v7 = *(char **)__dst;
    }
    sub_100125F80((int)&v9, v7);
    sub_100055A54((void *)__dst + 3, &v9);
    sub_100125ECC(&v9);
  }
  return __dst;
}

void sub_10005597C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100125ECC((NSObject **)va);
  sub_10000F9FC((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000559C0(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10004B570();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10004B588(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_1000560E8(a1, v7);
    return sub_100056170((uint64_t)v7);
  }
  return result;
}

void sub_100055A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056170((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100055A54(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10004B570();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10004B588(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[8 * v9];
    __int16 v18 = &v13[8 * v12];
    sub_100125F84(v16, a2);
    int v17 = v16 + 8;
    sub_1000560E8(a1, &v15);
    unint64_t v8 = a1[1];
    sub_100056170((uint64_t)&v15);
  }
  else
  {
    sub_100125F84(*(void **)(v4 - 8), a2);
    unint64_t v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_100055B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100056170((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100055B60(uint64_t result, int a2)
{
  uint64_t v2 = *(dispatch_object_t **)(result + 24);
  for (uint64_t i = *(dispatch_object_t **)(result + 32); v2 != i; ++v2)
    uint64_t result = sub_100126058(v2, a2);
  return result;
}

void sub_100055BAC(uint64_t a1)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 112) = v2 - 1;
LABEL_5:
    std::mutex::unlock(v5.__m_);
    return;
  }
  do
  {
    std::condition_variable::wait((std::condition_variable *)a1, &v5);
    uint64_t v3 = *(void *)(a1 + 112);
  }
  while (!v3);
  BOOL owns = v5.__owns_;
  *(void *)(a1 + 112) = v3 - 1;
  if (owns) {
    goto LABEL_5;
  }
}

void sub_100055C28(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  ++*(void *)(a1 + 112);
  std::condition_variable::notify_one((std::condition_variable *)a1);
  std::mutex::unlock(v2);
}

void sub_100055C7C(dispatch_group_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 136))
  {
    sub_100055BAC((uint64_t)(a1 + 2));
    dispatch_group_t v4 = *a1;
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)&(*a1)[6], 1uLL);
    unint64_t v7 = v4 + 3;
    Class isa = v4[3].isa;
    unint64_t v8 = add % ((v7[1].isa - isa) >> 3);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    void v11[2] = sub_100055D84;
    void v11[3] = &unk_1001A6398;
    v11[4] = a2;
    v11[5] = a1;
    sub_100125F9C((dispatch_queue_t *)isa + v8, a1 + 1, v11);
  }
  else
  {
    dispatch_group_t v9 = *a1;
    uint64_t v10 = (dispatch_queue_t *)((char *)v9[3].isa
                             + 8
                             * (atomic_fetch_add((atomic_ullong *volatile)&(*a1)[6], 1uLL)
                              % ((v9[4].isa - v9[3].isa) >> 3)));
    sub_100125F9C(v10, a1 + 1, a2);
  }
}

void sub_100055D84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  sub_100055C28(v1 + 16);
}

intptr_t sub_100055DC4(uint64_t a1, dispatch_time_t a2)
{
  return sub_100125EFC((dispatch_group_t *)(a1 + 8), a2);
}

uint64_t sub_100055DCC(uint64_t a1)
{
  uint64_t v2 = (NSObject **)(a1 + 8);
  sub_100125EFC((dispatch_group_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  sub_1000561C0(a1 + 16);
  sub_100125ECC(v2);
  return a1;
}

uint64_t sub_100055E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_100125EA0((dispatch_group_t *)(a1 + 8));
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (a3)
  {
    sub_1000561FC(a1 + 16);
    *(void *)(a1 + 16) = 1018212795;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 850045863;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = a3;
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t sub_100055E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100055E18(a3, a1, a2);
}

uint64_t sub_100055EA8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100055EBC(a4, a1, a2, a3);
}

uint64_t sub_100055EBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2[3] + 8 * (atomic_fetch_add(a2 + 6, 1uLL) % ((uint64_t)(a2[4] - a2[3]) >> 3));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _OWORD v8[2] = sub_100055FB4;
  v8[3] = &unk_1001A63C0;
  unint64_t v6 = (void **)(a1 + 16);
  v8[4] = a3;
  v8[5] = a1;
  void v8[6] = a4;
  sub_1001260FC((dispatch_block_t *)(a1 + 16), v8);
  if (*(void *)(a1 + 16) && *(unsigned char *)(*(void *)a1 + 56)) {
    sub_100125FAC(*(NSObject ***)(a1 + 8), v6, a4);
  }
  return a1;
}

void sub_100055FA0(_Unwind_Exception *a1)
{
  sub_10012617C(v1);
  _Unwind_Resume(a1);
}

void sub_100055FB4(void *a1)
{
  uint64_t v2 = a1[5];
  (*(void (**)(void))(a1[4] + 16))();
  uint64_t v3 = *(NSObject ***)(v2 + 8);
  uint64_t v4 = a1[6];
  sub_100125FAC(v3, (void **)(v2 + 16), v4);
}

uint64_t sub_100056000(uint64_t a1)
{
  return a1;
}

void sub_100056034(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(unsigned char *)(*(void *)a1 + 56))
    {
      uint64_t v2 = *(dispatch_queue_t **)(a1 + 8);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 0x40000000;
      _OWORD v3[2] = sub_1000560D8;
      _OWORD v3[3] = &unk_1001A63E0;
      v3[4] = a1;
      sub_100125F94(v2, v3);
      sub_100126030(*(dispatch_queue_t **)(a1 + 8), &stru_1001A6420);
    }
  }
}

void sub_1000560D8(uint64_t a1)
{
}

void *sub_1000560E8(void *a1, void *a2)
{
  std::unique_lock<std::mutex> v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
    uint64_t result = sub_100125F84(result - 1, --v4);
  a2[1] = result;
  unint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100056170(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100125ECC((NSObject **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000561C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
  }
  return a1;
}

void sub_1000561FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
    *(unsigned char *)(a1 + 120) = 0;
  }
}

void sub_100056328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000563EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000566D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100057008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100057160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005729C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

#error "100057B20: call analysis failed (funcsize=235)"

void sub_100057FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058570(_Unwind_Exception *a1, int a2)
{
  unint64_t v7 = v5;

  if (a2 == 1)
  {
    uint64_t v10 = [objc_begin_catch(a1) reason];
    +[DIError nilWithEnumValue:150 verboseInfo:v10 error:v2];
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x100058528);
  }

  _Unwind_Resume(a1);
}

void sub_1000587BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000590BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a15) {
    sub_100004944(a15);
  }
  sub_1000591E4(&a20);

  _Unwind_Resume(a1);
}

void *sub_100059160@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    std::unique_lock<std::mutex> v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1000591E4(void *a1)
{
  *a1 = off_1001BEEF8;
  a1[3] = off_1001BEFD8;
  a1[4] = off_1001BF010;
  sub_10005B774((uint64_t)(a1 + 8));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1000598C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100059D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100059E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  sub_1000591E4(&a22);
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) prefix:@"failed to open existing output file" error:v22];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x10005A050);
  }
  _Unwind_Resume(a1);
}

void sub_10005AD2C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    uint64_t v30 = [objc_begin_catch(a1) reason];
    +[DIError failWithEnumValue:150 verboseInfo:v30 error:v22];

    objc_end_catch();
    JUMPOUT(0x10005A334);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005B028(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005B038(uint64_t a1)
{
}

id sub_10005B040(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10005B0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005B2E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4;
  unint64_t v7 = sub_100149398((void *)a1);
  *unint64_t v7 = off_1001BEEF8;
  v7[3] = off_1001BEFD8;
  v7[4] = off_1001BF010;
  sub_100127A2C(v10, a2, a3);
  sub_10005B420((uint64_t)v10, &v9, (void *)(a1 + 40));
  sub_1001272D8((uint64_t)v10);
  *(void *)(a1 + 56) = *(void *)(a1 + 40) + 8;
  *(void *)(a1 + 64) = a1 + 88;
  *(_OWORD *)(a1 + 72) = xmmword_10016E350;
  return a1;
}

void sub_10005B3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001272D8((uint64_t)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_10005B420@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xB0uLL);
  uint64_t result = sub_10005B484(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10005B470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10005B484(void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6478;
  sub_10005B564((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_10005B4D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10005B4E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A6478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005B504(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A6478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10005B558(uint64_t a1)
{
  return sub_10005B6E4(a1 + 24);
}

uint64_t sub_10005B564(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(void *)a1 = off_1001A64C8;
  long long v4 = *(_OWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 49) = sub_10005B610();
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_10005B5FC(_Unwind_Exception *a1)
{
  sub_1001272D8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10005B610()
{
  sub_100127B80();
  unint64_t v0 = v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)__p[1];
  }
  if (v0 == 5)
  {
    uint64_t v1 = (void **)__p[0];
    if ((v8 & 0x80u) == 0) {
      uint64_t v1 = __p;
    }
    int v2 = *(_DWORD *)v1;
    int v3 = *((unsigned __int8 *)v1 + 4);
    BOOL v5 = v2 == 1717726579 && v3 == 115;
    if ((char)v8 < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v5 = 0;
    if ((char)v8 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }
  return v5;
}

uint64_t sub_10005B6A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_10005B6AC(uint64_t a1)
{
  sub_1001272D8(a1);
  operator delete();
}

uint64_t sub_10005B6E4(uint64_t a1)
{
  sub_10005B724((uint64_t *)(a1 + 96));
  return sub_1001272D8(a1);
}

uint64_t *sub_10005B724(uint64_t *result)
{
  if (*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    sub_10004A3B4(result, 0);
    return sub_10004A330(v1 + 1);
  }
  return result;
}

uint64_t sub_10005B774(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      long long v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        sub_100004944(v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10005C000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005C520(id a1)
{
  id v3 = +[NSURL fileURLWithPath:@"/System/Library/PrivateFrameworks/DiskImages2.framework"];
  uint64_t v1 = +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:");
  uint64_t v2 = (void *)qword_1001D47B0;
  qword_1001D47B0 = v1;
}

void sub_10005C59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005CB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005CBA0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_10005D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D034(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t make_error_code(uint64_t result)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D47C0, memory_order_acquire) & 1) == 0)
  {
    int v2 = result;
    int v1 = __cxa_guard_acquire(&qword_1001D47C0);
    LODWORD(result) = v2;
    if (v1)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_1001D3D80, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001D47C0);
      LODWORD(result) = v2;
    }
  }
  return result;
}

void diskimage_uio::diskimage_open_params::diskimage_open_params()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_10005D76C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const std::error_category *sub_10005D780@<X0>(std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__fs::filesystem::__status(a1, 0);
  if (LOBYTE(v16[0]) == 255 || LOBYTE(v16[0]) == 0)
  {
    *(void *)&long long v14 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v14 + 1) = 75;
    int v15 = 16;
    sub_100062F44(v16, &v14);
    sub_1000039A0(v17, (uint64_t)"Diskimageuio: path ", 19);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10000A2C4(__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
      int64_t v13 = a1->__pn_.__r_.__value_.__r.__words[2];
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if (v13 >= 0) {
      uint64_t v11 = HIBYTE(v13);
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_1000039A0(v17, (uint64_t)v10, v11);
    sub_1000039A0(v17, (uint64_t)" doesn't exist", 14);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    std::ostream::~ostream();
    sub_1000638A4((uint64_t)v16);
    std::ios::~ios();
    uint64_t result = std::generic_category();
    *(void *)a4 = 2;
    *(void *)(a4 + 8) = result;
    *(unsigned char *)(a4 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)sub_1000630AC(a2, 0, 1);
  }
  return result;
}

void sub_10005D8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_10005D920(uint64_t result)
{
  if (*(unsigned char *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_1001A6600;
  }
  return result;
}

void sub_10005DA64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10005DA78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X8>)
{
  memset(v12, 0, sizeof(v12));
  if (a4 == 1) {
    unint64_t v7 = &_mh_execute_header + 2;
  }
  else {
    unint64_t v7 = &_mh_execute_header;
  }
  sub_1000751AC(&v8, a2, a3, v7, v12, 0);
  sub_10005F4C0(a1 + 48, a1 + 48, (uint64_t)&v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    sub_100004944(v9);
  }
  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void sub_10005DC94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10005DCA8(uint64_t a1, unsigned int a2, int a3, char a4)
{
  unsigned int v10 = a2;
  char v9 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 568) = a3;
  int v7 = 2 * ((a3 - 1) < 2);
  sub_10006A8A0(&v10, &v7, &v9, &v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6)
  {
    sub_100004944(v6);
    if (*((void *)&v8 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  operator new();
}

void sub_10005DDA0()
{
}

void diskimage_uio::diskimage_open_params::create()
{
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

{
  diskimage_uio::diskimage_open_params::diskimage_open_params();
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    id v3 = *(std::__shared_weak_count **)(v2 + 616);
    if (v3) {
      sub_100004944(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(v2 + 600);
    if (v4) {
      sub_100004944(v4);
    }
    long long v5 = *(std::__shared_weak_count **)(v2 + 584);
    if (v5) {
      sub_100004944(v5);
    }
    sub_10005FE78(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v6) {
      operator delete();
    }
    int v7 = *(std::__shared_weak_count **)(v2 + 32);
    if (v7) {
      sub_100004944(v7);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params(diskimage_uio::diskimage_open_params *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 616);
    if (v2) {
      sub_100004944(v2);
    }
    id v3 = *(std::__shared_weak_count **)(v1 + 600);
    if (v3) {
      sub_100004944(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(v1 + 584);
    if (v4) {
      sub_100004944(v4);
    }
    sub_10005FE78(v1 + 48);
    uint64_t v5 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v5) {
      operator delete();
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v1 + 32);
    if (v6) {
      sub_100004944(v6);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  *(void *)this = 0;
}

_OWORD *sub_10005E0D4@<X0>(const std::error_category *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_10006201C(a1, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = a1[5].__vftable != 0;
    char v5 = 1;
  }
  else
  {
    uint64_t result = (_OWORD *)sub_10005D920((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }
  a2[16] = v5;
  return result;
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>(diskimage_uio::diskimage_open_params *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_10005E148(*(void *)this, a2).n128_u64[0];
  return result;
}

__n128 sub_10005E148@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  sub_10006AC70((const std::error_category *)a1, (uint64_t)v12);
  if (v12[16])
  {
    uint64_t v4 = *(unsigned int *)(a1 + 552);
    if (v4 == -1) {
      sub_1000289E8();
    }
    v10[0] = &v8;
    ((void (*)(void *, uint64_t))off_1001A8BE8[v4])(v10, a1 + 48);
  }
  else
  {
    *(void *)&long long v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + 1) = 80;
    int v9 = 16;
    sub_10006C13C(v10, &v8);
    sub_1000039A0(v11, (uint64_t)"Diskimageuio: query format failed ", 34);
    uint64_t v6 = sub_10005D920((uint64_t)v12);
    sub_100064018((uint64_t)v10, v6);
    std::ostream::~ostream();
    sub_10006C334((uint64_t)v10);
    std::ios::~ios();
    int v7 = (__n128 *)sub_10005D920((uint64_t)v12);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }
  return result;
}

void sub_10005E250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10006C260((uint64_t)va);
  _Unwind_Resume(a1);
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4;
  }
  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10;
  }
  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7;
  }
  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9;
  }
  return sub_1000039A0(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;

  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3;
      return sub_1000039A0(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8;
      return sub_1000039A0(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7;
      break;
  }
  return sub_1000039A0(a1, (uint64_t)v2, v3);
}

void sub_10005E39C(void *a1, const void **a2, char *a3, char a4)
{
  *a1 = 0;
  if (*a2)
  {
    if (v6)
    {
      memset(&v12[3], 0, 24);
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      sub_10006D8F0(&__p, a3);
      sub_1001368D4(v7, (uint64_t *)&__p, a4, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12[0] != v12[1]) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_1001C3DE8;
      char v11 = std::generic_category();
      exception[1] = 22;
      exception[2] = v11;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "pstack_header";
      void *exception = &off_1001A8E48;
    }
  }
  long long v8 = __cxa_allocate_exception(0x40uLL);
  void *v8 = &off_1001C3DE8;
  int v9 = std::generic_category();
  v8[1] = 22;
  _OWORD v8[2] = v9;
  *((unsigned char *)v8 + 24) = 0;
  *((unsigned char *)v8 + 48) = 0;
  void v8[7] = "pstack_header";
  void *v8 = &off_1001A8E48;
}

void sub_10005E890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,char a27,int a28,__int16 a29,char a30)
{
  a16 = &a19;
  sub_10005EDA0((void ***)&a16);
  a19 = &a22;
  sub_10006D774((void ***)&a19);
  sub_10006D694(v30, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10005E980(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_1001C3DE8;
  uint64_t v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  *(void *)a1 = &off_1001A8E48;
  return a1;
}

uint64_t sub_10005EA08(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10004B570();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)sub_10006D6E8(result, a2);
    int v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      unsigned int v10 = &v6[v5];
    }
    else
    {
      unsigned int v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + 8) = 0;
      }
      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    int64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_10006D720((uint64_t)&v14);
  }
  return result;
}

diskimage_uio::diskimage_open_params *sub_10005EAC8(diskimage_uio::diskimage_open_params *a1, long long *a2)
{
  char v5 = *((unsigned char *)a2 + 16);
  if (v5)
  {
    *(void *)&long long v4 = *(void *)a2;
    *(void *)a2 = 0;
  }
  else
  {
    long long v4 = *a2;
  }
  sub_10006DB78((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_10005EB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node(uint64_t a1, int a2, int a3, long long *a4, long long *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10000A2C4((unsigned char *)(a1 + 8), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10000A2C4((unsigned char *)(a1 + 32), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 48) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_10005EBF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_10005EC8C(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  operator delete();
}

const char *sub_10005ECC4()
{
  return "disk image";
}

void *sub_10005ECD0@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 150) > 0x10) {
    uint64_t v2 = "(unrecognized error)";
  }
  else {
    uint64_t v2 = off_1001A8E60[a1 - 150];
  }
  return sub_100004890(a2, v2);
}

uint64_t sub_10005ECFC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10005ED50((diskimage_uio::stack_image_node **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

diskimage_uio::stack_image_node *sub_10005ED50(diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    diskimage_uio::stack_image_node::~stack_image_node(result);
    operator delete();
  }
  return result;
}

void sub_10005EDA0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    long long v4 = (diskimage_uio::stack_image_node **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_10005ED50(--v4, 0);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10005EE2C(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10005EE64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1001A6618[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1001A6648[v4])(&v5, result, a2);
}

void ***sub_10005EF04(uint64_t a1, void ***a2)
{
  return sub_10006D694(a2, 0);
}

void sub_10005EF10(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    sub_100004944(v3);
  }
}

uint64_t sub_10005EF64(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return sub_10005EFEC(result);
  }
  return result;
}

void sub_10005EF7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10005EF84(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return sub_10005F314(result, (uint64_t)a3);
  }
  *a2 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[2];
  long long v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_10005EFB8(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return sub_10005F3BC(result, a3);
  }
  *a2 = *a3;
  return result;
}

void ***sub_10005EFDC(uint64_t *a1, void ***a2, uint64_t *a3)
{
  return sub_10005F42C(*a1, a2, a3);
}

void sub_10005EFE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10005EFEC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_10005F044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v3 = *(_OWORD *)(a3 + 16);
    long long v4 = *(_OWORD *)(a3 + 32);
    long long v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    long long v6 = *(_OWORD *)(a3 + 88);
    long long v7 = *(_OWORD *)(a3 + 104);
    long long v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 88) = v6;
    long long v9 = *(_OWORD *)(a3 + 152);
    long long v10 = *(_OWORD *)(a3 + 168);
    long long v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 168) = v10;
    *(_OWORD *)(a2 + 152) = v9;
    long long v12 = *(_OWORD *)(a3 + 248);
    long long v13 = *(_OWORD *)(a3 + 264);
    long long v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 248) = v12;
    long long v16 = *(_OWORD *)(a3 + 312);
    long long v15 = *(_OWORD *)(a3 + 328);
    long long v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 328) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    long long v18 = *(_OWORD *)(a3 + 360);
    long long v19 = *(_OWORD *)(a3 + 376);
    long long v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    long long v21 = *(_OWORD *)(a3 + 424);
    long long v22 = *(_OWORD *)(a3 + 440);
    long long v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 488) = v24;
  }
  else
  {
    sub_10005F16C(a1, a3);
  }
}

void sub_10005F16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  sub_10005F1DC(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 sub_10005F1DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  long long v10 = *(_OWORD *)(a2 + 248);
  long long v11 = *(_OWORD *)(a2 + 264);
  long long v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 248) = v10;
  long long v14 = *(_OWORD *)(a2 + 312);
  long long v13 = *(_OWORD *)(a2 + 328);
  long long v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  long long v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  long long v20 = *(_OWORD *)(a2 + 440);
  long long v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 492) = *(void *)(a2 + 492);
  return result;
}

uint64_t sub_10005F314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t sub_10005F3BC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void ***sub_10005F42C(uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) != 4) {
    return (void ***)sub_10005F454(a1, a3);
  }
  long long v3 = (void **)*a3;
  *a3 = 0;
  return sub_10006D694(a2, v3);
}

uint64_t sub_10005F454(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void sub_10005F4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    long long v5 = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    char v6 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v5;
    if (v6) {
      sub_100004944(v6);
    }
    char v7 = (void **)(a2 + 16);
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*v7);
    }
    long long v8 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)char v7 = v8;
    *(unsigned char *)(a3 + 39) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    sub_10005F560(a1, a3);
  }
}

uint64_t sub_10005F560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void sub_10005F5EC(uint64_t a1)
{
  sub_10011C754(&v23, a1);
  long long v1 = *(_OWORD *)(v23 + 32);
  long long v20 = *(_OWORD *)(v23 + 16);
  long long v21 = v1;
  uint64_t v22 = *(void *)(v23 + 48);
  long long v2 = *(_OWORD *)(v23 + 64);
  long long v3 = *(_OWORD *)(v23 + 88);
  long long v4 = *(_OWORD *)(v23 + 104);
  long long v5 = *(_OWORD *)(v23 + 136);
  long long v43 = *(_OWORD *)(v23 + 120);
  long long v44 = v5;
  long long v41 = v3;
  long long v42 = v4;
  long long v6 = *(_OWORD *)(v23 + 152);
  long long v7 = *(_OWORD *)(v23 + 168);
  long long v8 = *(_OWORD *)(v23 + 184);
  long long v48 = *(_OWORD *)(v23 + 200);
  long long v49 = v2;
  long long v46 = v7;
  long long v47 = v8;
  long long v45 = v6;
  long long v9 = *(_OWORD *)(v23 + 216);
  long long v10 = *(_OWORD *)(v23 + 232);
  long long v11 = *(_OWORD *)(v23 + 264);
  long long v12 = *(_OWORD *)(v23 + 280);
  long long v34 = *(_OWORD *)(v23 + 248);
  long long v35 = v11;
  long long v32 = v9;
  long long v33 = v10;
  long long v13 = *(_OWORD *)(v23 + 296);
  long long v14 = *(_OWORD *)(v23 + 312);
  long long v15 = *(_OWORD *)(v23 + 328);
  uint64_t v40 = *(void *)(v23 + 344);
  long long v38 = v14;
  long long v39 = v15;
  long long v36 = v12;
  long long v37 = v13;
  long long v16 = *(_OWORD *)(v23 + 440);
  long long v28 = *(_OWORD *)(v23 + 424);
  long long v29 = v16;
  long long v17 = *(_OWORD *)(v23 + 472);
  long long v30 = *(_OWORD *)(v23 + 456);
  long long v31 = v17;
  long long v18 = *(_OWORD *)(v23 + 376);
  long long v24 = *(_OWORD *)(v23 + 360);
  long long v25 = v18;
  long long v19 = *(_OWORD *)(v23 + 408);
  long long v26 = *(_OWORD *)(v23 + 392);
  long long v27 = v19;
  operator new();
}

void sub_10005F9A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    sub_10005FE78((uint64_t)&STACK[0x258]);
    sub_10005FE78((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    sub_10005FAC0((uint64_t *)va);
    __cxa_begin_catch(a1);
    sub_10005FB10();
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10005FAC0(uint64_t *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    operator delete();
  }
  return a1;
}

void sub_10005FB10()
{
}

void sub_10005FB44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = __cxa_begin_catch(a1);
      *(void *)&long long v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + 1) = 146;
      int v6 = 16;
      sub_10005FED4(v8, &v5);
      sub_10014B74C(&v9, (uint64_t)v3);
      std::ostream::~ostream();
      sub_1000600CC((uint64_t)v8);
      std::ios::~ios();
      *(void *)uint64_t v2 = make_error_code(161);
      *(void *)(v2 + 8) = v4;
      *(unsigned char *)(v2 + 520) = 0;
      goto LABEL_7;
    }
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  int v7 = 0;
  sub_10005FD08((uint64_t)v8, (uint64_t)&v5);
  int v10 = 0;
  sub_10005FD08(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v10;
  *(unsigned char *)(v2 + 520) = 1;
  sub_10005FE78((uint64_t)v8);
  sub_10005FE78((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

uint64_t sub_10005FD08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  sub_10005FD50(a1, a2);
  return a1;
}

void sub_10005FD3C(_Unwind_Exception *a1)
{
  sub_10005FE78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005FD50(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1001A6618[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1001A6678[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }
  return result;
}

double sub_10005FDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_10005F1DC(a2, a3).n128_u64[0];
  return result;
}

__n128 sub_10005FDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 62) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  return result;
}

__n128 sub_10005FE34(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_10005FE40(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 sub_10005FE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_10005FE78(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001A6618[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *sub_10005FED4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006003C((uint64_t)a1, a2);
  *a1 = off_1001A66D8;
  a1[45] = &off_1001A67D8;
  a1[46] = &off_1001A6800;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A66D8;
  a1[45] = off_1001A6760;
  a1[46] = off_1001A6788;
  return a1;
}

void sub_10005FFD4(_Unwind_Exception *a1)
{
  sub_1000600CC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10005FFF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006003C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6870;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000600B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000600CC(uint64_t a1)
{
  *(void *)a1 = off_1001A6870;
  sub_1000604D4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100060208(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000600CC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100060270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000602A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100060310(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000600CC(v1);
  return std::ios::~ios();
}

void sub_10006035C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000600CC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000603C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000600CC(v1);
  return std::ios::~ios();
}

void sub_100060420(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000600CC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006049C(uint64_t a1)
{
  sub_1000600CC(a1);
  operator delete();
}

uint64_t sub_1000604D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100060658((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100060630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100060658(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 393;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 393;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL sub_100060840(_DWORD *a1, _DWORD *a2)
{
  if (*a1 == *a2 && (unint64_t v2 = a1[1], v2 == a2[1])) {
    return memcmp(a1 + 2, a2 + 2, v2 >> 3) == 0;
  }
  else {
    return 0;
  }
}

void sub_100060894(uint64_t a1, uint64_t *a2)
{
  sub_10011A2A4((uint64_t)v2, a2);
}

void sub_100060928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100019B70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006093C(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &off_1001A6930;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)sub_100019A84(a1 + 64, a2) = &off_1001A68F0;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = 1;
    *(void *)(a1 + 32) = 2 * v6;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void sub_1000609EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100060A08(uint64_t a1)
{
  sub_100019B70(a1);
  operator delete();
}

uint64_t sub_100060A48()
{
  return 512;
}

uint64_t sub_100060A50(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

__n128 sub_100060A58@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100060A64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void sub_100060A6C()
{
}

void sub_100060AB4()
{
}

uint64_t sub_100060AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v119 = v121;
  long long v120 = xmmword_10016E350;
  std::string __p = v118;
  long long v117 = xmmword_10016E350;
  unint64_t v8 = sub_100061B28(a3, a4);
  uint64_t v9 = v8;
  if (v8 > 0x10)
  {
    if (v8 >= 0x333333333333334) {
      sub_10001A67C("get_next_capacity, allocator's max size reached");
    }
    int v10 = operator new(40 * v8);
    sub_10001D8B0((uint64_t *)&__p, (unint64_t)v10, v9, (uint64_t)__p + 40 * v117, 0, 0);
  }
  uint64_t v11 = a4[18] - *(void *)(a3 + 144);
  sub_100119B78(a1 + 64, *(void *)(a3 + 24), v11 & ~(v11 >> 63), (uint64_t *)&v119);
  os_log_type_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v102 = *a4;
  __uint32_t v103 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = a1;
  uint64_t v13 = (uint64_t)(a4 + 7);
  long long v14 = *(_OWORD *)(a4 + 7);
  v104[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v105 = a4[6];
  long long v106 = v14;
  long long v15 = *(_OWORD *)(a4 + 11);
  long long v107 = *(_OWORD *)(a4 + 9);
  long long v108 = v15;
  char v109 = *((unsigned char *)a4 + 104);
  long long v16 = (std::__shared_weak_count *)a4[15];
  uint64_t v110 = a4[14];
  uint64_t v111 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v112 = *((_OWORD *)a4 + 8);
  uint64_t v113 = a4[18];
  char v114 = *((unsigned char *)a4 + 152);
  v100[0] = 0;
  char v101 = 0;
  int v17 = (char *)v119;
  uint64_t v18 = *((void *)v119 + 3);
  uint64_t v19 = *(std::__shared_weak_count **)(a3 + 8);
  int v87 = *(void **)a3;
  __int16 v88 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a3 + 56;
  long long v21 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)size_t v89 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v89[9] = *(_OWORD *)(a3 + 25);
  uint64_t v90 = *(void *)(a3 + 48);
  long long v91 = v21;
  long long v22 = *(_OWORD *)(a3 + 88);
  long long v92 = *(_OWORD *)(a3 + 72);
  long long v93 = v22;
  char v94 = *(unsigned char *)(a3 + 104);
  uint64_t v23 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v95 = *(void *)(a3 + 112);
  long long v96 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v97 = *(_OWORD *)(a3 + 128);
  uint64_t v98 = *(void *)(a3 + 144);
  char v99 = *(unsigned char *)(a3 + 152);
  uint64_t v68 = a2;
  if (!(void)v120)
  {
    uint64_t v24 = 0;
    uint64_t v71 = 0;
    goto LABEL_83;
  }
  uint64_t v66 = a3;
  uint64_t v24 = 0;
  unint64_t v70 = &v17[64 * (void)v120];
  uint64_t v71 = 0;
  long long v69 = (uint64_t **)(a2 + 16);
  while (1)
  {
    unint64_t v25 = *((void *)v17 + 4);
    if (v25)
    {
      if (sub_1000410B8((uint64_t)&v87, (uint64_t)&v102)) {
        break;
      }
    }
    if (v25 > *(void *)&v89[16]) {
      sub_100041D84((uint64_t)&v87);
    }
    if (sub_1000410B8((uint64_t)&v87, (uint64_t)&v102))
    {
      *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v83 + 1) = 75;
      v84.i32[0] = 16;
      sub_10001D250(v72, &v83);
      sub_1000039A0(v78, (uint64_t)"Udif: advanced buffer, needs to read ", 37);
      sub_10011BD44(v78, (int *)v17);
      sub_1000039A0(v78, (uint64_t)" but buffer is full", 19);
      std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
      uint64_t v52 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
      std::locale::~locale((std::locale *)&v81);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      sub_10001E348((uint64_t)v72);
      goto LABEL_82;
    }
    long long v26 = v87;
    long long v27 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v28 = *(void *)&v89[16];
    if (v25 <= *(void *)&v89[16])
    {
      if (*(_DWORD *)v17)
      {
        int8x16_t v31 = *(int8x16_t *)(v17 + 8);
        uint64_t v32 = *((void *)v17 + 4);
        *(void *)&long long v83 = v26;
        *((void *)&v83 + 1) = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v84 = vextq_s8(v31, v31, 8uLL);
        uint64_t v85 = v32;
        char v86 = 0;
        if (v71)
        {
          *(void *)&long long v81 = v17;
          long long v33 = sub_10001F2E0(v69, (unsigned int *)v17, (uint64_t)&unk_1001705CC, (_DWORD **)&v81);
          (*(void (**)(long long *__return_ptr))(*v33[5] + 128))(v72);
          if ((void)v117 == *((void *)&v117 + 1))
          {
            sub_10001FC2C((uint64_t *)&__p, (uint64_t)__p + 40 * v117, 1, (uint64_t)v72, &v81);
          }
          else
          {
            sub_10001CB94((unint64_t)__p + 40 * v117, (uint64_t)v72);
            *(void *)&long long v117 = v117 + 1;
          }
          sub_100041C48((uint64_t)&v87, v25);
          goto LABEL_30;
        }
        *(void *)&v72[0] = v17;
        long long v35 = sub_10001F2E0(v69, (unsigned int *)v17, (uint64_t)&unk_1001705CC, (_DWORD **)v72);
        int v36 = (*(uint64_t (**)(uint64_t *, long long *))(*v35[5] + 88))(v35[5], &v83);
        uint64_t v24 = v36;
        if (v36 < 0)
        {
          char v34 = 0;
          int v30 = 2;
        }
        else if (*(unsigned char *)(v68 + 56) && *((int *)v17 + 8) > (uint64_t)v36)
        {
          *(void *)&long long v81 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v81 + 1) = 75;
          int v82 = 16;
          sub_10001D520(v72, &v81);
          sub_1000039A0(v78, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_1000039A0(v78, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_1000039A0(v78, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
          long long v37 = std::locale::use_facet(&v115, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale(&v115);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_10001F434((uint64_t)v72);
          std::ios::~ios();
          char v34 = 0;
          int v30 = 2;
          uint64_t v24 = -5;
        }
        else
        {
          uint64_t v38 = sub_100061C20(v67, (void **)&v83, (uint64_t)v17, &v119, v28);
          v25 -= v38;
          sub_100041C48((uint64_t)&v87, v25);
          uint64_t v65 = v18;
          if ((void)v120)
          {
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = (void)v120 << 6;
            long long v42 = (uint64_t *)((char *)v119 + 32);
            do
            {
              uint64_t v44 = *v42;
              v42 += 8;
              uint64_t v43 = v44;
              uint64_t v45 = v44 + v39;
              uint64_t v46 = v44 + v40;
              uint64_t v47 = v28 - v40;
              BOOL v48 = v44 + v40 > v28;
              if (v44 + v40 >= v28) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v46;
              }
              if (v48)
              {
                uint64_t v40 = v43;
                uint64_t v49 = v47;
              }
              else
              {
                uint64_t v49 = 0;
              }
              uint64_t v39 = v45 + v49;
              v41 -= 64;
            }
            while (v41);
          }
          else
          {
            uint64_t v39 = 0;
          }
          char v50 = sub_10004270C(v66);
          uint64_t v51 = v39 - v38;
          uint64_t v18 = v38 + v65;
          sub_10004133C((uint64_t)v72, v20, v13, v38 + v65, v51, v50);
          sub_10001FBB8((uint64_t)v100);
          sub_1000196DC((uint64_t)v100, (uint64_t)v72);
          char v101 = 1;
          if (v80) {
            sub_100004944(v80);
          }
          if (v79) {
            sub_100004944(v79);
          }
          if (v77) {
            sub_100004944(v77);
          }
          if (v76) {
            sub_100004944(v76);
          }
          if (v75) {
            sub_100004944(v75);
          }
          if (v73) {
            sub_100004944(v73);
          }
          sub_1000414AC((uint64_t)v100, (uint64_t)v72);
          sub_100018CC8((uint64_t)&v87, v72);
          if (v74) {
            sub_100004944(v74);
          }
          if (*((void *)&v72[0] + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v72[0] + 1));
          }
          sub_100041B0C((uint64_t)&v87, v25);
          sub_1000411FC((uint64_t)v100, (uint64_t)v72);
          sub_100018CC8((uint64_t)&v102, v72);
          if (v74) {
            sub_100004944(v74);
          }
          if (*((void *)&v72[0] + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v72[0] + 1));
          }
LABEL_30:
          int v30 = 0;
          char v34 = 1;
        }
        if (*((void *)&v83 + 1)) {
          sub_100004944(*((std::__shared_weak_count **)&v83 + 1));
        }
        if ((v34 & 1) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        bzero(v26, v25);
        sub_100041C48((uint64_t)&v87, v25);
      }
      int v30 = 0;
      v71 += v25;
      goto LABEL_37;
    }
    *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
    *((void *)&v83 + 1) = 75;
    v84.i32[0] = 16;
    sub_10001D3B8(v72, &v83);
    sub_1000039A0(v78, (uint64_t)"Udif: needs to read ", 20);
    sub_10011BD44(v78, (int *)v17);
    sub_1000039A0(v78, (uint64_t)" but buffer is too small ", 25);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
    long long v29 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)&v81);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    sub_10001EB5C((uint64_t)v72);
    std::ios::~ios();
    int v30 = 2;
    uint64_t v24 = -28;
LABEL_37:
    if (v27) {
      sub_100004944(v27);
    }
    if (!v30)
    {
      v17 += 64;
      if (v17 != v70) {
        continue;
      }
    }
    goto LABEL_83;
  }
  *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v83 + 1) = 75;
  v84.i32[0] = 16;
  sub_10001D0E8(v72, &v83);
  sub_1000039A0(v78, (uint64_t)"Udif: needs to read ", 20);
  sub_10011BD44(v78, (int *)v17);
  sub_1000039A0(v78, (uint64_t)" but buffer is full", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
  long long v53 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
  std::locale::~locale((std::locale *)&v81);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  sub_10001DB34((uint64_t)v72);
LABEL_82:
  std::ios::~ios();
  uint64_t v24 = -28;
LABEL_83:
  long long v54 = *(void **)(v68 + 16);
  if (v54 != (void *)(v68 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v54[5] + 144))(v54[5]);
      long long v55 = (void *)v54[1];
      if (v55)
      {
        do
        {
          char v56 = v55;
          long long v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          char v56 = (void *)v54[2];
          BOOL v57 = *v56 == (void)v54;
          long long v54 = v56;
        }
        while (!v57);
      }
      long long v54 = v56;
    }
    while (v56 != (void *)(v68 + 24));
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if ((void)v117)
    {
      uint64_t v58 = (unsigned int *)__p;
      long long v59 = (unsigned int *)((char *)__p + 40 * v117);
      uint64_t v60 = v119;
      while (1)
      {
        do
        {
          int v61 = v60[16];
          v60 += 16;
        }
        while (!v61);
        int v62 = sub_10001D688(v58);
        uint64_t v24 = v62;
        if (v62 < 0) {
          break;
        }
        if (*(unsigned char *)(v68 + 56) && (int)v60[8] > (uint64_t)v62)
        {
          *(void *)&long long v83 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
          *((void *)&v83 + 1) = 75;
          v84.i32[0] = 16;
          sub_10001D748(v72, &v83);
          sub_1000039A0(v78, (uint64_t)"Error: Not enough data read. expected: ", 39);
          std::ostream::operator<<();
          sub_1000039A0(v78, (uint64_t)" read: ", 7);
          std::ostream::operator<<();
          sub_1000039A0(v78, (uint64_t)" backend: ", 10);
          std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(v78[0] - 24)));
          uint64_t v63 = std::locale::use_facet((const std::locale *)&v81, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
          std::locale::~locale((std::locale *)&v81);
          std::ostream::put();
          std::ostream::flush();
          std::ostream::~ostream();
          sub_10001FFAC((uint64_t)v72);
          std::ios::~ios();
          uint64_t v24 = -5;
          break;
        }
        v58 += 10;
        if (v58 == v59)
        {
          uint64_t v24 = v71;
          break;
        }
      }
    }
    else
    {
      uint64_t v24 = v71;
    }
  }
  if (v96) {
    sub_100004944(v96);
  }
  if (v88) {
    sub_100004944(v88);
  }
  sub_1000197F0((uint64_t)v100);
  if (v111) {
    sub_100004944(v111);
  }
  if (v103) {
    sub_100004944(v103);
  }
  if (*((void *)&v117 + 1) && v118 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v120 + 1) && v121 != v119) {
    operator delete(v119);
  }
  return v24;
}

void sub_100061814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (STACK[0x620] && a12 != STACK[0x610]) {
    operator delete((void *)STACK[0x610]);
  }
  if (STACK[0x8B8])
  {
    if (a13 != STACK[0x8A8]) {
      operator delete((void *)STACK[0x8A8]);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100061980()
{
  return 4294967251;
}

uint64_t sub_100061988(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1001A6A30;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a1 + 40;
  *(void *)(a1 + 48) = 0;
  sub_1001188E8(a2 + 64, (uint64_t)v7);
  v6[0] = v3;
  v6[1] = v4;
  sub_10001A21C(v6, (uint64_t)v7);
  if (v9) {
    sub_100004944(v9);
  }
  sub_100019CE0((uint64_t)v7, v8);
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void sub_100061A34(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    sub_100004944(v5);
  }
  sub_100019CE0(v2, *v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100061A58(uint64_t a1)
{
  *(void *)a1 = off_1001A6A30;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_100061AB0(uint64_t a1)
{
  *(void *)a1 = off_1001A6A30;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_100004944(v2);
  }
  sub_100019CE0(a1 + 16, *(void **)(a1 + 24));
  operator delete();
}

uint64_t sub_100061B28(uint64_t a1, void *a2)
{
  long long v2 = *(_OWORD *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 56);
  long long v13 = v2;
  long long v14 = *(_OWORD *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  int v17 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a1 + 128);
  uint64_t v4 = a2[7];
  uint64_t v5 = a2[8];
  uint64_t v6 = a2[9];
  uint64_t v7 = (std::__shared_weak_count *)a2[15];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t i = 0; ; ++i)
  {
    BOOL v9 = (void)v12 == v4 && *((void *)&v12 + 1) == v5;
    if (v9 && (void)v13 == v6) {
      break;
    }
    sub_100040CA0((uint64_t)&v12);
  }
  if (v7) {
    sub_100004944(v7);
  }
  if (v17) {
    sub_100004944(v17);
  }
  return i;
}

void sub_100061BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (v17) {
    sub_100004944(v17);
  }
  if (a17) {
    sub_100004944(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061C20(uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v5 << 6;
  BOOL v9 = (uint64_t *)(*a4 + 32);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v6 = v12 + v16;
    v8 -= 64;
  }
  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

uint64_t sub_100061CB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000EDA68(v4, *a1);
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  long long v13 = v6;
  long long v14 = v7;
  *(_OWORD *)BOOL v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  sub_10005FD08(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(unsigned char *)(a2 + 520) = 1;
  return sub_10005FE78((uint64_t)&v10);
}

void sub_100061D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    sub_10005FE78((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    sub_10005FB10();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061DF4@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100061F20((unint64_t *)&v5, *a1, a2);
  v6[0] = v5;
  int v7 = 3;
  sub_10005FD08((uint64_t)v8, (uint64_t)v6);
  int v9 = 1;
  sub_10005FD08(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(unsigned char *)(a3 + 520) = 1;
  sub_10005FE78((uint64_t)v8);
  return sub_10005FE78((uint64_t)v6);
}

void sub_100061EAC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a2)
  {
    sub_10005FE78((uint64_t)&STACK[0x210]);
    sub_10005FE78((uint64_t)va);
    __cxa_begin_catch(a1);
    sub_10005FB10();
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_100061F20(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  unint64_t v6 = 512;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_10005E980((uint64_t)exception, (uint64_t)"raw_header", 0x16u);
  }
  *a1 = v6;
  a1[1] = v5 / v6;
  return a1;
}

void sub_100061FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100061FE0(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const std::error_category *sub_10006201C@<X0>(const std::error_category *result@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(result[70].__vftable) == 12 || result[3].__vftable)
  {
    *(unsigned char *)a2 = 0;
    char v3 = 1;
  }
  else
  {
    *(void *)&long long v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + 1) = 81;
    int v5 = 16;
    sub_100062178(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35);
    std::ostream::~ostream();
    sub_100062370((uint64_t)v6);
    std::ios::~ios();
    __n128 result = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6;
    *(void *)(a2 + 8) = result;
  }
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

void sub_1000620E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10006229C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000620F4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  long long v2 = a1;
  __n128 result = *a1;
  if (result
  {
    int v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    long long v2 = a2;
  }
  *long long v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_100062178(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_1000622E0((uint64_t)a1, a2);
  *a1 = off_1001A6AD0;
  a1[45] = &off_1001A6BD0;
  a1[46] = &off_1001A6BF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6AD0;
  a1[45] = off_1001A6B58;
  a1[46] = off_1001A6B80;
  return a1;
}

void sub_100062278(_Unwind_Exception *a1)
{
  sub_100062370(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006229C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000622E0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6C68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006235C(_Unwind_Exception *a1)
{
}

uint64_t sub_100062370(uint64_t a1)
{
  *(void *)a1 = off_1001A6C68;
  sub_100062778(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000624AC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100062370(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100062514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006254C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000625B4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100062370(v1);
  return std::ios::~ios();
}

void sub_100062600(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100062370(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100062664(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100062370(v1);
  return std::ios::~ios();
}

void sub_1000626C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100062370(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100062740(uint64_t a1)
{
  sub_100062370(a1);
  operator delete();
}

uint64_t sub_100062778(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000628FC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000628D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000628FC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 617;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 617;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_100062AE8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100062B20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_100062B50(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_100062B94(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100062C54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100062C0C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10004B1A4();
  }
  return operator new(24 * a2);
}

uint64_t sub_100062C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 24);
      a3 -= 24;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100062CF0((uint64_t)v12);
  return v10;
}

uint64_t sub_100062CF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100062D28(a1);
  }
  return a1;
}

void sub_100062D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100004944(v3);
    }
    v1 += 24;
  }
}

void **sub_100062D6C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100062DA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    int v4 = *(std::__shared_weak_count **)(v1 - 16);
    if (v4)
    {
      sub_100004944(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void sub_100062DF4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100062E48((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100062E48(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    int v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      sub_100004944(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_100062E94(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001A9300;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_10000A2C4(v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 48) = *(void *)(a2 + 32);
    *(_OWORD *)int v4 = v5;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  return a1;
}

void sub_100062F2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100062F44(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100063814((uint64_t)a1, a2);
  *a1 = off_1001A6D50;
  a1[45] = &off_1001A6E50;
  a1[46] = &off_1001A6E78;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6D50;
  a1[45] = off_1001A6DD8;
  a1[46] = off_1001A6E00;
  return a1;
}

void sub_100063044(_Unwind_Exception *a1)
{
  sub_1000638A4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100063068(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000630AC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    if (v8) {
      sub_100004944(v8);
    }
    long long v9 = *(std::__shared_weak_count **)(a1 + 584);
    *(_OWORD *)(a1 + 576) = 0u;
    if (v9) {
      sub_100004944(v9);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 600);
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 600) = 0;
    if (v10) {
      sub_100004944(v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 616);
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 616) = 0;
    if (v11) {
      sub_100004944(v11);
    }
    if (*(char *)(a1 + 23) < 0)
    {
      sub_10000A2C4(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v30 = *(void *)(a1 + 16);
    }
    v27[0] = 2 * ((a2 - 1) < 2);
    sub_100064CC8((uint64_t)__p, v27, &v24);
    long long v12 = v24;
    long long v24 = 0uLL;
    char v13 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v12;
    if (v13)
    {
      sub_100004944(v13);
      if (*((void *)&v24 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 568) = a2;
    operator new();
  }
  sub_10005E0D4((const std::error_category *)a1, (BOOL *)v27);
  if (!v28)
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    sub_1000640B0(__p, &v24);
    sub_1000039A0(v31, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41);
    uint64_t v16 = sub_10005D920((uint64_t)v27);
    sub_100064018((uint64_t)__p, v16);
    std::ostream::~ostream();
    sub_100064EF0((uint64_t)__p);
    std::ios::~ios();
    uint64_t result = (_OWORD *)sub_10005D920((uint64_t)v27);
    *(_OWORD *)a4 = *result;
    goto LABEL_24;
  }
  if (LOBYTE(v27[0]))
  {
    *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v24 + 1) = 83;
    int v25 = 16;
    sub_100064B60(__p, &v24);
    sub_1000039A0(v31, (uint64_t)"Diskimageuio: decryption key missing", 36);
    std::ostream::~ostream();
    sub_1000697C0((uint64_t)__p);
    std::ios::~ios();
    uint64_t result = (_OWORD *)make_error_code(162);
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v15;
LABEL_24:
    *(unsigned char *)(a4 + 16) = 0;
    return result;
  }
  *(void *)&long long v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v24 + 1) = 83;
  int v25 = 2;
  sub_100064218(__p, &v24);
  sub_1000039A0(v31, (uint64_t)"Diskimageuio: backend isn't locked", 34);
  std::ostream::~ostream();
  sub_1000656F4((uint64_t)__p);
  std::ios::~ios();
  sub_100064380(a1, 0, (uint64_t)__p);
  if (v32)
  {
    uint64_t v17 = sub_100064988((uint64_t)__p);
    sub_10005EE64(a1 + 48, v17);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v17 + 512);
    *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v22 + 1) = 83;
    int v23 = 2;
    sub_1000649F8(&v24, &v22);
    sub_1000039A0(v26, (uint64_t)"Diskimageuio: resolved disk image format ", 41);
    diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream();
    sub_100068FBC((uint64_t)&v24);
    uint64_t result = (_OWORD *)std::ios::~ios();
    *(unsigned char *)a4 = 0;
    char v18 = 1;
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 564);
    if (v19)
    {
      if (*(_DWORD *)(a1 + 568) != v19)
      {
        __int16 v20 = (unsigned int *)sub_10006465C((uint64_t)__p);
        uint64_t v21 = std::generic_category();
        *(void *)&long long v24 = 35;
        *((void *)&v24 + 1) = v21;
        if ((*(unsigned int (**)(void, void, long long *))(**((void **)v20 + 1) + 32))(*((void *)v20 + 1), *v20, &v24)|| (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1), v20, v24))
        {
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 2;
          sub_100018AAC(&v24, &v22);
          sub_1000039A0(v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
          sub_1000039A0(v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream();
          sub_100018E08((uint64_t)&v24);
          std::ios::~ios();
          if (a3)
          {
            *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v22 + 1) = 83;
            int v23 = 2;
            sub_1000646B8(&v24, &v22);
            sub_1000039A0(v26, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46);
            diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
            sub_1000647DC((uint64_t)&v24);
            uint64_t result = (_OWORD *)sub_1000630AC(a1, *(unsigned int *)(a1 + 564), 0);
            goto LABEL_37;
          }
          *(void *)&long long v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v22 + 1) = 83;
          int v23 = 16;
          sub_100064820(&v24, &v22);
          sub_1000039A0(v26, (uint64_t)"Diskimageuio: required mode ", 28);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 564));
          sub_1000039A0(v26, (uint64_t)" is different than current mode ", 32);
          diskimage_uio::operator<<(v26, *(_DWORD *)(a1 + 568));
          sub_100064944((uint64_t)&v24);
        }
      }
    }
    uint64_t result = (_OWORD *)sub_10006465C((uint64_t)__p);
    char v18 = 0;
    *(_OWORD *)a4 = *result;
  }
  *(unsigned char *)(a4 + 16) = v18;
LABEL_37:
  if (v32) {
    return (_OWORD *)sub_10005FE78((uint64_t)__p);
  }
  return result;
}

void sub_100063690(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x458])) {
    sub_10005FE78((uint64_t)&STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100063814(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A6EE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100063890(_Unwind_Exception *a1)
{
}

uint64_t sub_1000638A4(uint64_t a1)
{
  *(void *)a1 = off_1001A6EE8;
  sub_100063CAC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000639E0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000638A4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100063A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100063A80(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100063AE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000638A4(v1);
  return std::ios::~ios();
}

void sub_100063B34(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000638A4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100063B98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000638A4(v1);
  return std::ios::~ios();
}

void sub_100063BF8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000638A4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100063C74(uint64_t a1)
{
  sub_1000638A4(a1);
  operator delete();
}

uint64_t sub_100063CAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100063E30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100063E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100063E30(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 573;
    __int16 v22 = 2082;
    int v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 573;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100064018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 360);
  int v4 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  size_t v5 = strlen(v4);
  char v6 = sub_1000039A0(v3, (uint64_t)v4, v5);
  char v8 = 58;
  sub_1000039A0(v6, (uint64_t)&v8, 1);
  std::ostream::operator<<();
  return a1;
}

void *sub_1000640B0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100064E60((uint64_t)a1, a2);
  *a1 = off_1001A6FC0;
  a1[45] = &off_1001A70C0;
  a1[46] = &off_1001A70E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A6FC0;
  a1[45] = off_1001A7048;
  a1[46] = off_1001A7070;
  return a1;
}

void sub_1000641B0(_Unwind_Exception *a1)
{
  sub_100064EF0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000641D4(uint64_t a1)
{
  return a1;
}

void *sub_100064218(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100065664((uint64_t)a1, a2);
  *a1 = off_1001A71E0;
  a1[45] = &off_1001A72E0;
  a1[46] = &off_1001A7308;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A71E0;
  a1[45] = off_1001A7268;
  a1[46] = off_1001A7290;
  return a1;
}

void sub_100064318(_Unwind_Exception *a1)
{
  sub_1000656F4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006433C(uint64_t a1)
{
  return a1;
}

double sub_100064380@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100065E68(0, (const void **)(a1 + 24), *(_DWORD *)(a1 + 564) == 0, a1, a2, (uint64_t)v21);
  if (v23)
  {
    uint64_t v5 = sub_100064988((uint64_t)v21);
    sub_10005FD08((uint64_t)v18, v5);
    unsigned int v20 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v20 > 0xB || ((1 << v20) & 0x982) == 0;
    if (v6 || *(_DWORD *)(a1 + 568) || !*(_DWORD *)(a1 + 564))
    {
      sub_10005FD08((uint64_t)&v14, (uint64_t)v18);
      unsigned int v17 = v20;
      sub_10005FD08(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v17;
      *(unsigned char *)(a3 + 520) = 1;
      sub_10005FE78((uint64_t)&v14);
    }
    else
    {
      *(void *)&long long v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + 1) = 107;
      int v13 = 2;
      sub_100066448(&v14, &v12);
      sub_1000039A0(v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46);
      uint64_t v10 = diskimage_uio::operator<<(v16, v20);
      sub_1000039A0(v10, (uint64_t)")", 1);
      std::ostream::~ostream();
      sub_1000677B0((uint64_t)&v14);
      std::ios::~ios();
      uint64_t v11 = std::generic_category();
      *(void *)a3 = 35;
      *(void *)(a3 + 8) = v11;
      *(unsigned char *)(a3 + 520) = 0;
    }
    sub_10005FE78((uint64_t)v18);
  }
  else
  {
    *(void *)&long long v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + 1) = 107;
    int v15 = 16;
    sub_1000662E0(v18, &v14);
    sub_1000039A0(v19, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38);
    uint64_t v8 = sub_10006465C((uint64_t)v21);
    sub_100064018((uint64_t)v18, v8);
    std::ostream::~ostream();
    sub_100066FAC((uint64_t)v18);
    std::ios::~ios();
    *(unsigned char *)a3 = 0;
    int v9 = v23;
    *(unsigned char *)(a3 + 520) = v23;
    if (!v9)
    {
      double result = v21[0];
      *(_OWORD *)a3 = *(_OWORD *)v21;
      return result;
    }
    sub_10005FD08(a3, (uint64_t)v21);
    *(_DWORD *)(a3 + 512) = v22;
  }
  if (v23) {
    sub_10005FE78((uint64_t)v21);
  }
  return result;
}

void sub_1000645EC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    sub_10005FE78((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006465C(uint64_t result)
{
  if (*(unsigned char *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_1001A6600;
  }
  return result;
}

void *sub_1000646B8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067F24((uint64_t)a1, a2);
  *a1 = off_1001A7A60;
  a1[45] = &off_1001A7B60;
  a1[46] = &off_1001A7B88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7A60;
  a1[45] = off_1001A7AE8;
  a1[46] = off_1001A7B10;
  return a1;
}

void sub_1000647B8(_Unwind_Exception *a1)
{
  sub_100067FB4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000647DC(uint64_t a1)
{
  return a1;
}

void *sub_100064820(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100068728((uint64_t)a1, a2);
  *a1 = off_1001A7C80;
  a1[45] = &off_1001A7D80;
  a1[46] = &off_1001A7DA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7C80;
  a1[45] = off_1001A7D08;
  a1[46] = off_1001A7D30;
  return a1;
}

void sub_100064920(_Unwind_Exception *a1)
{
  sub_1000687B8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100064944(uint64_t a1)
{
  return a1;
}

uint64_t sub_100064988(uint64_t result)
{
  if (!*(unsigned char *)(result + 520))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &off_1001A6AA0;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void *sub_1000649F8(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100068F2C((uint64_t)a1, a2);
  *a1 = off_1001A7EA0;
  a1[45] = &off_1001A7FA0;
  a1[46] = &off_1001A7FC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7EA0;
  a1[45] = off_1001A7F28;
  a1[46] = off_1001A7F50;
  return a1;
}

void sub_100064AF8(_Unwind_Exception *a1)
{
  sub_100068FBC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100064B1C(uint64_t a1)
{
  return a1;
}

void *sub_100064B60(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100069730((uint64_t)a1, a2);
  *a1 = off_1001A80C0;
  a1[45] = &off_1001A81C0;
  a1[46] = &off_1001A81E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A80C0;
  a1[45] = off_1001A8148;
  a1[46] = off_1001A8170;
  return a1;
}

void sub_100064C60(_Unwind_Exception *a1)
{
  sub_1000697C0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100064C84(uint64_t a1)
{
  return a1;
}

void sub_100064CC8(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  sub_100064D44(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100064D30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100064D44(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  int v4 = *a3;
  uint64_t v5 = sub_100126808(a2, *a3);
  sub_10005B2E0((uint64_t)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_100064DB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100064DC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A6F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100064DE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A6F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100064E38(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100064E60(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7158;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100064EDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100064EF0(uint64_t a1)
{
  *(void *)a1 = off_1001A7158;
  sub_1000652F8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006502C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100064EF0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100065094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000650CC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100065134(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100064EF0(v1);
  return std::ios::~ios();
}

void sub_100065180(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100064EF0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000651E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100064EF0(v1);
  return std::ios::~ios();
}

void sub_100065244(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100064EF0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000652C0(uint64_t a1)
{
  sub_100064EF0(a1);
  operator delete();
}

uint64_t sub_1000652F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006547C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100065454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006547C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 534;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 534;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100065664(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7378;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000656E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000656F4(uint64_t a1)
{
  *(void *)a1 = off_1001A7378;
  sub_100065AFC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100065830(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000656F4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100065898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000658D0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100065938(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000656F4(v1);
  return std::ios::~ios();
}

void sub_100065984(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000656F4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000659E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000656F4(v1);
  return std::ios::~ios();
}

void sub_100065A48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000656F4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100065AC4(uint64_t a1)
{
  sub_1000656F4(a1);
  operator delete();
}

uint64_t sub_100065AFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100065C80((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100065C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100065C80(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 539;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 539;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100065E68@<X0>(int a1@<W0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v13 = 1;
      break;
    case 1:
      goto LABEL_19;
    case 2:
      sub_10005F5EC((uint64_t)a2);
    case 7:
    case 9:
    case 12:
      int v20 = 0;
      sub_10005FD08((uint64_t)v21, (uint64_t)__p);
      int v23 = 0;
      sub_10005FD08(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 512) = v23;
      *(unsigned char *)(a6 + 520) = 1;
      sub_10005FE78((uint64_t)v21);
      return sub_10005FE78((uint64_t)__p);
    case 8:
      return sub_100061CB8(a2, a6);
    case 11:
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10000A2C4(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v19 = *(void *)(a4 + 16);
      }
      sub_10005E39C(&v17, a2, (char *)__p, a3);
    default:
      __p[0] = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      __p[1] = (void *)132;
      LODWORD(v19) = 16;
      sub_1000665B0(v21, (long long *)__p);
      sub_1000039A0(v22, (uint64_t)"Diskimageuio: Unsupported image format", 38);
      diskimage_uio::operator<<(v22, a1);
      std::ostream::~ostream();
      sub_1000667A8((uint64_t)v21);
      std::ios::~ios();
      uint64_t result = make_error_code(161);
      *(void *)a6 = result;
      *(void *)(a6 + 8) = v16;
      *(unsigned char *)(a6 + 520) = 0;
      return result;
  }
  do
  {
    int v14 = 2;
    if ((v13 - 2) >= 5)
    {
      if (v13 == 1) {
        goto LABEL_18;
      }
      if (v13 == 10) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
    }
    if (v13 == v14)
    {
      uint64_t result = sub_100065E68(v13, a2, a3, a4, a5);
      if (!*(unsigned char *)(a6 + 520)) {
        return result;
      }
      uint64_t result = sub_100064988(a6);
      int v15 = *(_DWORD *)(result + 512);
      if (v15 || !*(unsigned char *)(a6 + 520))
      {
        if (v15) {
          return result;
        }
      }
      else
      {
        sub_10005FE78(a6);
      }
    }
LABEL_18:
    uint64_t v13 = (v13 + 1);
  }
  while (v13 != 13);
LABEL_19:
  return sub_100061DF4((uint64_t *)a2, a5, a6);
}

void sub_1000661E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_10005FB10();
  }
  _Unwind_Resume(a1);
}

void *sub_1000662E0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100066F1C((uint64_t)a1, a2);
  *a1 = off_1001A7620;
  a1[45] = &off_1001A7720;
  a1[46] = &off_1001A7748;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7620;
  a1[45] = off_1001A76A8;
  a1[46] = off_1001A76D0;
  return a1;
}

void sub_1000663E0(_Unwind_Exception *a1)
{
  sub_100066FAC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100066404(uint64_t a1)
{
  return a1;
}

void *sub_100066448(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100067720((uint64_t)a1, a2);
  *a1 = off_1001A7840;
  a1[45] = &off_1001A7940;
  a1[46] = &off_1001A7968;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7840;
  a1[45] = off_1001A78C8;
  a1[46] = off_1001A78F0;
  return a1;
}

void sub_100066548(_Unwind_Exception *a1)
{
  sub_1000677B0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006656C(uint64_t a1)
{
  return a1;
}

void *sub_1000665B0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100066718((uint64_t)a1, a2);
  *a1 = off_1001A7400;
  a1[45] = &off_1001A7500;
  a1[46] = &off_1001A7528;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A7400;
  a1[45] = off_1001A7488;
  a1[46] = off_1001A74B0;
  return a1;
}

void sub_1000666B0(_Unwind_Exception *a1)
{
  sub_1000667A8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000666D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100066718(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7598;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100066794(_Unwind_Exception *a1)
{
}

uint64_t sub_1000667A8(uint64_t a1)
{
  *(void *)a1 = off_1001A7598;
  sub_100066BB0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000668E4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000667A8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006694C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100066984(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000669EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000667A8(v1);
  return std::ios::~ios();
}

void sub_100066A38(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000667A8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100066A9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000667A8(v1);
  return std::ios::~ios();
}

void sub_100066AFC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000667A8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100066B78(uint64_t a1)
{
  sub_1000667A8(a1);
  operator delete();
}

uint64_t sub_100066BB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100066D34((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100066D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100066D34(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 485;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 485;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100066F1C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A77B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100066F98(_Unwind_Exception *a1)
{
}

uint64_t sub_100066FAC(uint64_t a1)
{
  *(void *)a1 = off_1001A77B8;
  sub_1000673B4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000670E8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100066FAC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100067150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100067188(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000671F0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100066FAC(v1);
  return std::ios::~ios();
}

void sub_10006723C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100066FAC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000672A0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100066FAC(v1);
  return std::ios::~ios();
}

void sub_100067300(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100066FAC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006737C(uint64_t a1)
{
  sub_100066FAC(a1);
  operator delete();
}

uint64_t sub_1000673B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100067538((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100067510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100067538(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 495;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 495;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100067720(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A79D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006779C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000677B0(uint64_t a1)
{
  *(void *)a1 = off_1001A79D8;
  sub_100067BB8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000678EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000677B0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100067954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006798C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000679F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000677B0(v1);
  return std::ios::~ios();
}

void sub_100067A40(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000677B0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100067AA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000677B0(v1);
  return std::ios::~ios();
}

void sub_100067B04(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000677B0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100067B80(uint64_t a1)
{
  sub_1000677B0(a1);
  operator delete();
}

uint64_t sub_100067BB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100067D3C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100067D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100067D3C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 503;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 503;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100067F24(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7BF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100067FA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100067FB4(uint64_t a1)
{
  *(void *)a1 = off_1001A7BF8;
  sub_1000683BC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000680F0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100067FB4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100068158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100068190(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000681F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100067FB4(v1);
  return std::ios::~ios();
}

void sub_100068244(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100067FB4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000682A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100067FB4(v1);
  return std::ios::~ios();
}

void sub_100068308(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100067FB4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100068384(uint64_t a1)
{
  sub_100067FB4(a1);
  operator delete();
}

uint64_t sub_1000683BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100068540((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100068518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100068540(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 551;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 551;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100068728(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A7E18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000687A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000687B8(uint64_t a1)
{
  *(void *)a1 = off_1001A7E18;
  sub_100068BC0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000688F4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000687B8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006895C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100068994(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000689FC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000687B8(v1);
  return std::ios::~ios();
}

void sub_100068A48(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000687B8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100068AAC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000687B8(v1);
  return std::ios::~ios();
}

void sub_100068B0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000687B8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100068B88(uint64_t a1)
{
  sub_1000687B8(a1);
  operator delete();
}

uint64_t sub_100068BC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100068D44((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100068D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100068D44(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 554;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 554;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100068F2C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8038;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100068FA8(_Unwind_Exception *a1)
{
}

uint64_t sub_100068FBC(uint64_t a1)
{
  *(void *)a1 = off_1001A8038;
  sub_1000693C4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000690F8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100068FBC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100069160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100069198(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100069200(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100068FBC(v1);
  return std::ios::~ios();
}

void sub_10006924C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100068FBC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000692B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100068FBC(v1);
  return std::ios::~ios();
}

void sub_100069310(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100068FBC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006938C(uint64_t a1)
{
  sub_100068FBC(a1);
  operator delete();
}

uint64_t sub_1000693C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100069548((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100069520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100069548(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 561;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 561;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100069730(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8258;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000697AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000697C0(uint64_t a1)
{
  *(void *)a1 = off_1001A8258;
  sub_100069BC8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_1000698FC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000697C0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100069964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006999C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100069A04(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000697C0(v1);
  return std::ios::~ios();
}

void sub_100069A50(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000697C0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100069AB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000697C0(v1);
  return std::ios::~ios();
}

void sub_100069B14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000697C0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100069B90(uint64_t a1)
{
  sub_1000697C0(a1);
  operator delete();
}

uint64_t sub_100069BC8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100069D4C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100069D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100069D4C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 565;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 565;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100069F34(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006A09C((uint64_t)a1, a2);
  *a1 = off_1001A82E0;
  a1[45] = &off_1001A83E0;
  a1[46] = &off_1001A8408;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A82E0;
  a1[45] = off_1001A8368;
  a1[46] = off_1001A8390;
  return a1;
}

void sub_10006A034(_Unwind_Exception *a1)
{
  sub_10006A12C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006A058(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006A09C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8478;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006A118(_Unwind_Exception *a1)
{
}

uint64_t sub_10006A12C(uint64_t a1)
{
  *(void *)a1 = off_1001A8478;
  sub_10006A534(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006A268(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006A12C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006A2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006A308(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006A370(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006A12C(v1);
  return std::ios::~ios();
}

void sub_10006A3BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006A12C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006A420(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006A12C(v1);
  return std::ios::~ios();
}

void sub_10006A480(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006A12C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006A4FC(uint64_t a1)
{
  sub_10006A12C(a1);
  operator delete();
}

uint64_t sub_10006A534(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006A6B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006A690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006A6B8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 610;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 610;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_10006A8A0(unsigned int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_10006A92C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10006A918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10006A92C(void *a1, unsigned int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  sub_10005B2E0((uint64_t)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_10006A988(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006A99C(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    operator delete();
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_10006AA10(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    uint64_t result = sub_10006AA8C(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10006AA70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10006AA8C(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_10004B570();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10006AAD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A84F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006AAF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A84F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10006AB44(uint64_t a1)
{
}

void sub_10006AB50(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    operator delete();
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

void sub_10006ABD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A8548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10006ABF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A8548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10006AC48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned char *sub_10006AC70@<X0>(const std::error_category *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10005E0D4(a1, v11);
  if (v11[16])
  {
    uint64_t result = (unsigned char *)sub_10006AF5C((uint64_t)v11);
    if (*result)
    {
      *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + 1) = 84;
      int v8 = 16;
      sub_10006AFCC(v9, &v7);
      sub_1000039A0(v10, (uint64_t)"Diskimageuio: image is locked", 29);
      std::ostream::~ostream();
      sub_10006B9C8((uint64_t)v9);
      std::ios::~ios();
      uint64_t result = (unsigned char *)make_error_code(162);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v5;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      char v4 = 1;
    }
  }
  else
  {
    *(void *)&long long v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + 1) = 84;
    int v8 = 16;
    sub_10006ADF4(v9, &v7);
    sub_1000039A0(v10, (uint64_t)"Diskimageuio: can't get lock status ", 36);
    uint64_t v6 = sub_10005D920((uint64_t)v11);
    sub_100064018((uint64_t)v9, v6);
    std::ostream::~ostream();
    sub_10006B1C4((uint64_t)v9);
    std::ios::~ios();
    uint64_t result = (unsigned char *)sub_10005D920((uint64_t)v11);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

void sub_10006ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10006B0F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10006ADF4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006B134((uint64_t)a1, a2);
  *a1 = off_1001A85A0;
  a1[45] = &off_1001A86A0;
  a1[46] = &off_1001A86C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A85A0;
  a1[45] = off_1001A8628;
  a1[46] = off_1001A8650;
  return a1;
}

void sub_10006AEF4(_Unwind_Exception *a1)
{
  sub_10006B1C4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006AF18(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006AF5C(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v1 = (long long *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = *v1;
    *(void *)exception = &off_1001A6AA0;
    *(_OWORD *)(exception + 8) = v3;
  }
  return result;
}

void *sub_10006AFCC(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10006B938((uint64_t)a1, a2);
  *a1 = off_1001A87C0;
  a1[45] = &off_1001A88C0;
  a1[46] = &off_1001A88E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A87C0;
  a1[45] = off_1001A8848;
  a1[46] = off_1001A8870;
  return a1;
}

void sub_10006B0CC(_Unwind_Exception *a1)
{
  sub_10006B9C8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006B0F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006B134(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8738;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006B1B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B1C4(uint64_t a1)
{
  *(void *)a1 = off_1001A8738;
  sub_10006B5CC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006B300(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006B1C4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006B368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006B3A0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006B408(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006B1C4(v1);
  return std::ios::~ios();
}

void sub_10006B454(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006B1C4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006B4B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006B1C4(v1);
  return std::ios::~ios();
}

void sub_10006B518(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006B1C4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006B594(uint64_t a1)
{
  sub_10006B1C4(a1);
  operator delete();
}

uint64_t sub_10006B5CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006B750((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006B728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006B750(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 645;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 645;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10006B938(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8958;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006B9B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10006B9C8(uint64_t a1)
{
  *(void *)a1 = off_1001A8958;
  sub_10006BDD0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006BB04(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006B9C8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006BB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006BBA4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006BC0C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006B9C8(v1);
  return std::ios::~ios();
}

void sub_10006BC58(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006B9C8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006BCBC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006B9C8(v1);
  return std::ios::~ios();
}

void sub_10006BD1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006B9C8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006BD98(uint64_t a1)
{
  sub_10006B9C8(a1);
  operator delete();
}

uint64_t sub_10006BDD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006BF54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006BF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006BF54(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 650;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 650;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10006C13C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006C2A4((uint64_t)a1, a2);
  *a1 = off_1001A89E0;
  a1[45] = &off_1001A8AE0;
  a1[46] = &off_1001A8B08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A89E0;
  a1[45] = off_1001A8A68;
  a1[46] = off_1001A8A90;
  return a1;
}

void sub_10006C23C(_Unwind_Exception *a1)
{
  sub_10006C334(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006C260(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006C2A4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8B78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006C320(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C334(uint64_t a1)
{
  *(void *)a1 = off_1001A8B78;
  sub_10006C73C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006C470(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006C334(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006C4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006C510(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006C578(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006C334(v1);
  return std::ios::~ios();
}

void sub_10006C5C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006C334(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006C628(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006C334(v1);
  return std::ios::~ios();
}

void sub_10006C688(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006C334(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006C704(uint64_t a1)
{
  sub_10006C334(a1);
  operator delete();
}

uint64_t sub_10006C73C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006C8C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006C898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006C8C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 681;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 681;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const std::error_category *sub_10006CAA8@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 69;
  int v4 = 16;
  sub_10006CC38(v5, &v3);
  sub_1000039A0(v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66);
  std::ostream::~ostream();
  sub_10006CE30((uint64_t)v5);
  std::ios::~ios();
  uint64_t result = std::generic_category();
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void sub_10006CB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostream::~ostream();
  sub_10006CE30((uint64_t)va);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_10006CB74(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_10006CB8C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_10006CBA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_10006CBB4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_10005E148(*(void *)(*(void *)(*(void *)a1 + 8) - 8), &v3);
  *(void *)a2 = v3.n128_u64[0];
  *(unsigned char *)(a2 + 16) = 1;
}

uint64_t sub_10006CC00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void *sub_10006CC38(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  sub_10006CDA0((uint64_t)a1, a2);
  *a1 = off_1001A8C30;
  a1[45] = &off_1001A8D30;
  a1[46] = &off_1001A8D58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A8C30;
  a1[45] = off_1001A8CB8;
  a1[46] = off_1001A8CE0;
  return a1;
}

void sub_10006CD38(_Unwind_Exception *a1)
{
  sub_10006CE30(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10006CD5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006CDA0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A8DC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10006CE1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006CE30(uint64_t a1)
{
  *(void *)a1 = off_1001A8DC8;
  sub_10006D238(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10006CF6C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10006CE30(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006CFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10006D00C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10006D074(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006CE30(v1);
  return std::ios::~ios();
}

void sub_10006D0C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10006CE30(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10006D124(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006CE30(v1);
  return std::ios::~ios();
}

void sub_10006D184(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10006CE30(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10006D200(uint64_t a1)
{
  sub_10006CE30(a1);
  operator delete();
}

uint64_t sub_10006D238(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10006D3BC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10006D394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006D3BC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 112;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 112;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_10006D5A4@<X0>(void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x60uLL);
  uint64_t result = sub_10006D600(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10006D5EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10006D600(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A84F8;
  sub_100140024(a1 + 3);
  return a1;
}

void sub_10006D648(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10006D65C(std::exception *a1)
{
  sub_1000036A0(a1);
  operator delete();
}

void ***sub_10006D694(void ***result, void **a2)
{
  unsigned __int8 v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10006D774(&v3);
    operator delete();
  }
  return result;
}

void *sub_10006D6E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10004B1A4();
  }
  return operator new(16 * a2);
}

uint64_t sub_10006D720(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10006D774(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        int v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_10006D7FC(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = &v15;
  uint64_t v16 = v4;
  long long v14 = xmmword_10016E380;
  long long v15 = v5;
  sub_10001A580((uint64_t)a1, &v13);
  sub_100004A50(&v13);
  uint64_t v6 = a1[1];
  uint64_t v13 = (long long *)*a1;
  uint64_t v7 = (uint64_t)v13 + 24 * v6;
  uint64_t v8 = a1[19];
  uint64_t v11 = (unint64_t *)a1[18];
  uint64_t v12 = v7;
  uint64_t v10 = &v11[v8];
  sub_100041340((uint64_t)(a1 + 26), (uint64_t *)&v13, &v12, &v11, &v10, *((void *)a2 + 3), *((void *)a2 + 2));
  return a1;
}

void sub_10006D8CC(_Unwind_Exception *a1)
{
  sub_10001A62C(v1);
  _Unwind_Resume(a1);
}

std::string *sub_10006D8F0(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_10006D958(a1, a2, &a2[v3]);
  return a1;
}

void sub_10006D93C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10006D958(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v14 = this;
    if ((v6 & 0x80) != 0) {
      long long v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_10006DAD0(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_10006DAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10006DAD0(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100003D78();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    _OWORD v4[2] = v9 | 0x8000000000000000;
    *BOOL v4 = result;
    BOOL v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)BOOL v4 = 0;
  return result;
}

__n128 sub_10006DB78(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((unsigned char *)this + 16)) {
    BOOL v4 = *((unsigned char *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }
  if (*((unsigned char *)this + 16))
  {
    if (!*((unsigned char *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((unsigned char *)this + 16);
      *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
      *((unsigned char *)a2 + 16) = v6;
      return result;
    }
  }
  else if (*((unsigned char *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0;
    char v8 = *((unsigned char *)this + 16);
    *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)a2 + 16) = v8;
    goto LABEL_11;
  }
  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void sub_10006DC78(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(unsigned char *)(v1 + 16) = 0;
  __cxa_end_catch();
}

uint64_t sub_10006DC94(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL) {
    sub_1000289E8();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_1001A9050[v1])(&v5, v3);
}

uint64_t sub_10006DD0C(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  if (v1 == 0xFFFFFFFFLL) {
    sub_1000289E8();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_1001A9090[v1])(&v5, v3);
}

uint64_t sub_10006DD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24) - v2;
  uint64_t v4 = v3 / 48;
  if (v3 < 49)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      int v8 = *v7;
      v7 -= 12;
      if (v8 != 2) {
        break;
      }
      ++v5;
    }
    while (v6-- > 1);
  }
  uint64_t v10 = v4 + ~v5;
  if (v5) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_10006DDF8(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a4 + 144);
  uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 4))(a1);
  if (v6 > (*((uint64_t (**)(_DWORD **))*a1 + 3))(a1) * v7) {
    return -5;
  }
  if (*a1[2]) {
    return -78;
  }
  uint64_t v9 = *(void ***)(a2 + 16);
  if (!(*(unsigned int (**)(void))(*(void *)(*v9)[1] + 40))((*v9)[1]) || *a1[2]) {
    return -78;
  }
  return sub_100004AC0(*v9);
}

uint64_t sub_10006DF00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  uint64_t v3 = *(void ***)(a2 + 24);
  if (v2 == v3) {
    return 4294967218;
  }
  uint64_t v4 = 4294967218;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)(*v2)[1] + 40))((*v2)[1]))
    {
      uint64_t v4 = sub_10001494C(*v2);
      if (v4) {
        break;
      }
    }
    v2 += 2;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_10006DF94(uint64_t a1, void **a2, unsigned char *a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001A8EF8;
  *(void *)(a1 + 16) = 0;
  uint64_t v43 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  long long v42 = (void *)(a1 + 56);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void))(*(void *)**a2 + 24))(**a2);
  *(unsigned char *)(a1 + 48) = 0;
  if ((*a3 & 2) != 0)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = (uint64_t (***)(void))*(v6 - 3);
    int v8 = (std::__shared_weak_count *)*(v6 - 2);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v6 = a2[1];
    }
    uint64_t v9 = v6 - 3;
    if (v6 - 3 == *a2)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        unint64_t v11 = (uint64_t (***)(void))*(v9 - 3);
        uint64_t v10 = (std::__shared_weak_count *)*(v9 - 2);
        v9 -= 3;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = sub_10006DC94(v7);
        char v13 = v12;
        uint64_t v7 = v11;
        uint64_t v46 = v12;
        uint64_t v47 = v14;
        uint64_t v15 = sub_10006DD0C(v11);
        uint64_t v52 = v15;
        uint64_t v53 = v16;
        if (v13)
        {
LABEL_8:
          if ((_BYTE)v15)
          {
LABEL_9:
            if (v46 != v52 || v47 != v53)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              void *exception = &off_1001C3DE8;
              uint64_t v38 = std::generic_category();
              exception[1] = 166;
              exception[2] = v38;
              *((unsigned char *)exception + 24) = 0;
              *((unsigned char *)exception + 48) = 0;
              exception[7] = "Corrupted shadow file(s) chain";
            }
          }
          else
          {
            uint64_t v20 = 1;
            while (v20 != 16)
            {
              if (*((unsigned __int8 *)&v52 + v20++))
              {
                if ((unint64_t)(v20 - 2) <= 0xE) {
                  goto LABEL_9;
                }
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
          while (v18 != 16)
          {
            if (*((unsigned __int8 *)&v46 + v18++))
            {
              if ((unint64_t)(v18 - 2) <= 0xE) {
                goto LABEL_8;
              }
              break;
            }
          }
        }
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v8) {
          sub_100004944(v8);
        }
        if (v10) {
          sub_100004944(v10);
        }
        int v8 = v10;
      }
      while (v9 != *a2);
    }
    if (v10) {
      sub_100004944(v10);
    }
  }
  uint64_t v22 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    unint64_t v25 = 0;
    uint64_t v41 = "Block size mismatch in DiskImageStackable";
    do
    {
      long long v26 = (_DWORD *)(v22 + v23);
      uint64_t v27 = *(void *)(a1 + 40);
      if (v27 != (*(uint64_t (**)(void))(**(void **)(v22 + v23) + 24))(*(void *)(v22 + v23))) {
        goto LABEL_66;
      }
      if (v26[4] == 2)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v28 >= 2 && v25 != v28 - 2)
        {
          uint64_t v30 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v30)
          {
            {
              uint64_t v41 = "Currently, cache can only be added directly above plugin";
LABEL_66:
              uint64_t v39 = __cxa_allocate_exception(0x40uLL);
              void *v39 = &off_1001C3DE8;
              uint64_t v40 = std::generic_category();
              v39[1] = 4294967274;
              _OWORD v39[2] = v40;
              *((unsigned char *)v39 + 24) = 0;
              *((unsigned char *)v39 + 48) = 0;
              v39[7] = v41;
            }
          }
        }
      }
      uint64_t v31 = v22 + v23;
      uint64_t v33 = *(void *)(v22 + v23);
      char v32 = *(std::__shared_weak_count **)(v22 + v23 + 8);
      uint64_t v34 = v33;
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v34 = *(void *)v26;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 96))(v34))
      {
        char v45 = 1;
        sub_10007345C((uint64_t)&v52, v33, &v45);
      }
      LODWORD(v46) = v26[4];
      uint64_t v47 = *(void *)v26;
      long long v35 = *(std::__shared_weak_count **)(v31 + 8);
      BOOL v48 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = v33;
      char v50 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = (*(uint64_t (**)(void))(**(void **)v26 + 32))();
      sub_10006E608(v43, (uint64_t)&v46);
      if (v26[4] == 2) {
        v24 |= (*(uint64_t (**)(void))(**(void **)v26 + 40))();
      }
      if (v50) {
        sub_100004944(v50);
      }
      if (v48) {
        sub_100004944(v48);
      }
      if (v32) {
        sub_100004944(v32);
      }
      ++v25;
      uint64_t v22 = (uint64_t)*a2;
      v23 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if (v24)
    {
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 0x40000000;
      void v44[2] = sub_10006E76C;
      v44[3] = &unk_1001A8FB8;
      v44[4] = a1;
      sub_100072470((uint64_t)v42);
      sub_100071718(v42, (uint64_t)v44, 600000000);
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  return a1;
}

void sub_10006E564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_1000724CC(v19);
  a19 = a12;
  sub_100072528(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E608(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555) {
      sub_10004B570();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      char v13 = (char *)sub_100072388(v4, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[48 * v9];
    uint64_t v18 = &v13[48 * v12];
    sub_1000722B0((uint64_t)v16, a2);
    std::string::size_type v17 = v16 + 48;
    sub_1000722F4(a1, &v15);
    uint64_t v8 = a1[1];
    sub_100072420((uint64_t)&v15);
  }
  else
  {
    sub_1000722B0(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_10006E71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100072420((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006E730(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_100004944(v3);
  }
  return a1;
}

uint64_t sub_10006E76C(uint64_t a1)
{
  return sub_10006E774(*(void *)(a1 + 32));
}

uint64_t sub_10006E774(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  while (v1 != v2)
  {
    __n128 result = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8));
    if (result) {
      BOOL v3 = *(_DWORD *)v1 == 2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 136))(*(void *)(v1 + 8));
      __n128 result = sub_10001494C(v4);
      if (v4) {
        __n128 result = (*(uint64_t (**)(void *))(*v4 + 40))(v4);
      }
    }
    v1 += 48;
  }
  return result;
}

void sub_10006E844(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1001518A4();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006E860(uint64_t a1)
{
  *(void *)a1 = off_1001A8EF8;
  sub_10006E774(a1);
  sub_1000724CC(a1 + 56);
  BOOL v3 = (void **)(a1 + 16);
  sub_100072528(&v3);
  return a1;
}

void sub_10006E8CC(uint64_t a1)
{
  sub_10006E860(a1);
  operator delete();
}

unint64_t sub_10006E904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *((unsigned __int8 *)a6 + 16);
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  if ((v16 & 2) != 0) {
    uint64_t v19 = *a6;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  v22[0] = v19 * v15;
  v22[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  char v23 = 2;
  sub_100041EC4(a3, (uint64_t)v22, a4, (uint64_t)v24);
  unint64_t v20 = sub_10006EA38(a1, a2, (uint64_t)v24, (uint64_t)&v27, a5, a7, a8, a9, a10);
  if (v29) {
    sub_100004944(v29);
  }
  if (v28) {
    sub_100004944(v28);
  }
  if (v26) {
    sub_100004944(v26);
  }
  if (v25) {
    sub_100004944(v25);
  }
  return v20;
}

void sub_10006EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10006ED38((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10006EA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v14 = sub_10007009C();
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  v61[0] = v14;
  v61[1] = v15;
  if ((v14 & 0x8000000000000000) == 0 || !v14)
  {
    unint64_t v18 = *(void *)(a3 + 144);
    BOOL v19 = v15 < v18 || v14 > ((*(void *)(a4 + 144) - v18) & ~((uint64_t)(*(void *)(a4 + 144) - v18) >> 63));
    BOOL v20 = 0;
    if (a5 && v19)
    {
      unint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a4 + 144) - v18;
      unint64_t v23 = v22 & ~(v22 >> 63);
      if (v23 <= v21) {
        unint64_t v23 = *(void *)(a1 + 40);
      }
      if (v22 <= 0) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = v23;
      }
      v59[0] = v18 / v21;
      v59[1] = (v18 + v21 + v24 - 1) / v21;
      char v60 = 2;
      BOOL v20 = sub_10006F390(a1, a2, v61, (uint64_t)v59, a5, a9);
    }
    unint64_t v25 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v46 = *(void *)a3;
    uint64_t v47 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v48[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)(a3 + 25);
    uint64_t v49 = *(void *)(a3 + 48);
    long long v50 = *(_OWORD *)(a3 + 56);
    long long v51 = *(_OWORD *)(a3 + 72);
    long long v52 = *(_OWORD *)(a3 + 88);
    char v53 = *(unsigned char *)(a3 + 104);
    long long v26 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v54 = *(void *)(a3 + 112);
    long long v55 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v56 = *(_OWORD *)(a3 + 128);
    uint64_t v57 = *(void *)(a3 + 144);
    char v58 = *(unsigned char *)(a3 + 152);
    uint64_t v27 = *(std::__shared_weak_count **)(a4 + 8);
    uint64_t v33 = *(void *)a4;
    uint64_t v34 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v35 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v35[9] = *(_OWORD *)(a4 + 25);
    uint64_t v36 = *(void *)(a4 + 48);
    long long v28 = *(_OWORD *)(a4 + 72);
    long long v37 = *(_OWORD *)(a4 + 56);
    long long v38 = v28;
    long long v39 = *(_OWORD *)(a4 + 88);
    char v40 = *(unsigned char *)(a4 + 104);
    long long v29 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v41 = *(void *)(a4 + 112);
    long long v42 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(void *)(a4 + 144);
    long long v43 = *(_OWORD *)(a4 + 128);
    uint64_t v44 = v30;
    char v45 = *(unsigned char *)(a4 + 152);
    uint64_t v16 = sub_10006FA08(a1, a2, (uint64_t)&v46, (uint64_t)&v33, v61, a5);
    if (v42) {
      sub_100004944(v42);
    }
    if (v34) {
      sub_100004944(v34);
    }
    if (v55) {
      sub_100004944(v55);
    }
    if (v47) {
      sub_100004944(v47);
    }
    if ((v16 & 0x8000000000000000) == 0 || !v16)
    {
      uint64_t v31 = *(void *)(a4 + 144);
      if (v20) {
        return sub_10014BA1C(a3, a4, (v31 - *(void *)(a3 + 144)) & ~((v31 - *(void *)(a3 + 144)) >> 63), v61);
      }
      else {
        return v31 - v17;
      }
    }
  }
  return v16;
}

void *sub_10006ED38(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    sub_100004944(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[21];
  if (v3) {
    sub_100004944(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[15];
  if (v4) {
    sub_100004944(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    sub_100004944(v5);
  }
  return a1;
}

double sub_10006ED8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((*(unsigned char *)(a4 + 16) & 2) != 0) {
    uint64_t v8 = *(void *)a4;
  }
  else {
    uint64_t v8 = *(void *)a4 + 1;
  }
  unint64_t v9 = (*(unsigned char *)(a4 + 16) & 1) + *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = *(void *)(v10 + 48 * a3 + 40);
  if (v12 < v9) {
    unint64_t v9 = *(void *)(v10 + 48 * a3 + 40);
  }
  *(void *)&long long v30 = v8;
  *((void *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(void *)(v10 + 48 * a3 + 88)) {
    goto LABEL_18;
  }
  *(void *)&long long v28 = *(void *)(v10 + 48 * a3 + 88);
  *((void *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  if (!sub_10006F054((uint64_t)&v28, (uint64_t)&v30))
  {
    uint64_t v10 = *(void *)(a1 + 16);
LABEL_18:
    uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
    *(void *)a5 = *(void *)(v10 + 48 * a3 + 8);
    double result = *(double *)&v30;
    *(_OWORD *)(a5 + 8) = v30;
    *(void *)(a5 + 24) = v31;
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 48) = 6;
    *(void *)(a5 + 56) = off_10019E428;
    *(void *)(a5 + 80) = a5 + 56;
    return result;
  }
  long long v24 = v28;
  uint64_t v25 = v29;
  sub_10006F228((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  uint64_t v14 = v30;
  if ((v31 & 2) == 0) {
    uint64_t v14 = v30 + 1;
  }
  uint64_t v15 = v26;
  if ((v27 & 2) == 0) {
    uint64_t v15 = v26 + 1;
  }
  *(void *)&long long v30 = v14;
  *((void *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
  uint64_t v32 = *(void *)(*(void *)(a1 + 16) + 48 * a3 + 8);
  long long v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = 0;
  uint64_t v36 = v16;
  int v37 = 6;
  v38[0] = off_10019E428;
  v38[3] = v38;
  unint64_t v17 = operator new(0x20uLL);
  uint64_t v22 = v17 + 4;
  unint64_t v23 = (char *)(v17 + 4);
  *(_OWORD *)unint64_t v17 = v26;
  v17[2] = v27;
  *((_DWORD *)v17 + 6) = 1;
  std::string __p = v17;
  sub_1000B0220((uint64_t)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  sub_10000C78C(v38);
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
  }
  return result;
}

void sub_10006F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100008B48((uint64_t)&a25);
  _Unwind_Resume(a1);
}

BOOL sub_10006F054(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4 < *(void *)a1) {
        return 0;
      }
    }
    else
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (*(void *)a1 >= v4) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 >= v4 || *(void *)a1 + 1 >= v4) {
      return 0;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v6 == 3)
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (v7 < *(void *)a2) {
        return 0;
      }
    }
    else
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v7) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v7 || *(void *)a2 + 1 >= v7) {
      return 0;
    }
  }
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 16) == 3)
    {
      if (v4 < v3) {
        return 0;
      }
    }
    else if (v3 >= v4)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if ((v6 & 2) != 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v8 + 1;
  }
  if ((v2 & 1) + v4 - 1 < v11) {
    return 0;
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if (!(_BYTE)v2)
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
    goto LABEL_60;
  }
  if (v2 == 3)
  {
    if (v4 >= v3) {
      goto LABEL_60;
    }
    return 0;
  }
  if (v3 >= v4) {
    return 0;
  }
LABEL_60:
  if ((v2 & 2) == 0) {
    ++v3;
  }
  return (v6 & 1) + v7 - 1 >= v3;
}

double sub_10006F228@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (v4 < *a1) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (*a1 >= v4) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4) {
      goto LABEL_31;
    }
  }
  int v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
  if (v7 == 3)
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= *a2) {
      goto LABEL_15;
    }
LABEL_31:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D3DA0, memory_order_acquire) & 1) == 0)
    {
      uint64_t v19 = a3;
      int v18 = __cxa_guard_acquire(&qword_1001D3DA0);
      a3 = v19;
      if (v18)
      {
        *(void *)&xmmword_1001D3D88 = qword_1001D3B40;
        *((void *)&xmmword_1001D3D88 + 1) = qword_1001D3B40;
        LOBYTE(qword_1001D3D98) = 2;
        __cxa_guard_release(&qword_1001D3DA0);
        a3 = v19;
      }
    }
    double result = *(double *)&xmmword_1001D3D88;
    *(_OWORD *)a3 = xmmword_1001D3D88;
    *(void *)(a3 + 16) = qword_1001D3D98;
    return result;
  }
  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 >= v8) {
    goto LABEL_31;
  }
LABEL_15:
  char v10 = v3 & 2;
  if ((v3 & 2) != 0) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  char v12 = v7 & 2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = v9 + 1;
  }
  int v14 = v3 & 1;
  int v15 = v7 & 1;
  if (v11 < v13)
  {
    unint64_t v5 = v9;
    char v10 = v12;
  }
  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    unint64_t v4 = v8;
    LOBYTE(v14) = v15;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = v14 | v10;
  return result;
}

BOOL sub_10006F390(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a3[1];
  if (*a3 <= v6) {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v8 = *a3;
  }
  if (*a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  v31[0] = v7 / v6;
  v31[1] = (v7 + v9) / v6;
  char v32 = 2;
  if (a5)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v26 = a5 - 1;
    BOOL v16 = 1;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 16) + v14) != 2)
      {
        if (a6 && v26 == v15) {
          sub_100014C40((uint64_t)v36, a6);
        }
        else {
          sub_10006ED8C(a1, a2, v15, a4, (uint64_t)v36);
        }
        sub_10006ED8C(a1, a2, v15, (uint64_t)v31, (uint64_t)v33);
        sub_100013494((uint64_t)v33, (uint64_t)v30);
        sub_100013530((uint64_t)v33, (uint64_t)v29);
        sub_100013494((uint64_t)v36, (uint64_t)v28);
        sub_100013530((uint64_t)v36, (uint64_t)v27);
        BOOL v17 = sub_10006F758((uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27);
        uint64_t v18 = v27[0];
        v27[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
        }
        uint64_t v19 = v28[0];
        v28[0] = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
        }
        uint64_t v20 = v29[0];
        v29[0] = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
        }
        uint64_t v21 = v30[0];
        v30[0] = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
        }
        sub_10000C78C(v35);
        uint64_t v22 = v34;
        uint64_t v34 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
        }
        sub_10000C78C(v38);
        uint64_t v23 = v37;
        uint64_t v37 = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
        }
        if (!v17) {
          break;
        }
      }
      BOOL v16 = ++v15 < a5;
      v14 += 48;
    }
    while (a5 != v15);
  }
  else
  {
    return 0;
  }
  return v16;
}

void sub_10006F66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a12) {
    sub_100151558();
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 24))(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24))(a30);
  }
  sub_100008B48((uint64_t)&a39);
  sub_100008B48(v39 - 184);
  _Unwind_Resume(a1);
}

void sub_10006F748()
{
}

void sub_10006F750()
{
}

BOOL sub_10006F758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10010B464((uint64_t)&v20, a1);
  sub_10010B464((uint64_t)v19, a2);
  sub_10010B464((uint64_t)&v16, a3);
  sub_10010B464((uint64_t)v15, a4);
  if (sub_10010B590((uint64_t)&v20, (uint64_t)v19))
  {
    while (sub_10010B590((uint64_t)&v16, (uint64_t)v15))
    {
      BOOL v7 = sub_10000E438(v21, v17);
      if (v22 != v18 || !v7) {
        goto LABEL_10;
      }
      sub_10010B7F8(&v20);
      sub_10010B7F8(&v16);
      if (!sub_10010B590((uint64_t)&v20, (uint64_t)v19)) {
        break;
      }
    }
  }
  if (sub_10010B4D0((uint64_t)&v20, (uint64_t)v19)) {
    BOOL v9 = sub_10010B4D0((uint64_t)&v16, (uint64_t)v15);
  }
  else {
LABEL_10:
  }
    BOOL v9 = 0;
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  return v9;
}

void sub_10006F920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24))(a21);
  }
  uint64_t v23 = *(void *)(v21 - 80);
  *(void *)(v21 - 80) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006FA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1] % v6;
  BOOL v9 = v8 == 0;
  unint64_t v10 = v6 - v8;
  if (v9) {
    unint64_t v10 = 0;
  }
  if (v7 < v10) {
    return 0;
  }
  uint64_t v15 = a1;
  v63[0] = 0;
  char v64 = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v17 = (v7 - v10) / v6 * v6;
  unint64_t v50 = *(void *)a3;
  long long v51 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a3 + 56);
  v52[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v53 = *(void *)(a3 + 48);
  long long v54 = v18;
  long long v19 = *(_OWORD *)(a3 + 88);
  long long v55 = *(_OWORD *)(a3 + 72);
  long long v56 = v19;
  char v57 = *(unsigned char *)(a3 + 104);
  uint64_t v20 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v58 = *(void *)(a3 + 112);
  long long v59 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a3 + 144);
  long long v60 = *(_OWORD *)(a3 + 128);
  uint64_t v61 = v21;
  char v62 = *(unsigned char *)(a3 + 152);
  sub_100042718((uint64_t)&v50, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v65);
  sub_10001FBB8((uint64_t)v63);
  sub_1000196DC((uint64_t)v63, (uint64_t)&v65);
  char v64 = 1;
  if (v74) {
    sub_100004944(v74);
  }
  if (v73) {
    sub_100004944(v73);
  }
  if (v72) {
    sub_100004944(v72);
  }
  if (v71) {
    sub_100004944(v71);
  }
  if (v69) {
    sub_100004944(v69);
  }
  if (v67) {
    sub_100004944(v67);
  }
  if (v59) {
    sub_100004944(v59);
  }
  if (v51) {
    sub_100004944(v51);
  }
  sub_100041B0C(a3, v17);
  sub_100040F70((void *)(a3 + 56));
  sub_1000414AC((uint64_t)v63, (uint64_t)&v65);
  sub_100018CC8(a3, (long long *)&v65);
  if (v68) {
    sub_100004944(v68);
  }
  if (v65.n128_u64[1]) {
    sub_100004944((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  sub_1000411FC((uint64_t)v63, (uint64_t)&v65);
  sub_100018CC8(a4, (long long *)&v65);
  if (v68) {
    sub_100004944(v68);
  }
  if (v65.n128_u64[1]) {
    sub_100004944((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  int64_t v22 = a6 - 1;
  if (v22 < 0)
  {
LABEL_81:
    uint64_t v11 = (*(void *)(a4 + 144) - *(void *)(a3 + 144)) & ~((uint64_t)(*(void *)(a4 + 144) - *(void *)(a3 + 144)) >> 63);
    goto LABEL_82;
  }
  uint64_t v39 = v15;
  while (1)
  {
    int v23 = *(_DWORD *)(*(void *)(v15 + 16) + 48 * v22);
    if (v23 != 1) {
      break;
    }
LABEL_79:
    if (v22-- <= 0) {
      goto LABEL_81;
    }
  }
  if (!v23) {
    goto LABEL_81;
  }
  uint64_t v24 = *(void *)(*(void *)(*(void *)(a2 + 16) + 16 * v22) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24) & 1) == 0) {
    goto LABEL_81;
  }
  long long v75 = &v77;
  long long v76 = xmmword_10016E390;
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  uint64_t v27 = v26 & ~(v26 >> 63);
  while (!sub_1000410B8(a3, a4))
  {
    sub_100042828(a3 + 56);
    long long v28 = *(std::__shared_weak_count **)(a3 + 120);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *(void *)(a3 + 144);
    if (((*(void *)(a4 + 144) - v29) & (unint64_t)~((*(void *)(a4 + 144) - v29) >> 63)) >= *(void *)(a3 + 136)) {
      unint64_t v30 = *(void *)(a3 + 136);
    }
    else {
      unint64_t v30 = (*(void *)(a4 + 144) - v29) & ~((*(void *)(a4 + 144) - v29) >> 63);
    }
    if (v28) {
      sub_100004944(v28);
    }
    if (v30)
    {
      unint64_t v31 = *(void *)a3;
      unint64_t v32 = *(void *)(a3 + 8);
      v65.n128_u64[0] = *(void *)a3;
      v65.n128_u64[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v66 = v30;
      uint64_t v34 = (uint64_t)v75;
      uint64_t v33 = v76;
      uint64_t v35 = (__n128 *)&v75[3 * v76];
      if ((void)v76 == *((void *)&v76 + 1))
      {
        sub_1000731E8((uint64_t *)&v75, v35, 1, &v65, &v44);
        if (v65.n128_u64[1]) {
          sub_100004944((std::__shared_weak_count *)v65.n128_u64[1]);
        }
      }
      else
      {
        v35->n128_u64[0] = v31;
        v35->n128_u64[1] = v65.n128_u64[1];
        *(void *)(v34 + 24 * v33 + 16) = v30;
        *(void *)&long long v76 = v33 + 1;
      }
      sub_100041B0C(a3, v30);
    }
    else
    {
      sub_100070008(a3, (uint64_t)v47);
      if (v49) {
        sub_100004944(v49);
      }
      if (v48) {
        sub_100004944(v48);
      }
    }
  }
  sub_10004295C((uint64_t *)&v65, &v75, v25, v27);
  sub_1000414AC((uint64_t)&v70, (uint64_t)&v44);
  sub_1000411FC((uint64_t)&v70, (uint64_t)v41);
  BOOL v36 = sub_1000410B8((uint64_t)&v44, (uint64_t)v41);
  if (v43) {
    sub_100004944(v43);
  }
  if (v42) {
    sub_100004944(v42);
  }
  if (v46) {
    sub_100004944(v46);
  }
  if (v45) {
    sub_100004944(v45);
  }
  if (v36) {
    goto LABEL_78;
  }
  sub_1000414AC((uint64_t)&v70, (uint64_t)&v44);
  sub_1000411FC((uint64_t)&v70, (uint64_t)v41);
  uint64_t v11 = sub_100070054(a2, v22);
  if (v43) {
    sub_100004944(v43);
  }
  if (v42) {
    sub_100004944(v42);
  }
  if (v46) {
    sub_100004944(v46);
  }
  if (v45) {
    sub_100004944(v45);
  }
  if ((v11 & 0x8000000000000000) == 0 || !v11)
  {
LABEL_78:
    sub_1000049B8(&v65);
    sub_100004A50(&v75);
    uint64_t v15 = v39;
    goto LABEL_79;
  }
  sub_1000049B8(&v65);
  sub_100004A50(&v75);
LABEL_82:
  sub_1000197F0((uint64_t)v63);
  return v11;
}

void sub_10006FF5C(_Unwind_Exception *a1)
{
  if (STACK[0x4D8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x4D8]);
  }
  sub_100004A50((void *)(v1 - 240));
  sub_1000197F0((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_100070008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100041D84(a1);
}

void sub_100070040(_Unwind_Exception *a1)
{
  sub_10000371C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100070054(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 48) && *(void *)(a1 + 40) <= a2) {
    return 0;
  }
  else {
    return sub_100004AC0(*(void **)(*(void *)(a1 + 16) + 16 * a2));
  }
}

unint64_t sub_10007009C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, uint64_t a8)
{
  uint64_t v11 = a2;
  unint64_t v13 = *(void *)(a3 + 144);
  long long v96 = (unint64_t *)(a3 + 144);
  unint64_t v14 = a1[5];
  unint64_t v15 = v13 % v14;
  uint64_t v16 = v14 - v13 % v14;
  uint64_t v17 = *(void *)(a3 + 8);
  if (v15) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)&long long v177 = *(void *)a3;
  *((void *)&v177 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v178[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v179 = *(void *)(a3 + 48);
  long long v180 = *(_OWORD *)(a3 + 56);
  long long v181 = *(_OWORD *)(a3 + 72);
  long long v182 = *(_OWORD *)(a3 + 88);
  char v183 = *(unsigned char *)(a3 + 104);
  uint64_t v19 = *(void *)(a3 + 120);
  *(void *)&long long v184 = *(void *)(a3 + 112);
  *((void *)&v184 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v185 = *(_OWORD *)(a3 + 128);
  unint64_t v186 = *v96;
  char v187 = *(unsigned char *)(a3 + 152);
  uint64_t v20 = (std::__shared_weak_count *)a4[1];
  uint64_t v164 = *a4;
  unint64_t v165 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v166[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v166 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v167 = a4[6];
  long long v21 = *(_OWORD *)(a4 + 9);
  long long v168 = *(_OWORD *)(a4 + 7);
  long long v169 = v21;
  long long v170 = *(_OWORD *)(a4 + 11);
  char v171 = *((unsigned char *)a4 + 104);
  int64_t v22 = (std::__shared_weak_count *)a4[15];
  uint64_t v172 = a4[14];
  unsigned long long v173 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4[18];
  int v23 = a4 + 18;
  long long v174 = *((_OWORD *)a4 + 8);
  uint64_t v175 = v24;
  char v176 = *((unsigned char *)a4 + 152);
  unint64_t v25 = a1[5];
  unint64_t v26 = *v96;
  uint64_t v27 = a4[18] - *v96;
  unint64_t v28 = v27 & ~(v27 >> 63);
  if (v28 <= v25) {
    unint64_t v28 = a1[5];
  }
  if (v27 <= 0) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v28;
  }
  *(void *)&long long v162 = v26 / v25;
  *((void *)&v162 + 1) = (v25 + v26 + v29 - 1) / v25;
  LOBYTE(v163) = 2;
  sub_10006ED8C((uint64_t)a1, a2, a5, (uint64_t)&v162, (uint64_t)v218);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - a1[2]) >> 4) - 1 == a5)
  {
    unint64_t v30 = operator new(0x20uLL);
    *(void *)&v118[0] = v30 + 4;
    *(_OWORD *)unint64_t v30 = v162;
    v30[2] = v163;
    *((_DWORD *)v30 + 6) = 1;
    *(void *)&long long __p = v30;
    *((void *)&__p + 1) = v30 + 4;
    sub_1000B0220((uint64_t)v218, (uint64_t)&__p, (uint64_t)&v202);
    sub_10010B8F8((uint64_t)v218, (uint64_t)&v202);
    sub_10000C78C(&v205);
    uint64_t v31 = *(void *)&v203[16];
    *(void *)&v203[16] = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  sub_100013494((uint64_t)v218, (uint64_t)&v158);
  uint64_t v98 = v13;
  char v94 = v23;
  uint64_t v101 = a8;
  uint64_t v102 = (uint64_t)a1;
  sub_100013530((uint64_t)v218, (uint64_t)v157);
  unint64_t v32 = 0;
  unint64_t v95 = a5 + 1;
  uint64_t v99 = v11;
  unint64_t v97 = a5;
  while (1)
  {
    if (!sub_10010B590((uint64_t)&v158, (uint64_t)v157))
    {
      int v65 = 2;
      goto LABEL_175;
    }
    unint64_t v33 = v32;
    unint64_t v34 = v159;
    uint64_t v35 = v160;
    unsigned int v36 = v161;
    unint64_t v37 = v186;
    unint64_t v38 = *(void *)(v102 + 40);
    unint64_t v39 = v186 / v38;
    if ((v161 & 2) != 0) {
      unint64_t v40 = v159;
    }
    else {
      unint64_t v40 = v159 + 1;
    }
    v155[0] = v186 / v38;
    v155[1] = v40;
    char v156 = 2;
    unint64_t v41 = v40 - v39;
    if (v40 <= v39) {
      uint64_t v42 = qword_1001D3B40;
    }
    else {
      uint64_t v42 = v40 - v39;
    }
    if (!v42)
    {
      unint64_t v32 = v33;
      goto LABEL_99;
    }
    unint64_t v43 = sub_10006E904(v102, v11, (uint64_t)&v177, (uint64_t)&v164, v95, v155, a6 & 1, a7, v101, v218);
    unint64_t v188 = v43;
    uint64_t v189 = v44;
    if ((v43 & 0x8000000000000000) != 0 && v43)
    {
      int v65 = 1;
      unint64_t v32 = v33;
      goto LABEL_175;
    }
    uint64_t v45 = v98;
    if (v44 < v37) {
      uint64_t v45 = v44;
    }
    uint64_t v98 = v45;
    unint64_t v46 = v186;
    if (v44 >= v186)
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
      if (v43 <= ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63)))
      {
        a7 = 0;
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
    }
    long long v48 = v177;
    long long v144 = v177;
    if (*((void *)&v177 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v145[0] = v178[0];
    *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v178 + 9);
    uint64_t v49 = v179;
    uint64_t v50 = v180;
    uint64_t v146 = v179;
    long long v147 = v180;
    long long v148 = v181;
    long long v149 = v182;
    char v150 = v183;
    uint64_t v51 = *((void *)&v180 + 1);
    uint64_t v53 = (std::__shared_weak_count *)*((void *)&v184 + 1);
    uint64_t v52 = v184;
    long long v151 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v152 = v185;
    unint64_t v153 = v186;
    char v154 = v187;
    uint64_t v54 = v189;
    long long __p = v48;
    if (*((void *)&v48 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v118[0] = v145[0];
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)v145 + 9);
    uint64_t v119 = v49;
    *(void *)&long long v120 = v50;
    long long v121 = v148;
    long long v122 = v149;
    char v123 = v150;
    *((void *)&v120 + 1) = v51;
    uint64_t v124 = v52;
    long long v125 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v126 = v152;
    unint64_t v127 = v153;
    char v128 = v154;
    sub_100042718((uint64_t)&__p, (uint64_t)&v164, v54, v43, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
    if (v125) {
      sub_100004944(v125);
    }
    if (*((void *)&__p + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&__p + 1));
    }
    sub_10001FBB8(v101);
    sub_1000196DC(v101, (uint64_t)&v202);
    *(unsigned char *)(v101 + 528) = 1;
    if (v217) {
      sub_100004944(v217);
    }
    if (v216) {
      sub_100004944(v216);
    }
    if (v215) {
      sub_100004944(v215);
    }
    if (v214) {
      sub_100004944(v214);
    }
    if (v213) {
      sub_100004944(v213);
    }
    if ((void)v206) {
      sub_100004944((std::__shared_weak_count *)v206);
    }
    if (v53) {
      sub_100004944(v53);
    }
    if (*((void *)&v48 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v48 + 1));
    }
    sub_1000414AC(v101, (uint64_t)&v202);
    sub_100018CC8((uint64_t)&v177, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
    }
    sub_1000411FC(v101, (uint64_t)&v202);
    sub_100018CC8((uint64_t)&v164, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
    }
    a7 = 1;
    unint64_t v46 = v186;
LABEL_77:
    long long v133 = v177;
    if (*((void *)&v177 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v134 = v178[0];
    *(_OWORD *)&v134[9] = *(_OWORD *)((char *)v178 + 9);
    long long v136 = v180;
    long long v137 = v181;
    long long v138 = v182;
    char v139 = v183;
    uint64_t v135 = v179;
    long long v140 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v141 = v185;
    unint64_t v142 = v186;
    char v143 = v187;
    if (a7) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v41 * *(void *)(v102 + 40);
    }
    unint64_t v56 = v55 - v189 + *(void *)&v134[8];
    if (v188 < v56) {
      unint64_t v56 = v188;
    }
    if (v55) {
      unint64_t v57 = v56;
    }
    else {
      unint64_t v57 = v188;
    }
    sub_100041B0C((uint64_t)&v133, v57);
    sub_100040F70(&v136);
    long long v202 = v133;
    long long v133 = 0uLL;
    *(_OWORD *)v203 = *(_OWORD *)v134;
    *(_OWORD *)&v203[9] = *(_OWORD *)&v134[9];
    uint64_t v204 = v135;
    long long v205 = v136;
    long long v206 = v137;
    long long v207 = v138;
    char v208 = v139;
    long long v209 = v140;
    long long v140 = 0uLL;
    long long v210 = v141;
    char v212 = v143;
    unint64_t v211 = v142;
    sub_100018CC8((uint64_t)&v177, &v202);
    if (*((void *)&v209 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v202 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
    }
    if (*((void *)&v140 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v140 + 1));
    }
    if (*((void *)&v133 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v133 + 1));
    }
    unint64_t v37 = v186;
    unint64_t v32 = v186 - v46 + v33;
    if (!v47) {
      break;
    }
    uint64_t v18 = 0;
    a6 = 0;
    unint64_t v38 = *(void *)(v102 + 40);
    uint64_t v11 = v99;
LABEL_99:
    unint64_t v58 = (v36 & 1) + v35 - v34 + (int)(((v36 >> 1) & 1) - 1);
    unint64_t v59 = v38 * v58 - v18;
    if (v175 - v37 < v59) {
      unint64_t v59 = v175 - v37;
    }
    if ((void)v169 - (void)v181 < v59)
    {
      int v65 = 4;
      goto LABEL_175;
    }
    *(void *)&long long v202 = v38 * v40;
    *((void *)&v202 + 1) = v38 * (v58 + v40);
    v203[0] = 2;
    sub_100041EC4((uint64_t)&v177, (uint64_t)&v202, (uint64_t)&v164, (uint64_t)&__p);
    unint64_t v188 = -78;
    if (((uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 4) - 1 != v97 || *(unsigned char *)(v11 + 56) == 0 || a7)
    {
LABEL_106:
      uint64_t v62 = sub_100003758(*(void *)(*(void *)(v11 + 16) + 16 * v97));
      uint64_t v64 = v63;
      unint64_t v188 = v62;
      uint64_t v189 = v63;
      goto LABEL_107;
    }
    uint64_t v60 = *(void *)(*(void *)(v102 + 16) + 48 * v97 + 24);
    *(_OWORD *)v203 = 0u;
    long long v202 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)v60 + 72))(&v202);
    if ((void)v202)
    {
      unint64_t v61 = v202 + ((v132 - v127) & ~((uint64_t)(v132 - v127) >> 63)) - 1;
      if (v130 - (uint64_t)v121 < 1
                                - ((void)v202
                                 + ((v132 - v127) & ~((uint64_t)(v132 - v127) >> 63)))
                                + v61 / (unint64_t)v202 * (void)v202
                                + *((void *)&v202 + 1) * (void)v202
                                + v61)
        goto LABEL_106;
    }
    else if ((a6 & 1) == 0)
    {
      goto LABEL_106;
    }
    unint64_t v76 = sub_100003758(*(void *)(*(void *)(*(void *)(v11 + 16) + 16 * v97) + 16));
    uint64_t v62 = v76;
    uint64_t v64 = v77;
    unint64_t v188 = v76;
    uint64_t v189 = v77;
    a7 = v77 < v127 || v76 > ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63));
LABEL_107:
    if (v62 < 0 && v62)
    {
      int v65 = 1;
    }
    else
    {
      unint64_t v66 = v127;
      uint64_t v67 = v132;
      if (a6)
      {
        if (a7)
        {
          uint64_t v68 = *v94 - *v96;
          if (v68 <= v62) {
            uint64_t v68 = v62;
          }
          long long v69 = v177;
          if (*((void *)&v177 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)uint64_t v110 = v178[0];
          *(_OWORD *)&v110[9] = *(_OWORD *)((char *)v178 + 9);
          uint64_t v70 = v179;
          uint64_t v71 = v180;
          long long v111 = v181;
          long long v112 = v182;
          char v113 = v183;
          uint64_t v72 = *((void *)&v180 + 1);
          long long v73 = v184;
          if (*((void *)&v184 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v114 = v185;
          unint64_t v115 = v186;
          char v116 = v187;
          long long v190 = v69;
          if (*((void *)&v69 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v191[0] = *(_OWORD *)v110;
          *(_OWORD *)((char *)v191 + 9) = *(_OWORD *)&v110[9];
          uint64_t v192 = v70;
          uint64_t v193 = v71;
          long long v195 = v111;
          long long v196 = v112;
          char v197 = v113;
          uint64_t v194 = v72;
          long long v198 = v73;
          if (*((void *)&v73 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v73 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v199 = v114;
          unint64_t v200 = v115;
          char v201 = v116;
          sub_100042718((uint64_t)&v190, (uint64_t)&v164, v64, v68 & ~(v68 >> 63), 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
          if (*((void *)&v198 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v198 + 1));
          }
          if (*((void *)&v190 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v190 + 1));
          }
          sub_10001FBB8(v101);
          sub_1000196DC(v101, (uint64_t)&v202);
          *(unsigned char *)(v101 + 528) = 1;
          if (v217) {
            sub_100004944(v217);
          }
          if (v216) {
            sub_100004944(v216);
          }
          if (v215) {
            sub_100004944(v215);
          }
          if (v214) {
            sub_100004944(v214);
          }
          if (v213) {
            sub_100004944(v213);
          }
          if ((void)v206) {
            sub_100004944((std::__shared_weak_count *)v206);
          }
          if (*((void *)&v73 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v73 + 1));
          }
          if (*((void *)&v69 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v69 + 1));
          }
          sub_1000414AC(v101, (uint64_t)&v202);
          sub_100018CC8((uint64_t)&v177, &v202);
          if (*((void *)&v209 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
          }
          if (*((void *)&v202 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
          }
          sub_1000411FC(v101, (uint64_t)&v202);
          sub_100018CC8((uint64_t)&v164, &v202);
          if (*((void *)&v209 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
          }
          if (*((void *)&v202 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
          }
          a7 = 1;
          unint64_t v74 = v188;
        }
        else
        {
          a7 = 0;
          unint64_t v74 = v62;
        }
        uint64_t v98 = v64;
      }
      else if (v64 == v186)
      {
        unint64_t v74 = v62;
      }
      else
      {
        unint64_t v74 = sub_10014BA1C((uint64_t)&v177, (uint64_t)&v164, *(void *)(v102 + 40) * v58, &v188);
        unint64_t v188 = v74;
        uint64_t v189 = v75;
        a7 = v74 != *(void *)(v102 + 40) * v58;
      }
      sub_100041B0C((uint64_t)&v177, v74);
      uint64_t v18 = 0;
      a6 = 0;
      v32 += v188;
      int v65 = 4 * (v64 + v62 < ((v67 - v66) & ~((uint64_t)(v67 - v66) >> 63)) + v66);
    }
    uint64_t v11 = v99;
    if (v131) {
      sub_100004944(v131);
    }
    if (v129) {
      sub_100004944(v129);
    }
    if (v125) {
      sub_100004944(v125);
    }
    if (*((void *)&__p + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&__p + 1));
    }
    if (v65) {
      goto LABEL_175;
    }
    sub_10010B7F8(&v158);
  }
  a6 = 0;
  int v65 = 4;
  uint64_t v11 = v99;
LABEL_175:
  uint64_t v78 = v157[0];
  v157[0] = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 24))(v78);
  }
  uint64_t v79 = v158;
  uint64_t v158 = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 24))(v79);
  }
  if (v65 != 2)
  {
    if (v65 != 4) {
      goto LABEL_228;
    }
LABEL_227:
    unint64_t v188 = v32;
    uint64_t v189 = v98;
    goto LABEL_228;
  }
  if (sub_1000410B8((uint64_t)&v177, (uint64_t)&v164)) {
    goto LABEL_227;
  }
  if (sub_1000714CC((uint64_t)v218))
  {
    uint64_t v81 = v101;
    uint64_t v80 = v102;
  }
  else
  {
    sub_10010B988((uint64_t)v218, (uint64_t)&v202);
    uint64_t v81 = v101;
    uint64_t v80 = v102;
    if (*(void *)(v102 + 40) * *((void *)&v202 + 1) >= *v94) {
      goto LABEL_227;
    }
  }
  unint64_t v82 = sub_10006EA38(v80, v11, (uint64_t)&v177, (uint64_t)&v164, v95, a6 & 1, a7, v81, v218);
  unint64_t v83 = v82;
  uint64_t v85 = v84;
  unint64_t v188 = v82;
  uint64_t v189 = v84;
  if ((v82 & 0x8000000000000000) == 0 || !v82)
  {
    if (a6)
    {
      long long v86 = v177;
      if (*((void *)&v177 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)__uint32_t v103 = v178[0];
      *(_OWORD *)&v103[9] = *(_OWORD *)((char *)v178 + 9);
      long long v104 = v181;
      uint64_t v87 = v179;
      long long v88 = v180;
      uint64_t v89 = v184;
      long long v105 = v182;
      char v106 = v183;
      uint64_t v90 = (std::__shared_weak_count *)*((void *)&v184 + 1);
      if (*((void *)&v184 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v107 = v185;
      unint64_t v108 = v186;
      char v109 = v187;
      uint64_t v91 = v189;
      long long __p = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v118[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v103[9];
      long long v121 = v104;
      uint64_t v119 = v87;
      long long v120 = v88;
      long long v122 = v105;
      char v123 = v106;
      uint64_t v124 = v89;
      long long v125 = v90;
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v126 = v107;
      unint64_t v127 = v108;
      char v128 = v109;
      sub_100042718((uint64_t)&__p, (uint64_t)&v164, v91, v82, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v202);
      if (v125) {
        sub_100004944(v125);
      }
      if (*((void *)&__p + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&__p + 1));
      }
      sub_10001FBB8(v101);
      sub_1000196DC(v101, (uint64_t)&v202);
      *(unsigned char *)(v101 + 528) = 1;
      if (v217) {
        sub_100004944(v217);
      }
      if (v216) {
        sub_100004944(v216);
      }
      if (v215) {
        sub_100004944(v215);
      }
      if (v214) {
        sub_100004944(v214);
      }
      if (v213) {
        sub_100004944(v213);
      }
      if ((void)v206) {
        sub_100004944((std::__shared_weak_count *)v206);
      }
      if (v90) {
        sub_100004944(v90);
      }
      if (*((void *)&v86 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v86 + 1));
      }
      sub_1000414AC(v101, (uint64_t)&v202);
      sub_100018CC8((uint64_t)&v177, &v202);
      if (*((void *)&v209 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
      }
      if (*((void *)&v202 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
      }
      sub_1000411FC(v101, (uint64_t)&v202);
      sub_100018CC8((uint64_t)&v164, &v202);
      if (*((void *)&v209 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v209 + 1));
      }
      if (*((void *)&v202 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v202 + 1));
      }
      unint64_t v83 = v188;
      uint64_t v98 = v85;
    }
    sub_100041B0C((uint64_t)&v177, v83);
    v32 += v188;
    goto LABEL_227;
  }
LABEL_228:
  sub_10000C78C(v220);
  uint64_t v92 = v219;
  uint64_t v219 = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 40))(v92);
  }
  if (v173) {
    sub_100004944(v173);
  }
  if (v165) {
    sub_100004944(v165);
  }
  if (*((void *)&v184 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v184 + 1));
  }
  if (*((void *)&v177 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v177 + 1));
  }
  return v188;
}

void sub_100071338(_Unwind_Exception *a1)
{
  sub_100008B48(v1 - 192);
  sub_10000371C((uint64_t)&STACK[0x5A0]);
  sub_10000371C((uint64_t)&STACK[0x640]);
  _Unwind_Resume(a1);
}

BOOL sub_1000714CC(uint64_t a1)
{
  sub_100013494(a1, (uint64_t)v7);
  sub_100013530(a1, (uint64_t)v6);
  BOOL v2 = sub_10010B4D0((uint64_t)v7, (uint64_t)v6);
  uint64_t v3 = v6[0];
  v6[0] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = v7[0];
  v7[0] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return v2;
}

void sub_10007157C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    sub_100151558();
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000715D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v3 + 48;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 56))(*(void *)(v7 - 40), a2, a3);
    if (result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 48;
  }
  while (!v9);
  return result;
}

uint64_t sub_100071654(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(void))(**(void **)(v2 + 8) + 80))(*(void *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0;
  }
  unint64_t v6 = **(void ***)(a2 + 16);
  return sub_10004B95C(v6);
}

uint64_t sub_100071700(uint64_t a1)
{
  return sub_10006DD0C(*(uint64_t (****)(void))(*(void *)(a1 + 24) - 40));
}

uint64_t sub_10007170C(uint64_t a1)
{
  return sub_10006DC94(*(uint64_t (****)(void))(*(void *)(a1 + 16) + 8));
}

void *sub_100071718(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100004890(&__p, "com.apple.di_stackable.cache.flusher");
  sub_100055B5C(a1);
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_100055EA8(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_100071798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10000F990(v15);
  _Unwind_Resume(a1);
}

double sub_1000717C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  v4[0] = *(void *)(a1 + 40);
  v4[1] = v2;
  char v5 = 2;
  *(void *)&double result = sub_100071800(a1, (uint64_t)v4, 0, a2).n128_u64[0];
  return result;
}

__n128 sub_100071800@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 24) - v7) >> 4) == a3) {
    goto LABEL_48;
  }
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11 || *(void *)a2 + 1 >= v11) {
      goto LABEL_47;
    }
LABEL_5:
    if ((v10 & 1) + (uint64_t)(int)(((v10 >> 1) & 1) - 1) - v12 + v11) {
      goto LABEL_6;
    }
LABEL_48:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }
  if (v10 != 3)
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11) {
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 >= *(void *)a2) {
    goto LABEL_5;
  }
LABEL_47:
  if (!qword_1001D3B40) {
    goto LABEL_48;
  }
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 48 * a3 + 8) + 32))(*(void *)(v7 + 48 * a3 + 8));
  unint64_t v15 = *(void *)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 >= v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = *(void *)a2;
  }
  if (v16 >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 16) + 16 * a3);
  v46[0] = *(void *)(*(void *)(v6 + 16) + 48 * a3 + 8);
  v46[1] = v17;
  v46[2] = v18;
  char v47 = 2;
  uint64_t v48 = 0;
  uint64_t v49 = v19;
  int v50 = 7;
  v51[0] = off_10019E428;
  v51[3] = v51;
  if (v14 < v16)
  {
    unint64_t v20 = v14;
    long long v21 = operator new(0x20uLL);
    unint64_t v40 = v21 + 4;
    unint64_t v41 = (char *)(v21 + 4);
    void *v21 = v20;
    v21[1] = v16;
    *((unsigned char *)v21 + 16) = 2;
    *((_DWORD *)v21 + 6) = 2;
    long long __p = v21;
    sub_1000B0220((uint64_t)v46, (uint64_t)&__p, (uint64_t)v42);
    sub_10010B8F8((uint64_t)v46, (uint64_t)v42);
    sub_10000C78C(v45);
    uint64_t v22 = v44;
    uint64_t v44 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
    }
    if (__p)
    {
      unint64_t v40 = __p;
      operator delete(__p);
    }
    unint64_t v15 = *(void *)a2;
  }
  if ((*(unsigned char *)(a2 + 16) & 2) != 0) {
    unint64_t v23 = v15;
  }
  else {
    unint64_t v23 = v15 + 1;
  }
  sub_100013494((uint64_t)v46, (uint64_t)v42);
  int v24 = v44;
  uint64_t v25 = v42[0];
  v42[0] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  sub_100013494((uint64_t)v46, (uint64_t)v42);
  sub_100013530((uint64_t)v46, (uint64_t)&__p);
  uint64_t v26 = a3 + 1;
  while (sub_10010B590((uint64_t)v42, (uint64_t)&__p))
  {
    unint64_t v27 = v43;
    if (v44)
    {
      if (v44 != v24) {
        break;
      }
    }
    else
    {
      v34[0] = v23;
      v34[1] = v43;
      char v35 = 2;
      sub_100071800(&v36, a1, v34, v26);
      if (v24)
      {
        if (v38 != v24) {
          break;
        }
      }
      else
      {
        int v24 = v38;
      }
      unint64_t v23 = v37;
      if (v37 != v27) {
        break;
      }
    }
    sub_10010B7F8(v42);
    unint64_t v23 = v27;
  }
  unint64_t v28 = __p;
  long long __p = 0;
  if (v28) {
    (*(void (**)(void *))(*(void *)v28 + 24))(v28);
  }
  uint64_t v29 = v42[0];
  v42[0] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  unint64_t v30 = *(void *)a2;
  if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
    ++v30;
  }
  *(void *)a4 = v30;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v24;
  sub_10000C78C(v51);
  uint64_t v32 = v48;
  uint64_t v48 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
  }
  return result;
}

void sub_100071C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100008B48((uint64_t)&a22);
  if (__p) {
    operator delete(__p);
  }
  sub_100008B48(v22 - 176);
  _Unwind_Resume(a1);
}

void sub_100071CB8()
{
}

void sub_100071D38()
{
}

uint64_t sub_100071D54(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_100071D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 8) + 32))();
}

uint64_t sub_100071D88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

void sub_100071E04()
{
}

void sub_100071E78()
{
}

uint64_t sub_100071E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 24) + 64))();
}

uint64_t sub_100071EC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) - 24) + 72))();
}

uint64_t sub_100071EF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 80))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

uint64_t sub_100071F70()
{
  return 1;
}

uint64_t sub_100071F78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void sub_100071F80()
{
}

void sub_100072010()
{
}

void sub_10007205C()
{
}

uint64_t sub_100072080(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = a4[18];
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (v8 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v9) {
    return -5;
  }
  v12[0] = 0;
  unsigned char v12[528] = 0;
  unint64_t v10 = sub_10007009C(a1, a2, a3, a4, 0, 1, 0, (uint64_t)v12);
  sub_1000197F0((uint64_t)v12);
  return v10;
}

void sub_100072178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000197F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007218C(uint64_t a1, uint64_t a2)
{
  return sub_10006DC94(*(uint64_t (****)(void))(*(void *)(*(void *)a2 + 16) + 8));
}

void sub_10007219C()
{
}

uint64_t sub_1000721A8()
{
  return 0;
}

uint64_t sub_1000721B4(uint64_t a1, uint64_t *a2)
{
  return sub_1000F153C(*a2);
}

uint64_t sub_1000721BC(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)a2 + 560) + 136);
}

uint64_t sub_1000721CC(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 72);
}

uint64_t sub_1000721D8()
{
  return 0;
}

uint64_t sub_1000721E4(uint64_t a1, void *a2)
{
  return sub_1000721F0(*a2 + 16);
}

uint64_t sub_1000721F0(uint64_t a1)
{
  CFUUIDRef v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)a1 + 48))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  sub_1000409DC((const void **)&v3);
  return v1;
}

void sub_100072240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000409DC((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072254()
{
  return 0;
}

uint64_t sub_100072260()
{
  return 0;
}

uint64_t sub_10007226C()
{
  return 0;
}

uint64_t sub_100072278(uint64_t a1, void **a2)
{
  return sub_1000F1530(*a2);
}

uint64_t sub_100072280()
{
  return 0;
}

uint64_t sub_10007228C()
{
  return 0;
}

uint64_t sub_100072298()
{
  return 0;
}

uint64_t sub_1000722A4()
{
  return 0;
}

uint64_t sub_1000722B0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t *sub_1000722F4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 48) = *(_DWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_100072388(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_10004B1A4();
  }
  return operator new(48 * a2);
}

void sub_1000723D0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    sub_100004944(v3);
  }
}

uint64_t sub_100072420(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_1000723D0(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100072470(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_1000560D4(a1 + 64);
    uint64_t v2 = (void **)(a1 + 24);
    sub_10000F9FC(&v2);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

uint64_t sub_1000724CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_1000560D4(a1 + 64);
    uint64_t v3 = (void **)(a1 + 24);
    sub_10000F9FC(&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_100072528(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_1000723D0(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1000725AC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1001A90E0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a3 == 1)
  {
    uint64_t v7 = sub_10006DD84(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24) + 96))(*(void *)(*(void *)(a2 + 24) - 24));
  }
  *(unsigned char *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v12 = *(void *)(v10 + 32);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136))(*(void *)(v10 + 8));
    sub_10007294C(v6, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    }
  }
  return a1;
}

void sub_1000727D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100073018((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072834(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_10004B570();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10006D6E8(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    unint64_t v16 = (uint64_t *)&v13[16 * v9];
    unint64_t v18 = &v13[16 * v12];
    sub_100072B28(v16, a2);
    unint64_t v17 = v16 + 2;
    sub_100072C58(a1, &v15);
    uint64_t v8 = a1[1];
    sub_100072DE0(&v15);
  }
  else
  {
    sub_100072B28(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_10007292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007294C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_10004B570();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_10006D6E8(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    unint64_t v16 = (uint64_t *)&v13[16 * v9];
    unint64_t v18 = &v13[16 * v12];
    sub_1000730B8(v16, a2);
    unint64_t v17 = v16 + 2;
    sub_100072C58(a1, &v15);
    uint64_t v8 = a1[1];
    sub_100072DE0(&v15);
  }
  else
  {
    sub_1000730B8(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_100072A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100072A64(uint64_t a1)
{
  *(void *)a1 = off_1001A90E0;
  uint64_t v3 = (void **)(a1 + 16);
  sub_100073018(&v3);
  return a1;
}

void sub_100072ABC(uint64_t a1)
{
  *(void *)a1 = off_1001A90E0;
  uint64_t v1 = (void **)(a1 + 16);
  sub_100073018(&v1);
  operator delete();
}

uint64_t *sub_100072B28(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_100072BAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100072BE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_100072C14(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_100072C58(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100072CD0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100072CD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100072D64((uint64_t)v12);
  return v10;
}

uint64_t sub_100072D64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100072D9C(a1);
  }
  return a1;
}

void sub_100072D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_100004944(v3);
    }
    v1 += 16;
  }
}

void **sub_100072DE0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100072E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_100004944(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

unint64_t sub_100072E68(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_100076380(a1[1], a1, a2, a3);
}

uint64_t sub_100072E7C(uint64_t a1)
{
  *(void *)a1 = off_1001A9198;
  uint64_t v3 = (void **)(a1 + 16);
  sub_100072F40(&v3);
  return a1;
}

void sub_100072ED4(uint64_t a1)
{
  *(void *)a1 = off_1001A9198;
  uint64_t v1 = (void **)(a1 + 16);
  sub_100072F40(&v1);
  operator delete();
}

void sub_100072F40(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        sub_100072FC4(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100072FC4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v4 = (void **)(a1 + 112);
  sub_100073018(&v4);
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
}

void sub_100073018(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10007306C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10007306C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_100004944(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *sub_1000730B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_10007313C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100073174(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_1000731A4(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_1000731E8(uint64_t *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_100073298((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  char v13 = (__n128 *)operator new(24 * v11);
  sub_100073314((uint64_t)a1, v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_100073298(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x555555555555555;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x555555555555555 - v4 < a2 - v4 + v3) {
    sub_10001A67C("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x555555555555555) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_100073314(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  sub_1000733E8(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 24 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)&v10->n128_u64[1];
      do
      {
        if (*v12) {
          sub_100004944(*v12);
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_1000733C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000733E8(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }
  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    unint64_t v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      __n128 result = *a3;
      __n128 *v8 = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      unint64_t v8 = (__n128 *)((char *)v8 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

void sub_10007345C(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v5 = operator new(0x68uLL);
  sub_1000734C0((uint64_t)v5, a2, a3);
}

void sub_1000734AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000734C0(uint64_t a1, uint64_t a2, char *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1001A9250;
  char v4 = *a3;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = off_1001A45C0;
  *(void *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
  *(unsigned char *)(a1 + 80) = v4;
  sub_10000A538((void *)(a1 + 88));
}

void sub_10007356C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100073580(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000735A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001A9250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000735F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_10007361C()
{
  uint64_t v1 = &stru_1001A92B0;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1001D47C8, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_1001D47C8, &v2, (void (__cdecl *)(void *))sub_10007BB84);
  }
  return qword_1001D4898;
}

void sub_100073690(id a1)
{
}

void sub_1000736EC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v22 = (std::mutex *)(a1 + 24);
  char v23 = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v8 = sub_1000788C0(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(unsigned char *)(a4 + 16) = v9;
    goto LABEL_20;
  }
  sub_10001FED8((uint64_t)&v22);
  if (!a3 || !os_variant_allows_internal_security_policies())
  {
    *(void *)&long long v20 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v20 + 1) = 63;
    int v21 = 16;
    sub_100073A90(v24, &v20);
    sub_1000039A0(v27, (uint64_t)"Plugin ", 7);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      unint64_t v16 = (void *)a2;
    }
    else {
      unint64_t v16 = *(void **)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    sub_1000039A0(v27, (uint64_t)v16, v17);
    sub_1000039A0(v27, (uint64_t)" is not registered", 18);
    std::ostream::~ostream();
    sub_100078D10((uint64_t)v24);
    std::ios::~ios();
    unint64_t v18 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45;
    *(void *)(a4 + 8) = v18;
    goto LABEL_19;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D47E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1001D47E8))
  {
    sub_100004890(v24, "com.apple.raw");
    void v24[3] = sub_10009A9E8;
    v24[4] = 0;
    sub_100004890(v25, "com.apple.diskimage-plugin.nbd");
    v25[3] = sub_100076ED4;
    v25[4] = 0;
    sub_100004890(v26, "com.apple.diskimage-plugin.amber");
    v26[3] = sub_100076ED4;
    v26[4] = 16;
    sub_100078388((uint64_t)&qword_1001D47D0, v24, 3);
    for (uint64_t i = 0; i != -15; i -= 5)
    {
      if (SHIBYTE(v26[i + 2]) < 0) {
        operator delete((void *)v26[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_100076F4C, &qword_1001D47D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001D47E8);
  }
  if (sub_1000788C0((uint64_t)&qword_1001D47D0, (void **)a2) != (void **)&unk_1001D47D8)
  {
    v24[0] = (void *)a2;
    uint64_t v10 = sub_100078940(&qword_1001D47D0, (void **)a2, (uint64_t)&unk_1001705CC, (long long **)v24);
    int v11 = *(char *)(a2 + 23);
    uint64_t v12 = *(char **)a2;
    uint64_t v13 = ((uint64_t (*)(uint64_t))v10[7])(v10[8]);
    if (v11 >= 0) {
      long long v14 = (char *)a2;
    }
    else {
      long long v14 = v12;
    }
    di_plugin_register(v14, v13);
  }
  sub_1000736EC(a1, a2, 0);
LABEL_20:
  if (v23) {
    std::mutex::unlock(v22);
  }
}

void sub_1000739F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0;
  while (1)
  {
    if (*(char *)(v18 + v20 + 103) < 0) {
      operator delete(*(void **)(v18 + v20 + 80));
    }
    v20 -= 40;
    if (v20 == -120)
    {
      __cxa_guard_abort(&qword_1001D47E8);
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *sub_100073A90(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007BB9C((uint64_t)a1, a2);
  *a1 = off_1001A9888;
  a1[45] = &off_1001A9988;
  a1[46] = &off_1001A99B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9888;
  a1[45] = off_1001A9910;
  a1[46] = off_1001A9938;
  return a1;
}

void sub_100073B90(_Unwind_Exception *a1)
{
  sub_100078D10(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100073BB4(uint64_t a1)
{
  return a1;
}

void *sub_100073BF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000D850C())
  {
    v18[0] = 0;
    unint64_t v8 = sub_1000D848C();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t buf = 0x6704100402;
    char v9 = "RO";
    uint64_t v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v21 = 2080;
    if ((a3 & 3) != 0) {
      char v9 = "RW";
    }
    __int16 v23 = 2080;
    int v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = a4;
    uint64_t v10 = (const char *)_os_log_send_and_compose_impl();
    if (v10)
    {
      int v11 = (char *)v10;
      fprintf(__stderrp, "%s\n", v10);
      free(v11);
    }
  }
  else
  {
    uint64_t v12 = sub_1000D848C();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = "RW";
      uint64_t buf = 0x6704100402;
      uint64_t v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v21 = 2080;
      if ((a3 & 3) == 0) {
        uint64_t v13 = "RO";
      }
      __int16 v23 = 2080;
      int v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Creating %s plugin instance with params: %@", (uint8_t *)&buf, 0x26u);
    }
  }
  *__error() = v7;
  v18[1] = a4;
  uint64_t v19 = 0;
  LODWORD(v18[0]) = 16;
  HIDWORD(v18[0]) = a3;
  long long v14 = (void *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v18, &v19);
  int v15 = v14;
  if (v14 && *(_DWORD *)v14 <= 0x57u)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)&buf);
    sub_1000039A0(&buf, (uint64_t)"Plugin image struct size ", 25);
    std::ostream::operator<<();
    sub_1000039A0(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }
  sub_100073EEC(v14, v19);
  return v15;
}

void sub_100073EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100073EEC(void *result, __CFError *a2)
{
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (sub_1000D850C())
      {
        unint64_t v8 = sub_1000D848C();
        os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 71;
        __int16 v17 = 2080;
        uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v19 = 2114;
        uint64_t v20 = a2;
        char v9 = (const char *)_os_log_send_and_compose_impl();
        if (v9)
        {
          uint64_t v10 = (char *)v9;
          fprintf(__stderrp, "%s\n", v9);
          free(v10);
        }
      }
      else
      {
        int v11 = sub_1000D848C();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v16 = 71;
          __int16 v17 = 2080;
          uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v19 = 2114;
          uint64_t v20 = a2;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%.*s: Failed initializing plugin: %{public}@", buf, 0x1Cu);
        }
      }
      *__error() = v7;
      uint64_t v12 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v14 = Code;
      }
      else {
        int v14 = -Code;
      }
      CFRelease(v12);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v14;
    }
    else
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }
LABEL_9:
    unint64_t v5 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)v3, v4);
  }
  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    unsigned int v4 = -22;
    goto LABEL_9;
  }
  return result;
}

void *sub_100074140(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v17 = 0;
    unint64_t v8 = sub_1000D848C();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v19 = 2080;
    uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = sub_1000D848C();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v19 = 2080;
      uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }
  *__error() = v7;
  *(void *)uint64_t buf = 0;
  uint64_t v12 = *(uint64_t (**)(long long *, uint64_t, uint8_t *))(a2 + 16);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v13 = (void *)v12(&v15, a4, buf);
  return sub_100073EEC(v13, *(__CFError **)buf);
}

uint64_t sub_100074304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967274;
  }
  if (*(_DWORD *)(a3 + 4) != 1)
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_10002D7D4(&v13, &__dst);
    sub_1000039A0(v14, (uint64_t)"Plugin version ", 15);
    std::ostream::operator<<();
    sub_1000039A0(v14, (uint64_t)" is incompatible with the framework, expected ", 46);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10002E1E0((uint64_t)&v13);
    goto LABEL_6;
  }
  if (*(_DWORD *)a3 <= 0x27u)
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_1000748D0(&v13, &__dst);
    sub_1000039A0(v14, (uint64_t)"Plugin struct size ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v14, (uint64_t)" is incompatible with the framework, expected at least ", 55);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_100079484((uint64_t)&v13);
LABEL_6:
    std::ios::~ios();
    return 4294967209;
  }
  if (!*(void *)(a3 + 8) || !*(void *)(a3 + 16))
  {
    *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31;
    LODWORD(v16) = 16;
    sub_100074A38(&v13, &__dst);
    sub_1000039A0(v14, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54);
    std::ostream::~ostream();
    sub_100079BF8((uint64_t)&v13);
    std::ios::~ios();
    return 4294967274;
  }
  unint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == sub_1000788C0(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10000A2C4(v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)int v11 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 16);
    }
    operator new();
  }
  *(void *)&long long __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
  *((void *)&__dst + 1) = 31;
  LODWORD(v16) = 16;
  sub_100074BA0(&v13, &__dst);
  sub_1000039A0(v14, (uint64_t)"Plugin ", 7);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (void *)a2;
  }
  else {
    unint64_t v8 = *(void **)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_1000039A0(v14, (uint64_t)v8, v9);
  sub_1000039A0(v14, (uint64_t)" cannot be re-registered", 24);
  std::ostream::~ostream();
  sub_10007A36C((uint64_t)&v13);
  std::ios::~ios();
  uint64_t v3 = 4294967279;
  std::mutex::unlock(v6);
  return v3;
}

void sub_1000747B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  if (*(char *)(v22 - 73) < 0) {
    operator delete(*(void **)(v22 - 96));
  }
  operator delete();
}

void sub_100074844(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100074E2C((uint64_t)va);
  std::mutex::unlock(v3);
  JUMPOUT(0x1000748C8);
}

void sub_100074854()
{
}

void sub_100074874(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10007487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100074B5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007488C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100074CC4((uint64_t)va);
  JUMPOUT(0x100074898);
}

void sub_1000748A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000749F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000748D0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007BC2C((uint64_t)a1, a2);
  *a1 = off_1001A9AA8;
  a1[45] = &off_1001A9BA8;
  a1[46] = &off_1001A9BD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9AA8;
  a1[45] = off_1001A9B30;
  a1[46] = off_1001A9B58;
  return a1;
}

void sub_1000749D0(_Unwind_Exception *a1)
{
  sub_100079484(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000749F4(uint64_t a1)
{
  return a1;
}

void *sub_100074A38(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007BCBC((uint64_t)a1, a2);
  *a1 = off_1001A9CC8;
  a1[45] = &off_1001A9DC8;
  a1[46] = &off_1001A9DF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9CC8;
  a1[45] = off_1001A9D50;
  a1[46] = off_1001A9D78;
  return a1;
}

void sub_100074B38(_Unwind_Exception *a1)
{
  sub_100079BF8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100074B5C(uint64_t a1)
{
  return a1;
}

void *sub_100074BA0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007BD4C((uint64_t)a1, a2);
  *a1 = off_1001A9EE8;
  a1[45] = &off_1001A9FE8;
  a1[46] = &off_1001AA010;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9EE8;
  a1[45] = off_1001A9F70;
  a1[46] = off_1001A9F98;
  return a1;
}

void sub_100074CA0(_Unwind_Exception *a1)
{
  sub_10007A36C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100074CC4(uint64_t a1)
{
  return a1;
}

void *sub_100074D08(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007CB80((uint64_t)a1, a2);
  *a1 = off_1001AA108;
  a1[45] = &off_1001AA208;
  a1[46] = &off_1001AA230;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AA108;
  a1[45] = off_1001AA190;
  a1[46] = off_1001AA1B8;
  return a1;
}

void sub_100074E08(_Unwind_Exception *a1)
{
  sub_10007AAE0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100074E2C(uint64_t a1)
{
  return a1;
}

CFStringRef sub_100074E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000736EC(a1, a2, 1, (uint64_t)&v8);
  if (v9 && (unint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 24)) != 0)
  {
    return (CFStringRef)v5(a3);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v7 = (const char *)a2;
    }
    else {
      int v7 = *(const char **)a2;
    }
    return CFStringCreateWithCString(0, v7, 0x8000100u);
  }
}

void sub_100074F0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000A2C4((unsigned char *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
  }
  uint64_t v12 = sub_10007361C();
  sub_1000736EC(v12, a2, 1, (uint64_t)v20);
  if (v21)
  {
    v24[0] = off_1001AA818;
    void v24[3] = v24;
    if (a6)
    {
      uint64_t v13 = sub_10007361C();
      int v14 = sub_100074140(v13, v20[0], a5, a6);
      sub_10007CD6C((uint64_t)v23, (uint64_t)v24);
      sub_10007CE04(&v19, (uint64_t)v14);
    }
    uint64_t v15 = sub_10007361C();
    uint64_t v16 = sub_100073BF8(v15, v20[0], a4, a3);
    sub_10007CD6C((uint64_t)v22, (uint64_t)v24);
    sub_10007CE04(&v19, (uint64_t)v16);
  }
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  long long v18 = *(_OWORD *)sub_10005D920((uint64_t)v20);
  *(void *)exception = &off_1001C3DE8;
  *(_OWORD *)(exception + 8) = v18;
  exception[24] = 0;
  exception[48] = 0;
  *((void *)exception + 7) = "Failed to get plugin instance";
}

void sub_10007513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_10007CCE8((uint64_t *)va);
  sub_10007CCE8((uint64_t *)va1);
  if (*(char *)(v6 + 39) < 0) {
    operator delete(*v7);
  }
  char v9 = *(std::__shared_weak_count **)(v6 + 8);
  if (v9) {
    sub_100004944(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1000751B0(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 264);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  void v3[2] = sub_100075254;
  _OWORD v3[3] = &unk_1001A92D0;
  v3[4] = a1;
  unsigned int v4 = v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v4;
    unint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_10007BB84);
  }
}

uint64_t sub_100075254(uint64_t a1)
{
  return sub_10007529C(*(void *)(a1 + 32) + 56);
}

uint64_t sub_10007529C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200)) {
    *(unsigned char *)(sub_1001371D4() + 200) = 0;
  }
  uint64_t result = sub_100137168();
  *(unsigned char *)(result + 200) = 1;
  return result;
}

void sub_1000752F4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000752FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001372F0(a1 + 56, a2);
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    *(void *)&long long v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36;
    int v10 = 16;
    sub_1000753F8(v11, &v9);
    sub_1000039A0(v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10007B254((uint64_t)v11);
    std::ios::~ios();
  }
  else
  {
    sub_1001260EC((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }
  return v7;
}

void sub_1000753E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007551C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000753F8(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007D1EC((uint64_t)a1, a2);
  *a1 = off_1001AA328;
  a1[45] = &off_1001AA428;
  a1[46] = &off_1001AA450;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AA328;
  a1[45] = off_1001AA3B0;
  a1[46] = off_1001AA3D8;
  return a1;
}

void sub_1000754F8(_Unwind_Exception *a1)
{
  sub_10007B254(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007551C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100075560(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = sub_1001371D8((uint64_t)(a1 + 7));
  if (!v8) {
    return -35;
  }
  uint64_t v10 = v8;
  int v65 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  unint64_t v46 = (long long *)(a3 + 9);
  unint64_t v47 = (*(uint64_t (**)(void *, double))(*a1 + 24))(a1, v9);
  memset(v64, 0, sizeof(v64));
  (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 72))(v64, a1);
  unint64_t v13 = a3[18];
  uint64_t v45 = a3 + 18;
  unint64_t v14 = (*(void *)(a4 + 144) - v13) & ~((uint64_t)(*(void *)(a4 + 144) - v13) >> 63);
  if (*(void *)&v64[0]
    && v11 - v12 >= *((void *)&v64[0] + 1) * *(void *)&v64[0]
                  + (v14 - 1 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0])
  {
    uint64_t v15 = *(uint64_t (**)(void))(a1[2] + 32);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v13;
      if (v16) {
        unint64_t v17 = v13 / v16 * v16;
      }
    }
    else
    {
      unint64_t v17 = a3[18];
    }
    unint64_t v14 = (v14 - 1 + v13 - v17 + *(void *)&v64[0]) / *(void *)&v64[0] * *(void *)&v64[0];
    unint64_t v13 = v17;
  }
  long long v19 = (std::__shared_weak_count *)a3[1];
  uint64_t v51 = *a3;
  uint64_t v52 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = v10;
  unint64_t v44 = v13;
  v53[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
  long long v55 = *(_OWORD *)(a3 + 7);
  long long v20 = *(_OWORD *)(a3 + 11);
  long long v56 = *v46;
  uint64_t v54 = a3[6];
  long long v57 = v20;
  char v58 = *((unsigned char *)a3 + 104);
  char v21 = (std::__shared_weak_count *)a3[15];
  uint64_t v59 = a3[14];
  uint64_t v60 = v21;
  unint64_t v22 = v14 / v47;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *((_OWORD *)a3 + 8);
  uint64_t v62 = *v45;
  char v63 = *((unsigned char *)a3 + 152);
  while (!sub_100041EB4((uint64_t)&v51))
  {
    sub_100042828((uint64_t)&v55);
    uint64_t v24 = v59;
    __int16 v23 = v60;
    if (v60)
    {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25)
      {
        sub_100004944(v23);
        break;
      }
    }
    else
    {
      if (v14 >= (unint64_t)v61) {
        unint64_t v25 = v61;
      }
      else {
        unint64_t v25 = v14;
      }
      if (!v25) {
        break;
      }
    }
    uint64_t v26 = v66;
    if (v66 >= v67)
    {
      uint64_t v28 = (v66 - v65) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        sub_10004B570();
      }
      uint64_t v30 = v67 - v65;
      if ((v67 - v65) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31) {
        uint64_t v32 = (char *)sub_10006D6E8((uint64_t)&v67, v31);
      }
      else {
        uint64_t v32 = 0;
      }
      unint64_t v33 = &v32[16 * v28];
      *(void *)unint64_t v33 = v24;
      *((void *)v33 + 1) = v25;
      char v35 = v65;
      unint64_t v34 = v66;
      uint64_t v36 = v33;
      if (v66 != v65)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
          v36 -= 16;
          v34 -= 16;
        }
        while (v34 != v35);
        unint64_t v34 = v65;
      }
      unint64_t v27 = v33 + 16;
      int v65 = v36;
      unint64_t v66 = v33 + 16;
      uint64_t v67 = &v32[16 * v31];
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(void *)unint64_t v66 = v24;
      *((void *)v26 + 1) = v25;
      unint64_t v27 = v26 + 16;
    }
    unint64_t v66 = v27;
    if (v23) {
      sub_100004944(v23);
    }
    sub_100070008((uint64_t)&v51, (uint64_t)v48);
    if (v50) {
      sub_100004944(v50);
    }
    v14 -= v25;
    if (v49) {
      sub_100004944(v49);
    }
  }
  if (v60) {
    sub_100004944(v60);
  }
  if (v52) {
    sub_100004944(v52);
  }
  unint64_t v37 = v65;
  *(unsigned char *)uint64_t v43 = 2;
  *(void *)(v43 + 24) = v37;
  *(void *)(v43 + 32) = v44 / v47;
  *(void *)(v43 + 40) = 0;
  *(_DWORD *)(v43 + 48) = v22;
  int v38 = sub_1000752FC((uint64_t)a1, v43, a2);
  if (v38 == (unint64_t)v22)
  {
    unint64_t v39 = (std::__shared_weak_count *)a3[1];
    unint64_t v18 = v47 * v38;
    uint64_t v51 = *a3;
    uint64_t v52 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v53[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)a3 + 25);
    long long v55 = *(_OWORD *)(a3 + 7);
    long long v40 = *(_OWORD *)(a3 + 11);
    long long v56 = *v46;
    uint64_t v54 = a3[6];
    long long v57 = v40;
    char v58 = *((unsigned char *)a3 + 104);
    unint64_t v41 = (std::__shared_weak_count *)a3[15];
    uint64_t v59 = a3[14];
    uint64_t v60 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v61 = *((_OWORD *)a3 + 8);
    uint64_t v62 = *v45;
    char v63 = *((unsigned char *)a3 + 152);
    sub_100041C48((uint64_t)&v51, v18);
    if (v60) {
      sub_100004944(v60);
    }
    if (v52) {
      sub_100004944(v52);
    }
  }
  else if (v38 < 0)
  {
    unint64_t v18 = v38;
  }
  else
  {
    unint64_t v18 = -5;
  }
  if (v65)
  {
    unint64_t v66 = v65;
    operator delete(v65);
  }
  return v18;
}

void sub_100075A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t v39 = *(void **)(v37 - 120);
  if (v39)
  {
    *(void *)(v37 - 112) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100075A74(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_1001371D8(a1 + 56);
  if (!v8) {
    return -35;
  }
  uint64_t v9 = v8;
  long long __p = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v10 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  long long v59 = *(_OWORD *)(a3 + 9);
  long long v60 = *(_OWORD *)(a3 + 11);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v15 = a3[14];
  unsigned int v16 = (std::__shared_weak_count *)a3[15];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  unint64_t v18 = a3[18];
  unint64_t v17 = a3 + 18;
  long long v62 = *((_OWORD *)v17 - 1);
  unint64_t v63 = v18;
  char v64 = *((unsigned char *)v17 + 8);
  uint64_t v19 = *a4;
  long long v20 = (std::__shared_weak_count *)a4[1];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = a4[6];
  uint64_t v22 = a4[7];
  uint64_t v23 = a4[8];
  long long v55 = *(_OWORD *)(a4 + 9);
  long long v56 = *(_OWORD *)(a4 + 11);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v24 = a4[14];
  unint64_t v25 = (std::__shared_weak_count *)a4[15];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  v84[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)&v58[9];
  long long v87 = v59;
  long long v88 = v60;
  long long v92 = v62;
  v70[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)&v54[9];
  long long v75 = v56;
  uint64_t v82 = v10;
  unint64_t v83 = v11;
  uint64_t v85 = v12;
  *(void *)&long long v86 = v13;
  *((void *)&v86 + 1) = v14;
  char v89 = v61;
  uint64_t v90 = v15;
  uint64_t v91 = v16;
  unint64_t v93 = v63;
  char v94 = v64;
  uint64_t v68 = v19;
  long long v69 = v20;
  uint64_t v71 = v21;
  uint64_t v72 = v22;
  uint64_t v73 = v23;
  char v76 = v57;
  long long v74 = v55;
  uint64_t v77 = v24;
  uint64_t v78 = v25;
  long long v79 = *((_OWORD *)a4 + 8);
  char v81 = *((unsigned char *)a4 + 152);
  unint64_t v80 = a4[18];
  unint64_t v27 = v80;
  v113[0] = 0;
  v113[528] = 0;
  while (!sub_1000410B8((uint64_t)&v82, (uint64_t)&v68))
  {
    if (v93 >= v27 || v26 == -1) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v110 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v110 + 1) = 104;
      LODWORD(v111) = 2;
      sub_100018AAC(&v107, &v110);
      sub_1000039A0(v109, (uint64_t)"sg: ", 4);
      sub_100149114(v109);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v107);
      std::ios::~ios();
    }
    *(void *)&long long v107 = 0;
    *((void *)&v107 + 1) = v27;
    char v108 = 2;
    sub_10008A630(&v82, (uint64_t)&v107, (uint64_t)&v110);
    uint64_t v29 = v110;
    int64_t v30 = v111;
    if (v66 >= v67)
    {
      uint64_t v32 = (v66 - __p) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_10004B570();
      }
      uint64_t v34 = v67 - __p;
      if ((v67 - __p) >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35) {
        uint64_t v36 = (char *)sub_10006D6E8((uint64_t)&v67, v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = &v36[16 * v32];
      *(void *)uint64_t v37 = v29;
      *((void *)v37 + 1) = v30;
      int v38 = v66;
      unint64_t v39 = v37;
      if (v66 != __p)
      {
        do
        {
          *((_OWORD *)v39 - 1) = *((_OWORD *)v38 - 1);
          v39 -= 16;
          v38 -= 16;
        }
        while (v38 != __p);
        int v38 = __p;
      }
      unint64_t v31 = v37 + 16;
      long long __p = v39;
      uint64_t v67 = &v36[16 * v35];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)unint64_t v66 = v110;
      *((void *)v66 + 1) = v30;
      unint64_t v31 = v66 + 16;
    }
    unint64_t v66 = v31;
    uint64_t v40 = (int)v111;
    if ((v111 & 0x80000000) != 0) {
      int64_t v41 = (int)v111;
    }
    else {
      int64_t v41 = v111;
    }
    BOOL v42 = v41 >= 0 || v41 == 0;
    char v43 = v42;
    if (v42)
    {
      uint64_t v44 = v112;
      if (sub_100042754((uint64_t)&v82, (uint64_t)&v68, v112, v41))
      {
        v95[0] = v82;
        v95[1] = v83;
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v96[0] = v84[0];
        *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v84 + 9);
        uint64_t v97 = v85;
        long long v98 = v86;
        long long v99 = v87;
        long long v100 = v88;
        char v101 = v89;
        uint64_t v102 = v90;
        __uint32_t v103 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v104 = v92;
        unint64_t v105 = v93;
        char v106 = v94;
        sub_100042718((uint64_t)v95, (uint64_t)&v68, v44, v41, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v107);
        sub_100018C14((uint64_t)v113, (uint64_t)&v107);
        sub_100018C5C(&v107);
        sub_10000371C((uint64_t)v95);
        sub_1000414AC((uint64_t)v113, (uint64_t)&v107);
        sub_100018CC8((uint64_t)&v82, &v107);
        sub_10000371C((uint64_t)&v107);
        sub_1000411FC((uint64_t)v113, (uint64_t)&v107);
        sub_100018CC8((uint64_t)&v68, &v107);
        sub_10000371C((uint64_t)&v107);
      }
      sub_100041C48((uint64_t)&v82, v41);
      v26 += v41;
    }
    else
    {
      if ((int)v111 >= 0) {
        uint64_t v40 = -(uint64_t)(int)v111;
      }
      unint64_t v51 = v40;
    }
    if (*((void *)&v110 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v110 + 1));
    }
    if ((v43 & 1) == 0) {
      goto LABEL_60;
    }
  }
  unint64_t v51 = v26;
LABEL_60:
  sub_1000197F0((uint64_t)v113);
  if (v78) {
    sub_100004944(v78);
  }
  if (v69) {
    sub_100004944(v69);
  }
  if (v91) {
    sub_100004944(v91);
  }
  if (v83) {
    sub_100004944(v83);
  }
  unint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 24))(v53);
  unint64_t v46 = *v17 / v45;
  *(unsigned char *)uint64_t v9 = 4;
  *(void *)(v9 + 24) = __p;
  *(void *)(v9 + 32) = v46;
  *(void *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = v51 / v45;
  int v47 = sub_1000752FC(v53, v9, v52);
  uint64_t v48 = -5;
  if (v47 < 0) {
    uint64_t v48 = v47;
  }
  if (v47 == (unint64_t)(v51 / v45)) {
    uint64_t v49 = v45 * v47;
  }
  else {
    uint64_t v49 = v48;
  }
  if (__p) {
    operator delete(__p);
  }
  return v49;
}

void sub_100076150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (STACK[0x5B8]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x5B8]);
  }
  sub_1000197F0((uint64_t)&STACK[0x5E0]);
  sub_10000371C((uint64_t)&a65);
  sub_10000371C((uint64_t)&STACK[0x260]);
  sub_10000371C((uint64_t)&a22);
  sub_10000371C((uint64_t)&a42);
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100076200(uint64_t a1, uint64_t a2, int a3)
{
  sub_1001371D8(a1 + 56);
  if (!v6) {
    return 4294967261;
  }
  *(unsigned char *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return sub_1000752FC(a1, v6, a2);
}

uint64_t sub_10007627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  uint64_t v7 = a1 + 56;
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    sub_1001371D8(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(unsigned char *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    uint64_t result = sub_1000752FC(a1, v9, a2);
    if (result) {
      return result;
    }
    if (!--v4) {
      return 0;
    }
  }
  return 4294967261;
}

void sub_100076318(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_100137244(a1 + 56, (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      sub_1001260F4((dispatch_semaphore_t *)(v2 + 8));
      sub_100137244(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }
    while (v6);
  }
}

unint64_t sub_100076380(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  uint64_t v4 = *a3;
  int v5 = (std::__shared_weak_count *)a3[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v58 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v58[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v6 = a3[6];
  uint64_t v7 = a3[7];
  uint64_t v8 = a3[8];
  long long v59 = *(_OWORD *)(a3 + 9);
  long long v60 = *(_OWORD *)(a3 + 11);
  char v61 = *((unsigned char *)a3 + 104);
  uint64_t v9 = a3[14];
  uint64_t v10 = (std::__shared_weak_count *)a3[15];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (unint64_t *)(a3 + 18);
  long long v62 = *((_OWORD *)a3 + 8);
  unint64_t v63 = a3[18];
  char v64 = *((unsigned char *)a3 + 152);
  uint64_t v12 = *a4;
  uint64_t v13 = (std::__shared_weak_count *)a4[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v54 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v54[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v14 = a4[6];
  uint64_t v15 = a4[7];
  uint64_t v16 = a4[8];
  long long v55 = *(_OWORD *)(a4 + 9);
  long long v56 = *(_OWORD *)(a4 + 11);
  char v57 = *((unsigned char *)a4 + 104);
  uint64_t v18 = a4[14];
  unint64_t v17 = (std::__shared_weak_count *)a4[15];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  uint64_t v86 = v4;
  long long v87 = v5;
  v88[0] = *(_OWORD *)v58;
  *(_OWORD *)((char *)v88 + 9) = *(_OWORD *)&v58[9];
  uint64_t v89 = v6;
  *(void *)&long long v90 = v7;
  *((void *)&v90 + 1) = v8;
  long long v91 = v59;
  long long v92 = v60;
  char v93 = v61;
  uint64_t v94 = v9;
  unint64_t v95 = v10;
  long long v96 = v62;
  unint64_t v97 = v63;
  char v98 = v64;
  uint64_t v72 = v12;
  uint64_t v73 = v13;
  v74[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v54[9];
  uint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v77 = v16;
  char v80 = v57;
  long long v78 = v55;
  long long v79 = v56;
  uint64_t v81 = v18;
  uint64_t v82 = v17;
  long long v83 = *((_OWORD *)a4 + 8);
  char v85 = *((unsigned char *)a4 + 152);
  unint64_t v84 = a4[18];
  unint64_t v20 = v84;
  LOBYTE(v117[0]) = 0;
  char v118 = 0;
  while (!sub_1000410B8((uint64_t)&v86, (uint64_t)&v72))
  {
    if (v97 >= v20 || v19 == -1) {
      break;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v114 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v114 + 1) = 104;
      LODWORD(v115) = 2;
      sub_100018AAC(&v111, &v114);
      sub_1000039A0(v113, (uint64_t)"sg: ", 4);
      sub_100149114(v113);
      std::ostream::~ostream();
      sub_100018E08((uint64_t)&v111);
      std::ios::~ios();
    }
    *(void *)&long long v111 = 0;
    *((void *)&v111 + 1) = v20;
    char v112 = 2;
    sub_10008A630(&v86, (uint64_t)&v111, (uint64_t)&v114);
    sub_10007D27C((uint64_t *)v71, &v114);
    uint64_t v22 = v114;
    int64_t v23 = v115;
    uint64_t v24 = v70[2];
    if (v70[2] >= v70[3])
    {
      int64_t v26 = ((char *)v70[2] - (char *)v70[1]) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        sub_10004B570();
      }
      int64_t v28 = (char *)v70[3] - (char *)v70[1];
      if (((char *)v70[3] - (char *)v70[1]) >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        int64_t v30 = (char *)sub_10006D6E8((uint64_t)&v70[3], v29);
      }
      else {
        int64_t v30 = 0;
      }
      unint64_t v31 = &v30[16 * v26];
      *(void *)unint64_t v31 = v22;
      *((void *)v31 + 1) = v23;
      uint64_t v32 = (char *)v70[2];
      unint64_t v33 = (char *)v70[1];
      uint64_t v34 = v31;
      if (v70[2] != v70[1])
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
          v34 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        uint64_t v32 = (char *)v70[1];
      }
      unint64_t v25 = v31 + 16;
      v70[1] = v34;
      _OWORD v70[2] = v31 + 16;
      v70[3] = &v30[16 * v29];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(void *)_OWORD v70[2] = v114;
      v24[1] = v23;
      unint64_t v25 = v24 + 2;
    }
    _OWORD v70[2] = v25;
    uint64_t v35 = (int)v115;
    if ((v115 & 0x80000000) != 0) {
      int64_t v36 = (int)v115;
    }
    else {
      int64_t v36 = v115;
    }
    BOOL v37 = v36 >= 0 || v36 == 0;
    char v38 = v37;
    if (v37)
    {
      uint64_t v39 = v116;
      if (sub_100042754((uint64_t)&v86, (uint64_t)&v72, v116, v36))
      {
        v99[0] = v86;
        v99[1] = v87;
        if (v87) {
          atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v100[0] = v88[0];
        *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v88 + 9);
        uint64_t v101 = v89;
        long long v102 = v90;
        long long v103 = v91;
        long long v104 = v92;
        char v105 = v93;
        uint64_t v106 = v94;
        long long v107 = v95;
        if (v95) {
          atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v108 = v96;
        unint64_t v109 = v97;
        char v110 = v98;
        sub_100042718((uint64_t)v99, (uint64_t)&v72, v39, v36, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v111);
        sub_100018C14((uint64_t)v117, (uint64_t)&v111);
        sub_100018C5C(&v111);
        sub_10000371C((uint64_t)v99);
        sub_1000414AC((uint64_t)v117, (uint64_t)&v111);
        sub_100018CC8((uint64_t)&v86, &v111);
        sub_10000371C((uint64_t)&v111);
        sub_1000411FC((uint64_t)v117, (uint64_t)&v111);
        sub_100018CC8((uint64_t)&v72, &v111);
        sub_10000371C((uint64_t)&v111);
      }
      sub_100041C48((uint64_t)&v86, v36);
      v19 += v36;
    }
    else
    {
      if ((int)v115 >= 0) {
        uint64_t v35 = -(uint64_t)(int)v115;
      }
      unint64_t v51 = v35;
    }
    if (*((void *)&v114 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v114 + 1));
    }
    if ((v38 & 1) == 0) {
      goto LABEL_59;
    }
  }
  unint64_t v51 = v19;
LABEL_59:
  sub_1000197F0((uint64_t)v117);
  if (v82) {
    sub_100004944(v82);
  }
  if (v73) {
    sub_100004944(v73);
  }
  if (v95) {
    sub_100004944(v95);
  }
  if (v87) {
    sub_100004944(v87);
  }
  unint64_t v40 = *v11;
  unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  LOBYTE(v65) = 2;
  *((void **)&v66 + 1) = v70[1];
  long long v67 = v40 / v41;
  LODWORD(v68) = v51 / v42;
  unint64_t v43 = a2[3];
  if (v43 >= a2[4])
  {
    uint64_t v48 = sub_10007B738(a2 + 2, (uint64_t)&v65);
    uint64_t v49 = *(std::__shared_weak_count **)&v71[32];
    a2[3] = v48;
    if (v49) {
      sub_100004944(v49);
    }
  }
  else
  {
    long long v44 = v66;
    *(_OWORD *)unint64_t v43 = v65;
    *(_OWORD *)(v43 + 16) = v44;
    long long v45 = v67;
    long long v46 = v69;
    int v47 = v70[0];
    *(_OWORD *)(v43 + 48) = v68;
    *(_OWORD *)(v43 + 64) = v46;
    *(_OWORD *)(v43 + 32) = v45;
    *(void *)(v43 + 80) = v47;
    *(void *)(v43 + 88) = 0;
    *(void *)(v43 + 96) = 0;
    *(void *)(v43 + 104) = 0;
    *(_OWORD *)(v43 + 88) = *(_OWORD *)&v70[1];
    v70[1] = 0;
    _OWORD v70[2] = 0;
    *(void **)(v43 + 104) = v70[3];
    *(void *)(v43 + 112) = 0;
    v70[3] = 0;
    *(void *)(v43 + 120) = 0;
    *(void *)(v43 + 128) = 0;
    *(_OWORD *)(v43 + 112) = *(_OWORD *)v71;
    *(void *)(v43 + 128) = *(void *)&v71[16];
    memset(v71, 0, 24);
    *(_OWORD *)(v43 + 136) = *(_OWORD *)&v71[24];
    *(void *)&v71[32] = 0;
    *(void *)&v71[24] = 0;
    a2[3] = v43 + 152;
  }
  v117[0] = (void **)v71;
  sub_100073018(v117);
  if (v70[1])
  {
    _OWORD v70[2] = v70[1];
    operator delete(v70[1]);
  }
  return v51;
}

void sub_100076B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (STACK[0x640]) {
    sub_100004944((std::__shared_weak_count *)STACK[0x640]);
  }
  sub_1000197F0((uint64_t)&STACK[0x668]);
  sub_10000371C((uint64_t)&STACK[0x248]);
  sub_10000371C((uint64_t)&STACK[0x2E8]);
  sub_10000371C((uint64_t)&a23);
  sub_10000371C((uint64_t)&a43);
  sub_100076BEC((uint64_t)&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_100076BEC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    sub_100004944(v2);
  }
  int v5 = (void **)(a1 + 112);
  sub_100073018(&v5);
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100076C4C(uint64_t a1)
{
  *(void *)a1 = off_1001A9300;
  if (*(unsigned char *)(a1 + 256)) {
    sub_1001371D4(a1 + 56);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_100076CB8(uint64_t a1)
{
  *(void *)a1 = off_1001A9300;
  if (*(unsigned char *)(a1 + 256)) {
    sub_1001371D4(a1 + 56);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_100004944(v2);
  }
  operator delete();
}

uint64_t sub_100076D44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8))();
}

uint64_t sub_100076D50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
}

uint64_t sub_100076D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
}

uint64_t sub_100076D68()
{
  return 4294967218;
}

double sub_100076D70@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t sub_100076DF0()
{
  return 1;
}

BOOL sub_100076DF8(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 72))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0;
  }
  return !v1 || v4[2] != 0 || v4[3] != 0;
}

void sub_100076E68()
{
}

void sub_100076EB0()
{
}

uint64_t sub_100076ED4(uint64_t a1)
{
  if (qword_1001D47F8 != -1) {
    dispatch_once(&qword_1001D47F8, &stru_1001A9410);
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))off_1001D47F0;
  if (!off_1001D47F0) {
    return 0;
  }
  return v2(a1);
}

uint64_t sub_100076F4C(uint64_t a1)
{
  return a1;
}

void sub_100076F78(id a1)
{
  BOOL v1 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v1)
  {
    off_1001D47F0 = dlsym(v1, "AmberDiskImagePluginCreate");
    if (off_1001D47F0) {
      return;
    }
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    sub_100077218(v4, &v2);
    sub_1000039A0(v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50);
    std::ostream::~ostream();
    sub_100077C14((uint64_t)v4);
  }
  else
  {
    *(void *)&long long v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18;
    int v3 = 16;
    sub_1000770B0(v4, &v2);
    sub_1000039A0(v5, (uint64_t)"Cannot load libAmber", 20);
    std::ostream::~ostream();
    sub_100077410((uint64_t)v4);
  }
  std::ios::~ios();
}

void sub_10007708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007733C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000770B0(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100077380((uint64_t)a1, a2);
  *a1 = off_1001A9448;
  a1[45] = &off_1001A9548;
  a1[46] = &off_1001A9570;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9448;
  a1[45] = off_1001A94D0;
  a1[46] = off_1001A94F8;
  return a1;
}

void sub_1000771B0(_Unwind_Exception *a1)
{
  sub_100077410(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000771D4(uint64_t a1)
{
  return a1;
}

void *sub_100077218(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100077B84((uint64_t)a1, a2);
  *a1 = off_1001A9668;
  a1[45] = &off_1001A9768;
  a1[46] = &off_1001A9790;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001A9668;
  a1[45] = off_1001A96F0;
  a1[46] = off_1001A9718;
  return a1;
}

void sub_100077318(_Unwind_Exception *a1)
{
  sub_100077C14(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007733C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100077380(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A95E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000773FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100077410(uint64_t a1)
{
  *(void *)a1 = off_1001A95E0;
  sub_100077818(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10007754C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100077410(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000775B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000775EC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100077654(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100077410(v1);
  return std::ios::~ios();
}

void sub_1000776A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100077410(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100077704(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100077410(v1);
  return std::ios::~ios();
}

void sub_100077764(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100077410(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000777E0(uint64_t a1)
{
  sub_100077410(a1);
  operator delete();
}

uint64_t sub_100077818(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007799C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100077974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10007799C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 52;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 52;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100077B84(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9800;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100077C00(_Unwind_Exception *a1)
{
}

uint64_t sub_100077C14(uint64_t a1)
{
  *(void *)a1 = off_1001A9800;
  sub_10007801C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100077D50(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100077C14(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100077DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100077DF0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100077E58(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100077C14(v1);
  return std::ios::~ios();
}

void sub_100077EA4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100077C14(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100077F08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100077C14(v1);
  return std::ios::~ios();
}

void sub_100077F68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100077C14(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100077FE4(uint64_t a1)
{
  sub_100077C14(a1);
  operator delete();
}

uint64_t sub_10007801C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000781A0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100078178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000781A0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 58;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 58;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100078388(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_10007840C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_1000783F4(_Unwind_Exception *a1)
{
  sub_10007885C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10007840C(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_100078490(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_100078628((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CAA0(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **sub_100078490(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (sub_100078764(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      os_log_type_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          os_log_type_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          os_log_type_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((sub_100078764(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_100078764((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = *(void ***)(a2 + 8);
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      uint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((sub_100078764(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)sub_1000786D0((uint64_t)a1, a3, a5);
}

__n128 sub_100078628@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000A2C4(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1000786B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1000787FC(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1000786D0(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unsigned int v8 = v4 + 4;
        if ((sub_100078764(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_100078764(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_100078764(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_10007879C(a1, v2, v5, v6);
}

uint64_t sub_10007879C(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void sub_1000787FC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_10007885C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10007885C(a1, *(void *)a2);
    sub_10007885C(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void **sub_1000788C0(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_100078764(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_100078764(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_100078940(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)sub_1000786D0((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_1000789D8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CAA0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_1000789D8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10000A2C4(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100078A64(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1000787FC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100078A80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100078D10(v1);
  return std::ios::~ios();
}

uint64_t sub_100078ACC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100078D10(v1);
  return std::ios::~ios();
}

void sub_100078B2C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100078D10(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100078B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100078BCC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100078C34(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100078D10(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100078C98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100078D10(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100078D10(uint64_t a1)
{
  *(void *)a1 = off_1001A9A20;
  sub_100078E4C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100078E4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007900C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100078FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078FD4(uint64_t a1)
{
  sub_100078D10(a1);
  operator delete();
}

int *sub_10007900C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 92;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 92;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_1000791F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079484(v1);
  return std::ios::~ios();
}

uint64_t sub_100079240(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079484(v1);
  return std::ios::~ios();
}

void sub_1000792A0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100079484(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100079308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100079340(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000793A8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079484(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10007940C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079484(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100079484(uint64_t a1)
{
  *(void *)a1 = off_1001A9C40;
  sub_1000795C0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000795C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100079780((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079748(uint64_t a1)
{
  sub_100079484(a1);
  operator delete();
}

int *sub_100079780(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 152;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 152;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_100079968(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079BF8(v1);
  return std::ios::~ios();
}

uint64_t sub_1000799B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079BF8(v1);
  return std::ios::~ios();
}

void sub_100079A14(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100079BF8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100079A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100079AB4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100079B1C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100079BF8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100079B80(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100079BF8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100079BF8(uint64_t a1)
{
  *(void *)a1 = off_1001A9E60;
  sub_100079D34(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100079D34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100079EF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100079E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079EBC(uint64_t a1)
{
  sub_100079BF8(a1);
  operator delete();
}

int *sub_100079EF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 157;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 157;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10007A0DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A36C(v1);
  return std::ios::~ios();
}

uint64_t sub_10007A128(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A36C(v1);
  return std::ios::~ios();
}

void sub_10007A188(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007A36C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007A1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007A228(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007A290(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007A36C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10007A2F4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007A36C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007A36C(uint64_t a1)
{
  *(void *)a1 = off_1001AA080;
  sub_10007A4A8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10007A4A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007A668((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007A604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A630(uint64_t a1)
{
  sub_10007A36C(a1);
  operator delete();
}

int *sub_10007A668(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 163;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 163;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10007A850(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007AAE0(v1);
  return std::ios::~ios();
}

uint64_t sub_10007A89C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007AAE0(v1);
  return std::ios::~ios();
}

void sub_10007A8FC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007AAE0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007A964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007A99C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007AA04(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007AAE0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10007AA68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007AAE0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007AAE0(uint64_t a1)
{
  *(void *)a1 = off_1001AA2A0;
  sub_10007AC1C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10007AC1C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007ADDC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007AD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007ADA4(uint64_t a1)
{
  sub_10007AAE0(a1);
  operator delete();
}

int *sub_10007ADDC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 171;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 171;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10007AFC4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007B254(v1);
  return std::ios::~ios();
}

uint64_t sub_10007B010(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007B254(v1);
  return std::ios::~ios();
}

void sub_10007B070(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007B254(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007B0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007B110(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10007B178(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007B254(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10007B1DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007B254(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007B254(uint64_t a1)
{
  *(void *)a1 = off_1001AA4C0;
  sub_10007B390(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10007B390(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007B550((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007B4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007B518(uint64_t a1)
{
  sub_10007B254(a1);
  operator delete();
}

int *sub_10007B550(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 243;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 243;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10007B738(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_10004B570();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  void v19[4] = a1 + 2;
  uint64_t v10 = (char *)sub_10007B920(v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  v19[2] = v11 + 152;
  sub_10007B8A8(a1, v19);
  uint64_t v17 = a1[1];
  sub_10007BA14((uint64_t)v19);
  return v17;
}

void sub_10007B894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10007BA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007B8A8(uint64_t *a1, void *a2)
{
  sub_10007B96C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_10007B920(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_10004B1A4();
  }
  return operator new(152 * a2);
}

__n128 sub_10007B96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      __n128 *v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      v8[1].n128_u64[1] = 0;
      v8[2].n128_u64[0] = 0;
      v8[2].n128_u64[1] = 0;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152;
      a3 -= 152;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_10007BA14(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    sub_100072FC4(i - 152);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10007BA64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1001AA540;
  *(void *)(a1 + 8) = a2;
  sub_1001260BC((dispatch_semaphore_t *)(a1 + 24), 0);
  sub_1000751B0(a2);
  return a1;
}

void sub_10007BAC8(_Unwind_Exception *a1)
{
  sub_100125ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BADC(uint64_t a1)
{
  *(void *)a1 = off_1001AA540;
  sub_100125ECC((NSObject **)(a1 + 24));
  return a1;
}

void sub_10007BB20(uint64_t a1)
{
  *(void *)a1 = off_1001AA540;
  sub_100125ECC((NSObject **)(a1 + 24));
  operator delete();
}

void *sub_10007BB84(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t sub_10007BB9C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9A20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007BC18(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BC2C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9C40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007BCA8(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BCBC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001A9E60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007BD38(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BD4C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AA080;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007BDC8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10007BDDC(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000786D0((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_10007BE88((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000CAA0(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10007BF1C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_10007BE88@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10000A2C4(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10007BF04(_Unwind_Exception *a1)
{
  sub_10007BF1C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10007BF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10007BF74((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10007BF74(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_100004944(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_10007BFC8(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93;
  int v10 = 0;
  sub_10007C214(v11, &v9);
  sub_1000039A0(v12, (uint64_t)"Unregistering plugin ", 21);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  sub_1000039A0(v12, v5, v6);
  std::ostream::~ostream();
  sub_10007C40C((uint64_t)v11);
  uint64_t result = std::ios::~ios();
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_10007C08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007C338((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007C0A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001AA598;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10007C100(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001AA598;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete();
}

void sub_10007C174(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_10007BFC8(a1 + 32, *(void *)(a1 + 24));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *v2;
    operator delete(v3);
  }
}

uint64_t sub_10007C1D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *sub_10007C214(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007C37C((uint64_t)a1, a2);
  *a1 = off_1001AA600;
  a1[45] = &off_1001AA700;
  a1[46] = &off_1001AA728;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AA600;
  a1[45] = off_1001AA688;
  a1[46] = off_1001AA6B0;
  return a1;
}

void sub_10007C314(_Unwind_Exception *a1)
{
  sub_10007C40C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007C338(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007C37C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AA798;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007C3F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C40C(uint64_t a1)
{
  *(void *)a1 = off_1001AA798;
  sub_10007C814(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10007C548(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10007C40C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007C5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10007C5E8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10007C650(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007C40C(v1);
  return std::ios::~ios();
}

void sub_10007C69C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10007C40C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10007C700(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007C40C(v1);
  return std::ios::~ios();
}

void sub_10007C760(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10007C40C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10007C7DC(uint64_t a1)
{
  sub_10007C40C(a1);
  operator delete();
}

uint64_t sub_10007C814(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10007C998((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10007C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10007C998(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 167;
    __int16 v22 = 2082;
    int64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 167;
      __int16 v22 = 2082;
      int64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007CB80(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AA2A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007CBFC(_Unwind_Exception *a1)
{
}

void sub_10007CC14()
{
}

void *sub_10007CC28()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001AA818;
  return result;
}

void sub_10007CC60(uint64_t a1, void *a2)
{
  *a2 = off_1001AA818;
}

uint64_t sub_10007CC88(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t sub_10007CC9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10007CCDC()
{
}

void *sub_10007CCE8(void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10007CD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10007CE04(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10007CEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    sub_10007CCE8(&a10);
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007CF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10007CF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_10007CFFC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001AA8A8;
  sub_10007CF7C((uint64_t)v6, a3);
  a1[3] = a2;
  sub_10007CF7C((uint64_t)(a1 + 4), (uint64_t)v6);
  sub_10007CCE8(v6);
  return a1;
}

void sub_10007D0A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001AA8A8;
  sub_10007CCE8(&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_10007D0FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001AA8A8;
  sub_10007CCE8(&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void *sub_10007D164(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  sub_10007CF28(a1 + 32, *(void *)(a1 + 24));
  return sub_10007CCE8(v1);
}

uint64_t sub_10007D1A8(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

uint64_t sub_10007D1EC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AA4C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10007D268(_Unwind_Exception *a1)
{
}

void *sub_10007D27C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  char v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10004B570();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v19[4] = v4;
    long long v14 = (char *)sub_10006D6E8((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_10007D39C(a1, v19);
    long long v9 = (void *)a1[1];
    sub_100072DE0(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_10007D388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100072DE0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D39C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10007D414((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10007D414(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10007D4A8((uint64_t)v12);
  return v10;
}

uint64_t sub_10007D4A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100072D9C(a1);
  }
  return a1;
}

uint64_t sub_10007D4E0(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9 = sub_10007D644(a2, a3);
  sub_10007D858((void *)a1, v9, (a3 & 3) != 0);
  *(void *)a1 = off_1001AA968;
  *(void *)(a1 + 24) = off_1001AAA40;
  *(void *)(a1 + 72) = off_1001AAA68;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    sub_10007D8F0(a1, a4);
    sub_10007D9F0(a1);
    BOOL v10 = 1;
  }
  else if (*(unsigned char *)(a1 + 36))
  {
    BOOL v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  if (!*(void *)(a1 + 112)) {
    sub_10007DC9C(a1);
  }
  if (v10) {
    sub_10007DFF8(a1, (a3 & 0x200) != 0);
  }
  return a1;
}

void sub_10007D618(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (v3) {
    sub_10015192C(v3);
  }
  sub_1001518DC(v1);
  sub_10007E2A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D644(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    if (mkdir((const char *)a1, 0x1FFu) != -1) {
      return sub_100126808(v2, 0);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "Failed creating sparsebundle folder";
LABEL_16:
    int v9 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)v8, v7);
  }
  if ((a2 & 3) == 0 || geteuid()) {
    return sub_100126808(v2, 0);
  }
  if (*(char *)(v2 + 23) >= 0) {
    uint64_t v3 = (const char *)v2;
  }
  else {
    uint64_t v3 = *(const char **)v2;
  }
  if (stat(v3, &v11))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "stat failed";
    goto LABEL_16;
  }
  if (!v11.st_uid) {
    return sub_100126808(v2, 0);
  }
  sub_1000820D8((uint64_t)v10, v11.st_uid);
  uint64_t v4 = sub_100126808(v2, 0);
  sub_100082BA0((uint64_t)v10);
  return v4;
}

void sub_10007D764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void *sub_10007D858(void *a1, int a2, char a3)
{
  uint64_t v6 = sub_100149398(a1);
  sub_10012756C((uint64_t)(v6 + 3), a2, a3);
  *a1 = off_1001AAB10;
  a1[3] = &off_1001AABD0;
  return a1;
}

void sub_10007D8D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007D8F0(uint64_t result, unint64_t a2)
{
  if (a2 < 0x100000 || a2 > 0x200000000 || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v3);
    sub_1000039A0(v3, (uint64_t)"Invalid band size (", 19);
    std::ostream::operator<<();
    sub_1000039A0(v3, (uint64_t)" bytes)", 7);
    sub_10000550C((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  *(void *)(result + 128) = a2;
  return result;
}

void sub_10007D9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007D9F0(uint64_t a1)
{
  if (mkdirat(*(_DWORD *)(a1 + 32), "bands", 0x1FFu) == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = __error();
    uint64_t v8 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Failed creating bands folder", *v7);
  }
  sub_10007E838(a1);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100004890(__p, "token");
  uint64_t v3 = sub_100126E58(v2, (uint64_t)__p, 1538);
  sub_10005B2E0((uint64_t)&v17, v3, 1, 0);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  int v4 = *(_DWORD *)(a1 + 32);
  sub_100004890(v9, "lock");
  uint64_t v5 = sub_100126E58(v4, (uint64_t)v9, 1538);
  sub_10005B2E0((uint64_t)__p, v5, 1, 0);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  __p[0] = off_1001BEEF8;
  char v13 = off_1001BEFD8;
  long long v14 = off_1001BF010;
  sub_10005B774((uint64_t)&v16);
  if (v15) {
    sub_100004944(v15);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  long long v17 = off_1001BEEF8;
  uint64_t v19 = off_1001BEFD8;
  __int16 v20 = off_1001BF010;
  sub_10005B774((uint64_t)&v22);
  if (v21) {
    sub_100004944(v21);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_10007DC40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10007DC9C(uint64_t a1)
{
  sub_100004890(&__p, "Info.plist");
  sub_10007EA48(a1);
}

void sub_10007DD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    char v64 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "SparseBundleBackend::read_info()";
    *((void *)&a11 + 1) = 30;
    a12 = 16;
    sub_10007F3F4(&__p, &a11);
    sub_1000039A0(&a61, (uint64_t)"Failed to read ", 15);
    sub_1000039A0(&a61, (uint64_t)"Info.plist", 10);
    sub_1000039A0(&a61, (uint64_t)", ", 2);
    long long v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v64 + 16))(v64);
    size_t v66 = strlen(v65);
    sub_1000039A0(&a61, (uint64_t)v65, v66);
    sub_1000039A0(&a61, (uint64_t)", reading from backup", 21);
    sub_10007F518((uint64_t)&__p);
    __cxa_end_catch();
    sub_100004890(&__p, "Info.bckup");
    sub_10007EA48(v61);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007DFF8(uint64_t a1, char a2)
{
  uint64_t result = mkdirat(*(_DWORD *)(a1 + 32), "mapped", 0x1FFu);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v12);
    sub_1000039A0(v12, (uint64_t)"Failed creating ", 16);
    sub_1000039A0(v12, (uint64_t)"mapped", 6);
    sub_1000039A0(v12, (uint64_t)" folder", 7);
    uint64_t v6 = __error();
    sub_10000550C((uint64_t)exception, (uint64_t)v12, *v6);
  }
  if ((a2 & 1) == 0)
  {
    memset(&v11, 0, sizeof(v11));
    sub_100127A30(a1 + 24, &v11);
    if (fchmodat(*(_DWORD *)(a1 + 32), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      unsigned int v7 = __cxa_allocate_exception(0x40uLL);
      sub_100003404((uint64_t)v12);
      sub_1000039A0(v12, (uint64_t)"fchmodat failed for ", 20);
      sub_1000039A0(v12, (uint64_t)"mapped", 6);
      sub_1000039A0(v12, (uint64_t)" folder", 7);
      uint64_t v8 = __error();
      sub_10000550C((uint64_t)v7, (uint64_t)v12, *v8);
    }
    uint64_t result = geteuid();
    if (!result && v11.st_uid)
    {
      uint64_t result = fchownat(*(_DWORD *)(a1 + 32), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if (result == -1)
      {
        int v9 = __cxa_allocate_exception(0x40uLL);
        sub_100003404((uint64_t)v12);
        sub_1000039A0(v12, (uint64_t)"fchownat failed for ", 20);
        sub_1000039A0(v12, (uint64_t)"mapped", 6);
        sub_1000039A0(v12, (uint64_t)" folder", 7);
        char v10 = __error();
        sub_10000550C((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }
  return result;
}

void sub_10007E25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_10007E2A8(uint64_t a1)
{
  sub_1001272D8(a1 + 24);
  int v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10007E2E4(void *a1, int a2, char a3, void *a4)
{
  uint64_t v6 = sub_10007D858(a1, a2, a3);
  void *v6 = off_1001AA968;
  void v6[3] = off_1001AAA40;
  v6[9] = off_1001AAA68;
  v6[10] = *a4;
  uint64_t v7 = a4[1];
  v6[11] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  sub_10007DC9C((uint64_t)a1);
}

void sub_10007E4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10007E688((uint64_t)va);
  uint64_t v6 = v4[14];
  v4[14] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[13];
  if (v7) {
    sub_100004944(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v4[11];
  if (v8) {
    sub_100004944(v8);
  }
  sub_10007E2A8((uint64_t)v4);
  _Unwind_Resume(a1);
}

void *sub_10007E564(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000896B4((uint64_t)a1, a2);
  *a1 = off_1001AAC00;
  a1[45] = &off_1001AAD00;
  a1[46] = &off_1001AAD28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AAC00;
  a1[45] = off_1001AAC88;
  a1[46] = off_1001AACB0;
  return a1;
}

void sub_10007E664(_Unwind_Exception *a1)
{
  sub_100081BF4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007E688(uint64_t a1)
{
  return a1;
}

void *sub_10007E6D0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100089744((uint64_t)a1, a2);
  *a1 = off_1001AB260;
  a1[45] = &off_1001AB360;
  a1[46] = &off_1001AB388;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB260;
  a1[45] = off_1001AB2E8;
  a1[46] = off_1001AB310;
  return a1;
}

void sub_10007E7D0(_Unwind_Exception *a1)
{
  sub_100083860(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007E7F4(uint64_t a1)
{
  return a1;
}

void sub_10007E838(uint64_t a1)
{
  *(void *)&long long __p = "SparseBundleBackend::write_info_plists()";
  *((void *)&__p + 1) = 38;
  int v5 = 0;
  sub_10007FDB8(v7, &__p);
  sub_1000039A0(v13, (uint64_t)"Updating ", 9);
  sub_1000039A0(v13, (uint64_t)"Info.bckup", 10);
  sub_1000039A0(v13, (uint64_t)", disk size: ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_100085E90((uint64_t)v7);
  std::ios::~ios();
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100004890(&__p, "Info.bckup");
  uint64_t v3 = sub_100126E58(v2, (uint64_t)&__p, 1538);
  sub_10005B2E0((uint64_t)v7, v3, 1, 0);
  if (v6 < 0) {
    operator delete((void *)__p);
  }
  sub_10007F8BC(a1, (uint64_t)v7);
  sub_10007F55C(a1);
  v7[0] = off_1001BEEF8;
  int v9 = off_1001BEFD8;
  char v10 = off_1001BF010;
  sub_10005B774((uint64_t)&v12);
  if (v11) {
    sub_100004944(v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_10007EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
}

void sub_10007EA48(uint64_t a1)
{
}

void sub_10007F0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10000359C((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void *sub_10007F28C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000897D4((uint64_t)a1, a2);
  *a1 = off_1001AB480;
  a1[45] = &off_1001AB580;
  a1[46] = &off_1001AB5A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB480;
  a1[45] = off_1001AB508;
  a1[46] = off_1001AB530;
  return a1;
}

void sub_10007F38C(_Unwind_Exception *a1)
{
  sub_100083FD4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007F3B0(uint64_t a1)
{
  return a1;
}

void *sub_10007F3F4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100089B78((uint64_t)a1, a2);
  *a1 = off_1001AB6A0;
  a1[45] = &off_1001AB7A0;
  a1[46] = &off_1001AB7C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB6A0;
  a1[45] = off_1001AB728;
  a1[46] = off_1001AB750;
  return a1;
}

void sub_10007F4F4(_Unwind_Exception *a1)
{
  sub_1000847BC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007F518(uint64_t a1)
{
  return a1;
}

const void **sub_10007F55C(uint64_t a1)
{
  *(void *)&long long v8 = "SparseBundleBackend::write_primary_info_plist()";
  *((void *)&v8 + 1) = 45;
  int v9 = 0;
  sub_10007FC50(__p, &v8);
  sub_1000039A0(v11, (uint64_t)"Updating ", 9);
  sub_1000039A0(v11, (uint64_t)"Info.plist", 10);
  std::ostream::~ostream();
  sub_10008571C((uint64_t)__p);
  std::ios::~ios();
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2)
  {
    sub_100004890(__p, "Info.plist");
    operator new();
  }
  unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 56))(v2, 0);
  if (v3)
  {
    unsigned int v4 = v3;
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Failed truncating plist", v4);
  }
  return sub_10007F8BC(a1, *(void *)(a1 + 112));
}

void sub_10007F708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10007F754(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100089C08((uint64_t)a1, a2);
  *a1 = off_1001AB8C0;
  a1[45] = &off_1001AB9C0;
  a1[46] = &off_1001AB9E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB8C0;
  a1[45] = off_1001AB948;
  a1[46] = off_1001AB970;
  return a1;
}

void sub_10007F854(_Unwind_Exception *a1)
{
  sub_100084F30(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007F878(uint64_t a1)
{
  return a1;
}

const void **sub_10007F8BC(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"diskimage-bundle-type", @"com.apple.diskimage.sparsebundle");
  CFDictionarySetValue(Mutable, kCFBundleInfoDictionaryVersionKey, @"6.0");
  sub_100122C78(Mutable, @"bundle-backingstore-version", 2);
  sub_100122C78(Mutable, @"size", *(void *)(a1 + 120));
  sub_100122C78(Mutable, @"band-size", *(void *)(a1 + 128));
  unsigned int v4 = Mutable;
  int v5 = operator new(0x28uLL);
  long long __p = v5;
  long long v17 = xmmword_100171940;
  *int v5 = 0u;
  v5[1] = 0u;
  *(void *)((char *)v5 + 29) = 0;
  sub_100085414(a1 + 136, v5);
  sub_10012334C(v4, @"uuid", (uint64_t)&__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  CFErrorRef error = 0;
  CFDataRef v6 = CFPropertyListCreateData(kCFAllocatorDefault, Mutable, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v21 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)&__p);
    sub_1000039A0(&__p, (uint64_t)"Failed creating property list", 29);
    unsigned int Code = CFErrorGetCode(error);
    sub_10000550C((uint64_t)exception, (uint64_t)&__p, Code);
  }
  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v21);
  uint64_t v9 = *((void *)sub_10014B860() + 1);
  long long __p = BytePtr;
  *(void *)&long long v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v17 + 1) = Length;
  uint64_t v18 = 0;
  CFIndex v19 = Length;
  char v20 = 0;
  unsigned int v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 96))(a2, &__p);
  if ((void)v17) {
    sub_100004944((std::__shared_weak_count *)v17);
  }
  if ((v10 & 0x80000000) != 0
    || (unsigned int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 2)) != 0)
  {
    uint64_t v12 = __cxa_allocate_exception(0x40uLL);
    void *v12 = &off_1001C3DE8;
    char v13 = std::generic_category();
    v12[1] = v10;
    void v12[2] = v13;
    *((unsigned char *)v12 + 24) = 0;
    *((unsigned char *)v12 + 48) = 0;
    v12[7] = "Failed writing sparsebundle info";
  }
  sub_10002D56C((const void **)&v21);
  sub_100089C98((const void **)&error);
  return sub_1000055AC((const void **)&Mutable);
}

void sub_10007FBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_10000359C((uint64_t)&__p);
  sub_10002D56C((const void **)(v14 - 72));
  sub_100089C98((const void **)(v14 - 64));
  sub_1000055AC((const void **)(v14 - 56));
  _Unwind_Resume(a1);
}

void *sub_10007FC50(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100089CCC((uint64_t)a1, a2);
  *a1 = off_1001ABAE0;
  a1[45] = &off_1001ABBE0;
  a1[46] = &off_1001ABC08;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ABAE0;
  a1[45] = off_1001ABB68;
  a1[46] = off_1001ABB90;
  return a1;
}

void sub_10007FD50(_Unwind_Exception *a1)
{
  sub_10008571C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007FD74(uint64_t a1)
{
  return a1;
}

void *sub_10007FDB8(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100089D5C((uint64_t)a1, a2);
  *a1 = off_1001ABD00;
  a1[45] = &off_1001ABE00;
  a1[46] = &off_1001ABE28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ABD00;
  a1[45] = off_1001ABD88;
  a1[46] = off_1001ABDB0;
  return a1;
}

void sub_10007FEB8(_Unwind_Exception *a1)
{
  sub_100085E90(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10007FEDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007FF20(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 120) = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
  sub_10007E838(a1);
  return 0;
}

void *sub_100080070(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_100089DEC((uint64_t)a1, a2);
  *a1 = off_1001ABF20;
  a1[45] = &off_1001AC020;
  a1[46] = &off_1001AC048;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ABF20;
  a1[45] = off_1001ABFA8;
  a1[46] = off_1001ABFD0;
  return a1;
}

void sub_100080170(_Unwind_Exception *a1)
{
  sub_100086604(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100080194(uint64_t a1)
{
  return a1;
}

void sub_1000801D8(int *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1 + 8;
  if ((*(unsigned int (**)(int *))(*(void *)a1 + 48))(a1)) {
    int v4 = 2;
  }
  else {
    int v4 = 0;
  }
  int v7 = v4;
  sub_100004890(__p, "token");
  sub_100089E7C(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100080270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008028C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1) & 1) == 0)
  {
    int v11 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
      int v2 = 550;
    }
    else {
      int v2 = 20;
    }
    int v11 = v2;
    sub_100004890(__p, "lock");
    sub_100089E7C((int *)(a1 + 32), (uint64_t)__p, &v11, &v6);
    long long v3 = v6;
    long long v6 = 0uLL;
    int v4 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v3;
    if (v4)
    {
      sub_100004944(v4);
      if (*((void *)&v6 + 1)) {
        sub_100004944(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&long long v6 = "int SparseBundleBackend::lock()";
    *((void *)&v6 + 1) = 29;
    int v7 = 0;
    sub_1000085B8(__p, &v6);
    sub_1000039A0(v10, (uint64_t)"Opened bundle's lock file with flags 0x", 39);
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_10000B808((uint64_t)__p);
    std::ios::~ios();
  }
  return 0;
}

void sub_100080448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2 == 1)
  {
    long long v60 = __cxa_begin_catch(exception_object);
    int v61 = v60[2];
    if (v61 < 0) {
      int v61 = -v61;
    }
    BOOL v62 = v61 == 45 || v61 == 2;
    *(void *)&a9 = "int SparseBundleBackend::lock()";
    *((void *)&a9 + 1) = 29;
    if (v62)
    {
      a10 = 0;
      sub_10008058C(&__p, &a9);
      sub_1000039A0(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30);
      sub_10014B74C(&a60, (uint64_t)v60);
      sub_1000806B0((uint64_t)&__p);
    }
    else
    {
      a10 = 16;
      sub_1000806F4(&__p, &a9);
      sub_10014B74C(&a60, (uint64_t)v60);
      sub_100080818((uint64_t)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x100080430);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10008058C(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100089F8C((uint64_t)a1, a2);
  *a1 = off_1001AC140;
  a1[45] = &off_1001AC240;
  a1[46] = &off_1001AC268;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC140;
  a1[45] = off_1001AC1C8;
  a1[46] = off_1001AC1F0;
  return a1;
}

void sub_10008068C(_Unwind_Exception *a1)
{
  sub_100086D78(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000806B0(uint64_t a1)
{
  return a1;
}

void *sub_1000806F4(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10008A01C((uint64_t)a1, a2);
  *a1 = off_1001AC360;
  a1[45] = &off_1001AC460;
  a1[46] = &off_1001AC488;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC360;
  a1[45] = off_1001AC3E8;
  a1[46] = off_1001AC410;
  return a1;
}

void sub_1000807F4(_Unwind_Exception *a1)
{
  sub_1000874EC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100080818(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008085C(uint64_t a1)
{
  return sub_10008028C(a1 - 72);
}

uint64_t sub_100080864(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 192))(a1))
  {
    int v2 = (std::__shared_weak_count *)a1[11];
    a1[10] = 0;
    a1[11] = 0;
    if (v2) {
      sub_100004944(v2);
    }
    *(void *)&long long v4 = "int SparseBundleBackend::unlock_all()";
    *((void *)&v4 + 1) = 35;
    int v5 = 0;
    sub_100080940(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Bundle's lock file is closed", 28);
    std::ostream::~ostream();
    sub_100087C60((uint64_t)v6);
    std::ios::~ios();
  }
  return 0;
}

void sub_10008092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100080A64((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100080940(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10008A0AC((uint64_t)a1, a2);
  *a1 = off_1001AC580;
  a1[45] = &off_1001AC680;
  a1[46] = &off_1001AC6A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC580;
  a1[45] = off_1001AC608;
  a1[46] = off_1001AC630;
  return a1;
}

void sub_100080A40(_Unwind_Exception *a1)
{
  sub_100087C60(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100080A64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100080AA8(uint64_t a1)
{
  return 0;
}

BOOL sub_100080AC8(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

BOOL sub_100080AD8(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

void sub_100080AE8()
{
  sub_100004890(&__p, "bands");
  operator new();
}

void sub_100080B8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100080BC8()
{
  sub_100004890(&__p, "mapped");
  operator new();
}

void sub_100080C6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100080CA8(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  sub_100004890(__p, "bands");
  int v4 = sub_100126E58(v3, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  sub_100088144(&v9, v4);
  while (1)
  {
    int v5 = readdir(v9);
    if (!v5) {
      break;
    }
    *__error() = 0;
    d_name = v5->d_name;
    uint64_t v7 = strtoll(v5->d_name, 0, 16);
    if (!*__error())
    {
      sub_100004890(__p, d_name);
      sub_100080DE4(a2, (uint64_t)__p, v7);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return closedir(v9);
}

void sub_100080D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DIR *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100080DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_100080E38(uint64_t a1)
{
  unint64_t v1 = (unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 128) - 1) / *(void *)(a1 + 128);
  operator new();
}

void sub_100081010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void *)(v12 - 104);
  *(void *)(v12 - 104) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000810A4(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008A13C((uint64_t)a1, a2);
  *a1 = off_1001AC878;
  a1[45] = &off_1001AC978;
  a1[46] = &off_1001AC9A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AC878;
  a1[45] = off_1001AC900;
  a1[46] = off_1001AC928;
  return a1;
}

void sub_1000811A4(_Unwind_Exception *a1)
{
  sub_100088A5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000811C8(uint64_t a1)
{
  return a1;
}

void *sub_10008120C(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008A570((uint64_t)a1, a2);
  *a1 = off_1001ACA98;
  a1[45] = &off_1001ACB98;
  a1[46] = &off_1001ACBC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ACA98;
  a1[45] = off_1001ACB20;
  a1[46] = off_1001ACB48;
  return a1;
}

void sub_10008130C(_Unwind_Exception *a1)
{
  sub_1000891D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100081330(uint64_t a1)
{
  return a1;
}

void *sub_100081374(void *a1)
{
  *a1 = off_1001AA968;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = off_1001AAA40;
  a1[9] = off_1001AAA68;
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[13];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_100004944(v5);
  }
  sub_1001272D8(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_100081450(void *a1)
{
  *a1 = off_1001AA968;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[3] = off_1001AAA40;
  a1[9] = off_1001AAA68;
  uint64_t v3 = a1[14];
  a1[14] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[13];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_100004944(v5);
  }
  sub_1001272D8(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete();
}

uint64_t sub_10008154C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))();
}

uint64_t sub_100081574(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_10008157C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

void *sub_100081584(uint64_t a1, void *a2)
{
  return sub_1000039A0(a2, (uint64_t)"sparsebundle", 12);
}

uint64_t sub_100081598()
{
  return 4294967251;
}

uint64_t sub_1000815A0()
{
  return 4294967251;
}

uint64_t sub_1000815A8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_1000815B4(void *a1)
{
  *(a1 - 3) = off_1001AA968;
  *a1 = off_1001AAA40;
  a1[6] = off_1001AAA68;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_100004944(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_100004944(v4);
  }
  sub_1001272D8((uint64_t)a1);
  uint64_t v5 = (std::__shared_weak_count *)*(a1 - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_10008168C(void *a1)
{
  *(a1 - 3) = off_1001AA968;
  *a1 = off_1001AAA40;
  a1[6] = off_1001AAA68;
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    sub_100004944(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_100004944(v4);
  }
  sub_1001272D8((uint64_t)a1);
  uint64_t v5 = (std::__shared_weak_count *)*(a1 - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete();
}

void sub_100081788(void *a1)
{
  *(a1 - 9) = off_1001AA968;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *(a1 - 6) = off_1001AAA40;
  *a1 = off_1001AAA68;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_100004944(v5);
  }
  sub_1001272D8(v2);
  long long v6 = (std::__shared_weak_count *)*(a1 - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100081860(void *a1)
{
  *(a1 - 9) = off_1001AA968;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *(a1 - 6) = off_1001AAA40;
  *a1 = off_1001AAA68;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_100004944(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_100004944(v5);
  }
  sub_1001272D8(v2);
  long long v6 = (std::__shared_weak_count *)*(a1 - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete();
}

uint64_t sub_100081964(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100081BF4(v1);
  return std::ios::~ios();
}

uint64_t sub_1000819B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100081BF4(v1);
  return std::ios::~ios();
}

void sub_100081A10(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100081BF4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100081A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100081AB0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100081B18(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100081BF4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100081B7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100081BF4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100081BF4(uint64_t a1)
{
  *(void *)a1 = off_1001AAD98;
  sub_100081D30(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100081D30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100081EF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100081E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100081EB8(uint64_t a1)
{
  sub_100081BF4(a1);
  operator delete();
}

int *sub_100081EF0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 93;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 93;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000820D8(uint64_t a1, uid_t a2)
{
  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v7);
    sub_1000039A0(v7, (uint64_t)"failed to set euid to ", 22);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v7, 1u);
  }
  *(void *)&long long v5 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((void *)&v5 + 1) = 34;
  int v6 = 0;
  sub_100082234(v7, &v5);
  sub_1000039A0(v8, (uint64_t)"uid temporarily set to ", 23);
  std::ostream::operator<<();
  std::ostream::~ostream();
  sub_10008242C((uint64_t)v7);
  std::ios::~ios();
  return a1;
}

void sub_1000821F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100082234(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008239C((uint64_t)a1, a2);
  *a1 = off_1001AAE20;
  a1[45] = &off_1001AAF20;
  a1[46] = &off_1001AAF48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AAE20;
  a1[45] = off_1001AAEA8;
  a1[46] = off_1001AAED0;
  return a1;
}

void sub_100082334(_Unwind_Exception *a1)
{
  sub_10008242C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082358(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008239C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AAFB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100082418(_Unwind_Exception *a1)
{
}

uint64_t sub_10008242C(uint64_t a1)
{
  *(void *)a1 = off_1001AAFB8;
  sub_100082834(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100082568(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008242C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000825D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100082608(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100082670(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008242C(v1);
  return std::ios::~ios();
}

void sub_1000826BC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008242C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100082720(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008242C(v1);
  return std::ios::~ios();
}

void sub_100082780(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008242C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000827FC(uint64_t a1)
{
  sub_10008242C(a1);
  operator delete();
}

uint64_t sub_100082834(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000829B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100082990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000829B8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 128;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 128;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100082BA0(uint64_t a1)
{
  seteuid(0);
  *(void *)&long long v3 = "set_euid_wrapper::~set_euid_wrapper()";
  *((void *)&v3 + 1) = 35;
  int v4 = 0;
  sub_100082C64(v5, &v3);
  sub_1000039A0(v6, (uint64_t)"uid restored to 0 (res=", 23);
  std::ostream::operator<<();
  sub_1000039A0(v6, (uint64_t)")", 1);
  std::ostream::~ostream();
  sub_100082E5C((uint64_t)v5);
  std::ios::~ios();
  return a1;
}

void *sub_100082C64(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100082DCC((uint64_t)a1, a2);
  *a1 = off_1001AB040;
  a1[45] = &off_1001AB140;
  a1[46] = &off_1001AB168;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AB040;
  a1[45] = off_1001AB0C8;
  a1[46] = off_1001AB0F0;
  return a1;
}

void sub_100082D64(_Unwind_Exception *a1)
{
  sub_100082E5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100082D88(uint64_t a1)
{
  return a1;
}

uint64_t sub_100082DCC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AB1D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100082E48(_Unwind_Exception *a1)
{
}

uint64_t sub_100082E5C(uint64_t a1)
{
  *(void *)a1 = off_1001AB1D8;
  sub_100083264(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100082F98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100082E5C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100083000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100083038(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_1000830A0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100082E5C(v1);
  return std::ios::~ios();
}

void sub_1000830EC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100082E5C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100083150(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100082E5C(v1);
  return std::ios::~ios();
}

void sub_1000831B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100082E5C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008322C(uint64_t a1)
{
  sub_100082E5C(a1);
  operator delete();
}

uint64_t sub_100083264(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000833E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000833C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000833E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 133;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 133;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000835D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100083860(v1);
  return std::ios::~ios();
}

uint64_t sub_10008361C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100083860(v1);
  return std::ios::~ios();
}

void sub_10008367C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100083860(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000836E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008371C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100083784(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100083860(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000837E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100083860(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100083860(uint64_t a1)
{
  *(void *)a1 = off_1001AB3F8;
  sub_10008399C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008399C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100083B5C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100083AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100083B24(uint64_t a1)
{
  sub_100083860(a1);
  operator delete();
}

int *sub_100083B5C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 161;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 161;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100083D44(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100083FD4(v1);
  return std::ios::~ios();
}

uint64_t sub_100083D90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100083FD4(v1);
  return std::ios::~ios();
}

void sub_100083DF0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100083FD4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100083E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100083E90(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100083EF8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100083FD4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100083F5C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100083FD4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100083FD4(uint64_t a1)
{
  *(void *)a1 = off_1001AB618;
  sub_100084110(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100084110(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000842D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100084298(uint64_t a1)
{
  sub_100083FD4(a1);
  operator delete();
}

int *sub_1000842D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 207;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 207;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000844B8(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10006AA8C(a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100084510(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008452C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000847BC(v1);
  return std::ios::~ios();
}

uint64_t sub_100084578(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000847BC(v1);
  return std::ios::~ios();
}

void sub_1000845D8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000847BC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100084640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100084678(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000846E0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000847BC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100084744(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000847BC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000847BC(uint64_t a1)
{
  *(void *)a1 = off_1001AB838;
  sub_1000848F8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000848F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100084AB8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100084A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100084A80(uint64_t a1)
{
  sub_1000847BC(a1);
  operator delete();
}

int *sub_100084AB8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 263;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 263;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100084CA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100084F30(v1);
  return std::ios::~ios();
}

uint64_t sub_100084CEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100084F30(v1);
  return std::ios::~ios();
}

void sub_100084D4C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100084F30(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100084DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100084DEC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100084E54(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100084F30(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100084EB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100084F30(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100084F30(uint64_t a1)
{
  *(void *)a1 = off_1001ABA58;
  sub_10008506C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008506C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008522C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000851C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000851F4(uint64_t a1)
{
  sub_100084F30(a1);
  operator delete();
}

int *sub_10008522C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 270;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 270;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

unsigned char *sub_100085414(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      void v3[2] = 45;
    }
  }
  return a2;
}

uint64_t sub_10008548C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008571C(v1);
  return std::ios::~ios();
}

uint64_t sub_1000854D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008571C(v1);
  return std::ios::~ios();
}

void sub_100085538(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008571C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000855A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000855D8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100085640(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008571C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000856A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008571C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008571C(uint64_t a1)
{
  *(void *)a1 = off_1001ABC78;
  sub_100085858(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100085858(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100085A18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000859B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000859E0(uint64_t a1)
{
  sub_10008571C(a1);
  operator delete();
}

int *sub_100085A18(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 304;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 304;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100085C00(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100085E90(v1);
  return std::ios::~ios();
}

uint64_t sub_100085C4C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100085E90(v1);
  return std::ios::~ios();
}

void sub_100085CAC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100085E90(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100085D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100085D4C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100085DB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100085E90(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100085E18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100085E90(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100085E90(uint64_t a1)
{
  *(void *)a1 = off_1001ABE98;
  sub_100085FCC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100085FCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008618C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100086128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100086154(uint64_t a1)
{
  sub_100085E90(a1);
  operator delete();
}

int *sub_10008618C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 322;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 322;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100086374(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086604(v1);
  return std::ios::~ios();
}

uint64_t sub_1000863C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086604(v1);
  return std::ios::~ios();
}

void sub_100086420(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100086604(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100086488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000864C0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100086528(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086604(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008658C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086604(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100086604(uint64_t a1)
{
  *(void *)a1 = off_1001AC0B8;
  sub_100086740(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100086740(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100086900((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000868C8(uint64_t a1)
{
  sub_100086604(a1);
  operator delete();
}

int *sub_100086900(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 340;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 340;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100086AE8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086D78(v1);
  return std::ios::~ios();
}

uint64_t sub_100086B34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086D78(v1);
  return std::ios::~ios();
}

void sub_100086B94(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100086D78(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100086BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100086C34(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100086C9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100086D78(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100086D00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100086D78(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100086D78(uint64_t a1)
{
  *(void *)a1 = off_1001AC2D8;
  sub_100086EB4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100086EB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100087074((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100087010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008703C(uint64_t a1)
{
  sub_100086D78(a1);
  operator delete();
}

int *sub_100087074(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 367;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 367;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008725C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000874EC(v1);
  return std::ios::~ios();
}

uint64_t sub_1000872A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000874EC(v1);
  return std::ios::~ios();
}

void sub_100087308(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000874EC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100087370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000873A8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100087410(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000874EC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100087474(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000874EC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000874EC(uint64_t a1)
{
  *(void *)a1 = off_1001AC4F8;
  sub_100087628(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100087628(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000877E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100087784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000877B0(uint64_t a1)
{
  sub_1000874EC(a1);
  operator delete();
}

int *sub_1000877E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 370;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 370;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000879D0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087C60(v1);
  return std::ios::~ios();
}

uint64_t sub_100087A1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087C60(v1);
  return std::ios::~ios();
}

void sub_100087A7C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100087C60(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100087AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100087B1C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100087B84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100087C60(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100087BE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100087C60(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100087C60(uint64_t a1)
{
  *(void *)a1 = off_1001AC718;
  sub_100087D9C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100087D9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100087F5C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100087EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100087F24(uint64_t a1)
{
  sub_100087C60(a1);
  operator delete();
}

int *sub_100087F5C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 379;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 379;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DIR **sub_100088144(DIR **a1, int a2)
{
  uint64_t v3 = fdopendir(a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Failed opening folder for entries reading", 0x13u);
  }
  return a1;
}

void *sub_1000881AC(void *a1, uint64_t a2, char a3)
{
  a1[2] = a2;
  *a1 = off_1001AC798;
  unint64_t v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  sub_100088300(a1 + 3, v5);
  char v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5) {
    bzero(v6, 8 * v5);
  }
  a1[1] = v6;
  return a1;
}

void *sub_100088230(void *a1)
{
  *a1 = off_1001AC798;
  uint64_t v2 = a1 + 4;
  sub_1000885B8(a1 + 3, 0);
  sub_100088748(v2);
  return a1;
}

void sub_100088288(void *a1)
{
  *a1 = off_1001AC798;
  uint64_t v1 = a1 + 4;
  sub_1000885B8(a1 + 3, 0);
  sub_100088748(v1);
  operator delete();
}

uint64_t *sub_100088300(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[4] = 0;
  uint64_t v3 = malloc_type_valloc(8 * a2, 0x100004000313F17uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    char v6 = std::bad_alloc::bad_alloc(exception);
  }
  v7[0] = off_1001AC7E0;
  v7[3] = v7;
  long long v8 = v3;
  sub_100088538((uint64_t)v9, (uint64_t)v7);
  sub_100088428(a1, (uint64_t *)&v8);
  sub_1000885B8((uint64_t *)&v8, 0);
  sub_100088748(v9);
  sub_100088748(v7);
  return a1;
}

void sub_100088408(_Unwind_Exception *a1)
{
  sub_1000885B8(v1, 0);
  sub_100088748(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100088428(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  sub_1000885B8(a1, v4);
  sub_10008863C(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void sub_100088470()
{
}

void *sub_100088484()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1001AC7E0;
  return result;
}

void sub_1000884BC(uint64_t a1, void *a2)
{
  *a2 = off_1001AC7E0;
}

void sub_1000884E4(uint64_t a1, void **a2)
{
}

uint64_t sub_1000884EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10008852C()
{
}

uint64_t sub_100088538(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_1000885B8(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_1000885E8((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_1000885E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10008863C(void *a1, uint64_t a2)
{
  sub_1000886C0(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1000886C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100088748(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1000887CC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100088A5C(v1);
  return std::ios::~ios();
}

uint64_t sub_100088818(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100088A5C(v1);
  return std::ios::~ios();
}

void sub_100088878(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100088A5C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000888E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100088918(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100088980(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100088A5C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000889E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100088A5C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100088A5C(uint64_t a1)
{
  *(void *)a1 = off_1001ACA10;
  sub_100088B98(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100088B98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100088D58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100088CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100088D20(uint64_t a1)
{
  sub_100088A5C(a1);
  operator delete();
}

int *sub_100088D58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 437;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 437;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100088F40(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000891D0(v1);
  return std::ios::~ios();
}

uint64_t sub_100088F8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000891D0(v1);
  return std::ios::~ios();
}

void sub_100088FEC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000891D0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100089054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008908C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000890F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000891D0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100089158(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000891D0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000891D0(uint64_t a1)
{
  *(void *)a1 = off_1001ACC30;
  sub_10008930C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008930C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000894CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100089468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100089494(uint64_t a1)
{
  sub_1000891D0(a1);
  operator delete();
}

int *sub_1000894CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 446;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 446;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000896B4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AAD98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089730(_Unwind_Exception *a1)
{
}

uint64_t sub_100089744(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AB3F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000897C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000897D4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AB618;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089850(_Unwind_Exception *a1)
{
}

uint64_t sub_100089864(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  long long v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    long long v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  while (1)
  {
    do
    {
      if (v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v9 = 0;
      }
      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char v13 = sub_100089A6C(a1, v7);
      *((unsigned char *)&v17 + v8) = v13;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)&v17 + v8++) = sub_100089A6C(a1, v14) | (16 * v13);
    }
    while (!v8);
    if (v8 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_100089A04();
  }
  return v17;
}

void sub_100089A04()
{
  std::runtime_error::runtime_error(&v0, "invalid uuid string");
  sub_100089B38(&v0);
}

void sub_100089A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100089A6C(uint64_t a1, int a2)
{
  p_cache = DiskImageParamsSparseBundle_XPC.cache;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1001D3DB8, memory_order_acquire) & 1) == 0)
  {
    int v9 = a2;
    int v8 = __cxa_guard_acquire(&qword_1001D3DB8);
    p_cache = DiskImageParamsSparseBundle_XPC.cache;
    a2 = v9;
    if (v8)
    {
      qword_1001D3DB0 = (uint64_t)&a0123456789abcd[(void)off_1001D3DA8];
      __cxa_guard_release(&qword_1001D3DB8);
      p_cache = (void **)(DiskImageParamsSparseBundle_XPC + 16);
      a2 = v9;
    }
  }
  uint64_t v3 = p_cache[438];
  char v4 = memchr("0123456789abcdefABCDEF", a2, v3 - "0123456789abcdefABCDEF");
  if (v4) {
    long long v5 = v4;
  }
  else {
    long long v5 = v3;
  }
  unint64_t v6 = v5 - "0123456789abcdefABCDEF";
  if (v6 >= (unint64_t)off_1001D3DA8) {
    sub_100089A04();
  }
  return byte_10017200C[v6];
}

void sub_100089B38(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::runtime_error::runtime_error(exception, a1);
}

uint64_t sub_100089B78(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AB838;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089BF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100089C08(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ABA58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089C84(_Unwind_Exception *a1)
{
}

const void **sub_100089C98(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100089CCC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ABC78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089D48(_Unwind_Exception *a1)
{
}

uint64_t sub_100089D5C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ABE98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089DD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100089DEC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC0B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100089E68(_Unwind_Exception *a1)
{
}

void sub_100089E7C(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x470uLL);
  sub_100089F08(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100089EF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100089F08(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  int v5 = *a4;
  uint64_t v6 = sub_100126E58(*a2, a3, *a4);
  sub_10005B2E0((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_100089F78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100089F8C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC2D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10008A008(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A01C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC4F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10008A098(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A0AC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AC718;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10008A128(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A13C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACA10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10008A1B8(_Unwind_Exception *a1)
{
}

void sub_10008A1D0()
{
}

__n128 sub_10008A1E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1001ACCB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10008A238(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1001ACCB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_10008A270(void **a1, uint64_t a2, unint64_t *a3)
{
  if (*a1[1] <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v10);
    sub_1000039A0(v10, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_1000039A0(v10, v8, v9);
    sub_1000039A0(v10, (uint64_t)")", 1);
    sub_10000550C((uint64_t)exception, (uint64_t)v10, 0x16u);
  }
  BOOL result = sub_1000AC90C(*a1[2], *a3, 1);
  ++*a1[3];
  return result;
}

void sub_10008A36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100151784();
  _Unwind_Resume(a1);
}

uint64_t sub_10008A524(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10008A564()
{
}

uint64_t sub_10008A570(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACC30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10008A5EC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A600(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_10008A630@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result[3];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v3 > (v4 & 1) + v5 - 1
    || ((uint64_t v6 = result[2], v7 = v6 + v3, v8 = *(void *)a2, (v4 & 2) != 0) ? (v9 = *(void *)a2) : (v9 = v8 + 1),
        v7 <= v9))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  unint64_t v10 = v9 - v3;
  if (v9 >= v3)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      if (v4 == 3)
      {
        if (v5 < v8) {
          goto LABEL_30;
        }
      }
      else if (v8 >= v5)
      {
LABEL_30:
        unint64_t v16 = qword_1001D3B40;
        goto LABEL_31;
      }
    }
    else if (v8 >= v5 || v8 + 1 >= v5)
    {
      goto LABEL_30;
    }
    unint64_t v16 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_31:
    if (v6 - v10 < v16) {
      unint64_t v16 = v6 - v10;
    }
    uint64_t v17 = result[4];
    uint64_t v18 = result[1];
    *(void *)a3 = *result + v10;
    *(void *)(a3 + 8) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a3 + 16) = v16;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 32) = v17 - v10;
    goto LABEL_36;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (v5 < v8) {
        goto LABEL_20;
      }
    }
    else if (v8 >= v5)
    {
LABEL_20:
      uint64_t v11 = qword_1001D3B40;
      goto LABEL_21;
    }
  }
  else if (v8 >= v5 || v8 + 1 >= v5)
  {
    goto LABEL_20;
  }
  uint64_t v11 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_21:
  unint64_t v12 = v11 + v9;
  if (v12 >= v7) {
    unint64_t v12 = v6 + v3;
  }
  unint64_t v13 = v12 - v3;
  uint64_t v14 = result[4];
  uint64_t v15 = result[1];
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = v14;
LABEL_36:
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_10008A7A4(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1001ACD30;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 68) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  uint64_t v6 = a4[4];
  *(void *)(a1 + 160) = a4[3];
  *(void *)(a1 + 168) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[40];
  if (v7) {
    sub_1000AC90C(v7, a3, 1);
  }
  return a1;
}

void sub_10008A868(_Unwind_Exception *a1)
{
  sub_10008E038(v2);
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_100004944(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008A888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((void *)&v13 + 1) = 38;
    LODWORD(v14) = 2;
    sub_10008ABAC(v18, &v13);
    sub_1000039A0(v19, (uint64_t)"Reading ", 8);
    sub_100149114(v19);
    sub_1000039A0(v19, (uint64_t)" to ", 4);
    sub_10008C7D8(v19);
    std::ostream::~ostream();
    sub_10008E458((uint64_t)v18);
    std::ios::~ios();
  }
  unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  unint64_t v6 = *(void *)(a3 + 24);
  if (v5 >= *(void *)(a3 + 16) + v6)
  {
    int v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), a3);
  }
  else if (v5 <= v6)
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v13 + 1) = 38;
      LODWORD(v14) = 2;
      sub_10008AE7C(v18, &v13);
      sub_1000039A0(v19, (uint64_t)"Band data doesn't exist, zeroing", 32);
      std::ostream::~ostream();
      sub_10008F340((uint64_t)v18);
      std::ios::~ios();
    }
    bzero(*(void **)a3, *(void *)(a3 + 16));
    int v9 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 32);
    uint64_t v8 = *(void *)(a3 + 8);
    *(void *)&long long v13 = *(void *)a3;
    *((void *)&v13 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v5 - v6;
    unint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = 0;
    if (sub_1000D8524())
    {
      *(void *)&long long v11 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v11 + 1) = 38;
      int v12 = 2;
      sub_10008AD14(v18, &v11);
      sub_1000039A0(v19, (uint64_t)"Band data is partial, reading ", 30);
      sub_100149114(v19);
      std::ostream::~ostream();
      sub_10008EBCC((uint64_t)v18);
      std::ios::~ios();
    }
    int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v13);
    bzero((void *)(*(void *)a3 + v14), *(void *)(a3 + 16) - v14);
    if (v14 == v9) {
      int v9 = *(_DWORD *)(a3 + 16);
    }
    if (*((void *)&v13 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v9 >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return v9;
  }
}

void sub_10008AB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10008AFA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008ABAC(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000963BC((uint64_t)a1, a2);
  *a1 = off_1001ACE60;
  a1[45] = &off_1001ACF60;
  a1[46] = &off_1001ACF88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ACE60;
  a1[45] = off_1001ACEE8;
  a1[46] = off_1001ACF10;
  return a1;
}

void sub_10008ACAC(_Unwind_Exception *a1)
{
  sub_10008E458(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008ACD0(uint64_t a1)
{
  return a1;
}

void *sub_10008AD14(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10009644C((uint64_t)a1, a2);
  *a1 = off_1001AD080;
  a1[45] = &off_1001AD180;
  a1[46] = &off_1001AD1A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD080;
  a1[45] = off_1001AD108;
  a1[46] = off_1001AD130;
  return a1;
}

void sub_10008AE14(_Unwind_Exception *a1)
{
  sub_10008EBCC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008AE38(uint64_t a1)
{
  return a1;
}

void *sub_10008AE7C(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000964DC((uint64_t)a1, a2);
  *a1 = off_1001AD2A0;
  a1[45] = &off_1001AD3A0;
  a1[46] = &off_1001AD3C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD2A0;
  a1[45] = off_1001AD328;
  a1[46] = off_1001AD350;
  return a1;
}

void sub_10008AF7C(_Unwind_Exception *a1)
{
  sub_10008F340(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008AFA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008AFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((void *)&v8 + 1) = 39;
    int v9 = 2;
    sub_10008B124(v10, &v8);
    sub_1000039A0(v11, (uint64_t)"Writing ", 8);
    sub_100149114(v11);
    sub_1000039A0(v11, (uint64_t)" to ", 4);
    sub_10008C7D8(v11);
    std::ostream::~ostream();
    sub_10008FAB4((uint64_t)v10);
    std::ios::~ios();
  }
  unint64_t v6 = sub_10008B28C(a1);
  sub_100146374(v6, a3);
  LODWORD(result) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), a3);
  *(unsigned char *)(a1 + 68) = 1;
  if ((int)result >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return (int)result;
  }
}

void sub_10008B110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10008B248((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008B124(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10009656C((uint64_t)a1, a2);
  *a1 = off_1001AD4C0;
  a1[45] = &off_1001AD5C0;
  a1[46] = &off_1001AD5E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD4C0;
  a1[45] = off_1001AD548;
  a1[46] = off_1001AD570;
  return a1;
}

void sub_10008B224(_Unwind_Exception *a1)
{
  sub_10008FAB4(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008B248(uint64_t a1)
{
  return a1;
}

unint64_t sub_10008B28C(uint64_t a1)
{
  unint64_t result = atomic_load((unint64_t *)(a1 + 48));
  if (!result)
  {
    uint64_t v5 = a1;
    if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 56), memory_order_acquire) != -1)
    {
      v4[0] = &v5;
      unint64_t v6 = v4;
      std::__call_once((std::once_flag::_State_type *)(a1 + 56), &v6, (void (__cdecl *)(void *))sub_100096D10);
    }
    unint64_t result = atomic_load((unint64_t *)(a1 + 48));
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100003404((uint64_t)v4);
      sub_1000039A0(v4, (uint64_t)"Failed opening mapped blocks file for ", 38);
      sub_10008C7D8(v4);
      sub_10000550C((uint64_t)exception, (uint64_t)v4, *(_DWORD *)(a1 + 64));
    }
  }
  return result;
}

void sub_10008B378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10008B3AC(uint64_t a1, void *a2)
{
  unint64_t v3 = sub_10008B28C(a1);
  unint64_t v6 = (void *)*a2;
  unsigned int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0) {
        unint64_t v7 = v5[4];
      }
      else {
        unint64_t v7 = v5[4] + 1;
      }
      sub_100146914(v3, v7, (v5[6] & 1) + v5[5] - 1);
      long long v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v4);
  }
  uint64_t v11 = *(void *)(v3 + 8);
  return sub_1000AC6CC(v11);
}

void sub_10008B458(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v14 = a3;
  int v12 = 0;
  long long v13 = 0;
  int v9 = (***(uint64_t (****)(void))(a2 + 8))(*(void *)(a2 + 8));
  sub_100053BA0(__p);
  sub_1000965FC(&v9, (uint64_t)__p, &v14, &v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (*a4)
  {
    int v9 = 3;
    sub_10009670C((uint64_t *)&v10, (uint64_t)a4, &v9, __p);
    uint64_t v5 = __p[0];
    unint64_t v6 = (atomic_ullong *)__p[1];
  }
  else
  {
    uint64_t v5 = v10;
    unint64_t v6 = v11;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
  }
  int v12 = v5;
  long long v13 = v6;
  operator new();
}

void sub_10008B588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_100004944(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008B5FC(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 8))
  {
    *(void *)&long long __p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&__p + 1) = 32;
    int v12 = 0;
    sub_10008BB54(v14, &__p);
    sub_1000039A0(v15, (uint64_t)"Skipping erase of band ", 23);
    std::ostream::operator<<();
    sub_1000039A0(v15, (uint64_t)", disk image is terminated", 26);
    std::ostream::~ostream();
    sub_100090228((uint64_t)v14);
    std::ios::~ios();
    return;
  }
  sub_100053BA0(&__p);
  int v4 = (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  int v5 = sub_100127E20(v4, (uint64_t *)&__p);
  if (v5)
  {
    if (v5 >= 0) {
      int v6 = v5;
    }
    else {
      int v6 = -v5;
    }
    if (v6 != 2)
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 16;
      sub_10008BCBC(v14, &v9);
      sub_1000039A0(v15, (uint64_t)"Failed to erase mapped file of band ", 36);
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
      sub_1000039A0(v15, (uint64_t)", error ", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_10009099C((uint64_t)v14);
      goto LABEL_11;
    }
    if (sub_1000D8524())
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 2;
      sub_10001B828(v14, &v9);
      sub_1000039A0(v15, (uint64_t)"No mapped file for band ", 24);
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1]
                                                                            + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
      std::ostream::~ostream();
      sub_10001BA20((uint64_t)v14);
LABEL_11:
      std::ios::~ios();
    }
  }
  int v7 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  if (sub_100127E20(v7, (uint64_t *)&__p))
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 16;
    sub_10002D66C(v14, &v9);
    sub_1000039A0(v15, (uint64_t)"Failed to erase band ", 21);
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
    sub_1000039A0(v15, (uint64_t)", error ", 8);
    std::ostream::operator<<();
    std::ostream::~ostream();
    sub_10002D9CC((uint64_t)v14);
    std::ios::~ios();
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 320);
    if (v8) {
      sub_1000AC90C(v8, a2, 0);
    }
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 2;
    sub_10008BE24(v14, &v9);
    sub_1000039A0(v15, (uint64_t)"Completed erase of band ", 24);
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v15[1] + *(void *)(v15[0] - 24)) = *(_DWORD *)((unsigned char *)&v15[1] + *(void *)(v15[0] - 24)) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    sub_100091110((uint64_t)v14);
    std::ios::~ios();
  }
  if (v13 < 0) {
    operator delete((void *)__p);
  }
}

void sub_10008BAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10008BB54(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100096910((uint64_t)a1, a2);
  *a1 = off_1001AD6E0;
  a1[45] = &off_1001AD7E0;
  a1[46] = &off_1001AD808;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD6E0;
  a1[45] = off_1001AD768;
  a1[46] = off_1001AD790;
  return a1;
}

void sub_10008BC54(_Unwind_Exception *a1)
{
  sub_100090228(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008BC78(uint64_t a1)
{
  return a1;
}

void *sub_10008BCBC(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000969A0((uint64_t)a1, a2);
  *a1 = off_1001AD900;
  a1[45] = &off_1001ADA00;
  a1[46] = &off_1001ADA28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AD900;
  a1[45] = off_1001AD988;
  a1[46] = off_1001AD9B0;
  return a1;
}

void sub_10008BDBC(_Unwind_Exception *a1)
{
  sub_10009099C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008BDE0(uint64_t a1)
{
  return a1;
}

void *sub_10008BE24(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100096A30((uint64_t)a1, a2);
  *a1 = off_1001ADB20;
  a1[45] = &off_1001ADC20;
  a1[46] = &off_1001ADC48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ADB20;
  a1[45] = off_1001ADBA8;
  a1[46] = off_1001ADBD0;
  return a1;
}

void sub_10008BF24(_Unwind_Exception *a1)
{
  sub_100091110(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008BF48(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008BF8C(uint64_t a1)
{
  *(void *)a1 = off_1001ACD30;
  sub_100053278(*(void *)(a1 + 40) + 184, *(void *)(a1 + 32), 0);
  sub_10008E08C(a1 + 72);
  uint64_t v2 = atomic_load((unint64_t *)(a1 + 48));
  if (*(unsigned char *)(a1 + 69))
  {
    if (!v2) {
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete();
  }
  if (v2)
  {
    if (*(unsigned char *)(**(void **)(a1 + 40) + 8))
    {
      *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
      *((void *)&v8 + 1) = 27;
      int v9 = 0;
      sub_1000748D0(v10, &v8);
      sub_1000039A0(v11, (uint64_t)"Disk image is terminated, skipping flush of ", 44);
      sub_10008C7D8(v11);
      sub_1000039A0(v11, (uint64_t)", dirty=", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      sub_100079484((uint64_t)v10);
      std::ios::~ios();
    }
    else
    {
      if (sub_1000D8524())
      {
        *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
        *((void *)&v8 + 1) = 27;
        int v9 = 2;
        sub_10008C2AC(v10, &v8);
        sub_1000039A0(v11, (uint64_t)"flushing and closing ", 21);
        sub_10008C7D8(v11);
        std::ostream::~ostream();
        sub_100091884((uint64_t)v10);
        std::ios::~ios();
      }
      sub_100146380(v2);
      if (*(unsigned char *)(a1 + 68)) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1);
      }
    }
    goto LABEL_13;
  }
  if (sub_1000D8524())
  {
    *(void *)&long long v8 = "sparse_bundles::Band::~Band()";
    *((void *)&v8 + 1) = 27;
    int v9 = 2;
    sub_100074BA0(v10, &v8);
    sub_1000039A0(v11, (uint64_t)"Closing an unchanged ", 21);
    sub_10008C7D8(v11);
    std::ostream::~ostream();
    sub_10007A36C((uint64_t)v10);
    std::ios::~ios();
  }
LABEL_18:
  int v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v5) {
    sub_100004944(v5);
  }
  if (*(unsigned char *)(a1 + 69)) {
    sub_10008B5FC(*(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  sub_10005331C(*(void *)(a1 + 40) + 184, *(void *)(a1 + 32));
  sub_10008E038(a1 + 72);
  int v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6) {
    sub_100004944(v6);
  }
  return a1;
}

void *sub_10008C2AC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100096AC0((uint64_t)a1, a2);
  *a1 = off_1001ADD40;
  a1[45] = &off_1001ADE40;
  a1[46] = &off_1001ADE68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ADD40;
  a1[45] = off_1001ADDC8;
  a1[46] = off_1001ADDF0;
  return a1;
}

void sub_10008C3AC(_Unwind_Exception *a1)
{
  sub_100091884(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008C3D0(uint64_t a1)
{
  return a1;
}

void sub_10008C418(uint64_t a1)
{
  sub_10008BF8C(a1);
  operator delete();
}

void sub_10008C450(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  sub_100096B50(a2, v3);
}

void sub_10008C4B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_100004944(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008C4C8(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100091D68((uint64_t *)a1, a2);
  std::mutex::unlock(v4);
}

void sub_10008C520(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C534(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 68) & 1) == 0) {
    return 0;
  }
  *(unsigned char *)(a1 + 68) = 0;
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 48));
  uint64_t v1 = sub_100146380(v3);
  if (v1
    || (uint64_t v1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 1),
        v1))
  {
    *(unsigned char *)(a1 + 68) = 1;
    *(void *)&long long v5 = "sparse_bundles::Band::flush()";
    *((void *)&v5 + 1) = 27;
    int v6 = 16;
    sub_10008C670(v7, &v5);
    sub_10008C7D8(v8);
    sub_1000039A0(v8, (uint64_t)": flush failed (", 16);
    std::ostream::operator<<();
    sub_1000039A0(v8, (uint64_t)")", 1);
    std::ostream::~ostream();
    sub_10009225C((uint64_t)v7);
    std::ios::~ios();
  }
  return v1;
}

void sub_10008C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10008C794((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008C670(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100096C80((uint64_t)a1, a2);
  *a1 = off_1001ADF60;
  a1[45] = &off_1001AE060;
  a1[46] = &off_1001AE088;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001ADF60;
  a1[45] = off_1001ADFE8;
  a1[46] = off_1001AE010;
  return a1;
}

void sub_10008C770(_Unwind_Exception *a1)
{
  sub_10009225C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008C794(uint64_t a1)
{
  return a1;
}

void *sub_10008C7D8(void *a1)
{
  uint64_t v1 = sub_1000039A0(a1, (uint64_t)"band ", 5);
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t result = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)result + *(void *)(*result - 24) + 8) = *(_DWORD *)((unsigned char *)result
                                                                            + *(void *)(*result - 24)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void *sub_10008C864(void *result)
{
  if (*result && atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    unint64_t result = (void *)*v1;
    if (*v1)
    {
      operator delete();
    }
  }
  return result;
}

void *sub_10008C8FC(void *a1)
{
  return a1;
}

uint64_t sub_10008C924(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)a2;
  *(void *)unint64_t result = *(void *)a2;
  unint64_t v3 = atomic_load(v2);
  if (!v3) {
LABEL_5:
  }
    operator new();
  unint64_t v4 = v3;
  while (1)
  {
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)result, &v4, v3 + 1);
    if (v4 == v3) {
      break;
    }
    unint64_t v3 = v4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v5;
  return result;
}

uint64_t sub_10008C9C4(uint64_t result, uint64_t a2)
{
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2) {
    *(void *)a2 = 0;
  }
  return result;
}

void *sub_10008C9E4(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10008C864(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *a2 = 0;
  }
  return a1;
}

uint64_t sub_10008CA30@<X0>(std::chrono::steady_clock::time_point **a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = atomic_load((unint64_t *)*a1);
  sub_100052BB8((atomic_ullong *)((*a1)[1].__d_.__rep_ + 56));
  if (v6 != 1 || (uint64_t v7 = 1, atomic_compare_exchange_strong(&(*a1)->__d_.__rep_, (unint64_t *)&v7, 0), v7 != 1))
  {
    sub_100052BC4((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000D8524())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      sub_10008CCE0(v15, &v13);
      sub_1000039A0(v16, (uint64_t)"Missed an evictable slot", 24);
      std::ostream::~ostream();
      sub_1000929D0((uint64_t)v15);
      std::ios::~ios();
    }
    operator new();
  }
  long long v8 = a1[1];
  if (v8)
  {
    sub_10008E08C((uint64_t)&v8[9]);
    int v9 = a1[1];
    int v10 = (dispatch_group_t *)((*a1)[1].__d_.__rep_ + 392);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000;
    void v12[2] = sub_10008CE48;
    void v12[3] = &unk_1001ACDF0;
    void v12[4] = a1;
    v12[5] = v9;
    sub_100055C7C(v10, v12);
  }
  else
  {
    sub_100052BC4((*a1)[1].__d_.__rep_ + 56);
    if (sub_1000D8524())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      sub_10008D124(v15, &v13);
      sub_1000039A0(v16, (uint64_t)"Replaced an empty slot", 22);
      std::ostream::~ostream();
      sub_1000938B8((uint64_t)v15);
      std::ios::~ios();
    }
  }
  a1[1] = a2;
  if (!a2)
  {
    a1[2] = (std::chrono::steady_clock::time_point *)-1;
    operator new();
  }
  a1[2] = (std::chrono::steady_clock::time_point *)a2[4].__d_.__rep_;
  atomic_store(2uLL, (unint64_t *)*a1);
  (*a1)[2].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t result = sub_10008C924(a3, (uint64_t)a1);
  atomic_fetch_add(&(*a1)->__d_.__rep_, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void *sub_10008CCE0(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000982D0((uint64_t)a1, a2);
  *a1 = off_1001AE180;
  a1[45] = &off_1001AE280;
  a1[46] = &off_1001AE2A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE180;
  a1[45] = off_1001AE208;
  a1[46] = off_1001AE230;
  return a1;
}

void sub_10008CDE0(_Unwind_Exception *a1)
{
  sub_1000929D0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008CE04(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008CE48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1000D8524())
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    sub_100080070(v7, &v5);
    sub_1000039A0(v8, (uint64_t)"Background close of ", 20);
    sub_10008C7D8(v8);
    std::ostream::~ostream();
    sub_100086604((uint64_t)v7);
    std::ios::~ios();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  sub_100052BC4(*(void *)(*(void *)v2 + 8) + 56);
  uint64_t result = sub_1000D8524();
  if (result)
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    sub_10008CFBC(v7, &v5);
    sub_1000039A0(v8, (uint64_t)"Close completed", 15);
    std::ostream::~ostream();
    sub_100093144((uint64_t)v7);
    return std::ios::~ios();
  }
  return result;
}

void sub_10008CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10008D0E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008CFBC(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100098360((uint64_t)a1, a2);
  *a1 = off_1001AE3A0;
  a1[45] = &off_1001AE4A0;
  a1[46] = &off_1001AE4C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE3A0;
  a1[45] = off_1001AE428;
  a1[46] = off_1001AE450;
  return a1;
}

void sub_10008D0BC(_Unwind_Exception *a1)
{
  sub_100093144(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008D0E0(uint64_t a1)
{
  return a1;
}

void *sub_10008D124(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000983F0((uint64_t)a1, a2);
  *a1 = off_1001AE5C0;
  a1[45] = &off_1001AE6C0;
  a1[46] = &off_1001AE6E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE5C0;
  a1[45] = off_1001AE648;
  a1[46] = off_1001AE670;
  return a1;
}

void sub_10008D224(_Unwind_Exception *a1)
{
  sub_1000938B8(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008D248(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008D28C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load(*(unint64_t **)a1);
  while (v4 == 1)
  {
    unint64_t v4 = 1;
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)a1, &v4, 0);
    if (v4 == 1)
    {
      unint64_t v5 = sub_10008B28C(*(void *)(a1 + 8));
      if (sub_1000AC6CC(*(void *)(v5 + 8)))
      {
        sub_10008E08C(*(void *)(a1 + 8) + 72);
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (dispatch_group_t *)(*(void *)(*(void *)a1 + 8) + 392);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 0x40000000;
        void v11[2] = sub_10008DB38;
        void v11[3] = &unk_1001ACE10;
        v11[4] = v6;
        sub_100055C7C(v7, v11);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = -1;
        long long v8 = *(unint64_t **)a1;
        uint64_t v9 = 1;
        atomic_store(1uLL, v8);
      }
      else
      {
        if (sub_1000D8524())
        {
          *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
          *((void *)&v14 + 1) = 43;
          int v15 = 2;
          sub_10008D9D0(v16, &v14);
          sub_1000039A0(v17, (uint64_t)"Skipping erase of ", 18);
          sub_10008C7D8(v17);
          sub_1000039A0(v17, (uint64_t)", band was written to", 21);
          std::ostream::~ostream();
          sub_100095688((uint64_t)v16);
          std::ios::~ios();
        }
        return 1;
      }
      return v9;
    }
  }
  if (v4)
  {
    sub_10008C924((uint64_t)&v14, a1);
    if (*((void *)&v14 + 1) && *(void *)(*((void *)&v14 + 1) + 32) == a2)
    {
      if (sub_1000D8524())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        sub_10008D700(v16, &v12);
        sub_1000039A0(v17, (uint64_t)"Skipping band erase (in use)", 28);
        std::ostream::~ostream();
        sub_1000947A0((uint64_t)v16);
        std::ios::~ios();
      }
      uint64_t v9 = 1;
    }
    else
    {
      if (sub_1000D8524())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        sub_10008D868(v16, &v12);
        sub_1000039A0(v17, (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process", 79);
        std::ostream::~ostream();
        sub_100094F14((uint64_t)v16);
        std::ios::~ios();
      }
      uint64_t v9 = 0;
    }
    sub_10008C864(&v14);
  }
  else
  {
    if (sub_1000D8524())
    {
      *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((void *)&v14 + 1) = 43;
      int v15 = 2;
      sub_10008D598(v16, &v14);
      sub_1000039A0(v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55);
      std::ostream::~ostream();
      sub_10009402C((uint64_t)v16);
      std::ios::~ios();
    }
    return 0;
  }
  return v9;
}

void *sub_10008D598(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100098480((uint64_t)a1, a2);
  *a1 = off_1001AE7E0;
  a1[45] = &off_1001AE8E0;
  a1[46] = &off_1001AE908;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AE7E0;
  a1[45] = off_1001AE868;
  a1[46] = off_1001AE890;
  return a1;
}

void sub_10008D698(_Unwind_Exception *a1)
{
  sub_10009402C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008D6BC(uint64_t a1)
{
  return a1;
}

void *sub_10008D700(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100098510((uint64_t)a1, a2);
  *a1 = off_1001AEA00;
  a1[45] = &off_1001AEB00;
  a1[46] = &off_1001AEB28;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AEA00;
  a1[45] = off_1001AEA88;
  a1[46] = off_1001AEAB0;
  return a1;
}

void sub_10008D800(_Unwind_Exception *a1)
{
  sub_1000947A0(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008D824(uint64_t a1)
{
  return a1;
}

void *sub_10008D868(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000985A0((uint64_t)a1, a2);
  *a1 = off_1001AEC20;
  a1[45] = &off_1001AED20;
  a1[46] = &off_1001AED48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AEC20;
  a1[45] = off_1001AECA8;
  a1[46] = off_1001AECD0;
  return a1;
}

void sub_10008D968(_Unwind_Exception *a1)
{
  sub_100094F14(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008D98C(uint64_t a1)
{
  return a1;
}

void *sub_10008D9D0(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100098630((uint64_t)a1, a2);
  *a1 = off_1001AEE40;
  a1[45] = &off_1001AEF40;
  a1[46] = &off_1001AEF68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AEE40;
  a1[45] = off_1001AEEC8;
  a1[46] = off_1001AEEF0;
  return a1;
}

void sub_10008DAD0(_Unwind_Exception *a1)
{
  sub_100095688(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008DAF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008DB38(uint64_t a1)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((void *)&v4 + 1) = 43;
    int v5 = 2;
    sub_10008DC24(v6, &v4);
    sub_1000039A0(v7, (uint64_t)"Background erase of ", 20);
    sub_10008C7D8(v7);
    std::ostream::~ostream();
    sub_100095DFC((uint64_t)v6);
    std::ios::~ios();
  }
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 16))(v2);
}

void sub_10008DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10008DD48((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10008DC24(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000986C0((uint64_t)a1, a2);
  *a1 = off_1001AF060;
  a1[45] = &off_1001AF160;
  a1[46] = &off_1001AF188;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AF060;
  a1[45] = off_1001AF0E8;
  a1[46] = off_1001AF110;
  return a1;
}

void sub_10008DD24(_Unwind_Exception *a1)
{
  sub_100095DFC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10008DD48(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008DD8C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_10008DD98(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 40) / *(void *)(*(void *)(a1 + 40) + 48);
}

uint64_t sub_10008DDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_10008DDD0()
{
}

void sub_10008DE58()
{
}

unint64_t sub_10008DE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v34[0] = sub_100096398;
  v34[1] = 0;
  void v34[2] = a1;
  v34[3] = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&long long v22 = *(void *)a3;
  *((void *)&v22 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v23[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v24 = *(void *)(a3 + 48);
  long long v25 = *(_OWORD *)(a3 + 56);
  long long v26 = *(_OWORD *)(a3 + 72);
  long long v27 = *(_OWORD *)(a3 + 88);
  char v28 = *(unsigned char *)(a3 + 104);
  int v5 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v29 = *(void *)(a3 + 112);
  int64_t v30 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *(_OWORD *)(a3 + 128);
  uint64_t v32 = *(void *)(a3 + 144);
  char v33 = *(unsigned char *)(a3 + 152);
  uint64_t v6 = *(void *)(a4 + 8);
  *(void *)&long long v10 = *(void *)a4;
  *((void *)&v10 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v11[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v12 = *(void *)(a4 + 48);
  long long v13 = *(_OWORD *)(a4 + 56);
  long long v14 = *(_OWORD *)(a4 + 72);
  long long v15 = *(_OWORD *)(a4 + 88);
  char v16 = *(unsigned char *)(a4 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v17 = *(void *)(a4 + 112);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *(_OWORD *)(a4 + 128);
  uint64_t v20 = *(void *)(a4 + 144);
  char v21 = *(unsigned char *)(a4 + 152);
  unint64_t v8 = sub_100018640((uint64_t)v34, &v22, &v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v18) {
    sub_100004944(v18);
  }
  if (*((void *)&v10 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v30) {
    sub_100004944(v30);
  }
  if (*((void *)&v22 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v22 + 1));
  }
  return v8;
}

void sub_10008E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10008E038(uint64_t a1)
{
  sub_10008E08C(a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    sub_100004944(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  uint64_t v4 = (void **)a1;
  sub_100073018(&v4);
  return a1;
}

void sub_10008E08C(uint64_t a1)
{
  if (sub_1000D8524())
  {
    *(void *)&long long v9 = "sparse_bundles::Band::ContextsList::clear()";
    *((void *)&v9 + 1) = 41;
    int v10 = 2;
    sub_100073A90(v11, &v9);
    sub_1000039A0(v12, (uint64_t)"Resetting ", 10);
    std::ostream::operator<<();
    sub_1000039A0(v12, (uint64_t)" band contexts", 14);
    std::ostream::~ostream();
    sub_100078D10((uint64_t)v11);
    std::ios::~ios();
  }
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      int v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v6 = *(void *)(a1 + 96);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v8 = *(std::__shared_weak_count **)(v4 + 24);
      *(void *)(v4 + 16) = v7;
      *(void *)(v4 + 24) = v6;
      if (v8) {
        sub_100004944(v8);
      }
      if (v5) {
        sub_100004944(v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_10008E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100073BB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E1C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008E458(v1);
  return std::ios::~ios();
}

uint64_t sub_10008E214(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008E458(v1);
  return std::ios::~ios();
}

void sub_10008E274(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008E458(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008E2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008E314(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008E37C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008E458(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008E3E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008E458(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008E458(uint64_t a1)
{
  *(void *)a1 = off_1001ACFF8;
  sub_10008E594(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008E594(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008E754((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008E6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E71C(uint64_t a1)
{
  sub_10008E458(a1);
  operator delete();
}

int *sub_10008E754(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 47;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 47;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008E93C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008EBCC(v1);
  return std::ios::~ios();
}

uint64_t sub_10008E988(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008EBCC(v1);
  return std::ios::~ios();
}

void sub_10008E9E8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008EBCC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008EA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008EA88(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008EAF0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008EBCC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008EB54(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008EBCC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008EBCC(uint64_t a1)
{
  *(void *)a1 = off_1001AD218;
  sub_10008ED08(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008ED08(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008EEC8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008EE90(uint64_t a1)
{
  sub_10008EBCC(a1);
  operator delete();
}

int *sub_10008EEC8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 56;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 56;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008F0B0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008F340(v1);
  return std::ios::~ios();
}

uint64_t sub_10008F0FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008F340(v1);
  return std::ios::~ios();
}

void sub_10008F15C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008F340(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008F1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008F1FC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008F264(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008F340(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008F2C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008F340(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008F340(uint64_t a1)
{
  *(void *)a1 = off_1001AD438;
  sub_10008F47C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008F47C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008F63C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008F5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008F604(uint64_t a1)
{
  sub_10008F340(a1);
  operator delete();
}

int *sub_10008F63C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 63;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 63;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008F824(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008FAB4(v1);
  return std::ios::~ios();
}

uint64_t sub_10008F870(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008FAB4(v1);
  return std::ios::~ios();
}

void sub_10008F8D0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10008FAB4(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008F938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10008F970(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10008F9D8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10008FAB4(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10008FA3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10008FAB4(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10008FAB4(uint64_t a1)
{
  *(void *)a1 = off_1001AD658;
  sub_10008FBF0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10008FBF0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10008FDB0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10008FD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008FD78(uint64_t a1)
{
  sub_10008FAB4(a1);
  operator delete();
}

int *sub_10008FDB0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 74;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 74;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008FF98(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100090228(v1);
  return std::ios::~ios();
}

uint64_t sub_10008FFE4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100090228(v1);
  return std::ios::~ios();
}

void sub_100090044(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100090228(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000900AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_1000900E4(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_10009014C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100090228(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000901B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100090228(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100090228(uint64_t a1)
{
  *(void *)a1 = off_1001AD878;
  sub_100090364(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100090364(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100090524((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000904C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000904EC(uint64_t a1)
{
  sub_100090228(a1);
  operator delete();
}

int *sub_100090524(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 116;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 116;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10009070C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009099C(v1);
  return std::ios::~ios();
}

uint64_t sub_100090758(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009099C(v1);
  return std::ios::~ios();
}

void sub_1000907B8(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009099C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100090820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100090858(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000908C0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009099C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100090924(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009099C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009099C(uint64_t a1)
{
  *(void *)a1 = off_1001ADA98;
  sub_100090AD8(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100090AD8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100090C98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100090C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100090C60(uint64_t a1)
{
  sub_10009099C(a1);
  operator delete();
}

int *sub_100090C98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 126;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 126;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100090E80(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100091110(v1);
  return std::ios::~ios();
}

uint64_t sub_100090ECC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100091110(v1);
  return std::ios::~ios();
}

void sub_100090F2C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100091110(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100090F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100090FCC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100091034(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100091110(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100091098(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100091110(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100091110(uint64_t a1)
{
  *(void *)a1 = off_1001ADCB8;
  sub_10009124C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_10009124C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10009140C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000913A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000913D4(uint64_t a1)
{
  sub_100091110(a1);
  operator delete();
}

int *sub_10009140C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 139;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 139;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000915F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100091884(v1);
  return std::ios::~ios();
}

uint64_t sub_100091640(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100091884(v1);
  return std::ios::~ios();
}

void sub_1000916A0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100091884(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100091708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100091740(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000917A8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100091884(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10009180C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100091884(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100091884(uint64_t a1)
{
  *(void *)a1 = off_1001ADED8;
  sub_1000919C0(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000919C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100091B80((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100091B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100091B48(uint64_t a1)
{
  sub_100091884(a1);
  operator delete();
}

int *sub_100091B80(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 154;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 154;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100091D68(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10004B570();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v19[4] = v4;
    long long v14 = (char *)sub_10006D6E8((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_100091E88(a1, v19);
    long long v9 = (void *)a1[1];
    sub_100072DE0(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100091E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100072DE0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100091E88(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100091F00((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100091F00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100091F94((uint64_t)v12);
  return v10;
}

uint64_t sub_100091F94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100072D9C(a1);
  }
  return a1;
}

uint64_t sub_100091FCC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009225C(v1);
  return std::ios::~ios();
}

uint64_t sub_100092018(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009225C(v1);
  return std::ios::~ios();
}

void sub_100092078(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009225C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000920E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100092118(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100092180(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009225C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000921E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009225C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009225C(uint64_t a1)
{
  *(void *)a1 = off_1001AE0F8;
  sub_100092398(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100092398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100092558((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000924F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100092520(uint64_t a1)
{
  sub_10009225C(a1);
  operator delete();
}

int *sub_100092558(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 203;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 203;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100092740(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000929D0(v1);
  return std::ios::~ios();
}

uint64_t sub_10009278C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000929D0(v1);
  return std::ios::~ios();
}

void sub_1000927EC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000929D0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100092854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009288C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000928F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000929D0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100092958(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000929D0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000929D0(uint64_t a1)
{
  *(void *)a1 = off_1001AE318;
  sub_100092B0C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100092B0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100092CCC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100092C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100092C94(uint64_t a1)
{
  sub_1000929D0(a1);
  operator delete();
}

int *sub_100092CCC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 331;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 331;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100092EB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100093144(v1);
  return std::ios::~ios();
}

uint64_t sub_100092F00(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100093144(v1);
  return std::ios::~ios();
}

void sub_100092F60(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100093144(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100092FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100093000(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100093068(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100093144(v1);
  std::ios::~ios();
  operator delete();
}

void sub_1000930CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100093144(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100093144(uint64_t a1)
{
  *(void *)a1 = off_1001AE538;
  sub_100093280(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100093280(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100093440((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000933DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100093408(uint64_t a1)
{
  sub_100093144(a1);
  operator delete();
}

int *sub_100093440(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 343;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 343;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100093628(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000938B8(v1);
  return std::ios::~ios();
}

uint64_t sub_100093674(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000938B8(v1);
  return std::ios::~ios();
}

void sub_1000936D4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000938B8(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100093774(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000937DC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000938B8(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100093840(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000938B8(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000938B8(uint64_t a1)
{
  *(void *)a1 = off_1001AE758;
  sub_1000939F4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000939F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100093BB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100093B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100093B7C(uint64_t a1)
{
  sub_1000938B8(a1);
  operator delete();
}

int *sub_100093BB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 347;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 347;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100093D9C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009402C(v1);
  return std::ios::~ios();
}

uint64_t sub_100093DE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009402C(v1);
  return std::ios::~ios();
}

void sub_100093E48(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009402C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100093EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100093EE8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100093F50(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009402C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100093FB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009402C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009402C(uint64_t a1)
{
  *(void *)a1 = off_1001AE978;
  sub_100094168(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100094168(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100094328((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000942C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000942F0(uint64_t a1)
{
  sub_10009402C(a1);
  operator delete();
}

int *sub_100094328(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 382;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 382;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100094510(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000947A0(v1);
  return std::ios::~ios();
}

uint64_t sub_10009455C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000947A0(v1);
  return std::ios::~ios();
}

void sub_1000945BC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_1000947A0(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100094624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009465C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000946C4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_1000947A0(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100094728(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_1000947A0(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000947A0(uint64_t a1)
{
  *(void *)a1 = off_1001AEB98;
  sub_1000948DC(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000948DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100094A9C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100094A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100094A64(uint64_t a1)
{
  sub_1000947A0(a1);
  operator delete();
}

int *sub_100094A9C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 387;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 387;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100094C84(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094F14(v1);
  return std::ios::~ios();
}

uint64_t sub_100094CD0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094F14(v1);
  return std::ios::~ios();
}

void sub_100094D30(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100094F14(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100094D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100094DD0(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100094E38(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100094F14(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100094E9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100094F14(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100094F14(uint64_t a1)
{
  *(void *)a1 = off_1001AEDB8;
  sub_100095050(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100095050(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100095210((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000951AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000951D8(uint64_t a1)
{
  sub_100094F14(a1);
  operator delete();
}

int *sub_100095210(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 390;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 390;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000953F8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095688(v1);
  return std::ios::~ios();
}

uint64_t sub_100095444(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095688(v1);
  return std::ios::~ios();
}

void sub_1000954A4(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100095688(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009550C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100095544(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_1000955AC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095688(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100095610(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095688(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100095688(uint64_t a1)
{
  *(void *)a1 = off_1001AEFD8;
  sub_1000957C4(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_1000957C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_100095984((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100095920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009594C(uint64_t a1)
{
  sub_100095688(a1);
  operator delete();
}

int *sub_100095984(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 399;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 399;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100095B6C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095DFC(v1);
  return std::ios::~ios();
}

uint64_t sub_100095BB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095DFC(v1);
  return std::ios::~ios();
}

void sub_100095C18(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100095DFC(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100095C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100095CB8(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void sub_100095D20(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100095DFC(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100095D84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100095DFC(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100095DFC(uint64_t a1)
{
  *(void *)a1 = off_1001AF1F8;
  sub_100095F38(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

uint64_t sub_100095F38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000960F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_100096094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000960C0(uint64_t a1)
{
  sub_100095DFC(a1);
  operator delete();
}

int *sub_1000960F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 406;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 406;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000962E0(void *a1)
{
  *a1 = off_1001AF278;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_10009632C(void *a1)
{
  *a1 = off_1001AF278;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

uint64_t sub_100096398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t sub_1000963BC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ACFF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096438(_Unwind_Exception *a1)
{
}

uint64_t sub_10009644C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD218;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000964C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000964DC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD438;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096558(_Unwind_Exception *a1)
{
}

uint64_t sub_10009656C(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD658;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000965E8(_Unwind_Exception *a1)
{
}

void sub_1000965FC(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_100096688(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100096674(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100096688(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A6F68;
  int v5 = *a4;
  uint64_t v6 = sub_100126E58(*a2, a3, *a4);
  sub_10005B2E0((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_1000966F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10009670C(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_100096798(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001CC0C((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100096784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100096798(void *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A8548;
  sub_1000967F4((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000967E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000967F4(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100096880(&v8, *a4);
  sub_1001419EC(a1, &v9, a3, &v8);
  if (v10) {
    sub_100004944(v10);
  }
  return a1;
}

void sub_100096868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_100096880(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_ignore_fields_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

uint64_t sub_100096910(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AD878;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009698C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000969A0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADA98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_100096A30(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADCB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096AAC(_Unwind_Exception *a1)
{
}

uint64_t sub_100096AC0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001ADED8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096B3C(_Unwind_Exception *a1)
{
}

void sub_100096B50(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100096BB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1001514C0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100096BD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100096C0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_100096C3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100096C80(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE0F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100096CFC(_Unwind_Exception *a1)
{
}

void sub_100096D10(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (sub_1000D8524())
  {
    *(void *)&long long v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((void *)&v3 + 1) = 72;
    LODWORD(v4) = 2;
    sub_100096F04(v7, &v3);
    sub_1000039A0(v8, (uint64_t)"Opening mapped blocks for ", 26);
    sub_10008C7D8(v8);
    std::ostream::~ostream();
    sub_100097358((uint64_t)v7);
    std::ios::~ios();
  }
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)&long long v3 = _NSConcreteStackBlock;
  *((void *)&v3 + 1) = 0x40000000;
  char v4 = sub_10009706C;
  long long v5 = &unk_1001AF338;
  uint64_t v6 = v1;
  sub_100053860(v2, (uint64_t)&v3);
}

void *sub_100096F04(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_1000972C8((uint64_t)a1, a2);
  *a1 = off_1001AF370;
  a1[45] = &off_1001AF470;
  a1[46] = &off_1001AF498;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AF370;
  a1[45] = off_1001AF3F8;
  a1[46] = off_1001AF420;
  return a1;
}

void sub_100097004(_Unwind_Exception *a1)
{
  sub_100097358(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100097028(uint64_t a1)
{
  return a1;
}

void sub_10009706C(uint64_t a1)
{
  sub_1001493EC(*(void *)(a1 + 32) + 16, &v1);
  operator new();
}

void sub_100097128(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100004944(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100097160(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_100097ACC((uint64_t)a1, a2);
  *a1 = off_1001AF590;
  a1[45] = &off_1001AF690;
  a1[46] = &off_1001AF6B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AF590;
  a1[45] = off_1001AF618;
  a1[46] = off_1001AF640;
  return a1;
}

void sub_100097260(_Unwind_Exception *a1)
{
  sub_100097B5C(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_100097284(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000972C8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AF508;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100097344(_Unwind_Exception *a1)
{
}

uint64_t sub_100097358(uint64_t a1)
{
  *(void *)a1 = off_1001AF508;
  sub_100097760(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100097494(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100097358(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_1000974FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100097534(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10009759C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100097358(v1);
  return std::ios::~ios();
}

void sub_1000975E8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100097358(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009764C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100097358(v1);
  return std::ios::~ios();
}

void sub_1000976AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100097358(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100097728(uint64_t a1)
{
  sub_100097358(a1);
  operator delete();
}

uint64_t sub_100097760(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000978E4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000978BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000978E4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 219;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 219;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100097ACC(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AF728;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_100097B48(_Unwind_Exception *a1)
{
}

uint64_t sub_100097B5C(uint64_t a1)
{
  *(void *)a1 = off_1001AF728;
  sub_100097F64(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_100097C98(uint64_t a1)
{
  std::ostream::~ostream();
  sub_100097B5C(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100097D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_100097D38(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_100097DA0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100097B5C(v1);
  return std::ios::~ios();
}

void sub_100097DEC(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_100097B5C(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_100097E50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100097B5C(v1);
  return std::ios::~ios();
}

void sub_100097EB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_100097B5C(v1);
  std::ios::~ios();
  operator delete();
}

void sub_100097F2C(uint64_t a1)
{
  sub_100097B5C(a1);
  operator delete();
}

uint64_t sub_100097F64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_1000980E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_1000980C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000980E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 226;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf(__stderrp, "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = sub_1000D848C();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 226;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000982D0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE318;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009834C(_Unwind_Exception *a1)
{
}

uint64_t sub_100098360(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE538;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000983DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000983F0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE758;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009846C(_Unwind_Exception *a1)
{
}

uint64_t sub_100098480(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AE978;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000984FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100098510(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AEB98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009858C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000985A0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AEDB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009861C(_Unwind_Exception *a1)
{
}

uint64_t sub_100098630(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AEFD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_1000986AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000986C0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AF1F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009873C(_Unwind_Exception *a1)
{
}

void sub_100098BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098BE0(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_100098D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098D68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100098EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098F20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_1000990C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000990EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    int v8 = *(void **)(a1 + 32);
    id v9 = 0;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }
  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100099178(_OWORD *a1)
{
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  operator new[]();
}

void sub_10009928C()
{
}

_DWORD *sub_1000992B0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  sub_100019EB0((uint64_t)"header_signature", v4, &v14, 1);
  *(_DWORD *)a1 = 1936879731;
  int v5 = bswap32(*(_DWORD *)(a2 + 4));
  uint64_t v14 = 0x200000001;
  int v15 = 3;
  sub_100019EB0((uint64_t)"version_t", v5, &v14, 3);
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  uint64_t result = sub_100099478(&v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a2 + 16));
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  *(void *)(a1 + 28) = bswap64(*(void *)(a2 + 28));
  long long v7 = *(_OWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 36) = v7;
  if (!*(_DWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = (void *)sub_100002B24((uint64_t)exception, (uint64_t)"Band size in sparse is zero", 0x16u);
  }
  for (uint64_t i = 0; i != 28; ++i)
  {
    if (*(unsigned char *)(a1 + 36 + i))
    {
      uint64_t v10 = __cxa_allocate_exception(0x40uLL);
      unint64_t v11 = (void *)sub_100002B24((uint64_t)v10, (uint64_t)"Reserved part isn't zeroed", 0x16u);
    }
  }
  return result;
}

_DWORD *sub_100099478(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "flags_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = v2;
  }
  return result;
}

void sub_1000995B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009974C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000998AC(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100099A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100099AC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100099AD4(uint64_t a1)
{
}

void sub_100099ADC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    int v8 = *__error();
    if (sub_1000D850C())
    {
      id v9 = sub_1000D848C();
      os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68158210;
      int v16 = 73;
      __int16 v17 = 2080;
      __int16 v18 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v7;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();

      if (v10)
      {
        fprintf(__stderrp, "%s\n", v10);
        free(v10);
      }
    }
    else
    {
      unint64_t v11 = sub_1000D848C();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 73;
        __int16 v17 = 2080;
        __int16 v18 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
        __int16 v19 = 2112;
        id v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%.*s: %@", buf, 0x1Cu);
      }
    }
    *__error() = v8;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v6;
  id v14 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100099CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_10009A9E8()
{
  return &unk_1001D3DC0;
}

void sub_10009A9F4()
{
}

void sub_10009AA48()
{
}

void sub_10009AAB0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "path", &v15);
    unsigned int v6 = v5;
    if (v5 > 0)
    {
      +[NSString stringWithUTF8String:v15];
      objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t))(a1 + 16))(v15);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *, uint64_t *))a1)(a2, "writable", &v15);
      unsigned int v8 = v7;
      if (v7 == 1)
      {
        (*(void (**)(void))(a1 + 16))();
        operator new();
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &off_1001AFF10;
      id v14 = std::generic_category();
      exception[1] = v8;
      exception[2] = v14;
      exception[3] = "Cannot decode writable";
    }
    unint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v11 = &off_1001AFF10;
    uint64_t v12 = std::generic_category();
    v11[1] = v6;
    _OWORD v11[2] = v12;
    void v11[3] = "Cannot decode path";
  }
  id v9 = __cxa_allocate_exception(0x20uLL);
  *id v9 = &off_1001AFF10;
  uint64_t v10 = std::generic_category();
  v9[1] = v4;
  _OWORD v9[2] = v10;
  v9[3] = "Cannot decode file descriptor";
}

void sub_10009AD80(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = __cxa_begin_catch(exception_object);
    sub_10009AFA0(v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x10009AC38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009ADDC(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_10009AE04(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a2 + 8) objectForKeyedSubscript:@"path"];
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(void *)a1 = 88;
  *(void *)(a1 + 8) = sub_10009B258;
  *(void *)(a1 + 16) = sub_10009B260;
  *(void *)(a1 + 24) = sub_10009B28C;
  *(void *)(a1 + 32) = sub_10009B29C;
  *(void *)(a1 + 40) = sub_10009B2A4;
  *(void *)(a1 + 48) = sub_10009B2AC;
  *(void *)(a1 + 56) = sub_10009B2B0;
  *(void *)(a1 + 64) = sub_10009B2B4;
  *(void *)(a1 + 72) = sub_10009B2B8;
  *(void *)(a1 + 80) = 0;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = &off_1001AFF10;
    uint64_t v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }
  return a1;
}

void sub_10009AF7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_10009E6D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009AFA0(_DWORD *a1, uint64_t *a2)
{
  int v4 = *__error();
  if (sub_1000D850C())
  {
    BOOL v5 = sub_1000D848C();
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
    int v7 = a1[2];
    *(_DWORD *)uint64_t buf = 68158466;
    int v14 = 97;
    __int16 v15 = 2080;
    int v16 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v17 = 2080;
    uint64_t v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }
  else
  {
    uint64_t v9 = sub_1000D848C();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
      int v11 = a1[2];
      *(_DWORD *)uint64_t buf = 68158466;
      int v14 = 97;
      __int16 v15 = 2080;
      int v16 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v17 = 2080;
      uint64_t v18 = v10;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)", buf, 0x22u);
    }
  }
  *__error() = v4;
  if (a2)
  {
    *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:(int)a1[2] userInfo:0];
  }
  return 0;
}

void *sub_10009B1F4(void *a1, uint64_t a2, unsigned int a3)
{
  *a1 = &off_1001AFF10;
  uint64_t v6 = std::generic_category();
  a1[1] = a3;
  a1[2] = v6;
  a1[3] = a2;
  return a1;
}

uint64_t sub_10009B258()
{
  return 512;
}

unint64_t sub_10009B260(uint64_t a1)
{
  sub_10009B2F8(a1, &v2);
  return (unint64_t)v2.st_size >> 9;
}

BOOL sub_10009B28C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 96) != 0;
}

uint64_t sub_10009B29C()
{
  return 1024;
}

uint64_t sub_10009B2A4()
{
  return 1024;
}

uint64_t sub_10009B2B8(uint64_t result)
{
  if (result)
  {
    sub_10009E6D0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10009B2F8@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 100), a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v4 = __error();
    BOOL v5 = sub_10009B1F4(exception, (uint64_t)"fstat failed", *v4);
  }
  return result;
}

void sub_10009B364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFUUIDRef sub_10009B378(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v1 = sub_10009B40C((uint64_t)v5, (char *)[*(id *)(a1 + 88) UTF8String], (uint64_t)objc_msgSend(*(id *)(a1 + 88), "length"));
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0, v6);
}

uint64_t sub_10009B40C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v13 = xmmword_100172960;
  int v14 = -1009589776;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v16 = 0;
  do
  {
    char v7 = *(unsigned char *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      sub_10009B6F0(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100089B38(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++v6;
  }
  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0;
      sub_10009B6F0(&v13);
    }
    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_100089B38(&v12);
      }
      ++v18;
    }
    else
    {
      v17 += 8;
    }
    ++a2;
  }
  return sub_10009B644(a1, &v13);
}

void sub_10009B624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_10009B644(uint64_t a1, _DWORD *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  int v5 = 0;
  sub_10009B92C(a2, v4);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)&v6 + i) = bswap32(*(_DWORD *)((char *)v4 + i));
  BYTE6(v6) = BYTE6(v6) & 0xF | 0x50;
  return v6;
}

_DWORD *sub_10009B6F0(_DWORD *result)
{
  uint64_t v1 = 0;
  uint64_t v2 = (const char *)(result + 5);
  int8x16x4_t v40 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v40.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v40.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v40.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
  int8x16_t v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v40.val[3]);
  v40.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v40.val[3].i8);
  uint64_t v39[3] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  _OWORD v39[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v40.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4;
  }
  while (v1 != 256);
  unint64_t v18 = 0;
  int v19 = result[1];
  int v21 = result[3];
  int v20 = result[4];
  int v22 = v20;
  int v23 = result[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *result;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }
    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }
    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }
    else
    {
      int v31 = v32;
      int v34 = v33;
    }
    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }
  while (v18 != 80);
  *result += v27;
  result[1] = v28 + v19;
  result[2] = v25 + v23;
  result[3] = v29 + v21;
  result[4] = v30 + v20;
  return result;
}

_DWORD *sub_10009B92C(_DWORD *result, _DWORD *a2)
{
  uint16x8_t v3 = result;
  uint64_t v4 = *((void *)result + 11);
  *((void *)result + 11) = v4 + 1;
  *((unsigned char *)result + v4 + 20) = 0x80;
  unint64_t v5 = *((void *)result + 11);
  if (v5 == 64)
  {
    *((void *)result + 11) = 0;
    uint64_t result = sub_10009B6F0(result);
    unint64_t v5 = *((void *)v3 + 11);
  }
  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *((void *)v3 + 11) = v5 + 1;
        *((unsigned char *)v3 + v5 + 20) = 0;
        unint64_t v5 = *((void *)v3 + 11);
      }
      while (v5 < 0x38);
    }
  }
  else
  {
    do
    {
      *((void *)v3 + 11) = v5 + 1;
      *((unsigned char *)v3 + v5 + 20) = 0;
      unint64_t v5 = *((void *)v3 + 11);
      if (v5 == 64)
      {
        *((void *)v3 + 11) = 0;
        uint64_t result = sub_10009B6F0(v3);
        unint64_t v5 = *((void *)v3 + 11);
      }
    }
    while (v5);
    unint64_t v6 = 0;
    do
    {
      unint64_t v5 = v6 + 1;
      *((unsigned char *)v3 + v6 + 20) = 0;
    }
    while (v6++ < 0x37);
  }
  uint64_t v8 = *((void *)v3 + 13) >> 24;
  *((void *)v3 + 11) = v5 + 1;
  *((unsigned char *)v3 + v5 + 20) = v8;
  uint64_t v9 = *((void *)v3 + 11);
  if (v9 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v9 = *((void *)v3 + 11);
  }
  uint64_t v10 = *((void *)v3 + 13) >> 16;
  *((void *)v3 + 11) = v9 + 1;
  *((unsigned char *)v3 + v9 + 20) = v10;
  uint64_t v11 = *((void *)v3 + 11);
  if (v11 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v11 = *((void *)v3 + 11);
  }
  uint64_t v12 = *((void *)v3 + 13) >> 8;
  *((void *)v3 + 11) = v11 + 1;
  *((unsigned char *)v3 + v11 + 20) = v12;
  uint64_t v13 = *((void *)v3 + 11);
  if (v13 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v13 = *((void *)v3 + 11);
  }
  uint64_t v14 = *((void *)v3 + 13);
  *((void *)v3 + 11) = v13 + 1;
  *((unsigned char *)v3 + v13 + 20) = v14;
  uint64_t v15 = *((void *)v3 + 11);
  if (v15 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v15 = *((void *)v3 + 11);
  }
  uint64_t v16 = *((void *)v3 + 12) >> 24;
  *((void *)v3 + 11) = v15 + 1;
  *((unsigned char *)v3 + v15 + 20) = v16;
  uint64_t v17 = *((void *)v3 + 11);
  if (v17 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v17 = *((void *)v3 + 11);
  }
  uint64_t v18 = *((void *)v3 + 12) >> 16;
  *((void *)v3 + 11) = v17 + 1;
  *((unsigned char *)v3 + v17 + 20) = v18;
  uint64_t v19 = *((void *)v3 + 11);
  if (v19 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v19 = *((void *)v3 + 11);
  }
  uint64_t v20 = *((void *)v3 + 12) >> 8;
  *((void *)v3 + 11) = v19 + 1;
  *((unsigned char *)v3 + v19 + 20) = v20;
  uint64_t v21 = *((void *)v3 + 11);
  if (v21 == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
    uint64_t v21 = *((void *)v3 + 11);
  }
  uint64_t v22 = *((void *)v3 + 12);
  *((void *)v3 + 11) = v21 + 1;
  *((unsigned char *)v3 + v21 + 20) = v22;
  if (*((void *)v3 + 11) == 64)
  {
    *((void *)v3 + 11) = 0;
    uint64_t result = sub_10009B6F0(v3);
  }
  *a2 = *v3;
  a2[1] = v3[1];
  a2[2] = v3[2];
  a2[3] = v3[3];
  a2[4] = v3[4];
  return result;
}

void sub_10009BBBC()
{
}

uint64_t sub_10009BCBC()
{
  return 1;
}

uint64_t sub_10009BCD0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 104));

    uint64_t v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(void *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10009BD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_10004B570();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_10004B588(a1 + 88, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = a2;
    char v7 = v6 + 1;
  }
  *(void *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0;
}

void sub_10009BE40(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10009BE54(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint16x8_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  std::mutex::unlock(v2);
  sub_1000039A0(&std::cerr, (uint64_t)"raw plugin: going to execute ", 29);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = sub_1000039A0(v5, (uint64_t)" SQEs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  char v7 = std::locale::use_facet(&v13, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = *(NSObject **)(a1 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10009C014;
  block[3] = &unk_1001AF850;
  block[4] = a1;
  long long __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_10009C6CC(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v8, block);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
}

void sub_10009BFEC(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v2 - 56));
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *sub_10009C014(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    do
    {
      uint64_t v4 = *v1;
      unsigned int v5 = -45;
      switch(*(unsigned char *)*v1)
      {
        case 2:
          unsigned int v6 = sub_10009C104(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_preadv);
          goto LABEL_7;
        case 4:
          unsigned int v6 = sub_10009C384(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_pwritev);
          goto LABEL_7;
        case 5:
          unsigned int v6 = sub_10009C604(*(void *)(v3 + 64));
LABEL_7:
          unsigned int v5 = v6;
          break;
        case 6:
          unsigned int v5 = 0;
          break;
        default:
          break;
      }
      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_10009C104(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v15 = sub_1000D848C();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 132;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf(__stderrp, "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = sub_1000D848C();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 132;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_10009C368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009C384(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }
    int v6 = -22;
  }
  else
  {
    int v6 = 0;
  }
LABEL_8:
  uint64_t v11 = a2[1] << 9;
  unsigned int v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  int v14 = *__error();
  if (sub_1000D850C())
  {
    uint64_t v15 = sub_1000D848C();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    int v22 = 133;
    __int16 v23 = 2080;
    int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf(__stderrp, "%s\n", v17);
      free(v17);
    }
  }
  else
  {
    uint64_t v18 = sub_1000D848C();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      int v22 = 133;
      __int16 v23 = 2080;
      int v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      __int16 v27 = 1024;
      int v28 = v6;
      __int16 v29 = 1024;
      int v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%.*s: I/O error at offset %lld iov_count %d errno %d", buf, 0x28u);
    }
  }
  *__error() = v14;
  int v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

void sub_10009C5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009C604(uint64_t a1)
{
  uint64_t result = fcntl(*(_DWORD *)(a1 + 100), 51, 0);
  if (result != -1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*(_DWORD *)(a1 + 100)), result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  return result;
}

void *sub_10009C698(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  _DWORD v2[2] = 0;
  return sub_10009C6CC(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void sub_10009C6B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *sub_10009C6CC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_10009C748(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10009C72C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10009C748(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10004B570();
  }
  uint64_t result = (char *)sub_10004B588((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_10009C78C()
{
  *(void *)&long long v1 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v1 + 1) = 39;
  int v2 = 0;
  sub_10009C828(v3, &v1);
  sub_1000039A0(v4, (uint64_t)"Suspended", 9);
  std::ostream::~ostream();
  sub_10009CA20((uint64_t)v3);
  return std::ios::~ios();
}

void sub_10009C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10009C94C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10009C828(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10009C990((uint64_t)a1, a2);
  *a1 = off_1001AF898;
  a1[45] = &off_1001AF998;
  a1[46] = &off_1001AF9C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AF898;
  a1[45] = off_1001AF920;
  a1[46] = off_1001AF948;
  return a1;
}

void sub_10009C928(_Unwind_Exception *a1)
{
  sub_10009CA20(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10009C94C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009C990(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AFA30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009CA0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009CA20(uint64_t a1)
{
  *(void *)a1 = off_1001AFA30;
  sub_10009CE28(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10009CB5C(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009CA20(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009CBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009CBFC(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10009CC64(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009CA20(v1);
  return std::ios::~ios();
}

void sub_10009CCB0(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009CA20(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009CD14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009CA20(v1);
  return std::ios::~ios();
}

void sub_10009CD74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009CA20(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10009CDF0(uint64_t a1)
{
  sub_10009CA20(a1);
  operator delete();
}

uint64_t sub_10009CE28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10009CFAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10009CF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10009CFAC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 121;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 121;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10009D1A4()
{
  *(void *)&long long v1 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v1 + 1) = 38;
  int v2 = 0;
  sub_10009D240(v3, &v1);
  sub_1000039A0(v4, (uint64_t)"Resumed", 7);
  std::ostream::~ostream();
  sub_10009D438((uint64_t)v3);
  return std::ios::~ios();
}

void sub_10009D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10009D364((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10009D240(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10009D3A8((uint64_t)a1, a2);
  *a1 = off_1001AFAB8;
  a1[45] = &off_1001AFBB8;
  a1[46] = &off_1001AFBE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AFAB8;
  a1[45] = off_1001AFB40;
  a1[46] = off_1001AFB68;
  return a1;
}

void sub_10009D340(_Unwind_Exception *a1)
{
  sub_10009D438(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10009D364(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009D3A8(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AFC50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009D424(_Unwind_Exception *a1)
{
}

uint64_t sub_10009D438(uint64_t a1)
{
  *(void *)a1 = off_1001AFC50;
  sub_10009D840(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10009D574(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009D438(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009D5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009D614(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10009D67C(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009D438(v1);
  return std::ios::~ios();
}

void sub_10009D6C8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009D438(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009D72C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009D438(v1);
  return std::ios::~ios();
}

void sub_10009D78C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009D438(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10009D808(uint64_t a1)
{
  sub_10009D438(a1);
  operator delete();
}

uint64_t sub_10009D840(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10009D9C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10009D99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10009D9C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 122;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 122;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10009DBBC(uint64_t a1)
{
  dispatch_barrier_sync(*(dispatch_queue_t *)(a1 + 96), &stru_1001AFCC0);
  *(void *)&long long v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + 1) = 38;
  int v3 = 0;
  sub_10009DC6C(v4, &v2);
  sub_1000039A0(v5, (uint64_t)"Cancelled", 9);
  std::ostream::~ostream();
  sub_10009DE64((uint64_t)v4);
  return std::ios::~ios();
}

void sub_10009DC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10009DD90((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10009DC6C(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10009DDD4((uint64_t)a1, a2);
  *a1 = off_1001AFCF8;
  a1[45] = &off_1001AFDF8;
  a1[46] = &off_1001AFE20;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AFCF8;
  a1[45] = off_1001AFD80;
  a1[46] = off_1001AFDA8;
  return a1;
}

void sub_10009DD6C(_Unwind_Exception *a1)
{
  sub_10009DE64(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10009DD90(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009DDD4(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001AFE90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009DE50(_Unwind_Exception *a1)
{
}

uint64_t sub_10009DE64(uint64_t a1)
{
  *(void *)a1 = off_1001AFE90;
  sub_10009E26C(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10009DFA0(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009DE64(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009E008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009E040(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10009E0A8(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009DE64(v1);
  return std::ios::~ios();
}

void sub_10009E0F4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009DE64(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009E158(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009DE64(v1);
  return std::ios::~ios();
}

void sub_10009E1B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009DE64(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10009E234(uint64_t a1)
{
  sub_10009DE64(a1);
  operator delete();
}

uint64_t sub_10009E26C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10009E3F0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10009E3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10009E3F0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 118;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 118;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10009E5E8(uint64_t a1, void (*a2)(uint64_t, const char *, id, char *), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  a3(a4, "fd", *(unsigned int *)(a1 + 100));
  a2(a4, "path", [*(id *)(a1 + 88) UTF8String], (char *)objc_msgSend(*(id *)(a1 + 88), "length") + 1);
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1);
}

void sub_10009E690(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10009E6C8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10009E6D0(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 100));
  *(void *)&long long v3 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v3 + 1) = 33;
  int v4 = 0;
  sub_10009E778(v5, &v3);
  sub_1000039A0(v6, (uint64_t)"Cleaning up!", 12);
  std::ostream::~ostream();
  sub_10009E970((uint64_t)v5);
  std::ios::~ios();

  return a1;
}

void *sub_10009E778(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  sub_10009E8E0((uint64_t)a1, a2);
  *a1 = off_1001AFF40;
  a1[45] = &off_1001B0040;
  a1[46] = &off_1001B0068;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001AFF40;
  a1[45] = off_1001AFFC8;
  a1[46] = off_1001AFFF0;
  return a1;
}

void sub_10009E878(_Unwind_Exception *a1)
{
  sub_10009E970(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10009E89C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009E8E0(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_1001B00D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000D8524();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100003404(a1 + 96);
  return a1;
}

void sub_10009E95C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009E970(uint64_t a1)
{
  *(void *)a1 = off_1001B00D8;
  sub_10009ED78(a1);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return std::streambuf::~streambuf();
}

void sub_10009EAAC(uint64_t a1)
{
  std::ostream::~ostream();
  sub_10009E970(a1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t sub_10009EB4C(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t sub_10009EBB4(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009E970(v1);
  return std::ios::~ios();
}

void sub_10009EC00(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  sub_10009E970(v1);
  std::ios::~ios();
  operator delete();
}

uint64_t sub_10009EC64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009E970(v1);
  return std::ios::~ios();
}

void sub_10009ECC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  sub_10009E970(v1);
  std::ios::~ios();
  operator delete();
}

void sub_10009ED40(uint64_t a1)
{
  sub_10009E970(a1);
  operator delete();
}

uint64_t sub_10009ED78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        sub_100004624(a1 + 104, __p);
        sub_10009EEFC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        sub_100004890(__p, "");
        sub_100004710(a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_10009EED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10009EEFC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000D850C())
  {
    char v6 = sub_1000D848C();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 325;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf(__stderrp, "%s\n", v9);
      free(v9);
    }
  }
  else
  {
    BOOL v10 = sub_1000D848C();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::locale v13 = a2;
      }
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 325;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_10009F588(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    int v14 = [v13 reason];
    +[DIError failWithEnumValue:150 verboseInfo:v14 error:v10];

    objc_end_catch();
    JUMPOUT(0x10009F550);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10009F624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10009F634(uint64_t a1)
{
}

id sub_10009F63C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10009F804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FAA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v14 = v13;

  if (a11) {
    operator delete[]();
  }
  if (a2 == 1)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v17 + 16))(v17);
    uint64_t v18 = +[NSString stringWithFormat:@"Invalid public key: %s"];
    +[DIError failWithPOSIXCode:22 verboseInfo:v18 error:v12];

    __cxa_end_catch();
    JUMPOUT(0x10009F9DCLL);
  }

  _Unwind_Resume(a1);
}

void sub_10009FD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A00A0(_Unwind_Exception *a1)
{
  unsigned __int8 v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1000A0238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A0BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A10A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A11D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A1304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A1444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    operator delete();
  }

  _Unwind_Resume(a1);
}

_DWORD *sub_1000A1494(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "encryption_key_bits_size_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = a2;
  }
  return result;
}

void sub_1000A152C(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  do
  {
    while (1)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 168))(v9, a2);
      long long v4 = v9;
      if (*((void *)&v9 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        sub_100004944(v3);
      }
      sub_1001498F0((uint64_t)&v9, &v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      char v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      long long v9 = v5;
      if (v6) {
        break;
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
      if ((void)v5 == (void)v4) {
        goto LABEL_13;
      }
    }
    sub_100004944(v6);
    uint64_t v7 = v9;
    if (*((void *)&v8 + 1)) {
      sub_100004944(*((std::__shared_weak_count **)&v8 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  }
  while (v7 != (void)v4);
LABEL_13:
  if (*((void *)&v4 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1000A1634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_100004944(v12);
  }
  if (a12) {
    sub_100004944(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000A1664(uint64_t *a1, void **a2)
{
  a1[3] = (uint64_t)off_1001A31A8;
  a1[4] = (uint64_t)off_1001A31D8;
  a1[5] = (uint64_t)off_1001A3208;
  a1[6] = (uint64_t)off_1001A3238;
  *a1 = (uint64_t)off_1001B0808;
  a1[1] = (uint64_t)off_1001B0850;
  a1[2] = (uint64_t)off_1001B0898;
  a1[3] = (uint64_t)off_1001B08E0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B0928;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B0970;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B09B8;
  *a1 = (uint64_t)off_1001B05E0;
  a1[1] = (uint64_t)off_1001B0628;
  a1[2] = (uint64_t)off_1001B0670;
  a1[3] = (uint64_t)off_1001B06B8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B0700;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B0748;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B0790;
  *((unsigned char *)a1 + 80) = 0;
  *((unsigned char *)a1 + 88) = 0;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_1001B01C0;
  a1[1] = (uint64_t)off_1001B0208;
  a1[2] = (uint64_t)off_1001B0250;
  a1[3] = (uint64_t)off_1001B0298;
  a1[4] = (uint64_t)off_1001B02E0;
  a1[5] = (uint64_t)off_1001B0328;
  a1[6] = (uint64_t)off_1001B0370;
  a1[7] = (uint64_t)off_1001B03D0;
  a1[15] = (uint64_t)off_1001B0440;
  long long v4 = a2 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 8) = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 56) = 0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v7 = ((uint64_t (*)(void **))(*a2)[3])(a2);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  if (!*(unsigned char *)(v8 + 32)) {
    *(unsigned char *)(v8 + 32) = 1;
  }
  *(void *)(v8 + 24) = v7;
  sub_1000A152C(v4, (uint64_t)a1 + *(void *)(*a1 - 104));
  return a1;
}

void sub_1000A1BC4(_Unwind_Exception *a1)
{
  sub_10003DFE0(v1, (uint64_t *)&off_1001B0560);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000A1BE4(uint64_t *a1, void **a2)
{
  a1[3] = (uint64_t)off_1001A31A8;
  a1[4] = (uint64_t)off_1001A31D8;
  a1[5] = (uint64_t)off_1001A3208;
  a1[6] = (uint64_t)off_1001A3238;
  *a1 = (uint64_t)off_1001B0808;
  a1[1] = (uint64_t)off_1001B0850;
  a1[2] = (uint64_t)off_1001B0898;
  a1[3] = (uint64_t)off_1001B08E0;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B0928;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B0970;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B09B8;
  *a1 = (uint64_t)off_1001B05E0;
  a1[1] = (uint64_t)off_1001B0628;
  a1[2] = (uint64_t)off_1001B0670;
  a1[3] = (uint64_t)off_1001B06B8;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 48)) = (uint64_t)off_1001B0700;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 56)) = (uint64_t)off_1001B0748;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 64)) = (uint64_t)off_1001B0790;
  *((unsigned char *)a1 + 80) = 0;
  *((unsigned char *)a1 + 88) = 0;
  *((unsigned char *)a1 + 96) = 0;
  *((unsigned char *)a1 + 104) = 0;
  *((unsigned char *)a1 + 128) = 0;
  *((unsigned char *)a1 + 136) = 0;
  a1[18] = 0;
  *a1 = (uint64_t)off_1001B01C0;
  a1[1] = (uint64_t)off_1001B0208;
  a1[2] = (uint64_t)off_1001B0250;
  a1[3] = (uint64_t)off_1001B0298;
  a1[4] = (uint64_t)off_1001B02E0;
  a1[5] = (uint64_t)off_1001B0328;
  a1[6] = (uint64_t)off_1001B0370;
  a1[7] = (uint64_t)off_1001B03D0;
  a1[15] = (uint64_t)off_1001B0440;
  long long v4 = a2 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 8) = v5;
  uint64_t v7 = (uint64_t)a1 + *(void *)(v6 - 112);
  *(void *)(v7 + 40) = *(void *)(v7 + 8);
  *(unsigned char *)(v7 + 48) = 1;
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  *(void *)(v8 + 24) = *(void *)(v8 + 8);
  *(unsigned char *)(v8 + 32) = 1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) = 0;
  uint64_t v9 = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v9;
  sub_1000A152C(v4, (uint64_t)a1 + *(void *)(v10 - 104));
  return a1;
}

void sub_1000A2140(_Unwind_Exception *a1)
{
  sub_10003DFE0(v1, (uint64_t *)&off_1001B0560);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A215C(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001B0B60;
  *(void *)(a1 + 24) = off_1001B0BB8;
  sub_10004044C((const void **)(a1 + 144));
  return a1;
}

void sub_1000A21C8(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001B0B60;
  *(void *)(a1 + 24) = off_1001B0BB8;
  sub_10004044C((const void **)(a1 + 144));
  operator delete();
}

const void **sub_1000A2254@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  sub_10003E914(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  sub_10003ECB0(a1 + *(void *)(*(void *)a1 - 120), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4;
  sub_100123438(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_1000055AC(&v8);
  for (uint64_t i = 7; i != -1; i -= 2)
    uint64_t result = sub_100005614((const void **)&v10[i]);
  return result;
}

void sub_1000A23C0(_Unwind_Exception *a1)
{
  for (uint64_t i = 56; i != -8; i -= 16)
    sub_100005614((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000A2404()
{
  return @"RAW";
}

const void **sub_1000A2410(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2470(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2510(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2570(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2610(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2670(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2710(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2770(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2810(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2870(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2910(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2970(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2A10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2A70(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2B10@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000A2254((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000A2B2C()
{
  return @"RAW";
}

const void **sub_1000A2B38(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  return sub_10004044C((const void **)v1 + 18);
}

void sub_1000A2B98(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 15) = off_1001B0B60;
  *((void *)v1 + 3) = off_1001B0BB8;
  sub_10004044C((const void **)v1 + 18);
  operator delete();
}

const void **sub_1000A2C38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000A2254((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000A2C54()
{
  return @"RAW";
}

uint64_t sub_1000A2C60(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = off_1001A31A8;
  *(void *)(a1 + 32) = off_1001A31D8;
  *(void *)(a1 + 40) = off_1001A3208;
  *(void *)(a1 + 48) = off_1001A3238;
  *(void *)a1 = off_1001B12D0;
  *(void *)(a1 + 8) = off_1001B1318;
  *(void *)(a1 + 16) = off_1001B1360;
  *(void *)(a1 + 24) = off_1001B13A8;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001B13F0;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001B1438;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001B1480;
  *(void *)a1 = off_1001B10A8;
  *(void *)(a1 + 8) = off_1001B10F0;
  *(void *)(a1 + 16) = off_1001B1138;
  *(void *)(a1 + 24) = off_1001B1180;
  *(void *)(a1 + *(void *)(*(void *)a1 - 48)) = off_1001B11C8;
  *(void *)(a1 + *(void *)(*(void *)a1 - 56)) = off_1001B1210;
  *(void *)(a1 + *(void *)(*(void *)a1 - 64)) = off_1001B1258;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = off_1001B0D20;
  *(void *)(a1 + 8) = off_1001B0D68;
  *(void *)(a1 + 16) = off_1001B0DB0;
  *(void *)(a1 + 24) = off_1001B0DF8;
  *(void *)(a1 + 32) = off_1001B0E40;
  *(void *)(a1 + 40) = off_1001B0E88;
  *(void *)(a1 + 48) = off_1001B0ED0;
  *(void *)(a1 + 56) = off_1001B0F30;
  sub_10013DD08(*a2, (char *)a1);
  return a1;
}

void sub_1000A3058(_Unwind_Exception *a1)
{
  sub_10003DFE0(v1, (uint64_t *)&off_1001B1028);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3074(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001B14E0;
  *(void *)(a1 + 24) = off_1001B1538;
  sub_10004044C((const void **)(a1 + 80));
  return a1;
}

void sub_1000A30E0(uint64_t a1)
{
  *(void *)(a1 + 56) = off_1001B14E0;
  *(void *)(a1 + 24) = off_1001B1538;
  sub_10004044C((const void **)(a1 + 80));
  operator delete();
}

const void **sub_1000A316C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  void v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  sub_10003ECB0(a1 + *(void *)(*(void *)a1 - 112), &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  uint64_t v9 = 0;
  sub_10000D758(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3;
  sub_100123438(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0;
  sub_1000055AC(&v8);
  for (uint64_t i = 5; i != -1; i -= 2)
    uint64_t result = sub_100005614((const void **)&v10[i]);
  return result;
}

void sub_1000A3290(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 16)
    sub_100005614((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000A32D8()
{
  return @"Unknown";
}

const void **sub_1000A32E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3344(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A33E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3444(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A34E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3544(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A35E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3644(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A36E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3744(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A37E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3844(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A38E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  return sub_10004044C((const void **)v1 + 10);
}

void sub_1000A3944(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32);
  *((void *)v1 + 7) = off_1001B14E0;
  *((void *)v1 + 3) = off_1001B1538;
  sub_10004044C((const void **)v1 + 10);
  operator delete();
}

const void **sub_1000A39E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000A316C((uint64_t)a1 + *(void *)(*a1 - 40), a2);
}

CFStringRef sub_1000A3A00()
{
  return @"Unknown";
}

void sub_1000A4094()
{
}

void sub_1000A40A4()
{
  JUMPOUT(0x1000A40D8);
}

void sub_1000A40B4()
{
}

void sub_1000A40C0()
{
}

void sub_1000A40F4()
{
  JUMPOUT(0x1000A4110);
}

void sub_1000A4108(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    uint64_t v7 = [v2 path];
    +[DIError nilWithDIException:v6 prefix:v7 error:v3];
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x1000A3A98);
  }

  _Unwind_Resume(a1);
}

#error "1000A4478: call analysis failed (funcsize=146)"

void sub_1000A465C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4824(_Unwind_Exception *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  AEAAuthData v12 = va_arg(va1, AEAAuthData);
  if (a4) {
    sub_100004944(a4);
  }
  if (a6) {
    sub_100004944(a6);
  }
  sub_1000AA838((uint64_t)va1);
  sub_1001103D8((AEAAuthData *)va);
  os_log_type_t v11 = *(std::__shared_weak_count **)(v8 - 40);
  if (v11) {
    sub_100004944(v11);
  }
  if (a2 == 1)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:@"Error while creating AEA backend" error:v7];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x1000A47F8);
  }

  _Unwind_Resume(a1);
}

void sub_1000A4A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4A98(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100110038((AAByteStream *)va);
  __cxa_begin_catch(a1);
  +[DIError nilWithEnumValue:150 verboseInfo:@"Error checking for AEA file" error:v2];
  objc_claimAutoreleasedReturnValue();
  __cxa_end_catch();
  JUMPOUT(0x1000A49E4);
}

void sub_1000A4AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_100004944(a13);
  }
  JUMPOUT(0x1000A4A8CLL);
}

void sub_1000A4C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, std::__shared_weak_count *a20,uint64_t a21,uint8_t buf,uint64_t a23,__int16 bufa,__int16 a25,uint64_t a26)
{
  uint64_t v29 = a23;
  a23 = 0;
  if (v29) {
    operator delete();
  }
  if (a2 == 2)
  {
    +[DIError nilWithDIException:__cxa_begin_catch(a1) description:0 error:v27];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x1000A4C2CLL);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    sub_10011C754(&bufa, &a19);
    if (a20) {
      sub_100004944(a20);
    }
    sub_1000A5254();
  }

  _Unwind_Resume(a1);
}

void sub_1000A5254()
{
}

void sub_1000A545C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5520(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x1000A5504);
  }

  _Unwind_Resume(a1);
}

void sub_1000A5640(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:__cxa_begin_catch(a1) prefix:@"Error encrypting new image" error:v3];
    __cxa_end_catch();
    JUMPOUT(0x1000A5624);
  }

  _Unwind_Resume(a1);
}

void sub_1000A5740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000A5B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint8_t buf,int a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  sub_10000359C((uint64_t)&buf);
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void sub_1000A5B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1000A5BA8);
  }
  JUMPOUT(0x1000A5BC4);
}

#error "1000A5CFC: call analysis failed (funcsize=151)"

void sub_1000A5E44(_Unwind_Exception *a1)
{
}

void sub_1000A5E4C(_Unwind_Exception *a1)
{
}

void sub_1000A5E64(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000A5E6CLL);
  }
  sub_100003708(a1);
}

void sub_1000A602C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6A44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint8_t buf,uint64_t a51,__int16 a52,__int16 a53)
{
}

void sub_1000A7068(_Unwind_Exception *a1)
{
}

void sub_1000A708C(_Unwind_Exception *a1)
{
}

void sub_1000A7098(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A70B4(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      sub_10004B570();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v12) >> 3);
    unint64_t v16 = 2 * v15;
    if (2 * v15 <= v13) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v24 = v7;
    if (v17) {
      uint64_t v18 = (char *)sub_100062C0C(v7, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = v18;
    __int16 v21 = &v18[24 * v14];
    int v22 = v21;
    __int16 v23 = &v18[24 * v17];
    sub_1000AA968(&v20, a3);
    uint64_t v4 = sub_1000AAAC0(a1, &v20, v4);
    sub_100062D6C(&v20);
  }
  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }
  else
  {
    sub_1000AA8F4((uint64_t)a1, a2, v6, a2 + 24);
    __n128 v10 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    os_log_type_t v11 = *(std::__shared_weak_count **)(v4 + 8);
    *(__n128 *)uint64_t v4 = v10;
    if (v11) {
      sub_100004944(v11);
    }
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }
  return v4;
}

void sub_1000A721C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100062D6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7230(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_10004B570();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_100062C0C((uint64_t)v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_100062B94(a1, v16);
    uint64_t v8 = a1[1];
    sub_100062D6C(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return v8 - 24;
}

void sub_1000A7354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100062D6C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000A759C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A76B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A77BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A78A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A7AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A7E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1000A8008: call analysis failed (funcsize=181)"

void sub_1000A813C()
{
}

void sub_1000A817C(void *a1, int a2)
{
  if (a2) {
    sub_100003708(a1);
  }
  JUMPOUT(0x1000A7E2CLL);
}

void sub_1000A8224(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A8558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000A8614@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1000A8698@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    unint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1000A87BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8928(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A89A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100151950(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1000A90B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A9408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000359C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000A94CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A95D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A96F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A97F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A9E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v16) {
    sub_100004944(v16);
  }
  if (a16) {
    sub_100004944(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1000AA320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000359C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000AA410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AA534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA590(uint64_t a1, const void **a2)
{
  return 1;
}

id sub_1000AA5C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000A2C4(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  int v3 = SHIBYTE(v11);
  uint64_t v4 = (void **)__p[0];
  NSStringEncoding v5 = +[NSString defaultCStringEncoding];
  if (v3 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = +[NSString stringWithCString:v6 encoding:v5];
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  id v8 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v7 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v8;
}

void sub_1000AA690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000AA6B8(void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((char *)a2 + 23) >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = +[NSString stringWithCString:v3 encoding:4];
  NSStringEncoding v5 = +[NSURL URLWithString:v4];

  BOOL v6 = +[DIKeyRetriever KKMSKeyWithURL:v5 destKey:**v2 destKeySize:*v2[1] error:*v2[2]];
  return v6;
}

void sub_1000AA758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000AA774(void *a1, uint64_t *a2)
{
  int v3 = (void **)*a1;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  NSStringEncoding v5 = +[NSString stringWithCString:v4 encoding:1];
  BOOL v6 = +[NSURL URLWithString:v5];

  BOOL v7 = +[DIKeyRetriever WKMSKeyWithURL:v6 authData:a2[3] destKey:*v3[6] destKeySize:*v3[7] error:*v3[8]];
  return v7;
}

void sub_1000AA81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA838(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1001B1658[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t sub_1000AA894(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    operator delete[]();
  }
  return result;
}

void sub_1000AA8B8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_1000AA8CC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_1000AA8E0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t sub_1000AA8F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1000AAB74((uint64_t)&v11, a2, v7, v6);
}

__n128 sub_1000AA968(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    NSStringEncoding v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v26 = a1[4];
      unint64_t v13 = (char *)sub_100062C0C(v12, v10);
      unint64_t v15 = &v13[24 * v11];
      unint64_t v16 = a1[1];
      unint64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = &v15[v17];
        __int16 v19 = &v13[24 * v11];
        do
        {
          *(_OWORD *)__int16 v19 = *(_OWORD *)v16;
          *(void *)unint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v16 + 16);
          v19 += 24;
          v16 += 24;
        }
        while (v19 != v18);
        int64x2_t v20 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v20 = vdupq_n_s64(v16);
        uint64_t v18 = &v13[24 * v11];
      }
      __int16 v23 = (void *)*a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v24 = v20;
      uint64_t v21 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[24 * v14];
      uint64_t v25 = v21;
      sub_100062D6C(&v23);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      sub_1000AABFC((uint64_t)&v23, v5, (long long *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24;
  return result;
}

uint64_t sub_1000AAAC0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100062C54((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1000AAC70(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1000AAB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v10 = *(std::__shared_weak_count **)(a4 + v7 - 16);
      *(_OWORD *)(a4 + v7 - 24) = v9;
      if (v10) {
        sub_100004944(v10);
      }
      *(_DWORD *)(a4 + v7 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 24;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

long long *sub_1000AABFC(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  NSStringEncoding v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)NSStringEncoding v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_100004944(v8);
      }
      *(_DWORD *)(a4 + 16) = *((_DWORD *)v5 + 4);
      a4 += 24;
      NSStringEncoding v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1000AAC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  uint64_t v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_1000AACF4((uint64_t)v6);
  return v4;
}

uint64_t sub_1000AACF4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000AAD2C(a1);
  }
  return a1;
}

void sub_1000AAD2C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    int v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      sub_100004944(v3);
    }
    v1 -= 24;
  }
}

uint64_t sub_1000AAD70(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4;
    }
    while (v4);
  }
  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v6;
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_10019EA90;
    *((_DWORD *)exception + 8) = v7;
  }
  return result;
}

BOOL sub_1000AAE0C()
{
  sub_100127B80();
  unint64_t v0 = v5;
  if ((v5 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)__p[1];
  }
  if (v0 == 4)
  {
    uint64_t v1 = (void **)__p[0];
    if ((v5 & 0x80u) == 0) {
      uint64_t v1 = __p;
    }
    BOOL v2 = *(_DWORD *)v1 == 1936093281;
    if ((char)v5 < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v2 = 0;
    if ((char)v5 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }
  return v2;
}

void *sub_1000AAE9C(void *a1)
{
  *a1 = off_1001B1688;
  BOOL v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_1000AAEE8(void *a1)
{
  *a1 = off_1001B1688;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

uint64_t sub_1000AAF54(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_1000AAF5C(uint64_t a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
       / *(void *)(a1 + 32);
}

uint64_t sub_1000AAFAC()
{
  return 0;
}

void sub_1000AAFB4()
{
}

void sub_1000AB020()
{
}

uint64_t sub_1000AB044()
{
  return 4294967251;
}

__n128 sub_1000AB04C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1000AB05C()
{
}

void sub_1000AB0E4()
{
}

uint64_t sub_1000AB108(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000AB264(a1, a3, (uint64_t)&v6);
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v6);
  if (v7) {
    sub_100004944(v7);
  }
  return v4;
}

void sub_1000AB184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AB19C()
{
  return -102;
}

uint64_t sub_1000AB1A4()
{
  return 4294967251;
}

void *sub_1000AB1AC(void *a1)
{
  *a1 = off_1001B1788;
  BOOL v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_100004944(v2);
  }
  return a1;
}

void sub_1000AB1F8(void *a1)
{
  *a1 = off_1001B1788;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_100004944(v1);
  }
  operator delete();
}

void *sub_1000AB264@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  __n128 result = sub_10014B860();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = v6 / v7 * v7;
  unint64_t v14 = v8 - v13;
  unint64_t v15 = v5 + v6 + v7 - 1 - v13 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v15) {
    unint64_t v15 = v9;
  }
  if (v14 >= v15) {
    unint64_t v14 = v15;
  }
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

void sub_1000AB33C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000AB3A4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1000AB3CC(_Unwind_Exception *a1)
{
}

void sub_1000AB3E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000AB41C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_1000AB43C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_1000AB480(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000AB4E8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[]();
  }
  __cxa_rethrow();
}

void sub_1000AB510(_Unwind_Exception *a1)
{
}

void sub_1000AB528(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000AB560(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete[]();
  }
  return result;
}

uint64_t sub_1000AB580(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_1000AB5C4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  uint64_t result = sub_1000AB638(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000AB624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000AB638(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B18A0;
  uint64_t v8 = sub_1000F09D8(*a2, a3);
  sub_1000F01B0(a1 + 3, a2, a3, v8, v9, a4);
  return a1;
}

void sub_1000AB6B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB6CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B18A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000AB6EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B18A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000AB740(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_1000AB768(uint64_t a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  unint64_t v15 = operator new(0x1008uLL);
  sub_1000AB81C(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000AB808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB81C(void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B18A0;
  sub_1000F09CC((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, a6, a7, a8);
}

void sub_1000AB8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB8D8(char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_1000AB94C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001CC0C((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000AB938(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000AB94C(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001B18F0;
  sub_1000ABA44(a1 + 3, a2);
  return a1;
}

void sub_1000AB994(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000AB9A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B18F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000AB9C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B18F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000ABA1C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000ABA44(void *a1, char **a2)
{
  sub_100004890(__p, *a2);
  sub_1000ABAB4(a1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000ABA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ABAB4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_100126808(a2, 514);
  uint64_t result = sub_10005B2E0((uint64_t)a1, v3, 1, 0);
  *a1 = off_1001BEDA0;
  a1[3] = off_1001BEE80;
  a1[4] = off_1001BEEB8;
  return result;
}

void sub_1000ABB50(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xA8uLL);
  sub_1000ABBCC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001CC0C((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000ABBB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000ABBCC(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1001A11D8;
  sub_10014A20C(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000ABC18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000ABC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5 = a4 - a3 + 2;
  unint64_t v6 = ~(-1 << v5) << a3;
  if (a4 - a3 == 62) {
    unint64_t v6 = -1;
  }
  int v7 = *a5;
  int v8 = a5[1];
  if (v7 == v8)
  {
    uint64_t v9 = (atomic_ullong *)(*(void *)(a1 + 8) + 8 * a2);
    if (*a5) {
      BOOL v10 = (v6 & ~atomic_fetch_or(v9, v6)) == 0;
    }
    else {
      BOOL v10 = (atomic_fetch_and(v9, ~v6) & v6) == 0;
    }
  }
  else
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      unint64_t v12 = v5 >> 1;
      uint64_t v13 = v7 | (2 * v8);
      do
      {
        uint64_t v11 = v13 | (4 * v11);
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v14 = v11 << a3;
    uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8 * a2);
    unint64_t v16 = v15 & ~v6 | v14;
    uint64_t v17 = v15;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
    if (v17 != v15)
    {
      unint64_t v18 = ~v6;
      do
      {
        uint64_t v15 = v17;
        unint64_t v16 = v17 & v18 | v14;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
      }
      while (v17 != v15);
    }
    BOOL v10 = v15 == v16;
  }
  return !v10;
}

unint64_t sub_1000ABD00(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_1000ABD78(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_1000ABDF0(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a2 > a3 || *(void *)(a1 + 16) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v22);
    sub_1000039A0(v22, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v22, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v22, 0x16u);
  }
  unint64_t v4 = a2 >> 6;
  unint64_t v5 = a2 & 0x3F;
  uint64_t v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    uint64_t v7 = v6 - v5 + 1;
    uint64_t v8 = ~(-1 << v7) << v5;
    if (v7 == 64) {
      unint64_t v9 = -1;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    if (a4)
    {
      unint64_t v11 = atomic_fetch_or((atomic_ullong *volatile)(v10 + 8 * v4), v9);
      unint64_t v5 = v9;
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v11 = atomic_fetch_and((atomic_ullong *volatile)(v10 + 8 * v4), ~v9);
    }
    LOBYTE(v5) = (v11 & v9) != v5;
  }
  else
  {
    unint64_t v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      unint64_t v5 = ~(-1 << -(char)v5) << v5;
      uint64_t v13 = *(void *)(a1 + 8);
      if (a4)
      {
        unint64_t v14 = atomic_fetch_or((atomic_ullong *volatile)(v13 + 8 * v4), v5);
        unint64_t v15 = v5;
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v14 = atomic_fetch_and((atomic_ullong *volatile)(v13 + 8 * v4), ~v5);
      }
      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }
    if (v6 != 63)
    {
      unint64_t v16 = ~(-2 << v6);
      uint64_t v17 = *(void *)(a1 + 8);
      if (a4)
      {
        unint64_t v18 = atomic_fetch_or((atomic_ullong *volatile)(v17 + 8 * v12), v16);
        unint64_t v19 = v16;
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v18 = atomic_fetch_and((atomic_ullong *volatile)(v17 + 8 * v12), ~v16);
      }
      if ((v18 & v16) != v19) {
        LOBYTE(v5) = 1;
      }
      --v12;
    }
    for (; v4 <= v12; ++v4)
      LOBYTE(v5) = (*(void *)(a1 + 8) + 8 * v4 != __swp(*(_DWORD *)(a1 + 8) + 8 * v4, (unsigned int *)(*(void *)(a1 + 8) + 8 * v4))) | v5;
  }
  return v5 & 1;
}

void sub_1000ABFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000AC028(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v19);
    sub_1000039A0(v19, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v19, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v19, 0x16u);
  }
  unint64_t v6 = a3 - 2;
  unint64_t v7 = a2 >> 6;
  uint64_t v8 = a2 & 0x3F;
  unint64_t v9 = v6 & 0x3F;
  if (a2 >> 6 == v6 >> 6)
  {
    uint64_t v10 = a2 >> 6;
    return sub_1000ABC2C(a1, v10, v8, v6 & 0x3F, a4);
  }
  else
  {
    unint64_t v12 = v6 >> 6;
    uint64_t v13 = (a2 & 0x3F) != 0 && sub_1000ABC2C(a1, v7++, v8, 62, a4);
    if (v9 <= 0x3D) {
      uint64_t v13 = sub_1000ABC2C(a1, v12--, 0, v9, a4) | v13;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 32;
    do
    {
      uint64_t v14 = *a4 | (2 * a4[1]) | (4 * v14);
      --v15;
    }
    while (v15);
    while (v7 <= v12)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      if (v13)
      {
        *(void *)(v16 + 8 * v7) = v14;
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v17 = (unsigned int *)(v16 + 8 * v7);
        uint64_t v14 = __swp(v17, v17);
        uint64_t v13 = v17 != (unsigned int *)v14;
      }
      ++v7;
    }
    return v13;
  }
}

void sub_1000AC218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000AC24C(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v26);
    sub_1000039A0(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v26, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000ABD00(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000ABD00(v14, v10, 62, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v23 = sub_1000ABD00(v22, 0, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2) {
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v9 << 6;
    while (((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555) == 0)
    {
      ++v9;
      v21 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
    return __clz(__rbit64((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555))
         + v21;
  }
  return v4;
}

void sub_1000AC454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000AC488(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v27);
    sub_1000039A0(v27, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    sub_1000039A0(v27, (uint64_t)"-", 1);
    std::ostream::operator<<();
    sub_10000550C((uint64_t)exception, (uint64_t)v27, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000ABD78(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000ABD78(v14, v10, 62, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v24 = sub_1000ABD78(v23, 0, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2) {
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = v9 << 6;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v9);
      unint64_t v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555;
      if (v22) {
        return __clz(__rbit64(v22)) + v20;
      }
      ++v9;
      v20 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }
  return v4;
}

void sub_1000AC698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000AC6CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63;
  if (v1 < 0x40) {
    return 1;
  }
  unint64_t v3 = v1 >> 6;
  unint64_t v4 = *(void **)(a1 + 8);
  if (v3 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*v4) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
  }
  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t sub_1000AC72C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63;
  if (v1 < 0x40) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v2 = 0;
  uint64_t v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  do
  {
    unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + v4));
    unint64_t v8 = v6;
    BYTE6(v9) = 1;
    v2 += sub_1000ACA4C((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (unsigned char *)&v9 + 6);
    v4 += 8;
  }
  while (v5 != v4);
  return v2;
}

uint64_t sub_1000AC7E0(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v5);
    sub_1000039A0(v5, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    sub_1000039A0(v5, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    sub_1000039A0(v5, (uint64_t)" bits in the bitmap", 19);
    sub_10000550C((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  unint64_t v2 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_1000AC8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000AC90C(uint64_t a1, unint64_t a2, int a3)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100003404((uint64_t)v8);
    sub_1000039A0(v8, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    sub_1000039A0(v8, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    sub_1000039A0(v8, (uint64_t)" bits in the bitmap", 19);
    sub_10000550C((uint64_t)exception, (uint64_t)v8, 0x16u);
  }
  unint64_t v3 = 1 << a2;
  uint64_t v4 = (atomic_ullong *)(*(void *)(a1 + 8) + 8 * (a2 >> 6));
  if (a3) {
    unint64_t v5 = atomic_fetch_or(v4, v3);
  }
  else {
    unint64_t v5 = atomic_fetch_and(v4, ~v3);
  }
  return (v5 & v3) == 0;
}

void sub_1000ACA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000359C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000ACA4C(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_1000ACA6C(a1, a2, v5);
  }
  else {
    return sub_1000ACB10((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_1000ACA6C(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1000ACB10(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_1000ACBBC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = a2;
  sub_100125F80(a1 + 16, "rings_queue");
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_1000ACC04(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    sub_1000ADD8C(v3, a2);
  }
}

uint64_t sub_1000ACC24(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint8x8_t v6 = 0;
  uint64_t v7 = (dispatch_queue_t *)(a1 + 16);
  do
  {
    uint64_t v8 = sub_1000ADA94(*(void *)(a1 + 8));
    uint64_t v9 = v8;
    if (!v8) {
      break;
    }
    __dmb(9u);
    if (*(_WORD *)(v8 + 2))
    {
      int v10 = 1;
      goto LABEL_8;
    }
    if (*(unsigned char *)(a1 + 24))
    {
      int v10 = 2;
LABEL_8:
      if (*(unsigned char *)(a1 + 24)) {
        int v11 = v10;
      }
      else {
        int v11 = 0;
      }
      sub_1000AE10C(*(void *)(a1 + 8), v8, v11);
      char v12 = *(unsigned char *)(v9 + 2);
      goto LABEL_12;
    }
    char v12 = *(_WORD *)(v8 + 2);
LABEL_12:
    *(unsigned char *)(a1 + 24) = v12 & 1;
    sub_1000ADE40(*(void *)(a1 + 8), *(_DWORD *)(v9 + 8), &v18);
    if (v18)
    {
      if (v3 && *(_DWORD *)(v9 + 8) != v4)
      {
        (*(void (**)(uint64_t))(v5 + 8))(v5);
        if (v6)
        {
          sub_100004944(v6);
          uint8x8_t v6 = 0;
        }
        uint64_t v5 = 0;
        int v3 = 0;
      }
      if ((*(unsigned int (**)(void))(v18 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v18)(v18, v9);
        if (!v5)
        {
          int v4 = *(_DWORD *)(v9 + 8);
          uint64_t v5 = v18;
          unint64_t v13 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v6) {
            sub_100004944(v6);
          }
          int v3 = 1;
          uint8x8_t v6 = v13;
        }
      }
      else if (sub_1000ADBD8((unsigned __int8 *)v9))
      {
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 0x40000000;
        v17[2] = sub_1000ACEC8;
        unint64_t v17[3] = &unk_1001B1950;
        v17[4] = a1;
        void v17[5] = v9;
        sub_100126038(v7, v17);
      }
      else
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 0x40000000;
        v16[2] = sub_1000ACF94;
        v16[3] = &unk_1001B1970;
        void v16[4] = a1;
        v16[5] = v9;
        sub_100125F94(v7, v16);
      }
    }
    else
    {
      io_rings_return_status(*(void *)(a1 + 8), v9, 0xFFFFFFFA, 0);
    }
    if (v19) {
      sub_100004944(v19);
    }
    unsigned int v14 = atomic_load((unsigned int *)a1);
  }
  while (v14 == 2);
  if (v3) {
    (*(void (**)(uint64_t))(v5 + 8))(v5);
  }
  if (v6) {
    sub_100004944(v6);
  }
  return 0;
}

void sub_1000ACE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    sub_100004944(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ACEC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(v1 + 8);
    io_rings_return_status(v4, v3, 0xFFFFFFA7, 0);
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    uint64_t v6[2] = sub_1000ACF80;
    void v6[3] = &unk_1001B1930;
    uint64_t v5 = *(void *)(a1 + 40);
    void v6[4] = v1;
    v6[5] = v5;
    sub_100125F94((dispatch_queue_t *)(v1 + 16), v6);
  }
}

void sub_1000ACF80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000ACC04(v1, *(void *)(a1 + 40));
}

void sub_1000ACF94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000ACC04(v1, *(void *)(a1 + 40));
}

uint64_t sub_1000ACFA8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 4294967260;
  }
  atomic_store(0, (unsigned int *)a1);
  sub_100126048((dispatch_object_t *)(a1 + 16));
  return 0;
}

void sub_1000ACFE0(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 1)
  {
    if (atomic_exchange((atomic_uint *volatile)a1, 1u) == 2) {
      sub_100126048((dispatch_object_t *)(a1 + 16));
    }
    sub_1000ADED4(*(void *)(a1 + 8));
    sub_100126050((dispatch_object_t *)(a1 + 16));
    sub_1000ACC24(a1);
    sub_100126040((dispatch_queue_t *)(a1 + 16), &stru_1001B19B0);
    sub_100126040((dispatch_queue_t *)(a1 + 16), &stru_1001B19F0);
  }
}

uint64_t sub_1000AD080(uint64_t a1)
{
  if (atomic_load((unsigned int *)a1)) {
    return 4294967274;
  }
  atomic_store(2u, (unsigned int *)a1);
  sub_100126050((dispatch_object_t *)(a1 + 16));
  sub_1000ACC24(a1);
  return 0;
}

uint64_t sub_1000AD0CC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 4294967274;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_DWORD *)a2 <= 1u)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 4);
      if (v5 < 9) {
        return v4;
      }
      if (v5 < 0x10
        || ((uint8x8_t v6 = *(_DWORD **)(a2 + 8)) == 0 || !*v6)
        && (v5 < 0x31
         || !*(unsigned char *)(a2 + 48) && !memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v5 - 49)))
      {
        operator new();
      }
    }
    return 4294967251;
  }
  return v4;
}

void sub_1000AD290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_1000AEB14((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251;
  }
}

void *sub_1000AD2CC(void *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (v2 >= 0x18)
  {
    result[52] = *(void *)(a2 + 16);
    if (v2 >= 0x20)
    {
      result[53] = *(void *)(a2 + 24);
      if (v2 >= 0x28)
      {
        result[54] = *(void *)(a2 + 32);
        if (v2 >= 0x30) {
          result[55] = *(void *)(a2 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000AD314(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x2000) {
    unsigned int v3 = 0x2000;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 + 1 < 0x2000) {
    unsigned int v4 = a2 + 1;
  }
  else {
    unsigned int v4 = 0x2000;
  }
  if ((v4 & (v4 - 1)) != 0)
  {
    char v5 = 0;
    unsigned int v6 = 2 * v4;
    do
    {
      v6 >>= 1;
      ++v5;
    }
    while (v6 != 1);
    unsigned int v4 = 1 << v5;
  }
  uint64_t v7 = mmap(0, 88 * v3 + 8 + 4 * v4, 3, 4097, 0, 0);
  if (v7 == (void *)-1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  *(void *)a1 = v8;
  uint64_t v9 = mmap(0, (16 * v4) | 8, 3, 4097, 0, 0);
  if (v9 == (void *)-1) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  *(void *)(a1 + 8) = v10;
  uint64_t result = 4294967284;
  if (*(void *)a1)
  {
    if (v10)
    {
      sub_1000AE1B8((std::mutex *)(a1 + 16));
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      v14[0] = off_1001B1A48;
      v14[1] = a1;
      v14[3] = v14;
      sub_1000AE3E0(a1 + 16, v12, v13, v3, v4, v4, (uint64_t)v14);
    }
  }
  return result;
}

void sub_1000AD528(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1000AE6D8((uint64_t *)va);
  sub_1000AE26C((uint64_t *)va1);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1000AD4DCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000AD570(uint64_t result)
{
  if (*(unsigned char *)(result + 264))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 408))
    {
      unsigned int v2 = *(_DWORD *)(result + 136);
      uint64_t v3 = *(unsigned int *)(result + 312);
      uint64_t v4 = *(unsigned int *)(result + 56);
      sub_1000AE1B8((std::mutex *)(result + 16));
      sub_1000AE69C((void *)(v1 + 272));
      if (*(void *)v1)
      {
        munmap(*(void **)v1, 4 * v4 + 88 * v2 + 8);
        *(void *)uint64_t v1 = 0;
      }
      uint64_t v5 = *(void **)(v1 + 8);
      if (v5)
      {
        munmap(v5, (16 * v3) | 8);
        *(void *)(v1 + 8) = 0;
      }
      uint64_t v6 = *(void *)(v1 + 704);
      *(void *)(v1 + 704) = 0;
      if (v6) {
        (*(void (**)(void))(v6 + 32))();
      }
      uint64_t v7 = 696;
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v1 + v7);
        if (v8) {
          sub_100004944(v8);
        }
        v7 -= 16;
        if (v7 == 440)
        {
          sub_1000AEA70(v1 + 272);
          sub_1000AEAAC(v1 + 16);
          operator delete();
        }
      }
    }
  }
  return result;
}

void io_rings_setup()
{
}

void sub_1000AD780()
{
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207;
  }
  return sub_1000AEC9C(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t v1 = sub_1000AD810(a1 + 16);
  if (v1)
  {
    *(_DWORD *)(v1 + 12) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_DWORD *)(v1 + 1) = 0;
    *(_DWORD *)(v1 + 4) = 0;
  }
  return result;
}

uint64_t sub_1000AD810(uint64_t a1)
{
  uint64_t v2 = sub_1000AEE8C((void *)(a1 + 104));
  if (v2 < 0) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  *(_DWORD *)(*(void *)(a1 + 24) + 4
                                   * (*(_DWORD *)(a1 + 44) & atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u))) = v2;
  return *(void *)(a1 + 96) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return sub_1000AD87C(a1 + 272);
}

uint64_t sub_1000AD87C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    unsigned int v2 = atomic_load(*(unsigned int **)a1);
    *(_DWORD *)(a1 + 92) = v2;
    __dmb(9u);
    *(unsigned char *)(a1 + 96) = 0;
  }
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 16));
  sub_1000AEF00(a1, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  if (v3 == *(_DWORD *)(a1 + 92)) {
    *(unsigned char *)(a1 + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16);
  if (!v3 || (uint64_t result = v3(), !result))
  {
    sub_1000ADE5C(a1 + 448);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 712) = 1;
  }
  return result;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16;
  }
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    unint64_t v7 = sub_1000AEFF0(a1 + 16);
    if ((v7 & 0xFF00000000) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88 * v7;
        sub_1000ADB54(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *(void *)(a1 + 112)) >> 3);
        atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v10 >> 6)), 1 << v10);
        ++v5;
        unint64_t v7 = sub_1000AEFF0(a1 + 16);
      }
      while ((v7 & 0xFF00000000) != 0);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_1000ADA94(uint64_t a1)
{
  unint64_t v2 = sub_1000AEFF0(a1 + 16);
  if ((v2 & 0xFF00000000) != 0) {
    return *(void *)(a1 + 112) + 88 * v2;
  }
  else {
    return 0;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void sub_1000ADAE4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  sub_1000AF228((uint64_t *)(a1 + 16 * a2), &v2);
  if (v3) {
    sub_100004944(v3);
  }
}

void sub_1000ADB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_release(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 712) == 2) {
      return sub_1000AD570(result);
    }
  }
  return result;
}

uint64_t sub_1000ADB54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __dmb(0xBu);
  uint64_t result = sub_1000AF114(a1, a2, a3);
  if (result)
  {
    if (result == -28)
    {
      if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 100), 1u)) {
        sub_1000AF1CC(a1 + 104, 0, 4);
      }
      return 4294967268;
    }
  }
  else
  {
    return sub_1000AEC9C(a1, 1, a4);
  }
  return result;
}

BOOL sub_1000ADBD8(unsigned __int8 *a1)
{
  return *a1 == 5;
}

void sub_1000ADBE8(uint64_t a1, uint64_t a2)
{
}

void sub_1000ADBF0(uint64_t a1, uint64_t a2)
{
  sub_1000AF370(&v2, a2);
}

void sub_1000ADCA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = sub_1000AE034(a1 + 144, a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(void *)(a1 + 112)) >> 3);
  atomic_fetch_or((atomic_ullong *volatile)(*(void *)(a1 + 128) + 8 * (v11 >> 6)), 1 << v11);
  if ((v9 & 4) != 0) {
    int v12 = 0;
  }
  else {
    int v12 = v8;
  }
  return sub_1000ADB54(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v12);
}

void sub_1000ADD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v5 = 0;
    int v6 = 0;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }
  sub_1000AF4A8((void *)(a1 + 16 * v4 + 448), &v5);
  if (!v5) {
    goto LABEL_6;
  }
  if (!(*(unsigned int (**)(void))v5)()) {
    (*(void (**)(void))(v5 + 8))();
  }
LABEL_7:
  if (v6) {
    sub_100004944(v6);
  }
}

void sub_1000ADE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ADE40(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    sub_1000AF4A8((void *)(a1 + 16 * a2 + 448), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1000ADE5C(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    sub_1000AF4A8((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 24))();
    }
    if (v4) {
      sub_100004944(v4);
    }
  }
}

void sub_1000ADEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ADED4(uint64_t a1)
{
}

void sub_1000ADEDC(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    sub_1000AF4A8((void *)(a1 + i), &v3);
    if (v3) {
      (*(void (**)(void))(v3 + 40))();
    }
    if (v4) {
      sub_100004944(v4);
    }
  }
}

void sub_1000ADF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_100004944(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ADF54(uint64_t a1, uint64_t a2, int a3, int a4)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v8 = *(void *)(a1 + 112);
  if (a3)
  {
    if (v8) {
      *(unsigned char *)(v8 + 4) = 1;
    }
    operator new();
  }
  if (a4 && v8) {
    *(unsigned char *)(v8 + 4) = 1;
  }
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = v9;
  sub_1000AF50C(a1 + 64, &v10, &v10);
  if (a4) {
    *(void *)(a1 + 112) = 0;
  }
  ++*(void *)(a1 + 104);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1000AE01C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE034(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  if (!*(void *)(a1 + 104)) {
    return 1;
  }
  std::mutex::lock((std::mutex *)a1);
  uint64_t v3 = sub_1000AF9AC((void *)(a1 + 64), &v6);
  if (!v3)
  {
    std::mutex::unlock((std::mutex *)a1);
    return 1;
  }
  --*(void *)(a1 + 104);
  uint64_t v4 = v3[3];
  sub_1000AFA98((void *)(a1 + 64), v3);
  std::mutex::unlock((std::mutex *)a1);
  if (!v4) {
    return 1;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    if (*(unsigned char *)(v4 + 4)) {
      operator delete();
    }
  }
  return 0;
}

void sub_1000AE0F8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000AE10C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000ADF54(a1 + 144, a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_10007361C();
  sub_100004890(__p, a1);
  uint64_t v5 = sub_100074304(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_1000AE198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::mutex *sub_1000AE1B8(std::mutex *result)
{
  if (result[3].__m_.__opaque[48])
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    sub_1000AE220((uint64_t)&result[3]);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void *)&v1[1].__m_.__opaque[40];
    *(void *)&v1[1].__m_.__opaque[40] = 0;
    if (v3) {
      operator delete[]();
    }
    uint64_t result = (std::mutex *)sub_1000AE26C(&v1->__m_.__opaque[48]);
    v1[3].__m_.__opaque[48] = 0;
  }
  return result;
}

uint64_t sub_1000AE220(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_1000AE26C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000AE2F4()
{
}

void *sub_1000AE308(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001B1A48;
  result[1] = v3;
  return result;
}

uint64_t sub_1000AE350(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B1A48;
  a2[1] = v2;
  return result;
}

uint64_t (**sub_1000AE37C(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_1000AE394(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B1AB8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000AE3D4()
{
  return &off_1001B1AB8;
}

void sub_1000AE3E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v8 = a4;
  *(void *)&long long v10 = a2 + 88 * a4;
  *((void *)&v10 + 1) = a5;
  uint64_t v9 = sub_1000AE4AC(a1, a2 + 4 * a5 + 88 * a4, a3 + 16 * a6 + 4, &v10, a5, a7);
  *(void *)(v9 + 96) = a2;
  sub_1000AE5C8((void *)(v9 + 104), v8);
}

void sub_1000AE498(_Unwind_Exception *a1)
{
  sub_1000AE26C((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE4AC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }
    while (v8 != 1);
    a5 = 1 << v7;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  sub_1000AE530(a1 + 56, a6);
  *(_WORD *)(a1 + 88) = 1;
  return a1;
}

uint64_t sub_1000AE530(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1000AE5C8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new[]();
}

void *sub_1000AE69C(void *result)
{
  if (*((unsigned char *)result + 136))
  {
    uint64_t v1 = result;
    sub_1000AE6D8(result + 13);
    uint64_t result = sub_1000AE26C(v1 + 7);
    *((unsigned char *)v1 + 136) = 0;
  }
  return result;
}

void *sub_1000AE6D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1000AE760()
{
}

void *sub_1000AE774(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001B1AD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000AE7BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B1AD8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000AE7E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t sub_1000AE800(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B1B38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000AE840()
{
  return &off_1001B1B38;
}

void sub_1000AE850()
{
}

void *sub_1000AE864(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1001B1B58;
  result[1] = v3;
  return result;
}

uint64_t sub_1000AE8AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1001B1B58;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000AE8D8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t sub_1000AE8F8(uint64_t a1, uint64_t a2)
{
  if (sub_10000A640(a2, (uint64_t)&off_1001B1BC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1000AE938()
{
  return &off_1001B1BC8;
}

uint64_t sub_1000AE944(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&long long v12 = a3;
  *((void *)&v12 + 1) = a6;
  uint64_t v10 = sub_1000AE4AC(a1, a3 + 16 * a6, 4 * a5 + 88 * a4 + a2 + 4, &v12, a6, a7);
  *(unsigned char *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  sub_1000AE9D8(v10 + 104, a8);
  return a1;
}

void sub_1000AE9C4(_Unwind_Exception *a1)
{
  sub_1000AE26C((void *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1000AEA70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    sub_1000AE6D8((void *)(a1 + 104));
    sub_1000AE26C((void *)(a1 + 56));
  }
  return a1;
}

uint64_t sub_1000AEAAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248))
  {
    sub_1000AE220(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (v2) {
      operator delete[]();
    }
    sub_1000AE26C((void *)(a1 + 56));
  }
  return a1;
}

void sub_1000AEB14(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 704);
    *(void *)(a2 + 704) = 0;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    uint64_t v4 = 696;
    while (1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + v4);
      if (v5) {
        sub_100004944(v5);
      }
      v4 -= 16;
      if (v4 == 440)
      {
        sub_1000AEA70(a2 + 272);
        sub_1000AEAAC(a2 + 16);
        operator delete();
      }
    }
  }
}

uint64_t sub_1000AEBAC(uint64_t a1)
{
  return sub_1000ACC24(*(void *)(a1 + 48));
}

uint64_t sub_1000AEBB4(uint64_t a1)
{
  return 0;
}

uint64_t sub_1000AEBD4(uint64_t a1)
{
  return sub_1000ACFA8(*(void *)(a1 + 48));
}

uint64_t sub_1000AEBDC(uint64_t a1)
{
  return sub_1000AD080(*(void *)(a1 + 48));
}

uint64_t sub_1000AEBE4(uint64_t result)
{
  if (result)
  {
    sub_1000AEC3C((uint64_t *)(result + 48), 0);
    operator delete();
  }
  return result;
}

uint64_t *sub_1000AEC3C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_100125ECC((NSObject **)(v2 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_1000AEC9C(uint64_t a1, int a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 52);
  int v5 = v4;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v5, (v4 + 2 * a2) | a3);
  if (v5 != v4)
  {
    int v6 = v5;
    do
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), (unsigned int *)&v6, (v5 + 2 * a2) | a3);
      BOOL v13 = v6 == v5;
      int v5 = v6;
    }
    while (!v13);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), -a2) == a2
    && (atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
  {
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 52);
      if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
        break;
      }
      unsigned int v8 = v7;
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v8, 0);
      if (v8 == v7)
      {
        unint64_t v9 = (v7 >> 1) | ((unint64_t)(v7 & 1) << 32);
        goto LABEL_11;
      }
    }
    unint64_t v9 = 0;
LABEL_11:
    unint64_t v10 = HIDWORD(v9);
    if (v9)
    {
LABEL_12:
      __dmb(0xBu);
      int v11 = v9 + atomic_fetch_add(*(atomic_uint *volatile *)a1, v9);
      unsigned int v12 = atomic_load(*(unsigned int **)(a1 + 16));
      BOOL v13 = v11 == v12 || v10 == 0;
      if (!v13)
      {
        int v14 = 1;
        atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v14, 0);
        if (v14 == 1)
        {
          uint64_t v15 = *(void *)(a1 + 80);
          if (!v15) {
            sub_1000150D8();
          }
          (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
        }
      }
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(a1 + 52);
        if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
          break;
        }
        unsigned int v17 = v16;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v17, 0);
        if (v17 == v16)
        {
          LODWORD(v9) = v16 >> 1;
          LODWORD(v10) = v16 & 1;
          if (v16 > 1) {
            goto LABEL_12;
          }
          break;
        }
      }
    }
LABEL_22:
    atomic_store(0, (unsigned __int8 *)(a1 + 89));
    __dmb(0xBu);
    if (*(_DWORD *)(a1 + 52))
    {
      while (2)
      {
        if ((atomic_exchange((atomic_uchar *volatile)(a1 + 89), 1u) & 1) == 0)
        {
          while (1)
          {
            unsigned int v18 = *(_DWORD *)(a1 + 52);
            if (atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
              break;
            }
            unsigned int v19 = v18;
            atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 52), &v19, 0);
            if (v19 == v18)
            {
              if (v18 > 1)
              {
                LODWORD(v10) = v18 & 1;
                LODWORD(v9) = v18 >> 1;
                if (v9) {
                  goto LABEL_12;
                }
                goto LABEL_22;
              }
              break;
            }
          }
          atomic_store(0, (unsigned __int8 *)(a1 + 89));
          __dmb(0xBu);
          if (*(_DWORD *)(a1 + 52) && !atomic_load_explicit((atomic_uint *volatile)(a1 + 48), memory_order_acquire)) {
            continue;
          }
        }
        break;
      }
    }
  }
  return 0;
}

uint64_t sub_1000AEE8C(void *a1)
{
  unint64_t v1 = *a1 + 63;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    int v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          if ((atomic_fetch_and((atomic_ullong *volatile)v3, ~(1 << v7)) & (1 << v7)) != 0) {
            return v7 + 8 * ((void)v3 - a1[1]);
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return -1;
}

uint64_t sub_1000AEF00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  while (1)
  {
    unsigned int v2 = atomic_load(*(unsigned int **)result);
    unsigned int v3 = atomic_load(*(unsigned int **)(result + 16));
    if (v2 == v3)
    {
      if (atomic_exchange((atomic_uchar *volatile)(result + 88), 1u)) {
        break;
      }
      unsigned int v4 = atomic_load(*(unsigned int **)result);
      unsigned int v5 = atomic_load(*(unsigned int **)(result + 16));
      if (v4 == v5) {
        break;
      }
      int v6 = 1;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(result + 88), (unsigned __int8 *)&v6, 0);
      if (v6 != 1) {
        break;
      }
    }
    uint64_t v7 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v8 = atomic_load(*(unsigned int **)result);
    if (v7 != v8)
    {
      uint64_t v9 = v7;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v9, v7 + 1);
      if (v9 == v7) {
        goto LABEL_11;
      }
      while (1)
      {
        LODWORD(v7) = v9;
        unsigned int v8 = atomic_load(*(unsigned int **)result);
        if (v9 == v8) {
          break;
        }
        uint64_t v10 = v9;
        atomic_compare_exchange_strong(*(atomic_uint *volatile *)(result + 16), (unsigned int *)&v10, v9 + 1);
        BOOL v11 = v10 == v9;
        uint64_t v9 = v10;
        if (v11) {
          goto LABEL_11;
        }
      }
    }
    unsigned int v8 = v7;
LABEL_11:
    if (v7 != v8)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16 * (*(_DWORD *)(result + 44) & v7));
      char v12 = 1;
      goto LABEL_14;
    }
  }
  char v12 = 0;
  *(unsigned char *)a2 = 0;
LABEL_14:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

unint64_t sub_1000AEFF0(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2
    && ((atomic_exchange((atomic_uchar *volatile)(a1 + 88), 1u) & 1) != 0
     || (v3 = atomic_load(*(unsigned int **)a1), unsigned int v4 = atomic_load(*(unsigned int **)(a1 + 16)), v3 == v4)
     || (int v5 = 1, atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 88), (unsigned __int8 *)&v5, 0), v5 != 1)))
  {
    LOBYTE(a1) = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    int v11 = 0;
  }
  else
  {
    uint64_t v6 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v7 = atomic_load(*(unsigned int **)a1);
    if (v6 != v7)
    {
      uint64_t v8 = v6;
      atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v8, v6 + 1);
      if (v8 == v6)
      {
LABEL_10:
        if (v6 != v7)
        {
          unint64_t v12 = 0;
          LODWORD(a1) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 44) & v6));
          int v11 = a1 & 0xFFFFFF00;
          uint64_t v13 = (uint64_t)&_mh_execute_header;
          return v13 | v12 | v11 | a1;
        }
      }
      else
      {
        while (1)
        {
          unsigned int v7 = atomic_load(*(unsigned int **)a1);
          if (v8 == v7) {
            break;
          }
          LODWORD(v6) = v8;
          uint64_t v9 = v8;
          atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 16), (unsigned int *)&v9, v8 + 1);
          BOOL v10 = v9 == v8;
          uint64_t v8 = v9;
          if (v10) {
            goto LABEL_10;
          }
        }
      }
    }
    a1 = sub_1000AEFF0();
    int v11 = a1 & 0xFFFFFF00;
    unint64_t v12 = a1 & 0xFFFFFF0000000000;
    uint64_t v13 = a1 & 0xFF00000000;
  }
  return v13 | v12 | v11 | a1;
}

uint64_t sub_1000AF114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 1u);
  uint64_t v3 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v4 = atomic_load(*(unsigned int **)(a1 + 16));
  int v5 = v4 - v3;
  while (v5 != 1 && v5 != 1 - *(_DWORD *)(a1 + 40))
  {
    uint64_t v6 = v3;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v6, v3 + 1);
    if (v6 == v3)
    {
      uint64_t v8 = 0;
      BOOL v10 = (void *)(*(void *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 44) & v3));
      void *v10 = a2;
      v10[1] = a3;
      return v8;
    }
    unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
    int v5 = v7 - v6;
    uint64_t v3 = v6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 48), 0xFFFFFFFF) == 1) {
    sub_1000AEC9C(a1, 0, 1);
  }
  return 4294967268;
}

uint64_t sub_1000AF1CC(uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1000150D8();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v5, &v6);
}

void sub_1000AF228(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL sub_1000AF294(uint64_t *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      int v14 = (std::__shared_weak_count *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      if (v14) {
        sub_100004944(v14);
      }
    }
    else
    {
      *a1 = v12;
      a1[1] = 0;
    }
    uint64_t v15 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      int v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v9;
      a2[1] = v10;
      if (v11) {
        sub_100004944(v11);
      }
    }
    else
    {
      *a2 = v9;
      a2[1] = 0;
    }
    uint64_t v15 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v15) {
    sub_100004944(v15);
  }
  return v7 == v8;
}

void sub_1000AF370(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1000AF3D8(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(v1 + 48))(v1);
  __cxa_rethrow();
}

void sub_1000AF3F0(_Unwind_Exception *a1)
{
}

void sub_1000AF408(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000AF440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_1000AF464(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1000AF4A8(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
}

void *sub_1000AF50C(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_1000AF760(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1000AF74C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000AF760(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1000AF850(a1, prime);
    }
  }
}

void sub_1000AF850(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10004B1A4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_1000AF9AC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1000AFA98(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_1000AFADC(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_1000AFADC@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1000AFC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)a1 = &off_1001B1C90;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)a1 = off_1001B1C48;
  sub_10010B464(a1 + 48, a2 + 48);
  sub_10010B464(a1 + 96, a2 + 96);
  unint64_t v7 = *(_OWORD **)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    unint64_t v7 = *(_OWORD **)(a1 + 144);
  }
  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_1000AFCD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_1001515F4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AFCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &off_1001B1C90;
  *(void *)(a1 + 8) = a2;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a4;
  *(void *)a1 = off_1001B1C48;
  sub_10010B464(a1 + 48, a5);
  sub_10010B464(a1 + 96, a6);
  sub_1000B0884(a7, (void *)(a1 + 144));
  unint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = v12;
  if (v12 == v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *(void *)(v12 - 24);
  }
  if (*(void *)(a1 + 24) > v14) {
    unint64_t v14 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = 2;
  return a1;
}

void sub_1000AFDE0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    sub_100151558();
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000AFE34@<W0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  while (v7 != v6 && *(void *)(v7 + 8) <= a2)
  {
    v7 += 32;
    *(void *)(a1 + 160) = v7;
  }
  while (sub_10010B590(a1 + 48, a1 + 96))
  {
    if (*(_DWORD *)(a1 + 80) == 3 || *(void *)(a1 + 64) > v3) {
      break;
    }
    sub_10010B870((uint64_t *)(a1 + 48), (uint64_t)v19);
    uint64_t v8 = v19[0];
    v19[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
  }
  BOOL result = sub_10010B590(a1 + 48, a1 + 96);
  if (result && *(_DWORD *)(a1 + 80) == 3)
  {
    unint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 56) > v3) {
      unint64_t v3 = *(void *)(a1 + 56);
    }
    int v11 = 3;
    goto LABEL_44;
  }
  BOOL result = sub_10010B4D0(a1 + 48, a1 + 96);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  if (result && v12 == v13)
  {
    int v11 = 0;
    unint64_t v10 = *(void *)(a1 + 24);
    goto LABEL_44;
  }
  if (v12 == v13)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    if (v10 <= v3)
    {
      unint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(_DWORD *)(a1 + 80);
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  BOOL result = sub_10010B4D0(a1 + 48, a1 + 96);
  if (result)
  {
    unint64_t v14 = *(unint64_t **)(a1 + 160);
    unint64_t v10 = *v14;
    if (*v14 <= v3)
    {
      unint64_t v10 = v14[1];
      int v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }
LABEL_39:
    int v11 = 0;
    goto LABEL_44;
  }
  unint64_t v15 = *(void *)(a1 + 56);
  BOOL v16 = *(unint64_t **)(a1 + 160);
  unint64_t v17 = *v16;
  if (*v16 >= v15) {
    unint64_t v10 = *(void *)(a1 + 56);
  }
  else {
    unint64_t v10 = *v16;
  }
  if (v10 <= v3) {
    unint64_t v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = v16[1];
  }
  else
  {
    if (v17 >= *(void *)(a1 + 64)) {
      unint64_t v17 = *(void *)(a1 + 64);
    }
    BOOL v16 = (unint64_t *)(a1 + 56);
  }
  int v11 = *((_DWORD *)v16 + 6);
  unint64_t v3 = v10;
  if (*(void *)(a1 + 24) >= v17) {
    unint64_t v10 = v17;
  }
  else {
    unint64_t v10 = *(void *)(a1 + 24);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

BOOL sub_1000B0034@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_1000AFE34(a1, *(void *)(a1 + 40), (uint64_t)v9);
  int v5 = *(_DWORD *)&v9[24];
  unint64_t v6 = *(void *)&v9[8];
  uint64_t v7 = *(void *)v9;
  do
  {
    if (v6 >= *(void *)(a1 + 24)) {
      break;
    }
    if (v5 == 3) {
      break;
    }
    if (v5 != *(_DWORD *)&v9[24]) {
      break;
    }
    unint64_t v6 = *(void *)&v9[8];
    BOOL result = sub_1000AFE34(a1, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)unint64_t v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }
  while (*(void *)&v8[0] == v6);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void *sub_1000B00E4@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  sub_100014D80((uint64_t)v8, a2);
  sub_1000B0188(a4, a1, (uint64_t)v8, a3);
  return sub_10000C78C(v8);
}

void sub_1000B016C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000C78C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0188(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  long long v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = (void *)sub_10000C5F0(a1 + 56, (uint64_t)a2 + 56);
  sub_100014D0C(v10, a3);
  long long v11 = *a4;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a4 + 16);
  *(_OWORD *)(a1 + 8) = v11;
  return a1;
}

void sub_1000B020C(_Unwind_Exception *a1)
{
  sub_100008B48(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100013494(a1, (uint64_t)v35);
  sub_100013530(a1, (uint64_t)v34);
  unint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *(void *)unint64_t v6 = off_1001B1CC0;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10010B464((uint64_t)v31, (uint64_t)v35);
  sub_10010B464((uint64_t)v32, (uint64_t)v34);
  *(void *)&long long v33 = v6 + 24;
  *((void *)&v33 + 1) = v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  uint64_t v7 = *((void *)v6 + 4);
  if (v7 == *((void *)v6 + 3)) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *(void *)(v7 - 24);
  }
  if (*(void *)(a1 + 16) > v8) {
    unint64_t v8 = *(void *)(a1 + 16);
  }
  *(void *)&long long v29 = *(void *)(a1 + 8);
  *((void *)&v29 + 1) = v8;
  char v30 = 2;
  sub_10010B464((uint64_t)&v20, (uint64_t)v31);
  sub_10010B464((uint64_t)&v24, (uint64_t)v32);
  long long v28 = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v9 = (char *)operator new(0x78uLL);
  uint64_t v10 = v20;
  *(void *)uint64_t v9 = off_1001B1D10;
  *((void *)v9 + 1) = v10;
  long long v11 = v22;
  *((_OWORD *)v9 + 1) = v21;
  *((_OWORD *)v9 + 2) = v11;
  *((_DWORD *)v9 + 12) = v23;
  uint64_t v12 = v24;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  *((void *)v9 + 7) = v12;
  long long v13 = v26;
  *((_OWORD *)v9 + 4) = v25;
  *((_OWORD *)v9 + 5) = v13;
  *((_DWORD *)v9 + 24) = v27;
  *(_OWORD *)(v9 + 104) = v28;
  long long v28 = 0uLL;
  int v37 = v9;
  sub_1000B00E4((long long *)a1, (uint64_t)v36, &v29, a3);
  sub_10000C78C(v36);
  if (*((void *)&v28 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v28 + 1));
  }
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (*((void *)&v33 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v33 + 1));
  }
  uint64_t v16 = v32[0];
  v32[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  uint64_t v17 = v31[0];
  v31[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  sub_100004944((std::__shared_weak_count *)v6);
  uint64_t v18 = v34[0];
  v34[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  uint64_t result = v35[0];
  v35[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_1000B0550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10000C78C((void *)(v27 - 88));
  sub_1000B063C(&a9);
  sub_1000B063C(&a26);
  sub_100004944(v26);
  uint64_t v29 = *(void *)(v27 - 184);
  *(void *)(v27 - 184) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  uint64_t v30 = *(void *)(v27 - 136);
  *(void *)(v27 - 136) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000B063C(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000B06CC()
{
}

void sub_1000B0720()
{
}

void *sub_1000B0744(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[12];
  a1[12] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000B07D4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[12];
  a1[12] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  operator delete();
}

uint64_t sub_1000B0884@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_1000B08E0((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1000B08CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B08E0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1001B1CC0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  sub_1000B09E8((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  return a1;
}

void sub_1000B0944(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000B0958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000B0978(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001B1CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000B09CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_1000B09E8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_1000B0A64(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000B0A48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000B0A64(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10004B570();
  }
  uint64_t result = (char *)sub_1000B0AA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_1000B0AA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10004B1A4();
  }
  return operator new(32 * a2);
}

void *sub_1000B0AE0(void *a1)
{
  *a1 = off_1001B1D10;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void sub_1000B0B8C(void *a1)
{
  *a1 = off_1001B1D10;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  operator delete();
}

void *sub_1000B0C58(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = off_1001B1D10;
  sub_1000B0E34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1000B0CAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0CC0(uint64_t a1, void *a2)
{
  *a2 = off_1001B1D10;
  return sub_1000B0E34((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1000B0CEC(uint64_t a1)
{
  return sub_1000B0EA0((uint64_t *)(a1 + 8));
}

void sub_1000B0CF4(uint64_t *a1)
{
  sub_1000B0EA0(a1 + 1);
  operator delete(a1);
}

void sub_1000B0D30()
{
}

void sub_1000B0DC4()
{
}

uint64_t sub_1000B0DE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1000B0E28()
{
}

uint64_t sub_1000B0E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010B464(a1, a2);
  sub_10010B464(v4 + 48, a2 + 48);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1000B0E84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_1001515F4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B0EA0(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v5();
  }
  return result;
}

void sub_1000B12C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B12F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B1300(uint64_t a1)
{
}

void sub_1000B1308(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

const void **sub_1000B141C(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) != TypeID)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a1);
    goto LABEL_20;
  }
  int v7 = sub_100122ADC(a1);
  if (v7 == 1651272568 || v7 == 1970628964 || v7 == 1886155636)
  {
    uint64_t v10 = __cxa_allocate_exception(0x40uLL);
    long long v11 = "User data contains reserved key(s)";
LABEL_16:
    uint64_t v12 = (void *)sub_100002B24((uint64_t)v10, (uint64_t)v11, 0x16u);
    uint64_t v14 = (void (*)(void *))sub_100002B8C;
    goto LABEL_17;
  }
  CFTypeID v8 = CFDataGetTypeID();
  if (!a2)
  {
    uint64_t v10 = __cxa_allocate_exception(0x40uLL);
    long long v11 = "Invalid user data content";
    goto LABEL_16;
  }
  if (CFGetTypeID(a2) != v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a2);
LABEL_20:
    uint64_t v12 = sub_100009368(exception);
    uint64_t v14 = (void (*)(void *))sub_10000936C;
LABEL_17:
    __cxa_throw(v12, v13, v14);
  }
  sub_100004890(v20, "");
  LOBYTE(__p[0]) = 0;
  char v19 = 0;
  sub_10002D1F4(&v16, 80);
  sub_10011B7BC((uint64_t)v20, (uint64_t)__p, 0, a2, (CFDictionaryRef *)&v22);
  if (v19 && v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  __p[0] = v22;
  v20[0] = CFArrayCreate(kCFAllocatorDefault, (const void **)__p, 1, &kCFTypeArrayCallBacks);
  CFDictionarySetValue(a3, a1, v20[0]);
  sub_10002D538((const void **)v20);
  return sub_10000D758((const void **)&v22);
}

void sub_1000B1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1680(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 284);
  if (v1) {
    uint64_t v2 = *(long long **)(a1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 280);
  if (v4)
  {
    long long v16 = *(_OWORD *)(a1 + 96);
    LOBYTE(v4) = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  uint64_t v5 = *(long long **)(a1 + 80);
  BOOL v6 = v1 == 0;
  char v17 = v4;
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v22 = *(void *)(v7 + 352);
  long long v27 = *(_OWORD *)(v7 + 424);
  long long v28 = *(_OWORD *)(v7 + 440);
  long long v29 = *(_OWORD *)(v7 + 456);
  long long v30 = *(_OWORD *)(v7 + 472);
  long long v23 = *(_OWORD *)(v7 + 360);
  long long v24 = *(_OWORD *)(v7 + 376);
  long long v25 = *(_OWORD *)(v7 + 392);
  long long v26 = *(_OWORD *)(v7 + 408);
  *(void *)&long long v21 = sub_100114E68((unsigned int *)&v22);
  *((void *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17) {
      return 1;
    }
  }
  else
  {
    uint64_t v9 = *(void **)(v3 + 32);
    if (v9 == (void *)(v3 + 40) || v2 == v5) {
      goto LABEL_23;
    }
    BOOL v10 = 1;
    do
    {
      long long v20 = *v2;
      if (v10) {
        BOOL v10 = sub_100116D2C((_DWORD *)v9 + 15, (uint64_t)&v20);
      }
      sub_100004890(__p, "BLX");
      sub_100119DE4(v3, (uint64_t)__p, (uint64_t)&v20, (int *)v9 + 15);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      long long v21 = *(_OWORD *)sub_1000B4FE0((uint64_t)&v21, (uint64_t)&v20);
      long long v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      if (v12 == (void *)(v3 + 40)) {
        break;
      }
      uint64_t v2 = (long long *)((char *)v2 + 184);
      uint64_t v9 = v12;
    }
    while (v2 != v5);
    if (v10) {
LABEL_23:
    }
      BOOL v10 = sub_100116D2C(&v22, (uint64_t)&v21);
    sub_100004890(__p, "Master checksum");
    sub_100119DE4(v3, (uint64_t)__p, (uint64_t)&v21, (int *)&v22);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (!v17) {
      return v10;
    }
    if (!v10)
    {
      BOOL v14 = 0;
      goto LABEL_31;
    }
  }
  BOOL v14 = sub_100116D2C((_DWORD *)(*(void *)(v3 + 72) + 80), (uint64_t)&v16);
LABEL_31:
  sub_100004890(__p, "Data Fork");
  sub_100119DE4(v3, (uint64_t)__p, (uint64_t)&v16, (int *)(*(void *)(v3 + 72) + 80));
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_1000B191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B1948(uint64_t a1)
{
  unsigned __int8 v4 = 0;
  uint64_t v3 = &v4;
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  if (v1 == -1) {
    sub_1000289E8();
  }
  uint64_t v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_1001B1F08[v1])(&v5, a1 + 4);
  return v4;
}

uint64_t sub_1000B19A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v5 = sub_100119DD4(*(void *)(a1 + 8));
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = *(void *)(a3 + 72);
  uint64_t v8 = *(void *)(a1 + 16) * *(void *)(a3 + 80);
  v11[0] = 0;
  v11[1] = v8;
  char v12 = 2;
  sub_1000B1AB8((long long *)(a1 + 40), (long long *)(a1 + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), a1 + 96);
  if (sub_1000B1948(a1 + 96)) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(a1 + 284) = v9;
  *(_DWORD *)(a1 + 280) = sub_1000B1948(a1 + 96) ^ 1;
  return a1;
}

void sub_1000B1A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B42C4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000B1AB8(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uLong v9 = sub_100114E68(a4);
  *(void *)char v12 = 850045863;
  v14[0] = 0;
  v14[1] = 0;
  memset(&v12[8], 0, 60);
  BOOL v13 = v14;
  long long v15 = *a1;
  long long v16 = v15;
  long long v17 = *a2;
  char v19 = 0;
  uint64_t v11 = v15;
  if ((void)v15 != (void)v17)
  {
    uint64_t v11 = *(void *)(v15 + 32);
    if ((*(unsigned char *)(v15 + 48) & 2) == 0) {
      ++v11;
    }
    uint64_t v18 = v11;
  }
  v20[0] = v9;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0;
  v23[1] = 0;
  *(void *)long long v21 = 850045863;
  uint64_t v22 = v23;
  long long v24 = *a1;
  long long v25 = v24;
  long long v26 = *a2;
  uint64_t v27 = v11;
  char v28 = 0;
  char v29 = 0;
  sub_1000B50C0(a5, (uint64_t)v20, a3);
  sub_1000B4264((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  sub_1000B4264((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_1000B1C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_1000B4264(v43, a41);
  std::mutex::~mutex(v42);
  sub_1000B4264(v41, a19);
  std::mutex::~mutex((std::mutex *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1C68(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 16);
  sub_1000B4264(a1 + 88, *(void **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

uint64_t sub_1000B1CA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)(sub_1000B19A4(a1, a2, a3) + 284) = 4 * (a4 & 1);
  if ((a4 & 2) != 0) {
    int v6 = sub_1000B1948(a1 + 96) ^ 1;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 280) = v6;
  return a1;
}

void sub_1000B1CF4(_Unwind_Exception *a1)
{
  sub_1000B1D08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1D08(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 112);
  sub_1000B4264(a1 + 184, *(void **)(a1 + 192));
  std::mutex::~mutex(v2);
  unsigned __int8 v4 = (void **)(a1 + 72);
  sub_1000B42C4(&v4);
  return a1;
}

uint64_t sub_1000B1D5C(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned int *)(a2 + 1);
  uint64_t v3 = (unsigned int *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  int v6 = (long long *)(a1 + 40);
  uint64_t v7 = (long long *)(a1 + 56);
  long long v15 = (uint64_t *)(a1 + 72);
  do
  {
    sub_1000B1AB8(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >= *(void *)(a1 + 88))
    {
      uint64_t v9 = sub_1000B437C(v15, (uint64_t)v16);
    }
    else
    {
      sub_1000B449C(*(void *)(a1 + 80), (uint64_t)v16);
      uint64_t v9 = v8 + 184;
      *(void *)(a1 + 80) = v8 + 184;
    }
    *(void *)(a1 + 80) = v9;
    sub_1000B4264((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    unsigned int v10 = v3[15];
    BOOL v11 = v10 == 10 || v10 == 0;
    if (v11) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 2;
    }
    char v12 = (unsigned int *)*((void *)v3 + 1);
    if (v12)
    {
      do
      {
        BOOL v13 = v12;
        char v12 = *(unsigned int **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        BOOL v13 = (unsigned int *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v13 == (void)v3;
        uint64_t v3 = v13;
      }
      while (!v11);
    }
    uint64_t v3 = v13;
  }
  while (v13 != v2);
  return v5;
}

void sub_1000B1EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B1C68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1EE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a2;
  uint64_t result = sub_1000B5280(a5, a4);
  if (a4)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 136))();
    uint64_t v28 = v9;
    long long v27 = 0uLL;
    if ((sub_1000B224C(*a1) & 1) == 0)
    {
      unsigned int v10 = *(std::__shared_weak_count **)(v9 + 48);
      long long v25 = *(const void **)(v9 + 40);
      long long v26 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v11 = *(void **)(v9 + 16);
      if (v11 != (void *)(v9 + 24))
      {
        char v12 = 0;
        BOOL v13 = 0;
        do
        {
          if (v12)
          {
            if (!(void)v27)
            {
              sub_10004EC94(v12);
              long long v14 = v24;
              long long v24 = 0uLL;
              long long v15 = (std::__shared_weak_count *)*((void *)&v27 + 1);
              long long v27 = v14;
              if (v15)
              {
                sub_100004944(v15);
                if (*((void *)&v24 + 1)) {
                  sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
                }
              }
            }
          }
          else
          {
            int v23 = 1;
            BOOL v22 = a3 != 1;
            sub_1000B54B0((uint64_t)&v25, &v29, &v23, (unsigned __int8 *)&v22, &v24);
            long long v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
            char v12 = (void **)v24;
            long long v24 = 0uLL;
            if (v13)
            {
              sub_100004944(v13);
              if (*((void *)&v24 + 1)) {
                sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
              }
            }
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::mutex v17 = (std::__shared_weak_count *)*((void *)&v27 + 1);
            *(void *)&long long v27 = v12;
            *((void *)&v27 + 1) = v16;
            if (v17) {
              sub_100004944(v17);
            }
            BOOL v13 = v16;
          }
          if (a3 == 1 || (const void *)v11[5] == v25)
          {
            int v21 = *((_DWORD *)v11 + 8);
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_1000B2300(v9, &v21, (uint64_t **)&v24);
          }
          else
          {
            long long v24 = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_100149790((uint64_t)(v11 + 5), &v25, (uint64_t *)&v24);
          }
          if (*((void *)&v24 + 1)) {
            sub_100004944(*((std::__shared_weak_count **)&v24 + 1));
          }
          uint64_t v18 = (void *)v11[1];
          if (v18)
          {
            do
            {
              char v19 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              char v19 = (void *)v11[2];
              BOOL v20 = *v19 == (void)v11;
              BOOL v11 = v19;
            }
            while (!v20);
          }
          BOOL v11 = v19;
        }
        while (v19 != (void *)(v9 + 24));
      }
      *(unsigned char *)(v9 + 56) = 0;
      if (v26) {
        sub_100004944(v26);
      }
    }
    sub_1000B236C();
  }
  return result;
}

void sub_1000B21B4(_Unwind_Exception *a1)
{
  sub_1000B53E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B224C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 168);
  uint64_t v2 = (void *)(a1 + 176);
  if (v1 == (void *)(a1 + 176)) {
    return 1;
  }
  do
  {
    sub_1001493EC((uint64_t)(v1 + 5), &v10);
    uint64_t v3 = v1[5];
    uint64_t v4 = v10;
    BOOL v5 = v3 == v10;
    if (v11) {
      sub_100004944(v11);
    }
    if (v3 != v4) {
      break;
    }
    int v6 = (void *)v1[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        int v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v1[2];
        BOOL v8 = *v7 == (void)v1;
        uint64_t v1 = v7;
      }
      while (!v8);
    }
    uint64_t v1 = v7;
  }
  while (v7 != v2);
  return v5;
}

void sub_1000B2300(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  BOOL v8 = a2;
  uint64_t v4 = sub_10001F2E0((uint64_t **)(a1 + 16), a2, (uint64_t)&unk_1001705CC, &v8);
  int v6 = *a3;
  BOOL v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = v6;
  void v4[6] = v5;
  if (v7) {
    sub_100004944(v7);
  }
}

void sub_1000B236C()
{
}

uint64_t sub_1000B2494(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_10004CDB8();
  unint64_t v32 = (*(uint64_t (**)(void))(**(void **)a1 + 24))();
  BOOL v5 = (*(void *(**)(void *__return_ptr))(**(void **)a1 + 72))(v45);
  if (v45[0] <= (unint64_t)v4[2] / v32 * v32) {
    unint64_t v6 = (unint64_t)v4[2] / v32 * v32;
  }
  else {
    unint64_t v6 = v45[0];
  }
  int v7 = *((_DWORD *)v4 + 2);
  if (v7 == 1)
  {
    unsigned int v8 = ((uint64_t (*)(void *))*v4)(v5);
  }
  else
  {
    if (v7) {
      sub_1000289E8();
    }
    unsigned int v8 = *(_DWORD *)v4;
  }
  unint64_t v9 = (unint64_t)v4[3] / v6;
  if (v8 < v9) {
    LODWORD(v9) = v8;
  }
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 72))(v45);
  uint64_t v31 = v46 + v6;
  sub_10012434C((uint64_t)v45, v46 + v6, 0, v10);
  uint64_t v11 = (uint64_t)a1[1];
  uint64_t v12 = sub_100119DD4(v11);
  long long v30 = v13;
  long long v14 = (void *)v12;
  if (a1[35].i32[1])
  {
    __int32 v15 = sub_1000B1D5C((uint64_t)a1, (void *)(v11 + 32));
    a1[35].i32[1] = v15;
  }
  else
  {
    __int32 v15 = 0;
  }
  __int32 v16 = a1[35].i32[0];
  if (sub_1000B224C((uint64_t)*a1))
  {
    a1[35] = (int32x2_t)vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32(a1[35]));
    int v17 = 2;
  }
  else
  {
    int v17 = v16 | v15;
  }
  sub_1000B1EE0((uint64_t *)a1, v31, v17, v10, (uint64_t)v44);
  sub_100055E98(a2, v10, (uint64_t)v43);
  int32x2_t v18 = a1[9];
  unsigned int v42 = 0;
  char v19 = *(void **)(v11 + 32);
  if (v19 != (void *)(v11 + 40) && v14 != v30)
  {
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1)
    {
LABEL_22:
      BOOL v20 = (void *)v19[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          BOOL v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v19[2];
          BOOL v25 = *v21 == (void)v19;
          char v19 = v21;
        }
        while (!v25);
      }
      if (v21 != (void *)(v11 + 40))
      {
        *(void *)&v18 += 184;
        char v19 = v21;
        if (v14 != v30) {
          continue;
        }
      }
      goto LABEL_52;
    }
    BOOL v22 = v14;
    while (1)
    {
      long long v38 = *((_OWORD *)v19 + 2);
      uint64_t v39 = v19[6];
      sub_10006F228((unint64_t *)&v38, v22 + 4, (uint64_t)v40);
      unint64_t v23 = v40[0];
      if ((v41 & 2) == 0) {
        unint64_t v23 = v40[0] + 1;
      }
      if (v23 <= (v41 & 1) + v40[1] - 1) {
        break;
      }
      long long v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          long long v14 = v24;
          long long v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v14 = (void *)v22[2];
          BOOL v25 = *v14 == (void)v22;
          BOOL v22 = v14;
        }
        while (!v25);
      }
      BOOL v25 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v19[6] & 1) + v19[5] - 1 || v14 == v30;
      BOOL v22 = v14;
      if (v25) {
        goto LABEL_22;
      }
    }
    if (!atomic_load_explicit((atomic_uint *volatile)&v42, memory_order_acquire))
    {
      v35[0] = v23;
      v35[1] = v23 + (v32 + v6 - 1) / v32;
      char v36 = 2;
      sub_10006F228(v35, v40, (uint64_t)&v37);
      if (v17 == 1)
      {
        v34[0] = 0;
        v34[1] = 0;
        sub_1000B2A78((uint64_t)v44, &v33);
      }
      sub_1001243FC((uint64_t)v45, v34);
    }
    int32x2_t v26 = a1[9];
    for (int32x2_t i = a1[10]; *(void *)&v26 != *(void *)&i; *(void *)&v26 += 184)
    {
      *(unsigned char *)(*(void *)&v26 + 176) = 1;
      sub_1000B55AC(*(void *)&v26 + 16);
    }
    a1[34].i8[0] = 1;
    sub_1000B55AC((uint64_t)&a1[14]);
  }
LABEL_52:
  uint64_t v28 = atomic_load(&v42);
  sub_100055E14(v43);
  sub_1000B53E8((uint64_t)v44);
  sub_1001243F8(v45);
  return v28;
}

void sub_1000B29E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100055E14(&a50);
  sub_1000B53E8((uint64_t)&a68);
  sub_1001243F8(&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_1000B2A78(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5 == v4)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      while (*(void *)(a1 + 8) == v4);
    }
    uint64_t v7 = *(void *)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    sub_1000B5608(a2, v7);
  }
  sub_1000B236C();
}

void sub_1000B2B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a11) {
    sub_100004944(a11);
  }
  sub_100151990((uint64_t)&a10, &a12);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void sub_1000B2BB4(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = (*(void *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0) {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v7 = v3 + 1;
  }
  uint64_t v8 = v7 * v5;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v51 = *(void *)(a1 + 72);
  uint64_t v52 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v53 = v6;
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  char v56 = 0;
  uint64_t v11 = *(uint64_t **)(a1 + 96);
  sub_100042770(&v51, &v63);
  sub_1000414AC((uint64_t)v69, (uint64_t)&v60);
  sub_1000411FC((uint64_t)v69, (uint64_t)v57);
  uint64_t v12 = sub_100003758(*v11);
  uint64_t v14 = v13;
  if (v59) {
    sub_100004944(v59);
  }
  if (v58) {
    sub_100004944(v58);
  }
  if (v62) {
    sub_100004944(v62);
  }
  if (*((void *)&v60 + 1)) {
    sub_100004944(*((std::__shared_weak_count **)&v60 + 1));
  }
  sub_1000049B8(&v63);
  if ((v12 & 0x8000000000000000) == 0 || !v12)
  {
    uint64_t v15 = v6;
    uint64_t v16 = *(void *)(a1 + 72);
    int v17 = *(std::__shared_weak_count **)(a1 + 80);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int32x2_t v18 = 0;
    uint64_t v49 = v16 + v8 - v14;
    int v50 = v17;
    unint64_t v19 = *(void *)(a1 + 64);
    unint64_t v20 = v54;
    if (v53 <= v19) {
      unint64_t v21 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v21 = v53;
    }
    if (v53) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v23 = v19 + v54 + v22 - 1;
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      if (v8 != v14) {
        goto LABEL_32;
      }
      uint64_t v26 = *(void *)(a1 + 96);
      long long v27 = *(void **)(v26 + 8);
      uint64_t v24 = v27[8];
      int32x2_t v18 = (std::__shared_weak_count *)v27[9];
      if (v18)
      {
        uint64_t v48 = v27[8];
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_100004944(v18);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v27 = *(void **)(v26 + 8);
        uint64_t v28 = (std::__shared_weak_count *)v27[9];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = v27[10];
          sub_100004944(v28);
          uint64_t v24 = v48;
          goto LABEL_32;
        }
        uint64_t v24 = v48;
      }
      uint64_t v25 = v27[10];
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
LABEL_32:
    uint64_t v29 = v20 / v19;
    uint64_t v30 = v4;
    int v31 = *(_DWORD *)(v4 + 284);
    uint64_t v32 = v25;
    unint64_t v33 = v23 / v19;
    if (v31 != 1)
    {
      if (v31 != 2) {
        goto LABEL_54;
      }
      uint64_t v32 = v15;
    }
    if (!v32)
    {
LABEL_54:
      int v41 = *(_DWORD *)(v30 + 280);
      uint64_t v42 = v25;
      if (v41 != 1)
      {
        if (v41 != 2) {
          goto LABEL_76;
        }
        uint64_t v42 = v15;
      }
      if (v42)
      {
        if (v41 == 2)
        {
          if (!v50)
          {
            uint64_t v43 = 0;
            uint64_t v24 = v49;
            goto LABEL_66;
          }
          uint64_t v43 = v50;
          uint64_t v24 = v49;
        }
        else
        {
          if (!v18)
          {
            uint64_t v43 = 0;
            goto LABEL_66;
          }
          uint64_t v43 = v18;
        }
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_66:
        int v44 = *(_DWORD *)(v30 + 280);
        if (v44 == 2)
        {
          uint64_t v25 = v15;
        }
        else if (v44 != 1)
        {
          uint64_t v25 = 0;
        }
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v24;
        long long v67 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v25;
        sub_1000B3280(v30 + 96, (uint64_t)&v63);
        if (v67) {
          sub_100004944(v67);
        }
        if (v43) {
          sub_100004944(v43);
        }
      }
LABEL_76:
      if (!*(unsigned char *)(a1 + 132))
      {
        uint64_t v45 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v46 = *(std::__shared_weak_count **)(v45 + 72);
        *(void *)(v45 + 64) = 0;
        *(void *)(v45 + 72) = 0;
        if (v46) {
          sub_100004944(v46);
        }
        *(void *)(v45 + 80) = 0;
        *(void *)(v45 + 88) = 0;
        *(unsigned char *)(v45 + 104) = 0;
        *(void *)(v45 + 96) = 0;
      }
      if (v18) {
        sub_100004944(v18);
      }
      if (v50) {
        sub_100004944(v50);
      }
      goto LABEL_84;
    }
    uint64_t v34 = *(void *)(a1 + 120);
    if (v31 == 2)
    {
      int v35 = v50;
      uint64_t v36 = v49;
      if (!v50)
      {
        uint64_t v36 = v49;
        goto LABEL_42;
      }
    }
    else
    {
      int v35 = v18;
      uint64_t v36 = v24;
      if (!v18)
      {
        uint64_t v36 = v24;
LABEL_42:
        int v37 = *(_DWORD *)(v4 + 284);
        if (v37 == 2)
        {
          uint64_t v38 = v15;
        }
        else if (v37 == 1)
        {
          uint64_t v38 = v25;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = v24;
        uint64_t v40 = v29;
        uint64_t v63 = v29;
        unint64_t v64 = v33;
        char v65 = 2;
        uint64_t v66 = v36;
        long long v67 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = v38;
        sub_1000B3280(v34, (uint64_t)&v63);
        if (v67) {
          sub_100004944(v67);
        }
        if (v35) {
          sub_100004944(v35);
        }
        uint64_t v24 = v39;
        uint64_t v29 = v40;
        goto LABEL_54;
      }
    }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_42;
  }
  int v47 = 0;
  atomic_compare_exchange_strong(*(atomic_uint *volatile *)(a1 + 112), (unsigned int *)&v47, v12);
  if (!v47)
  {
    *(void *)&long long v60 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
    *((void *)&v60 + 1) = 41;
    int v61 = 16;
    sub_1000B3118(&v63, &v60);
    sub_1000039A0(v70, (uint64_t)"Error reading sectors for verify ", 33);
    std::ostream::operator<<();
    sub_1000B323C((uint64_t)&v63);
  }
LABEL_84:
  if (v52) {
    sub_100004944(v52);
  }
}

void sub_1000B306C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a14) {
    sub_100004944(a14);
  }
  _Unwind_Resume(a1);
}

void *sub_1000B3118(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B5888((uint64_t)a1, a2);
  *a1 = off_1001B1F30;
  a1[45] = &off_1001B2030;
  a1[46] = &off_1001B2058;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001B1F30;
  a1[45] = off_1001B1FB8;
  a1[46] = off_1001B1FE0;
  return a1;
}

void sub_1000B3218(_Unwind_Exception *a1)
{
  sub_1000B4AFC(v1);
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_1000B323C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B3280(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (std::mutex *)(a1 + 16);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(_DWORD *)int v47 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v47[3] = *(_DWORD *)(a2 + 20);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 40);
  *(_DWORD *)uint64_t v48 = *(_DWORD *)(a2 + 17);
  *(_DWORD *)&v48[3] = *(_DWORD *)(a2 + 20);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(unsigned char *)(a1 + 168))
  {
    std::mutex::unlock(v3);
    if (v7) {
      sub_100004944(v7);
    }
  }
  else
  {
    int v50 = (void *)v4;
    *(void *)&long long v51 = v5;
    BYTE8(v51) = v6;
    *(_DWORD *)((char *)&v51 + 9) = *(_DWORD *)v48;
    HIDWORD(v51) = *(_DWORD *)&v48[3];
    v52[0] = a1;
    v52[1] = v4;
    _OWORD v52[2] = v5;
    char v53 = v6;
    *(_DWORD *)uint64_t v54 = *(_DWORD *)v47;
    *(_DWORD *)&v54[3] = *(_DWORD *)&v47[3];
    uint64_t v55 = v8;
    char v56 = v7;
    uint64_t v57 = v9;
    sub_1000B5918((uint64_t **)(a1 + 88), (unint64_t *)&v50, (uint64_t)&v50);
    if (v56) {
      sub_100004944(v56);
    }
    if ((v6 & 2) != 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v10 == v11)
    {
      uint64_t v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        int v50 = v52;
        long long v51 = xmmword_10016E350;
        std::mutex::lock(v3);
        uint64_t v13 = *(uint64_t **)(a1 + 88);
        unint64_t v14 = *(void *)(a1 + 160);
        if (v13 == v12)
        {
          int v17 = (uint64_t *)(a1 + 96);
        }
        else
        {
          uint64_t v15 = *(void **)(a1 + 144);
          uint64_t v16 = *(void **)(a1 + 112);
          int v17 = *(uint64_t **)(a1 + 88);
          while (v16 != v15)
          {
            uint64_t v18 = v17[4];
            if ((v17[6] & 2) == 0) {
              ++v18;
            }
            if (v18 != v14) {
              break;
            }
            unint64_t v14 = v17[5] + (v17[6] & 1);
            for (uint64_t i = (v16[6] & 1) + v16[5]; v14 > i - 1; uint64_t i = (v16[6] & 1) + v16[5])
            {
              unint64_t v20 = (void *)v16[1];
              unint64_t v21 = v16;
              if (v20)
              {
                do
                {
                  uint64_t v16 = v20;
                  unint64_t v20 = (void *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  uint64_t v16 = (void *)v21[2];
                  BOOL v22 = *v16 == (void)v21;
                  unint64_t v21 = v16;
                }
                while (!v22);
              }
              *(void *)(a1 + 112) = v16;
              if (v16 == v15)
              {
                uint64_t v16 = v15;
                break;
              }
              if ((v16[6] & 2) != 0) {
                unint64_t v14 = v16[4];
              }
              else {
                unint64_t v14 = v16[4] + 1;
              }
            }
            unint64_t v23 = (uint64_t *)v17[1];
            if (v23)
            {
              do
              {
                uint64_t v24 = v23;
                unint64_t v23 = (uint64_t *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v24 = (uint64_t *)v17[2];
                BOOL v22 = *v24 == (void)v17;
                int v17 = v24;
              }
              while (!v22);
            }
            int v17 = v24;
            if (v24 == v12)
            {
              int v17 = (uint64_t *)(a1 + 96);
              break;
            }
          }
          if (v13 == v17)
          {
            int v17 = v13;
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v26 = v13;
            do
            {
              unint64_t v27 = v25;
              uint64_t v28 = (uint64_t *)v26[1];
              if (v28)
              {
                do
                {
                  uint64_t v29 = v28;
                  uint64_t v28 = (uint64_t *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  uint64_t v29 = (uint64_t *)v26[2];
                  BOOL v22 = *v29 == (void)v26;
                  uint64_t v26 = v29;
                }
                while (!v22);
              }
              ++v25;
              uint64_t v26 = v29;
            }
            while (v29 != v17);
            if (*((void *)&v51 + 1) <= v27)
            {
              if (v27 >= 0x249249249249249) {
                sub_10001A67C("get_next_capacity, allocator's max size reached");
              }
              uint64_t v30 = operator new(56 * v25);
              sub_1000B5A5C((uint64_t *)&v50, (uint64_t)v30, v25, (uint64_t)&v50[7 * v51], 0, 0);
            }
          }
        }
        while (v17 != v13)
        {
          uint64_t v31 = (uint64_t)v50;
          uint64_t v32 = v51;
          unint64_t v33 = &v50[7 * v51];
          if ((void)v51 == *((void *)&v51 + 1))
          {
            sub_1000B5C08((uint64_t *)&v50, (uint64_t)v33, 1, (uint64_t)(v13 + 7), v49);
          }
          else
          {
            void *v33 = v13[7];
            uint64_t v34 = v31 + 56 * v32;
            long long v35 = *((_OWORD *)v13 + 4);
            *(void *)(v34 + 24) = v13[10];
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 32) = *(_OWORD *)(v13 + 11);
            void v13[11] = 0;
            v13[12] = 0;
            *(void *)(v34 + 48) = v13[13];
            *(void *)&long long v51 = v51 + 1;
          }
          uint64_t v13 = sub_1000B5ED0((uint64_t **)(a1 + 88), v13);
        }
        std::mutex::unlock(v3);
        if ((void)v51)
        {
          uint64_t v36 = v50;
          int v37 = &v50[7 * v51];
          do
          {
            uint64_t v38 = *v36;
            uint64_t v39 = v36[6];
            v49[0] = v36[4];
            v49[1] = v39;
            sub_10002CF3C(v38, (uint64_t)v49);
            v36 += 7;
          }
          while (v36 != v37);
          uint64_t v40 = v51;
          if ((void)v51)
          {
            int v41 = (std::__shared_weak_count **)(v50 + 5);
            do
            {
              if (*v41) {
                sub_100004944(*v41);
              }
              v41 += 7;
              --v40;
            }
            while (v40);
          }
        }
        *(void *)&long long v51 = 0;
        std::mutex::lock(v3);
        *(void *)(a1 + 160) = v14;
        uint64_t v42 = *(void *)(a1 + 88);
        if ((uint64_t *)v42 == v12 || *(void *)(a1 + 112) == *(void *)(a1 + 144)) {
          break;
        }
        char v43 = *(unsigned char *)(v42 + 48);
        uint64_t v44 = *(void *)(v42 + 32);
        if ((v43 & 2) != 0) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = v44 + 1;
        }
        std::mutex::unlock(v3);
        if (v45 != v14) {
          goto LABEL_71;
        }
        sub_100022508(&v50);
      }
      std::mutex::unlock(v3);
LABEL_71:
      sub_100022508(&v50);
    }
  }
  return a1;
}

void sub_1000B370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::mutex::unlock(v24);
  sub_100022508(&a16);
  _Unwind_Resume(a1);
}

void *sub_1000B3770(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1000B37A4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_100004944(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
  {
    sub_100004944(v3);
  }
}

void sub_1000B37F4()
{
}

void sub_1000B3878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000D758((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000B388C(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) != TypeID)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFStringRef v13 = a1;
    unint64_t v14 = exception;
    CFGetTypeID(v13);
LABEL_18:
    uint64_t v15 = v14;
    goto LABEL_19;
  }
  int v7 = sub_100122ADC(a1);
  switch(v7)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }
  CFTypeID v8 = CFArrayGetTypeID();
  if (!a2) {
    return;
  }
  if (CFGetTypeID(a2) != v8)
  {
    unint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(a2);
    goto LABEL_18;
  }
  if (CFArrayGetCount((CFArrayRef)a2) < 1) {
    return;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  if (CFGetTypeID(ValueAtIndex) != v10) {
    goto LABEL_21;
  }
  ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Data");
  CFTypeID v11 = CFDataGetTypeID();
  if (!ValueAtIndex) {
    return;
  }
  if (CFGetTypeID(ValueAtIndex) != v11)
  {
LABEL_21:
    int v17 = __cxa_allocate_exception(0x40uLL);
    CFGetTypeID(ValueAtIndex);
    uint64_t v15 = v17;
LABEL_19:
    uint64_t v16 = sub_100009368(v15);
  }
  CFDictionaryAddValue(a3, a1, ValueAtIndex);
}

void sub_1000B3A64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000B3A84()
{
}

void sub_1000B3C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000B3C9C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 64;
  if (a3)
  {
    sub_1000B1CA4((uint64_t)v9, a1, v5, 3);
    if (!sub_1000B2494(v9, a2)) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_1000B19A4((uint64_t)v9, a1, v5);
    if (!sub_1000B2494(v9, a2))
    {
LABEL_6:
      uint64_t v6 = sub_1000B1680((uint64_t)v9);
      goto LABEL_7;
    }
  }
  uint64_t v6 = 0;
LABEL_7:
  sub_1000B4264((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  CFTypeID v8 = (void **)&v10;
  sub_1000B42C4(&v8);
  return v6;
}

void sub_1000B3D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000B1D08((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1000B3DAC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[5];
  uint64_t v4 = (void *)result[8];
  uint64_t v3 = (void *)result[9];
  if (v4 == v3)
  {
LABEL_9:
    int v8 = 0;
    int v9 = 1;
    uint64_t v4 = v3;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1) {
      break;
    }
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        int v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        int v7 = (void *)v4[2];
        BOOL v16 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v16);
    }
    result[8] = v7;
    uint64_t v4 = v7;
    if (v7 == v3) {
      goto LABEL_9;
    }
  }
  unint64_t v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10) {
      goto LABEL_20;
    }
  }
  else if (v10 >= v2)
  {
    goto LABEL_20;
  }
  if (v4[6])
  {
    if (v5 >= v2) {
      goto LABEL_18;
    }
LABEL_20:
    int v8 = 0;
    int v9 = 1;
    goto LABEL_21;
  }
  if (v2 >= v5) {
    goto LABEL_20;
  }
LABEL_18:
  int v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000) {
    goto LABEL_20;
  }
  int v9 = 0;
  int v8 = 1;
LABEL_21:
  unint64_t v12 = result[3];
  unint64_t v13 = v2;
  if (v2 < v12)
  {
    unint64_t v13 = v2;
    do
    {
      unint64_t v14 = v12;
      if (v4 == v3) {
        goto LABEL_27;
      }
      unint64_t v14 = v4[4];
      if ((v4[6] & 2) == 0) {
        ++v14;
      }
      if (v14 > v13)
      {
LABEL_27:
        if (v8) {
          break;
        }
      }
      else
      {
        if (v8)
        {
          int v15 = *((_DWORD *)v4 + 14);
          BOOL v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16) {
            break;
          }
        }
        if (v9)
        {
          int v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000) {
            break;
          }
        }
        uint64_t v18 = (void *)v4[1];
        unint64_t v19 = v4;
        if (v18)
        {
          do
          {
            unint64_t v20 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v20 = (void *)v19[2];
            BOOL v16 = *v20 == (void)v19;
            unint64_t v19 = v20;
          }
          while (!v16);
        }
        unint64_t v14 = (v4[6] & 1) + v4[5];
        result[8] = v20;
        uint64_t v4 = v20;
      }
      unint64_t v13 = v14;
    }
    while (v14 < v12);
  }
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}