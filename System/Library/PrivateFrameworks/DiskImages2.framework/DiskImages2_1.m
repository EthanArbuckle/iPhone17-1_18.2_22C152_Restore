uint64_t di_asif::details::table::get_map_entry_for_offset(di_asif::details::table *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *((void *)this + 1);
  di_asif::details::table_entry_map::table_entry_map(&v4, this, *(void *)(v2 + 48)+ (*(void *)(v2 + 48) + 1)* ((a2 / *(unsigned __int16 *)(v2 + 18) - *((void *)this + 44) / (unint64_t)*(unsigned __int16 *)(v2 + 18))/ (*(void *)(v2 + 48)* (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t di_asif::details::map_entry_iterator_t::operator*(uint64_t a1)
{
  return a1 + 16;
}

uint64_t di_asif::details::map_entry_iterator_t::operator++(uint64_t a1)
{
  v2 = *(di_asif::details::table **)a1;
  uint64_t v3 = *((void *)v2 + 1);
  unint64_t v4 = *(void *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
     * (unint64_t)(*(_DWORD *)(v3 + 20) / *(unsigned __int16 *)(v3 + 18))
     * *(void *)(v3 + 48);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *((void *)v2 + 44) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t map_entry_for_offset = di_asif::details::table::get_map_entry_for_offset(v2, v4);
    unint64_t v6 = map_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = map_entry_for_offset;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t di_asif::details::map_entry_iterator_t::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return di_asif::details::map_entry_iterator_t::operator++(a1);
}

uint64_t di_asif::details::table::get_data_entry_for_offset(di_asif::details::table *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 18);
  di_asif::details::table_entry_data::table_entry_data(&v5, this, ((a2 / v3 - *((void *)this + 44) / v3) / (*(_DWORD *)(v2 + 20) / v3)+ (a2 / v3 - *((void *)this + 44) / v3) / (*(_DWORD *)(v2 + 20) / v3) * *(void *)(v2 + 48))/ *(void *)(v2 + 48));
  return v5;
}

uint64_t di_asif::details::data_entry_iterator_t::operator++(uint64_t a1)
{
  uint64_t v2 = *(di_asif::details::table **)a1;
  uint64_t v3 = *((void *)v2 + 1);
  unint64_t v4 = *(void *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(void *)(a1 + 8) = v4;
  if (v4 >= *((void *)v2 + 44) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset(v2, v4);
    unint64_t v6 = data_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = data_entry_for_offset;
    int v8 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(unsigned char *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t di_asif::details::data_entry_iterator_t::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return di_asif::details::data_entry_iterator_t::operator++(a1);
}

void di_asif::details::table::table(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  di_utils::fixed_vector_t<di_asif::details::table_entry>::fixed_vector_t((uint64_t *)(a1 + 16), *(void *)(a2 + 56), a6);
  std::vector<ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>>::vector((void *)(a1 + 72), *(void *)(a2 + 64));
  *(void *)(a1 + 104) = 850045863;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 168) = 850045863;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 280) = 850045863;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a4;
  *(void *)(a1 + 352) = a5;
  unint64_t v10 = *(unsigned int *)(a2 + 20);
  if (a4)
  {
    if (a4 % v10)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      v12 = std::generic_category();
      exception[1] = 4294967274;
      exception[2] = v12;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: table is not aligned to chunk size";
    }
  }
  operator new[]();
}

void sub_21E2F378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MEMORY[0x223C24980](v16, 0x1000C8077774924);
  std::mutex::~mutex(v15);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v13[2].__m_.__sig);
  std::mutex::~mutex(v14);
  std::mutex::~mutex(v13);
  v18 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 80) = v18;
    operator delete(v18);
  }
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](a10, 0);
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100]((void *)(v10 + 24));
  _Unwind_Resume(a1);
}

void di_asif::details::table::load()
{
}

void sub_21E2F3A10(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void di_asif::details::table::return_chunk(di_asif::details::table *this, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v3 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
    std::deque<unsigned long long>::emplace_back<unsigned long long &>((void *)this + 29, &v4);
    atomic_store(1u, (unsigned int *)this + 24);
    std::mutex::unlock(v3);
  }
}

void sub_21E2F3AA8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long long>::emplace_back<unsigned long long &>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<unsigned long long>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096;
  }
  return v14 - 8;
}

uint64_t di_asif::details::table::update_entry_if_bits_in_same_state(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_data *a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8));
  if (v3 >> 62 != 3) {
    return 0;
  }
  ref::ref_cnt::take_exclusive(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1), 0, (uint64_t)v36);
  if (!v36[16])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    v34 = std::generic_category();
    exception[1] = 4294967291;
    exception[2] = v34;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't take exclusive lock on entry";
  }
  unint64_t v7 = atomic_load((unint64_t *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8));
  if (v7 >> 62 == 3)
  {
    uint64_t v8 = *(void *)(*(void *)a3 + 8);
    di_asif::details::table::get_bitmap(this, a2, (*(void *)(*(void *)a3 + 352)+ (*(void *)(v8 + 48) + *(void *)(v8 + 48) * *((void *)a3 + 1))/ (unint64_t)(*(void *)(v8 + 48) + 1)* *(unsigned int *)(v8 + 20))/ *(unsigned __int16 *)(v8 + 18), 0, (unint64_t *)&v35);
    if (v35 && !v35[344])
    {
      if (v35[224]) {
        uint64_t v14 = (di_asif::details::map_element *)(v35 + 40);
      }
      else {
        uint64_t v14 = 0;
      }
      unsigned int bitmap_range = di_asif::details::table_entry_data::get_bitmap_range(a3);
      uint64_t block_bits = di_asif::details::map_element::get_block_bits(v14, bitmap_range);
      uint64_t v17 = *(void *)(*(void *)a3 + 8);
      uint64_t v18 = *(void *)(v17 + 48);
      uint64_t v19 = *(unsigned int *)(v17 + 20);
      if (v35)
      {
        if (v35[224]) {
          v21 = v35 + 40;
        }
        else {
          v21 = 0;
        }
      }
      else
      {
        v21 = 0;
      }
      unint64_t v20 = *(void *)(*(void *)a3 + 352) + (v18 + v18 * *((void *)a3 + 1)) / (unint64_t)(v18 + 1) * v19;
      if (di_asif::details::map_element::search_for_pattern(v21, this, block_bits, v20, v20 + v19, 0) == v20 + v19)
      {
        v22 = (atomic_ullong *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8);
        uint64_t v23 = *v22 & 0x7FFFFFFFFFFFFFLL;
        uint64_t v24 = *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20);
        BOOL v10 = block_bits == 2;
        atomic_ullong v26 = *v22;
        atomic_ullong v25 = *v22;
        atomic_compare_exchange_strong(v22, (unint64_t *)&v26, (block_bits << 62) | v26 & 0x3FFFFFFFFFFFFFFFLL);
        if (v26 != v25)
        {
          atomic_ullong v27 = v26;
          do
          {
            atomic_compare_exchange_strong(v22, (unint64_t *)&v27, v26 & 0x3FFFFFFFFFFFFFFFLL | (block_bits << 62));
            BOOL v28 = v27 == v26;
            atomic_ullong v26 = v27;
          }
          while (!v28);
        }
        uint64_t v11 = v23 * v24;
        if (block_bits != 1)
        {
          v29 = (atomic_ullong *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8);
          if (*(_DWORD *)(*(void *)(*(void *)a3 + 8) + 20))
          {
            atomic_fetch_and_explicit(v29, 0xFF80000000000000, memory_order_relaxed);
          }
          else
          {
            atomic_ullong v30 = *v29;
            atomic_ullong v31 = *v29;
            atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v31, *v29 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
            if (v31 != v30)
            {
              atomic_ullong v32 = v31;
              do
              {
                atomic_compare_exchange_strong_explicit(v29, (unint64_t *)&v32, v31 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
                BOOL v28 = v32 == v31;
                atomic_ullong v31 = v32;
              }
              while (!v28);
            }
          }
        }
        int v12 = 0;
        uint64_t v9 = 1;
        atomic_store(1u, (unsigned int *)this + 24);
      }
      else
      {
        int v12 = 0;
        uint64_t v9 = 0;
        BOOL v10 = 0;
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 0;
      uint64_t v11 = 0;
      int v12 = 1;
    }
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v35);
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    int v12 = 1;
  }
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v36);
  if (v12) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v9;
  }
  if (!v12 && v10)
  {
    di_asif::details::table::return_chunk(this, v11);
    return v9;
  }
  return result;
}

void sub_21E2F3EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)va);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)va1);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::table_entry_data::get_flags(di_asif::details::table_entry_data *this)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8));
  return v1 >> 62;
}

void di_asif::details::table::get_bitmap(di_asif::details::table *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v10 = (a3 - *((void *)this + 44) / (unint64_t)*(unsigned __int16 *)(*((void *)this + 1) + 18))
      / (*(void *)(*((void *)this + 1) + 48)
       * (unint64_t)(*(_DWORD *)(*((void *)this + 1) + 20)
                          / *(unsigned __int16 *)(*((void *)this + 1) + 18)));
  unint64_t v11 = di_asif::details::table::bitmap_idx_to_tag(this, v10);
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((void *)this + 9) + 8 * v10), v11, a5);
  if (!*a5 || *(unsigned char *)(*a5 + 344))
  {
    uint64_t v12 = *((void *)this + 1);
    uint64_t v26 = *(void *)(v12 + 48)
        + (*(void *)(v12 + 48) + 1)
        * ((a3 - *((void *)this + 44) / (unint64_t)*(unsigned __int16 *)(v12 + 18))
         / (*(void *)(v12 + 48)
          * (unint64_t)(*(_DWORD *)(v12 + 20) / *(unsigned __int16 *)(v12 + 18))));
    di_asif::details::table_entry_map::table_entry_map(&v23, this, v26);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    if (a4)
    {
      LOBYTE(v23) = 0;
      char v25 = 0;
    }
    else
    {
      v15 = (ref::ref_cnt *)(*(void *)(v23 + 56) + 16 * v24);
      BOOL v16 = ref::ref_cnt::get(v15);
      v21[0] = (uint64_t)&unk_26CF39AF0;
      v21[1] = (uint64_t)v15;
      BOOL v22 = v16;
      ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)&v23, (uint64_t)v21);
      char v25 = 1;
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v21);
    }
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 32))(v21);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((atomic_ullong *)a5, v21);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v21);
    if (*a5)
    {
      if (!*(unsigned char *)(*a5 + 344))
      {
        if (!*a5 || (unsigned int v17 = atomic_load((unsigned int *)(*a5 + 24)), v17 != 2))
        {
          unint64_t v18 = atomic_load(a5);
          v21[0] = v18;
          atomic_store(atomic_exchange(v21, 0), (unint64_t *)(*((void *)this + 9) + 8 * v10));
          v21[0] = 0;
          v21[0] = (*(void *)(*(void *)(v13 + 56) + 16 * v14 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(void *)(v13 + 8) + 20);
          if (v21[0])
          {
            ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>((uint64_t *)a5, a2, this, (unint64_t *)&v26, v21);
          }
          else
          {
            uint64_t space = di_asif::details::dir_base::allocate_space(*((atomic_ullong **)this + 1), a2, 1);
            char v19 = 1;
            ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>((uint64_t *)a5, a2, this, (unint64_t *)&v26, &space, &v19);
          }
        }
      }
    }
    if (v25) {
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v23);
    }
  }
}

void sub_21E2F417C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&a14);
  }
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(v17);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::table_entry_data::get_start_block(di_asif::details::table_entry_data *this)
{
  uint64_t v1 = *(void *)(*(void *)this + 8);
  return (*(void *)(*(void *)this + 352)
        + (*(void *)(v1 + 48) + *(void *)(v1 + 48) * *((void *)this + 1))
        / (unint64_t)(*(void *)(v1 + 48) + 1)
        * *(unsigned int *)(v1 + 20))
       / *(unsigned __int16 *)(v1 + 18);
}

uint64_t di_asif::details::map_element::get_block_bits(di_asif::details::map_element *this, unint64_t a2)
{
  atomic_ullong v3 = (di_asif::details::map_element *)((char *)this + 32);
  unsigned int bit = lock_free::bitmap_t::get_bit((di_asif::details::map_element *)((char *)this + 32), a2);
  if (lock_free::bitmap_t::get_bit(v3, a2 + 1)) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  uint64_t result = v5 | bit;
  if (result == 3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "bitmap flag value invalid", 0xFFFFFFEA);
  }
  return result;
}

unint64_t di_asif::details::table_entry_data::get_bitmap_range(di_asif::details::table_entry_data *this)
{
  unint64_t v1 = *(void *)(*(void *)this + 352);
  uint64_t v2 = *(void *)(*(void *)this + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  unint64_t v5 = (v3 + v3 * *((void *)this + 1)) / (unint64_t)(v3 + 1) * v4;
  unint64_t v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000;
}

unint64_t di_asif::details::table_entry_data::get_logical_offset(di_asif::details::table_entry_data *this)
{
  return *(void *)(*(void *)this + 352)
       + (*(void *)(*(void *)(*(void *)this + 8) + 48)
        + *(void *)(*(void *)(*(void *)this + 8) + 48) * *((void *)this + 1))
       / (unint64_t)(*(void *)(*(void *)(*(void *)this + 8) + 48) + 1)
       * *(unsigned int *)(*(void *)(*(void *)this + 8) + 20);
}

unint64_t di_asif::details::map_element::search_for_pattern_match(void *a1, di_asif::details::table *a2, char a3, unint64_t a4, uint64_t a5)
{
  return di_asif::details::map_element::search_for_pattern(a1, a2, a3, a4, a5, 0);
}

void *di_asif::details::table_entry_obj::set_offset(void *this, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)(*this + 8) + 20);
  uint64_t v3 = (atomic_ullong *)(*(void *)(*this + 56) + 16 * this[1] + 8);
  if (v2 <= a2)
  {
    unint64_t v4 = a2 / v2;
    atomic_ullong v5 = *v3;
    atomic_ullong v6 = *v3;
    atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v6, *v3 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5)
    {
      atomic_ullong v7 = v6;
      do
      {
        atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v7, v6 & 0xFF80000000000000 | v4, memory_order_relaxed, memory_order_relaxed);
        BOOL v8 = v7 == v6;
        atomic_ullong v6 = v7;
      }
      while (!v8);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v3, 0xFF80000000000000, memory_order_relaxed);
  }
  return this;
}

unint64_t di_asif::details::table::bitmap_idx_to_tag(di_asif::details::table *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *(void *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    char v4 = 0;
    unint64_t v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }
    while (v5 != 1);
    unint64_t v3 = 1 << v4;
  }
  unint64_t v6 = *(void *)(v2 + 80);
  if (v3 == 1)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }
    while (v3 != 1);
  }
  return ((*((void *)this + 44) / v6) << v7) | a2;
}

unint64_t *ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    unint64_t v6 = (unint64_t *)atomic_load(result);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 344))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

atomic_ullong *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

uint64_t ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(uint64_t *a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5)
{
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(*a1, a2, a3, a4, a5);
}

void sub_21E2F4520(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E2F4548(_Unwind_Exception *a1)
{
}

uint64_t di_asif::details::dir_base::allocate_space(atomic_ullong *this, di_asif::details::ContextASIF *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  atomic_fetch_add(this + 1, 1uLL);
  uint64_t v6 = (*(uint64_t (**)(atomic_ullong *))(*this + 16))(this);
  if (a3)
  {
    uint64_t v7 = *((unsigned int *)this + 5);
    v10[0] = &unk_26CF35248;
    v10[1] = a2;
    v10[2] = v7;
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v8 = space_allocators::FixedSize::allocate(v6, (uint64_t)v10);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](v10);
  return v8;
}

void sub_21E2F4644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(uint64_t *a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(*a1, a2, a3, a4, a5, a6);
}

void sub_21E2F4684(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 288)) {
      std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(v2 + 264, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E2F46AC(_Unwind_Exception *a1)
{
}

uint64_t di_asif::details::table::allocate_backend_space_for_entry(uint64_t a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(*(void *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(a3 + 8) + 20))
  {
    return 0;
  }
  unint64_t space = di_asif::details::dir_base::allocate_space(*(atomic_ullong **)(a1 + 8), a2, 0);
  if (space)
  {
    uint64_t v9 = *(void *)(a3 + 56) + 16 * a4;
    uint64_t v10 = *(void *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) != 0)
    {
LABEL_7:
      di_asif::details::dir_base::insert_space(*(atomic_ullong **)(a1 + 8), space, a2);
    }
    else
    {
      unint64_t v11 = (atomic_ullong *)(v9 + 8);
      uint64_t v12 = v10;
      unint64_t v13 = space / *(unsigned int *)(*(void *)(a3 + 8) + 20);
      while (1)
      {
        atomic_compare_exchange_strong_explicit(v11, (unint64_t *)&v12, v10 & 0xFF80000000000000 | v13, memory_order_relaxed, memory_order_relaxed);
        if (v12 == v10) {
          break;
        }
        uint64_t v10 = v12;
        if ((v12 & 0x7FFFFFFFFFFFFFLL) != 0) {
          goto LABEL_7;
        }
      }
    }
    return 0;
  }
  return 4294967268;
}

void *di_asif::details::dir_base::insert_space(atomic_ullong *this, uint64_t a2, di_asif::details::ContextASIF *a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(atomic_ullong *))(*this + 16))(this);
  v8[0] = &unk_26CF352D8;
  v8[1] = a3;
  v8[3] = v8;
  space_allocators::FixedSize::insert(v6, a2, (uint64_t)v8);
  uint64_t result = std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](v8);
  atomic_fetch_add(this + 1, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void sub_21E2F4854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void di_asif::details::table::set_entry_bitmap_range(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_data *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*(void *)a3 + 8);
  di_asif::details::table::get_bitmap((di_asif::details::table *)a1, a2, (*(void *)(*(void *)a3 + 352)+ (*(void *)(v11 + 48) + *(void *)(v11 + 48) * *((void *)a3 + 1))/ (unint64_t)(*(void *)(v11 + 48) + 1)* *(unsigned int *)(v11 + 20))/ *(unsigned __int16 *)(v11 + 18), 0, (unint64_t *)&v29);
  if (!(void)v29 || *(unsigned char *)(v29 + 344))
  {
    *(void *)&long long v33 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((void *)&v33 + 1) = 47;
    int v34 = 16;
    di_log::logger<di_log::log_printer<436ul>>::logger(&bitmap_range, &v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Can't load bitmap while setting range", 37);
    di_log::logger<di_log::log_printer<436ul>>::~logger((uint64_t)&bitmap_range);
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v26 = std::generic_category();
    exception[1] = 5;
    exception[2] = v26;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }
  BOOL v12 = (a6 & 0xFF00000000) == 0 || a6 == 3;
  char v13 = v12;
  if (!v12)
  {
    if (*(unsigned char *)(v29 + 224)) {
      uint64_t v14 = v29 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t bitmap_range = di_asif::details::table_entry_data::get_bitmap_range(a3);
    di_asif::details::map_element::set_range(v14, (di_asif::details::table *)a1, (unsigned int *)&bitmap_range, a6);
  }
  if ((void)v29)
  {
    if (*(unsigned char *)(v29 + 224)) {
      uint64_t v15 = v29 + 40;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  di_asif::details::map_element::set_range(v15, (di_asif::details::table *)a1, a4, a5);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v29);
  if ((v13 & 1) == 0)
  {
    uint64_t v16 = *(void *)(*(void *)a3 + 8);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = *(void *)(v17 + 48);
    di_asif::details::table_entry_map::table_entry_map(&bitmap_range, (di_asif::details::table *)a1, v18+ (v18 + 1)* (((*(void *)(*(void *)a3 + 352)+ (*(void *)(v16 + 48) + *(void *)(v16 + 48) * *((void *)a3 + 1))/ (unint64_t)(*(void *)(v16 + 48) + 1)* *(unsigned int *)(v16 + 20))/ *(unsigned __int16 *)(v16 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v17 + 18))/ (v18* (unint64_t)(*(_DWORD *)(v17 + 20) / *(unsigned __int16 *)(v17 + 18)))));
    unint64_t v31 = bitmap_range;
    uint64_t v32 = v36;
    char v19 = (ref::ref_cnt *)(*(void *)(bitmap_range + 56) + 16 * v36);
    BOOL v20 = ref::ref_cnt::get(v19);
    *(void *)&long long v33 = &unk_26CF39AF0;
    *((void *)&v33 + 1) = v19;
    LOBYTE(v34) = v20;
    if (!v20)
    {
      *(void *)&long long v29 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
      *((void *)&v29 + 1) = 47;
      int v30 = 16;
      di_log::logger<di_log::log_printer<450ul>>::logger(&bitmap_range, &v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Couldn't lock entry ", 20);
      std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<450ul>>,di_asif::details::table_entry_map,0>((uint64_t)&bitmap_range);
      di_log::logger<di_log::log_printer<450ul>>::~logger((uint64_t)&bitmap_range);
      atomic_ullong v27 = __cxa_allocate_exception(0x40uLL);
      *atomic_ullong v27 = &unk_26CF39EE0;
      BOOL v28 = std::generic_category();
      v27[1] = 4294967282;
      v27[2] = v28;
      *((unsigned char *)v27 + 24) = 0;
      *((unsigned char *)v27 + 48) = 0;
      v27[7] = "Couldn't lock entry";
    }
    v21 = (atomic_ullong *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8);
    atomic_ullong v22 = *v21;
    atomic_ullong v23 = *v21;
    atomic_compare_exchange_strong(v21, (unint64_t *)&v23, *v21 | 0xC000000000000000);
    if (v23 != v22)
    {
      atomic_ullong v24 = v23;
      do
      {
        atomic_compare_exchange_strong(v21, (unint64_t *)&v24, v23 | 0xC000000000000000);
        BOOL v12 = v24 == v23;
        atomic_ullong v23 = v24;
      }
      while (!v12);
    }
    atomic_store(1u, (unsigned int *)(a1 + 96));
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v33);
  }
}

void sub_21E2F4BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<436ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<436ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35360;
  a1[45] = &unk_26CF35460;
  a1[46] = &unk_26CF35488;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35360;
  a1[45] = &unk_26CF353E8;
  a1[46] = &unk_26CF35410;
  return a1;
}

void sub_21E2F4D50(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_asif::details::map_element::set_range(uint64_t a1, di_asif::details::table *a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  LOWORD(v9[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  uint64_t result = (void *)lock_free::bitmap_t::update_pair_bits(a1 + 32, v6, v7, (unsigned __int8 *)v9);
  if (result)
  {
    *(unsigned char *)(a1 + 113) = 1;
    uint64_t result = di_asif::details::table_entry_map::table_entry_map(v9, a2, *(void *)a1);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v9[0] + 56) + 16 * v9[1] + 8), 0x8000000000000000);
  }
  return result;
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<450ul>>,di_asif::details::table_entry_map,0>(uint64_t a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 360), (uint64_t)"table entry map@", 16);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" = offset = ", 12);
  std::ostream::operator<<();
  return a1;
}

void *di_log::logger<di_log::log_printer<450ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<450ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35580;
  a1[45] = &unk_26CF35680;
  a1[46] = &unk_26CF356A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35580;
  a1[45] = &unk_26CF35608;
  a1[46] = &unk_26CF35630;
  return a1;
}

void sub_21E2F4FD0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_asif::details::table::update_map_entry(di_asif::details::table *this, uint64_t a2, unint64_t a3)
{
  uint64_t result = di_asif::details::table_entry_map::table_entry_map(v13, this, a2);
  unint64_t v6 = *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
  unint64_t v7 = (atomic_ullong *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8);
  if (v6 <= a3)
  {
    unint64_t v8 = a3 / v6;
    atomic_ullong v9 = *v7;
    atomic_ullong v10 = *v7;
    atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v10, *v7 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
    if (v10 != v9)
    {
      atomic_ullong v11 = v10;
      do
      {
        atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v11, v10 & 0xFF80000000000000 | v8, memory_order_relaxed, memory_order_relaxed);
        BOOL v12 = v11 == v10;
        atomic_ullong v10 = v11;
      }
      while (!v12);
    }
  }
  else
  {
    atomic_fetch_and_explicit(v7, 0xFF80000000000000, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)this + 24);
  return result;
}

__n128 di_asif::details::table::make_unmap_iterators@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)v15, a1, a2, a3, a4, a5, a6, 0);
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)(a7 + 80), a1, a2, a3, a4, a6, a6, 0);
  long long v13 = v15[3];
  *(_OWORD *)(a7 + 32) = v15[2];
  *(_OWORD *)(a7 + 48) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void di_asif::details::dir::defrag(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  v15[0] = &unk_26CF2F358;
  v15[1] = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v16);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_41;
  }
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(unsigned char *)(a1 + 16) && !*(unsigned char *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(unsigned char *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0;
          goto LABEL_18;
        }
        if (v6.__d_.__rep_ < 1)
        {
          if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_17;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }
LABEL_17:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }
        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }
LABEL_22:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }
    *(unsigned char *)(a1 + 3672) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v9 = 0;
      int v10 = 0;
      do
      {
        if (*(unsigned char *)(a1 + 16)) {
          break;
        }
        v10 |= di_asif::details::dir::defrag_table((di_asif::details::dir *)a1, (di_asif::details::ContextASIF *)v15, v9) == 0;
        di_asif::details::dir::get_table((di_asif::details::dir *)a1, (di_asif::details::ContextASIF *)v15, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            atomic_ullong v11 = (di_asif::details::table *)&__lk.__m_->__m_.__opaque[32];
          }
          else {
            atomic_ullong v11 = 0;
          }
          v10 |= di_asif::details::table::defrag(v11, (di_asif::details::ContextASIF *)v15);
        }
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&__lk);
        ++v9;
      }
      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if (v10)
      {
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0)) {
          DiskImage::Context::terminate_di((DiskImage::Context *)v15);
        }
        uint64_t v12 = *(void *)(a2 + 24);
        if (!v12) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v15);
      }
    }
  }
  while (!*(unsigned char *)(a1 + 16));
LABEL_41:
  v15[0] = &unk_26CF2F358;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_21E2F5520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  di_log::logger<di_log::log_printer<547ul>>::~logger((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x21E2F5550);
}

void sub_21E2F554C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 120) = a12;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 96);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t di_asif::details::dir_base::create_context@<X0>(di_asif::details::dir_base *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  *a2 = &unk_26CF2F358;
  a2[1] = v2;
  return (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 72))(*(void *)(v2 + 16));
}

uint64_t di_asif::details::dir::defrag_table(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = atomic_load((unint64_t *)this + 1);
  uint64_t v4 = *((unsigned int *)this + 5);
  uint64_t v5 = *(void *)(*((void *)this + 19) + 8 * a3) * v4;
  uint64_t v22 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    unint64_t v9 = (unint64_t *)(*((void *)this + 16) + 8 * a3);
    ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v9, a3, (unint64_t *)&v21);
    if (v21 && !*(unsigned char *)(v21 + 520))
    {
      if (*(void *)(v21 + 464)) {
        std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(v21 + 440, v21);
      }
      ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v9, a3, (unint64_t *)&v23);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v21, (atomic_ullong *)&v23);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v23);
      if (v21)
      {
        if (!*(unsigned char *)(v21 + 520)) {
          goto LABEL_15;
        }
      }
    }
    ref::Allocator<di_asif::details::table,unsigned long long>::allocate((uint64_t)this + 280, (ref::details **)a3, 1, (unint64_t *)&v23);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v21, (atomic_ullong *)&v23);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v23);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 520))
      {
        unsigned int v12 = atomic_load((unsigned int *)(v21 + 24));
        if (v12 != 2)
        {
          long long v13 = (char *)malloc_type_valloc(*((unsigned int *)this + 5), 0xF8ED6DDuLL);
          if (!v13)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            BOOL v20 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v20, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
          }
          v25[0] = &unk_26CF359B8;
          v25[3] = v25;
          atomic_ullong v23 = v13;
          std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v25);
          std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v25);
          unint64_t v14 = *((unsigned int *)this + 5);
          uint64_t v15 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40))(*((void *)a2 + 2));
          if (v15 - v22 >= v14) {
            uint64_t v16 = v14;
          }
          else {
            uint64_t v16 = v15 - v22;
          }
          uint64_t v10 = di_asif::details::dir_base::move_realloc_chunk((atomic_ullong *)this, a2, v23, v16, v22);
          uint64_t v18 = v17;
          if (v21 && *(void *)(v21 + 464)) {
            std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(v21 + 440, v21);
          }
          if ((v10 & 0x8000000000000000) == 0)
          {
            (*(void (**)(di_asif::details::dir *, uint64_t, uint64_t))(*(void *)this + 40))(this, *((void *)this + 10) * a3, v18);
            std::mutex::lock((std::mutex *)((char *)this + 3792));
            std::deque<unsigned long long>::emplace_back<unsigned long long &>((void *)this + 468, &v22);
            atomic_store(1u, (unsigned int *)this + 898);
            std::mutex::unlock((std::mutex *)((char *)this + 3792));
            uint64_t v10 = 0;
          }
          std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v23, 0);
          std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v24);
          goto LABEL_17;
        }
      }
    }
    if (v21 && !*(unsigned char *)(v21 + 520)) {
LABEL_15:
    }
      (*(void (**)(di_asif::details::dir *))(*(void *)this + 24))(this);
    uint64_t v10 = 4294967248;
LABEL_17:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v21);
    return v10;
  }
  return 4294967274;
}

void sub_21E2F58F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex::unlock(v11);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](&a11, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v12);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

void *di_asif::details::dir::get_table@<X0>(di_asif::details::dir *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  __n128 result = ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag((unint64_t *)(*((void *)this + 16) + 8 * a3), a3, a6);
  if (!*a6 || *(unsigned char *)(*a6 + 520))
  {
    di_asif::details::dir::load_create_table((atomic_ullong *)this, a2, (ref::details **)a3, *(void *)(*((void *)this + 19) + 8 * a3) * *((unsigned int *)this + 5), a4, a5, (atomic_ullong *)&v14);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((atomic_ullong *)a6, (atomic_ullong *)&v14);
    __n128 result = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v14);
    if (*a6)
    {
      if (!*(unsigned char *)(*a6 + 520))
      {
        unint64_t v13 = atomic_load(a6);
        unint64_t v14 = v13;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), (unint64_t *)(*((void *)this + 16) + 8 * a3));
      }
    }
  }
  return result;
}

void sub_21E2F5A50(_Unwind_Exception *a1)
{
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(v1);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::defrag(di_asif::details::table *this, di_asif::details::ContextASIF *a2)
{
  v21[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = atomic_load((unint64_t *)(*((void *)this + 1) + 8));
  size_t v5 = *(unsigned int *)(*((void *)this + 1) + 20);
  std::chrono::system_clock::time_point v6 = (char *)malloc_type_valloc(v5, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v18[0] = &unk_26CF359B8;
  v19[1] = v18;
  BOOL v20 = v6;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v18);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v18);
  di_asif::details::table::make_map_entry_iterators(this, v7, (uint64_t)v18);
  char v8 = 0;
  uint64_t v9 = v4 * v5;
  while ((v18[0] != v19[3] || v18[1] != v19[4]) && !*(unsigned char *)(*((void *)this + 1) + 16))
  {
    int v10 = di_asif::details::table::defrag_map_entry(this, a2, (di_asif::details::table_entry_map *)v19, v9, v20);
    di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)v19, (uint64_t)v16);
    for (BOOL i = v10 == 0; ; BOOL i = v12 != 0)
    {
      v8 |= i;
      if (v16[0] == v17[3] && v16[1] == v17[4]) {
        break;
      }
      if (*(unsigned char *)(*((void *)this + 1) + 16)) {
        break;
      }
      int v12 = di_asif::details::table::defrag_entry(this, a2, (di_asif::details::table_entry_obj *)v17, v9, v20);
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v16);
    }
    di_asif::details::map_entry_iterator_t::operator++((uint64_t)v18);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v20, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v21);
  return v8 & 1;
}

void sub_21E2F5C7C(_Unwind_Exception *a1)
{
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<547ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<547ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF357A0;
  a1[45] = &unk_26CF358A0;
  a1[46] = &unk_26CF358C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF357A0;
  a1[45] = &unk_26CF35828;
  a1[46] = &unk_26CF35850;
  return a1;
}

void sub_21E2F5DB0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  return a1;
}

void di_asif::details::dir::async_defrag(di_asif::details::dir *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 3680);
  std::mutex::lock((std::mutex *)((char *)this + 3680));
  *((unsigned char *)this + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 3624));
  std::mutex::unlock(v2);
}

uint64_t di_asif::details::table::defrag_entry(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_obj *a3, uint64_t a4, char *a5)
{
  uint64_t v5 = *((void *)a3 + 1);
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v9 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v9)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    atomic_compare_exchange_strong(v9, (unint64_t *)&v13, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v10 = v13 == 0;
  }
  v15[1] = v9;
  BOOL v16 = v10;
  v15[0] = &unk_26CF39B10;
  uint64_t v17 = 0;
  if (v10)
  {
    uint64_t v14 = (*(void *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
        * *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20);
    uint64_t v11 = di_asif::details::table::defrag_entry_locked(this, a2, a3, v14, a5);
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v15);
    if ((v11 & 0x80000000) == 0)
    {
      atomic_store(1u, (unsigned int *)this + 24);
      di_asif::details::table::return_chunk(this, v14);
    }
  }
  else
  {
    (*(void (**)(void, di_asif::details::ContextASIF *))(**((void **)this + 1) + 24))(*((void *)this + 1), a2);
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v15);
    return 4294967282;
  }
  return v11;
}

void sub_21E2F5FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t di_asif::details::table::defrag_entry_locked(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_obj *a3, uint64_t a4, char *a5)
{
  if (!a4) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(*((void *)this + 1) + 20);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40))(*((void *)a2 + 2));
  if (v11 - a4 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11 - a4;
  }
  uint64_t result = di_asif::details::dir_base::move_realloc_chunk(*((atomic_ullong **)this + 1), a2, a5, v12, a4);
  if ((result & 0x8000000000000000) == 0)
  {
    di_asif::details::table_entry_obj::set_offset(a3, v14);
    return 0;
  }
  return result;
}

uint64_t di_asif::details::dir_base::move_realloc_chunk(atomic_ullong *this, di_asif::details::ContextASIF *a2, char *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  atomic_ullong v23 = a3;
  atomic_ullong v24 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  char v28 = 0;
  int v11 = (*(uint64_t (**)(void, char **))(**((void **)a2 + 2) + 88))(*((void *)a2 + 2), &v23);
  if (v11 != a4)
  {
    *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((void *)&v18 + 1) = 46;
    int v19 = 16;
    di_log::logger<di_log::log_printer<2061ul>>::logger(v20, &v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Can't read for defrag", 21);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf((uint64_t)v20);
    MEMORY[0x223C24910](v22);
    if (v11 < 0) {
      int v16 = v11;
    }
    else {
      int v16 = -5;
    }
    goto LABEL_16;
  }
  uint64_t space = di_asif::details::dir_base::allocate_space(this, a2, 0);
  if (space)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = v24;
    atomic_ullong v23 = a3;
    atomic_ullong v24 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    uint64_t v25 = a4;
    uint64_t v26 = space;
    uint64_t v27 = a4;
    char v28 = 0;
    int v15 = (*(uint64_t (**)(void, char **))(**((void **)a2 + 2) + 80))(*((void *)a2 + 2), &v23);
    if (v15 != a4)
    {
      *(void *)&long long v18 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
      *((void *)&v18 + 1) = 46;
      int v19 = 16;
      di_log::logger<di_log::log_printer<2071ul>>::logger(v20, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Can't write table for defrag", 28);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf((uint64_t)v20);
      MEMORY[0x223C24910](v22);
      di_asif::details::dir_base::insert_space(this, space, a2);
      if (v15 < 0) {
        int v16 = v15;
      }
      else {
        int v16 = -5;
      }
LABEL_16:
      a4 = -(uint64_t)-v16;
    }
  }
  else
  {
    a4 = -28;
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return a4;
}

void sub_21E2F62D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<2071ul>>::~logger((uint64_t)va);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 - 88);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::defrag_map_entry(di_asif::details::table *this, di_asif::details::ContextASIF *a2, di_asif::details::table_entry_map *a3, uint64_t a4, char *a5)
{
  uint64_t v5 = *((void *)a3 + 1);
  uint64_t v6 = *(void *)(*(void *)a3 + 56);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20);
  if (!v7 || 3 * v7 <= (unint64_t)(4 * a4)) {
    return 4294967274;
  }
  uint64_t v12 = (atomic_ullong *)(v6 + 16 * v5);
  if (*v12)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    atomic_compare_exchange_strong(v12, (unint64_t *)&v14, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v13 = v14 == 0;
  }
  v25[1] = v12;
  BOOL v26 = v13;
  v25[0] = &unk_26CF39B10;
  uint64_t v27 = 0;
  if (!v13)
  {
    (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v25);
    return 4294967274;
  }
  uint64_t v15 = *((void *)this + 1);
  unint64_t v16 = *(unsigned __int16 *)(v15 + 18);
  unint64_t v17 = ((*(void *)(*(void *)a3 + 352)
        + *((void *)a3 + 1)
        / (unint64_t)(*(void *)(*(void *)(*(void *)a3 + 8) + 48) + 1)
        * *(void *)(*(void *)(*(void *)a3 + 8) + 48)
        * *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20))
       / v16
       - *((void *)this + 44) / v16)
      / (*(void *)(v15 + 48)
       * (unint64_t)(*(_DWORD *)(v15 + 20) / v16));
  unint64_t v18 = di_asif::details::table::bitmap_idx_to_tag(this, v17);
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((void *)this + 9) + 8 * v17), v18, (unint64_t *)&v24);
  if (!v24 || *(unsigned char *)(v24 + 344)) {
    goto LABEL_9;
  }
  if (*(void *)(v24 + 288)) {
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(v24 + 264, v24);
  }
  ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>::lock_if_tag((unint64_t *)(*((void *)this + 9) + 8 * v17), v18, &v23);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v24, (atomic_ullong *)&v23);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v23);
  if (!v24 || *(unsigned char *)(v24 + 344))
  {
LABEL_9:
    (*(void (**)(unint64_t *__return_ptr))(**((void **)this + 1) + 32))(&v23);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v24, (atomic_ullong *)&v23);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v23);
    if (!v24 || *(unsigned char *)(v24 + 344) || (unsigned int v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(unsigned char *)(v24 + 344))
      {
        (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
        uint64_t v19 = 4294967248;
      }
      else
      {
        uint64_t v19 = 4294967274;
      }
    }
    else
    {
      uint64_t v7 = (*(void *)(*(void *)(*(void *)a3 + 56) + 16 * *((void *)a3 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(*(void *)a3 + 8) + 20);
      uint64_t v19 = di_asif::details::table::defrag_entry_locked(this, a2, a3, v7, a5);
    }
    if (v24 && !*(unsigned char *)(v24 + 344) && *(void *)(v24 + 288)) {
      std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(v24 + 264, v24);
    }
    int v21 = 1;
  }
  else
  {
    (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
    int v21 = 0;
    uint64_t v19 = 4294967274;
  }
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v24);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v25);
  if (!v21) {
    return 4294967248;
  }
  if (!v19)
  {
    atomic_store(1u, (unsigned int *)this + 24);
    di_asif::details::table::return_chunk(this, v7);
  }
  return v19;
}

void sub_21E2F66A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  atomic_ullong v3 = va_arg(va1, void);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)va);
  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)va1);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::make_map_entry_iterators@<X0>(di_asif::details::table *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)this + 44);
  unint64_t v6 = *(void *)(*((void *)this + 1) + 80) + v5;
  if (v5 >= v6)
  {
    char v8 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = di_asif::details::table::get_map_entry_for_offset(this, *((void *)this + 44));
    unint64_t v6 = *(void *)(*((void *)this + 1) + 80) + *((void *)this + 44);
    char v8 = 1;
  }
  *(void *)a3 = this;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = this;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

uint64_t di_asif::details::table::make_data_entry_iterators_for_map@<X0>(di_asif::details::table *this@<X0>, const di_asif::details::table_entry_map *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(void *)(*(void *)a2 + 352)
     + *((void *)a2 + 1)
     / (unint64_t)(*(void *)(*(void *)(*(void *)a2 + 8) + 48) + 1)
     * *(void *)(*(void *)(*(void *)a2 + 8) + 48)
     * *(unsigned int *)(*(void *)(*(void *)a2 + 8) + 20);
  uint64_t v7 = *((void *)this + 1);
  unint64_t v8 = *((void *)this + 44) + *(void *)(v7 + 80);
  if (v6 >= v8)
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
    char v17 = 0;
    unint64_t v16 = *(void *)(*(void *)a2 + 352)
        + *((void *)a2 + 1)
        / (unint64_t)(*(void *)(*(void *)(*(void *)a2 + 8) + 48) + 1)
        * *(void *)(*(void *)(*(void *)a2 + 8) + 48)
        * *(unsigned int *)(*(void *)(*(void *)a2 + 8) + 20);
  }
  else
  {
    uint64_t data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset(this, v6);
    atomic_ullong v3 = a2;
    unint64_t v11 = data_entry_for_offset & 0xFFFFFFFFFFFFFF00;
    uint64_t v12 = data_entry_for_offset;
    uint64_t v13 = *(void *)(*(void *)a2 + 8);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(unsigned int *)(v13 + 20);
    uint64_t v7 = *((void *)this + 1);
    unint64_t v16 = *(void *)(*(void *)a2 + 352) + *((void *)a2 + 1) / (unint64_t)(v14 + 1) * v14 * v15;
    unint64_t v8 = *((void *)this + 44) + *(void *)(v7 + 80);
    char v17 = 1;
  }
  unsigned int v18 = *(unsigned __int16 *)(v7 + 18);
  unsigned int v19 = *(_DWORD *)(v7 + 20) / v18;
  uint64_t v20 = *(void *)(v7 + 48);
  unint64_t v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    char v23 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = di_asif::details::table::get_data_entry_for_offset(this, v16 + v18 * (unint64_t)v19 * v20);
    char v23 = 1;
  }
  *(void *)a3 = this;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v11 | v12;
  *(void *)(a3 + 24) = v3;
  *(unsigned char *)(a3 + 32) = v17;
  *(void *)(a3 + 40) = this;
  *(void *)(a3 + 48) = v21;
  *(void *)(a3 + 56) = result;
  *(void *)(a3 + 64) = a2;
  *(unsigned char *)(a3 + 72) = v23;
  return result;
}

void di_asif::details::dir::~dir(di_asif::details::dir *this)
{
  *(void *)this = &unk_26CF34E78;
  uint64_t v2 = (std::mutex *)((char *)this + 3680);
  std::mutex::lock((std::mutex *)((char *)this + 3680));
  *((unsigned char *)this + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)this + 452);
  std::mutex::~mutex((std::mutex *)((char *)this + 3792));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)this + 468);
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 3624));
  std::thread::~thread((std::thread *)this + 452);
  std::mutex::~mutex((std::mutex *)((char *)this + 3528));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator((uint64_t)this + 2080);
  ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator((uint64_t)this + 280);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  atomic_ullong v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100]((void *)this + 11);
}

{
  uint64_t vars8;

  di_asif::details::dir::~dir(this);
  JUMPOUT(0x223C249A0);
}

void space_allocators::FixedSize::~FixedSize(space_allocators::FixedSize *this)
{
}

__n128 di_asif::details::dir::make_unmap_iterators@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)v10, a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), 0, *(void *)(a1 + 120), 0);
  di_asif::details::unmap_iterator_t::unmap_iterator_t((di_asif::details::unmap_iterator_t *)(a4 + 80), a2, a3, *(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 18), *(void *)(a1 + 120), *(void *)(a1 + 120), 0);
  long long v8 = v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(_OWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void di_asif::details::table::check_if_map_element_needed(di_asif::details::table *this, di_asif::details::ContextASIF *a2, uint64_t a3)
{
  di_asif::details::table_entry_map::table_entry_map(&v26, this, a3);
  long long v30 = v26;
  if ((*(void *)(*(void *)(v26 + 56) + 16 * *((void *)&v26 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(v26 + 8) + 20))
  {
    di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)&v30, (uint64_t)&v26);
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v25 = v28;
    while (v23 != v29)
    {
      unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
      if (v5 >> 62 == 3) {
        return;
      }
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)&v23);
    }
    if ((*(void *)(*(void *)(v30 + 56) + 16 * *((void *)&v30 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(v30 + 8) + 20))
    {
      long long v23 = v26;
      if (v25 == v28)
      {
        if ((_BYTE)v25) {
          *((void *)&v24 + 1) = *((void *)&v27 + 1);
        }
      }
      else if ((_BYTE)v25)
      {
        LOBYTE(v25) = 0;
      }
      else
      {
        long long v24 = v27;
        LOBYTE(v25) = 1;
      }
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      while (v23 != v29)
      {
        ref::ref_cnt::take_exclusive(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1), 0, (uint64_t)v19);
        unint64_t v6 = v21;
        if (v21 >= v22)
        {
          uint64_t v7 = std::vector<ref::details::ref_cnt_set_handle>::__emplace_back_slow_path<ref::details::ref_cnt_set_handle>(&v20, (uint64_t)v19);
        }
        else
        {
          ref::details::ref_cnt_handle::ref_cnt_handle(v21, (uint64_t)v19);
          *(void *)unint64_t v6 = &unk_26CF39B10;
          *(void ***)(v6 + 24) = v19[3];
          uint64_t v7 = v6 + 32;
        }
        unint64_t v21 = v7;
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v19);
        unint64_t v8 = atomic_load((unint64_t *)(*(void *)(v24 + 56) + 16 * *((void *)&v24 + 1) + 8));
        if (v8 >> 62 == 3) {
          goto LABEL_33;
        }
        di_asif::details::data_entry_iterator_t::operator++((uint64_t)&v23);
      }
      long long v9 = v30;
      uint64_t v10 = *(void *)(v30 + 56) + 16 * *((void *)&v30 + 1);
      if ((*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(v30 + 8) + 20))
      {
        ref::ref_cnt::take_exclusive(v10, 0, (uint64_t)v19);
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v12 = *(unsigned int *)(v11 + 20);
        if ((*(void *)(*(void *)(v9 + 56) + 16 * *((void *)&v9 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v12)
        {
          di_asif::details::table::get_bitmap(this, a2, (*(void *)(v9 + 352)+ *(void *)(v11 + 48) * v12 * (*((void *)&v9 + 1) / (unint64_t)(*(void *)(v11 + 48) + 1)))/ *(unsigned __int16 *)(*((void *)this + 1) + 18), 1, (unint64_t *)&v18);
          if (v18 && !*(unsigned char *)(v18 + 344))
          {
            if (*(unsigned char *)(v18 + 224)) {
              uint64_t v13 = v18 + 40;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 24) = v14;
            *(unsigned char *)(v13 + 112) = 0;
            if (v18 && *(void *)(v18 + 288)) {
              std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(v18 + 264, v18);
            }
            uint64_t v15 = *((void *)this + 1);
            unint64_t v16 = ((*(void *)(v9 + 352)
                  + *((void *)&v9 + 1)
                  / (unint64_t)(*(void *)(*(void *)(v9 + 8) + 48) + 1)
                  * *(void *)(*(void *)(v9 + 8) + 48)
                  * *(unsigned int *)(*(void *)(v9 + 8) + 20))
                 / *(unsigned __int16 *)(v15 + 18)
                 - *((void *)this + 44) / (unint64_t)*(unsigned __int16 *)(v15 + 18))
                / (*(void *)(v15 + 48)
                 * (unint64_t)(*(_DWORD *)(v15 + 20) / *(unsigned __int16 *)(v15 + 18)));
            atomic_ullong v17 = 0;
            atomic_store(atomic_exchange(&v17, 0), (unint64_t *)(*((void *)this + 9) + 8 * v16));
          }
          ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v18);
        }
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v19);
      }
LABEL_33:
      v19[0] = (void **)&v20;
      std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
}

void sub_21E2F6E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_ullong a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a12 = (void **)&a16;
  std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *di_asif::details::operator<<(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"table entry data@", 17);
  atomic_ullong v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" = offset = ", 12);
  uint64_t v4 = (void *)std::ostream::operator<<();
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", flags = ", 10);
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8));
  int v8 = v6 >> 62;
  return di_asif::details::operator<<(v5, &v8);
}

__n128 di_asif::details::table::unmap@<Q0>(uint64_t a1@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  v69 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  di_asif::details::table::make_unmap_iterators(a3, a4, *(unsigned int *)(*(void *)(a1 + 8) + 20), *(unsigned __int16 *)(*(void *)(a1 + 8) + 18), *(void *)(a1 + 352), *(void *)(*(void *)(a1 + 8) + 80) + *(void *)(a1 + 352), (uint64_t)v80);
  int v9 = 0;
  LOBYTE(v78) = 0;
  char v79 = 0;
  int v70 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 24) + 184);
  while (*(void *)v80 != v83
       || *(_OWORD *)&v80[8] != v84
       || *(void *)&v80[16] != *(void *)v80 + 16 * *(void *)&v80[8]
       && (*(_OWORD *)&v81[8] != v85 || *(void *)&v81[24] != v86))
  {
    uint64_t v10 = *(void *)&v80[24];
    uint64_t v11 = *(void *)v81;
    *(void *)&v81[8] += *(void *)&v81[24] * *(void *)v81;
    *(void *)&v80[24] = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)v80);
    *(void *)v81 = v12;
    unint64_t v13 = v10 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
    uint64_t data_entry_for_offset = di_asif::details::table::get_data_entry_for_offset((di_asif::details::table *)a1, v13);
    unint64_t v16 = (void *)data_entry_for_offset;
    uint64_t v17 = v15;
    *(void *)&long long v77 = data_entry_for_offset;
    *((void *)&v77 + 1) = v15;
    if (v79)
    {
      uint64_t v18 = v78;
      BOOL v19 = *(void *)(data_entry_for_offset + 352) == *(void *)(v78 + 352) && v15 == *((void *)&v78 + 1);
      if (!v19)
      {
        v9 |= di_asif::details::table::update_entry_if_bits_in_same_state((di_asif::details::table *)a1, a2, (di_asif::details::table_entry_data *)&v78);
        uint64_t v20 = *(void *)(v18 + 8);
        unint64_t v21 = (*(void *)(v18 + 352)
             + (*(void *)(v20 + 48) + *(void *)(v20 + 48) * *((void *)&v78 + 1))
             / (unint64_t)(*(void *)(v20 + 48) + 1)
             * *(unsigned int *)(v20 + 20))
            / *(unsigned __int16 *)(v20 + 18);
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(v22 + 48);
        unsigned int v24 = *(_DWORD *)(v22 + 20);
        unint64_t v25 = *(unsigned __int16 *)(v22 + 18);
        unint64_t v26 = v23 * (v24 / v25);
        unint64_t v27 = *(void *)(a1 + 352) / v25;
        ++v23;
        uint64_t v28 = v23 + v23 * ((v21 - v27) / v26);
        uint64_t v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(void *)(v29 + 48) + *(void *)(v29 + 48) * v17)
                     / (unint64_t)(*(void *)(v29 + 48) + 1)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          di_asif::details::table::check_if_map_element_needed((di_asif::details::table *)a1, a2, v28 - 1);
          int v9 = 0;
        }
      }
      *((void *)&v78 + 1) = v17;
    }
    else
    {
      long long v78 = v77;
      char v79 = 1;
    }
    unint64_t v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    unint64_t v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      long long v32 = v77;
      uint64_t v33 = *(void *)(v77 + 8);
      uint64_t v34 = *(void *)(v33 + 48);
      uint64_t v35 = *(unsigned int *)(v33 + 20);
      if (*(void *)(v77 + 352) + (v34 + v34 * *((void *)&v77 + 1)) / (unint64_t)(v34 + 1) * v35 == v13
        && v11 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18) == v35)
      {
        ref::ref_cnt::take_exclusive(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          di_log::logger<di_log::log_printer<863ul>>::logger(v73, &v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Couldn't lock entry ", 20);
          di_asif::details::operator<<(v74, &v77);
          di_log::logger<di_log::log_printer<863ul>>::~logger((uint64_t)v73);
          exception = __cxa_allocate_exception(0x40uLL);
          void *exception = &unk_26CF39EE0;
          v65 = std::generic_category();
          exception[1] = 4294967282;
          exception[2] = v65;
          *((unsigned char *)exception + 24) = 0;
          *((unsigned char *)exception + 48) = 0;
          exception[7] = "Couldn't lock entry";
        }
        unint64_t v36 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        unint64_t v37 = v36 & 0xC000000000000000;
        if (v31 != 1 && v37 == 0x4000000000000000) {
          goto LABEL_32;
        }
        v39 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        unint64_t v40 = *v39;
        unint64_t v41 = *v39 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000;
        for (atomic_ullong i = *v39; ; v41 = i & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000)
        {
          atomic_compare_exchange_strong(v39, (unint64_t *)&i, v41);
          if (i == v40) {
            break;
          }
          unint64_t v40 = i;
        }
        BOOL v48 = v40 >> 62 == 3;
        v49 = (atomic_ullong *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1) + 8);
        atomic_ullong v50 = *v49;
        uint64_t v51 = *(unsigned int *)(*(void *)(v77 + 8) + 20);
        if (v51)
        {
          atomic_fetch_and_explicit(v49, 0xFF80000000000000, memory_order_relaxed);
        }
        else
        {
          atomic_ullong v52 = *v49;
          atomic_ullong v53 = *v49;
          atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v53, *v49 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          if (v53 != v52)
          {
            atomic_ullong v54 = v53;
            do
            {
              atomic_compare_exchange_strong_explicit(v49, (unint64_t *)&v54, v53 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
              BOOL v19 = v54 == v53;
              atomic_ullong v53 = v54;
            }
            while (!v19);
          }
        }
        v9 |= v48;
        uint64_t v55 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v75);
        if (v55) {
          di_asif::details::table::return_chunk((di_asif::details::table *)a1, v55);
        }
      }
      else if (v31)
      {
        v45 = (ref::ref_cnt *)(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1));
        BOOL v46 = ref::ref_cnt::get(v45);
        v75[0] = &unk_26CF39AF0;
        v75[1] = v45;
        BOOL v76 = v46;
        if (!v46)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          di_log::logger<di_log::log_printer<888ul>>::logger(v73, &v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Couldn't lock entry ", 20);
          di_asif::details::operator<<(v74, &v77);
          di_log::logger<di_log::log_printer<888ul>>::~logger((uint64_t)v73);
          v62 = __cxa_allocate_exception(0x40uLL);
          void *v62 = &unk_26CF39EE0;
          v63 = std::generic_category();
          v62[1] = 4294967282;
          v62[2] = v63;
          *((unsigned char *)v62 + 24) = 0;
          *((unsigned char *)v62 + 48) = 0;
          v62[7] = "Couldn't lock entry";
        }
        uint64_t v47 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = di_asif::details::table::make_range_bits((di_asif::details::table *)a1, v10 * v47, v11 * v47);
        di_asif::details::table::set_entry_bitmap_range(a1, a2, (di_asif::details::table_entry_data *)&v77, v73, 2u, v31 | 0x100000000);
        ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v75);
      }
      else if (!v70)
      {
        ref::ref_cnt::take_exclusive(*(void *)(v77 + 56) + 16 * *((void *)&v77 + 1), 0, (uint64_t)v75);
        if (!v76)
        {
          *(void *)&long long v71 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v71 + 1) = 30;
          int v72 = 16;
          di_log::logger<di_log::log_printer<900ul>>::logger(v73, &v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Couldn't exclusively lock entry ", 32);
          di_asif::details::operator<<(v74, &v77);
          di_log::logger<di_log::log_printer<900ul>>::~logger((uint64_t)v73);
          v66 = __cxa_allocate_exception(0x40uLL);
          void *v66 = &unk_26CF39EE0;
          v67 = std::generic_category();
          v66[1] = 4294967282;
          v66[2] = v67;
          *((unsigned char *)v66 + 24) = 0;
          *((unsigned char *)v66 + 48) = 0;
          v66[7] = "Couldn't lock entry";
        }
        unint64_t v43 = atomic_load((unint64_t *)(*(void *)(v32 + 56) + 16 * *((void *)&v32 + 1) + 8));
        uint64_t v44 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18);
        *(void *)v73 = di_asif::details::table::make_range_bits((di_asif::details::table *)a1, v10 * v44, v11 * v44);
        di_asif::details::table::set_entry_bitmap_range(a1, a2, (di_asif::details::table_entry_data *)&v77, v73, 2u, (v43 >> 62) | 0x100000000);
LABEL_32:
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v75);
      }
    }
  }
  if (v79
    && ((di_asif::details::table::update_entry_if_bits_in_same_state((di_asif::details::table *)a1, a2, (di_asif::details::table_entry_data *)&v78) | v9) & 1) != 0)
  {
    uint64_t v56 = *(void *)(v78 + 8);
    uint64_t v57 = *(void *)(a1 + 8);
    uint64_t v58 = *(void *)(v57 + 48);
    di_asif::details::table::check_if_map_element_needed((di_asif::details::table *)a1, a2, v58+ (v58 + 1)* (((*(void *)(v78 + 352)+ (*(void *)(v56 + 48) + *(void *)(v56 + 48) * *((void *)&v78 + 1))/ (unint64_t)(*(void *)(v56 + 48) + 1)* *(unsigned int *)(v56 + 20))/ *(unsigned __int16 *)(v56 + 18)- *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v57 + 18))/ (v58* (unint64_t)(*(_DWORD *)(v57 + 20) / *(unsigned __int16 *)(v57 + 18)))));
  }
  long long v59 = *(_OWORD *)&v81[16];
  a5[2] = *(_OWORD *)v81;
  a5[3] = v59;
  a5[4] = v82;
  long long v60 = *(_OWORD *)&v80[16];
  *a5 = *(_OWORD *)v80;
  a5[1] = v60;
  std::mutex::unlock(v69);
  return result;
}

void sub_21E2F7708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
}

void *di_log::logger<di_log::log_printer<863ul>>::logger(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<863ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35A40;
  a1[45] = &unk_26CF35B40;
  a1[46] = &unk_26CF35B68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35A40;
  a1[45] = &unk_26CF35AC8;
  a1[46] = &unk_26CF35AF0;
  return a1;
}

void sub_21E2F78A0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<888ul>>::logger(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<888ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35C60;
  a1[45] = &unk_26CF35D60;
  a1[46] = &unk_26CF35D88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35C60;
  a1[45] = &unk_26CF35CE8;
  a1[46] = &unk_26CF35D10;
  return a1;
}

void sub_21E2F7A08(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<900ul>>::logger(void *a1, long long *a2)
{
  atomic_ullong v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<900ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35E80;
  a1[45] = &unk_26CF35F80;
  a1[46] = &unk_26CF35FA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35E80;
  a1[45] = &unk_26CF35F08;
  a1[46] = &unk_26CF35F30;
  return a1;
}

void sub_21E2F7B70(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  return a1;
}

BOOL di_asif::details::table::flush(di_asif::details::table *this, di_asif::details::ContextASIF *a2)
{
  v64[4] = *MEMORY[0x263EF8340];
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  unsigned int v45 = atomic_exchange((atomic_uint *volatile)this + 24, 0);
  uint64_t v4 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  long long v5 = *(_OWORD *)((char *)this + 248);
  long long v6 = *(_OWORD *)((char *)this + 264);
  long long v53 = *(_OWORD *)((char *)this + 232);
  long long v54 = v5;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  long long v7 = v55;
  long long v55 = v6;
  *(_OWORD *)((char *)this + 264) = v7;
  std::mutex::unlock(v4);
  size_t v8 = ((unint64_t)*(unsigned __int16 *)(*((void *)this + 1) + 18)
      + 8 * *(void *)(*((void *)this + 1) + 56)
      - 1)
     / *(unsigned __int16 *)(*((void *)this + 1) + 18)
     * *(unsigned __int16 *)(*((void *)this + 1) + 18);
  int v9 = malloc_type_valloc(v8, 0xF8ED6DDuLL);
  if (!v9)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v44 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v44, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v58[0] = &unk_26CF359B8;
  unint64_t v60 = (unint64_t)v58;
  uint64_t v63 = (uint64_t)v9;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v64, (uint64_t)v58);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v58);
  uint64_t v10 = v63;
  std::mutex::lock((std::mutex *)((char *)this + 168));
  di_asif::details::table::make_map_entry_iterators(this, v11, (uint64_t)v58);
  uint64_t v12 = 0;
  size_t v13 = v10 + v8;
  uint64_t v52 = *((void *)this + 43);
  char v51 = 0;
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = &v52;
  *(void *)&long long v50 = v10;
  *((void *)&v50 + 1) = &v51;
  uint64_t v14 = (void *)v10;
  while (v58[0] != v61 || v58[1] != v62)
  {
    if ((atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0)
    {
      di_asif::details::table::get_bitmap(this, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*((void *)this + 1) + 18), 0, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v15 = (di_asif::details::map_element *)(v46[0] + 40);
        }
        else {
          uint64_t v15 = 0;
        }
        int v16 = di_asif::details::map_element::flush(v15, a2, this);
        if (v16)
        {
          DiskImage::Context::terminate_di(a2);
          uint64_t v35 = __cxa_allocate_exception(0x40uLL);
          unint64_t v36 = v35;
          if (v16 < 0) {
            uint64_t v37 = v16;
          }
          else {
            uint64_t v37 = -v16;
          }
          void *v35 = &unk_26CF39EE0;
          v38 = std::generic_category();
          v36[1] = v37;
          v36[2] = v38;
          *((unsigned char *)v36 + 24) = 0;
          *((unsigned char *)v36 + 48) = 0;
          v36[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)v46);
    }
    ref::ref_cnt::take_exclusive(v59[7] + 16 * v60, 0, (uint64_t)v48);
    unint64_t v17 = atomic_fetch_and((atomic_ullong *volatile)(v59[7] + 16 * v60 + 8), 0x7FFFFFFFFFFFFFFFuLL);
    di_asif::details::table_entry_map::validate((di_asif::details::table_entry_map *)&v59);
    if ((v17 & 0x8000000000000000) != 0)
    {
      di_asif::details::table::get_bitmap(this, a2, (v59[44]+ v60 / (*(void *)(v59[1] + 48) + 1) * *(void *)(v59[1] + 48) * *(unsigned int *)(v59[1] + 20))/ *(unsigned __int16 *)(*((void *)this + 1) + 18), 1, v46);
      if (v46[0] && !*(unsigned char *)(v46[0] + 344))
      {
        if (*(unsigned char *)(v46[0] + 224)) {
          uint64_t v18 = (di_asif::details::map_element *)(v46[0] + 40);
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = di_asif::details::map_element::flush(v18, a2, this);
        if (v19)
        {
          DiskImage::Context::terminate_di(a2);
          v39 = __cxa_allocate_exception(0x40uLL);
          unint64_t v40 = v39;
          if (v19 < 0) {
            uint64_t v41 = v19;
          }
          else {
            uint64_t v41 = -v19;
          }
          void *v39 = &unk_26CF39EE0;
          v42 = std::generic_category();
          v40[1] = v41;
          v40[2] = v42;
          *((unsigned char *)v40 + 24) = 0;
          *((unsigned char *)v40 + 48) = 0;
          v40[7] = "Can't flush asif, bitmap flush failed";
        }
        char v51 = 1;
      }
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)v46);
    }
    ++v12;
    if (v45)
    {
      di_asif::details::table::make_data_entry_iterators_for_map(this, (const di_asif::details::table_entry_map *)&v59, (uint64_t)v46);
      while (v46[0] != v47[3] || v46[1] != v47[4])
      {
        di_asif::details::table_entry_data::validate((di_asif::details::table_entry_data *)v47);
        unint64_t v20 = atomic_load((unint64_t *)(*(void *)(v47[0] + 56) + 16 * v47[1] + 8));
        *v14++ = bswap64(v20);
        unint64_t v21 = (char *)operator new(0x28uLL);
        *(void *)unint64_t v21 = &unk_26CF38558;
        long long v22 = v50;
        *(_OWORD *)(v21 + 8) = v49;
        *(_OWORD *)(v21 + 24) = v22;
        uint64_t v57 = v21;
        if ((unint64_t)v14 >= v13)
        {
          std::function<void ()(char const*)>::operator()((uint64_t)v56, (uint64_t)v14);
          uint64_t v14 = (void *)v10;
        }
        std::__function::__value_func<void ()(char const*)>::~__value_func[abi:ne180100](v56);
        di_asif::details::data_entry_iterator_t::operator++((uint64_t)v46);
      }
      unint64_t v23 = atomic_load((unint64_t *)(v59[7] + 16 * v60 + 8));
      *v14++ = bswap64(v23);
      unsigned int v24 = (char *)operator new(0x28uLL);
      *(void *)unsigned int v24 = &unk_26CF38558;
      long long v25 = v50;
      *(_OWORD *)(v24 + 8) = v49;
      *(_OWORD *)(v24 + 24) = v25;
      uint64_t v57 = v24;
      if ((unint64_t)v14 >= v13)
      {
        std::function<void ()(char const*)>::operator()((uint64_t)v56, (uint64_t)v14);
        uint64_t v14 = (void *)v10;
      }
      std::__function::__value_func<void ()(char const*)>::~__value_func[abi:ne180100](v56);
    }
    else
    {
      if (v14 != (void *)v10) {
        di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((DiskImage::Context **)&v49, (uint64_t)v14);
      }
      uint64_t v52 = *((void *)this + 43) + 8 * (v12 + v12 * *(void *)(*((void *)this + 1) + 48));
    }
    ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v48);
    di_asif::details::map_entry_iterator_t::operator++((uint64_t)v58);
  }
  if (v14 != (void *)v10)
  {
    unint64_t v26 = *(unsigned __int16 *)(*((void *)this + 1) + 18);
    size_t v27 = v26 + ((unint64_t)v14 - v10) / v26 * v26 - ((void)v14 - v10);
    bzero(v14, v27);
    di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()((DiskImage::Context **)&v49, (uint64_t)v14 + v27);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 168));
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](&v63, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v64);
  uint64_t v28 = *((void *)&v55 + 1);
  uint64_t v29 = (unint64_t **)(*((void *)&v53 + 1) + 8 * ((unint64_t)v55 >> 9));
  if ((void)v54 == *((void *)&v53 + 1))
  {
    unint64_t v30 = 0;
    long long v32 = 0;
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
  }
  else
  {
    unint64_t v30 = &(*v29)[v55 & 0x1FF];
    unint64_t v31 = (char *)(*((void *)&v53 + 1) + 8 * (((void)v55 + *((void *)&v55 + 1)) >> 9));
    long long v32 = (unint64_t *)(*(void *)v31 + 8 * ((v55 + *((void *)&v55 + 1)) & 0x1FF));
  }
  di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(*((atomic_ullong **)this + 1), v29, v30, v31, v32, (uint64_t)a2);
  if (v28) {
    (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
  }
  int v33 = *((unsigned __int8 *)this + 100);
  if (*((unsigned char *)this + 100))
  {
    (*(void (**)(void, void, void))(**((void **)this + 1) + 40))(*((void *)this + 1), *((void *)this + 44), *((void *)this + 43));
    *((unsigned char *)this + 100) = 0;
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v53);
  return v33 != 0;
}

void sub_21E2F83E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, void *a13, int a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41)
{
  std::mutex::unlock(a12);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)(v42 - 136), 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](a13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    unint64_t v45 = *(void *)(v41 + 264) + *(void *)(v41 + 272);
    uint64_t v46 = *(void *)(v41 + 240);
    uint64_t v47 = (char *)(v46 + 8 * (v45 >> 9));
    if (*(void *)(v41 + 248) == v46) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = *(void *)v47 + 8 * (v45 & 0x1FF);
    }
    long long v49 = (char *)(a37 + 8 * (a40 >> 9));
    if (a38 == a37)
    {
      long long v50 = 0;
      char v51 = 0;
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
    }
    else
    {
      long long v50 = (char *)(*(void *)v49 + 8 * (a40 & 0x1FF));
      uint64_t v52 = (char *)(a37 + 8 * ((a41 + a40) >> 9));
      char v51 = (char *)(*(void *)v52 + 8 * ((a41 + a40) & 0x1FF));
    }
    std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(a10, v47, v48, v49, v50, v52, v51);
    std::mutex::unlock(a11);
    atomic_fetch_or((atomic_uint *volatile)(v41 + 96), a15 != 0);
    __cxa_rethrow();
  }
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&a36);
  _Unwind_Resume(a1);
}

void sub_21E2F8598()
{
}

uint64_t di_asif::details::map_element::flush(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3)
{
  long long v6 = (std::mutex *)((char *)this + 120);
  std::mutex::lock((std::mutex *)((char *)this + 120));
  uint64_t v7 = di_asif::details::map_element::flush_locked(this, a2, a3, *(unsigned int *)(*((void *)a3 + 1) + 20));
  std::mutex::unlock(v6);
  return v7;
}

void sub_21E2F8638(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL di_asif::details::table_entry_map::validate(di_asif::details::table_entry_map *this)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8));
  if ((v1 & 0x7F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_map::validate() const";
    *((void *)&v3 + 1) = 43;
    int v4 = 16;
    di_log::logger<di_log::log_printer<325ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49);
    *(_DWORD *)((char *)&v6 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)&v6 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x223C24910](&v7);
  }
  return (v1 & 0x7F80000000000000) == 0;
}

void sub_21E2F8738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<325ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0::operator()(DiskImage::Context **a1, uint64_t a2)
{
  if (*(unsigned char *)a1[3])
  {
    int v4 = (*(uint64_t (**)(void, void))(**((void **)*a1 + 2) + 16))(*((void *)*a1 + 2), 0);
    if (v4)
    {
      uint64_t v12 = *a1;
      int v13 = v4;
      DiskImage::Context::terminate_di(v12);
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      if (v13 < 0) {
        unsigned int v15 = v13;
      }
      else {
        unsigned int v15 = -v13;
      }
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Can't flush asif, backend flush failed", v15);
    }
    *(unsigned char *)a1[3] = 0;
  }
  long long v5 = a1[2];
  uint64_t v6 = a2 - (void)v5;
  uint64_t v7 = *(void *)a1[1];
  size_t v8 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  unint64_t v17 = v5;
  uint64_t v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  uint64_t v21 = v6;
  char v22 = 0;
  LODWORD(v7) = (*(uint64_t (**)(void, DiskImage::Context **))(**((void **)*a1 + 2) + 80))(*((void *)*a1 + 2), &v17);
  *(void *)a1[1] += v6;
  if (v6 != (int)v7)
  {
    DiskImage::Context::terminate_di(*a1);
    int v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = v9;
    if ((int)v7 < 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = -(int)v7;
    }
    *int v9 = &unk_26CF39EE0;
    uint64_t v11 = std::generic_category();
    v10[1] = v7;
    v10[2] = v11;
    *((unsigned char *)v10 + 24) = 0;
    *((unsigned char *)v10 + 48) = 0;
    v10[7] = "Can't flush asif";
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_21E2F8914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL di_asif::details::table_entry_data::validate(di_asif::details::table_entry_data *this)
{
  atomic_load((unint64_t *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8));
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8));
  if ((v1 & 0x3F80000000000000) != 0)
  {
    *(void *)&long long v3 = "di_asif::details::table_entry_data::validate() const";
    *((void *)&v3 + 1) = 44;
    int v4 = 16;
    di_log::logger<di_log::log_printer<258ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39);
    *(_DWORD *)((char *)&v6 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)&v6 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x223C24910](&v7);
  }
  return (v1 & 0x3F80000000000000) == 0;
}

void sub_21E2F8A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<258ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  if (a7 == a5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = ((uint64_t)&a7[-*(void *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(void *)a4] >> 3);
  }
  return std::deque<unsigned long long>::__insert_bidirectional[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(a1, a2, a3, a4, a5, a6, a7, v7);
}

void *di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(atomic_ullong *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v12 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 16))(a1);
  v15[0] = &unk_26CF352D8;
  v15[1] = a6;
  v15[3] = v15;
  space_allocators::FixedSize::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v15);
  __n128 result = std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](v15);
  if (a5 == a3) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(void *)a4) >> 3) + a3 - *a2;
  }
  atomic_fetch_add(a1 + 1, v14);
  return result;
}

void sub_21E2F8B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::table::write(di_asif::details::table *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  *(_WORD *)v98 = 0;
  char v100 = 0;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)a3 + 1);
  uint64_t v85 = *(void *)a3;
  uint64_t v86 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v87 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v87[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v88 = *((void *)a3 + 6);
  long long v89 = *(_OWORD *)((char *)a3 + 56);
  long long v90 = *(_OWORD *)((char *)a3 + 72);
  long long v91 = *(_OWORD *)((char *)a3 + 88);
  char v92 = *((unsigned char *)a3 + 104);
  size_t v8 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v93 = *((void *)a3 + 14);
  v94 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v58 = 0;
  long long v95 = *((_OWORD *)a3 + 8);
  uint64_t v96 = *((void *)a3 + 18);
  char v97 = *((unsigned char *)a3 + 152);
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v85, (uint64_t)a4))
  {
    uint64_t data_entry_for_offset = (void *)di_asif::details::table::get_data_entry_for_offset(this, *(unint64_t *)&v87[8]);
    uint64_t v84 = v9;
    uint64_t v10 = data_entry_for_offset[1];
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = *(unsigned int *)(v10 + 20);
    v73[0] = data_entry_for_offset[44] + (v11 + v11 * v9) / (unint64_t)(v11 + 1) * v12;
    v73[1] = v73[0] + v12;
    char v74 = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v85, (uint64_t)v73, (uint64_t)a4, (uint64_t)v77);
    if (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)v77, (uint64_t)&v80))
    {
      unsigned int v15 = (ref::ref_cnt *)(data_entry_for_offset[7] + 16 * v84);
      BOOL v16 = ref::ref_cnt::get(v15);
      v71[0] = &unk_26CF39AF0;
      v71[1] = v15;
      BOOL v72 = v16;
      if (!v16)
      {
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        di_log::logger<di_log::log_printer<1081ul>>::logger(v73, &v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Couldn't lock entry ", 20);
        di_asif::details::operator<<(&v75, &data_entry_for_offset);
        di_log::logger<di_log::log_printer<1081ul>>::~logger((uint64_t)v73);
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &unk_26CF39EE0;
        long long v53 = std::generic_category();
        exception[1] = 4294967282;
        exception[2] = v53;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "Couldn't lock entry";
      }
      uint64_t v17 = v84;
      uint64_t v18 = data_entry_for_offset[7];
      uint64_t v19 = (*(void *)(v18 + 16 * v84 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(data_entry_for_offset[1] + 20);
      if (!v19)
      {
        LODWORD(v14) = di_asif::details::table::allocate_backend_space_for_entry((uint64_t)this, a2, (uint64_t)data_entry_for_offset, v84);
        if (!v14)
        {
          uint64_t v17 = v84;
          uint64_t v18 = data_entry_for_offset[7];
          goto LABEL_11;
        }
        *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v63 + 1) = 30;
        LODWORD(v64) = 16;
        di_log::logger<di_log::log_printer<1090ul>>::logger(v73, &v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"couldn't allocate space for entry ", 34);
        di_asif::details::operator<<(&v75, &data_entry_for_offset);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)" ret: ", 6);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf((uint64_t)v73);
        MEMORY[0x223C24910](v76);
        unint64_t v14 = (int)v14;
LABEL_53:
        int v13 = 1;
        goto LABEL_54;
      }
LABEL_11:
      unint64_t v20 = atomic_load((unint64_t *)(v18 + 16 * v17 + 8));
      unint64_t v21 = di_asif::details::table_entry_data::write((di_asif::details::table_entry_data *)&data_entry_for_offset, a2, (const sg_vec_ns::details::sg_vec_iterator *)v77, (const sg_vec_ns::details::sg_vec_iterator *)&v80);
      unint64_t v14 = v21;
      unint64_t v23 = v22;
      if ((v21 & 0x8000000000000000) != 0 && v21)
      {
        if (v19) {
          goto LABEL_14;
        }
        ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v71, 0, (uint64_t)v73);
        if (!v74) {
          goto LABEL_52;
        }
        unint64_t v32 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v84 + 8));
        if ((v32 & 0x4000000000000000) != 0) {
          goto LABEL_52;
        }
        int v33 = (atomic_ullong *)(data_entry_for_offset[7] + 16 * v84 + 8);
        atomic_ullong v34 = *v33;
        uint64_t v35 = *(unsigned int *)(data_entry_for_offset[1] + 20);
        if (v35)
        {
          atomic_fetch_and_explicit(v33, 0xFF80000000000000, memory_order_relaxed);
          goto LABEL_68;
        }
        atomic_ullong v41 = *v33;
        atomic_ullong v42 = *v33;
        atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v42, *v33 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
        if (v42 == v41)
        {
LABEL_52:
          ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v73);
          goto LABEL_53;
        }
        atomic_ullong v43 = v42;
        do
        {
          atomic_compare_exchange_strong_explicit(v33, (unint64_t *)&v43, v42 & 0xFF80000000000000, memory_order_relaxed, memory_order_relaxed);
          BOOL v44 = v43 == v42;
          atomic_ullong v42 = v43;
        }
        while (!v44);
LABEL_68:
        uint64_t v45 = (v34 & 0x7FFFFFFFFFFFFFLL) * v35;
        ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v73);
        if (v45) {
          di_asif::details::dir_base::insert_space(*((atomic_ullong **)this + 1), v45, a2);
        }
LABEL_14:
        int v13 = 1;
LABEL_54:
        ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v71);
        goto LABEL_55;
      }
      unint64_t v24 = v20 >> 62;
      *(void *)&long long v63 = &v85;
      *((void *)&v63 + 1) = a4;
      v64 = &v98[1];
      p_uint64_t data_entry_for_offset = &data_entry_for_offset;
      v66 = v98;
      v67 = this;
      unint64_t v68 = v21;
      unint64_t v69 = v22;
      int v70 = a2;
      if (v24 == 1)
      {
LABEL_16:
        int v13 = 2;
      }
      else
      {
        uint64_t v25 = data_entry_for_offset[1];
        uint64_t v26 = *(unsigned int *)(v25 + 20);
        if (v21 == v26
          && data_entry_for_offset[44]
           + (*(void *)(v25 + 48) + *(void *)(v25 + 48) * v84)
           / (unint64_t)(*(void *)(v25 + 48) + 1)
           * v26 == v22)
        {
          ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v71, 0, (uint64_t)v61);
          if (!v62)
          {
            *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
            *((void *)&v59 + 1) = 30;
            int v60 = 16;
            di_log::logger<di_log::log_printer<1151ul>>::logger(v73, &v59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
            di_asif::details::operator<<(&v75, &data_entry_for_offset);
            di_log::logger<di_log::log_printer<1151ul>>::~logger((uint64_t)v73);
            long long v54 = __cxa_allocate_exception(0x40uLL);
            *long long v54 = &unk_26CF39EE0;
            long long v55 = std::generic_category();
            v54[1] = 4294967282;
            v54[2] = v55;
            *((unsigned char *)v54 + 24) = 0;
            *((unsigned char *)v54 + 48) = 0;
            v54[7] = "Couldn't upgrade lock entry";
          }
          unint64_t v27 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v84 + 8));
          if (v24 == 2 || (v27 & 0xC000000000000000) != 0x8000000000000000)
          {
            uint64_t v28 = (atomic_ullong *)(data_entry_for_offset[7] + 16 * v84 + 8);
            unint64_t v29 = *v28;
            unint64_t v30 = *v28 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000;
            for (i = *v28; ; unint64_t v30 = i & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000)
            {
              atomic_compare_exchange_strong(v28, (unint64_t *)&i, v30);
              if (i == v29) {
                break;
              }
              unint64_t v29 = i;
            }
            unint64_t v38 = v29 >> 62;
            if (v98[0]) {
              BOOL v39 = 1;
            }
            else {
              BOOL v39 = v38 > 2;
            }
            char v40 = v39;
            v98[0] = v40;
            atomic_store(1u, (unsigned int *)this + 24);
          }
          ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v61);
          int v13 = 2;
        }
        else
        {
          if (v24 == 3)
          {
            v73[0] = di_asif::details::table::make_range_bits(this, v22, v21);
            di_asif::details::table::set_entry_bitmap_range((uint64_t)this, a2, (di_asif::details::table_entry_data *)&data_entry_for_offset, (unsigned int *)v73, 1u, v24 | 0x100000000);
          }
          else
          {
            ref::details::ref_cnt_handle::upgrade_to_exclusive((ref::details::ref_cnt_handle *)v71, 0, (uint64_t)v61);
            if (!v62)
            {
              *(void *)&long long v59 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
              *((void *)&v59 + 1) = 30;
              int v60 = 16;
              di_log::logger<di_log::log_printer<1188ul>>::logger(v73, &v59);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Couldn't upgrade lock entry ", 28);
              di_asif::details::operator<<(&v75, &data_entry_for_offset);
              di_log::logger<di_log::log_printer<1188ul>>::~logger((uint64_t)v73);
              uint64_t v56 = __cxa_allocate_exception(0x40uLL);
              *uint64_t v56 = &unk_26CF39EE0;
              uint64_t v57 = std::generic_category();
              v56[1] = 4294967282;
              v56[2] = v57;
              *((unsigned char *)v56 + 24) = 0;
              *((unsigned char *)v56 + 48) = 0;
              v56[7] = "Couldn't upgrade lock entry";
            }
            unint64_t v36 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v84 + 8));
            if (!((*(void *)(data_entry_for_offset[7] + 16 * v84 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(data_entry_for_offset[1] + 20))
              || (unint64_t v37 = v36 >> 62, v36 >> 62 == 1))
            {
              ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v61);
              goto LABEL_16;
            }
            v73[0] = di_asif::details::table::make_range_bits(this, v23, v14);
            di_asif::details::table::set_entry_bitmap_range((uint64_t)this, a2, (di_asif::details::table_entry_data *)&data_entry_for_offset, (unsigned int *)v73, 1u, v37 | 0x100000000);
            ref::details::ref_cnt_set_handle::~ref_cnt_set_handle((ref::details::ref_cnt_set_handle *)v61);
          }
          if (v19)
          {
            int v13 = 0;
          }
          else
          {
            int v13 = 0;
            atomic_store(1u, (unsigned int *)this + 24);
          }
        }
      }
      v58 += v14;
      finally<di_asif::details::table::write(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally((uint64_t)&v63);
      goto LABEL_54;
    }
    *(void *)&long long v63 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v63 + 1) = 30;
    LODWORD(v64) = 16;
    di_log::logger<di_log::log_printer<1075ul>>::logger(v73, &v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Couldn't trim entry in write ", 29);
    operator<<(&v75);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf((uint64_t)v73);
    MEMORY[0x223C24910](v76);
    int v13 = 1;
    unint64_t v14 = -34;
LABEL_55:
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (v81) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v81);
    }
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if ((v13 | 2) != 2) {
      goto LABEL_77;
    }
  }
  if (v100)
  {
    int updated = di_asif::details::table::update_entry_if_bits_in_same_state(this, a2, (di_asif::details::table_entry_data *)&v98[1]);
    unint64_t v14 = v58;
    if (v98[0]) {
      int v47 = 1;
    }
    else {
      int v47 = updated;
    }
    v98[0] = v47;
    if (v47 == 1)
    {
      uint64_t v48 = *(void *)(*(void *)&v98[1] + 8);
      uint64_t v49 = *((void *)this + 1);
      uint64_t v50 = *(void *)(v49 + 48);
      di_asif::details::table::check_if_map_element_needed(this, a2, v50+ (v50 + 1)* (((*(void *)(*(void *)&v98[1] + 352)+ (*(void *)(v48 + 48) + *(void *)(v48 + 48) * v99)/ (unint64_t)(*(void *)(v48 + 48) + 1)* *(unsigned int *)(v48 + 20))/ *(unsigned __int16 *)(v48 + 18)- *((void *)this + 44) / (unint64_t)*(unsigned __int16 *)(v49 + 18))/ (v50* (unint64_t)(*(_DWORD *)(v49 + 20) / *(unsigned __int16 *)(v49 + 18)))));
    }
  }
  else
  {
    unint64_t v14 = v58;
  }
LABEL_77:
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  return v14;
}

void sub_21E2F9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void *di_log::logger<di_log::log_printer<1075ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1075ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF362C0;
  a1[45] = &unk_26CF363C0;
  a1[46] = &unk_26CF363E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF362C0;
  a1[45] = &unk_26CF36348;
  a1[46] = &unk_26CF36370;
  return a1;
}

void sub_21E2F9748(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1081ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1081ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF364E0;
  a1[45] = &unk_26CF365E0;
  a1[46] = &unk_26CF36608;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF364E0;
  a1[45] = &unk_26CF36568;
  a1[46] = &unk_26CF36590;
  return a1;
}

void sub_21E2F98B0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1090ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1090ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF36700;
  a1[45] = &unk_26CF36800;
  a1[46] = &unk_26CF36828;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF36700;
  a1[45] = &unk_26CF36788;
  a1[46] = &unk_26CF367B0;
  return a1;
}

void sub_21E2F9A18(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_asif::details::table_entry_data::write(di_asif::details::table_entry_data *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v139[80] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)(*(void *)this + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 20);
  if (!((*(void *)(*(void *)(*(void *)this + 56) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: No data offset found (write)", 0xFFFFFFEA);
  }
  __p = (void *)(*(void *)(*(void *)this + 352)
               + (*(void *)(v5 + 48) + *(void *)(v5 + 48) * v4)
               / (unint64_t)(*(void *)(v5 + 48) + 1)
               * v6);
  *(void *)&long long v138 = (char *)__p + v6;
  BYTE8(v138) = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a3, (uint64_t)&__p, (uint64_t)a4, (uint64_t)v71);
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)v71, (uint64_t)&v74))
  {
    uint64_t v11 = -34;
  }
  else
  {
    __p = v139;
    long long v138 = xmmword_21E39BDD0;
    long long v12 = *(_OWORD *)((char *)a3 + 72);
    long long v127 = *(_OWORD *)((char *)a3 + 56);
    long long v128 = v12;
    long long v129 = *(_OWORD *)((char *)a3 + 88);
    char v130 = *((unsigned char *)a3 + 104);
    int v13 = (std::__shared_weak_count *)*((void *)a3 + 15);
    uint64_t v131 = *((void *)a3 + 14);
    v132 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v133 = *((_OWORD *)a3 + 8);
    uint64_t v14 = *((void *)a4 + 9);
    uint64_t v15 = *((void *)a4 + 7);
    uint64_t v16 = *((void *)a4 + 8);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)a4 + 15);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v58 = (uint64_t)a3 + 72;
    while (1)
    {
      BOOL v20 = (void)v127 == v15 && *((void *)&v127 + 1) == v16;
      if (v20 && (void)v128 == v14) {
        break;
      }
      ++v19;
      v18 += 40;
      sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v127);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v132) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v132);
    }
    if (*((void *)&v138 + 1) < v19)
    {
      if (v19 >= 0x333333333333334) {
        boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v10);
      }
      unint64_t v22 = operator new(v18);
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>((uint64_t)&__p, (unint64_t)v22, v19, (_DWORD *)__p + 10 * v138, 0, 0);
    }
    uint64_t v23 = *(void *)a3;
    unint64_t v24 = (std::__shared_weak_count *)*((void *)a3 + 1);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)v64 = *((_OWORD *)a3 + 1);
    *(_OWORD *)&v64[9] = *(_OWORD *)((char *)a3 + 25);
    long long v65 = *(_OWORD *)v58;
    uint64_t v25 = *((void *)a3 + 6);
    uint64_t v26 = *((void *)a3 + 7);
    uint64_t v27 = *((void *)a3 + 8);
    long long v66 = *(_OWORD *)((char *)a3 + 88);
    char v67 = *((unsigned char *)a3 + 104);
    uint64_t v28 = *((void *)a3 + 14);
    unint64_t v29 = (std::__shared_weak_count *)*((void *)a3 + 15);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v68 = *((_OWORD *)a3 + 8);
    unint64_t v69 = *((void *)a3 + 18);
    char v70 = *((unsigned char *)a3 + 152);
    uint64_t v30 = *(void *)a4;
    unint64_t v31 = (std::__shared_weak_count *)*((void *)a4 + 1);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)int v60 = *((_OWORD *)a4 + 1);
    *(_OWORD *)&v60[9] = *(_OWORD *)((char *)a4 + 25);
    long long v61 = *(_OWORD *)((char *)a4 + 72);
    uint64_t v33 = *((void *)a4 + 6);
    uint64_t v32 = *((void *)a4 + 7);
    uint64_t v34 = *((void *)a4 + 8);
    long long v62 = *(_OWORD *)((char *)a4 + 88);
    char v63 = *((unsigned char *)a4 + 104);
    uint64_t v36 = *((void *)a4 + 14);
    uint64_t v35 = (std::__shared_weak_count *)*((void *)a4 + 15);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v37 = 0;
    v93[0] = *(_OWORD *)v64;
    *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)&v64[9];
    long long v96 = v65;
    long long v97 = v66;
    long long v101 = v68;
    v79[0] = *(_OWORD *)v60;
    *(_OWORD *)((char *)v79 + 9) = *(_OWORD *)&v60[9];
    long long v84 = v62;
    uint64_t v91 = v23;
    char v92 = v24;
    uint64_t v94 = v25;
    *(void *)&long long v95 = v26;
    *((void *)&v95 + 1) = v27;
    char v98 = v67;
    uint64_t v99 = v28;
    char v100 = v29;
    unint64_t v102 = v69;
    char v103 = v70;
    uint64_t v77 = v30;
    long long v78 = v31;
    uint64_t v80 = v33;
    uint64_t v81 = v32;
    uint64_t v82 = v34;
    char v85 = v63;
    long long v83 = v61;
    uint64_t v86 = v36;
    v87 = v35;
    long long v88 = *((_OWORD *)a4 + 8);
    char v90 = *((unsigned char *)a4 + 152);
    unint64_t v89 = *((void *)a4 + 18);
    unint64_t v38 = v89;
    LOBYTE(v127) = 0;
    char v134 = 0;
    while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v91, (uint64_t)&v77))
    {
      if (v102 >= v38 || (_OWORD *)((char *)v37 + 1) == 0) {
        break;
      }
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v123 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((void *)&v123 + 1) = 104;
        LODWORD(v124) = 2;
        di_log::logger<di_log::log_printer<545ul>>::logger(&v116, &v123);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v121, (uint64_t)"sg: ", 4);
        operator<<(&v121);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v116);
        MEMORY[0x223C24910](&v122);
      }
      *(void *)&long long v116 = 0;
      *((void *)&v116 + 1) = v38;
      LOBYTE(v117) = 2;
      trim_sg_to_interval(&v91, (uint64_t)&v116, (uint64_t)&v123);
      unint64_t v40 = v124;
      uint64_t v41 = *(void *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8);
      unint64_t v42 = *(unsigned int *)(*(void *)(*(void *)this + 8) + 20);
      atomic_ullong v43 = v125;
      uint64_t v44 = v126;
      long long v116 = v123;
      if (*((void *)&v123 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v123 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v117 = v40;
      uint64_t v118 = (unint64_t)v43 % v42 + (v41 & 0x7FFFFFFFFFFFFFLL) * v42;
      uint64_t v119 = v44;
      char v120 = 0;
      (*(void (**)(void *__return_ptr))(**((void **)a2 + 2) + 136))(v135);
      if ((void)v138 == *((void *)&v138 + 1))
      {
        boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>((uint64_t *)&__p, (_DWORD *)__p + 10 * v138, (const char *)1, v135, &v136);
      }
      else
      {
        lw_future<int>::lw_future((unint64_t)__p + 40 * v138, v135);
        *(void *)&long long v138 = v138 + 1;
      }
      uint64_t v45 = v125;
      uint64_t v46 = v124;
      if (*((void *)&v116 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v116 + 1));
      }
      BOOL v47 = v46 >= 0 || v46 == 0;
      char v48 = v47;
      if (v47)
      {
        if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v91, (const sg_vec_ns::details::sg_vec_iterator *)&v77, v45, v46))
        {
          v104[0] = v91;
          v104[1] = v92;
          if (v92) {
            atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v105[0] = v93[0];
          *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)((char *)v93 + 9);
          uint64_t v106 = v94;
          long long v107 = v95;
          long long v108 = v96;
          long long v109 = v97;
          char v110 = v98;
          uint64_t v111 = v99;
          v112 = v100;
          if (v100) {
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v113 = v101;
          unint64_t v114 = v102;
          char v115 = v103;
          sg_vec_ns::generate_vec_ref((uint64_t)v104, (uint64_t)&v77, (uint64_t)v45, v46, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v116);
          std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v127, (uint64_t)&v116);
          sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v116);
          sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v104);
          sg_vec_ref::begin((sg_vec_ref *)&v127, (uint64_t)&v116);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v91, &v116);
          sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v116);
          sg_vec_ref::end((sg_vec_ref *)&v127, (uint64_t)&v116);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v77, &v116);
          sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v116);
        }
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v91, v46);
        unint64_t v37 = (_OWORD *)((char *)v37 + v46);
      }
      else
      {
        if ((int)v46 >= 0) {
          uint64_t v49 = v46;
        }
        else {
          uint64_t v49 = -(int)v46;
        }
        uint64_t v58 = -v49;
      }
      if (*((void *)&v123 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v123 + 1));
      }
      if ((v48 & 1) == 0) {
        goto LABEL_71;
      }
    }
    uint64_t v58 = (uint64_t)v37;
LABEL_71:
    std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v127);
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    uint64_t v11 = v58;
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if (v100) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
    }
    if (v92) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v92);
    }
    if ((v58 & 0x8000000000000000) == 0 || !v58)
    {
      (*(void (**)(void))(**((void **)a2 + 2) + 144))(*((void *)a2 + 2));
      if ((void)v138)
      {
        int v50 = 0;
        char v51 = (unsigned int *)__p;
        uint64_t v52 = 40 * v138;
        do
        {
          int v53 = lw_future<int>::get(v51);
          if (v53 < 0) {
            break;
          }
          v50 += v53;
          v51 += 10;
          int v53 = v50;
          v52 -= 40;
        }
        while (v52);
      }
      else
      {
        int v53 = 0;
      }
      if (v58 != v53)
      {
        if (v53 < 0) {
          int v54 = v53;
        }
        else {
          int v54 = -5;
        }
        uint64_t v11 = -(uint64_t)-v54;
      }
    }
    if (*((void *)&v138 + 1) && v139 != __p) {
      operator delete(__p);
    }
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  return v11;
}

void sub_21E2FA3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (STACK[0x6D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x6D8]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x700]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x2E0]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x380]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a21);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a41);
  if (STACK[0x960])
  {
    if (a17 != STACK[0x950]) {
      operator delete((void *)STACK[0x950]);
    }
  }
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair(&a61);
  _Unwind_Resume(a1);
}

void sub_21E2FA494()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (STACK[0x740]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x740]);
  }
  JUMPOUT(0x21E2FA468);
}

void *di_log::logger<di_log::log_printer<1151ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1151ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF36920;
  a1[45] = &unk_26CF36A20;
  a1[46] = &unk_26CF36A48;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF36920;
  a1[45] = &unk_26CF369A8;
  a1[46] = &unk_26CF369D0;
  return a1;
}

void sub_21E2FA5B4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1188ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1188ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF36B40;
  a1[45] = &unk_26CF36C40;
  a1[46] = &unk_26CF36C68;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF36B40;
  a1[45] = &unk_26CF36BC8;
  a1[46] = &unk_26CF36BF0;
  return a1;
}

void sub_21E2FA71C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t finally<di_asif::details::table::write(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(uint64_t a1)
{
  long long v3 = *(di_asif::details::table **)(a1 + 40);
  unint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 0x8000000000000000) == 0 || !*(void *)(a1 + 48))
  {
    sg_vec_ns::details::sg_vec_iterator::operator+=(*(void *)a1, v2);
    uint64_t v4 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t v5 = *(void **)(a1 + 24);
      if (*(void *)(*v5 + 352) != *(void *)(*(void *)v4 + 352) || v5[1] != *(void *)(v4 + 8))
      {
        char updated = di_asif::details::table::update_entry_if_bits_in_same_state(v3, *(di_asif::details::ContextASIF **)(a1 + 64), (di_asif::details::table_entry_data *)v4);
        unint64_t v7 = *(unsigned char **)(a1 + 32);
        BOOL v8 = (updated & 1) != 0 || *v7 != 0;
        *unint64_t v7 = v8;
        uint64_t v4 = *(void *)(a1 + 16);
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)v4 + 8);
          uint64_t v10 = *((void *)v3 + 1);
          uint64_t v11 = *(void *)(v10 + 48);
          unsigned int v12 = *(_DWORD *)(v10 + 20);
          unint64_t v13 = *(unsigned __int16 *)(v10 + 18);
          unint64_t v14 = v11 * (v12 / v13);
          unint64_t v15 = *((void *)v3 + 44) / v13;
          ++v11;
          uint64_t v16 = v11
              + v11
              * (((*(void *)(*(void *)v4 + 352)
                 + (*(void *)(v9 + 48) + *(void *)(v9 + 48) * *(void *)(v4 + 8))
                 / (unint64_t)(*(void *)(v9 + 48) + 1)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          uint64_t v17 = *(void **)(a1 + 24);
          uint64_t v18 = *(void *)(*v17 + 8);
          if (v16 != v11
                    + v11
                    * (((*(void *)(*v17 + 352)
                       + (*(void *)(v18 + 48) + *(void *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(void *)(v18 + 48) + 1)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            di_asif::details::table::check_if_map_element_needed(v3, *(di_asif::details::ContextASIF **)(a1 + 64), v16 - 1);
            **(unsigned char **)(a1 + 32) = 0;
            uint64_t v4 = *(void *)(a1 + 16);
          }
        }
      }
    }
    uint64_t v19 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v4 + 16))
    {
      *(void *)(v4 + 8) = *(void *)(v19 + 8);
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v19;
      *(unsigned char *)(v4 + 16) = 1;
    }
  }
  return a1;
}

void *std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[21];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[15];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

uint64_t di_asif::details::table::read(di_asif::details::table *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  uint64_t v5 = MEMORY[0x270FA5388](this);
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t)v6;
  uint64_t v11 = (di_asif::details::table *)v5;
  v231[599] = *MEMORY[0x263EF8340];
  uint64_t v58 = v7[3];
  uint64_t v12 = *v7;
  unint64_t v13 = (std::__shared_weak_count *)v7[1];
  uint64_t v105 = *v7;
  uint64_t v106 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long v107 = *((_OWORD *)v7 + 1);
  *(_OWORD *)&v107[9] = *(_OWORD *)((char *)v7 + 25);
  uint64_t v108 = v7[6];
  long long v109 = *(_OWORD *)(v7 + 7);
  long long v110 = *(_OWORD *)(v7 + 9);
  long long v111 = *(_OWORD *)(v7 + 11);
  char v112 = *((unsigned char *)v7 + 104);
  unint64_t v14 = (std::__shared_weak_count *)v7[15];
  uint64_t v113 = v7[14];
  unint64_t v114 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v13 = v106;
  }
  long long v115 = *((_OWORD *)v7 + 8);
  uint64_t v116 = v7[18];
  char v117 = *((unsigned char *)v7 + 152);
  *(void *)&long long v118 = -78;
  LOBYTE(v158[0]) = 0;
  char v162 = 0;
  uint64_t v163 = v12;
  v164 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v165 + 9) = *(_OWORD *)&v107[9];
  v165[0] = *(_OWORD *)v107;
  long long v167 = v109;
  long long v168 = v110;
  uint64_t v166 = v108;
  char v170 = v112;
  long long v169 = v111;
  uint64_t v171 = v113;
  v172 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v173 = v115;
  char v175 = v117;
  uint64_t v174 = v116;
  v176[0] = v12;
  v176[1] = v106;
  if (v106) {
    atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)v177 + 9) = *(_OWORD *)&v107[9];
  v177[0] = *(_OWORD *)v107;
  long long v179 = v109;
  long long v180 = v110;
  uint64_t v178 = v108;
  long long v181 = v111;
  char v182 = v112;
  uint64_t v183 = v113;
  v184 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v61 = 0;
  char v187 = v117;
  long long v185 = v115;
  uint64_t v186 = v116;
  v188 = v6;
  v189[0] = (uint64_t)&v190;
  v189[1] = 0;
  v189[2] = 16;
  LOBYTE(v191) = 0;
  char v192 = 0;
  v193 = &v196;
  uint64_t v194 = 0;
  uint64_t v195 = 16;
  uint64_t v197 = 0;
  v104[0] = (uint64_t)v158;
  v104[1] = (uint64_t)&v118;
  void v104[2] = (uint64_t)v6;
  int v60 = v6;
  long long v59 = (di_asif::details::table *)v5;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v105, v9))
  {
    *(void *)&long long v103 = di_asif::details::table::get_data_entry_for_offset(v11, *(unint64_t *)&v107[8]);
    *((void *)&v103 + 1) = v15;
    uint64_t v16 = *(void *)(v103 + 8);
    uint64_t v17 = *(void *)(v16 + 48);
    uint64_t v18 = *(unsigned int *)(v16 + 20);
    *(void *)&long long v198 = *(void *)(v103 + 352) + (v17 + v17 * v15) / (unint64_t)(v17 + 1) * v18;
    *((void *)&v198 + 1) = v198 + v18;
    v199[0] = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v105, (uint64_t)&v198, v9, (uint64_t)&v78);
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v78, (uint64_t)&v90))
    {
      *(void *)&long long v226 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v226 + 1) = 29;
      LODWORD(v227) = 16;
      di_log::logger<di_log::log_printer<1441ul>>::logger(&v198, &v226);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"Couldn't trim entry in read ", 28);
      operator<<(&v223);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf((uint64_t)&v198);
      MEMORY[0x223C24910](v224);
      *(void *)&long long v118 = -34;
      uint64_t v4 = 3;
    }
    else
    {
      if (v192
        && !di_asif::details::table_entry_obj::is_physically_contiguous((di_asif::details::table_entry_obj *)&v103, (const di_asif::details::table_entry_obj *)&v191)&& (uint64_t v47 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios((uint64_t)v158), v47 < 0)&& v47)
      {
        *(void *)&long long v73 = v47;
        *((void *)&v73 + 1) = v48;
        uint64_t v74 = v158;
        int v75 = 0;
        v76[0] = 0;
        char v77 = 0;
      }
      else
      {
        long long v191 = v103;
        char v192 = 1;
        uint64_t v4 = *(void *)(v103 + 56) + 16 * *((void *)&v103 + 1);
        BOOL v19 = ref::ref_cnt::get((ref::ref_cnt *)v4);
        *(void *)&long long v226 = &unk_26CF39AF0;
        *((void *)&v226 + 1) = v4;
        LOBYTE(v227) = v19;
        if (v19)
        {
          uint64_t v20 = 0;
        }
        else
        {
          *(void *)&long long v144 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((void *)&v144 + 1) = 139;
          LODWORD(v145[0]) = 16;
          di_log::logger<di_log::log_printer<1409ul>>::logger(&v198, &v144);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"Couldn't lock entry ", 20);
          di_asif::details::operator<<(&v223, &v103);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf((uint64_t)&v198);
          MEMORY[0x223C24910](v224);
          uint64_t v20 = -5;
        }
        unint64_t v21 = atomic_load((unint64_t *)(*(void *)(v191 + 56) + 16 * *((void *)&v191 + 1) + 8));
        *(void *)&long long v73 = v20;
        uint64_t v74 = v158;
        int v75 = v21 >> 62;
        ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)v76, (uint64_t)&v226);
        char v77 = 1;
        ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)&v226);
      }
      long long v118 = v73;
      unint64_t v22 = v73;
      if ((v73 & 0x8000000000000000) != 0 && v118)
      {
LABEL_129:
        uint64_t v4 = 3;
      }
      else
      {
        switch(v75)
        {
          case 0:
          case 2:
            long long v23 = v78;
            if (*((void *)&v78 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)long long v66 = v79[0];
            *(_OWORD *)&v66[9] = *(_OWORD *)((char *)v79 + 9);
            uint64_t v24 = v80;
            uint64_t v25 = v81;
            long long v67 = v82;
            long long v68 = v83;
            char v69 = v84;
            uint64_t v26 = *((void *)&v81 + 1);
            uint64_t v27 = v85;
            uint64_t v28 = v86;
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v70 = v87;
            unint64_t v71 = v88;
            char v72 = v89;
            uint64_t v29 = v90;
            uint64_t v30 = v91;
            if (v91) {
              atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)long long v62 = v92[0];
            *(_OWORD *)&v62[9] = *(_OWORD *)((char *)v92 + 9);
            uint64_t v31 = v93;
            long long v32 = v94;
            uint64_t v33 = v98;
            long long v63 = v95;
            long long v64 = v96;
            char v65 = v97;
            uint64_t v34 = v99;
            if (v99) {
              atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v35 = 0;
            int v36 = 0;
            unint64_t v37 = 0;
            long long v132 = v23;
            v133[0] = *(_OWORD *)v66;
            *(_OWORD *)((char *)v133 + 9) = *(_OWORD *)&v66[9];
            uint64_t v134 = v24;
            *(void *)&long long v135 = v25;
            long long v136 = v67;
            long long v137 = v68;
            char v138 = v69;
            *((void *)&v135 + 1) = v26;
            uint64_t v139 = v27;
            v140 = v28;
            long long v141 = v70;
            unint64_t v142 = v71;
            char v143 = v72;
            uint64_t v119 = v29;
            char v120 = v30;
            v121[0] = *(_OWORD *)v62;
            *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)&v62[9];
            uint64_t v122 = v31;
            long long v123 = v32;
            char v126 = v65;
            long long v124 = v63;
            long long v125 = v64;
            uint64_t v127 = v33;
            long long v128 = v34;
            long long v129 = v100;
            char v131 = v102;
            unint64_t v130 = v101;
            unint64_t v38 = v101;
            LOBYTE(v198) = 0;
            v224[160] = 0;
            while (1)
            {
              BOOL v39 = (const sg_vec_ns::details::sg_vec_iterator *)&v230;
              if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v132, (uint64_t)&v119)) {
                break;
              }
              if (v142 >= v38 || v37 == -1) {
                break;
              }
              if (DIDebugLogsEnabled())
              {
                *(void *)&long long v156 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((void *)&v156 + 1) = 104;
                int v157 = 2;
                di_log::logger<di_log::log_printer<545ul>>::logger(&v226, &v156);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v230, (uint64_t)"sg: ", 4);
                operator<<(&v230);
                std::ostream::~ostream();
                di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v226);
                MEMORY[0x223C24910](v231);
              }
              *(void *)&long long v226 = 0;
              *((void *)&v226 + 1) = v38;
              LOBYTE(v227) = 2;
              trim_sg_to_interval(&v132, (uint64_t)&v226, (uint64_t)&v156);
              int64_t zeros = di_asif::details::table_entry_data::get_zeros(&v103, &v156);
              unint64_t v43 = zeros;
              BOOL v44 = zeros >= 0 || zeros == 0;
              char v45 = v44;
              if (v44)
              {
                BOOL v39 = v42;
                if (!v36) {
                  uint64_t v35 = v42;
                }
                if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v132, (const sg_vec_ns::details::sg_vec_iterator *)&v119, v42, zeros))
                {
                  long long v144 = v132;
                  if (*((void *)&v132 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v132 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  v145[0] = v133[0];
                  *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v133 + 9);
                  long long v147 = v135;
                  long long v148 = v136;
                  long long v149 = v137;
                  char v150 = v138;
                  uint64_t v146 = v134;
                  uint64_t v151 = v139;
                  v152 = v140;
                  if (v140) {
                    atomic_fetch_add_explicit(&v140->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v153 = v141;
                  unint64_t v154 = v142;
                  char v155 = v143;
                  sg_vec_ns::generate_vec_ref((uint64_t)&v144, (uint64_t)&v119, (uint64_t)v39, v43, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v226);
                  std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v198, (uint64_t)&v226);
                  sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v226);
                  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v144);
                  sg_vec_ref::begin((sg_vec_ref *)&v198, (uint64_t)&v226);
                  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v132, &v226);
                  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v226);
                  sg_vec_ref::end((sg_vec_ref *)&v198, (uint64_t)&v226);
                  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v119, &v226);
                  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v226);
                }
                sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v132, v43);
                v37 += v43;
                int v36 = 1;
              }
              else
              {
                if ((int)zeros >= 0) {
                  uint64_t v46 = zeros;
                }
                else {
                  uint64_t v46 = -(int)zeros;
                }
                unint64_t v22 = -v46;
              }
              if (*((void *)&v156 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v156 + 1));
              }
              if ((v45 & 1) == 0) {
                goto LABEL_74;
              }
            }
            if (v36) {
              BOOL v39 = v35;
            }
            else {
              BOOL v39 = 0;
            }
            unint64_t v22 = v37;
LABEL_74:
            std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v198);
            uint64_t v10 = (uint64_t)v60;
            if (v128) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v128);
            }
            uint64_t v11 = v59;
            if (v120) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v120);
            }
            if (v140) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v140);
            }
            if (*((void *)&v132 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v132 + 1));
            }
            *(void *)&long long v118 = v22;
            *((void *)&v118 + 1) = v39;
            goto LABEL_127;
          case 1:
            goto LABEL_124;
          case 3:
            uint64_t v49 = *(void *)(v103 + 8);
            unint64_t v50 = (*(void *)(v103 + 352)
                 + (*(void *)(v49 + 48) + *(void *)(v49 + 48) * *((void *)&v103 + 1))
                 / (unint64_t)(*(void *)(v49 + 48) + 1)
                 * *(unsigned int *)(v49 + 20))
                / *(unsigned __int16 *)(v49 + 18);
            if (!v162)
            {
              unint64_t v22 = 0;
LABEL_87:
              *(void *)&long long v226 = 0;
              *((void *)&v226 + 1) = v11;
              v227 = &v229;
              long long v228 = xmmword_21E39BDD0;
              di_asif::details::table::get_bitmap(v11, v188, v50, 0, (unint64_t *)&v144);
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((atomic_ullong *)&v226, (atomic_ullong *)&v144);
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v144);
              if ((void)v226 && !*(unsigned char *)(v226 + 344))
              {
                ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr((unint64_t *)&v198, (unint64_t *)&v226);
                *((void *)&v198 + 1) = *((void *)&v226 + 1);
                *(void *)v199 = &v199[24];
                *(_OWORD *)&v199[8] = xmmword_21E39BDD0;
                *(void *)&long long v144 = v227;
                *(void *)&long long v132 = &v227[40 * v228];
                boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>((uint64_t *)v199, (const char *)&v144, (uint64_t *)&v132);
                uint64_t v51 = v4;
                char v53 = 1;
              }
              else
              {
                uint64_t v51 = v4;
                uint64_t v52 = std::generic_category();
                char v53 = 0;
                *(void *)&long long v198 = 5;
                *((void *)&v198 + 1) = v52;
              }
              uint64_t v4 = (uint64_t)&v225;
              char v225 = v53;
              di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)&v226);
              if (!v225)
              {
                if ((int)v198 >= 0) {
                  uint64_t v56 = v198;
                }
                else {
                  uint64_t v56 = -(int)v198;
                }
                unint64_t v22 = -v56;
                uint64_t v10 = (uint64_t)v60;
                goto LABEL_122;
              }
              uint64_t v4 = v51;
              if (v162)
              {
                di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)v158);
                char v162 = 0;
              }
              ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(v158, (unint64_t *)&v198);
              v158[1] = *((void *)&v198 + 1);
              v159 = &v161;
              long long v160 = xmmword_21E39BDD0;
              *(void *)&long long v226 = *(void *)v199;
              *(void *)&long long v144 = *(void *)v199 + 320 * *(void *)&v199[8];
              boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>((uint64_t *)&v159, (const char *)&v226, (uint64_t *)&v144);
              uint64_t v10 = (uint64_t)v60;
              char v162 = 1;
              if (v225) {
                di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t((uint64_t)&v198);
              }
              goto LABEL_100;
            }
            if (*(void *)(v158[0] + 40) == (v50
                                             - *((void *)v11 + 44)
                                             / (unint64_t)*(unsigned __int16 *)(*((void *)v11 + 1) + 18))
                                            / (*(void *)(*((void *)v11 + 1) + 48)
                                             * (unint64_t)(*(_DWORD *)(*((void *)v11 + 1) + 20)
                                                                / *(unsigned __int16 *)(*((void *)v11 + 1) + 18))))
            {
              unint64_t v22 = 0;
              goto LABEL_100;
            }
            uint64_t v54 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize((uint64_t)v158);
            unint64_t v22 = v54;
            uint64_t v4 = v55;
            if (v54 < 0 && v54) {
              goto LABEL_122;
            }
            if (!v162) {
              goto LABEL_87;
            }
LABEL_100:
            long long v198 = v78;
            if (*((void *)&v78 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v199 = v79[0];
            *(_OWORD *)&v199[9] = *(_OWORD *)((char *)v79 + 9);
            long long v201 = v81;
            long long v202 = v82;
            long long v203 = v83;
            char v204 = v84;
            uint64_t v200 = v80;
            uint64_t v205 = v85;
            v206 = v86;
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v207 = v87;
            unint64_t v208 = v88;
            char v209 = v89;
            uint64_t v210 = v90;
            v211 = v91;
            if (v91) {
              atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v212[0] = v92[0];
            *(_OWORD *)((char *)v212 + 9) = *(_OWORD *)((char *)v92 + 9);
            long long v214 = v94;
            long long v215 = v95;
            long long v216 = v96;
            char v217 = v97;
            uint64_t v213 = v93;
            uint64_t v218 = v98;
            v219 = v99;
            if (v99) {
              atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v220 = v100;
            unint64_t v221 = v101;
            char v222 = v102;
            if ((void)v160 == *((void *)&v160 + 1))
            {
              boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>((uint64_t *)&v159, (uint64_t)&v159[40 * v160], (const char *)1, (uint64_t)&v198, &v226);
            }
            else
            {
              std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100]((uint64_t)&v159[40 * v160], (uint64_t)&v198);
              *(void *)&long long v160 = v160 + 1;
            }
            if (v219) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v219);
            }
            if (v211) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v211);
            }
            if (v206) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v206);
            }
            if (*((void *)&v198 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v198 + 1));
            }
LABEL_122:
            *(void *)&long long v118 = v22;
            *((void *)&v118 + 1) = v4;
            if ((v22 & 0x8000000000000000) == 0 || !v22)
            {
LABEL_124:
              di_asif::details::table_entry_data::future_read((sg_vec_ns::details::sg_vec_iterator *)&v78, &v103, v10, (uint64_t)&v90, v189, (unint64_t *)&v198);
              long long v118 = v198;
              unint64_t v22 = v198;
              if ((v198 & 0x8000000000000000) == 0 || !v118) {
                v197 += *(void *)v199;
              }
            }
LABEL_127:
            if ((v22 & 0x8000000000000000) != 0 && v22) {
              goto LABEL_129;
            }
            sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v105, v22);
            v61 += v22;
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)v176, (uint64_t)&v105);
            uint64_t v4 = 0;
            break;
          default:
            goto LABEL_127;
        }
      }
      di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::io_result_inserter_t::~io_result_inserter_t((uint64_t)&v73);
    }
    if (v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
    }
    if (v91) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
    }
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    if (*((void *)&v78 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
    }
    if (v4) {
      break;
    }
  }
  if ((v118 & 0x8000000000000000) == 0 || !v118)
  {
    *(void *)&long long v118 = v61;
    *((void *)&v118 + 1) = v58;
  }
  finally<di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(v104);
  di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::~data_entries_vectorizer_t((uint64_t)v158);
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  return v118;
}

void sub_21E2FBBAC(_Unwind_Exception *a1)
{
}

void *di_log::logger<di_log::log_printer<1441ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1441ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF36D60;
  a1[45] = &unk_26CF36E60;
  a1[46] = &unk_26CF36E88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF36D60;
  a1[45] = &unk_26CF36DE8;
  a1[46] = &unk_26CF36E10;
  return a1;
}

void sub_21E2FBEA4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  return a1;
}

void di_asif::details::table_entry_data::future_read(sg_vec_ns::details::sg_vec_iterator *a1@<X2>, void *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9 = *(void *)(*a2 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)&long long v153 = *(void *)(*a2 + 352) + (v10 + v10 * a2[1]) / (unint64_t)(v10 + 1) * v11;
  *((void *)&v153 + 1) = v153 + v11;
  LOBYTE(v154[0]) = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a1, (uint64_t)&v153, a4, (uint64_t)&v72);
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v72, (uint64_t)&v86))
  {
    *a6 = -34;
    a6[2] = 0;
  }
  else
  {
    uint64_t v12 = v72;
    if ((*(void *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(*a2 + 8) + 20))
    {
      unint64_t v13 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v58 = v74[0];
      *(_OWORD *)&v58[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v14 = v75;
      uint64_t v15 = v76;
      uint64_t v16 = v77;
      long long v59 = v78;
      long long v60 = v79;
      char v61 = v80;
      uint64_t v17 = v81;
      uint64_t v18 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = a6;
      long long v62 = v83;
      unint64_t v63 = v84;
      char v64 = v85;
      long long v19 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v54 = v87[0];
      *(_OWORD *)&v54[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v20 = v88;
      long long v21 = v89;
      long long v55 = v90;
      long long v56 = v91;
      char v57 = v92;
      uint64_t v22 = v93;
      long long v23 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v52 = 0;
      uint64_t v24 = 0;
      int v25 = 0;
      unint64_t v26 = 0;
      v112[0] = *(_OWORD *)v58;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v58[9];
      long long v115 = v59;
      long long v116 = v60;
      long long v120 = v62;
      v99[0] = *(_OWORD *)v54;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v54[9];
      long long v103 = v56;
      long long v102 = v55;
      unint64_t v27 = v96;
      uint64_t v110 = v12;
      long long v111 = v13;
      uint64_t v113 = v14;
      *(void *)&long long v114 = v15;
      *((void *)&v114 + 1) = v16;
      char v117 = v61;
      uint64_t v118 = v17;
      uint64_t v119 = v18;
      unint64_t v121 = v63;
      char v122 = v64;
      long long v98 = v19;
      uint64_t v100 = v20;
      long long v101 = v21;
      char v104 = v57;
      uint64_t v105 = v22;
      uint64_t v106 = v23;
      long long v107 = v95;
      char v109 = v97;
      unint64_t v108 = v96;
      LOBYTE(v153) = 0;
      char v166 = 0;
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v110, (uint64_t)&v98))
      {
        if (v121 >= v27 || v26 == -1) {
          break;
        }
        if (DIDebugLogsEnabled())
        {
          *(void *)&long long v169 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((void *)&v169 + 1) = 104;
          LODWORD(v170) = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v135, &v169);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v147, (uint64_t)"sg: ", 4);
          operator<<(&v147);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v135);
          MEMORY[0x223C24910](&v148);
        }
        *(void *)&long long v135 = 0;
        *((void *)&v135 + 1) = v27;
        v136[0] = 2;
        trim_sg_to_interval(&v110, (uint64_t)&v135, (uint64_t)&v149);
        unint64_t v29 = v150;
        uint64_t v30 = *(void *)(*(void *)(*a2 + 56) + 16 * a2[1] + 8);
        unint64_t v31 = *(unsigned int *)(*(void *)(*a2 + 8) + 20);
        long long v32 = v151;
        uint64_t v33 = v152;
        long long v135 = v149;
        if (*((void *)&v149 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)long long v136 = v29;
        *(void *)&v136[8] = (unint64_t)v32 % v31 + (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        *(void *)&v136[16] = v33;
        v136[24] = 0;
        uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(a3 + 16) + 40))(*(void *)(a3 + 16));
        v167[0] = 0;
        v167[1] = v34;
        char v168 = 2;
        trim_sg_to_interval(&v135, (uint64_t)v167, (uint64_t)&v169);
        if (v170)
        {
          (*(void (**)(void *__return_ptr))(**(void **)(a3 + 16) + 128))(v167);
          uint64_t v35 = a5[1];
          if (v35 == a5[2])
          {
            boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>(a5, (_DWORD *)(*a5 + 40 * v35), (const char *)1, v167, &v171);
          }
          else
          {
            lw_future<int>::lw_future(*a5 + 40 * v35, v167);
            ++a5[1];
          }
          v52 += v170;
        }
        int v36 = v151;
        uint64_t v37 = v150;
        if (*((void *)&v169 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v169 + 1));
        }
        if (*((void *)&v135 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v135 + 1));
        }
        BOOL v38 = v37 >= 0 || v37 == 0;
        char v39 = v38;
        if (v38)
        {
          if (!v25) {
            uint64_t v24 = v36;
          }
          if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v110, (const sg_vec_ns::details::sg_vec_iterator *)&v98, v36, v37))
          {
            v123[0] = v110;
            v123[1] = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v124[0] = v112[0];
            *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v112 + 9);
            long long v126 = v114;
            long long v127 = v115;
            long long v128 = v116;
            char v129 = v117;
            uint64_t v125 = v113;
            uint64_t v130 = v118;
            char v131 = v119;
            if (v119) {
              atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v132 = v120;
            unint64_t v133 = v121;
            char v134 = v122;
            sg_vec_ns::generate_vec_ref((uint64_t)v123, (uint64_t)&v98, (uint64_t)v36, v37, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v135);
            std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)&v153, (uint64_t)&v135);
            sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v135);
            sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v123);
            sg_vec_ref::begin((sg_vec_ref *)&v153, (uint64_t)&v135);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v110, &v135);
            sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v135);
            sg_vec_ref::end((sg_vec_ref *)&v153, (uint64_t)&v135);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v98, &v135);
            sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v135);
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v110, v37);
          v26 += v37;
          int v25 = 1;
        }
        else
        {
          if ((int)v37 >= 0) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = -(int)v37;
          }
          unint64_t v50 = -v40;
        }
        if (*((void *)&v149 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v149 + 1));
        }
        if ((v39 & 1) == 0) {
          goto LABEL_60;
        }
      }
      if (v25) {
        uint64_t v37 = (uint64_t)v24;
      }
      else {
        uint64_t v37 = 0;
      }
      unint64_t v50 = v26;
LABEL_60:
      std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v153);
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
      if (*((void *)&v98 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
      }
      if (v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v119);
      }
      if (v111) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      }
      *uint64_t v51 = v50;
      v51[1] = v37;
      if ((v50 & 0x8000000000000000) != 0 && v50) {
        v51[2] = 0;
      }
      else {
        v51[2] = v52;
      }
    }
    else
    {
      uint64_t v41 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)char v65 = v74[0];
      *(_OWORD *)&v65[9] = *(_OWORD *)((char *)v74 + 9);
      uint64_t v42 = v75;
      uint64_t v43 = v76;
      uint64_t v44 = v77;
      long long v66 = v78;
      long long v67 = v79;
      char v68 = v80;
      uint64_t v45 = v81;
      uint64_t v46 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v69 = v83;
      unint64_t v70 = v84;
      char v71 = v85;
      *(void *)&long long v153 = v12;
      *((void *)&v153 + 1) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v154[0] = *(_OWORD *)v65;
      *(_OWORD *)((char *)v154 + 9) = *(_OWORD *)&v65[9];
      long long v158 = v66;
      uint64_t v155 = v42;
      uint64_t v156 = v43;
      uint64_t v157 = v44;
      long long v159 = v67;
      char v160 = v68;
      uint64_t v161 = v45;
      char v162 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v163 = v69;
      unint64_t v164 = v70;
      char v165 = v71;
      long long v135 = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)long long v136 = v87[0];
      *(_OWORD *)&v136[9] = *(_OWORD *)((char *)v87 + 9);
      uint64_t v137 = v88;
      long long v138 = v89;
      long long v139 = v90;
      long long v140 = v91;
      char v141 = v92;
      uint64_t v142 = v93;
      char v143 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v144 = v95;
      unint64_t v145 = v96;
      char v146 = v97;
      unint64_t v47 = for_each_sg_in_vec<io_result_t (&)(sg_entry const&)>((uint64_t (*)(long long *))zero_sg_entry, &v153, &v135, 0xFFFFFFFFFFFFFFFFLL);
      unint64_t v49 = v48;
      if (v143) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v143);
      }
      if (*((void *)&v135 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v135 + 1));
      }
      if (v162) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v162);
      }
      if (*((void *)&v153 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v153 + 1));
      }
      *a6 = v47;
      a6[1] = v49;
      a6[2] = 0;
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
    }
  }
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  if (*((void *)&v86 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v86 + 1));
  }
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
}

void sub_21E2FC8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (STACK[0x788]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x788]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x7B0]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x390]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x430]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a23);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a43);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair(&STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::io_result_inserter_t::~io_result_inserter_t(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      uint64_t v3 = *(void *)(v2 + 6200);
      if (v3 == *(void *)(v2 + 6208))
      {
        boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>((uint64_t *)(v2 + 6192), *(void *)(v2 + 6192) + 24 * v3, (const char *)1, a1 + 32, &v5);
      }
      else
      {
        ref::details::ref_cnt_handle::ref_cnt_handle(*(void *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(void *)(v2 + 6200);
      }
    }
    if (*(unsigned char *)(a1 + 56)) {
      ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)(a1 + 32));
    }
  }
  return a1;
}

uint64_t *finally<di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::$_0>::~finally(uint64_t *a1)
{
  uint64_t v2 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize(*a1);
  if (v2 < 0)
  {
    if (v2)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000) == 0 || !*v4)
      {
        *uint64_t v4 = v2;
        v4[1] = v3;
      }
    }
  }
  return a1;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::~data_entries_vectorizer_t(uint64_t a1)
{
  boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 6192);
  if (*(void *)(a1 + 5520))
  {
    uint64_t v2 = *(void **)(a1 + 5504);
    if ((void *)(a1 + 5528) != v2) {
      operator delete(v2);
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 5448);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 5336);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 5288);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 5176);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(unsigned char *)(a1 + 5160)) {
    di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(a1);
  }
  return a1;
}

uint64_t di_asif::details::table::close(di_asif::details::table *this)
{
  if (!atomic_load((unsigned int *)this + 24)) {
    return 0;
  }
  uint64_t v2 = (uint64_t)this;
  uint64_t v3 = *(void *)(*((void *)this + 1) + 24);
  uint64_t v10 = &unk_26CF2F358;
  uint64_t v11 = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72))(&v12);
  if (*(unsigned char *)(v11 + 8))
  {
    char v5 = 0;
    uint64_t v2 = 4294967290;
  }
  else
  {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    if (v4)
    {
      DiskImage::Context::terminate_di((DiskImage::Context *)&v10);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v8 = exception;
      if ((int)v4 < 0) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = -(int)v4;
      }
      void *exception = &unk_26CF39EE0;
      uint64_t v9 = std::generic_category();
      v8[1] = v4;
      v8[2] = v9;
      *((unsigned char *)v8 + 24) = 0;
      *((unsigned char *)v8 + 48) = 0;
      v8[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    di_asif::details::table::flush((di_asif::details::table *)v2, (di_asif::details::ContextASIF *)&v10);
    char v5 = 1;
  }
  uint64_t v10 = &unk_26CF2F358;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v5) {
    return 0;
  }
  return v2;
}

void *di_log::logger<di_log::log_printer<1513ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1513ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF371A0;
  a1[45] = &unk_26CF372A0;
  a1[46] = &unk_26CF372C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF371A0;
  a1[45] = &unk_26CF37228;
  a1[46] = &unk_26CF37250;
  return a1;
}

void sub_21E2FCE80(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  return a1;
}

unint64_t di_asif::details::map_element::search_for_pattern(void *a1, di_asif::details::table *this, char a3, unint64_t a4, uint64_t a5, int a6)
{
  if (a5 != a4)
  {
    unint64_t range_bits = di_asif::details::table::make_range_bits(this, a4, a5 - a4);
    unsigned int v11 = range_bits;
    unint64_t v12 = HIDWORD(range_bits);
    uint64_t v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      __int16 v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t mismatch_bits = lock_free::bitmap_t::find_mismatch_bits(v13, v11, v12, (unsigned __int8 *)&v17);
    }
    else
    {
      __int16 v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t mismatch_bits = lock_free::bitmap_t::find_match_bits(v13, v11, v12, (unsigned __int8 *)&v16);
    }
    return *((void *)this + 44)
         + *a1
         / (unint64_t)(*(void *)(*((void *)this + 1) + 48) + 1)
         * *(void *)(*((void *)this + 1) + 48)
         * *(unsigned int *)(*((void *)this + 1) + 20)
         + ((mismatch_bits * *(unsigned __int16 *)(*((void *)this + 1) + 18)) >> 1);
  }
  return a4;
}

unint64_t di_asif::details::table::make_range_bits(di_asif::details::table *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = *(unsigned __int16 *)(v3 + 18);
  }
  if (!a3) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 20);
  uint64_t v7 = *(void *)(v3 + 48);
  return ((2
         * ((a2
                         - (*((void *)this + 44)
                          + v7
                          * v6
                          * ((a2 / v4 - *((void *)this + 44) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*((void *)this + 44)
                                   + ((v5 + a2 - v4) / v4 - *((void *)this + 44) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000;
}

uint64_t ref::ref_cnt::take_exclusive@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (atomic_ullong *)this;
  while (1)
  {
    if (!*v4)
    {
      uint64_t v6 = 0;
      atomic_compare_exchange_strong(v4, (unint64_t *)&v6, 0xFFFFFFFFFFFFFFFFLL);
      if (!v6) {
        break;
      }
    }
    this = ref::ref_cnt::wait_fn((ref::ref_cnt *)v4, (const void *)1);
    if ((this & 1) == 0)
    {
      char v7 = 0;
      goto LABEL_7;
    }
  }
  char v7 = 1;
LABEL_7:
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)a3 = &unk_26CF39B10;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 24) = a2;
  return this;
}

BOOL di_asif::details::table_entry_obj::is_physically_contiguous(di_asif::details::table_entry_obj *this, const di_asif::details::table_entry_obj *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(*(void *)this + 8) + 20);
  uint64_t v3 = (*(void *)(*(void *)(*(void *)this + 56) + 16 * *((void *)this + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  uint64_t v4 = (*(void *)(*(void *)(*(void *)a2 + 56) + 16 * *((void *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(*(void *)a2 + 8) + 20);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return v5 || v3 == v4 + v2;
}

uint64_t Backend::get_returned_io_size(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = 40 * v1;
  while (1)
  {
    uint64_t v5 = lw_future<int>::get(v3);
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    uint64_t v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40;
    if (!v4) {
      return v2;
    }
  }
  return v5;
}

size_t di_asif::details::table_entry_data::get_zeros(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  v7[0] = *(void *)(*a1 + 352) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v7[1] = v7[0] + v4;
  char v8 = 2;
  trim_sg_to_interval(a2, (uint64_t)v7, (uint64_t)&v9);
  if (v11)
  {
    bzero(v9, v11);
    size_t v5 = v11;
  }
  else
  {
    size_t v5 = -34;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v5;
}

uint64_t di_asif::details::map_element::flush_locked(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, uint64_t a4)
{
  if (!*((unsigned char *)this + 113)) {
    goto LABEL_13;
  }
  *((unsigned char *)this + 113) = 0;
  uint64_t v6 = *((void *)this + 2);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v9 = *((void *)this + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = v9;
    __int16 v16 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = a4;
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    uint64_t v15 = v9;
    __int16 v16 = 0;
    uint64_t v17 = a4;
  }
  uint64_t v18 = v6;
  uint64_t v19 = a4;
  char v20 = 1;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**((void **)a2 + 2) + 80))(*((void *)a2 + 2), &v15);
  uint64_t v12 = v17;
  if (v17 != v11)
  {
    *((unsigned char *)this + 113) = 1;
    DiskImage::Context::terminate_di(a2);
    if (v11 < 0) {
      a4 = v11;
    }
    else {
      a4 = -v11;
    }
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v12 == v11)
  {
LABEL_13:
    a4 = 0;
    if (a3)
    {
      if (*((unsigned char *)this + 112))
      {
        *((unsigned char *)this + 112) = 0;
        di_asif::details::table::update_map_entry(a3, *(void *)this, *((void *)this + 2));
        a4 = 0;
        if (!*((void *)this + 2))
        {
          uint64_t v13 = *((void *)this + 3);
          if (v13) {
            di_asif::details::table::return_chunk(a3, v13);
          }
          return 0;
        }
      }
    }
  }
  return a4;
}

void sub_21E2FD374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t di_asif::details::map_element::zero_range_in_sg(unint64_t result, di_asif::details::table *this, char **a3)
{
  unint64_t v3 = *(unsigned __int16 *)(*((void *)this + 1) + 18);
  uint64_t v4 = a3[3];
  unint64_t v5 = (unint64_t)v4 / v3 * v3;
  unint64_t v6 = (unint64_t)&v4[(void)a3[2]];
  unint64_t v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    uint64_t v9 = (void *)result;
    unint64_t v10 = (unint64_t)v4 % v3;
    int v11 = *a3;
    do
    {
      unint64_t v12 = di_asif::details::map_element::search_for_pattern(v9, this, 1, v5, v7, 1);
      unint64_t v13 = v12;
      if (v6 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v6;
      }
      unint64_t v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        if ((unint64_t)&(*a3)[a3[2] - v11] >= v14 - (v5 + v10)) {
          size_t v16 = v14 - (v5 + v10);
        }
        else {
          size_t v16 = (size_t)&(*a3)[a3[2] - v11];
        }
        bzero(v11, v16);
      }
      __n128 result = di_asif::details::map_element::search_for_pattern(v9, this, 1, v13, v7, 0);
      unint64_t v5 = result;
      if (result < v14 + v10)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v17 = result - v15;
      }
      v11 += v17;
    }
    while (result < v6);
  }
  return result;
}

void di_asif::details::map_element::load(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, const di_asif::details::table *a3)
{
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *(unsigned int *)(*((void *)a3 + 1) + 20);
  uint64_t v8 = *((void *)this + 2);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  uint64_t v16 = v6;
  unint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  char v21 = 0;
  int v10 = (*(uint64_t (**)(void, uint64_t *))(**((void **)a2 + 2) + 88))(*((void *)a2 + 2), &v16);
  if (v18 != v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v13 = exception;
    if (v10 < 0) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = -v10;
    }
    void *exception = &unk_26CF39EE0;
    unint64_t v15 = std::generic_category();
    v13[1] = v14;
    void v13[2] = v15;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "Can't load bitmap from backend";
  }
  if (*(void *)(*((void *)a3 + 1) + 48)
     * (*(_DWORD *)(*((void *)a3 + 1) + 20)
      / *(unsigned __int16 *)(*((void *)a3 + 1) + 18)))
  {
    unint64_t v11 = 0;
    do
    {
      di_asif::details::map_element::get_block_bits(this, v11);
      v11 += 2;
    }
    while (*(void *)(*((void *)a3 + 1) + 48)
          * (unint64_t)(*(_DWORD *)(*((void *)a3 + 1) + 20)
                             / *(unsigned __int16 *)(*((void *)a3 + 1) + 18)) > v11);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_21E2FD630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

di_asif::details::map_element *di_asif::details::map_element::map_element(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t a4, uint64_t a5, char a6)
{
  *(void *)this = a4;
  uint64_t v9 = *((void *)a3 + 1);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *((void *)this + 1) = *((void *)a3 + 44) + a4 / (v10 + 1) * v10 * v11;
  *((void *)this + 2) = a5;
  *((void *)this + 3) = 0;
  char v12 = a6 ^ 1;
  lock_free::bitmap_dynamically_allocated_t::bitmap_dynamically_allocated_t((void *)this + 4, 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *((void *)this + 15) = 850045863;
  *((_WORD *)this + 56) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  if (v12)
  {
    di_asif::details::map_element::load(this, a2, a3);
  }
  else
  {
    *((_WORD *)this + 56) = 257;
    di_asif::details::table_entry_map::table_entry_map(v14, a3, *(void *)this);
    atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v14[0] + 56) + 16 * v14[1] + 8), 0x8000000000000000);
  }
  return this;
}

void sub_21E2FD750(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  lock_free::bitmap_dynamically_allocated_t::~bitmap_dynamically_allocated_t(v1);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::map_element::close(di_asif::details::map_element *this, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, uint64_t a4)
{
  if ((*(unsigned char *)(*((void *)a2 + 1) + 8) & 1) == 0)
  {
    uint64_t v8 = (std::mutex *)((char *)this + 120);
    std::mutex::lock((std::mutex *)((char *)this + 120));
    int v9 = (*(uint64_t (**)(void, void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2), 0);
    if (v9)
    {
      DiskImage::Context::terminate_di(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      unint64_t v15 = exception;
      if (v9 < 0) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = -v9;
      }
      void *exception = &unk_26CF39EE0;
      unint64_t v17 = std::generic_category();
      v15[1] = v16;
      void v15[2] = v17;
      *((unsigned char *)v15 + 24) = 0;
      *((unsigned char *)v15 + 48) = 0;
      v15[7] = "Can't flush asif on bitmap close, backend flush failed";
    }
    if (a3
      && (di_asif::details::table_entry_map::table_entry_map(&v18, a3, *(void *)this),
          (atomic_fetch_and((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x7FFFFFFFFFFFFFFFuLL) & 0x8000000000000000) != 0))
    {
      int v10 = 1;
    }
    else if (*((unsigned char *)this + 113))
    {
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      if (!*((unsigned char *)this + 112))
      {
        uint64_t v11 = 0;
LABEL_17:
        std::mutex::unlock(v8);
        return v11;
      }
    }
    uint64_t v11 = di_asif::details::map_element::flush_locked(this, a2, a3, a4);
    if (v11) {
      int v12 = v10;
    }
    else {
      int v12 = 0;
    }
    if (a3 && v12)
    {
      di_asif::details::table_entry_map::table_entry_map(&v18, a3, *(void *)this);
      atomic_fetch_or((atomic_ullong *volatile)(*(void *)(v18 + 56) + 16 * v19 + 8), 0x8000000000000000);
    }
    goto LABEL_17;
  }
  return 4294967290;
}

void sub_21E2FD934(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *di_asif::details::dir::load_create_table@<X0>(atomic_ullong *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, ref::details **a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, atomic_ullong *a7@<X8>)
{
  uint64_t v10 = (uint64_t)this;
  unint64_t v19 = a4;
  *a7 = 0;
  if (a4 || a5)
  {
    ref::Allocator<di_asif::details::table,unsigned long long>::allocate((uint64_t)(this + 35), a3, a6, (unint64_t *)&v18);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(a7, &v18);
    this = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v18);
    atomic_ullong v12 = *a7;
    if (*a7) {
      LOBYTE(v12) = *(unsigned char *)(v12 + 520) == 0;
    }
    if (v12 & 1) != 0 || (a6)
    {
      if (!*a7 || (unsigned int v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(unsigned char *)(*a7 + 520))
        {
          if (v19 | (*(void *)(*(void *)(v10 + 152) + 8 * (void)a3) * *(unsigned int *)(v10 + 20)))
          {
            if (v19) {
              unint64_t v14 = v19;
            }
            else {
              unint64_t v14 = *(void *)(*(void *)(v10 + 152) + 8 * (void)a3) * *(unsigned int *)(v10 + 20);
            }
            uint64_t v18 = *(void *)(v10 + 80) * (void)a3;
            unint64_t v19 = v14;
            ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(a7, v10, (void *)a2 + 2, &v19, &v18);
          }
          uint64_t space = di_asif::details::dir_base::allocate_space((atomic_ullong *)v10, a2, 1);
          uint64_t v17 = *(void *)(v10 + 80) * (void)a3;
          uint64_t v18 = space;
          unsigned __int8 v16 = 1;
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(a7, v10, (void *)a2 + 2, (unint64_t *)&v18, &v17, &v16);
        }
      }
    }
  }
  return this;
}

void sub_21E2FDAB8(_Unwind_Exception *a1)
{
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *ref::Allocator<di_asif::details::table,unsigned long long>::allocate@<X0>(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v15 = 0;
  unsigned __int8 v16 = a2;
  ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 520) || v13 && *(unsigned char *)(v13 + 520))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 912) && v14 != (void *)(a1 + 936))
  {
    do
    {
      ref::Allocator<di_asif::details::table,unsigned long long>::allocate_from_empty_pool(a1, (uint64_t)a2, &v11);
      unint64_t v15 = v11;
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((atomic_ullong *)&v13, &v12);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 520)) {
          break;
        }
      }
      min = (unint64_t *)ref::Allocator<di_asif::details::table,unsigned long long>::extract_min((void *)a1);
      if (min)
      {
        unint64_t v15 = min;
        ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem(a1, min, (uint64_t)a2, (unint64_t *)&v11);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    uint64_t v8 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>((uint64_t **)(a1 + 928), v14, (unint64_t *)&v16, (uint64_t *)&v16, (uint64_t *)&v15);
    if (!v9) {
      void v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v13);
}

void sub_21E2FDC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

void ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
}

void sub_21E2FDD14(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E2FDD3C(_Unwind_Exception *a1)
{
}

void ref::tagged_ptr<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_21E2FDD78(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 464)) {
      std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(v2 + 440, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E2FDDA0(_Unwind_Exception *a1)
{
}

unint64_t *ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 520))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *di_log::logger<di_log::log_printer<2061ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2061ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37450;
  a1[45] = &unk_26CF37550;
  a1[46] = &unk_26CF37578;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37450;
  a1[45] = &unk_26CF374D8;
  a1[46] = &unk_26CF37500;
  return a1;
}

void sub_21E2FDF50(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<2071ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2071ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37670;
  a1[45] = &unk_26CF37770;
  a1[46] = &unk_26CF37798;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37670;
  a1[45] = &unk_26CF376F8;
  a1[46] = &unk_26CF37720;
  return a1;
}

void sub_21E2FE0B8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_asif::details::dir::handle_all_failures(di_asif::details::dir *this, di_asif::details::ContextASIF *a2)
{
  int v4 = ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list((uint64_t)this + 2080, 0, 0, 0);
  if (v4 == -1) {
    return 4294967282;
  }
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(void, void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2), 0);
    int v6 = result;
    uint64_t result = (int)result < 0 ? result : -(int)result;
    if (v6) {
      return result;
    }
  }
  int v7 = ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list((uint64_t)this + 280, 0, 0, 0);
  if (v7 == -1) {
    return 4294967282;
  }
  if (v7 != 1) {
    return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(void, void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2), 0);
  int v8 = result;
  uint64_t result = (int)result < 0 ? result : -(int)result;
  if (!v8) {
    return 0;
  }
  return result;
}

uint64_t di_asif::details::dir::flush_dir(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, void **a3)
{
  v47[4] = *MEMORY[0x263EF8340];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  int v6 = (std::mutex *)((char *)this + 3792);
  std::mutex::lock((std::mutex *)((char *)this + 3792));
  long long v7 = *((_OWORD *)this + 234);
  *((_OWORD *)this + 234) = 0u;
  long long v8 = *((_OWORD *)this + 235);
  long long v37 = v7;
  long long v38 = v8;
  *((_OWORD *)this + 235) = 0u;
  long long v9 = v39;
  long long v39 = *((_OWORD *)this + 236);
  *((_OWORD *)this + 236) = v9;
  std::mutex::unlock(v6);
  size_t v10 = (*((void *)this + 20) - *((void *)this + 19) + (unint64_t)*((unsigned __int16 *)this + 9) + 7)
      / *((unsigned __int16 *)this + 9)
      * *((unsigned __int16 *)this + 9);
  uint64_t v11 = malloc_type_valloc(v10, 0xF8ED6DDuLL);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v36 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v36, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v40 = &unk_26CF359B8;
  uint64_t v43 = &v40;
  uint64_t v46 = v11;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v47, (uint64_t)&v40);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](&v40);
  atomic_ullong v12 = v46;
  unint64_t v13 = *((void *)this + 451);
  *((void *)this + 451) = v13 + 1;
  void *v12 = bswap64(v13);
  unint64_t v14 = v12 + 1;
  unint64_t v15 = (unint64_t *)*((void *)this + 19);
  unsigned __int8 v16 = (unint64_t *)*((void *)this + 20);
  while (v15 != v16)
  {
    unint64_t v17 = *v15++;
    *v14++ = bswap64(v17);
  }
  bzero(v14, (size_t)v46 + v10 - (void)v14);
  ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle((uint64_t)this + 2080);
  ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle((uint64_t)this + 280);
  uint64_t v18 = di_asif::details::dir::handle_all_failures(this, a2);
  if (!v18)
  {
    uint64_t v19 = (uint64_t)v46;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
    uint64_t v40 = (void *)v19;
    uint64_t v41 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v42 = v10;
    uint64_t v43 = a3;
    size_t v44 = v10;
    char v45 = 0;
    int v21 = (*(uint64_t (**)(void, void **))(**((void **)a2 + 2) + 80))(*((void *)a2 + 2), &v40);
    if (v10 == v21)
    {
      uint64_t v22 = (unint64_t **)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        long long v23 = 0;
        int v25 = 0;
        uint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        long long v23 = &(*v22)[v39 & 0x1FF];
        uint64_t v24 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        int v25 = (unint64_t *)(*(void *)v24 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      di_asif::details::dir_base::insert_space<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>((atomic_ullong *)this, v22, v23, v24, v25, (uint64_t)a2);
      uint64_t v18 = 1;
    }
    else
    {
      *((void *)this + 451) = v13;
      std::mutex::lock(v6);
      unint64_t v26 = *((void *)this + 472) + *((void *)this + 473);
      uint64_t v27 = *((void *)this + 469);
      uint64_t v28 = (char *)(v27 + 8 * (v26 >> 9));
      if (*((void *)this + 470) == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = *(void *)v28 + 8 * (v26 & 0x1FF);
      }
      uint64_t v30 = (char *)(*((void *)&v37 + 1) + 8 * ((unint64_t)v39 >> 9));
      if ((void)v38 == *((void *)&v37 + 1))
      {
        unint64_t v31 = 0;
        uint64_t v33 = 0;
        long long v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
      }
      else
      {
        unint64_t v31 = (char *)(*(void *)v30 + 8 * (v39 & 0x1FF));
        long long v32 = (char *)(*((void *)&v37 + 1) + 8 * ((*((void *)&v39 + 1) + (void)v39) >> 9));
        uint64_t v33 = (char *)(*(void *)v32 + 8 * ((*((void *)&v39 + 1) + v39) & 0x1FF));
      }
      std::deque<unsigned long long>::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>((void **)this + 468, v28, v29, v30, v31, v32, v33);
      if (v21 >= 0) {
        uint64_t v18 = 4294967291;
      }
      else {
        uint64_t v18 = v21;
      }
      std::mutex::unlock(v6);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v46, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v47);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&v37);
  return v18;
}

void sub_21E2FE590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::mutex::unlock(v22);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](&a21, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v21);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 608);
  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    int v4 = (atomic_ullong *)(a1 + 616);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 616), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 688), &v7);
      while (atomic_load((unint64_t *)(a1 + 608)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

void ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + 784);
  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    int v4 = (atomic_ullong *)(a1 + 792);
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 792), 1uLL);
    v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v7.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    if (atomic_load(v1))
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 864), &v7);
      while (atomic_load((unint64_t *)(a1 + 784)));
    }
    atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (v7.__owns_) {
      std::mutex::unlock(v7.__m_);
    }
  }
}

uint64_t di_asif::details::dir::do_io(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4, int a5)
{
  uint64_t v8 = *((void *)a4 + 18) - *((void *)a3 + 18);
  unint64_t v9 = *((void *)a3 + 3);
  size_t v10 = (std::__shared_weak_count *)*((void *)a3 + 1);
  uint64_t v34 = *(void *)a3;
  uint64_t v35 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v36[0] = *((_OWORD *)a3 + 1);
  uint64_t v11 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v37 = *((void *)a3 + 6);
  long long v38 = *(_OWORD *)((char *)a3 + 56);
  long long v39 = *(_OWORD *)((char *)a3 + 72);
  long long v40 = *(_OWORD *)((char *)a3 + 88);
  char v41 = *((unsigned char *)a3 + 104);
  atomic_ullong v12 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v42 = *((void *)a3 + 14);
  uint64_t v43 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  long long v44 = *((_OWORD *)a3 + 8);
  uint64_t v45 = *((void *)a3 + 18);
  char v46 = *((unsigned char *)a3 + 152);
  int v14 = a5 ^ 1;
  while (1)
  {
    uint64_t v15 = v9 / *((void *)this + 10);
    di_asif::details::dir::get_table(this, a2, v15, v14, 1, (unint64_t *)&v33);
    if (v33 && v33[520])
    {
      if ((a5 & 1) == 0) {
        DiskImage::Context::terminate_di(a2);
      }
      int v16 = 1;
      uint64_t v5 = -5;
      goto LABEL_24;
    }
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v34, a4, *((void *)this + 10) + *((void *)this + 10) * v15, 0, (uint64_t)&v26);
    if (v33 && !v33[520])
    {
      if (a5)
      {
        if (v33[400]) {
          uint64_t v19 = (di_asif::details::table *)(v33 + 40);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v21 = di_asif::details::table::read(v19, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v26, (const sg_vec_ns::details::sg_vec_iterator *)&v30);
        uint64_t v5 = v21;
        if (v21 < 0 && v21) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v33[400]) {
          uint64_t v20 = (di_asif::details::table *)(v33 + 40);
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v22 = di_asif::details::table::write(v20, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v26, (const sg_vec_ns::details::sg_vec_iterator *)&v30);
        uint64_t v5 = v22;
        if ((v22 & 0x8000000000000000) != 0 && v22)
        {
          DiskImage::Context::terminate_di(a2);
LABEL_40:
          int v16 = 1;
          goto LABEL_16;
        }
      }
      unint64_t v17 = v5;
    }
    else
    {
      unint64_t v17 = 0;
      do
      {
        size_t v18 = v28;
        bzero(v26, v28);
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v26, v18);
        v17 += v18;
      }
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v26, (uint64_t)&v30));
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v34, v17);
    int v16 = 0;
    v9 += v17;
    v13 += v17;
LABEL_16:
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
LABEL_24:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v33);
    if (v16) {
      break;
    }
    if (v13 == v11) {
      goto LABEL_43;
    }
  }
  uint64_t v11 = v5;
LABEL_43:
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  return v11;
}

void sub_21E2FEA10(_Unwind_Exception *a1)
{
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(v1 - 256));
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)(v1 - 248));
  _Unwind_Resume(a1);
}

double di_asif::details::asif_extents_iterator_interface::make_val@<D0>(di_asif::details::asif_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*((unsigned char *)this + 32) & 1) + *((void *)this + 3);
  v10[0] = *((void *)this + 5);
  v10[1] = v3;
  char v11 = 2;
  *(void *)&long long v8 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((void *)&v8 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  LOBYTE(v9) = 2;
  unsigned int next_extent = di_asif::details::dir::get_next_extent(*((di_asif::details::dir **)this + 8), *((di_asif::details::ContextASIF **)this + 7), v10, (uint64_t)&v8);
  if (next_extent >= 3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Can't convert ASIF flag.", 5u);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = next_extent;
  return result;
}

uint64_t di_asif::details::dir::get_next_extent(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = 0;
  *(void *)&long long v32 = *a3;
  *((void *)&v32 + 1) = v32;
  uint64_t v29 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  uint64_t v30 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  unsigned __int8 v33 = 2;
  char v31 = 2;
  long long v27 = *(_OWORD *)a3;
  uint64_t v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if (*((void *)&v27 + 1) < (unint64_t)v27) {
          goto LABEL_5;
        }
      }
      else
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
        if ((unint64_t)v27 >= *((void *)&v27 + 1)) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      unint64_t v9 = *((void *)&v27 + 1);
      uint64_t v8 = v27;
      if ((unint64_t)v27 >= *((void *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((void *)&v27 + 1))
      {
LABEL_5:
        if (!boost::icl::identity_element<unsigned long long>::value(void)::_value) {
          break;
        }
        goto LABEL_12;
      }
    }
    if (!((v28 & 1) + ((v28 >> 1) & 1) - 1 - v8 + v9)) {
      break;
    }
LABEL_12:
    if ((v28 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    unint64_t v12 = v11 * *((unsigned __int16 *)this + 9);
    di_asif::details::dir::get_table(this, a2, v12 / *((void *)this + 10), 0, 1, (unint64_t *)&v26);
    if (v26 && v26[520])
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      uint64_t v21 = std::generic_category();
      exception[1] = 4294967291;
      exception[2] = v21;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't load table to get extents";
    }
    if (v26 && !v26[520])
    {
      if (v26[400]) {
        uint64_t v15 = (di_asif::details::table *)(v26 + 40);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t next_extent = di_asif::details::table::get_next_extent(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }
    else
    {
      uint64_t next_extent = 0;
      unint64_t v14 = (*((void *)this + 10) + *((void *)this + 10) * (v12 / *((void *)this + 10)) + 1)
          / *((unsigned __int16 *)this + 9);
      if (v14 >= v9) {
        unint64_t v14 = v9;
      }
      uint64_t v29 = v11;
      uint64_t v30 = v14;
      char v31 = 2;
    }
    if (next_extent == v7)
    {
LABEL_36:
      *((void *)&v32 + 1) = v30;
      unsigned __int8 v33 = 2;
      long long v22 = v27;
      uint64_t v23 = v28;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      long long v27 = v24;
      LOBYTE(v28) = v25;
      char v18 = 1;
      uint64_t v7 = next_extent;
      goto LABEL_40;
    }
    if (v33)
    {
      if (v33 == 3)
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if (*((void *)&v32 + 1) >= (unint64_t)v32) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
        if ((unint64_t)v32 < *((void *)&v32 + 1)) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v17 = v32;
      if ((unint64_t)v32 < *((void *)&v32 + 1) && (unint64_t)(v32 + 1) < *((void *)&v32 + 1))
      {
LABEL_35:
        if (!((v33 & 1) + (uint64_t)(((v33 >> 1) & 1) - 1) - v17 + v16)) {
          goto LABEL_36;
        }
        goto LABEL_39;
      }
    }
    if (!boost::icl::identity_element<unsigned long long>::value(void)::_value) {
      goto LABEL_36;
    }
LABEL_39:
    char v18 = 0;
LABEL_40:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v26);
  }
  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(unsigned char *)(a4 + 16) = v33;
  return v7;
}

void sub_21E2FEDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

uint64_t di_asif::details::table::get_next_extent(di_asif::details::table *a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)a3;
  unint64_t v6 = *(void *)(a3 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a3 + 16);
  v64[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v64 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v5 + 1;
  }
  uint64_t data_entry_for_offset = (void *)di_asif::details::table::get_data_entry_for_offset(a1, v8 * *(unsigned __int16 *)(*((void *)a1 + 1) + 18));
  unint64_t v11 = atomic_load((unint64_t *)(data_entry_for_offset[7] + 16 * v10 + 8));
  *(void *)unint64_t v49 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    uint64_t v12 = data_entry_for_offset[1];
    di_asif::details::table::get_bitmap(a1, a2, (data_entry_for_offset[44]+ (*(void *)(v12 + 48) + *(void *)(v12 + 48) * v10)/ (unint64_t)(*(void *)(v12 + 48) + 1)* *(unsigned int *)(v12 + 20))/ *(unsigned __int16 *)(v12 + 18), 0, v57);
    uint64_t v13 = *((void *)a1 + 1);
    if (v57[0])
    {
      if (*(unsigned char *)(v57[0] + 224)) {
        uint64_t v15 = (di_asif::details::map_element *)(v57[0] + 40);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v14 = *(unsigned __int16 *)(v13 + 18);
    *(void *)unint64_t v49 = di_asif::details::map_element::get_block_bits(v15, 2* ((v8 * v14- (*((void *)a1 + 44)+ *(void *)(v13 + 48)* *(unsigned int *)(v13 + 20)* ((v8 * v14 / v14 - *((void *)a1 + 44) / v14)/ (*(void *)(v13 + 48)* (unint64_t)(*(_DWORD *)(v13 + 20) / v14)))))/ v14));
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)v57);
  }
  unint64_t v16 = 0;
  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5) {
          goto LABEL_18;
        }
      }
      else if (v6 > v5)
      {
        goto LABEL_18;
      }
    }
    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_18:
      if (!(v6 - v5 + (v7 & 1) + (int)(((v7 >> 1) & 1) - 1))) {
        goto LABEL_42;
      }
      goto LABEL_22;
    }
    if (!boost::icl::identity_element<unsigned long long>::value(void)::_value) {
      goto LABEL_42;
    }
LABEL_22:
    if ((v7 & 2) != 0) {
      unint64_t v17 = v5;
    }
    else {
      unint64_t v17 = v5 + 1;
    }
    uint64_t v18 = *((void *)a1 + 1);
    unint64_t v19 = v17 * *(unsigned __int16 *)(v18 + 18);
    if (v19 >= *(void *)(v18 + 80) + *((void *)a1 + 44)) {
      goto LABEL_42;
    }
    uint64_t v20 = (void *)di_asif::details::table::get_data_entry_for_offset(a1, v19);
    long long v22 = v20;
    uint64_t v23 = v21;
    long long v62 = v20;
    uint64_t v63 = v21;
    char v24 = v7;
    unint64_t v50 = v6;
    uint64_t v25 = *(unsigned __int16 *)(*((void *)a1 + 1) + 18);
    uint64_t v26 = v20[1];
    unint64_t v27 = (*(void *)(v26 + 48) + *(void *)(v26 + 48) * v21) / (unint64_t)(*(void *)(v26 + 48) + 1);
    uint64_t v28 = *(unsigned int *)(v26 + 20);
    if (v20[44] + v28 + v27 * v28 >= v25 + v25 * (v6 + (int)((v7 & 1) - 1))) {
      unint64_t v29 = v25 + v25 * (v6 + (int)((v7 & 1) - 1));
    }
    else {
      unint64_t v29 = v20[44] + v28 + v27 * v28;
    }
    uint64_t v30 = (ref::ref_cnt *)(v20[7] + 16 * v21);
    BOOL v31 = ref::ref_cnt::get(v30);
    v60[0] = &unk_26CF39AF0;
    v60[1] = v30;
    BOOL v61 = v31;
    if (!v31)
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      di_log::logger<di_log::log_printer<2311ul>>::logger(v57, &v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Couldn't lock entry ", 20);
      di_asif::details::operator<<(v59, &v62);
      di_log::logger<di_log::log_printer<2311ul>>::~logger((uint64_t)v57);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      uint64_t v43 = std::generic_category();
      exception[1] = 5;
      exception[2] = v43;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Can't lock entry";
    }
    unint64_t v32 = atomic_load((unint64_t *)(v22[7] + 16 * v23 + 8));
    unint64_t v33 = v32 >> 62;
    if (v49[0] == v33)
    {
      uint64_t v34 = *((void *)a1 + 1);
      unint64_t v16 = v29 / *(unsigned __int16 *)(v34 + 18);
      goto LABEL_40;
    }
    if (v33 != 3) {
      break;
    }
    uint64_t v35 = v62[1];
    di_asif::details::table::get_bitmap(a1, a2, (v62[44]+ (*(void *)(v35 + 48) + *(void *)(v35 + 48) * v63)/ (unint64_t)(*(void *)(v35 + 48) + 1)* *(unsigned int *)(v35 + 20))/ *(unsigned __int16 *)(v35 + 18), 0, &v54);
    if (!v54 || *(unsigned char *)(v54 + 344))
    {
      *(void *)&long long v55 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v55 + 1) = 40;
      int v56 = 16;
      di_log::logger<di_log::log_printer<2321ul>>::logger(v57, &v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Can't read bitmap", 17);
      di_log::logger<di_log::log_printer<2321ul>>::~logger((uint64_t)v57);
      long long v44 = __cxa_allocate_exception(0x40uLL);
      *long long v44 = &unk_26CF39EE0;
      uint64_t v45 = std::generic_category();
      v44[1] = 5;
      v44[2] = v45;
      *((unsigned char *)v44 + 24) = 0;
      *((unsigned char *)v44 + 48) = 0;
      v44[7] = "Can't read bitmap";
    }
    int v36 = *(unsigned char *)(v54 + 224) ? (void *)(v54 + 40) : 0;
    unint64_t v37 = di_asif::details::map_element::search_for_pattern(v36, a1, v49[0], v19, v29, 0);
    unint64_t v38 = *(unsigned __int16 *)(*((void *)a1 + 1) + 18);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v54);
    unint64_t v16 = v37 / v38;
    if (v37 < v29) {
      break;
    }
    uint64_t v34 = *((void *)a1 + 1);
LABEL_40:
    v51[0] = v5;
    v51[1] = v50;
    char v52 = v24;
    *(_DWORD *)char v53 = v64[0];
    *(_DWORD *)&v53[3] = *(_DWORD *)((char *)v64 + 3);
    unint64_t v39 = v29 / *(unsigned __int16 *)(v34 + 18);
    *(void *)&long long v55 = v17;
    *((void *)&v55 + 1) = v39;
    LOBYTE(v56) = 2;
    boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)v51, (uint64_t)&v55, (uint64_t)v57);
    unint64_t v5 = v57[0];
    unint64_t v6 = v57[1];
    unsigned int v7 = v58;
    ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v60);
  }
  ref::details::ref_cnt_handle::~ref_cnt_handle((ref::details::ref_cnt_handle *)v60);
LABEL_42:
  unint64_t v40 = *(void *)a3;
  if ((*(unsigned char *)(a3 + 16) & 2) == 0) {
    ++v40;
  }
  *(void *)a4 = v40;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = 2;
  return *(void *)v49;
}

void sub_21E2FF39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<2311ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2311ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37890;
  a1[45] = &unk_26CF37990;
  a1[46] = &unk_26CF379B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37890;
  a1[45] = &unk_26CF37918;
  a1[46] = &unk_26CF37940;
  return a1;
}

void sub_21E2FF510(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<2321ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2321ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37AB0;
  a1[45] = &unk_26CF37BB0;
  a1[46] = &unk_26CF37BD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37AB0;
  a1[45] = &unk_26CF37B38;
  a1[46] = &unk_26CF37B60;
  return a1;
}

void sub_21E2FF678(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_asif::details::dir::unmap(uint64_t a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  di_asif::details::dir::make_unmap_iterators(a1, a3, a4, (uint64_t)&v32);
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 184);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    unint64_t v10 = val * *(unsigned __int16 *)(a1 + 18);
    di_asif::details::dir::get_table((di_asif::details::dir *)a1, a2, v10 / *(void *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(unsigned char *)(v31 + 520))
    {
      if (*(unsigned char *)(v31 + 400)) {
        uint64_t v15 = v31 + 40;
      }
      else {
        uint64_t v15 = 0;
      }
      di_asif::details::table::unmap(v15, a2, a3, a4, &v18);
      uint64_t v34 = v19;
      uint64_t v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        unint64_t val = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v32);
        uint64_t v36 = v16;
      }
      int v12 = 0;
      goto LABEL_37;
    }
    if (v31)
    {
      if (*(unsigned char *)(v31 + 520)) {
        uint64_t v11 = 4294967291;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        di_asif::details::table::make_unmap_iterators(a3, a4, *(unsigned int *)(a1 + 20), *(unsigned __int16 *)(a1 + 18), v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), *(void *)(a1 + 80) + v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80), (uint64_t)&v18);
        while ((void)v18 != v25
             || *((void *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (void)v18 + 16 * *((void *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          unint64_t v20 = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v18);
          uint64_t v21 = v13;
        }
        uint64_t v34 = v19;
        uint64_t v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          unint64_t val = di_asif::details::unmap_iterator_t::make_val((di_asif::details::unmap_iterator_t *)&v32);
          uint64_t v36 = v14;
        }
        int v12 = 2;
        goto LABEL_37;
      }
      int v12 = 1;
      uint64_t v4 = v11;
    }
    else
    {
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v4 = 0;
      int v12 = 1;
    }
LABEL_37:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v31);
    if ((v12 | 2) != 2) {
      return v4;
    }
  }
  return 0;
}

uint64_t di_asif::details::dir::flush(di_asif::details::dir *this, di_asif::details::ContextASIF *a2, void **a3)
{
  unint64_t v6 = (std::mutex *)((char *)this + 3528);
  std::mutex::lock((std::mutex *)((char *)this + 3528));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::wait_for_idle((uint64_t)this + 2080);
  ref::Allocator<di_asif::details::table,unsigned long long>::wait_for_idle((uint64_t)this + 280);
  unsigned int v7 = atomic_exchange((atomic_uint *volatile)this + 898, 0);
  int v8 = (*(uint64_t (**)(void, void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2), 0);
  if (v8) {
    goto LABEL_2;
  }
  uint64_t v9 = di_asif::details::dir::handle_all_failures(this, a2);
  if (v9)
  {
LABEL_8:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v11 = (unint64_t *)*((void *)this + 16);
  int v12 = (unint64_t *)*((void *)this + 17);
  if (v11 == v12)
  {
    uint64_t v9 = 0;
    if (v7) {
      goto LABEL_22;
    }
LABEL_25:
    if (*((void ***)this + 450) == a3)
    {
LABEL_27:
      if (!v7 && (v9 & 0x80000000) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_6;
      }
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v9 = di_asif::details::dir::flush_dir(this, a2, a3);
    goto LABEL_27;
  }
  uint64_t v9 = 0;
  unint64_t v13 = 0;
  do
  {
    ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>::lock_if_tag(v11, v13 / *((void *)this + 10), (unint64_t *)&v16);
    if (v16 && !v16[520])
    {
      if (v16[400]) {
        uint64_t v14 = (di_asif::details::table *)(v16 + 40);
      }
      else {
        uint64_t v14 = 0;
      }
      BOOL v15 = di_asif::details::table::flush(v14, a2);
      if (v7) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = v15;
      }
    }
    v13 += *((void *)this + 10);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v16);
    ++v11;
  }
  while (v11 != v12);
  if (!v7) {
    goto LABEL_25;
  }
LABEL_22:
  int v8 = (*(uint64_t (**)(void, void))(**((void **)a2 + 2) + 16))(*((void *)a2 + 2), 0);
  if (!v8) {
    goto LABEL_26;
  }
LABEL_2:
  if (v8 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = -v8;
  }
LABEL_5:
  atomic_fetch_or((atomic_uint *volatile)this + 898, v7);
LABEL_6:
  std::mutex::unlock(v6);
  return v9;
}

void sub_21E2FFBF4()
{
}

void di_asif::details::dir::dir(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  void v15[5] = *MEMORY[0x263EF8340];
  int v12 = (void *)di_asif::details::dir_base::dir_base(a1, a2, a4, a5);
  void *v12 = &unk_26CF34E78;
  v12[11] = &unk_26CF38D88;
  v12[12] = v12;
  v12[14] = v12 + 11;
  v12[15] = a3;
  std::vector<ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>>::vector(v12 + 16, (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  std::vector<unsigned long long>::vector((void *)(a1 + 152), (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  *(void *)(a1 + 176) = a4;
  unint64_t v13 = (a4
       - 1
       + (a5 - 1 + (unint64_t)a6) / a5 * a5
       + (a5 + 7 + 8 * ((unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 80) - 1) / *(void *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(void *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = v13 * a4;
  v15[3] = 0;
  ref::Allocator<di_asif::details::table,unsigned long long>::Allocator(a1 + 280, 2, 0, (uint64_t)v15);
}

void sub_21E3000EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void *a14, std::thread *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v27, 0);
  MEMORY[0x223C249A0](v27, 0x1020C407A7143E5);
  std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::~__value_func[abi:ne180100](v29);
  std::mutex::~mutex(v26);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(v25 + 3744));
  std::mutex::~mutex(v30);
  std::condition_variable::~condition_variable(a9);
  std::thread::~thread(a15);
  std::mutex::~mutex((std::mutex *)(v25 + 3528));
  ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator(a10);
  ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator(a11);
  space_allocators::FixedSize::~FixedSize(v28);
  uint64_t v32 = *a12;
  if (*a12)
  {
    *(void *)(v25 + 160) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *a13;
  if (*a13)
  {
    *(void *)(v25 + 136) = v33;
    operator delete(v33);
  }
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void sub_21E300214()
{
}

uint64_t di_asif::details::dir_base::dir_base(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  *(void *)a1 = &unk_26CF37CC8;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3 >> 3;
  unint64_t v5 = a3 / a4;
  unint64_t v6 = 4 * a3;
  if (v6 < v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6 / v5;
  }
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = di_asif::details::dir_base::calc_num_real_elements((di_asif::details::dir_base *)a1);
  unint64_t v9 = (*(void *)(a1 + 48) + v8) / (unint64_t)(*(void *)(a1 + 48) + 1);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  unint64_t v10 = v8 - v9;
  unint64_t v11 = v10 * *(unsigned int *)(a1 + 20);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  return a1;
}

unint64_t di_asif::details::dir::load<std::__wrap_iter<unsigned long long *>>(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4;
  v31[4] = *MEMORY[0x263EF8340];
  size_t v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  unint64_t v10 = (unint64_t *)malloc_type_valloc(v9, 0xF8ED6DDuLL);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v24 = (unint64_t *)&unk_26CF359B8;
  uint64_t v27 = (void **)&v24;
  uint64_t v30 = v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)&v24);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](&v24);
  unint64_t v11 = v30;
  int v12 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v26 = v9;
  uint64_t v27 = a2;
  size_t v28 = v9;
  char v29 = 0;
  int v13 = (*(uint64_t (**)(uint64_t, unint64_t **))(*(void *)a1 + 88))(a1, &v24);
  if (v9 != v13)
  {
    unint64_t v20 = __cxa_allocate_exception(0x40uLL);
    uint64_t v21 = v20;
    if (v13 >= 0) {
      uint64_t v22 = 4294967291;
    }
    else {
      uint64_t v22 = v13;
    }
    *unint64_t v20 = &unk_26CF39EE0;
    uint64_t v23 = std::generic_category();
    v21[1] = v22;
    uint64_t v21[2] = v23;
    *((unsigned char *)v21 + 24) = 0;
    *((unsigned char *)v21 + 48) = 0;
    v21[7] = "Can't load asif dir table";
  }
  unint64_t v14 = *v11;
  if (v6)
  {
    BOOL v15 = v11 + 1;
    do
    {
      unint64_t v16 = *v15++;
      *a5++ = bswap64(v16);
      --v6;
    }
    while (v6);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v30, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v31);
  return bswap64(v14);
}

void sub_21E3004D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

unint64_t di_asif::details::dir::get_version(unint64_t this, Backend *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  unint64_t v10 = &v16;
  unint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = 0;
  uint64_t v12 = 8;
  int v13 = a2;
  uint64_t v14 = 8;
  char v15 = 0;
  LODWORD(this) = (*(uint64_t (**)(unint64_t, unint64_t **))(*(void *)this + 88))(this, &v10);
  if (this != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v8 = exception;
    if ((this & 0x80000000) == 0) {
      this = 4294967291;
    }
    else {
      this = this;
    }
    void *exception = &unk_26CF39EE0;
    size_t v9 = std::generic_category();
    v8[1] = this;
    v8[2] = v9;
    *((unsigned char *)v8 + 24) = 0;
    *((unsigned char *)v8 + 48) = 0;
    v8[7] = "Can't load asif dir version";
  }
  unint64_t v5 = bswap64(v16);
  unint64_t v16 = v5;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v5;
}

void sub_21E300630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *di_asif::details::operator<<(void *result, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = "uninit";
      uint64_t v3 = 6;
      goto LABEL_3;
    case 1:
      uint64_t v2 = "fully";
      uint64_t v3 = 5;
      goto LABEL_3;
    case 2:
      uint64_t v2 = "unmapped";
      uint64_t v3 = 8;
      goto LABEL_3;
    case 3:
      uint64_t v2 = "has_bitmap";
      uint64_t v3 = 10;
LABEL_3:
      double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void di_asif::details::dir::update_entry_for_table(di_asif::details::dir *this, unint64_t a2, unint64_t a3)
{
  *(void *)(*((void *)this + 19) + 8 * (a2 / *((void *)this + 10))) = a3 / *((unsigned int *)this + 5);
  atomic_store(1u, (unsigned int *)this + 898);
}

void *di_asif::details::dir::trim_last_unused_extents(di_asif::details::dir *this, di_asif::details::ContextASIF *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)(*(uint64_t (**)(di_asif::details::dir *))(*(void *)this + 16))(this);
  v5[0] = &unk_26CF352D8;
  v5[1] = a2;
  v5[3] = v5;
  space_allocators::FixedSize::trim_largest(v3, (uint64_t)v5);
  return std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](v5);
}

void sub_21E30079C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void space_allocators::FixedSize::trim_largest(void *a1, uint64_t a2)
{
  if (a1[11])
  {
    char v4 = 0;
    unint64_t v5 = (uint64_t **)(a1 + 9);
    uint64_t v6 = (uint64_t **)(a1 + 10);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = *v6;
      size_t v9 = v6;
      if (*v6)
      {
        do
        {
          unint64_t v10 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v10 = (uint64_t **)v9[2];
          BOOL v11 = *v10 == (uint64_t *)v9;
          size_t v9 = v10;
        }
        while (v11);
      }
      if ((uint64_t *)((char *)v10[4] + *a1) != (uint64_t *)a1[12]) {
        break;
      }
      uint64_t v12 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          int v13 = v7;
          uint64_t v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          int v13 = (uint64_t *)v12[2];
          BOOL v11 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (v11);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(v5, v13);
      operator delete(v13);
      uint64_t v14 = a1[11];
      a1[12] -= *a1;
      char v4 = 1;
    }
    while (v14);
    if ((v4 & 1) != 0 && *(void *)(a2 + 24))
    {
      if (std::function<int ()(unsigned long long)>::operator()(a2, a1[12]))
      {
        *(void *)&long long v15 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((void *)&v15 + 1) = 41;
        int v16 = 16;
        di_log::logger<di_log::log_printer<158ul>>::logger(v17, &v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"trim largest: size change callback failed with ", 47);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf((uint64_t)v17);
        MEMORY[0x223C24910](&v19);
      }
    }
  }
}

void sub_21E300934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<158ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void di_asif::header::header(di_asif::header *this, Backend *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if ((unint64_t)(*(uint64_t (**)(Backend *))(*(void *)a2 + 40))(a2) > 0x1FF) {
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v4 = (*(uint64_t (**)(Backend *))(*(void *)a2 + 40))(a2);
  void *exception = &unk_26CF37F28;
  exception[1] = "asif_header";
  exception[2] = 512;
  exception[3] = v4;
}

void sub_21E300BC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *di_asif::header::init(di_asif::header *this, const char *a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v4, v14, 1);
  *(_DWORD *)this = 2003069043;
  *((_DWORD *)this + 1) = bswap32(*((_DWORD *)a2 + 1));
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  di_asif::header_flags::header_flags(v14, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v14[0];
  *((void *)this + 2) = bswap64(*((void *)a2 + 2));
  *((void *)this + 3) = bswap64(*((void *)a2 + 3));
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = bswap64(*((void *)a2 + 6));
  *((void *)this + 7) = bswap64(*((void *)a2 + 7));
  *((_DWORD *)this + 16) = bswap32(*((_DWORD *)a2 + 16));
  *((_WORD *)this + 34) = bswap32(*((unsigned __int16 *)a2 + 34)) >> 16;
  double result = di_asif::header::total_segments_t::total_segments_t(v14, *((unsigned __int16 *)a2 + 35));
  *((_WORD *)this + 35) = v14[0];
  *((void *)this + 9) = bswap64(*((void *)a2 + 9));
  if (*((_DWORD *)this + 1) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unsupported ASIF version ", 25);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }
  if ((*((_DWORD *)this + 2) - 1048577) <= 0xFFF0004E)
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Invalid ASIF header size";
LABEL_15:
    unsigned int v12 = 152;
    goto LABEL_19;
  }
  unint64_t v6 = *((unsigned __int16 *)this + 34);
  if (!*((_WORD *)this + 34))
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }
  unsigned int v7 = *((_DWORD *)this + 16);
  if (v7 < v6 || v7 % v6)
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    unsigned int v12 = 22;
LABEL_19:
    DiskImagesRuntimeException::DiskImagesRuntimeException(v9, v10, v12);
  }
  if ((v6 & 0x1FF) != 0)
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }
  unint64_t v8 = *((void *)this + 7);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Max sector count is too large";
    goto LABEL_18;
  }
  if (v8 < *((void *)this + 6))
  {
    size_t v9 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v10 = "Sector count is too large";
    goto LABEL_18;
  }
  return result;
}

void sub_21E300E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 di_asif::header::header(di_asif::header *this, __n128 *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(__n128 *)this = *a2;
  __n128 result = a2[1];
  __n128 v3 = a2[2];
  __n128 v4 = a2[4];
  *((__n128 *)this + 3) = a2[3];
  *((__n128 *)this + 4) = v4;
  *((__n128 *)this + 1) = result;
  *((__n128 *)this + 2) = v3;
  return result;
}

char *di_asif::header::write(di_asif::header *this, char *a2)
{
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((void *)a2 + 2) = bswap64(*((void *)this + 2));
  *((void *)a2 + 3) = bswap64(*((void *)this + 3));
  *((_OWORD *)a2 + 2) = *((_OWORD *)this + 2);
  *((void *)a2 + 6) = bswap64(*((void *)this + 6));
  *((void *)a2 + 7) = bswap64(*((void *)this + 7));
  *((_DWORD *)a2 + 16) = bswap32(*((_DWORD *)this + 16));
  *((_WORD *)a2 + 34) = bswap32(*((unsigned __int16 *)this + 34)) >> 16;
  *((_WORD *)a2 + 35) = *((_WORD *)this + 35);
  *((void *)a2 + 9) = bswap64(*((void *)this + 9));
  return a2 + 80;
}

uint64_t di_asif::header::header(uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  *(_DWORD *)a1 = 2003069043;
  int v18 = 2003069043;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", 2003069043, &v18, 1);
  *(void *)(a1 + 4) = 0x20000000001;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 68) = a7;
  di_asif::header::total_segments_t::total_segments_t((_WORD *)(a1 + 70), 0);
  *(void *)(a1 + 72) = 0;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (unint64_t v14 = a4 * a7 + 2 * a6, __CFADD__(a4 * a7, 2 * a6)))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF header calculation overflow", 0x16u);
  }
  if (v14 <= a5 * a7) {
    unint64_t v14 = a5 * a7;
  }
  *(void *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + 32) = *a3;
  return a1;
}

void di_asif::header::write_header(di_asif::header *this, Backend *a2)
{
}

void sub_21E301174(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t Backend::write(Backend *this, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  BOOL v11 = a2;
  unsigned int v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  char v16 = 0;
  uint64_t v9 = (*(uint64_t (**)(Backend *, char **))(*(void *)this + 96))(this, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_21E30123C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

di_asif::meta_header *di_asif::meta_header::meta_header(di_asif::meta_header *this, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)this = 1635018093;
  int v7 = 1635018093;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", 1635018093, &v7, 1);
  *((_DWORD *)this + 1) = 1;
  int v8 = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", 1, &v8, 1);
  *((_DWORD *)this + 2) = 512;
  int v9 = 512;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", 512, &v9, 1);
  *(void *)((char *)this + 12) = a2;
  *(void *)((char *)this + 20) = a3;
  return this;
}

void *di_asif::meta_header::write_header(di_asif::meta_header *this, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t a4)
{
  v32[4] = *MEMORY[0x263EF8340];
  int v8 = malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v29[0] = (uint64_t)&unk_26CF359B8;
  v29[3] = (uint64_t)v29;
  unint64_t v31 = v8;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)v29);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v29);
  int v9 = v31;
  *unint64_t v31 = *(_DWORD *)this;
  v9[1] = bswap32(*((_DWORD *)this + 1));
  void v9[2] = bswap32(*((_DWORD *)this + 2));
  *(void *)(v9 + 3) = bswap64(*(void *)((char *)this + 12));
  *(void *)(v9 + 5) = bswap64(*(void *)((char *)this + 20));
  unint64_t v10 = v31;
  int64_t v11 = (char *)v31 - (char *)(v9 + 7) + 512;
  if (v11 >= 1) {
    bzero(v9 + 7, v11);
  }
  uint64_t v12 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)&long long v23 = v10;
  *((void *)&v23 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = 512;
  uint64_t v25 = a4;
  uint64_t v26 = 512;
  char v27 = 0;
  sg_vec::sg_vec(v29, &v23);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  sg_vec_ref::begin((sg_vec_ref *)v30, (uint64_t)&v23);
  sg_vec_ref::end((sg_vec_ref *)v30, (uint64_t)&v20);
  uint64_t v13 = di_asif::details::dir::do_io(a3, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v23, (const sg_vec_ns::details::sg_vec_iterator *)&v20, 0);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (v13 < 0)
  {
    uint64_t v14 = v13;
    if (v13)
    {
      int v18 = __cxa_allocate_exception(0x40uLL);
      void *v18 = &unk_26CF39EE0;
      uint64_t v19 = std::generic_category();
      v18[1] = v14;
      void v18[2] = v19;
      *((unsigned char *)v18 + 24) = 0;
      *((unsigned char *)v18 + 48) = 0;
      v18[7] = "Failed to write metadata header";
    }
  }
  sg_vec::~sg_vec((sg_vec *)v29);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v31, 0);
  return std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v32);
}

void sub_21E301594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sg_vec::~sg_vec((sg_vec *)&a49);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)(v50 - 96), 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v49);
  _Unwind_Resume(a1);
}

di_asif::meta_header *di_asif::meta_header::meta_header(di_asif::meta_header *this, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t a4)
{
  v37[4] = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  int v8 = (const char *)malloc_type_valloc(0x200uLL, 0xF8ED6DDuLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v34[0] = (uint64_t)&unk_26CF359B8;
  v34[3] = (uint64_t)v34;
  uint64_t v36 = v8;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)v34);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v34);
  int v9 = v36;
  uint64_t v10 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = 512;
  uint64_t v29 = a4;
  uint64_t v30 = 512;
  char v31 = 0;
  sg_vec::sg_vec(v34, &v27);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)&v27);
  unint64_t v11 = *((void *)a3 + 15);
  unint64_t v12 = v33;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v12 > v11)
  {
    uint64_t v20 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v20 = &unk_26CF39EE0;
    uint64_t v21 = std::generic_category();
    v20[1] = 152;
    v20[2] = v21;
    *((unsigned char *)v20 + 24) = 0;
    *((unsigned char *)v20 + 48) = 0;
    v20[7] = "Metadata offset is invalid";
  }
  sg_vec_ref::begin((sg_vec_ref *)v35, (uint64_t)&v27);
  sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)&v24);
  uint64_t v13 = di_asif::details::dir::do_io(a3, a2, (const sg_vec_ns::details::sg_vec_iterator *)&v27, (const sg_vec_ns::details::sg_vec_iterator *)&v24, 1);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (v13 < 0 && v13)
  {
    uint64_t v22 = __cxa_allocate_exception(0x40uLL);
    void *v22 = &unk_26CF39EE0;
    long long v23 = std::generic_category();
    v22[1] = v13;
    v22[2] = v23;
    *((unsigned char *)v22 + 24) = 0;
    *((unsigned char *)v22 + 48) = 0;
    v22[7] = "ASIF meta header failed to read";
  }
  di_asif::meta_header::init(this, v36, a3);
  for (uint64_t i = 28; i != 512; ++i)
  {
    if (v36[i])
    {
      char v16 = __cxa_allocate_exception(0x40uLL);
      *char v16 = &unk_26CF39EE0;
      unint64_t v17 = std::generic_category();
      v16[1] = 152;
      void v16[2] = v17;
      *((unsigned char *)v16 + 24) = 0;
      *((unsigned char *)v16 + 48) = 0;
      v16[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }
  sg_vec::~sg_vec((sg_vec *)v34);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v36, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v37);
  return this;
}

void sub_21E301980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a9);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a29);
  sg_vec::~sg_vec((sg_vec *)&a49);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)(v50 - 112), 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v49);
  _Unwind_Resume(a1);
}

uint64_t di_asif::meta_header::init(di_asif::meta_header *this, const char *a2, di_asif::details::dir *a3)
{
  int v6 = *(_DWORD *)a2;
  int v14 = 1635018093;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v6, &v14, 1);
  *(_DWORD *)this = 1635018093;
  int v7 = bswap32(*((_DWORD *)a2 + 1));
  int v15 = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v7, &v15, 1);
  *((_DWORD *)this + 1) = 1;
  int v8 = bswap32(*((_DWORD *)a2 + 2));
  int v16 = 512;
  uint64_t result = smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", v8, &v16, 1);
  *((_DWORD *)this + 2) = 512;
  unint64_t v10 = bswap64(*(void *)(a2 + 12));
  *(void *)((char *)this + 12) = v10;
  *(void *)((char *)this + 20) = bswap64(*(void *)(a2 + 20));
  if (v10 > (unint64_t)*((unsigned int *)a3 + 5) - 512)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }
  if (v10 % *((unsigned __int16 *)a3 + 9))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unint64_t v12 = "ASIF meta header data is unaligned";
LABEL_6:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v12, 0x98u);
  }
  return result;
}

uint64_t di_asif::Metadata::read_num_blocks(di_asif::Metadata *this, di_asif::details::ContextASIF *a2)
{
  if (!*(void *)(*(void *)this + 72)) {
    return 0;
  }
  di_asif::Metadata::read_metadata_headers(this, a2, (uint64_t)&v4);
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2);
  if (v4)
  {
    unint64_t v5 = v4;
    operator delete(v4);
  }
  return v2;
}

di_asif::meta_header *di_asif::Metadata::read_metadata_headers@<X0>(di_asif::Metadata *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v6 = (unsigned int *)*((void *)this + 1);
  unint64_t v15 = *(void *)(*(void *)this + 72) * v6[5];
  uint64_t result = std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long>((di_asif::meta_header **)a3, a2, (di_asif::details::dir *)v6, (uint64_t *)&v15);
LABEL_2:
  for (uint64_t i = result; ; *(void *)(a3 + 8) = i)
  {
    *(void *)(a3 + 8) = i;
    if (!*((void *)i - 1)) {
      break;
    }
    unint64_t v15 = 0;
    uint64_t v10 = *(void *)this;
    uint64_t v9 = *((void *)this + 1);
    unint64_t v11 = *((void *)i - 1) * *(unsigned int *)(v9 + 20);
    unint64_t v15 = v11;
    uint64_t v12 = *(unsigned __int16 *)(v9 + 18);
    if (v11 < *(void *)(v10 + 48) * v12 || *(void *)(v10 + 56) * v12 <= v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      int v14 = std::generic_category();
      exception[1] = 152;
      exception[2] = v14;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }
    if ((unint64_t)i >= *(void *)(a3 + 16))
    {
      uint64_t result = std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long const&>((di_asif::meta_header **)a3, a2, (di_asif::details::dir *)v9, (uint64_t *)&v15);
      goto LABEL_2;
    }
    uint64_t result = di_asif::meta_header::meta_header(i, a2, (di_asif::details::dir *)v9, v11);
    uint64_t i = (di_asif::meta_header *)((char *)i + 28);
  }
  return result;
}

void sub_21E301D08(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void di_asif::Metadata::read(di_asif::details::dir **this@<X0>, di_asif::details::ContextASIF *a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  v32[66] = *MEMORY[0x263EF8340];
  if (*((void *)*this + 9))
  {
    di_asif::Metadata::read_metadata_entries((di_asif::Metadata *)this, a2, &v24);
    int v6 = (uint64_t *)v24;
    int v7 = (uint64_t *)v25;
    if (v24 == v25) {
      goto LABEL_18;
    }
    do
    {
      sg_vec::sg_vec((uint64_t *)&keys, v6);
      int v8 = this[1];
      sg_vec_ref::begin((sg_vec_ref *)v32, (uint64_t)&values);
      sg_vec_ref::end((sg_vec_ref *)v32, (uint64_t)&v21);
      uint64_t v9 = di_asif::details::dir::do_io(v8, a2, (const sg_vec_ns::details::sg_vec_iterator *)&values, (const sg_vec_ns::details::sg_vec_iterator *)&v21, 1);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v9 < 0 && v9)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &unk_26CF39EE0;
        int v18 = std::generic_category();
        exception[1] = v9;
        exception[2] = v18;
        *((unsigned char *)exception + 24) = 0;
        *((unsigned char *)exception + 48) = 0;
        exception[7] = "ASIF: failed to deserialize metadata";
      }
      sg_vec::~sg_vec((sg_vec *)&keys);
      v6 += 6;
    }
    while (v6 != v7);
    uint64_t v10 = v24;
    if (v24 == v25)
    {
LABEL_18:
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      do
      {
        v11 += LODWORD(v10->__shared_weak_owners_);
        v10 += 2;
      }
      while (v10 != v25);
    }
    CFIndex v12 = v11;
    uint64_t v13 = malloc_type_valloc(v11, 0xF8ED6DDuLL);
    if (!v13)
    {
      uint64_t v19 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v20 = std::bad_alloc::bad_alloc(v19);
      __cxa_throw(v20, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    values = &unk_26CF359B8;
    p_values = &values;
    keys = v13;
    std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v31, (uint64_t)&values);
    std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](&values);
    int v14 = v24;
    unint64_t v15 = v25;
    if (v24 != v25)
    {
      int v16 = 0;
      do
      {
        memcpy((char *)keys + v16, v14->__vftable, v14->__shared_weak_owners_);
        v16 += LODWORD(v14->__shared_weak_owners_);
        v14 += 2;
      }
      while (v14 != v15);
    }
    cf::deserialize_from_xml_plist((UInt8 *)keys, v12, a3);
    std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&keys, 0);
    std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v31);
    keys = &v24;
    std::vector<sg_entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&keys);
  }
  else
  {
    keys = @"internal metadata";
    v31[0] = @"user metadata";
    cf::make_empty_dict((CFMutableDictionaryRef *)&v21);
    cf::make_empty_dict((CFMutableDictionaryRef *)&v24);
    values = v21;
    long long v27 = v24;
    cf::make_dict((const void **)&keys, (const void **)&values, 2, a3);
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v24);
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v21);
  }
}

void sub_21E302048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
}

const void **di_asif::Metadata::default_metadata@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  keys[0] = @"internal metadata";
  keys[1] = @"user metadata";
  cf::make_empty_dict((CFMutableDictionaryRef *)&v5);
  cf::make_empty_dict((CFMutableDictionaryRef *)&v4);
  values[0] = v5;
  values[1] = v4;
  cf::make_dict((const void **)keys, (const void **)values, 2, a1);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v4);
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&v5);
}

void sub_21E302358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  __n128 v3 = va_arg(va1, const void *);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

void di_asif::Metadata::read_metadata_entries(di_asif::Metadata *this@<X0>, di_asif::details::ContextASIF *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  di_asif::Metadata::read_metadata_headers(this, a2, (uint64_t)&v5);
  if (v6 != (void *)v5)
  {
    if (malloc_type_valloc(*(void *)(v5 + 12), 0xF1341ED1uLL)) {
      operator new();
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    __n128 v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_21E302544(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_21E30257C()
{
}

void *di_log::logger<di_log::log_printer<2831ul>>::logger(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2831ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37F60;
  a1[45] = &unk_26CF38060;
  a1[46] = &unk_26CF38088;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37F60;
  a1[45] = &unk_26CF37FE8;
  a1[46] = &unk_26CF38010;
  return a1;
}

void sub_21E3026B4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<2828ul>>::logger(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<2828ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF38180;
  a1[45] = &unk_26CF38280;
  a1[46] = &unk_26CF382A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF38180;
  a1[45] = &unk_26CF38208;
  a1[46] = &unk_26CF38230;
  return a1;
}

void sub_21E30281C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  return a1;
}

const void **di_asif::Metadata::write(const void **result, di_asif::details::ContextASIF *a2, CFPropertyListRef propertyList, Backend **a4)
{
  v66[4] = *MEMORY[0x263EF8340];
  if (propertyList)
  {
    int v6 = (di_asif::details::dir **)result;
    int v7 = *result;
    int v8 = (unsigned int *)result[1];
    unint64_t v9 = v8[5];
    unint64_t v10 = *((void *)*result + 9) * v9;
    uint64_t v11 = *((unsigned __int16 *)v8 + 9);
    if (!v10) {
      unint64_t v10 = (v7[7] * v11 - v9) / v9 * v9;
    }
    if (v10 < v7[6] * v11)
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Not enough space for metadata", 0x1Cu);
    }
    cf::serialize_to_xml_plist(propertyList, (const __CFData **)v63);
    unint64_t v12 = (unint64_t)v63[1];
    CFTypeRef cf = v63[0];
    v63[0] = 0;
    CFAutoRelease<__CFData const*>::~CFAutoRelease(v63);
    uint64_t v13 = *v6;
    int v14 = v6[1];
    uint64_t v15 = *((unsigned int *)v14 + 5);
    size_t v16 = v15 - 512;
    unint64_t v51 = v12;
    unint64_t v17 = v12 + v15 - 512 - 1;
    unint64_t v18 = v17 / (v15 - 512);
    if (v18 * v15 > v10 + v15 - *((void *)*v6 + 6) * *((unsigned __int16 *)v14 + 9))
    {
      uint64_t v44 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v44 = &unk_26CF39EE0;
      uint64_t v45 = std::generic_category();
      v44[1] = 28;
      v44[2] = v45;
      *((unsigned char *)v44 + 24) = 0;
      *((unsigned char *)v44 + 48) = 0;
      v44[7] = "Not enough space for metadata";
    }
    if (v16 <= v17)
    {
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v21 = v18 - 1;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      unint64_t v48 = v18;
      unint64_t v49 = v21;
      char v46 = a4;
      size_t v47 = v12 % v16;
      size_t v50 = v15 - 512;
      do
      {
        if (v21 == v20)
        {
          uint64_t v22 = 0;
          long long v23 = v6[1];
          uint64_t v24 = v10 - v21 * *((unsigned int *)v23 + 5);
          size_t v16 = v47;
        }
        else
        {
          long long v23 = v6[1];
          unint64_t v25 = *((unsigned int *)v23 + 5);
          uint64_t v24 = v10 - v20 * v25;
          uint64_t v22 = (v24 - v25) / v25;
        }
        size_t v26 = v16 - 1;
        di_asif::meta_header::meta_header((di_asif::meta_header *)v61, (v16 - 1 + *((unsigned __int16 *)v23 + 9)) / *((unsigned __int16 *)v23 + 9) * *((unsigned __int16 *)v23 + 9), v22);
        di_asif::meta_header::write_header((di_asif::meta_header *)v61, a2, v6[1], v24);
        long long v27 = a2;
        if (v51 - v16 >= v19) {
          unint64_t v28 = v19;
        }
        else {
          unint64_t v28 = v51 - v16;
        }
        unint64_t v29 = *((unsigned __int16 *)v6[1] + 9);
        uint64_t v30 = (char *)malloc_type_valloc((v26 + v29) / v29 * v29, 0xF8ED6DDuLL);
        if (!v30)
        {
          uint64_t v38 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          uint64_t v39 = std::bad_alloc::bad_alloc(v38);
          __cxa_throw(v39, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        v63[0] = &unk_26CF359B8;
        v63[3] = v63;
        char v65 = v30;
        std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v66, (uint64_t)v63);
        std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v63);
        char v31 = v65;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v31, &BytePtr[v28], v16);
        unint64_t v33 = *((unsigned __int16 *)v6[1] + 9);
        if (v16 % v33)
        {
          bzero(&v65[v16], v33 - v16 % v33);
          unint64_t v33 = *((unsigned __int16 *)v6[1] + 9);
        }
        uint64_t v34 = (uint64_t)v65;
        uint64_t v35 = *((void *)details::get_dummy_shared_ptr() + 1);
        *(void *)&long long v55 = v34;
        *((void *)&v55 + 1) = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v56 = (v26 + v33) / v33 * v33;
        uint64_t v57 = v24 + 512;
        size_t v58 = v56;
        char v59 = 0;
        sg_vec::sg_vec((uint64_t *)v63, &v55);
        a2 = v27;
        if (*((void *)&v55 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
        }
        uint64_t v36 = v6[1];
        sg_vec_ref::begin((sg_vec_ref *)v64, (uint64_t)&v55);
        sg_vec_ref::end((sg_vec_ref *)v64, (uint64_t)v52);
        uint64_t v37 = di_asif::details::dir::do_io(v36, v27, (const sg_vec_ns::details::sg_vec_iterator *)&v55, (const sg_vec_ns::details::sg_vec_iterator *)v52, 0);
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
        if (*((void *)&v55 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
        }
        if (v37 < 0 && v37)
        {
          uint64_t v40 = __cxa_allocate_exception(0x40uLL);
          *uint64_t v40 = &unk_26CF39EE0;
          uint64_t v41 = std::generic_category();
          v40[1] = v37;
          v40[2] = v41;
          *((unsigned char *)v40 + 24) = 0;
          *((unsigned char *)v40 + 48) = 0;
          v40[7] = "Failed to write metadata";
        }
        sg_vec::~sg_vec((sg_vec *)v63);
        std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v65, 0);
        std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v66);
        ++v20;
        unint64_t v21 = v49;
        size_t v16 = v50;
        v19 += v50;
      }
      while (v48 != v20);
      uint64_t v13 = *v6;
      a4 = v46;
    }
    if (!*((void *)v13 + 9))
    {
      *((void *)v13 + 9) = v10 / *((unsigned int *)v6[1] + 5);
      di_asif::header::write_header(v13, *a4);
    }
    return CFAutoRelease<__CFData const*>::~CFAutoRelease(&cf);
  }
  return result;
}

void sub_21E302E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
}

void DiskImageASIF::get_used_extents(DiskImageASIF *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v14 = (uint64_t *)&v15;
  if (*(void *)di_asif::header::get_dir_offset((DiskImageASIF *)((char *)this + 32), *((void *)this + 22)))
  {
    __n128 v4 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(DiskImageASIF *))(*(void *)this + 136))(this);
    uint64_t v5 = *((void *)this + 44);
    uint64_t v6 = *((void *)this + 45);
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      do
      {
        unint64_t v9 = *(void *)(v5 + 8 * (void)v8) * *((unsigned int *)this + 24);
        unint64_t v13 = v9;
        if (v9)
        {
          di_asif::details::dir::get_extents_for_table<std::insert_iterator<std::set<unsigned long long>>>((atomic_ullong *)this + 25, v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(&v14, &v13, (uint64_t *)&v13);
        }
        int v8 = (ref::details **)((char *)v8 + 1);
        v7 += 8;
      }
      while (v5 + v7 != v6);
    }
    unint64_t v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    uint64_t v11 = a2 + 1;
    uint64_t v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      void v10[2] = v11;
      int v14 = (uint64_t *)&v15;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    *a2 = v11;
    if (v4) {
LABEL_12:
    }
      (*(void (**)(di_asif::details::ContextASIF *))(*(void *)v4 + 40))(v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
LABEL_13:
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy((uint64_t)&v14, v15);
}

void sub_21E303030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

atomic_ullong *di_asif::details::dir::get_extents_for_table<std::insert_iterator<std::set<unsigned long long>>>(atomic_ullong *a1, di_asif::details::ContextASIF *a2, ref::details **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  di_asif::details::dir::load_create_table(a1, a2, a3, a4, 0, 1, (atomic_ullong *)&v11);
  if (v11 && !v11[520])
  {
    if (v11[400]) {
      unint64_t v9 = (di_asif::details::table *)(v11 + 40);
    }
    else {
      unint64_t v9 = 0;
    }
    di_asif::details::table::get_table_extents<std::insert_iterator<std::set<unsigned long long>>>(v9, (uint64_t)a2, a5, a6);
  }
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v11);
}

void sub_21E3030F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void *DiskImageASIF::insert_free_extents_to_allocator(void *result, void *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (a2[2])
  {
    int v8 = a2 + 1;
    unint64_t v9 = (void *)a2[1];
    if (v9)
    {
      do
      {
        unint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v10 = (void *)v8[2];
        BOOL v11 = *v10 == (void)v8;
        int v8 = v10;
      }
      while (v11);
    }
    unint64_t v12 = v10[4] + a4;
    uint64_t result = (void *)(*(uint64_t (**)(void))(result[25] + 16))();
    if (result[12] <= v12) {
      result[12] = v12;
    }
  }
  uint64_t v15 = (void *)*a2;
  unint64_t v13 = a2 + 1;
  int v14 = v15;
  if (v15 != v13)
  {
    do
    {
      uint64_t v16 = v14[4];
      atomic_fetch_add(v7 + 26, 1uLL);
      long long v21 = a3;
      uint64_t v22 = a4;
      if ((v16 - a3) % a4) {
        unint64_t v17 = (v16 - a3) / a4 + 1;
      }
      else {
        unint64_t v17 = (v16 - a3) / a4;
      }
      v20[0] = a3;
      v20[1] = v17;
      v20[2] = a4;
      uint64_t result = di_asif::details::dir::insert_space_no_update<boost::range_detail::integer_iterator_with_step<unsigned long long>>((uint64_t)(v7 + 25), &v21, (uint64_t)v20);
      unint64_t v18 = (void *)v14[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          unint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v14[2];
          BOOL v11 = *v19 == (void)v14;
          int v14 = v19;
        }
        while (!v11);
      }
      a3 = v16 + a4;
      int v14 = v19;
    }
    while (v19 != v13);
  }
  return result;
}

void *di_asif::details::dir::insert_space_no_update<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t a1, long long *a2, uint64_t a3)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v7 = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v11[3] = 0;
  space_allocators::FixedSize::insert<boost::range_detail::integer_iterator_with_step<unsigned long long>>(v5, (uint64_t *)&v9, &v7, (uint64_t)v11);
  return std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](v11);
}

void sub_21E30331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void DiskImageASIF::DiskImageASIF(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF34EB8;
  *(void *)(a1 + 16) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 2003069043;
  *(void *)(a1 + 36) = *(void *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 16);
  long long v10 = *(_OWORD *)(a3 + 32);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 94) = *(void *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 48) = v9;
  *(_WORD *)(a1 + 102) = 0;
  *(void *)(a1 + 104) = *(void *)(a3 + 72);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a4;
  uint64_t v12 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(void *)(a1 + 184) = v12;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v14 = *(unsigned __int16 *)(a3 + 68);
  unsigned int v15 = *(_DWORD *)(a3 + 64);
  v16[0] = &unk_26CF383F8;
  v16[1] = a1;
  v16[3] = v16;
  di_asif::details::dir::dir(a1 + 200, a1, v13 * v14, v15, v14, a5, 2);
}

void sub_21E303628(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  di_asif::details::dir::~dir(v3);
  std::mutex::~mutex(v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void DiskImageASIF::DiskImageASIF(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, void *a6, uint64_t *a7, _OWORD *a8)
{
  v18[5] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF34EB8;
  *(void *)(a1 + 16) = *a6;
  uint64_t v15 = a6[1];
  *(void *)(a1 + 24) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  di_asif::header_flags::header_flags(&v17, *((unsigned __int8 *)a7 + 1));
  di_asif::header::header(a1 + 32, &v17, a8, a4, a5, a3, a2);
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 184) = v16;
  v18[0] = &unk_26CF383F8;
  v18[1] = a1;
  v18[3] = v18;
  di_asif::details::dir::dir(a1 + 200, a1, a2 * a5, a3, a2, 0x200u, 2);
}

{
  DiskImageASIF::DiskImageASIF(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_21E3039D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  di_asif::details::dir::~dir(v15);
  std::mutex::~mutex(v14);
  int v17 = *(std::__shared_weak_count **)(v13 + 24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::internal_metadata_set_key_uuid(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  di_asif::Metadata::read((di_asif::details::dir **)(a1 + 4056), v6, &theDict);
  long long v7 = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v20 = std::generic_category();
    exception[1] = 152;
    exception[2] = v20;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(v7) != TypeID)
  {
    long long v21 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    uint64_t v22 = cf::CFUtilException::CFUtilException(v21);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  uint64_t v12 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    uint64_t v23 = 4294967284;
    goto LABEL_14;
  }
  uint64_t v13 = operator new(0x28uLL);
  __p = v13;
  long long v31 = xmmword_21E3A0B60;
  _OWORD *v13 = 0u;
  v13[1] = 0u;
  *(void *)((char *)v13 + 29) = 0;
  boost::uuids::to_chars<char *>(a3, v13);
  BOOL v14 = addCFStringToDict(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  if (!v14)
  {
    uint64_t v12 = "ASIF: can't set requested uuid";
    uint64_t v23 = 150;
LABEL_14:
    uint64_t v24 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v24 = &unk_26CF39EE0;
    unint64_t v25 = std::generic_category();
    v24[1] = v23;
    v24[2] = v25;
    *((unsigned char *)v24 + 24) = 0;
    *((unsigned char *)v24 + 48) = 0;
    v24[7] = v12;
  }
  CFIndex v15 = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutableCopy(v10, v15 + 1, theDict);
  __p = v16;
  if (!v16)
  {
    size_t v26 = __cxa_allocate_exception(0x40uLL);
    *size_t v26 = &unk_26CF39EE0;
    long long v27 = std::generic_category();
    v26[1] = 4294967284;
    v26[2] = v27;
    *((unsigned char *)v26 + 24) = 0;
    *((unsigned char *)v26 + 48) = 0;
    v26[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(v16, @"internal metadata", value);
  di_asif::Metadata::write((const void **)(a1 + 4056), v6, __p, (Backend **)(a1 + 16));
  unsigned int v17 = (*(uint64_t (**)(uint64_t, di_asif::details::ContextASIF *, void))(*(void *)a1 + 176))(a1, v6, 0);
  if (v17)
  {
    unint64_t v28 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v28 = &unk_26CF39EE0;
    unint64_t v29 = std::generic_category();
    v28[1] = v17;
    v28[2] = v29;
    *((unsigned char *)v28 + 24) = 0;
    *((unsigned char *)v28 + 48) = 0;
    v28[7] = "ASIF: failed to write metadata";
  }
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&__p);
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&value);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(void *)v6 + 40))(v6);
}

void sub_21E303E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  __cxa_free_exception(v19);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a18);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::get_dir_latest_offset(DiskImageASIF *this, Backend *a2, const di_asif::header *a3)
{
  uint64_t v5 = 0;
  int v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    char v10 = v9;
    long long v11 = *(Backend **)di_asif::header::get_dir_offset((di_asif::header *)a2, v5);
    if (v11)
    {
      int64_t version = di_asif::details::dir::get_version((unint64_t)this, v11);
      if (!v6 || v7 < version)
      {
        int v6 = 1;
        uint64_t v8 = v5;
        int64_t v7 = version;
      }
    }
    char v9 = 0;
    uint64_t v5 = 1;
  }
  while ((v10 & 1) != 0);
  return v8;
}

uint64_t DiskImageASIF::void_stackable_identifier(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  __n128 v3 = (std::once_flag::_State_type *)(a1 + 4072);
  v5[0] = a1;
  v5[1] = &v6;
  v5[2] = a2;
  if (atomic_load_explicit((atomic_ullong *volatile)v3, memory_order_acquire) != -1)
  {
    uint64_t v8 = v5;
    int64_t v7 = &v8;
    std::__call_once(v3, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::void_stackable_identifier(std::shared_ptr<Backend> &)::$_0 &&>>);
  }
  if (v6 < 0) {
    return v6;
  }
  else {
    return -v6;
  }
}

uint64_t DiskImageASIF::flush(uint64_t a1, Backend **a2, int a3)
{
  int v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  int64_t v7 = *(void ***)di_asif::header::get_dir_offset((di_asif::header *)(a1 + 32), *(void *)(a1 + 176));
  uint64_t v8 = v7;
  if (!v7)
  {
    unint64_t v9 = *(unsigned __int16 *)(a1 + 100);
    uint64_t v10 = *(void *)(a1 + 176);
    uint64_t v11 = *(void *)(a1 + 320);
    unint64_t v12 = *(void *)(a1 + 280);
    dir_offset = (void *)di_asif::header::get_dir_offset((di_asif::header *)(a1 + 32), v10);
    uint64_t v8 = (void **)(v9
                 + 511
                 - ((int)v9 + 511) % v9
                 + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    void *dir_offset = v8;
  }
  uint64_t v14 = di_asif::details::dir::flush((di_asif::details::dir *)(a1 + 200), (di_asif::details::ContextASIF *)a2, v8);
  uint64_t v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 == 1)
    {
      uint64_t v16 = *(void *)(a1 + 176);
      if (v16 == 1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16 + 1;
      }
      *(void *)(a1 + 176) = v17;
    }
    if (v7)
    {
      uint64_t v15 = (*(uint64_t (**)(Backend *, void))(*(void *)a2[2] + 16))(a2[2], 2 * (a3 == 2));
    }
    else
    {
      uint64_t v15 = (*(uint64_t (**)(Backend *, void))(*(void *)a2[2] + 16))(a2[2], 0);
      if (!v15) {
        di_asif::header::write_header((di_asif::header *)(a1 + 32), a2[2]);
      }
    }
  }
  std::mutex::unlock(v6);
  return v15;
}

void sub_21E304184(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void DiskImageASIF::get_extents_iterator_interface()
{
}

uint64_t DiskImageASIF::get_user_data@<X0>(di_asif::details::dir **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"user metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      uint64_t v10 = cf::CFUtilException::CFUtilException(exception);
    }
    CFTypeID v7 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v7)
    {
      uint64_t v11 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFGetTypeID(Value);
      unint64_t v12 = cf::CFUtilException::CFUtilException(v11);
    }
    CFRetain(Value);
    *a2 = Value;
  }
  else
  {
    cf::make_empty_dict((CFMutableDictionaryRef *)&v13);
    *a2 = v13;
    uint64_t v13 = 0;
    CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v13);
  }
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(void *)v4 + 40))(v4);
}

void sub_21E304408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::write_user_data(di_asif::details::dir **this, const __CFDictionary *a2)
{
  uint64_t v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v10 = std::generic_category();
    exception[1] = 4294967284;
    exception[2] = v10;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], Count, theDict);
  CFPropertyListRef propertyList = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    void *v11 = &unk_26CF39EE0;
    unint64_t v12 = std::generic_category();
    v11[1] = 4294967284;
    v11[2] = v12;
    *((unsigned char *)v11 + 24) = 0;
    *((unsigned char *)v11 + 48) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }
  CFDictionarySetValue(MutableCopy, @"user metadata", a2);
  di_asif::Metadata::write((const void **)this + 507, v4, propertyList, (Backend **)this + 2);
  unsigned int v7 = (*((uint64_t (**)(di_asif::details::dir **, di_asif::details::ContextASIF *, uint64_t))*this + 22))(this, v4, 2);
  if (v7)
  {
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &unk_26CF39EE0;
    uint64_t v14 = std::generic_category();
    v13[1] = v7;
    void v13[2] = v14;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&propertyList);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return (*(uint64_t (**)(di_asif::details::ContextASIF *))(*(void *)v4 + 40))(v4);
}

void sub_21E3046E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::internal_metadata_get_key_uuid(di_asif::details::dir **this, const __CFString *a2)
{
  uint64_t v4 = (di_asif::details::ContextASIF *)(*((uint64_t (**)(di_asif::details::dir **))*this + 17))(this);
  di_asif::Metadata::read(this + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v11 = std::generic_category();
    exception[1] = 152;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }
  if (CFGetTypeID(Value) != TypeID)
  {
    unint64_t v12 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(Value);
    uint64_t v13 = cf::CFUtilException::CFUtilException(v12);
  }
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  CFTypeID v8 = CFStringGetTypeID();
  if (v7)
  {
    if (CFGetTypeID(v7) == v8) {
      toNativeType(v7);
    }
    uint64_t v14 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    uint64_t v15 = cf::CFUtilException::CFUtilException(v14);
  }
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  (*(void (**)(di_asif::details::ContextASIF *))(*(void *)v4 + 40))(v4);
  return 0;
}

void sub_21E304990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  __cxa_free_exception(v18);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a17);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::set_stackable_source_identifier(uint64_t a1, uint64_t a2)
{
  return DiskImageASIF::internal_metadata_set_key_uuid(a1, @"source uuid", a2);
}

uint64_t DiskImageASIF::get_stable_uuid(di_asif::details::dir **this)
{
  return DiskImageASIF::internal_metadata_get_key_uuid(this, @"stable uuid");
}

uint64_t DiskImageASIF::get_stackable_source_identifier(di_asif::details::dir **this)
{
  return DiskImageASIF::internal_metadata_get_key_uuid(this, @"source uuid");
}

uint64_t DiskImageASIF::get_stackable_identifier(DiskImageASIF *this)
{
  return *((void *)this + 8);
}

void DiskImageASIF::~DiskImageASIF(DiskImageASIF *this)
{
  *(void *)this = &unk_26CF34EB8;
  di_asif::details::dir::~dir((DiskImageASIF *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26CF34EB8;
  di_asif::details::dir::~dir((DiskImageASIF *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageASIF::get_block_size(DiskImageASIF *this)
{
  return *((unsigned __int16 *)this + 109);
}

uint64_t DiskImageASIF::get_num_blocks(DiskImageASIF *this)
{
  return *((void *)this + 10);
}

uint64_t DiskImageASIF::is_writable(DiskImageASIF *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48))();
}

void DiskImageASIF::create_image_info(DiskImageASIF *this)
{
}

void sub_21E304BCC(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C40C7B85E04);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::set_size(DiskImageASIF *this, uint64_t a2)
{
  uint64_t v4 = DiskImage::set_size_unmap_data((DiskImage *)this, a2);
  if (!v4)
  {
    unint64_t v5 = (*(uint64_t (**)(DiskImageASIF *))(*(void *)this + 24))(this);
    unint64_t v6 = (a2 + v5 - 1) / v5;
    if (v6 <= *((void *)this + 11))
    {
      CFStringRef v7 = (di_asif::details::ContextASIF *)(*(uint64_t (**)(DiskImageASIF *))(*(void *)this + 136))(this);
      uint64_t v8 = *((void *)this + 11);
      if (v8 - v6 >= di_asif::Metadata::read_num_blocks((DiskImageASIF *)((char *)this + 4056), v7))
      {
        *((void *)this + 10) = v6;
        di_asif::header::write_header((DiskImageASIF *)((char *)this + 32), *((Backend **)this + 2));
      }
      uint64_t v4 = 4294967269;
      (*(void (**)(di_asif::details::ContextASIF *))(*(void *)v7 + 40))(v7);
    }
    else
    {
      return 4294967269;
    }
  }
  return v4;
}

void sub_21E304D30(_Unwind_Exception *exception_object)
{
  if (v1) {
    DiskImageASIF::set_size(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageASIF::supports_unmap(DiskImageASIF *this)
{
  return 1;
}

uint64_t DiskImageASIF::supports_get_extents(DiskImageASIF *this)
{
  return 1;
}

void DiskImageASIF::_create_ctx(DiskImageASIF *this)
{
}

void sub_21E304DE0(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t DiskImageASIF::read(DiskImageASIF *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8 = ((*((void *)a4 + 18) - *((void *)a3 + 18)) & ~((uint64_t)(*((void *)a4 + 18) - *((void *)a3 + 18)) >> 63))
     + *((void *)a3 + 3);
  uint64_t v9 = *((void *)this + 10);
  if (v8 > (*(uint64_t (**)(DiskImageASIF *))(*(void *)this + 24))(this) * v9) {
    return -34;
  }
  else {
    return di_asif::details::dir::do_io((DiskImageASIF *)((char *)this + 200), a2, a3, a4, 1);
  }
}

uint64_t DiskImageASIF::write(DiskImageASIF *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8 = ((*((void *)a4 + 18) - *((void *)a3 + 18)) & ~((uint64_t)(*((void *)a4 + 18) - *((void *)a3 + 18)) >> 63))
     + *((void *)a3 + 3);
  uint64_t v9 = *((void *)this + 10);
  if (v8 > (*(uint64_t (**)(DiskImageASIF *))(*(void *)this + 24))(this) * v9) {
    return -34;
  }
  int v10 = DiskImageASIF::void_stackable_identifier((uint64_t)this, (uint64_t)a2 + 16);
  if (!v10) {
    return di_asif::details::dir::do_io((DiskImageASIF *)((char *)this + 200), a2, a3, a4, 0);
  }
  if (v10 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = -v10;
  }
  return -v11;
}

uint64_t DiskImageASIF::unmap(void *a1, di_asif::details::ContextASIF *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t v10 = *v8 + *(v8 - 1);
      unint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v10;
      uint64_t v12 = a1[10];
      if (v11 > (*(uint64_t (**)(void *))(*a1 + 24))(a1) * v12) {
        return 4294967262;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = DiskImageASIF::void_stackable_identifier((uint64_t)a1, (uint64_t)a2 + 16);
    if (!result) {
      return di_asif::details::dir::unmap((uint64_t)(a1 + 25), a2, a3, a4);
    }
  }
  return result;
}

void di_asif::details::asif_extents_iterator_interface::clone(di_asif::details::asif_extents_iterator_interface *this)
{
}

void di_asif::details::asif_extents_iterator_interface::~asif_extents_iterator_interface(di_asif::details::asif_extents_iterator_interface *this)
{
}

uint64_t di_asif::details::dir::get_space_allocator(di_asif::details::dir *this)
{
  return (uint64_t)this + 176;
}

atomic_ullong *di_asif::details::dir::allocate_bitmap@<X0>(di_asif::details::dir *this@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate((uint64_t)this + 2080, a2, a3, a4);
}

void *std::vector<ref::tagged_weak_ptr<di_asif::details::map_element,unsigned long long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21E3051F8(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t space_allocators::FixedSize::allocate(uint64_t a1, uint64_t a2)
{
  v12.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v12.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(void *)(a1 + 88))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 72);
    uint64_t v5 = v4[4];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)a1 + v5;
    std::unique_lock<std::mutex>::unlock(&v12);
    if (*(void *)(a2 + 24)
      && std::function<int ()(unsigned long long)>::operator()(a2, *(void *)a1 + v5))
    {
      *(void *)&long long v7 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
      *((void *)&v7 + 1) = 37;
      int v8 = 16;
      di_log::logger<di_log::log_printer<137ul>>::logger(v9, &v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"allocated: size change callback failed with ", 44);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x223C24910](&v11);
    }
  }
  if (v12.__owns_) {
    std::mutex::unlock(v12.__m_);
  }
  return v5;
}

void sub_21E305340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(unsigned char *)(v12 - 40)) {
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<int ()(unsigned long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *di_log::logger<di_log::log_printer<137ul>>::logger(void *a1, long long *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<137ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF35030;
  a1[45] = &unk_26CF35130;
  a1[46] = &unk_26CF35158;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF35030;
  a1[45] = &unk_26CF350B8;
  a1[46] = &unk_26CF350E0;
  return a1;
}

void sub_21E3054C8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF351C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3055AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF351C8;
  di_log::logger_buf<di_log::log_printer<137ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<137ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<137ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<137ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<137ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E305B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<137ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 137;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 137;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEv(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = &unk_26CF35248;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEPNS0_6__baseISB_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CF35248;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEEclEOy(uint64_t a1, uint64_t *a2)
{
  return _ZZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmENKUlT_E_clIyEEDaS4_((size_t *)(a1 + 8), *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base18write_zeroed_chunkERNS3_11ContextASIFEmEUlT_E_NS_9allocatorIS8_EEFiyEE11target_typeEv()
{
  return &_ZTIZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmEUlT_E_;
}

uint64_t _ZZN7di_asif7details8dir_base18write_zeroed_chunkERNS0_11ContextASIFEmENKUlT_E_clIyEEDaS4_(size_t *a1, uint64_t a2)
{
  v13[4] = *MEMORY[0x263EF8340];
  int v4 = *(Backend **)(*a1 + 16);
  int v5 = (char *)malloc_type_valloc(a1[1], 0xF8ED6DDuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v10, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v13[0] = &unk_26CF359B8;
  v13[3] = v13;
  uint64_t v11 = v5;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v13);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v13);
  bzero(v11, a1[1]);
  int v6 = Backend::write(v4, v11, a1[1], a2 - a1[1]);
  if (a1[1] == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 >= 0) {
      uint64_t v7 = 4294967291;
    }
    else {
      uint64_t v7 = v6;
    }
    DiskImage::Context::terminate_di((DiskImage::Context *)*a1);
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v11, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v12);
  return v7;
}

void sub_21E305F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](&a9, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF352D8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE7__cloneEPNS0_6__baseISB_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF352D8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEEclEOy(uint64_t a1, unint64_t *a2)
{
  return _ZNSt3__128__invoke_void_return_wrapperIiLb0EE6__callB8ne180100IJRZN7di_asif7details8dir_base15trim_backend_fnERNS4_11ContextASIFEEUlT_E_yEEEiDpOT_((DiskImage::Context **)(a1 + 8), a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN7di_asif7details8dir_base15trim_backend_fnERNS0_11ContextASIFEEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN7di_asif7details8dir_base15trim_backend_fnERNS3_11ContextASIFEEUlT_E_NS_9allocatorIS8_EEFiyEE11target_typeEv()
{
  return &_ZTIZN7di_asif7details8dir_base15trim_backend_fnERNS0_11ContextASIFEEUlT_E_;
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIiLb0EE6__callB8ne180100IJRZN7di_asif7details8dir_base15trim_backend_fnERNS4_11ContextASIFEEUlT_E_yEEEiDpOT_(DiskImage::Context **a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *((void *)*a1 + 2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v4 + 56))(v4, v3))
  {
    DiskImage::Context::terminate_di(*a1);
  }
  return 0;
}

void space_allocators::FixedSize::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  unint64_t v6 = *(void *)a1 + v7;
  if (*(void *)(a1 + 96) <= v6) {
    *(void *)(a1 + 96) = v6;
  }
  space_allocators::FixedSize::trim_largest((void *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_21E30618C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<436ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<436ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF354F8;
  di_log::logger_buf<di_log::log_printer<436ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<436ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E306784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<436ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<436ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 436;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 436;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<450ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<450ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF35718;
  di_log::logger_buf<di_log::log_printer<450ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<450ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E306EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<450ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<450ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 450;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 450;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void *di_asif::details::table_entry_data::table_entry_data(void *this, di_asif::details::table *a2, uint64_t a3)
{
  *this = a2;
  this[1] = a3;
  atomic_load((unint64_t *)(*((void *)a2 + 7) + 16 * a3 + 8));
  unint64_t v3 = atomic_load((unint64_t *)(*((void *)a2 + 7) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return this;
}

void *di_asif::details::table_entry_map::table_entry_map(void *this, di_asif::details::table *a2, uint64_t a3)
{
  *this = a2;
  this[1] = a3;
  unint64_t v3 = atomic_load((unint64_t *)(*((void *)a2 + 7) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: data entry - invalid reserved bits", 0x16u);
  }
  return this;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<547ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<547ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF35938;
  di_log::logger_buf<di_log::log_printer<547ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<547ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30774C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<547ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<547ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 547;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 547;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t std::vector<ref::details::ref_cnt_set_handle>::__emplace_back_slow_path<ref::details::ref_cnt_set_handle>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v15 = &v10[32 * v4];
  uint64_t v16 = (uint64_t)v15;
  int v17 = &v10[32 * v9];
  uint64_t v11 = (void *)ref::details::ref_cnt_handle::ref_cnt_handle((uint64_t)v15, a2);
  void *v11 = &unk_26CF39B10;
  v11[3] = *(void *)(a2 + 24);
  v16 += 32;
  std::vector<ref::details::ref_cnt_set_handle>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_21E307B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ref::details::ref_cnt_set_handle>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ref::details::ref_cnt_set_handle>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ref::details::ref_cnt_set_handle>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)ref::details::ref_cnt_handle::ref_cnt_handle(a7 + v11 - 32, a3 + v11 - 32) = &unk_26CF39B10;
      *(void *)(a7 + v11 - 8) = *(void *)(a3 + v11 - 8);
      v11 -= 32;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_21E307CC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ref::details::ref_cnt_set_handle>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>,std::reverse_iterator<ref::details::ref_cnt_set_handle*>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<ref::details::ref_cnt_set_handle>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ref::details::ref_cnt_set_handle>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<863ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<863ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF35BD8;
  di_log::logger_buf<di_log::log_printer<863ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<863ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E308334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<863ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<863ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 863;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 863;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<888ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<888ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF35DF8;
  di_log::logger_buf<di_log::log_printer<888ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<888ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E308AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<888ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<888ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 888;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 888;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<900ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<900ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36018;
  di_log::logger_buf<di_log::log_printer<900ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<900ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30921C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<900ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<900ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 900;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 900;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<258ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<258ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF360A0;
  a1[45] = &unk_26CF361A0;
  a1[46] = &unk_26CF361C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF360A0;
  a1[45] = &unk_26CF36128;
  a1[46] = &unk_26CF36150;
  return a1;
}

void sub_21E309568(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36238;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E30964C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36238;
  di_log::logger_buf<di_log::log_printer<258ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<258ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<258ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<258ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<258ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<258ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E309BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<258ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 258;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 258;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::function<void ()(char const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1075ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1075ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36458;
  di_log::logger_buf<di_log::log_printer<1075ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1075ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30A350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1075ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1075ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1075;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1075;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1081ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1081ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36678;
  di_log::logger_buf<di_log::log_printer<1081ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1081ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1081ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1081ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1081;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1081;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1090ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1090ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36898;
  di_log::logger_buf<di_log::log_printer<1090ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1090ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30B238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1090ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1090ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1090;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1090;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1151ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1151ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36AB8;
  di_log::logger_buf<di_log::log_printer<1151ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1151ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1151ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1151ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1151;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1151;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1188ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1188ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36CD8;
  di_log::logger_buf<di_log::log_printer<1188ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1188ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30C120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1188ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1188ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1188;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1188;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1441ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF36EF8;
  di_log::logger_buf<di_log::log_printer<1441ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1441ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1441ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1441ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1441;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1441;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios(uint64_t a1)
{
  int returned_io_size;
  uint64_t v3;
  uint64_t v4;
  void (***v5)(void);
  void (***v6)(void);
  void (***v7)(void);
  void (**v8)(void);
  int v9;

  (*(void (**)(void))(**(void **)(*(void *)(a1 + 5496) + 16) + 144))(*(void *)(*(void *)(a1 + 5496) + 16));
  returned_io_size = Backend::get_returned_io_size(a1 + 5504);
  uint64_t v3 = *(void *)(a1 + 6600);
  if (v3 == returned_io_size)
  {
    sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 5168, a1 + 5328);
    *(void *)(a1 + 5512) = 0;
    int v4 = *(void *)(a1 + 6200);
    if (v4)
    {
      int v5 = *(void (****)(void))(a1 + 6192);
      char v6 = v5;
      uint64_t v7 = v5;
      do
      {
        --v4;
        uint64_t v8 = *v7;
        v7 += 3;
        (*v8)(v6);
        v5 += 3;
        char v6 = v7;
      }
      while (v4);
    }
    *(void *)(a1 + 6200) = 0;
    if (*(unsigned char *)(a1 + 6184)) {
      *(unsigned char *)(a1 + 6184) = 0;
    }
    *(void *)(a1 + 6600) = 0;
  }
  else
  {
    if (returned_io_size < 0) {
      unint64_t v9 = returned_io_size;
    }
    else {
      unint64_t v9 = -5;
    }
    return -(uint64_t)-v9;
  }
  return v3;
}

void *di_log::logger<di_log::log_printer<1409ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<1409ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF36F80;
  a1[45] = &unk_26CF37080;
  a1[46] = &unk_26CF370A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF36F80;
  a1[45] = &unk_26CF37008;
  a1[46] = &unk_26CF37030;
  return a1;
}

void sub_21E30CCF4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator=(uint64_t a1, uint64_t a2)
{
  sg_entry::operator=(a1, (uint64_t *)a2);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 120);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v9;
  return a1;
}

uint64_t sg_entry::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37118;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E30CECC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37118;
  di_log::logger_buf<di_log::log_printer<1409ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1409ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1409ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1409ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1409ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1409ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1409ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1409;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1409;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize(uint64_t a1)
{
  uint64_t v2 = di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::data_entries_vectorizer_t::finalize_ios(a1);
  if (*(unsigned char *)(a1 + 5160))
  {
    di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(a1);
    *(unsigned char *)(a1 + 5160) = 0;
  }
  return v2;
}

uint64_t di_asif::details::table::read(di_asif::details::ContextASIF &,sg_vec_ns::details::sg_vec_iterator const&,sg_vec_ns::details::sg_vec_iterator const&)::bitmap_handle_t::~bitmap_handle_t(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    unint64_t v28 = &v3[40 * v2];
    do
    {
      uint64_t v5 = *v3;
      int v4 = (std::__shared_weak_count *)v3[1];
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)unint64_t v33 = *((_OWORD *)v3 + 1);
      *(_OWORD *)&v33[9] = *(_OWORD *)((char *)v3 + 25);
      uint64_t v6 = v3[6];
      long long v7 = *(_OWORD *)(v3 + 7);
      long long v8 = *(_OWORD *)(v3 + 11);
      long long v91 = *(_OWORD *)(v3 + 9);
      long long v92 = v8;
      char v93 = *((unsigned char *)v3 + 104);
      uint64_t v10 = v3[14];
      uint64_t v9 = (std::__shared_weak_count *)v3[15];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v32 = *((_OWORD *)v3 + 8);
      unint64_t v30 = v3[18];
      char v31 = *((unsigned char *)v3 + 152);
      uint64_t v12 = v3[20];
      uint64_t v11 = (std::__shared_weak_count *)v3[21];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)unint64_t v29 = *((_OWORD *)v3 + 11);
      *(_OWORD *)&v29[9] = *(_OWORD *)((char *)v3 + 185);
      uint64_t v13 = v3[26];
      long long v14 = *(_OWORD *)(v3 + 27);
      long long v15 = *(_OWORD *)(v3 + 31);
      long long v88 = *(_OWORD *)(v3 + 29);
      long long v89 = v15;
      char v90 = *((unsigned char *)v3 + 264);
      uint64_t v17 = v3[34];
      uint64_t v16 = (std::__shared_weak_count *)v3[35];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = 0;
      unint64_t v45 = v3[38];
      char v46 = *((unsigned char *)v3 + 312);
      long long v44 = *((_OWORD *)v3 + 18);
      uint64_t v47 = v5;
      unint64_t v48 = v4;
      v49[0] = *(_OWORD *)v33;
      *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v33[9];
      long long v51 = v7;
      long long v52 = v91;
      long long v53 = v92;
      char v54 = v93;
      uint64_t v50 = v6;
      uint64_t v55 = v10;
      size_t v56 = v9;
      long long v57 = v32;
      char v59 = v31;
      unint64_t v58 = v30;
      uint64_t v34 = v12;
      uint64_t v35 = v11;
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)&v29[9];
      v36[0] = *(_OWORD *)v29;
      long long v38 = v14;
      char v41 = v90;
      long long v39 = v88;
      long long v40 = v89;
      uint64_t v37 = v13;
      uint64_t v42 = v17;
      uint64_t v43 = v16;
      unint64_t v19 = v45;
      v87[0] = 0;
      v87[528] = 0;
      do
      {
        if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v47, (uint64_t)&v34)) {
          break;
        }
        if (v58 >= v19 || v18 == -1) {
          break;
        }
        if (DIDebugLogsEnabled())
        {
          *(void *)&long long v84 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((void *)&v84 + 1) = 104;
          LODWORD(v85) = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v73, &v84);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"sg: ", 4);
          operator<<(&v80);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v73);
          MEMORY[0x223C24910](&v81);
        }
        *(void *)&long long v73 = 0;
        *((void *)&v73 + 1) = v19;
        char v74 = 2;
        trim_sg_to_interval(&v47, (uint64_t)&v73, (uint64_t)&v84);
        atomic_ullong v21 = *(void *)a1;
        if (*(void *)a1)
        {
          if (*(unsigned char *)(v21 + 224)) {
            unint64_t v22 = v21 + 40;
          }
          else {
            unint64_t v22 = 0;
          }
        }
        else
        {
          unint64_t v22 = 0;
        }
        di_asif::details::map_element::zero_range_in_sg(v22, *(di_asif::details::table **)(a1 + 8), (char **)&v84);
        unint64_t v23 = v85;
        BOOL v24 = (v85 & 0x8000000000000000) == 0 || v85 == 0;
        char v25 = v24;
        if (v24)
        {
          size_t v26 = v86;
          if (sg_vec_ns::should_create_new_sg_vec_ref((sg_vec_ns *)&v47, (const sg_vec_ns::details::sg_vec_iterator *)&v34, v86, v85))
          {
            uint64_t v60 = v47;
            BOOL v61 = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v62[0] = v49[0];
            *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v49 + 9);
            uint64_t v63 = v50;
            long long v64 = v51;
            long long v65 = v52;
            long long v66 = v53;
            char v67 = v54;
            uint64_t v68 = v55;
            long long v69 = v56;
            if (v56) {
              atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v70 = v57;
            unint64_t v71 = v58;
            char v72 = v59;
            sg_vec_ns::generate_vec_ref((uint64_t)&v60, (uint64_t)&v34, (uint64_t)v26, v23, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v73);
            std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v87, (uint64_t)&v73);
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            if (v79) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
            }
            if (v78) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v78);
            }
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            if (v75) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            }
            if (v69) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            }
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            sg_vec_ref::begin((sg_vec_ref *)v87, (uint64_t)&v73);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v47, &v73);
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            if (*((void *)&v73 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
            }
            sg_vec_ref::end((sg_vec_ref *)v87, (uint64_t)&v73);
            sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v34, &v73);
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            if (*((void *)&v73 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
            }
          }
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v47, v23);
          v18 += v23;
        }
        if (*((void *)&v84 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v84 + 1));
        }
      }
      while ((v25 & 1) != 0);
      std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v87);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      v3 += 40;
    }
    while (v3 != v28);
  }
  boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::~vector(a1 + 16);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)a1);
  return a1;
}

void sub_21E30DC1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (STACK[0x4D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4D0]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x4F8]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a36);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a56);
  __clang_call_terminate(a1);
}

uint64_t boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 168;
    do
    {
      int v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      if (*(void *)v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v3);
      }
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    long long v7 = (atomic_ullong *)v3[41];
    if (v7) {
      v3[42] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 344)) {
      std::__atomic_base<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,false>::wait[abi:ne180100](a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL std::__atomic_base<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,false>::wait[abi:ne180100](uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>((uint64_t)&v4, (uint64_t)&v5, 0);
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v7 = 0;
  while (1)
  {
    unsigned int v8 = *(unsigned int **)a1;
    int v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) >= 2) {
      unsigned int explicit = v9 == 5 ? atomic_load(v8) : *v8;
    }
    else {
      unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v8, memory_order_acquire);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (explicit != v11) {
      break;
    }
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>::operator()[abi:ne180100](a2, v12.__d_.__rep_))
      {
        return explicit != v11;
      }
    }
  }
  return explicit != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0;
  }
  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  long long v4 = *(unsigned int **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 5) {
      unsigned int explicit = atomic_load(v4);
    }
    else {
      unsigned int explicit = *v4;
    }
  }
  else
  {
    unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v4, memory_order_acquire);
  }
  if (explicit == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::assign<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(uint64_t *a1, const char *a2, uint64_t *a3)
{
  int64_t v4 = *a3 - *(void *)a2;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    uint64_t v11 = *(void *)a2;
    boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*>((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }
  else
  {
    if (v5 >= 0x66666666666667) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    }
    unsigned int v8 = operator new(v4);
    int v9 = (uint64_t *)*a1;
    if (*a1)
    {
      boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(a1);
      if (a1 + 3 != v9) {
        operator delete(v9);
      }
    }
    a1[1] = 0;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    uint64_t v10 = *(void *)a2;
    uint64_t v12 = *a3;
    uint64_t v13 = v10;
    boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(a1, &v13, &v12);
  }
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 168;
    do
    {
      int64_t v4 = *(std::__shared_weak_count **)(v3 + 112);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      if (*(void *)v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v3);
      }
      unint64_t v5 = *(std::__shared_weak_count **)(v3 - 48);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      std::chrono::steady_clock::time_point v6 = *(std::__shared_weak_count **)(v3 - 160);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      v3 += 320;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1 + 320 * v4;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(v8, v6);
      sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(v8 + 160, v6 + 160);
      v6 += 320;
      v8 += 320;
    }
    while (v6 != v7);
    uint64_t v4 = a1[1];
  }
  a1[1] = v4 - 0x3333333333333333 * ((v8 - v5) >> 6);
}

void boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,boost::container::vec_iterator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,true>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a3;
      do
      {
        --v14;
        sg_vec_ns::details::sg_vec_iterator::operator=(a4, v13);
        sg_vec_ns::details::sg_vec_iterator::operator=(a4 + 160, v13 + 160);
        a4 += 320;
        v13 += 320;
      }
      while (v14);
    }
    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      uint64_t v16 = (std::__shared_weak_count **)(a4 + 168);
      do
      {
        uint64_t v17 = v16[14];
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (*v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v16);
        }
        uint64_t v18 = *(v16 - 6);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        unint64_t v19 = *(v16 - 20);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v16 += 40;
        BOOL v12 = __CFADD__(v15++, 1);
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (a5)
    {
      unint64_t v11 = a5;
      do
      {
        --v11;
        sg_vec_ns::details::sg_vec_iterator::operator=(a4, v10);
        sg_vec_ns::details::sg_vec_iterator::operator=(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
      }
      while (v11);
    }
    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4, v10);
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4 + 160, v10 + 160);
        v10 += 320;
        a4 += 320;
        BOOL v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
  }
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  unint64_t v14 = operator new(320 * v11);
  boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v3 = *(_OWORD *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  long long v7 = *(_OWORD *)(a2 + 232);
  long long v8 = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  __n128 result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 288) = result;
  uint64_t v10 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v10;
  return result;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x66666666666666;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x66666666666666 - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = &a2[v3];
  if (v8 < 0x66666666666666) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      BOOL v12 = (std::__shared_weak_count **)(v10 + 168);
      do
      {
        uint64_t v13 = v12[14];
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        unint64_t v14 = *(v12 - 6);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        unint64_t v15 = *(v12 - 20);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v16 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v16;
  a1[2] = a3;
}

void sub_21E30E6C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>*,std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  void v16[2] = a1;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](a5, v12);
      v12 += 320;
      a5 += 320;
    }
    while (v12 != v11);
  }
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](a5, a7);
  if (v11 != a4)
  {
    uint64_t v13 = a5 + 320 * a6;
    do
    {
      std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100](v13, v11);
      v11 += 320;
      uint64_t v13 = v14 + 320;
    }
    while (v11 != a4);
  }
  v16[0] = 0;
  v16[1] = 0;
  return boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(v16);
}

void *boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 != a1[1])
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[35];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[21];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      unint64_t v5 = (std::__shared_weak_count *)v2[15];
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v7 = (void *)a1[1];
      uint64_t v2 = (void *)(*a1 + 320);
      *a1 = v2;
    }
    while (v2 != v7);
  }
  return a1;
}

void boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = operator new(24 * v11);
  boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x555555555555555;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x555555555555555 - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = &a2[v3];
  if (v8 < 0x555555555555555) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        uint64_t v14 = *v13;
        v13 += 3;
        (*v14)(v10);
        v12 += 24;
        uint64_t v10 = (uint64_t)v13;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v15 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v15;
  a1[2] = a3;
}

void sub_21E30EA18(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,ref::details::ref_cnt_handle*,ref::details::ref_cnt_handle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a5;
  if (a2 != a3)
  {
    uint64_t v14 = 0;
    do
    {
      ref::details::ref_cnt_handle::ref_cnt_handle(a5 + v14, a2 + v14);
      v14 += 24;
    }
    while (a2 + v14 != a3);
    uint64_t v12 = a5 + v14;
  }
  uint64_t result = ref::details::ref_cnt_handle::ref_cnt_handle(v12, a7);
  if (a3 != a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v12 + 24 * a6;
    do
    {
      uint64_t result = ref::details::ref_cnt_handle::ref_cnt_handle(v17 + v16, a3 + v16);
      v16 += 24;
    }
    while (a3 + v16 != a4);
  }
  return result;
}

void sub_21E30EAFC(_Unwind_Exception *exception_object)
{
  if (v2 != v1)
  {
    unint64_t v4 = v1;
    unint64_t v5 = v1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v1);
      v4 += 3;
      uint64_t v1 = v5;
    }
    while (v5 != v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::container::vector<ref::details::ref_cnt_handle,boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))a1;
    unint64_t v4 = *(void (****)(void))a1;
    unint64_t v5 = *(void (****)(void))a1;
    do
    {
      --v2;
      unint64_t v6 = *v5;
      v5 += 3;
      (*v6)(v4);
      v3 += 3;
      unint64_t v4 = v5;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1513ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<1513ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37338;
  di_log::logger_buf<di_log::log_printer<1513ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1513ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E30F160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<1513ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<1513ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1513;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1513;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

BOOL ref::ref_cnt::get(ref::ref_cnt *this)
{
  while (1)
  {
    uint64_t v2 = *(void *)this;
    if ((*(void *)this & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v3 = *(void *)this;
LABEL_7:
    uint64_t v2 = v3;
    if (v3 != -1) {
      return v2 != -1;
    }
    if ((ref::ref_cnt::wait_fn(this, 0) & 1) == 0)
    {
      uint64_t v2 = -1;
      return v2 != -1;
    }
  }
  uint64_t v3 = *(void *)this;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)this, (unint64_t *)&v3, v2 + 1);
    if (v3 == v2) {
      return v2 != -1;
    }
    uint64_t v2 = v3;
    if (v3 < 0) {
      goto LABEL_7;
    }
  }
}

uint64_t ref::ref_cnt::wait_fn(ref::ref_cnt *this, const void *a2)
{
  unint64_t v2 = atomic_load((unint64_t *)this);
  BOOL v3 = v2 == 0;
  BOOL v4 = v2 != -1;
  if (a2) {
    BOOL v4 = v3;
  }
  if (!v4)
  {
    int v5 = (int)a2;
    v17.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)this, a2);
    v17.__owns_ = 1;
    std::mutex::lock(v17.__m_);
    uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)this, v7);
    unint64_t v9 = atomic_load((unint64_t *)this);
    BOOL v10 = v9 == 0;
    BOOL v11 = v9 != -1;
    if (v5) {
      BOOL v11 = v10;
    }
    if (!v11)
    {
      os_log_type_t v12 = (std::condition_variable *)tagged_ptr_cond;
      do
      {
        std::condition_variable::wait(v12, &v17);
        unint64_t v13 = atomic_load((unint64_t *)this);
        BOOL v14 = v13 == 0;
        BOOL v15 = v13 != -1;
        if (v5) {
          BOOL v15 = v14;
        }
      }
      while (!v15);
    }
    if (v17.__owns_) {
      std::mutex::unlock(v17.__m_);
    }
  }
  return 1;
}

void sub_21E30F4FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t for_each_sg_in_vec<io_result_t (&)(sg_entry const&)>(uint64_t (*a1)(long long *), long long *a2, long long *a3, unint64_t a4)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v28 = v4;
  v29[0] = v5;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)a2 + 25);
  uint64_t v30 = *((void *)a2 + 6);
  long long v31 = *(long long *)((char *)a2 + 56);
  long long v32 = *(long long *)((char *)a2 + 72);
  long long v33 = *(long long *)((char *)a2 + 88);
  char v34 = *((unsigned char *)a2 + 104);
  long long v6 = a2[7];
  long long v7 = a2[8];
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v35 = v6;
  long long v36 = v7;
  char v38 = *((unsigned char *)a2 + 152);
  uint64_t v37 = *((void *)a2 + 18);
  long long v8 = *a3;
  long long v9 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = v8;
  v18[0] = v9;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a3 + 25);
  uint64_t v19 = *((void *)a3 + 6);
  long long v20 = *(long long *)((char *)a3 + 56);
  long long v10 = *(long long *)((char *)a3 + 72);
  long long v11 = *(long long *)((char *)a3 + 88);
  char v23 = *((unsigned char *)a3 + 104);
  long long v22 = v11;
  long long v21 = v10;
  long long v12 = a3[7];
  long long v13 = a3[8];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  long long v24 = v12;
  long long v25 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v27 = *((unsigned char *)a3 + 152);
  uint64_t v26 = v14;
  unint64_t v15 = details::for_each_sg_in_vec_internal<io_result_t (&)(sg_entry const&)>(a1, (sg_vec_ns *)&v28, (const sg_vec_ns::details::sg_vec_iterator *)&v17, a4, 0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  return v15;
}

void sub_21E30F640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

unint64_t details::for_each_sg_in_vec_internal<io_result_t (&)(sg_entry const&)>(uint64_t (*a1)(long long *), sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0;
  unint64_t v8 = *((void *)a3 + 18);
  v29[0] = 0;
  v29[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v8 || v7 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v27 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((void *)&v27 + 1) = 119;
      int v28 = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(&v23, &v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"sg: ", 4);
      operator<<(&v25);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v23);
      MEMORY[0x223C24910](&v26);
    }
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = v8;
    char v24 = 2;
    trim_sg_to_interval(a2, (uint64_t)&v23, (uint64_t)&v27);
    int64_t v10 = a1(&v27);
    unint64_t v12 = v10;
    BOOL v13 = v10 >= 0 || v10 == 0;
    char v14 = v13;
    if (v13)
    {
      uint64_t v15 = (uint64_t)v11;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v11, v10))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v22, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v22, (uint64_t)a3, v15, v12, a4, (sg_vec_ref *)&v23);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v29, (uint64_t)&v23);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)&v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)v22);
        sg_vec_ref::begin((sg_vec_ref *)v29, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
        sg_vec_ref::end((sg_vec_ref *)v29, (uint64_t)&v23);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, &v23);
        sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&v23);
      }
      if (a5) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v12);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v12);
      }
      v7 += v12;
    }
    else
    {
      if ((int)v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = -(int)v10;
      }
      unint64_t v18 = -v16;
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
  }
  unint64_t v18 = v7;
LABEL_32:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
  return v18;
}

void sub_21E30F8C4(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E8]);
  }
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void *lock_free::bitmap_dynamically_allocated_t::bitmap_dynamically_allocated_t(void *a1, uint64_t a2, char a3)
{
  a1[2] = a2;
  *a1 = &unk_26CF2F5D0;
  unint64_t v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8;
  di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(a1 + 3, v5);
  long long v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5) {
    bzero(v6, 8 * v5);
  }
  a1[1] = v6;
  return a1;
}

uint64_t *di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(uint64_t *a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[4] = 0;
  BOOL v3 = malloc_type_valloc(8 * a2, 0x100004000313F17uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v6 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v6, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v7[0] = &unk_26CF373B8;
  v7[3] = v7;
  unint64_t v8 = v3;
  std::__function::__value_func<void ()(unsigned long long *)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v7);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::operator=[abi:ne180100](a1, (uint64_t *)&v8);
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100]((uint64_t *)&v8, 0);
  std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_21E30FAC0(_Unwind_Exception *a1)
{
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](v1, 0);
  std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(unsigned long long *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::~__func()
{
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CF373B8;
  return result;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF373B8;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1},std::allocator<di_utils::fixed_vector_buffer_t<unsigned long long>::fixed_vector_buffer_t(unsigned long)::{lambda(unsigned long long *)#1}>,void ()(unsigned long long *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(unsigned long long *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }
  *BOOL v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(unsigned long long *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(unsigned long long *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned long long *)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2061ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2061ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF375E8;
  di_log::logger_buf<di_log::log_printer<2061ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2061ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3102A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2061ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2061ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2061;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2061;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2071ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2071ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37808;
  di_log::logger_buf<di_log::log_printer<2071ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2071ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E310A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2071ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2071ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2071;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2071;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2311ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2311ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37A28;
  di_log::logger_buf<di_log::log_printer<2311ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2311ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E31118C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2311ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2311ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2311;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2311;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2321ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2321ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37C48;
  di_log::logger_buf<di_log::log_printer<2321ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2321ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E311900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2321ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2321ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2321;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2321;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *std::vector<ref::tagged_weak_ptr<di_asif::details::table,unsigned long long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21E311BA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21E311C20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<158ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<158ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF37D10;
  a1[45] = &unk_26CF37E10;
  a1[46] = &unk_26CF37E38;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF37D10;
  a1[45] = &unk_26CF37D98;
  a1[46] = &unk_26CF37DC0;
  return a1;
}

void sub_21E311D3C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37EA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E311E20(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF37EA8;
  di_log::logger_buf<di_log::log_printer<158ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<158ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<158ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<158ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<158ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<158ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E312398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<158ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 158;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 158;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void DiskImagesHeaderSizeException::~DiskImagesHeaderSizeException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x223C249A0);
}

const char *DiskImagesHeaderSizeException::what(DiskImagesHeaderSizeException *this)
{
  return "File too small.";
}

void DiskImagesHeaderSizeException::reason(DiskImagesHeaderSizeException *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(DiskImagesHeaderSizeException *))(*(void *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(v14, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if ((v15 & 0x80u) == 0) {
    int v4 = v14;
  }
  else {
    int v4 = (void **)v14[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)v14[1];
  }
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" header size ", 13);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", but file size only ", 21);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11, a2);
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v10 = v8;
  v11[0] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v13);
  if ((char)v15 < 0) {
    operator delete(v14[0]);
  }
}

void std::vector<sg_entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    std::vector<sg_entry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<sg_entry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    int v4 = *(std::__shared_weak_count **)(i - 40);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2831ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2831ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF380F8;
  di_log::logger_buf<di_log::log_printer<2831ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2831ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E312DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2831ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2831ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2831;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2831;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<2828ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<2828ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF38318;
  di_log::logger_buf<di_log::log_printer<2828ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<2828ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E31352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<2828ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<2828ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 2828;
    __int16 v22 = 2082;
    long long v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 2828;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<char *,make_shared_buf(unsigned long)::{lambda(char *)#1},std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<sg_entry>::__emplace_back_slow_path<std::shared_ptr<char> const,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&,unsigned long long &,Wrapper<unsigned long long,std::integral_constant<BOOL,true>,be_type> const&>(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x555555555555555;
  }
  else {
    unint64_t v15 = v8;
  }
  v25[4] = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)std::allocator<sg_entry>::allocate_at_least[abi:ne180100](v13, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = &v16[48 * v7];
  v25[0] = v16;
  v25[1] = v17;
  v25[3] = &v16[48 * v15];
  uint64_t v18 = *a3;
  uint64_t v19 = *a4;
  uint64_t v20 = *a5;
  *(void *)int v17 = *a2;
  uint64_t v21 = a2[1];
  *((void *)v17 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v22 = &v16[48 * v7];
  *((void *)v22 + 2) = v18;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v20;
  v22[40] = 0;
  void v25[2] = v17 + 48;
  std::vector<sg_entry>::__swap_out_circular_buffer(a1, v25);
  uint64_t v23 = a1[1];
  std::__split_buffer<sg_entry>::~__split_buffer(v25);
  return v23;
}

void sub_21E313938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<sg_entry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<sg_entry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>,std::reverse_iterator<sg_entry*>,std::reverse_iterator<sg_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::allocator<sg_entry>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>,std::reverse_iterator<sg_entry*>,std::reverse_iterator<sg_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 48);
    do
    {
      long long v9 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 25);
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)v8 + 25) = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 3;
      v7 -= 48;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<sg_entry>,std::reverse_iterator<sg_entry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 48;
  }
}

void **std::__split_buffer<sg_entry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<sg_entry>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 48;
    int v4 = *(std::__shared_weak_count **)(v1 - 40);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 48;
    }
  }
}

di_asif::meta_header *std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long>(di_asif::meta_header **a1, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  int v17 = di_asif::meta_header::meta_header((di_asif::meta_header *)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = (di_asif::meta_header *)((char *)v17 + 28);
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  if (v19 != *a1)
  {
    uint64_t v21 = 0;
    do
    {
      __int16 v22 = (char *)v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *((_DWORD *)v22 - 5) = 512;
      *((_OWORD *)v22 - 1) = *(_OWORD *)((char *)v19 + v21 - 16);
      v21 -= 28;
    }
    while ((di_asif::meta_header *)((char *)v19 + v21) != v20);
    uint64_t v19 = *a1;
    int v17 = (di_asif::meta_header *)((char *)v17 + v21);
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (di_asif::meta_header *)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_21E313D14(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a2);
}

di_asif::meta_header *std::vector<di_asif::meta_header>::__emplace_back_slow_path<di_asif::details::ContextASIF &,di_asif::details::dir &,unsigned long long const&>(di_asif::meta_header **a1, di_asif::details::ContextASIF *a2, di_asif::details::dir *a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492) {
    unint64_t v13 = 0x924924924924924;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    char v14 = (char *)std::allocator<di_asif::meta_header>::allocate_at_least[abi:ne180100](v11, v13);
    uint64_t v16 = v15;
  }
  else
  {
    char v14 = 0;
    uint64_t v16 = 0;
  }
  int v17 = di_asif::meta_header::meta_header((di_asif::meta_header *)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = (di_asif::meta_header *)((char *)v17 + 28);
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  if (v19 != *a1)
  {
    uint64_t v21 = 0;
    do
    {
      __int16 v22 = (char *)v17 + v21;
      *(void *)(v22 - 28) = 0x16174656DLL;
      *((_DWORD *)v22 - 5) = 512;
      *((_OWORD *)v22 - 1) = *(_OWORD *)((char *)v19 + v21 - 16);
      v21 -= 28;
    }
    while ((di_asif::meta_header *)((char *)v19 + v21) != v20);
    uint64_t v19 = *a1;
    int v17 = (di_asif::meta_header *)((char *)v17 + v21);
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (di_asif::meta_header *)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_21E313ED8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::~__func()
{
}

void *std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26CF383F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF383F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), a2, 0);
}

uint64_t std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1},std::allocator<DiskImageASIF::get_flush_fn(void)::{lambda(di_asif::details::ContextASIF &)#1}>,void ()(di_asif::details::ContextASIF &)>::target_type()
{
}

_DWORD *di_asif::header_flags::header_flags(_DWORD *this, int a2)
{
  *this = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

unsigned char *boost::uuids::to_chars<char *>(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

atomic_ullong *ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate@<X0>(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 344) || v13 && *(unsigned char *)(v13 + 344))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 736) && v14 != (void *)(a1 + 760))
  {
    do
    {
      ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate_from_empty_pool(a1, (uint64_t)a2, &v11);
      uint64_t v15 = v11;
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((atomic_ullong *)&v13, &v12);
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 344)) {
          break;
        }
      }
      min = (unint64_t *)ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min((void *)a1);
      if (min)
      {
        uint64_t v15 = min;
        ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem(a1, min, (uint64_t)a2, (unint64_t *)&v11);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    uint64_t v8 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>((uint64_t **)(a1 + 752), v14, (unint64_t *)&v16, (uint64_t *)&v16, (uint64_t *)&v15);
    if (!v9) {
      void v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v13);
}

void sub_21E314288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v42 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 776);
  uint64_t v8 = (void *)(a1 + 760);
  char v9 = (uint64_t **)(a1 + 752);
  long long v10 = (ref::details *)(a1 + 1008);
  long long v36 = (unint64_t *)(a1 + 104);
  uint64_t v37 = (std::condition_variable *)(a1 + 840);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v42;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v42;
      uint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= (unint64_t)v42;
        if (v17 >= (unint64_t)v42) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || (unint64_t)v42 < v16[4] || (ref::details *)v16[5] == v10)
      {
LABEL_18:
        uint64_t v43 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v43);
        goto LABEL_19;
      }
    }
    uint64_t v43 = v11;
    long long v44 = (unint64_t *)v10;
    atomic_ullong v12 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(v9, (unint64_t *)&v43, (uint64_t *)&v43);
    unint64_t v13 = v12;
    if (v14)
    {
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    long long v40 = (ref::details *)v12[5];
    if (v40 != v10)
    {
      std::unique_lock<std::mutex>::unlock(&__lk);
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(&v39, (unint64_t *)v40 + 45);
      if (v39 && !*(unsigned char *)(v39 + 344))
      {
        uint64_t v21 = (uint64_t)v42;
        if (*(ref::details ***)(v39 + 32) == v42)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v39, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v39 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
            v38.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)v40, v22);
            v38.__owns_ = 1;
            std::mutex::lock(v38.__m_);
            uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)v40, v23);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            uint64_t v43 = &v40;
            long long v44 = &v39;
            unint64_t v45 = &v42;
            std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(tagged_ptr_cond, &v38, &v46, (uint64_t)&v43);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
            if (v38.__owns_) {
              std::mutex::unlock(v38.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          uint64_t v43 = 0;
          unint64_t v33 = atomic_load(v36);
          if (v33)
          {
            unint64_t v34 = v33;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v36, &v34, v33 + 1);
              if (v34 == v33) {
                break;
              }
              unint64_t v33 = v34;
              if (!v34) {
                goto LABEL_65;
              }
            }
            long long v35 = *(atomic_ullong **)(a1 + 432);
            unint64_t v34 = (unint64_t)v36;
            if (v35)
            {
              *(void *)(a1 + 440) = atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
              unint64_t v34 = (unint64_t)v36;
            }
          }
          else
          {
            unint64_t v34 = 0;
          }
LABEL_65:
          atomic_store(v34, (unint64_t *)&v43);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
          ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_66:
          int v20 = 1;
LABEL_67:
          ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v39);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = (uint64_t)v42;
        goto LABEL_30;
      }
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v43);
      goto LABEL_66;
    }
    uint64_t v25 = (void *)*v8;
    if (*v8)
    {
      uint64_t v26 = v42;
      long long v27 = v8;
      while (1)
      {
        unint64_t v28 = v25[4];
        BOOL v29 = v28 >= (unint64_t)v26;
        if (v28 >= (unint64_t)v26) {
          uint64_t v30 = v25;
        }
        else {
          uint64_t v30 = v25 + 1;
        }
        if (v29) {
          long long v27 = v25;
        }
        uint64_t v25 = (void *)*v30;
        if (!*v30)
        {
          if (v27 == v8) {
            break;
          }
          if ((unint64_t)v26 < v27[4]) {
            break;
          }
          long long v31 = (ref::details *)v27[5];
          if (v31 != v10)
          {
            uint64_t v32 = *((void *)v31 + 45);
            if (v32)
            {
              if (!*(unsigned char *)(v32 + 344)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 736)) {
            break;
          }
          std::condition_variable::wait(v37, &__lk);
          uint64_t v25 = (void *)*v8;
          long long v27 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 736));
  uint64_t v43 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v43);
}

void sub_21E3146A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *ref::Allocator<di_asif::details::map_element,unsigned long long>::allocate_from_empty_pool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  char v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 504) & 0x1FFLL));
    ++*(void *)(a1 + 504);
    *(void *)(a1 + 512) = v7 - 1;
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](a1 + 472, 1);
    ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem(a1, v8, a2, v12);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=(&v11, (atomic_ullong *)v12);
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(void *)(a1 + 464))
  {
    ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    v12[2] = (unint64_t)___ZN3ref9AllocatorIN7di_asif7details11map_elementEyE9evict_lruEv_block_invoke;
    v12[3] = (unint64_t)&__block_descriptor_tmp_3;
    void v12[4] = a1;
    gcd::gcd_queue::async((dispatch_queue_t *)(a1 + 744), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v11);
}

void sub_21E31486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

unint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 75);
  uint64_t v2 = a1[57];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[73];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 344) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[73] + 8 * v4), &v8, 0);
  if (v8 != v5
    || (ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
  {
    return 0;
  }
  return v5;
}

atomic_ullong *ref::Allocator<di_asif::details::map_element,unsigned long long>::insert_elem@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::mark_used((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    long long v10 = (atomic_ullong *)a2[42];
    if (v10) {
      a2[43] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 456))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 456) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v14);
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 968)) {
    return 0;
  }
  BOOL v18 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(void *)(a1 + 968))
  {
    unint64_t v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val(v12 + 8, v8[3], v10) | a2) == 1)
        {
          tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(v12, v13);
          std::mutex::lock(tagged_ptr_lock);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 368), 0xFFFFFFFB);
          std::mutex::unlock(tagged_ptr_lock);
          uint64_t v15 = *v8;
          uint64_t v16 = (uint64_t *)v8[1];
          *(void *)(v15 + 8) = v16;
          *(void *)v8[1] = v15;
          --*(void *)(a1 + 968);
          operator delete(v8);
          unint64_t v8 = v16;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          unint64_t v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 952));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v18);
  return v11;
}

void sub_21E314B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    _OWORD v10[5] = v11;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[41];
    if (v8) {
      a2[42] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::wait_for_ready((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 368)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 344) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 368)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 344)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t ___ZN3ref9AllocatorIN7di_asif7details11map_elementEyE9evict_lruEv_block_invoke(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t min = ref::Allocator<di_asif::details::map_element,unsigned long long>::extract_min(v1);
  if (min) {
    ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool((uint64_t)v1, min);
  }
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list((uint64_t)v1, 0, 0, 0);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::push_back((void *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_21E314F18(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      std::unique_lock<std::mutex> v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  size_t v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E315280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 2u);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)(a2 + 360));
  if (a4) {
    ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 368));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 368)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          uint64_t v12 = *(void *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v12) {
            break;
          }
        }
        if (ref::Allocator<di_asif::details::map_element,unsigned long long>::run_failed_dtors_list(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v20);
          v22.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v29 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = v22.__d_.__rep_ + 200000;
          unint64_t v26 = a2;
          char v27 = v10;
          *(_DWORD *)uint64_t v28 = *(_DWORD *)v32;
          *(_DWORD *)&v28[3] = *(_DWORD *)&v32[3];
          std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> *)::{lambda(void)#1}>(tagged_ptr_cond, &__lk, &v30, (uint64_t)&v26);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v15 = ref::details::_get_tagged_ptr_cond(a2, v14);
          char v16 = atomic_load((unsigned int *)(a2 + 368));
          if ((v16 & 4) == 0)
          {
            uint64_t v17 = (std::condition_variable *)v15;
            do
            {
              if (*(_DWORD *)(a2 + 368)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                uint64_t v18 = *(void *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v18) {
                  break;
                }
              }
              std::condition_variable::wait(v17, &__lk);
              char v19 = atomic_load((unsigned int *)(a2 + 368));
            }
            while ((v19 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v23 = *(_DWORD *)(a2 + 368);
        if (!v9 || (v23 & 1) != 0)
        {
          if (v23) {
            break;
          }
        }
        else if (*(void *)(a1 + 512))
        {
          break;
        }
        char v24 = atomic_load((unsigned int *)(a2 + 368));
      }
      while ((v24 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 592), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 368), 0xFFFFFFFD) & 1;
}

void sub_21E3154E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> *)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 368));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 368)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      uint64_t v11 = *(void *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 368));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 368)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 520));
  BOOL v17 = *(void *)(v15 + 512) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

atomic_ullong *ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::mark_used(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 368));
  BOOL v3 = (unint64_t *)(a1 + 8);
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 336);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 344) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((atomic_ullong *)(a1 + 360), (atomic_ullong *)&v9);
  uint64_t result = ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  uint64_t result = std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 328);
  if (v4) {
    *(void *)(a1 + 336) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(a1, a2, &v14, &v13, a3);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a5;
    v9[4] = *a4;
    void v9[5] = v11;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v14, v10, v9);
  }
  return v9;
}

void *std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    char v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          char v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        char v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    std::chrono::system_clock::time_point v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      std::chrono::system_clock::time_point v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    int64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          int64_t v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        int64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__function::__value_func<int ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *di_utils::fixed_vector_t<di_asif::details::table_entry>::fixed_vector_t(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t result = di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (void *)(*result + v6);
      *unint64_t v7 = 0;
      v7[1] = 0;
      v6 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(uint64_t *a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[4] = 0;
  BOOL v3 = malloc_type_valloc(16 * a2, 0x1000040451B5BE8uLL);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v6, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  v7[0] = &unk_26CF38488;
  v7[3] = v7;
  uint64_t v8 = v3;
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v7);
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::operator=[abi:ne180100](a1, (uint64_t *)&v8);
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100]((uint64_t *)&v8, 0);
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_21E315BDC(_Unwind_Exception *a1)
{
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](v1, 0);
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::~__func()
{
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26CF38488;
  return result;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF38488;
}

void std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1},std::allocator<di_utils::fixed_vector_buffer_t<di_asif::details::table_entry>::fixed_vector_buffer_t(unsigned long)::{lambda(di_asif::details::table_entry*)#1}>,void ()(di_asif::details::table_entry*)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(di_asif::details::table_entry *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }
  *BOOL v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(di_asif::details::table_entry *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(di_asif::details::table_entry *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(di_asif::details::table_entry *)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::deque<unsigned long long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      std::unique_lock<std::mutex> v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  size_t v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E316164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &>(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v10 = (di_asif::details::map_element *)(a1 + 40);
  std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((void *)(a1 + 40));
  di_asif::details::map_element::map_element(v10, a2, a3, *a4, *a5, 0);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(a1);
}

void sub_21E31624C(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E316270(_Unwind_Exception *a1)
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8))) {
    return MEMORY[0x223C24800](result + 24);
  }
  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::make_value<di_asif::details::ContextASIF &,di_asif::details::table &,unsigned long &,unsigned long long &,BOOL>(uint64_t a1, di_asif::details::ContextASIF *a2, di_asif::details::table *a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v12 = (di_asif::details::map_element *)(a1 + 40);
  std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((void *)(a1 + 40));
  di_asif::details::map_element::map_element(v12, a2, a3, *a4, *a5, *a6);
  *(unsigned char *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(a1);
}

void sub_21E316358(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 344) = 1;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E31637C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<436ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF354F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31640C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<450ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF35718;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31649C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<547ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF35938;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31652C(_Unwind_Exception *a1)
{
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *ref::Allocator<di_asif::details::table,unsigned long long>::~Allocator(uint64_t a1)
{
  *(unsigned char *)(a1 + 912) = 0;
  if (*(void *)(a1 + 632))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v3), 0);
      if (v4)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000 | 0x10001;
        ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(a1, v4, v1, 0);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(v4 + 536));
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((void *)(v4 + 8));
        MEMORY[0x223C249A0](v4, 0x10E0C4041ADD984);
      }
      ++v3;
    }
    while (*(void *)(a1 + 632) > v3);
  }
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(a1 + 920), &__block_literal_global_7);
  uint64_t v5 = *(void *)(a1 + 760);
  if (v5) {
    MEMORY[0x223C24980](v5, 0x20C8093837F09);
  }
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v6 = *(void *)(a1 + 656);
  if (*(void *)(a1 + 664) != v6)
  {
    unint64_t v7 = *(void *)(a1 + 680);
    uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
    unint64_t v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    uint64_t v10 = *(void *)(v6 + (((*(void *)(a1 + 688) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 688) + v7) & 0x1FF);
    while (v9 != (uint64_t *)v10)
    {
      uint64_t v11 = *v9;
      if (*v9)
      {
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(v11 + 536));
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((void *)(v11 + 8));
        MEMORY[0x223C249A0](v11, 0x10E0C4041ADD984);
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        uint64_t v12 = (uint64_t *)v8[1];
        ++v8;
        unint64_t v9 = v12;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 696));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100]((void *)(a1 + 1768));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((void *)(a1 + 1736));
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(a1 + 1720));
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk((void *)(a1 + 1192));
  std::__function::__value_func<int ()(di_asif::details::table &)>::~__value_func[abi:ne180100]((void *)(a1 + 1152));
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear((void *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 928, *(void **)(a1 + 936));
  gcd::gcd_group::~gcd_group((NSObject **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(a1 + 648));
  return ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)a1);
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 2u);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(a2 + 536));
  if (a4) {
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 544));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 544)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          uint64_t v12 = *(void *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v12) {
            break;
          }
        }
        if (ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v20);
          v22.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v29 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = v22.__d_.__rep_ + 200000;
          unint64_t v26 = a2;
          char v27 = v10;
          *(_DWORD *)uint64_t v28 = *(_DWORD *)v32;
          *(_DWORD *)&v28[3] = *(_DWORD *)&v32[3];
          std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::table,unsigned long long> *)::{lambda(void)#1}>(tagged_ptr_cond, &__lk, &v30, (uint64_t)&v26);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v15 = ref::details::_get_tagged_ptr_cond(a2, v14);
          char v16 = atomic_load((unsigned int *)(a2 + 544));
          if ((v16 & 4) == 0)
          {
            uint64_t v17 = (std::condition_variable *)v15;
            do
            {
              if (*(_DWORD *)(a2 + 544)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                uint64_t v18 = *(void *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v18) {
                  break;
                }
              }
              std::condition_variable::wait(v17, &__lk);
              char v19 = atomic_load((unsigned int *)(a2 + 544));
            }
            while ((v19 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v23 = *(_DWORD *)(a2 + 544);
        if (!v9 || (v23 & 1) != 0)
        {
          if (v23) {
            break;
          }
        }
        else if (*(void *)(a1 + 688))
        {
          break;
        }
        char v24 = atomic_load((unsigned int *)(a2 + 544));
      }
      while ((v24 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 544), 0xFFFFFFFD) & 1;
}

void sub_21E316A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::~tagged_allocated_type(uint64_t a1)
{
  return a1;
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 1144)) {
    return 0;
  }
  uint64_t v18 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(void *)(a1 + 1144))
  {
    char v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val(v12 + 8, v8[3], v10) | a2) == 1)
        {
          tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(v12, v13);
          std::mutex::lock(tagged_ptr_lock);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 544), 0xFFFFFFFB);
          std::mutex::unlock(tagged_ptr_lock);
          uint64_t v15 = *v8;
          char v16 = (uint64_t *)v8[1];
          *(void *)(v15 + 8) = v16;
          *(void *)v8[1] = v15;
          --*(void *)(a1 + 1144);
          operator delete(v8);
          char v8 = v16;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v18);
  return v11;
}

void sub_21E316C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem_options,ref::tagged_ptr<di_asif::details::table,unsigned long long> *)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 544));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 544)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      uint64_t v11 = *(void *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 544));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 544)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 696));
  BOOL v17 = *(void *)(v15 + 688) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

void *ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk(void *a1)
{
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<di_asif::details::table,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
    std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
    std::__function::__value_func<void ()(di_asif::details::table_entry *)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(void *result)
{
  if (result[2])
  {
    unint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)(a1 + 13), v3, 1u);
  }
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::~ctrl_blk(v2);
  std::__function::__value_func<int ()(di_asif::details::table &)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](a1);
}

void *ref::Allocator<di_asif::details::map_element,unsigned long long>::~Allocator(uint64_t a1)
{
  *(unsigned char *)(a1 + 736) = 0;
  if (*(void *)(a1 + 456))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 584) + 8 * v3), 0);
      if (v4)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000 | 0x10001;
        ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(a1, v4, v1, 0);
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)(v4 + 360));
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((void *)(v4 + 8));
        MEMORY[0x223C249A0](v4, 0x10F0C408C1362C6);
      }
      ++v3;
    }
    while (*(void *)(a1 + 456) > v3);
  }
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(a1 + 744), &__block_literal_global_1046);
  uint64_t v5 = *(void *)(a1 + 584);
  if (v5) {
    MEMORY[0x223C24980](v5, 0x20C8093837F09);
  }
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v6 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v6)
  {
    unint64_t v7 = *(void *)(a1 + 504);
    uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
    char v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    uint64_t v10 = *(void *)(v6 + (((*(void *)(a1 + 512) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 512) + v7) & 0x1FF);
    while (v9 != (uint64_t *)v10)
    {
      uint64_t v11 = *v9;
      if (*v9)
      {
        ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)(v11 + 360));
        ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((void *)(v11 + 8));
        MEMORY[0x223C249A0](v11, 0x10F0C408C1362C6);
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        std::chrono::system_clock::time_point v12 = (uint64_t *)v8[1];
        ++v8;
        char v9 = v12;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 520));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100]((void *)(a1 + 1416));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((void *)(a1 + 1384));
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)(a1 + 1368));
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk((void *)(a1 + 1016));
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100]((void *)(a1 + 976));
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear((void *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 752, *(void **)(a1 + 760));
  gcd::gcd_group::~gcd_group((NSObject **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(a1 + 472));
  return ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)a1);
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::~tagged_allocated_type(uint64_t a1)
{
  return a1;
}

void *ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk(void *a1)
{
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<di_asif::details::map_element,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(void *)(a1 + 32) = &unk_26CF2F5D0;
    std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100]((uint64_t *)(a1 + 56), 0);
    std::__function::__value_func<void ()(unsigned long long *)>::~__value_func[abi:ne180100]((void *)(a1 + 64));
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t(void *a1)
{
  uint64_t v2 = a1 + 13;
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val((uint64_t)(a1 + 13), v3, 1u);
  }
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::~ctrl_blk(v2);
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<863ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF35BD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E317758(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<888ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF35DF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3177E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<900ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36018;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E317878(_Unwind_Exception *a1)
{
}

void std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::~__func()
{
}

__n128 std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26CF38558;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CF38558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0,std::allocator<di_asif::details::table::flush(di_asif::details::ContextASIF &)::$_0>,void ()(char const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::deque<unsigned long long>::__insert_bidirectional[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(void **a1, char *a2, uint64_t a3, void *a4, char *a5, void *a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = (unint64_t)a1[4];
  unint64_t v15 = v14 >> 9;
  char v16 = a1[1];
  BOOL v17 = a1[2];
  uint64_t v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
  }
  uint64_t v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    uint64_t v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0;
    }
    unint64_t v25 = (unint64_t)&v21[v14];
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      std::deque<unsigned long long>::__add_back_capacity(a1, a8 - v26);
      uint64_t v21 = (char *)a1[5];
      char v16 = a1[1];
      BOOL v17 = a1[2];
      unint64_t v25 = (unint64_t)&v21[(void)a1[4]];
    }
    long long v88 = (char **)a6;
    char v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = &(*v27)[8 * (v25 & 0x1FF)];
    }
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    unint64_t v31 = (unint64_t)&v21[-v20];
    long long v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      unint64_t v34 = a7;
      if (!v8) {
        goto LABEL_90;
      }
      goto LABEL_78;
    }
    if (v31 >= v8 >> 1)
    {
      uint64_t v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        unint64_t v33 = *v88;
        goto LABEL_39;
      }
      unint64_t v37 = 511 - v32;
      __int16 v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      uint64_t v39 = *v88;
    }
    else
    {
      if (!v31)
      {
        long long v88 = (char **)a4;
        unint64_t v34 = a5;
        goto LABEL_69;
      }
      uint64_t v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        long long v88 = (char **)&a4[(unint64_t)v32 >> 9];
        unint64_t v33 = *v88;
LABEL_39:
        unint64_t v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }
      unint64_t v64 = 511 - v32;
      __int16 v38 = ~(_WORD)v64;
      long long v88 = (char **)&a4[-(v64 >> 9)];
      uint64_t v39 = *v88;
    }
    unint64_t v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      long long v65 = *v27;
      long long v66 = v88;
      char v67 = v34;
      do
      {
        *(void *)uint64_t v28 = *(void *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          uint64_t v68 = v27[1];
          ++v27;
          long long v65 = v68;
          uint64_t v28 = v68;
        }
        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          long long v69 = v66[1];
          ++v66;
          char v67 = v69;
        }
        ++v21;
      }
      while (v67 != a7);
      a1[5] = v21;
    }
    unint64_t v8 = v31;
    if (!v31) {
      goto LABEL_90;
    }
LABEL_78:
    long long v70 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100]((uint64_t)&v90, v8);
    char v72 = v70;
    long long v73 = v71;
    char v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      uint64_t v75 = (char *)a1[5];
      uint64_t v76 = *v27;
      uint64_t v77 = v70;
      long long v78 = v71;
      do
      {
        *(void *)uint64_t v28 = *(void *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          long long v79 = v27[1];
          ++v27;
          uint64_t v76 = v79;
          uint64_t v28 = v79;
        }
        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          uint64_t v80 = (char *)v77[1];
          ++v77;
          long long v78 = v80;
        }
        ++v75;
      }
      while (v78 != v74);
      a1[5] = v75;
    }
    if (v8 >= v31)
    {
      long long v83 = (void *)v90.n128_u64[0];
    }
    else
    {
      uint64_t v81 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100]((uint64_t)&v90, v31);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      char v74 = (char *)v92.n128_u64[1];
      long long v83 = (void *)v92.n128_u64[0];
      __n128 v90 = v92;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }
  if (a8 > v14)
  {
    std::deque<unsigned long long>::__add_front_capacity(a1, a8 - v14);
    unint64_t v14 = (unint64_t)a1[4];
    char v16 = a1[1];
    BOOL v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }
  std::chrono::system_clock::time_point v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *v22 + 8 * (v14 & 0x1FF);
  }
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = a5;
    if (!v8) {
      goto LABEL_90;
    }
    goto LABEL_55;
  }
  if (v20 >= v8 >> 1)
  {
    uint64_t v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    unint64_t v35 = 511 - v29;
    __int16 v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = a7;
      goto LABEL_46;
    }
    uint64_t v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    unint64_t v40 = 511 - v29;
    __int16 v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = (char *)(*a4 + 8 * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    char v41 = (char *)a1[5];
    uint64_t v42 = *v22;
    uint64_t v43 = (char **)a4;
    long long v44 = v30;
    do
    {
      if (v23 == v42)
      {
        uint64_t v45 = *--v22;
        uint64_t v42 = v45;
        uint64_t v23 = v45 + 4096;
      }
      if (v44 == *v43)
      {
        uint64_t v46 = (uint64_t)*--v43;
        long long v44 = (char *)(v46 + 4096);
      }
      uint64_t v47 = *((void *)v44 - 1);
      v44 -= 8;
      *(void *)(v23 - 8) = v47;
      v23 -= 8;
      --v14;
      ++v41;
    }
    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }
  unint64_t v8 = v20;
  if (v20)
  {
LABEL_55:
    long long v89 = (char **)a6;
    unint64_t v48 = (char **)a4;
    uint64_t v49 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v90, v8);
    long long v51 = v49;
    uint64_t v52 = v50;
    unint64_t v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      int64x2_t v54 = *((int64x2_t *)a1 + 2);
      uint64_t v55 = *v22;
      size_t v56 = v49;
      long long v57 = v50;
      do
      {
        if (v23 == v55)
        {
          uint64_t v58 = *--v22;
          uint64_t v55 = v58;
          uint64_t v23 = v58 + 4096;
        }
        if (v57 == *v56)
        {
          uint64_t v59 = (uint64_t)*--v56;
          long long v57 = (char *)(v59 + 4096);
        }
        uint64_t v60 = *((void *)v57 - 1);
        v57 -= 8;
        *(void *)(v23 - 8) = v60;
        v23 -= 8;
        int64x2_t v54 = vaddq_s64(v54, (int64x2_t)xmmword_21E3A0B70);
      }
      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }
    if (v8 >= v20)
    {
      unint64_t v63 = v90.n128_u64[0];
    }
    else
    {
      BOOL v61 = (char **)std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v90, v20);
      __n128 v91 = v90;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(v51, v52, v61, v62, (uint64_t)&v91);
      unint64_t v53 = v91.n128_u64[1];
      unint64_t v63 = v91.n128_u64[0];
      __n128 v90 = v91;
    }
    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(v48, v30, v89, a7, (uint64_t)&v91);
  }
LABEL_90:
  long long v84 = a1[1];
  if (a1[2] == v84) {
    uint64_t v85 = 0;
  }
  else {
    uint64_t v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100]((uint64_t)&v91, v20);
}

void std::deque<unsigned long long>::__add_front_capacity(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  char v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 6) - 1;
  }
  if ((v6 & 0x1FF) != 0) {
    unint64_t v8 = (v6 >> 9) + 1;
  }
  else {
    unint64_t v8 = v6 >> 9;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      uint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
            unint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 511 : 512;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v12, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      uint64_t v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        long long v66 = operator new(0x1000uLL);
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (unint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            __int16 v36 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v70, v35);
            __int16 v38 = (uint64_t *)__p[1];
            unint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              unint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              char v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)char v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            uint64_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            uint64_t v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              unint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            uint64_t v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              unint64_t i = (char *)__p[1];
            }
            unint64_t v34 = &i[-8 * (v31 >> 1)];
            unint64_t i = &v32[v33];
            __p[1] = v34;
            uint64_t v68 = &v32[v33];
          }
        }
        *(void *)unint64_t i = *((void *)v25 - 1);
        unint64_t i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      long long v44 = (char *)a1[1];
      if (v44 == v25)
      {
        long long v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              unint64_t v53 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v70, v52);
              uint64_t v55 = (uint64_t *)__p[1];
              unint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                unint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              uint64_t v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                unint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                unint64_t i = (char *)__p[1];
              }
              long long v51 = &i[-8 * (v48 >> 1)];
              unint64_t i = &v49[v50];
              __p[1] = v51;
              uint64_t v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)unint64_t i = v61;
          unint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }
      long long v62 = v69;
      unint64_t v63 = (char *)a1[3];
      unint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      long long v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      uint64_t v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        uint64_t v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_21E318408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void std::deque<unsigned long long>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          char v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              long long v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __n128 v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        long long v88 = operator new(0x1000uLL);
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_21E3189F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      unint64_t v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long long *,unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  unint64_t v6 = a4;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
  }
  else
  {
    unint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    long long v15 = a5;
    unint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v12, v14, v15, v16, &v21);
      unint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      unint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned long long *,std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    unint64_t v9 = a1;
  }
  else
  {
    unint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      unint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void space_allocators::FixedSize::insert<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a3 != a5)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a3;
    unint64_t v14 = a3;
    uint64_t v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        unint64_t v16 = v15[1];
        ++v15;
        uint64_t v12 = v16;
        unint64_t v14 = v16;
      }
      if (v14 == a5) {
        break;
      }
      if (*v13 < *v14) {
        uint64_t v13 = v14;
      }
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    std::set<unsigned long long>::insert[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + *v13;
    }
    space_allocators::FixedSize::trim_largest((void *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_21E318F00(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<std::__deque_iterator<unsigned long long,unsigned long long *,unsigned long long &,unsigned long long **,long,512l>>(uint64_t *result, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    unint64_t v8 = (uint64_t **)result;
    unint64_t v9 = result + 1;
    do
    {
      __n128 result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        uint64_t v10 = (unint64_t *)a2[1];
        ++a2;
        unint64_t v6 = v10;
      }
    }
    while (v6 != a5);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t di_log::logger_buf<di_log::log_printer<1075ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36458;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E319098(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1081ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36678;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E319128(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1090ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36898;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3191B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1151ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36AB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E319248(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1188ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36CD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3192D8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1441ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF36EF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E319368(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1513ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37338;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3193F8(_Unwind_Exception *a1)
{
}

void ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v42 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 952);
  unint64_t v8 = (void *)(a1 + 936);
  unint64_t v9 = (uint64_t **)(a1 + 928);
  uint64_t v10 = (ref::details *)(a1 + 1184);
  uint64_t v36 = (unint64_t *)(a1 + 104);
  uint64_t v37 = (std::condition_variable *)(a1 + 1016);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v42;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v42;
      unint64_t v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= (unint64_t)v42;
        if (v17 >= (unint64_t)v42) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          unint64_t v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || (unint64_t)v42 < v16[4] || (ref::details *)v16[5] == v10)
      {
LABEL_18:
        uint64_t v43 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v43);
        goto LABEL_19;
      }
    }
    uint64_t v43 = v11;
    uint64_t v44 = (unint64_t *)v10;
    uint64_t v12 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(v9, (unint64_t *)&v43, (uint64_t *)&v43);
    uint64_t v13 = v12;
    if (v14)
    {
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v40 = (ref::details *)v12[5];
    if (v40 != v10)
    {
      std::unique_lock<std::mutex>::unlock(&__lk);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(&v39, (unint64_t *)v40 + 67);
      if (v39 && !*(unsigned char *)(v39 + 520))
      {
        uint64_t v21 = (uint64_t)v42;
        if (*(ref::details ***)(v39 + 32) == v42)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v39, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v39 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 1uLL);
            v38.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)v40, v22);
            v38.__owns_ = 1;
            std::mutex::lock(v38.__m_);
            uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)v40, v23);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            uint64_t v43 = &v40;
            uint64_t v44 = &v39;
            int64_t v45 = &v42;
            std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(tagged_ptr_cond, &v38, &v46, (uint64_t)&v43);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 768), 0xFFFFFFFFFFFFFFFFLL);
            if (v38.__owns_) {
              std::mutex::unlock(v38.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          uint64_t v43 = 0;
          unint64_t v33 = atomic_load(v36);
          if (v33)
          {
            unint64_t v34 = v33;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v36, &v34, v33 + 1);
              if (v34 == v33) {
                break;
              }
              unint64_t v33 = v34;
              if (!v34) {
                goto LABEL_65;
              }
            }
            unint64_t v35 = *(atomic_ullong **)(a1 + 608);
            unint64_t v34 = (unint64_t)v36;
            if (v35)
            {
              *(void *)(a1 + 616) = atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
              unint64_t v34 = (unint64_t)v36;
            }
          }
          else
          {
            unint64_t v34 = 0;
          }
LABEL_65:
          atomic_store(v34, (unint64_t *)&v43);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_66:
          int v20 = 1;
LABEL_67:
          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v39);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = (uint64_t)v42;
        goto LABEL_30;
      }
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v43);
      goto LABEL_66;
    }
    unint64_t v25 = (void *)*v8;
    if (*v8)
    {
      int64_t v26 = v42;
      int64_t v27 = v8;
      while (1)
      {
        unint64_t v28 = v25[4];
        BOOL v29 = v28 >= (unint64_t)v26;
        if (v28 >= (unint64_t)v26) {
          uint64_t v30 = v25;
        }
        else {
          uint64_t v30 = v25 + 1;
        }
        if (v29) {
          int64_t v27 = v25;
        }
        unint64_t v25 = (void *)*v30;
        if (!*v30)
        {
          if (v27 == v8) {
            break;
          }
          if ((unint64_t)v26 < v27[4]) {
            break;
          }
          uint64_t v31 = (ref::details *)v27[5];
          if (v31 != v10)
          {
            uint64_t v32 = *((void *)v31 + 67);
            if (v32)
            {
              if (!*(unsigned char *)(v32 + 520)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 912)) {
            break;
          }
          std::condition_variable::wait(v37, &__lk);
          unint64_t v25 = (void *)*v8;
          int64_t v27 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 912));
  uint64_t v43 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v43);
}

void sub_21E3197E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *ref::Allocator<di_asif::details::table,unsigned long long>::allocate_from_empty_pool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v12 = 0;
  unint64_t v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v7 = *(void *)(a1 + 688);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 680);
    unint64_t v9 = *(unint64_t **)(*(void *)(*(void *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    *(void *)(a1 + 688) = v7 - 1;
    *(void *)(a1 + 680) = v8 + 1;
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](a1 + 648, 1);
    ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem(a1, v9, a2, v13);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=(&v12, (atomic_ullong *)v13);
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)v13);
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(void *)(a1 + 640))
  {
    ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
  }
  else
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 0x40000000;
    void v13[2] = (unint64_t)___ZN3ref9AllocatorIN7di_asif7details5tableEyE9evict_lruEv_block_invoke;
    void v13[3] = (unint64_t)&__block_descriptor_tmp_1057;
    v13[4] = a1;
    gcd::gcd_queue::async((dispatch_queue_t *)(a1 + 920), v13);
  }
  *a3 = v9;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v12, 0), (unint64_t *)a3 + 1);
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v12);
}

void sub_21E3199B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

unint64_t ref::Allocator<di_asif::details::table,unsigned long long>::extract_min(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 97);
  uint64_t v2 = a1[79];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[95];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 520) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[95] + 8 * v4), &v8, 0);
  if (v8 != v5
    || (ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
  {
    return 0;
  }
  return v5;
}

atomic_ullong *ref::Allocator<di_asif::details::table,unsigned long long>::insert_elem@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::mark_used((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = (atomic_ullong *)a2[64];
    if (v10) {
      a2[65] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 632))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 760) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 632) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v14);
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[63];
    if (v7) {
      v3[64] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 520)) {
      std::__atomic_base<ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ready_state,false>::wait[abi:ne180100](a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL std::__atomic_base<ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ready_state,false>::wait[abi:ne180100](uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>((uint64_t)&v4, (uint64_t)&v5, 0);
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2, int a3)
{
  unsigned int v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      unsigned int v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unsigned int v8 = (atomic_ullong *)a2[63];
    if (v8) {
      a2[64] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::wait_for_ready((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<di_asif::details::table,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 544)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 520) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 544)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 520)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t ___ZN3ref9AllocatorIN7di_asif7details5tableEyE9evict_lruEv_block_invoke(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t min = ref::Allocator<di_asif::details::table,unsigned long long>::extract_min(v1);
  if (min) {
    ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool((uint64_t)v1, min);
  }
  return ref::Allocator<di_asif::details::table,unsigned long long>::run_failed_dtors_list((uint64_t)v1, 0, 0, 0);
}

void ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unsigned int v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::push_back((void *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_21E319FCC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      std::unique_lock<std::mutex> v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  int64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E31A334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::mark_used(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 544));
  BOOL v3 = (unint64_t *)(a1 + 8);
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    uint64_t v6 = *(atomic_ullong **)(a1 + 512);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 520) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((atomic_ullong *)(a1 + 536), (atomic_ullong *)&v9);
  __n128 result = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
  }
  return result;
}

void *ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  __n128 result = std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((void *)(a1 + 40));
  unint64_t v4 = *(atomic_ullong **)(a1 + 504);
  if (v4) {
    *(void *)(a1 + 512) = atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v11 = a1 + 40;
  std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((void *)(a1 + 40));
  std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL,di_asif::details::table*>(v11, a2, a3, a4, a5, a6);
}

void sub_21E31A560(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E31A584(_Unwind_Exception *a1)
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8))) {
    return MEMORY[0x223C24800](result + 24);
  }
  return result;
}

void std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,BOOL,di_asif::details::table*>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v6 = a3[1];
  v7[0] = *a3;
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  di_asif::details::table::table(a1, a2, (uint64_t)v7, *a4, *a5, *a6);
}

void sub_21E31A62C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::make_value<di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v9 = a1 + 40;
  std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((void *)(a1 + 40));
  std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,di_asif::details::table*>(v9, a2, a3, a4, a5);
}

void sub_21E31A6DC(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 520) = 1;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E31A700(_Unwind_Exception *a1)
{
}

void std::construct_at[abi:ne180100]<di_asif::details::table,di_asif::details::dir &,std::shared_ptr<Backend> &,unsigned long long &,unsigned long long,di_asif::details::table*>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  di_asif::details::table::table(a1, a2, (uint64_t)v6, *a4, *a5, 0);
}

void sub_21E31A77C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t di_log::logger_buf<di_log::log_printer<2061ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF375E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31A810(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<2071ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37808;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31A8A0(_Unwind_Exception *a1)
{
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t di_log::logger_buf<di_log::log_printer<2311ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37A28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31A984(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<2321ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF37C48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31AA14(_Unwind_Exception *a1)
{
}

void *std::__function::__value_func<int ()(di_asif::details::table &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ref::Allocator<di_asif::details::table,unsigned long long>::Allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(a1);
  *(void *)(v8 + 632) = a2;
  *(void *)(v8 + 640) = a3;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(void *)(v8 + 696) = 850045863;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(void *)(v8 + 752) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(void *)(v8 + 800) = 850045863;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(void *)(v8 + 856) = 0;
  *(void *)(v8 + 864) = 1018212795;
  *(void *)(v8 + 904) = 0;
  *(_OWORD *)(v8 + 888) = 0u;
  *(unsigned char *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  gcd::gcd_queue::gcd_queue(v8 + 920, "dealloc_queue", 2);
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = a1 + 936;
  *(void *)(a1 + 952) = 850045863;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 1018212795;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1064) = 850045863;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = a1 + 1128;
  *(void *)(a1 + 1136) = a1 + 1128;
  *(void *)(a1 + 1144) = 0;
  std::__function::__value_func<int ()(di_asif::details::table &)>::__value_func[abi:ne180100](a1 + 1152, a4);
  ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(a1 + 1184, a1);
  *(void *)(a1 + 1736) = &unk_26CF38898;
  *(void *)(a1 + 1744) = a1;
  *(void *)(a1 + 1760) = a1 + 1736;
  *(void *)(a1 + 1768) = &unk_26CF38928;
  *(void *)(a1 + 1776) = a1;
  *(void *)(a1 + 1792) = a1 + 1768;
  operator new[]();
}

void sub_21E31ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  std::__function::__value_func<int ()(di_asif::details::table &)>::~__value_func[abi:ne180100](a10);
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v13 + 928, *a11);
  gcd::gcd_group::~gcd_group(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v14);
  ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(uint64_t a1)
{
  *(void *)a1 = &unk_26CF385E8;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = &unk_26CF38678;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = &unk_26CF38708;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::init(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 624) = 1;
  return a1;
}

void sub_21E31AF54(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(di_asif::details::table &)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF385E8;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF385E8;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF38678;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF38678;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF38708;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF38708;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::table&)#1}>,int ()(di_asif::details::table&)>::target_type()
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](a1 + 408, a2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__value_func[abi:ne180100](a1 + 440, a3);
  std::__function::__value_func<int ()(di_asif::details::table &)>::__value_func[abi:ne180100](a1 + 472, a4);
  *(void *)(a1 + 504) = a5;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_21E31B26C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v2);
  std::__optional_destruct_base<di_asif::details::table,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<int ()(di_asif::details::table &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  v5[0] = &unk_26CF38798;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = &unk_26CF38818;
  v4[1] = a1;
  v4[3] = v4;
  ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::ctrl_blk(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 1152, a2 + 776);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v5);
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_21E31B538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38798;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38798;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(**(void **)(a1 + 8) + 1736, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1)
{
  return std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(**(void **)(a1 + 8) + 1768, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::table,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38898;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void ref::Allocator<di_asif::details::table,unsigned long long>::deleter(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 544)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (std::mutex *)(a1 + 1064);
    std::mutex::lock((std::mutex *)(a1 + 1064));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 1128);
    *int v8 = v9;
    v8[1] = a1 + 1128;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 1128) = v8;
    ++*(void *)(a1 + 1144);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 4u);
    tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v10);
    std::mutex::lock(tagged_ptr_lock);
    uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v12);
    std::condition_variable::notify_all(tagged_ptr_cond);
    std::mutex::unlock(tagged_ptr_lock);
LABEL_14:
    std::mutex::unlock(v7);
    return;
  }
  ref::Allocator<di_asif::details::table,unsigned long long>::delete_tag(a1, a3);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)(a2 + 536));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 544), 1u) & 2) == 0) {
    ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 792)))
    {
      std::mutex::lock((std::mutex *)(a1 + 800));
      if (atomic_load((unint64_t *)(a1 + 792))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 864));
      }
      std::mutex::unlock((std::mutex *)(a1 + 800));
    }
  }
  uint64_t v17 = (unint64_t *)(a1 + 768);
  if (atomic_load(v17))
  {
    uint64_t v7 = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v14);
    std::mutex::lock(v7);
    if (atomic_load(v17))
    {
      uint64_t v21 = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v19);
      std::condition_variable::notify_all(v21);
    }
    goto LABEL_14;
  }
}

void sub_21E31BA44(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::table,unsigned long long>::delete_tag(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_21E31BAC4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      unint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38928;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::operator()(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::table,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,ref::tagged_ptr<di_asif::details::table,unsigned long long> &)>::target_type()
{
}

void ref::Allocator<di_asif::details::table,unsigned long long>::deallocate(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 632);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 760);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        ref::Allocator<di_asif::details::table,unsigned long long>::drop_elem(a1, a2, 1uLL, a3);
        ref::Allocator<di_asif::details::table,unsigned long long>::add_to_free_pool(a1, a2);
      }
    }
  }
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::Allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(a1);
  *(void *)(v8 + 456) = a2;
  *(void *)(v8 + 464) = a3;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(void *)(v8 + 520) = 850045863;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(void *)(v8 + 576) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 608) = 0u;
  *(void *)(v8 + 624) = 850045863;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(void *)(v8 + 680) = 0;
  *(void *)(v8 + 688) = 1018212795;
  *(void *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 712) = 0u;
  *(unsigned char *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  gcd::gcd_queue::gcd_queue(v8 + 744, "dealloc_queue", 2);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 776) = 850045863;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 840) = 1018212795;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 850045863;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 952) = a1 + 952;
  *(void *)(a1 + 960) = a1 + 952;
  *(void *)(a1 + 968) = 0;
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::__value_func[abi:ne180100](a1 + 976, a4);
  ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(a1 + 1008, a1);
  *(void *)(a1 + 1384) = &unk_26CF38C68;
  *(void *)(a1 + 1392) = a1;
  *(void *)(a1 + 1408) = a1 + 1384;
  *(void *)(a1 + 1416) = &unk_26CF38CF8;
  *(void *)(a1 + 1424) = a1;
  *(void *)(a1 + 1440) = a1 + 1416;
  operator new[]();
}

void sub_21E31BF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100](a10);
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v13 + 752, *a11);
  gcd::gcd_group::~gcd_group(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v14);
  ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(uint64_t a1)
{
  *(void *)a1 = &unk_26CF389B8;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = &unk_26CF38A48;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)(a1 + 64) = &unk_26CF38AD8;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::init(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 448) = 1;
  return a1;
}

void sub_21E31C184(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF389B8;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF389B8;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF38A48;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF38A48;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26CF38AD8;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF38AD8;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::error_ctrl_blk_t::{lambda(di_asif::details::map_element&)#1}>,int ()(di_asif::details::map_element&)>::target_type()
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](a1 + 232, a2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__value_func[abi:ne180100](a1 + 264, a3);
  std::__function::__value_func<int ()(di_asif::details::map_element &)>::__value_func[abi:ne180100](a1 + 296, a4);
  *(void *)(a1 + 328) = a5;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  return a1;
}

void sub_21E31C49C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v2);
  std::__optional_destruct_base<di_asif::details::map_element,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<int ()(di_asif::details::map_element &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  v5[0] = &unk_26CF38B68;
  v5[1] = a1;
  void v5[3] = v5;
  v4[0] = &unk_26CF38BE8;
  v4[1] = a1;
  v4[3] = v4;
  ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ctrl_blk(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 976, a2 + 600);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v5);
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_21E31C768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38B68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38B68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(**(void **)(a1 + 8) + 1384, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38BE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38BE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1)
{
  return std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(**(void **)(a1 + 8) + 1416, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long>::tagged_allocated_type(ref::Allocator<di_asif::details::map_element,unsigned long long> &)::{lambda(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38C68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38C68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::deleter(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 368)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (std::mutex *)(a1 + 888);
    std::mutex::lock((std::mutex *)(a1 + 888));
    int v8 = operator new(0x20uLL);
    v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 952);
    *int v8 = v9;
    v8[1] = a1 + 952;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 952) = v8;
    ++*(void *)(a1 + 968);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 4u);
    tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v10);
    std::mutex::lock(tagged_ptr_lock);
    uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v12);
    std::condition_variable::notify_all(tagged_ptr_cond);
    std::mutex::unlock(tagged_ptr_lock);
LABEL_14:
    std::mutex::unlock(v7);
    return;
  }
  ref::Allocator<di_asif::details::map_element,unsigned long long>::delete_tag(a1, a3);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset((atomic_ullong *)(a2 + 360));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 368), 1u) & 2) == 0) {
    ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 608), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 616)))
    {
      std::mutex::lock((std::mutex *)(a1 + 624));
      if (atomic_load((unint64_t *)(a1 + 616))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 688));
      }
      std::mutex::unlock((std::mutex *)(a1 + 624));
    }
  }
  uint64_t v17 = (unint64_t *)(a1 + 592);
  if (atomic_load(v17))
  {
    uint64_t v7 = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v14);
    std::mutex::lock(v7);
    if (atomic_load(v17))
    {
      uint64_t v21 = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v19);
      std::condition_variable::notify_all(v21);
    }
    goto LABEL_14;
  }
}

void sub_21E31CC74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::delete_tag(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_21E31CCF4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38CF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38CF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::operator()(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1},std::allocator<ref::Allocator<di_asif::details::map_element,unsigned long long>::{lambda(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *,ref::tagged_ptr<di_asif::details::map_element,unsigned long long> &)>::target_type()
{
}

void ref::Allocator<di_asif::details::map_element,unsigned long long>::deallocate(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 456);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 584);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        ref::Allocator<di_asif::details::map_element,unsigned long long>::drop_elem(a1, a2, 1uLL, a3);
        ref::Allocator<di_asif::details::map_element,unsigned long long>::add_to_free_pool(a1, a2);
      }
    }
  }
}

void _ZNSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26CF38D88;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE7__cloneEPNS0_6__baseISA_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF38D88;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EEclES6_(uint64_t a1, uint64_t a2)
{
  return _ZNK7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_clES3_((uint64_t *)(a1 + 8), a2);
}

uint64_t _ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN7di_asif7details3dir20map_element_close_fnMUlRNS3_11map_elementEE_ENS_9allocatorIS7_EEFiS6_EE11target_typeEv()
{
  return &_ZTIN7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_E;
}

uint64_t _ZNK7di_asif7details3dir20map_element_close_fnMUlRNS0_11map_elementEE_clES3_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 24);
  v9[0] = &unk_26CF2F358;
  v9[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 16) + 72))(&v10);
  if (*(unsigned char *)(a2 + 113)) {
    di_asif::details::dir::get_table((di_asif::details::dir *)v3, (di_asif::details::ContextASIF *)v9, *(void *)(a2 + 8) / *(void *)(v3 + 80), 0, 0, (unint64_t *)&v8);
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 && !v8[520])
  {
    if (v8[400]) {
      uint64_t v5 = (di_asif::details::table *)(v8 + 40);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = di_asif::details::map_element::close((di_asif::details::map_element *)a2, (di_asif::details::ContextASIF *)v9, v5, *(unsigned int *)(v3 + 20));
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((atomic_ullong *)&v8);
  v9[0] = &unk_26CF2F358;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v6;
}

void sub_21E31D098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>(uint64_t *a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = (const void **)a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *v5;
  *uint64_t v5 = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = (uint64_t)v5[1];
  std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)(v5 + 2));
  di_asif::details::dir::defrag(v3, (uint64_t)v6);
  std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::~__value_func[abi:ne180100](v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)&v5);
  return 0;
}

void sub_21E31D288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,di_asif::details::dir::dir(DiskImageASIF &,unsigned long long,unsigned int,unsigned short,unsigned long long,unsigned long,Backend *,std::function<void ()(di_asif::details::ContextASIF &)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(di_asif::details::ContextASIF &)>::~__value_func[abi:ne180100](v2 + 2);
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x223C249A0](v2, 0x1020C407A7143E5);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x223C24700]();
    JUMPOUT(0x223C249A0);
  }
  return result;
}

_WORD *di_asif::header::total_segments_t::total_segments_t(_WORD *this, int a2)
{
  *this = 0;
  if (a2)
  {
    __int16 v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "total_segments_t";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &unk_26CF34B58;
    *((_WORD *)exception + 16) = v2;
  }
  return this;
}

uint64_t smart_enums::validators::value<unsigned int>(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
LABEL_5:
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = v5;
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = a2;
  }
  uint64_t v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<2828ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF38318;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31D500(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<2831ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF380F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31D590(_Unwind_Exception *a1)
{
}

const void **CFAutoRelease<__CFData const*>::~CFAutoRelease(const void **a1)
{
  __int16 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t di_asif::details::table::get_table_extents<std::insert_iterator<std::set<unsigned long long>>>(di_asif::details::table *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = di_asif::details::table::make_map_entry_iterators(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = 0;
    v7[0] = (*(void *)(*(void *)(v13[0] + 56) + 16 * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(void *)(v13[0] + 8) + 20);
    if (v7[0]) {
      std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100]((uint64_t)v14, v7);
    }
    di_asif::details::table::make_data_entry_iterators_for_map(a1, (const di_asif::details::table_entry_map *)v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      uint64_t v6 = 0;
      uint64_t v6 = (*(void *)(*(void *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(v8 + 8) + 20);
      if (v6) {
        std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100]((uint64_t)v14, (unint64_t *)&v6);
      }
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v7);
    }
    uint64_t result = di_asif::details::map_entry_iterator_t::operator++((uint64_t)v12);
  }
  return result;
}

uint64_t std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  char v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      long long v5 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      long long v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void space_allocators::FixedSize::insert<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *((void *)a3 + 1);
  if (v4 != v5)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[2];
    uint64_t v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      unint64_t v13 = v10 + v11 * v12;
      uint64_t v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          uint64_t v4 = v12;
          uint64_t v14 = v12;
        }
        ++v12;
        v13 += v11;
      }
      while (v5 != v12);
    }
    std::mutex::lock((std::mutex *)(a1 + 8));
    long long v18 = *(_OWORD *)a2;
    uint64_t v19 = a2[2];
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    std::set<unsigned long long>::insert[abi:ne180100]<boost::range_detail::integer_iterator_with_step<unsigned long long>>((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    unint64_t v15 = v10 + v4 * v11;
    if (v15 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + v15;
    }
    space_allocators::FixedSize::trim_largest((void *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
}

void sub_21E31D85C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<boost::range_detail::integer_iterator_with_step<unsigned long long>>(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 != *(void *)(a3 + 8))
  {
    BOOL v6 = (uint64_t **)result;
    uint64_t v7 = result + 1;
    do
    {
      uint64_t v8 = *a2 + a2[2] * v3;
      uint64_t result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v6, v7, (unint64_t *)&v8, &v8);
      uint64_t v3 = a2[1] + 1;
      a2[1] = v3;
    }
    while (v3 != *(void *)(a3 + 8));
  }
  return result;
}

di_utils *std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageASIF::void_stackable_identifier(std::shared_ptr<Backend> &)::$_0 &&>>(di_utils *result)
{
  uint64_t v1 = **(uint64_t ***)result;
  uint64_t v2 = *v1;
  if (*(_DWORD *)(*v1 + 44) != 1)
  {
    *(void *)(v2 + 64) = di_utils::random_uuid(result);
    *(void *)(v2 + 72) = v3;
    di_asif::header::write_header((di_asif::header *)(v2 + 32), *(Backend **)(v2 + 16));
  }
  return result;
}

uint64_t boost::uuids::string_generator::operator()<std::__wrap_iter<char const*>>(boost::uuids::string_generator *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  if (a2 == a3) {
    goto LABEL_32;
  }
  uint64_t v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    uint64_t v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  while (1)
  {
    do
    {
      if (v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v9 = 0;
      }
      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char value = boost::uuids::string_generator::get_value(this, v7);
      *((unsigned char *)v17 + v8) = value;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)v17 + v8++) = boost::uuids::string_generator::get_value(this, v14) | (16 * value);
    }
    while (!v8);
    if (v8 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    boost::uuids::string_generator::throw_invalid(this);
  }
  return v17[0];
}

void boost::uuids::string_generator::throw_invalid(boost::uuids::string_generator *this)
{
  MEMORY[0x223C244F0](v1, "invalid uuid string");
  boost::throw_exception<std::runtime_error>((uint64_t)v1);
}

uint64_t boost::uuids::string_generator::get_value(boost::uuids::string_generator *this, int a2)
{
  unint64_t v3 = 0x267D2A000uLL;
  {
    int v10 = a2;
    unint64_t v3 = 0x267D2A000uLL;
    a2 = v10;
    if (v9)
    {
      boost::uuids::string_generator::get_value(char)const::digits_end = (uint64_t)&boost::uuids::string_generator::get_value(char)const::digits_begin[(void)boost::uuids::string_generator::get_value(char)const::digits_len];
      unint64_t v3 = 0x267D2A000;
      a2 = v10;
    }
  }
  uint64_t v4 = *(unsigned char **)(v3 + 2152);
  uint64_t v5 = memchr("0123456789abcdefABCDEF", a2, v4 - "0123456789abcdefABCDEF");
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  unint64_t v7 = v6 - "0123456789abcdefABCDEF";
  if (v7 >= (unint64_t)boost::uuids::string_generator::get_value(char)const::digits_len) {
    boost::uuids::string_generator::throw_invalid(this);
  }
  return boost::uuids::string_generator::get_value(char)const::values[v7];
}

void udsp_header::udsp_header(udsp_header *this, Backend *a2)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new[]();
}

void sub_21E31DD4C(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

_DWORD *udsp_header::init(udsp_header *this, const char *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v4, &v14, 1);
  *(_DWORD *)this = 1936879731;
  int v5 = bswap32(*((_DWORD *)a2 + 1));
  uint64_t v14 = 0x200000001;
  int v15 = 3;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v5, &v14, 3);
  *((_DWORD *)this + 1) = v5;
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  uint64_t result = udsp_header::flags_t::flags_t(&v14, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v14;
  *((_DWORD *)this + 4) = bswap32(*((_DWORD *)a2 + 4));
  *(void *)((char *)this + 20) = bswap64(*(void *)(a2 + 20));
  *(void *)((char *)this + 28) = bswap64(*(void *)(a2 + 28));
  long long v7 = *(_OWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 52);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *(void *)((char *)this + 52) = v8;
  *(_OWORD *)((char *)this + 36) = v7;
  if (!*((_DWORD *)this + 2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Band size in sparse is zero", 0x16u);
  }
  for (uint64_t i = 0; i != 28; ++i)
  {
    if (*((unsigned char *)this + i + 36))
    {
      int v10 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(v10, "Reserved part isn't zeroed", 0x16u);
    }
  }
  return result;
}

_DWORD *udsp_header::flags_t::flags_t(_DWORD *this, int a2)
{
  *this = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "flags_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

void DiskImage::get_user_data(DiskImage *this)
{
  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "User data is not supported in this image format", 0x2Du);
}

void DiskImage::write_user_data(DiskImage *this, const __CFDictionary *a2)
{
  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "User data is not supported in this image format", 0x2Du);
}

void *operator<<(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      unint64_t v3 = "uninit";
      goto LABEL_4;
    case 1:
      unint64_t v3 = "mapped";
LABEL_4:
      uint64_t v4 = 6;
      goto LABEL_7;
    case 2:
      unint64_t v3 = "unmapped";
      uint64_t v4 = 8;
      goto LABEL_7;
    case 3:
      unint64_t v3 = "error";
      uint64_t v4 = 5;
LABEL_7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;

  unsigned int v2 = 0;
  while (CompressedBackend::algo_t::strings[v2] != *a2)
  {
    v2 += 6;
    if (v2 == 30)
    {
      unint64_t v3 = "no_match";
      uint64_t v4 = 8;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }
  int v5 = &CompressedBackend::algo_t::strings[v2];
  unint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

void *boost::icl::operator<<<char,std::char_traits<char>,boost::icl::discrete_interval<unsigned long long,std::less>>(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(void *)(a2 + 8) >= *(void *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0) {
          int v5 = "[";
        }
        else {
          int v5 = "(";
        }
        std::string::basic_string[abi:ne180100]<0>(&v24, v5);
        if ((v26 & 0x80u) == 0) {
          int v6 = &v24;
        }
        else {
          int v6 = v24;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v7 = v26;
        }
        else {
          uint64_t v7 = v25;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v7);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
        int v9 = (void *)std::ostream::operator<<();
        if (*(unsigned char *)(a2 + 16)) {
          int v10 = "]";
        }
        else {
          int v10 = ")";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v10);
        if ((v23 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v23 & 0x80u) == 0) {
          uint64_t v12 = v23;
        }
        else {
          uint64_t v12 = v22;
        }
        goto LABEL_45;
      }
    }
    else if (*(void *)a2 < *(void *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a2 + 8);
    if (*(void *)a2 < v13 && *(void *)a2 + 1 < v13) {
      goto LABEL_4;
    }
  }
  if ((v4 & 2) != 0) {
    int v15 = "[";
  }
  else {
    int v15 = "(";
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, v15);
  if ((v26 & 0x80u) == 0) {
    uint64_t v16 = &v24;
  }
  else {
    uint64_t v16 = v24;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v17 = v26;
  }
  else {
    uint64_t v17 = v25;
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v16, v17);
  if (*(unsigned char *)(a2 + 16)) {
    long long v18 = "]";
  }
  else {
    long long v18 = ")";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((v23 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v12 = v23;
  }
  else {
    uint64_t v12 = v22;
  }
LABEL_45:
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v12);
  if ((char)v23 < 0) {
    operator delete(__p);
  }
  if ((char)v26 < 0) {
    operator delete(v24);
  }
  return v19;
}

void sub_21E31E2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::const_extents_iterator_t::const_extents_iterator_t(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)a2 + 8))();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

BOOL DiskImage::const_extents_iterator_t::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = DiskImage::base_extents_iterator_interface::operator==(*(void *)a1, *(void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

BOOL DiskImage::base_extents_iterator_interface::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)v2 != *(void *)v3) {
    return 0;
  }
  BOOL result = boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48)) {
      return *(void *)(a1 + 40) == *(void *)(a2 + 40);
    }
    return 0;
  }
  return result;
}

BOOL DiskImage::const_extents_iterator_t::operator!=(uint64_t a1, uint64_t a2)
{
  return !DiskImage::base_extents_iterator_interface::operator==(*(void *)a1, *(void *)a2)
      || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

void *DiskImage::const_extents_iterator_t::make_val@<X0>(DiskImage::const_extents_iterator_t *this@<X0>, uint64_t a2@<X8>)
{
  BOOL result = *(void **)this;
  unint64_t v5 = result[5];
  unint64_t v6 = result[3];
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if (*(unsigned char *)(*(void *)result[1] + 8))
  {
    BOOL result = (void *)DIDebugLogsEnabled();
    if (result)
    {
      *(void *)uint64_t v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(void *)&v7[8] = 45;
      *(_DWORD *)&v7[16] = 2;
      di_log::logger<di_log::log_printer<117ul>>::logger(v8, (long long *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Disk image is terminated, skipping ...", 38);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf((uint64_t)v8);
      return (void *)MEMORY[0x223C24910](&v10);
    }
  }
  else if (v5 < v6 && *((_DWORD *)this + 8) != 3)
  {
    BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (*((_DWORD *)this + 10) & (1 << v8[24])) == 0)
    {
      do
      {
        BOOL result = *(void **)this;
        if (*(void *)(*(void *)this + 40) >= (unint64_t)(*(unsigned char *)(*(void *)this + 32) & 1)
                                                  + *(void *)(*(void *)this + 24))
          break;
        result[5] = (v8[16] & 1) + *(void *)&v8[8];
        BOOL result = (*(void *(**)(unsigned char *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3) {
          break;
        }
      }
      while ((*((_DWORD *)this + 10) & (1 << v7[24])) == 0);
    }
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }
  return result;
}

void sub_21E31E654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = *(void *)(*(void *)v14 + 24);
    *(void *)uint64_t v13 = *(void *)(*(void *)v14 + 40);
    *(void *)(v13 + 8) = v15;
    *(unsigned char *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x21E31E640);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<117ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<117ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF38E38;
  a1[45] = &unk_26CF38F38;
  a1[46] = &unk_26CF38F60;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF38E38;
  a1[45] = &unk_26CF38EC0;
  a1[46] = &unk_26CF38EE8;
  return a1;
}

void sub_21E31E7A8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  return a1;
}

DiskImage::const_extents_iterator_t *DiskImage::const_extents_iterator_t::operator++(DiskImage::const_extents_iterator_t *this)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (*((unsigned char *)this + 24) & 1) + *((void *)this + 2);
  *(void *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(unsigned char *)(v2 + 32) & 1) + *(void *)(v2 + 24))
  {
    DiskImage::const_extents_iterator_t::make_val(this, (uint64_t)v5);
    *(_OWORD *)((char *)this + 8) = v5[0];
    *(_OWORD *)((char *)this + 20) = *(_OWORD *)((char *)v5 + 12);
  }
  return this;
}

DiskImage::const_extents_iterator_t *DiskImage::const_extents_iterator_t::operator++@<X0>(DiskImage::const_extents_iterator_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)a1 + 24);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return DiskImage::const_extents_iterator_t::operator++(a1);
}

void sub_21E31E8F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    DiskImage::const_extents_iterator_t::operator++(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t DiskImage::extents_t::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 40) = v5;
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=[abi:ne180100]((void *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t DiskImage::extents_t::back@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(void *)a2 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  DiskImage::extents_t::begin(this, (uint64_t)v12);
  DiskImage::extents_t::end(this, (uint64_t)v10);
  while (!DiskImage::base_extents_iterator_interface::operator==(v12[0], v10[0]) || v13 != v11)
  {
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
  }
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t result = v12[0];
  v12[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_21E31EB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void *)(v15 - 64);
  *(void *)(v15 - 64) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_21;
    }
  }
  if (!*((unsigned char *)a2 + 16))
  {
    unint64_t v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7) {
      goto LABEL_21;
    }
    return 1;
  }
  if (*((unsigned char *)a2 + 16) == 3)
  {
    if (a2[1] < *a2) {
      return 1;
    }
  }
  else if (*a2 >= a2[1])
  {
    return 1;
  }
LABEL_21:
  if ((v2 & 2) != 0) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v4 + 1;
  }
  unint64_t v10 = *a2;
  if ((a2[2] & 2) == 0) {
    ++v10;
  }
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  int v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<117ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<117ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF38FD0;
  di_log::logger_buf<di_log::log_printer<117ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<117ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E31F1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<117ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 117;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 117;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  int v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21E31F700(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<117ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF38FD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E31F788(_Unwind_Exception *a1)
{
}

void *std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *di_log::logger<di_log::log_printer<114ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<114ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF39058;
  a1[45] = &unk_26CF39158;
  a1[46] = &unk_26CF39180;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF39058;
  a1[45] = &unk_26CF390E0;
  a1[46] = &unk_26CF39108;
  return a1;
}

void sub_21E320B88(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<136ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<136ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF39278;
  a1[45] = &unk_26CF39378;
  a1[46] = &unk_26CF393A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF39278;
  a1[45] = &unk_26CF39300;
  a1[46] = &unk_26CF39328;
  return a1;
}

void sub_21E320CF0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<114ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<114ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF391F0;
  di_log::logger_buf<di_log::log_printer<114ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<114ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E321280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<114ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 114;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 114;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<136ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<136ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF39410;
  di_log::logger_buf<di_log::log_printer<136ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<136ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3219F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<136ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 136;
    __int16 v22 = 2082;
    unsigned __int8 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 136;
      __int16 v22 = 2082;
      unsigned __int8 v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<114ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF391F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E321CBC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<136ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF39410;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E321D4C(_Unwind_Exception *a1)
{
}

unint64_t DiskImageIOBreaker::move_data_to_buffer(DiskImage::Context **this, DiskImageIOBreaker::ContextIOBreaker *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t result = DiskImage::Context::read(this[2], a2, a3);
  v12[0] = result;
  v12[1] = v7;
  if ((uint64_t)result <= 0)
  {
    if ((result & 0x80000000) == 0) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = -(int)result;
    }
    return -v11;
  }
  else
  {
    unint64_t v8 = *((void *)a2 + 18);
    unint64_t v9 = (*((void *)a3 + 18) - v8) & ~((uint64_t)(*((void *)a3 + 18) - v8) >> 63);
    if (v8 > v7 || v9 < result) {
      return trim_data((uint64_t)a2, (uint64_t)a3, v9, v12);
    }
  }
  return result;
}

unint64_t DiskImageIOBreaker::read(DiskImageIOBreaker *this, DiskImage::Context **a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  char v4 = a4;
  char v6 = a2;
  v111[66] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 56))
  {
    if (!a2[6]
      || (uint64_t v7 = *((void *)a4 + 18) - *((void *)a3 + 18),
          *((void *)a4 + 9) - *((void *)a3 + 9) >= (unint64_t)a2[8] + (v7 & ~(v7 >> 63))))
    {
      DiskImage::Context::read(a2[2], a3, a4);
    }
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 1);
  uint64_t v72 = *(void **)a3;
  uint64_t v73 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v74 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v74[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v75 = *((void *)a3 + 6);
  long long v76 = *(_OWORD *)((char *)a3 + 56);
  long long v77 = *(_OWORD *)((char *)a3 + 72);
  long long v78 = *(_OWORD *)((char *)a3 + 88);
  char v79 = *((unsigned char *)a3 + 104);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v80 = *((void *)a3 + 14);
  uint64_t v81 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((void *)a3 + 18);
  unint64_t v10 = (char *)a3 + 144;
  long long v82 = *((_OWORD *)v10 - 1);
  uint64_t v83 = v11;
  char v84 = v10[8];
  if ((unint64_t)v6[8] + ((*((void *)v4 + 18) - v11) & ~((*((void *)v4 + 18) - v11) >> 63)) <= *(void *)&v74[16])
  {
    unint64_t v12 = DiskImageIOBreaker::move_data_to_buffer(v6, (DiskImageIOBreaker::ContextIOBreaker *)&v72, v4, a4);
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v72, v12);
    uint64_t v13 = v12;
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v14 = *((void *)v4 + 18);
  if (v12 == ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)))
  {
    uint64_t v13 = v12;
    goto LABEL_107;
  }
  uint64_t v47 = v6;
  uint64_t v44 = v10;
  do
  {
    unint64_t v49 = v12;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *((void *)v4 + 18);
    }
    int v17 = v6[3];
    uint64_t v16 = v6[4];
    uint64_t v18 = v83;
    unint64_t v19 = (unint64_t)(v16 - v17 - 8) >> 3;
    if (v16 == v17) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = v19 + 1;
    }
    unint64_t v21 = (v14 - v83) & ~((v14 - v83) >> 63);
    __int16 v22 = v6[6];
    if ((void)v6[7] * (void)v22 >= v21) {
      unint64_t v23 = v21;
    }
    else {
      unint64_t v23 = (void)v6[7] * (void)v22;
    }
    __p = v107;
    long long v106 = xmmword_21E39B4F0;
    uint64_t v48 = v23;
    if (v20 < 6)
    {
      if (v17 != v16)
      {
        unint64_t v32 = v19 + 1;
        unint64_t v33 = v107;
        do
        {
          uint64_t v34 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *unint64_t v33 = v34;
          v33[1] = v15;
          int v17 = (DiskImage::Context *)((char *)v17 + 8);
          v33[2] = v22;
          v33 += 3;
          --v32;
        }
        while (v32);
        unint64_t v12 = v49;
        goto LABEL_49;
      }
      unint64_t v20 = 0;
    }
    else
    {
      uint64_t v45 = v83;
      if (v20 >= 0x555555555555556) {
        boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
      }
      uint64_t v24 = v4;
      uint64_t v25 = operator new(24 * v20);
      unsigned __int8 v26 = __p;
      if (__p)
      {
        uint64_t v27 = v106;
        if ((void)v106)
        {
          uint64_t v28 = (std::__shared_weak_count **)((char *)__p + 8);
          do
          {
            if (*v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*v28);
            }
            v28 += 3;
            --v27;
          }
          while (v27);
        }
        *(void *)&long long v106 = 0;
        unint64_t v10 = v44;
        if (v107 != v26) {
          operator delete(v26);
        }
      }
      *((void *)&v106 + 1) = v20;
      __p = v25;
      *(void *)&long long v106 = 0;
      if (v17 == v16)
      {
        uint64_t v31 = 0;
        BOOL v29 = (char *)v25;
        char v4 = v24;
        char v6 = v47;
        uint64_t v18 = v45;
      }
      else
      {
        BOOL v29 = (char *)v25;
        char v4 = v24;
        char v6 = v47;
        uint64_t v18 = v45;
        do
        {
          uint64_t v30 = *(void *)v17;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)BOOL v29 = v30;
          *((void *)v29 + 1) = v15;
          *((void *)v29 + 2) = v22;
          int v17 = (DiskImage::Context *)((char *)v17 + 8);
          v29 += 24;
        }
        while (v17 != v16);
        uint64_t v31 = v106;
      }
      unint64_t v20 = v31 - 0x5555555555555555 * ((v29 - (unsigned char *)v25) >> 3);
    }
    unint64_t v12 = v49;
LABEL_49:
    *(void *)&long long v106 = v20;
    unint64_t v108 = (unint64_t *)&v110;
    long long v109 = xmmword_21E39B4F0;
    boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)&v108, v20);
    long long v87 = __p;
    __dst = (char *)__p + 24 * v106;
    unint64_t v63 = v108;
    *(void *)&long long v85 = &v108[v109];
    sg_vec_ref::sg_vec_ref((uint64_t)v111, (uint64_t *)&v87, (uint64_t *)&__dst, &v63, (unint64_t **)&v85, v18, v48);
    sg_vec_ref::begin((sg_vec_ref *)v111, (uint64_t)&v87);
    sg_vec_ref::end((sg_vec_ref *)v111, (uint64_t)&__dst);
    uint64_t v13 = DiskImageIOBreaker::move_data_to_buffer(v6, (DiskImageIOBreaker::ContextIOBreaker *)&v87, (const sg_vec_ns::details::sg_vec_iterator *)&__dst, v35);
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
    }
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    if (v89) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
    }
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      goto LABEL_103;
    }
    sg_vec_ref::begin((sg_vec_ref *)v111, (uint64_t)&__src);
    sg_vec_ref::end((sg_vec_ref *)v111, (uint64_t)&v63);
    uint64_t v36 = v72;
    uint64_t v50 = v72;
    long long v51 = v73;
    if (v73) {
      atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v52[0] = *(_OWORD *)v74;
    *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)&v74[9];
    uint64_t v53 = v75;
    long long v54 = v76;
    long long v55 = v77;
    long long v56 = v78;
    char v57 = v79;
    uint64_t v58 = v80;
    uint64_t v59 = v81;
    if (v81) {
      atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v60 = v82;
    uint64_t v61 = v83;
    char v62 = v84;
    __dst = v36;
    char v93 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v99 = v57;
    uint64_t v95 = v53;
    uint64_t v100 = v58;
    *(_OWORD *)uint64_t v94 = v52[0];
    *(_OWORD *)&v94[9] = *(_OWORD *)((char *)v52 + 9);
    long long v96 = v54;
    long long v97 = v55;
    long long v98 = v56;
    long long v101 = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v37 = 0;
    long long v102 = v60;
    uint64_t v103 = v61;
    char v104 = 0;
    while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&__src, (uint64_t)&v63))
    {
      sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)&v69);
      std::unique_lock<std::mutex> v38 = v70;
      if (v70) {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v71)
      {
        sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&__src);
        int v41 = 2;
        if (!v38) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      unint64_t v39 = *(void *)&v94[16];
      if (v68 < *(void *)&v94[16]) {
        unint64_t v39 = v68;
      }
      if (v39 >= v71) {
        int64_t v40 = v71;
      }
      else {
        int64_t v40 = v39;
      }
      memmove(__dst, __src, v40);
      if (v40 <= 0)
      {
        *(void *)&long long v85 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
        *((void *)&v85 + 1) = 97;
        int v86 = 16;
        di_log::logger<di_log::log_printer<615ul>>::logger(&v87, &v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"IO error with sg: ", 18);
        operator<<(&v90);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)" dest ", 6);
        operator<<(&v90);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)" returned status ", 17);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf((uint64_t)&v87);
        MEMORY[0x223C24910](&v91);
        int v41 = 1;
        if (!v38) {
          goto LABEL_79;
        }
LABEL_78:
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        goto LABEL_79;
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__src, v40);
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__dst, v40);
      int v41 = 0;
      v37 += v40;
      if (v38) {
        goto LABEL_78;
      }
LABEL_79:
      if ((v41 | 2) != 2) {
        goto LABEL_86;
      }
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v50, v37);
LABEL_86:
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
    }
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v72, v13);
    sg_vec_ns::details::buffer_iterator::rtrim_written(&v76);
    v12 += v13;
LABEL_103:
    sg_vec::~sg_vec((sg_vec *)&__p);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if ((v13 & 0x8000000080000000) == 0x8000000080000000) {
      break;
    }
    uint64_t v14 = *((void *)v4 + 18);
    char v6 = v47;
  }
  while (v12 != ((v14 - *(void *)v10) & ~((v14 - *(void *)v10) >> 63)));
LABEL_107:
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (v13 < 0) {
    int v42 = v13;
  }
  else {
    int v42 = 0;
  }
  if (v42 >= 0) {
    return v12;
  }
  else {
    return v42;
  }
}

void sub_21E3226B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x580]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a37);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&a57);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x220]);
  sg_vec::~sg_vec((sg_vec *)&STACK[0x620]);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t DiskImageIOBreaker::verify_image(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

void DiskImageIOBreaker::~DiskImageIOBreaker(DiskImageIOBreaker *this)
{
  *(void *)this = &unk_26CF39490;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF39490;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t DiskImageIOBreaker::get_block_size(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 24))();
}

uint64_t DiskImageIOBreaker::get_num_blocks(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

uint64_t DiskImageIOBreaker::is_writable(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

uint64_t DiskImageIOBreaker::supports_unmap(DiskImageIOBreaker *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 80))();
}

uint64_t DiskImageIOBreaker::get_extents_iterator_interface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), a2, *(void *)(a3 + 16));
}

uint64_t DiskImageIOBreaker::_create_ctx(DiskImageIOBreaker *this)
{
  if ((*(uint64_t (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2))) {
    operator new();
  }
  return 0;
}

void sub_21E322A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x223C249A0](v10, 0x10A1C4073E172E3);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 40))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t DiskImageIOBreaker::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  return _Z8do_on_sgIZN18DiskImageIOBreaker5writeERN9DiskImage7ContextERK8sg_entryEUlRKT_RKT0_E_EDaOS7_S6_((uint64_t)&v4, a3);
}

uint64_t DiskImageIOBreaker::flush(uint64_t a1, uint64_t a2)
{
  return DiskImage::Context::flush(*(void **)(a2 + 16));
}

uint64_t DiskImageIOBreaker::unmap(uint64_t a1, uint64_t a2)
{
  return DiskImage::Context::unmap(*(void **)(a2 + 16));
}

void *DiskImageIOBreaker::ContextIOBreaker::ContextIOBreaker(void *result, uint64_t a2, uint64_t *a3)
{
  *unint64_t result = &unk_26CF39590;
  result[1] = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  result[3] = 0;
  result[2] = v3;
  result[4] = 0;
  result[5] = 0;
  unint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  result[7] = v4 + 1;
  result[8] = v5;
  unint64_t v6 = v5 + v4;
  result[6] = v6 / (v4 + 1);
  if (v4 < v6) {
    operator new[]();
  }
  return result;
}

void sub_21E322C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x223C24980](v7, 0x1000C8077774924);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v9 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
  _Unwind_Resume(a1);
}

void DiskImageIOBreaker::ContextIOBreaker::~ContextIOBreaker(DiskImageIOBreaker::ContextIOBreaker *this)
{
  *(void *)this = &unk_26CF39590;
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
}

{
  uint64_t v2;
  void **v3;

  *(void *)this = &unk_26CF39590;
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  MEMORY[0x223C249A0](this, 0x10A1C4073E172E3);
}

uint64_t std::vector<std::unique_ptr<char []>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>,std::reverse_iterator<std::unique_ptr<char []>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<char []>>,std::reverse_iterator<std::unique_ptr<char []>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = MEMORY[0x223C24980](result, 0x1000C8077774924);
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x223C24980](result, 0x1000C8077774924);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<char []>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<char []>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    uint64_t result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      uint64_t result = MEMORY[0x223C24980](result, 0x1000C8077774924);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t _Z8do_on_sgIZN18DiskImageIOBreaker5writeERN9DiskImage7ContextERK8sg_entryEUlRKT_RKT0_E_EDaOS7_S6_(uint64_t a1, uint64_t *a2)
{
  v12[66] = *MEMORY[0x263EF8340];
  sg_vec_ns::make(a2, v11);
  sg_vec_ref::begin((sg_vec_ref *)v12, (uint64_t)v8);
  sg_vec_ref::end((sg_vec_ref *)v12, (uint64_t)v5);
  uint64_t v3 = DiskImage::Context::write(*(DiskImage::Context **)(*(void *)a1 + 16), (const sg_vec_ns::details::sg_vec_iterator *)v8, (const sg_vec_ns::details::sg_vec_iterator *)v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  sg_vec::~sg_vec((sg_vec *)v11);
  return v3;
}

void sub_21E3231CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void *di_log::logger<di_log::log_printer<615ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<615ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF395F0;
  a1[45] = &unk_26CF396F0;
  a1[46] = &unk_26CF39718;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF395F0;
  a1[45] = &unk_26CF39678;
  a1[46] = &unk_26CF396A0;
  return a1;
}

void sub_21E323308(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF39788;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3233EC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF39788;
  di_log::logger_buf<di_log::log_printer<615ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<615ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<615ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<615ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<615ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E323964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<615ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 615;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 615;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_stackable::get_identifier(di_stackable *this, DiskImage *a2)
{
  v4[0] = (**(uint64_t (***)(di_stackable *, DiskImage *))this)(this, a2);
  v4[1] = v2;
  if (v2 == 0xFFFFFFFFLL) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v6 = &v5;
  return ((uint64_t (*)(char **, void *))off_26CF39940[v2])(&v6, v4);
}

uint64_t di_stackable::get_stackable_source_identifier(di_stackable *this, DiskImage *a2)
{
  v4[0] = (**(uint64_t (***)(di_stackable *, DiskImage *))this)(this, a2);
  v4[1] = v2;
  if (v2 == 0xFFFFFFFFLL) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v6 = &v5;
  return ((uint64_t (*)(char **, void *))off_26CF39980[v2])(&v6, v4);
}

uint64_t DiskImageStackable::ContextStackable::get_bottom_async_cache(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24) - v2;
  uint64_t v4 = v3 / 48;
  if (v3 < 49)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      int v8 = *v7;
      v7 -= 12;
      if (v8 != 2) {
        break;
      }
      ++v5;
    }
    while (v6-- > 1);
  }
  uint64_t v10 = v4 + ~v5;
  if (v5) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t DiskImageStackable::write(DiskImageStackable *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8 = *((void *)a4 + 18);
  uint64_t v9 = (*(uint64_t (**)(DiskImageStackable *))(*(void *)this + 32))(this);
  if (v8 > (*(uint64_t (**)(DiskImageStackable *))(*(void *)this + 24))(this) * v9) {
    return -5;
  }
  if (**((_DWORD **)this + 2)) {
    return -78;
  }
  uint64_t v11 = (DiskImage::Context **)*((void *)a2 + 2);
  if (!(*(unsigned int (**)(void))(**((void **)*v11 + 1) + 40))(*((void *)*v11 + 1))
    || **((_DWORD **)this + 2))
  {
    return -78;
  }
  return DiskImage::Context::write(*v11, a3, a4);
}

uint64_t DiskImageStackable::flush(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  uint64_t v3 = *(void ***)(a2 + 24);
  if (v2 == v3) {
    return 4294967218;
  }
  uint64_t v4 = 4294967218;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)(*v2)[1] + 40))((*v2)[1]))
    {
      uint64_t v4 = DiskImage::Context::flush(*v2);
      if (v4) {
        break;
      }
    }
    v2 += 2;
  }
  while (v2 != v3);
  return v4;
}

uint64_t DiskImageStackable::DiskImageStackable(uint64_t a1, void **a2, unsigned char *a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF39808;
  *(void *)(a1 + 16) = 0;
  uint64_t v43 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  int v42 = (void *)(a1 + 56);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void))(*(void *)**a2 + 24))(**a2);
  *(unsigned char *)(a1 + 48) = 0;
  if ((*a3 & 2) != 0)
  {
    uint64_t v7 = a2[1];
    unint64_t v8 = (di_stackable *)*(v7 - 3);
    uint64_t v9 = (std::__shared_weak_count *)*(v7 - 2);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = a2[1];
    }
    uint64_t v10 = v7 - 3;
    if (v7 - 3 == *a2)
    {
      uint64_t v11 = v9;
    }
    else
    {
      do
      {
        os_log_type_t v12 = (di_stackable *)*(v10 - 3);
        uint64_t v11 = (std::__shared_weak_count *)*(v10 - 2);
        v10 -= 3;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t identifier = di_stackable::get_identifier(v8, v6);
        char v14 = identifier;
        unint64_t v8 = v12;
        uint64_t v46 = identifier;
        uint64_t v47 = v15;
        stackable_source_uint64_t identifier = di_stackable::get_stackable_source_identifier(v12, v15);
        uint64_t v52 = stackable_source_identifier;
        uint64_t v53 = v6;
        if (v14)
        {
LABEL_8:
          if ((_BYTE)stackable_source_identifier)
          {
LABEL_9:
            if (v46 != v52 || v47 != v53)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              void *exception = &unk_26CF39EE0;
              std::unique_lock<std::mutex> v38 = std::generic_category();
              exception[1] = 166;
              exception[2] = v38;
              *((unsigned char *)exception + 24) = 0;
              *((unsigned char *)exception + 48) = 0;
              exception[7] = "Corrupted shadow file(s) chain";
            }
          }
          else
          {
            uint64_t v20 = 1;
            while (v20 != 16)
            {
              if (*((unsigned __int8 *)&v52 + v20++))
              {
                if ((unint64_t)(v20 - 2) <= 0xE) {
                  goto LABEL_9;
                }
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
          while (v18 != 16)
          {
            if (*((unsigned __int8 *)&v46 + v18++))
            {
              if ((unint64_t)(v18 - 2) <= 0xE) {
                goto LABEL_8;
              }
              break;
            }
          }
        }
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        uint64_t v9 = v11;
      }
      while (v10 != *a2);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v22 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    unint64_t v25 = 0;
    int v41 = "Block size mismatch in DiskImageStackable";
    do
    {
      unsigned __int8 v26 = (_DWORD *)(v22 + v23);
      uint64_t v27 = *(void *)(a1 + 40);
      if (v27 != (*(uint64_t (**)(void))(**(void **)(v22 + v23) + 24))(*(void *)(v22 + v23))) {
        goto LABEL_66;
      }
      if (v26[4] == 2)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v28 >= 2 && v25 != v28 - 2)
        {
          uint64_t v30 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v30)
          {
            {
              int v41 = "Currently, cache can only be added directly above plugin";
LABEL_66:
              unint64_t v39 = __cxa_allocate_exception(0x40uLL);
              void *v39 = &unk_26CF39EE0;
              int64_t v40 = std::generic_category();
              v39[1] = 4294967274;
              v39[2] = v40;
              *((unsigned char *)v39 + 24) = 0;
              *((unsigned char *)v39 + 48) = 0;
              v39[7] = v41;
            }
          }
        }
      }
      uint64_t v31 = v22 + v23;
      uint64_t v33 = *(void *)(v22 + v23);
      unint64_t v32 = *(std::__shared_weak_count **)(v22 + v23 + 8);
      uint64_t v34 = v33;
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v34 = *(void *)v26;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 96))(v34))
      {
        char v45 = 1;
        std::allocate_shared[abi:ne180100]<DiskImageIOBreaker,std::allocator<DiskImageIOBreaker>,DiskImage &,BOOL,void>((uint64_t)&v52, v33, &v45);
      }
      LODWORD(v46) = v26[4];
      uint64_t v47 = *(DiskImage **)v26;
      unint64_t v35 = *(std::__shared_weak_count **)(v31 + 8);
      uint64_t v48 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = v33;
      uint64_t v50 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v51 = (*(uint64_t (**)(void))(**(void **)v26 + 32))();
      std::vector<DiskImageStackable::stackable_layer>::emplace_back<DiskImageStackable::stackable_layer&>(v43, (uint64_t)&v46);
      if (v26[4] == 2) {
        v24 |= (*(uint64_t (**)(void))(**(void **)v26 + 40))();
      }
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      ++v25;
      uint64_t v22 = (uint64_t)*a2;
      v23 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if (v24)
    {
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 0x40000000;
      v44[2] = ___ZN18DiskImageStackableC2EONSt3__16vectorINS0_5tupleIJNS0_10shared_ptrI9DiskImageEENS_4roleEEEENS0_9allocatorIS7_EEEEN12di_stackable8config_tE_block_invoke;
      v44[3] = &__block_descriptor_tmp_4;
      v44[4] = a1;
      std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::reset[abi:ne180100]((uint64_t)v42);
      DiskImageStackable::cacheFlusher_t::cacheFlusher_t(v42, (uint64_t)v44, 600000000);
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  return a1;
}

void sub_21E324444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100](v19);
  a19 = a12;
  std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DiskImageStackable::stackable_layer>::emplace_back<DiskImageStackable::stackable_layer&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::allocator<sg_entry>::allocate_at_least[abi:ne180100](v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v15 = v13;
    long long v16 = &v13[48 * v9];
    uint64_t v18 = &v13[48 * v12];
    std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>((uint64_t)v16, a2);
    int v17 = v16 + 48;
    std::vector<DiskImageStackable::stackable_layer>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_21E3245FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DiskImageStackable::stackable_layer::~stackable_layer(DiskImageStackable::stackable_layer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t ___ZN18DiskImageStackableC2EONSt3__16vectorINS0_5tupleIJNS0_10shared_ptrI9DiskImageEENS_4roleEEEENS0_9allocatorIS7_EEEEN12di_stackable8config_tE_block_invoke(uint64_t a1)
{
  return DiskImageStackable::flush_caches(*(void *)(a1 + 32));
}

uint64_t DiskImageStackable::flush_caches(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  uint64_t v2 = *(void *)(this + 24);
  while (v1 != v2)
  {
    this = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8));
    if (this) {
      BOOL v3 = *(_DWORD *)v1 == 2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 136))(*(void *)(v1 + 8));
      this = DiskImage::Context::flush(v4);
      if (v4) {
        this = (*(uint64_t (**)(void *))(*v4 + 40))(v4);
      }
    }
    v1 += 48;
  }
  return this;
}

void sub_21E324724(_Unwind_Exception *exception_object)
{
  if (v1) {
    DiskImageStackable::flush_caches();
  }
  _Unwind_Resume(exception_object);
}

void DiskImageStackable::~DiskImageStackable(DiskImageStackable *this)
{
  *(void *)this = &unk_26CF39808;
  DiskImageStackable::flush_caches((uint64_t)this);
  std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  DiskImageStackable::~DiskImageStackable(this);
  JUMPOUT(0x223C249A0);
}

unint64_t DiskImageStackable::read_from_next(uint64_t a1, DiskImageStackable::ContextStackable *a2, sg_vec_ns::details::sg_vec_iterator *a3, uint64_t a4, unint64_t a5, uint64_t *a6, int a7, int a8, uint64_t a9, DiskImage::extents_t *a10)
{
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *((unsigned __int8 *)a6 + 16);
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  if ((v16 & 2) != 0) {
    uint64_t v19 = *a6;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  v22[0] = v19 * v15;
  v22[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  char v23 = 2;
  sg_vec_ns::details::sg_vec_iterator::subvec(a3, (uint64_t)v22, a4, (uint64_t)v24);
  unint64_t sg_from_next = DiskImageStackable::read_sg_from_next(a1, a2, (uint64_t)v24, (uint64_t)&v27, a5, a7, a8, a9, a10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  return sg_from_next;
}

void sub_21E324904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t DiskImageStackable::read_sg_from_next(uint64_t a1, DiskImageStackable::ContextStackable *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, DiskImage::extents_t *a9)
{
  unint64_t v14 = DiskImageStackable::read_from_idx();
  uint64_t data_to_diskimgs = v14;
  unint64_t v17 = v15;
  v61[0] = v14;
  v61[1] = v15;
  if ((v14 & 0x8000000000000000) == 0 || !v14)
  {
    unint64_t v18 = *(void *)(a3 + 144);
    BOOL v19 = v15 < v18 || v14 > ((*(void *)(a4 + 144) - v18) & ~((uint64_t)(*(void *)(a4 + 144) - v18) >> 63));
    BOOL is_trim_required = 0;
    if (a5 && v19)
    {
      unint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a4 + 144) - v18;
      unint64_t v23 = v22 & ~(v22 >> 63);
      if (v23 <= v21) {
        unint64_t v23 = *(void *)(a1 + 40);
      }
      if (v22 <= 0) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = v23;
      }
      v59[0] = v18 / v21;
      v59[1] = (v18 + v21 + v24 - 1) / v21;
      char v60 = 2;
      BOOL is_trim_required = DiskImageStackable::is_trim_required(a1, (uint64_t)a2, v61, (uint64_t)v59, a5, a9);
    }
    unint64_t v25 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v46 = *(void *)a3;
    uint64_t v47 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v48[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)(a3 + 25);
    uint64_t v49 = *(void *)(a3 + 48);
    long long v50 = *(_OWORD *)(a3 + 56);
    long long v51 = *(_OWORD *)(a3 + 72);
    long long v52 = *(_OWORD *)(a3 + 88);
    char v53 = *(unsigned char *)(a3 + 104);
    unsigned __int8 v26 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v54 = *(void *)(a3 + 112);
    long long v55 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v56 = *(_OWORD *)(a3 + 128);
    uint64_t v57 = *(void *)(a3 + 144);
    char v58 = *(unsigned char *)(a3 + 152);
    uint64_t v27 = *(std::__shared_weak_count **)(a4 + 8);
    uint64_t v33 = *(void *)a4;
    uint64_t v34 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)unint64_t v35 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v35[9] = *(_OWORD *)(a4 + 25);
    uint64_t v36 = *(void *)(a4 + 48);
    long long v28 = *(_OWORD *)(a4 + 72);
    long long v37 = *(_OWORD *)(a4 + 56);
    long long v38 = v28;
    long long v39 = *(_OWORD *)(a4 + 88);
    char v40 = *(unsigned char *)(a4 + 104);
    BOOL v29 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v41 = *(void *)(a4 + 112);
    int v42 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(void *)(a4 + 144);
    long long v43 = *(_OWORD *)(a4 + 128);
    uint64_t v44 = v30;
    char v45 = *(unsigned char *)(a4 + 152);
    uint64_t data_to_diskimgs = DiskImageStackable::sync_read_data_to_diskimgs(a1, a2, (uint64_t)&v46, (uint64_t)&v33, v61, a5);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if ((data_to_diskimgs & 0x8000000000000000) == 0 || !data_to_diskimgs)
    {
      uint64_t v31 = *(void *)(a4 + 144);
      if (is_trim_required) {
        return trim_data(a3, a4, (v31 - *(void *)(a3 + 144)) & ~((v31 - *(void *)(a3 + 144)) >> 63), v61);
      }
      else {
        return v31 - v17;
      }
    }
  }
  return data_to_diskimgs;
}

double DiskImageStackable::get_di_extents_for_io@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v38[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a4 + 16) & 2) != 0) {
    uint64_t v8 = *(void *)a4;
  }
  else {
    uint64_t v8 = *(void *)a4 + 1;
  }
  unint64_t v9 = (*(unsigned char *)(a4 + 16) & 1) + *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = *(void *)(v10 + 48 * a3 + 40);
  if (v12 < v9) {
    unint64_t v9 = *(void *)(v10 + 48 * a3 + 40);
  }
  *(void *)&long long v30 = v8;
  *((void *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(void *)(v10 + 48 * a3 + 88)) {
    goto LABEL_18;
  }
  *(void *)&long long v28 = *(void *)(v10 + 48 * a3 + 88);
  *((void *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  if (!boost::icl::intersects<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v28, (uint64_t)&v30))
  {
    uint64_t v10 = *(void *)(a1 + 16);
LABEL_18:
    uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
    *(void *)a5 = *(void *)(v10 + 48 * a3 + 8);
    double result = *(double *)&v30;
    *(_OWORD *)(a5 + 8) = v30;
    *(void *)(a5 + 24) = v31;
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 40) = v20;
    *(_DWORD *)(a5 + 48) = 6;
    *(void *)(a5 + 56) = &unk_26CF26308;
    *(void *)(a5 + 80) = a5 + 56;
    return result;
  }
  long long v24 = v28;
  uint64_t v25 = v29;
  boost::icl::operator&<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  uint64_t v14 = v30;
  if ((v31 & 2) == 0) {
    uint64_t v14 = v30 + 1;
  }
  uint64_t v15 = v26;
  if ((v27 & 2) == 0) {
    uint64_t v15 = v26 + 1;
  }
  *(void *)&long long v30 = v14;
  *((void *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
  uint64_t v32 = *(void *)(*(void *)(a1 + 16) + 48 * a3 + 8);
  long long v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = 0;
  uint64_t v36 = v16;
  int v37 = 6;
  v38[0] = &unk_26CF26308;
  v38[3] = v38;
  unint64_t v17 = operator new(0x20uLL);
  uint64_t v22 = v17 + 4;
  unint64_t v23 = (char *)(v17 + 4);
  *(_OWORD *)unint64_t v17 = v26;
  v17[2] = v27;
  *((_DWORD *)v17 + 6) = 1;
  __p = v17;
  DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v38);
  uint64_t v19 = v35;
  uint64_t v35 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
  }
  return result;
}

void sub_21E324EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)&a25);
  _Unwind_Resume(a1);
}

BOOL boost::icl::intersects<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4 < *(void *)a1) {
        return 0;
      }
    }
    else
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (*(void *)a1 >= v4) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 >= v4 || *(void *)a1 + 1 >= v4) {
      return 0;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    if (v6 == 3)
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (v7 < *(void *)a2) {
        return 0;
      }
    }
    else
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v7) {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v7 || *(void *)a2 + 1 >= v7) {
      return 0;
    }
  }
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 16) == 3)
    {
      if (v4 < v3) {
        return 0;
      }
    }
    else if (v3 >= v4)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if ((v6 & 2) != 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v8 + 1;
  }
  if ((v2 & 1) + v4 - 1 < v11) {
    return 0;
  }
  if ((_BYTE)v6)
  {
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0;
      }
    }
    else if (v8 >= v7)
    {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }
  if (!(_BYTE)v2)
  {
    BOOL result = 0;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
    goto LABEL_60;
  }
  if (v2 == 3)
  {
    if (v4 >= v3) {
      goto LABEL_60;
    }
    return 0;
  }
  if (v3 >= v4) {
    return 0;
  }
LABEL_60:
  if ((v2 & 2) == 0) {
    ++v3;
  }
  return (v6 & 1) + v7 - 1 >= v3;
}

BOOL DiskImageStackable::is_trim_required(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, DiskImage::extents_t *a6)
{
  v38[4] = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a3[1];
  if (*a3 <= v6) {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v8 = *a3;
  }
  if (*a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  v31[0] = v7 / v6;
  v31[1] = (v7 + v9) / v6;
  char v32 = 2;
  if (a5)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v26 = a5 - 1;
    BOOL v16 = 1;
    do
    {
      if (*(_DWORD *)(*(void *)(a1 + 16) + v14) != 2)
      {
        if (a6 && v26 == v15) {
          DiskImage::extents_t::extents_t((DiskImage::extents_t *)v36, a6);
        }
        else {
          DiskImageStackable::get_di_extents_for_io(a1, a2, v15, a4, (uint64_t)v36);
        }
        DiskImageStackable::get_di_extents_for_io(a1, a2, v15, (uint64_t)v31, (uint64_t)v33);
        DiskImage::extents_t::begin((DiskImage::extents_t *)v33, (uint64_t)v30);
        DiskImage::extents_t::end((DiskImage::extents_t *)v33, (uint64_t)v29);
        DiskImage::extents_t::begin((DiskImage::extents_t *)v36, (uint64_t)v28);
        DiskImage::extents_t::end((DiskImage::extents_t *)v36, (uint64_t)v27);
        BOOL v17 = std::equal[abi:ne180100]<DiskImage::const_extents_iterator_t,DiskImage::const_extents_iterator_t>((uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27);
        uint64_t v18 = v27[0];
        v27[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
        }
        uint64_t v19 = v28[0];
        v28[0] = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
        }
        uint64_t v20 = v29[0];
        v29[0] = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
        }
        uint64_t v21 = v30[0];
        v30[0] = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
        }
        std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v35);
        uint64_t v22 = v34;
        uint64_t v34 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
        }
        std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v38);
        uint64_t v23 = v37;
        uint64_t v37 = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
        }
        if (!v17) {
          break;
        }
      }
      BOOL v16 = ++v15 < a5;
      v14 += 48;
    }
    while (a5 != v15);
  }
  else
  {
    return 0;
  }
  return v16;
}

void sub_21E325390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a12) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24))(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 24))(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24))(a30);
  }
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)&a39);
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)(v39 - 184));
  _Unwind_Resume(a1);
}

void sub_21E32546C()
{
}

void sub_21E325474()
{
}

BOOL std::equal[abi:ne180100]<DiskImage::const_extents_iterator_t,DiskImage::const_extents_iterator_t>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v20, a1);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v19, a2);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v16, a3);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v15, a4);
  if (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v20, (uint64_t)v19))
  {
    while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v16, (uint64_t)v15))
    {
      BOOL v7 = boost::icl::operator==<boost::icl::discrete_interval<unsigned long long,std::less>>(v21, v17);
      if (v22 != v18 || !v7) {
        goto LABEL_10;
      }
      DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v20);
      DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v16);
      if (!DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v20, (uint64_t)v19)) {
        break;
      }
    }
  }
  if (DiskImage::const_extents_iterator_t::operator==((uint64_t)&v20, (uint64_t)v19)) {
    BOOL v9 = DiskImage::const_extents_iterator_t::operator==((uint64_t)&v16, (uint64_t)v15);
  }
  else {
LABEL_10:
  }
    BOOL v9 = 0;
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  return v9;
}

void sub_21E325644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24))(a21);
  }
  uint64_t v23 = *(void *)(v21 - 80);
  *(void *)(v21 - 80) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageStackable::sync_read_data_to_diskimgs(uint64_t a1, DiskImageStackable::ContextStackable *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  v77[15] = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1] % v6;
  BOOL v9 = v8 == 0;
  unint64_t v10 = v6 - v8;
  if (v9) {
    unint64_t v10 = 0;
  }
  if (v7 < v10) {
    return 0;
  }
  uint64_t v15 = a1;
  v63[0] = 0;
  char v64 = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v17 = (v7 - v10) / v6 * v6;
  unint64_t v50 = *(void *)a3;
  long long v51 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a3 + 56);
  v52[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v53 = *(void *)(a3 + 48);
  long long v54 = v18;
  long long v19 = *(_OWORD *)(a3 + 88);
  long long v55 = *(_OWORD *)(a3 + 72);
  long long v56 = v19;
  char v57 = *(unsigned char *)(a3 + 104);
  uint64_t v20 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v58 = *(void *)(a3 + 112);
  uint64_t v59 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(a3 + 144);
  long long v60 = *(_OWORD *)(a3 + 128);
  uint64_t v61 = v21;
  char v62 = *(unsigned char *)(a3 + 152);
  sg_vec_ns::generate_vec_ref((uint64_t)&v50, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v65);
  std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v63);
  sg_vec_ref::sg_vec_ref((sg_vec_ref *)v63, (uint64_t)&v65);
  char v64 = 1;
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=(a3, v17);
  sg_vec_ns::details::buffer_iterator::rtrim_written((void *)(a3 + 56));
  sg_vec_ref::begin((sg_vec_ref *)v63, (uint64_t)&v65);
  sg_vec_ns::details::sg_vec_iterator::operator=(a3, (long long *)&v65);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (v65.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  sg_vec_ref::end((sg_vec_ref *)v63, (uint64_t)&v65);
  sg_vec_ns::details::sg_vec_iterator::operator=(a4, (long long *)&v65);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (v65.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65.n128_u64[1]);
  }
  int64_t v22 = a6 - 1;
  if (v22 < 0)
  {
LABEL_81:
    uint64_t v11 = (*(void *)(a4 + 144) - *(void *)(a3 + 144)) & ~((uint64_t)(*(void *)(a4 + 144) - *(void *)(a3 + 144)) >> 63);
    goto LABEL_82;
  }
  uint64_t v39 = v15;
  while (1)
  {
    int v23 = *(_DWORD *)(*(void *)(v15 + 16) + 48 * v22);
    if (v23 != 1) {
      break;
    }
LABEL_79:
    if (v22-- <= 0) {
      goto LABEL_81;
    }
  }
  if (!v23) {
    goto LABEL_81;
  }
  uint64_t v24 = *(void *)(*(void *)(*((void *)a2 + 2) + 16 * v22) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24) & 1) == 0) {
    goto LABEL_81;
  }
  uint64_t v75 = v77;
  long long v76 = xmmword_21E39B4F0;
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  uint64_t v27 = v26 & ~(v26 >> 63);
  while (!sg_vec_ns::details::sg_vec_iterator::operator==(a3, a4))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)(a3 + 56));
    long long v28 = *(std::__shared_weak_count **)(a3 + 120);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *(void *)(a3 + 144);
    if (((*(void *)(a4 + 144) - v29) & (unint64_t)~((*(void *)(a4 + 144) - v29) >> 63)) >= *(void *)(a3 + 136)) {
      unint64_t v30 = *(void *)(a3 + 136);
    }
    else {
      unint64_t v30 = (*(void *)(a4 + 144) - v29) & ~((*(void *)(a4 + 144) - v29) >> 63);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v30)
    {
      unint64_t v31 = *(void *)a3;
      unint64_t v32 = *(void *)(a3 + 8);
      v65.n128_u64[0] = *(void *)a3;
      v65.n128_u64[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v66 = v30;
      uint64_t v34 = (uint64_t)v75;
      uint64_t v33 = v76;
      uint64_t v35 = (__n128 *)&v75[3 * v76];
      if ((void)v76 == *((void *)&v76 + 1))
      {
        boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>((uint64_t *)&v75, v35, (const char *)1, &v65, &v44);
        if (v65.n128_u64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65.n128_u64[1]);
        }
      }
      else
      {
        v35->n128_u64[0] = v31;
        v35->n128_u64[1] = v65.n128_u64[1];
        *(void *)(v34 + 24 * v33 + 16) = v30;
        *(void *)&long long v76 = v33 + 1;
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=(a3, v30);
    }
    else
    {
      sg_vec_ns::details::sg_vec_iterator::operator++(a3, (uint64_t)v47);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
    }
  }
  sg_vec::sg_vec((uint64_t *)&v65, &v75, v25, v27);
  sg_vec_ref::begin((sg_vec_ref *)&v70, (uint64_t)&v44);
  sg_vec_ref::end((sg_vec_ref *)&v70, (uint64_t)v41);
  BOOL v36 = sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v44, (uint64_t)v41);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v36) {
    goto LABEL_78;
  }
  sg_vec_ref::begin((sg_vec_ref *)&v70, (uint64_t)&v44);
  sg_vec_ref::end((sg_vec_ref *)&v70, (uint64_t)v41);
  uint64_t v11 = DiskImageStackable::ContextStackable::write_cache(a2, v22, (const sg_vec_ns::details::sg_vec_iterator *)&v44, (const sg_vec_ns::details::sg_vec_iterator *)v41);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if ((v11 & 0x8000000000000000) == 0 || !v11)
  {
LABEL_78:
    sg_vec::~sg_vec((sg_vec *)&v65);
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(&v75);
    uint64_t v15 = v39;
    goto LABEL_79;
  }
  sg_vec::~sg_vec((sg_vec *)&v65);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(&v75);
LABEL_82:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v63);
  return v11;
}

void sub_21E325C80(_Unwind_Exception *a1)
{
  if (STACK[0x4D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4D8]);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((void *)(v1 - 240));
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::ContextStackable::write_cache(DiskImageStackable::ContextStackable *this, unint64_t a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  if (*((unsigned char *)this + 48) && *((void *)this + 5) <= a2) {
    return 0;
  }
  else {
    return DiskImage::Context::write(*(DiskImage::Context **)(*((void *)this + 2) + 16 * a2), a3, a4);
  }
}

unint64_t DiskImageStackable::read_from_idx(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, sg_vec_ref *a8)
{
  uint64_t v11 = a2;
  v221[4] = *MEMORY[0x263EF8340];
  unint64_t v13 = *(void *)(a3 + 144);
  long long v96 = (unint64_t *)(a3 + 144);
  unint64_t v14 = a1[5];
  unint64_t v15 = v13 % v14;
  uint64_t v16 = v14 - v13 % v14;
  uint64_t v17 = *(void *)(a3 + 8);
  if (v15) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)&long long v178 = *(void *)a3;
  *((void *)&v178 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v179[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v179 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v180 = *(void *)(a3 + 48);
  long long v181 = *(_OWORD *)(a3 + 56);
  long long v182 = *(_OWORD *)(a3 + 72);
  long long v183 = *(_OWORD *)(a3 + 88);
  char v184 = *(unsigned char *)(a3 + 104);
  uint64_t v19 = *(void *)(a3 + 120);
  *(void *)&long long v185 = *(void *)(a3 + 112);
  *((void *)&v185 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v186 = *(_OWORD *)(a3 + 128);
  unint64_t v187 = *v96;
  char v188 = *(unsigned char *)(a3 + 152);
  uint64_t v20 = (std::__shared_weak_count *)a4[1];
  uint64_t v165 = *a4;
  char v166 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v167[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v168 = a4[6];
  long long v21 = *(_OWORD *)(a4 + 9);
  long long v169 = *(_OWORD *)(a4 + 7);
  long long v170 = v21;
  long long v171 = *(_OWORD *)(a4 + 11);
  char v172 = *((unsigned char *)a4 + 104);
  int64_t v22 = (std::__shared_weak_count *)a4[15];
  uint64_t v173 = a4[14];
  uint64_t v174 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = a4[18];
  int v23 = a4 + 18;
  long long v175 = *((_OWORD *)a4 + 8);
  uint64_t v176 = v24;
  char v177 = *((unsigned char *)a4 + 152);
  unint64_t v25 = a1[5];
  unint64_t v26 = *v96;
  uint64_t v27 = a4[18] - *v96;
  unint64_t v28 = v27 & ~(v27 >> 63);
  if (v28 <= v25) {
    unint64_t v28 = a1[5];
  }
  if (v27 <= 0) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v28;
  }
  *(void *)&long long v163 = v26 / v25;
  *((void *)&v163 + 1) = (v25 + v26 + v29 - 1) / v25;
  LOBYTE(v164) = 2;
  DiskImageStackable::get_di_extents_for_io((uint64_t)a1, a2, a5, (uint64_t)&v163, (uint64_t)v219);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - a1[2]) >> 4) - 1 == a5)
  {
    unint64_t v30 = operator new(0x20uLL);
    *(void *)&v118[0] = v30 + 4;
    *(_OWORD *)unint64_t v30 = v163;
    v30[2] = v164;
    *((_DWORD *)v30 + 6) = 1;
    *(void *)&long long __p = v30;
    *((void *)&__p + 1) = v30 + 4;
    DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)v219, (uint64_t)&__p, (uint64_t)&v203);
    DiskImage::extents_t::operator=((uint64_t)v219, (uint64_t)&v203);
    std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](&v206);
    uint64_t v31 = *(void *)&v204[16];
    *(void *)&v204[16] = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  DiskImage::extents_t::begin((DiskImage::extents_t *)v219, (uint64_t)&v159);
  uint64_t v98 = v13;
  uint64_t v94 = v23;
  long long v101 = a8;
  uint64_t v102 = (uint64_t)a1;
  DiskImage::extents_t::end((DiskImage::extents_t *)v219, (uint64_t)v158);
  unint64_t v32 = 0;
  unint64_t v95 = a5 + 1;
  uint64_t v99 = v11;
  unint64_t v97 = a5;
  while (1)
  {
    if (!DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v159, (uint64_t)v158))
    {
      int v65 = 2;
      goto LABEL_175;
    }
    unint64_t v33 = v32;
    unint64_t v34 = v160;
    uint64_t v35 = v161;
    unsigned int v36 = v162;
    unint64_t v37 = v187;
    unint64_t v38 = *(void *)(v102 + 40);
    unint64_t v39 = v187 / v38;
    if ((v162 & 2) != 0) {
      unint64_t v40 = v160;
    }
    else {
      unint64_t v40 = v160 + 1;
    }
    v156[0] = v187 / v38;
    v156[1] = v40;
    char v157 = 2;
    unint64_t v41 = v40 - v39;
    if (v40 <= v39) {
      uint64_t v42 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
    }
    else {
      uint64_t v42 = v40 - v39;
    }
    if (!v42)
    {
      unint64_t v32 = v33;
      goto LABEL_99;
    }
    unint64_t v43 = DiskImageStackable::read_from_next(v102, (DiskImageStackable::ContextStackable *)v11, (sg_vec_ns::details::sg_vec_iterator *)&v178, (uint64_t)&v165, v95, v156, a6 & 1, a7, (uint64_t)v101, (DiskImage::extents_t *)v219);
    unint64_t v189 = v43;
    uint64_t v190 = v44;
    if ((v43 & 0x8000000000000000) != 0 && v43)
    {
      int v65 = 1;
      unint64_t v32 = v33;
      goto LABEL_175;
    }
    uint64_t v45 = v98;
    if (v44 < v37) {
      uint64_t v45 = v44;
    }
    uint64_t v98 = v45;
    unint64_t v46 = v187;
    if (v44 >= v187)
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
      if (v43 <= ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63)))
      {
        a7 = 0;
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v47 = v44 + v43 > *(void *)(v102 + 40) * (v40 - 1);
    }
    long long v48 = v178;
    long long v145 = v178;
    if (*((void *)&v178 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v146[0] = v179[0];
    *(_OWORD *)((char *)v146 + 9) = *(_OWORD *)((char *)v179 + 9);
    uint64_t v49 = v180;
    uint64_t v50 = v181;
    uint64_t v147 = v180;
    long long v148 = v181;
    long long v149 = v182;
    long long v150 = v183;
    char v151 = v184;
    uint64_t v51 = *((void *)&v181 + 1);
    uint64_t v53 = (std::__shared_weak_count *)*((void *)&v185 + 1);
    uint64_t v52 = v185;
    long long v152 = v185;
    if (*((void *)&v185 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v185 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v153 = v186;
    unint64_t v154 = v187;
    char v155 = v188;
    uint64_t v54 = v190;
    long long __p = v48;
    if (*((void *)&v48 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v118[0] = v146[0];
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)((char *)v146 + 9);
    uint64_t v119 = v49;
    *(void *)&long long v120 = v50;
    long long v121 = v149;
    long long v122 = v150;
    char v123 = v151;
    *((void *)&v120 + 1) = v51;
    uint64_t v124 = v52;
    uint64_t v125 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v126 = v153;
    unint64_t v127 = v154;
    char v128 = v155;
    sg_vec_ns::generate_vec_ref((uint64_t)&__p, (uint64_t)&v165, v54, v43, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v203);
    if (v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
    }
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
    std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v101);
    sg_vec_ref::sg_vec_ref(v101, (uint64_t)&v203);
    *((unsigned char *)v101 + 528) = 1;
    if (v218) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v218);
    }
    if (v217) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v217);
    }
    if (v216) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v216);
    }
    if (v215) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v215);
    }
    if (v214) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v214);
    }
    if ((void)v207) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207);
    }
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (*((void *)&v48 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
    }
    sg_vec_ref::begin(v101, (uint64_t)&v203);
    sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v178, &v203);
    if (*((void *)&v210 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
    }
    if (*((void *)&v203 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
    }
    sg_vec_ref::end(v101, (uint64_t)&v203);
    sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v165, &v203);
    if (*((void *)&v210 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
    }
    if (*((void *)&v203 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
    }
    a7 = 1;
    unint64_t v46 = v187;
LABEL_77:
    long long v134 = v178;
    if (*((void *)&v178 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)long long v135 = v179[0];
    *(_OWORD *)&v135[9] = *(_OWORD *)((char *)v179 + 9);
    long long v137 = v181;
    long long v138 = v182;
    long long v139 = v183;
    char v140 = v184;
    uint64_t v136 = v180;
    long long v141 = v185;
    if (*((void *)&v185 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v185 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v142 = v186;
    unint64_t v143 = v187;
    char v144 = v188;
    if (a7) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v41 * *(void *)(v102 + 40);
    }
    unint64_t v56 = v55 - v190 + *(void *)&v135[8];
    if (v189 < v56) {
      unint64_t v56 = v189;
    }
    if (v55) {
      unint64_t v57 = v56;
    }
    else {
      unint64_t v57 = v189;
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v134, v57);
    sg_vec_ns::details::buffer_iterator::rtrim_written(&v137);
    long long v203 = v134;
    long long v134 = 0uLL;
    *(_OWORD *)char v204 = *(_OWORD *)v135;
    *(_OWORD *)&v204[9] = *(_OWORD *)&v135[9];
    uint64_t v205 = v136;
    long long v206 = v137;
    long long v207 = v138;
    long long v208 = v139;
    char v209 = v140;
    long long v210 = v141;
    long long v141 = 0uLL;
    long long v211 = v142;
    char v213 = v144;
    unint64_t v212 = v143;
    sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v178, &v203);
    if (*((void *)&v210 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
    }
    if (*((void *)&v203 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
    }
    if (*((void *)&v141 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v141 + 1));
    }
    if (*((void *)&v134 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
    }
    unint64_t v37 = v187;
    unint64_t v32 = v187 - v46 + v33;
    if (!v47) {
      break;
    }
    uint64_t v18 = 0;
    a6 = 0;
    unint64_t v38 = *(void *)(v102 + 40);
    uint64_t v11 = v99;
LABEL_99:
    unint64_t v58 = (v36 & 1) + v35 - v34 + (int)(((v36 >> 1) & 1) - 1);
    unint64_t v59 = v38 * v58 - v18;
    if (v176 - v37 < v59) {
      unint64_t v59 = v176 - v37;
    }
    if ((void)v170 - (void)v182 < v59)
    {
      int v65 = 4;
      goto LABEL_175;
    }
    *(void *)&long long v203 = v38 * v40;
    *((void *)&v203 + 1) = v38 * (v58 + v40);
    v204[0] = 2;
    sg_vec_ns::details::sg_vec_iterator::subvec((sg_vec_ns::details::sg_vec_iterator *)&v178, (uint64_t)&v203, (uint64_t)&v165, (uint64_t)&__p);
    unint64_t v189 = -78;
    if (((uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 4) - 1 != v97 || *(unsigned char *)(v11 + 56) == 0 || a7)
    {
LABEL_106:
      uint64_t v62 = DiskImage::Context::read(*(DiskImage::Context **)(*(void *)(v11 + 16) + 16 * v97), (const sg_vec_ns::details::sg_vec_iterator *)&__p, (const sg_vec_ns::details::sg_vec_iterator *)&v129);
      uint64_t v64 = v63;
      unint64_t v189 = v62;
      uint64_t v190 = v63;
      goto LABEL_107;
    }
    uint64_t v60 = *(void *)(*(void *)(v102 + 16) + 48 * v97 + 24);
    *(_OWORD *)char v204 = 0u;
    long long v203 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)v60 + 72))(&v203);
    if ((void)v203)
    {
      unint64_t v61 = v203 + ((v133 - v127) & ~((uint64_t)(v133 - v127) >> 63)) - 1;
      if (v131 - (uint64_t)v121 < 1
                                - ((void)v203
                                 + ((v133 - v127) & ~((uint64_t)(v133 - v127) >> 63)))
                                + v61 / (unint64_t)v203 * (void)v203
                                + *((void *)&v203 + 1) * (void)v203
                                + v61)
        goto LABEL_106;
    }
    else if ((a6 & 1) == 0)
    {
      goto LABEL_106;
    }
    unint64_t v76 = DiskImage::Context::read(*(DiskImage::Context **)(*(void *)(*(void *)(v11 + 16) + 16 * v97) + 16), (const sg_vec_ns::details::sg_vec_iterator *)&__p, (const sg_vec_ns::details::sg_vec_iterator *)&v129);
    uint64_t v62 = v76;
    uint64_t v64 = v77;
    unint64_t v189 = v76;
    uint64_t v190 = v77;
    a7 = v77 < v127 || v76 > ((*v94 - *v96) & ~((uint64_t)(*v94 - *v96) >> 63));
LABEL_107:
    if (v62 < 0 && v62)
    {
      int v65 = 1;
    }
    else
    {
      unint64_t v66 = v127;
      uint64_t v67 = v133;
      if (a6)
      {
        if (a7)
        {
          uint64_t v68 = *v94 - *v96;
          if (v68 <= v62) {
            uint64_t v68 = v62;
          }
          long long v69 = v178;
          if (*((void *)&v178 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)uint64_t v110 = v179[0];
          *(_OWORD *)&v110[9] = *(_OWORD *)((char *)v179 + 9);
          uint64_t v70 = v180;
          uint64_t v71 = v181;
          long long v111 = v182;
          long long v112 = v183;
          char v113 = v184;
          uint64_t v72 = *((void *)&v181 + 1);
          long long v73 = v185;
          if (*((void *)&v185 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v185 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v114 = v186;
          unint64_t v115 = v187;
          char v116 = v188;
          long long v191 = v69;
          if (*((void *)&v69 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v192[0] = *(_OWORD *)v110;
          *(_OWORD *)((char *)v192 + 9) = *(_OWORD *)&v110[9];
          uint64_t v193 = v70;
          uint64_t v194 = v71;
          long long v196 = v111;
          long long v197 = v112;
          char v198 = v113;
          uint64_t v195 = v72;
          long long v199 = v73;
          if (*((void *)&v73 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v73 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v200 = v114;
          unint64_t v201 = v115;
          char v202 = v116;
          sg_vec_ns::generate_vec_ref((uint64_t)&v191, (uint64_t)&v165, v64, v68 & ~(v68 >> 63), 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v203);
          if (*((void *)&v199 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v199 + 1));
          }
          if (*((void *)&v191 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v191 + 1));
          }
          std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v101);
          sg_vec_ref::sg_vec_ref(v101, (uint64_t)&v203);
          *((unsigned char *)v101 + 528) = 1;
          if (v218) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v218);
          }
          if (v217) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v217);
          }
          if (v216) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v216);
          }
          if (v215) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v215);
          }
          if (v214) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v214);
          }
          if ((void)v207) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207);
          }
          if (*((void *)&v73 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
          }
          if (*((void *)&v69 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
          }
          sg_vec_ref::begin(v101, (uint64_t)&v203);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v178, &v203);
          if (*((void *)&v210 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
          }
          if (*((void *)&v203 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
          }
          sg_vec_ref::end(v101, (uint64_t)&v203);
          sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v165, &v203);
          if (*((void *)&v210 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
          }
          if (*((void *)&v203 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
          }
          a7 = 1;
          unint64_t v74 = v189;
        }
        else
        {
          a7 = 0;
          unint64_t v74 = v62;
        }
        uint64_t v98 = v64;
      }
      else if (v64 == v187)
      {
        unint64_t v74 = v62;
      }
      else
      {
        unint64_t v74 = trim_data((uint64_t)&v178, (uint64_t)&v165, *(void *)(v102 + 40) * v58, &v189);
        unint64_t v189 = v74;
        uint64_t v190 = v75;
        a7 = v74 != *(void *)(v102 + 40) * v58;
      }
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v178, v74);
      uint64_t v18 = 0;
      a6 = 0;
      v32 += v189;
      int v65 = 4 * (v64 + v62 < ((v67 - v66) & ~((uint64_t)(v67 - v66) >> 63)) + v66);
    }
    uint64_t v11 = v99;
    if (v132) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v132);
    }
    if (v130) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v130);
    }
    if (v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
    }
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
    if (v65) {
      goto LABEL_175;
    }
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v159);
  }
  a6 = 0;
  int v65 = 4;
  uint64_t v11 = v99;
LABEL_175:
  uint64_t v78 = v158[0];
  v158[0] = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 24))(v78);
  }
  uint64_t v79 = v159;
  uint64_t v159 = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 24))(v79);
  }
  if (v65 != 2)
  {
    if (v65 != 4) {
      goto LABEL_228;
    }
LABEL_227:
    unint64_t v189 = v32;
    uint64_t v190 = v98;
    goto LABEL_228;
  }
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v178, (uint64_t)&v165)) {
    goto LABEL_227;
  }
  if (DiskImage::extents_t::empty((DiskImage::extents_t *)v219))
  {
    int v81 = (int)v101;
    uint64_t v80 = v102;
  }
  else
  {
    DiskImage::extents_t::back((DiskImage::extents_t *)v219, (uint64_t)&v203);
    int v81 = (int)v101;
    uint64_t v80 = v102;
    if (*(void *)(v102 + 40) * *((void *)&v203 + 1) >= *v94) {
      goto LABEL_227;
    }
  }
  unint64_t sg_from_next = DiskImageStackable::read_sg_from_next(v80, (DiskImageStackable::ContextStackable *)v11, (uint64_t)&v178, (uint64_t)&v165, v95, a6 & 1, a7, v81, (DiskImage::extents_t *)v219);
  unint64_t v83 = sg_from_next;
  uint64_t v85 = v84;
  unint64_t v189 = sg_from_next;
  uint64_t v190 = v84;
  if ((sg_from_next & 0x8000000000000000) == 0 || !sg_from_next)
  {
    if (a6)
    {
      long long v86 = v178;
      if (*((void *)&v178 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)uint64_t v103 = v179[0];
      *(_OWORD *)&v103[9] = *(_OWORD *)((char *)v179 + 9);
      long long v104 = v182;
      uint64_t v87 = v180;
      long long v88 = v181;
      uint64_t v89 = v185;
      long long v105 = v183;
      char v106 = v184;
      uint64_t v90 = (std::__shared_weak_count *)*((void *)&v185 + 1);
      if (*((void *)&v185 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v185 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v107 = v186;
      unint64_t v108 = v187;
      char v109 = v188;
      uint64_t v91 = v190;
      long long __p = v86;
      if (*((void *)&v86 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v118[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v103[9];
      long long v121 = v104;
      uint64_t v119 = v87;
      long long v120 = v88;
      long long v122 = v105;
      char v123 = v106;
      uint64_t v124 = v89;
      uint64_t v125 = v90;
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v126 = v107;
      unint64_t v127 = v108;
      char v128 = v109;
      sg_vec_ns::generate_vec_ref((uint64_t)&__p, (uint64_t)&v165, v91, sg_from_next, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v203);
      if (v125) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v125);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
      std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v101);
      sg_vec_ref::sg_vec_ref(v101, (uint64_t)&v203);
      *((unsigned char *)v101 + 528) = 1;
      if (v218) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v218);
      }
      if (v217) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v217);
      }
      if (v216) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v216);
      }
      if (v215) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v215);
      }
      if (v214) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v214);
      }
      if ((void)v207) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }
      if (*((void *)&v86 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v86 + 1));
      }
      sg_vec_ref::begin(v101, (uint64_t)&v203);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v178, &v203);
      if (*((void *)&v210 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
      }
      if (*((void *)&v203 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
      }
      sg_vec_ref::end(v101, (uint64_t)&v203);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v165, &v203);
      if (*((void *)&v210 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v210 + 1));
      }
      if (*((void *)&v203 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v203 + 1));
      }
      unint64_t v83 = v189;
      uint64_t v98 = v85;
    }
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v178, v83);
    v32 += v189;
    goto LABEL_227;
  }
LABEL_228:
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v221);
  uint64_t v92 = v220;
  uint64_t v220 = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 40))(v92);
  }
  if (v174) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v174);
  }
  if (v166) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v166);
  }
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  if (*((void *)&v178 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v178 + 1));
  }
  return v189;
}

void sub_21E327010(_Unwind_Exception *a1)
{
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)(v1 - 192));
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x5A0]);
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)&STACK[0x640]);
  _Unwind_Resume(a1);
}

BOOL DiskImage::extents_t::empty(DiskImage::extents_t *this)
{
  DiskImage::extents_t::begin(this, (uint64_t)v7);
  DiskImage::extents_t::end(this, (uint64_t)v6);
  BOOL v2 = DiskImage::const_extents_iterator_t::operator==((uint64_t)v7, (uint64_t)v6);
  uint64_t v3 = v6[0];
  v6[0] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = v7[0];
  v7[0] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return v2;
}

void sub_21E327254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImageStackable::verify_image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v7 = v3 + 48;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 56))(*(void *)(v7 - 40), a2, a3);
    if (result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 48;
  }
  while (!v9);
  return result;
}

uint64_t DiskImageStackable::unmap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(void))(**(void **)(v2 + 8) + 80))(*(void *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0;
  }
  unint64_t v6 = **(void ***)(a2 + 16);
  return DiskImage::Context::unmap(v6);
}

void *DiskImageStackable::cacheFlusher_t::cacheFlusher_t(void *a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.di_stackable.cache.flusher");
  workqueue::workqueue::workqueue(a1, __p, 1);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  workqueue::workqueue::create_recurrent_block(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_21E327458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  workqueue::workqueue::~workqueue(v15);
  _Unwind_Resume(a1);
}

double DiskImageStackable::stackable_extents_iterator_interface::make_val@<D0>(DiskImageStackable::stackable_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  v4[0] = *((void *)this + 5);
  v4[1] = v2;
  char v5 = 2;
  *(void *)&double result = DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive((uint64_t)this, (uint64_t)v4, 0, a2).n128_u64[0];
  return result;
}

__n128 DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v51[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 24) - v7) >> 4) == a3) {
    goto LABEL_48;
  }
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11 || *(void *)a2 + 1 >= v11) {
      goto LABEL_47;
    }
LABEL_5:
    if ((v10 & 1) + (uint64_t)(int)(((v10 >> 1) & 1) - 1) - v12 + v11) {
      goto LABEL_6;
    }
LABEL_48:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }
  if (v10 != 3)
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11) {
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 >= *(void *)a2) {
    goto LABEL_5;
  }
LABEL_47:
  if (!boost::icl::identity_element<unsigned long long>::value(void)::_value) {
    goto LABEL_48;
  }
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 48 * a3 + 8) + 32))(*(void *)(v7 + 48 * a3 + 8));
  unint64_t v15 = *(void *)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 >= v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = *(void *)a2;
  }
  if (v16 >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 16) + 16 * a3);
  v46[0] = *(void *)(*(void *)(v6 + 16) + 48 * a3 + 8);
  v46[1] = v17;
  unint64_t v46[2] = v18;
  char v47 = 2;
  uint64_t v48 = 0;
  uint64_t v49 = v19;
  int v50 = 7;
  v51[0] = &unk_26CF26308;
  v51[3] = v51;
  if (v14 < v16)
  {
    unint64_t v20 = v14;
    long long v21 = operator new(0x20uLL);
    unint64_t v40 = v21 + 4;
    unint64_t v41 = (char *)(v21 + 4);
    void *v21 = v20;
    v21[1] = v16;
    *((unsigned char *)v21 + 16) = 2;
    *((_DWORD *)v21 + 6) = 2;
    long long __p = v21;
    DiskImage::extents_t_transformer::make_transformed_extents((DiskImage::extents_t *)v46, (uint64_t)&__p, (uint64_t)v42);
    DiskImage::extents_t::operator=((uint64_t)v46, (uint64_t)v42);
    std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v45);
    uint64_t v22 = v44;
    uint64_t v44 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
    }
    if (__p)
    {
      unint64_t v40 = __p;
      operator delete(__p);
    }
    unint64_t v15 = *(void *)a2;
  }
  if ((*(unsigned char *)(a2 + 16) & 2) != 0) {
    unint64_t v23 = v15;
  }
  else {
    unint64_t v23 = v15 + 1;
  }
  DiskImage::extents_t::begin((DiskImage::extents_t *)v46, (uint64_t)v42);
  int v24 = v44;
  uint64_t v25 = v42[0];
  v42[0] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
  }
  DiskImage::extents_t::begin((DiskImage::extents_t *)v46, (uint64_t)v42);
  DiskImage::extents_t::end((DiskImage::extents_t *)v46, (uint64_t)&__p);
  uint64_t v26 = a3 + 1;
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)v42, (uint64_t)&__p))
  {
    unint64_t v27 = v43;
    if (v44)
    {
      if (v44 != v24) {
        break;
      }
    }
    else
    {
      v34[0] = v23;
      v34[1] = v43;
      char v35 = 2;
      DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive(&v36, a1, v34, v26);
      if (v24)
      {
        if (v38 != v24) {
          break;
        }
      }
      else
      {
        int v24 = v38;
      }
      unint64_t v23 = v37;
      if (v37 != v27) {
        break;
      }
    }
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)v42);
    unint64_t v23 = v27;
  }
  unint64_t v28 = __p;
  long long __p = 0;
  if (v28) {
    (*(void (**)(void *))(*(void *)v28 + 24))(v28);
  }
  uint64_t v29 = v42[0];
  v42[0] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  unint64_t v30 = *(void *)a2;
  if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
    ++v30;
  }
  *(void *)a4 = v30;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v24;
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v51);
  uint64_t v32 = v48;
  uint64_t v48 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
  }
  return result;
}

void sub_21E3278C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)&a22);
  if (__p) {
    operator delete(__p);
  }
  DiskImage::extents_t::~extents_t((DiskImage::extents_t *)(v22 - 176));
  _Unwind_Resume(a1);
}

void DiskImageStackable::stackable_extents_iterator_interface::clone(DiskImageStackable::stackable_extents_iterator_interface *this)
{
}

void DiskImageStackable::stackable_extents_iterator_interface::~stackable_extents_iterator_interface(DiskImageStackable::stackable_extents_iterator_interface *this)
{
}

uint64_t DiskImageStackable::get_block_size(DiskImageStackable *this)
{
  return *((void *)this + 5);
}

uint64_t DiskImageStackable::get_num_blocks(DiskImageStackable *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 8) + 32))();
}

uint64_t DiskImageStackable::is_writable(DiskImageStackable *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

void DiskImageStackable::create_image_info(DiskImageStackable *this)
{
}

void sub_21E327B38(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C40F7292D7BLL);
  _Unwind_Resume(a1);
}

uint64_t DiskImageStackable::set_size(DiskImageStackable *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 24) + 64))();
}

uint64_t DiskImageStackable::get_io_constraints(DiskImageStackable *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 3) - 24) + 72))();
}

uint64_t DiskImageStackable::supports_unmap(DiskImageStackable *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 80))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48;
  }
  while (!v5);
  return result;
}

uint64_t DiskImageStackable::supports_get_extents(DiskImageStackable *this)
{
  return 1;
}

uint64_t DiskImageStackable::may_read_extra(DiskImageStackable *this)
{
  return *((unsigned __int8 *)this + 48);
}

void DiskImageStackable::get_extents_iterator_interface()
{
}

void DiskImageStackable::_create_ctx(DiskImageStackable *this)
{
}

void sub_21E327D1C(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10A1C40D4D23789);
  _Unwind_Resume(a1);
}

unint64_t DiskImageStackable::read(DiskImageStackable *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  unint64_t v8 = *((void *)a4 + 18);
  uint64_t v9 = (*(uint64_t (**)(DiskImageStackable *))(*(void *)this + 32))(this);
  if (v8 > (*(uint64_t (**)(DiskImageStackable *))(*(void *)this + 24))(this) * v9) {
    return -5;
  }
  v12[0] = 0;
  v12[528] = 0;
  unint64_t v10 = DiskImageStackable::read_from_idx(this, (uint64_t)a2, (uint64_t)a3, (uint64_t *)a4, 0, 1, 0, (sg_vec_ref *)v12);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_21E327E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, DiskImage *a2)
{
  return di_stackable::get_identifier(*(di_stackable **)(*(void *)(*(void *)a2 + 16) + 8), a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, DiskImageASIF **a2)
{
  return DiskImageASIF::get_stackable_identifier(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)a2 + 560) + 136);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 72);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, uint64_t a2)
{
  return plugin_header::get_uuid((plugin_header *)(*(void *)a2 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>(uint64_t a1, di_asif::details::dir ***a2)
{
  return DiskImageASIF::get_stackable_source_identifier(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_stackable::get_stackable_source_identifier(DiskImage &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<DiskImageStackable>,std::__variant_detail::_Trait<DiskImageUDIF>,std::__variant_detail::_Trait<DiskImageRaw>,std::__variant_detail::_Trait<DiskImageASIF>,std::__variant_detail::_Trait<DiskImageSparseBundle>,std::__variant_detail::_Trait<DiskImageROChunkRaw>,std::__variant_detail::_Trait<DiskImage>,std::__variant_detail::_Trait<DiskImagePlugin>> &&>()
{
  return 0;
}

uint64_t std::construct_at[abi:ne180100]<DiskImageStackable::stackable_layer,DiskImageStackable::stackable_layer&,DiskImageStackable::stackable_layer*>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

uint64_t *std::vector<DiskImageStackable::stackable_layer>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 48) = *(_DWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void std::__destroy_at[abi:ne180100]<DiskImageStackable::stackable_layer,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__split_buffer<DiskImageStackable::stackable_layer>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<DiskImageStackable::stackable_layer,0>(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    workqueue::recurrent_block::~recurrent_block((workqueue::recurrent_block *)(a1 + 64));
    uint64_t v2 = (void **)(a1 + 24);
    std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

uint64_t std::__optional_destruct_base<DiskImageStackable::cacheFlusher_t,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    workqueue::recurrent_block::~recurrent_block((workqueue::recurrent_block *)(a1 + 64));
    uint64_t v3 = (void **)(a1 + 24);
    std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::vector<DiskImageStackable::stackable_layer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<DiskImageStackable::stackable_layer,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

DiskImage::extents_t *DiskImage::extents_t::extents_t(DiskImage::extents_t *this, const DiskImage::extents_t *a2)
{
  uint64_t v4 = *(void *)a2;
  *(void *)this = *(void *)a2;
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 3) = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v6;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((void *)this + 7) = &unk_26CF26308;
  *((void *)this + 10) = (char *)this + 56;
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=((void *)this + 7, (uint64_t)a2 + 56);
  return this;
}

void sub_21E328268(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v2);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v4) {
    DiskImageASIF::set_size(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, a2);
  uint64_t v8 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v9 = v15 + 24 * v8;
  uint64_t v10 = a1[19];
  uint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  unint64_t v12 = &v13[v10];
  sg_vec_ref::sg_vec_ref(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_21E32830C(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_data::~sg_vec_data(v1);
  _Unwind_Resume(a1);
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<ref::details::ref_cnt_handle,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = (__n128 *)operator new(24 * v11);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

void boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 24 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      unint64_t v12 = (std::__shared_weak_count **)&v10->n128_u64[1];
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_21E328480(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::shared_ptr<char>,unsigned long>*,std::pair<std::shared_ptr<char>,unsigned long>>>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }
  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    uint64_t v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      __n128 result = *a3;
      *uint64_t v8 = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      uint64_t v8 = (__n128 *)((char *)v8 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<DiskImageIOBreaker,std::allocator<DiskImageIOBreaker>,DiskImage &,BOOL,void>(uint64_t a1, uint64_t a2, char *a3)
{
  long long v5 = operator new(0x68uLL);
  std::__shared_ptr_emplace<DiskImageIOBreaker>::__shared_ptr_emplace[abi:ne180100]<DiskImage &,BOOL,std::allocator<DiskImageIOBreaker>,0>((uint64_t)v5, a2, a3);
}

void sub_21E328568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageIOBreaker>::__shared_ptr_emplace[abi:ne180100]<DiskImage &,BOOL,std::allocator<DiskImageIOBreaker>,0>(uint64_t a1, uint64_t a2, char *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF399D0;
  char v4 = *a3;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = &unk_26CF39490;
  *(void *)(a1 + 40) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
  *(unsigned char *)(a1 + 80) = v4;
  _ZNSt3__110shared_ptrIcEC2B8ne180100IN18DiskImageIOBreaker10shared_refMUlT_E_EEEDnS4_((void *)(a1 + 88));
}

void sub_21E328628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DiskImageIOBreaker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF399D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DiskImageIOBreaker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF399D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<DiskImageIOBreaker>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void _ZNSt3__110shared_ptrIcEC2B8ne180100IN18DiskImageIOBreaker10shared_refMUlT_E_EEEDnS4_(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_21E32873C(void *a1)
{
}

void sub_21E328748(_Unwind_Exception *a1)
{
}

void _ZNSt3__120__shared_ptr_pointerIDnN18DiskImageIOBreaker10shared_refMUlT_E_ENS_9allocatorIcEEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t _ZNKSt3__120__shared_ptr_pointerIDnN18DiskImageIOBreaker10shared_refMUlT_E_ENS_9allocatorIcEEE13__get_deleterERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN18DiskImageIOBreaker10shared_refMUlT_E_E)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t getDIOSLog()
{
  if (getDIOSLog_onceToken != -1) {
    dispatch_once(&getDIOSLog_onceToken, &__block_literal_global_8);
  }
  return getDIOSLog_log;
}

os_log_t __getDIOSLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.DiskImages2", "Default");
  getDIOSLog_log = (uint64_t)result;
  return result;
}

uint64_t DISetForwardLogs(uint64_t result)
{
  forwardLogs = result;
  return result;
}

uint64_t DIForwardLogs()
{
  return forwardLogs;
}

uint64_t DISetDebugLogsEnabled(uint64_t result)
{
  debugLogsEnabled = result;
  return result;
}

uint64_t DIDebugLogsEnabled()
{
  return debugLogsEnabled;
}

uint64_t system_properties::get_logical_cpus(system_properties *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&system_properties::get_logical_cpus(void)::flag, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&system_properties::get_logical_cpus(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<system_properties::get_logical_cpus(void)::$_0 &&>>);
  }
  return system_properties::get_logical_cpus(void)::num_cpus;
}

uint64_t system_properties::$_2::__invoke(system_properties::$_2 *this)
{
  return 2 * system_properties::get_logical_cpus(this);
}

uint64_t (**system_properties::get_resources(system_properties *this))(system_properties::$_2 *__hidden this)
{
  {
    system_properties::get_resources(void)::total_memory_gb = (unint64_t)(get_memory_size() + 0x3FFFFFFF) >> 30;
  }
  uint64_t v1 = (uint64_t (**)(system_properties::$_3 *__hidden))&system_properties::small_config;
  if ((unint64_t)system_properties::get_resources(void)::total_memory_gb > 3) {
    uint64_t v1 = &system_properties::medium_config;
  }
  if ((unint64_t)system_properties::get_resources(void)::total_memory_gb <= 8) {
    return v1;
  }
  else {
    return &system_properties::big_config;
  }
}

void sub_21E32899C(_Unwind_Exception *a1)
{
}

uint64_t get_memory_size(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&get_memory_size(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    char v2 = &v3;
    std::__call_once(&get_memory_size(void)::flag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_memory_size(void)::$_0 &&>>);
  }
  return get_memory_size(void)::memory_size;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<get_memory_size(void)::$_0 &&>>()
{
  size_t v1 = 8;
  uint64_t v2 = 0;
  uint64_t result = sysctlbyname("hw.memsize", &v2, &v1, 0, 0);
  get_memory_size(void)::memory_size = v2;
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<system_properties::get_logical_cpus(void)::$_0 &&>>()
{
  int v2 = 1;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  system_properties::get_logical_cpus(void)::num_cpus = v2;
  return result;
}

uint64_t ref::details::_get_tagged_ptr_lock(unint64_t this, const void *a2)
{
  {
    uint64_t v6 = (ref::details *)this;
    this = (unint64_t)v6;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_21E237000);
      this = (unint64_t)v6;
    }
  }
  unint64_t v2 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v2 >> 47) ^ v2);
  return (uint64_t)&ref::details::_get_tagged_ptr_lock(void const*)::mutexs
       + 64 * (unint64_t)((9 * ((v3 >> 47) ^ v3)) & 0xF);
}

uint64_t ref::details::_get_tagged_ptr_cond(unint64_t this, const void *a2)
{
  {
    uint64_t v6 = (ref::details *)this;
    this = (unint64_t)v6;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_21E237000);
      this = (unint64_t)v6;
    }
  }
  unint64_t v2 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v2 >> 47) ^ v2);
  return (uint64_t)&ref::details::_get_tagged_ptr_cond(void const*)::conds
       + 48 * ((9 * ((v3 >> 47) ^ v3)) & 0xF);
}

uint64_t ref::details::ref_cnt_handle::ref_cnt_handle(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_26CF39AF0;
  *(void *)(result + 8) = v2;
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void ref::details::ref_cnt_handle::~ref_cnt_handle(ref::details::ref_cnt_handle *this, const void *a2)
{
  *(void *)this = &unk_26CF39AF0;
  if (*((unsigned char *)this + 16))
  {
    unint64_t v3 = (ref::ref_cnt *)*((void *)this + 1);
    if (atomic_fetch_add_explicit(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      ref::ref_cnt::notify(v3, a2);
    }
  }
}

{
  uint64_t vars8;

  ref::details::ref_cnt_handle::~ref_cnt_handle(this, a2);
  JUMPOUT(0x223C249A0);
}

ref::ref_cnt *ref::details::ref_cnt_handle::upgrade_to_exclusive@<X0>(ref::details::ref_cnt_handle *this@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *((unsigned __int8 *)this + 16);
  uint64_t result = (ref::ref_cnt *)*((void *)this + 1);
  if (v6)
  {
    if (atomic_fetch_add_explicit((atomic_ullong *volatile)result, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) == 1) {
      ref::ref_cnt::notify(result, a2);
    }
    *((unsigned char *)this + 16) = 0;
    uint64_t v8 = *((void *)this + 1);
    return (ref::ref_cnt *)ref::ref_cnt::take_exclusive(v8, (uint64_t)a2, a3);
  }
  else
  {
    *(unsigned char *)(a3 + 16) = 0;
    *(void *)a3 = &unk_26CF39B10;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 24) = a2;
  }
  return result;
}

void ref::details::ref_cnt_set_handle::~ref_cnt_set_handle(ref::details::ref_cnt_set_handle *this, const void *a2)
{
  *(void *)this = &unk_26CF39B10;
  if (*((unsigned char *)this + 16))
  {
    atomic_store(*((void *)this + 3), *((unint64_t **)this + 1));
    ref::ref_cnt::notify(*((ref::ref_cnt **)this + 1), a2);
  }
  *((unsigned char *)this + 16) = 0;
  ref::details::ref_cnt_handle::~ref_cnt_handle(this, a2);
}

{
  uint64_t vars8;

  ref::details::ref_cnt_set_handle::~ref_cnt_set_handle(this, a2);
  JUMPOUT(0x223C249A0);
}

void ref::ref_cnt::notify(ref::ref_cnt *this, const void *a2)
{
  tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock((unint64_t)this, a2);
  std::mutex::lock(tagged_ptr_lock);
  uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)this, v4);
  std::condition_variable::notify_all(tagged_ptr_cond);
  std::mutex::unlock(tagged_ptr_lock);
}

void __cxx_global_array_dtor()
{
  for (uint64_t i = 0x3C0u; i != -64; i -= 64)
    std::mutex::~mutex((std::mutex *)((char *)&ref::details::_get_tagged_ptr_lock(void const*)::mutexs + i));
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0x2D0u; i != -48; i -= 48)
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)&ref::details::_get_tagged_ptr_cond(void const*)::conds
                                                                           + i));
}

uint64_t smart_enums::validators::validator_exception_base::what(smart_enums::validators::validator_exception_base *this)
{
  return *((void *)this + 1);
}

const void **CFAutoRelease<__CFNumber const*>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *di_log::logger<di_log::log_printer<361ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<361ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF39BD0;
  a1[45] = &unk_26CF39CD0;
  a1[46] = &unk_26CF39CF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF39BD0;
  a1[45] = &unk_26CF39C58;
  a1[46] = &unk_26CF39C80;
  return a1;
}

void sub_21E32907C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  return a1;
}

void smart_enums::validators::validator_exception<int>::~validator_exception(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x223C249A0);
}

void smart_enums::validators::validator_exception<int>::reason(smart_enums::validators::validator_exception_base *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0) {
    char v4 = v15;
  }
  else {
    char v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)v15[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v11 = v9;
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v14);
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<361ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<361ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF39D68;
  di_log::logger_buf<di_log::log_printer<361ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<361ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E329850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<361ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 361;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 361;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<361ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF39D68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E329B98(_Unwind_Exception *a1)
{
}

void BufferAllocator::add_buffer(BufferAllocator *this)
{
}

void BufferAllocator::~BufferAllocator(BufferAllocator *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x223C24980](*v2, 0x1000C8077774924);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 3);
  }
  *((void *)this + 4) = v2;
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 1);
  char v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void BufferAllocator::BufferAllocator(BufferAllocator *this, uint64_t a2, unsigned int a3, unint64_t a4)
{
  *(void *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  char v6 = (void **)((char *)this + 24);
  *((void *)this + 6) = 1018212795;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 850045863;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  if (a3 <= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a3;
  }
  *((void *)this + 2) = v7;
  std::vector<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *,std::allocator<std::tuple<std::unique_ptr<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF,std::default_delete<DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF>>,std::shared_ptr<BackendSG>> *>>::reserve(v6, a3);
  if (a3) {
    BufferAllocator::add_buffer(this);
  }
}

void sub_21E329DCC(_Unwind_Exception *a1)
{
  BufferAllocator::~BufferAllocator(v1);
  _Unwind_Resume(a1);
}

void BufferAllocator::allocate(std::condition_variable *this@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&this[2];
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)&this[2]);
  uint64_t v4 = *(void *)&this->__cv_.__opaque[24];
  if (*(void *)&this->__cv_.__opaque[16] == v4)
  {
    if (*(void *)&this->__cv_.__opaque[8] > (unint64_t)*(unsigned int *)this->__cv_.__opaque) {
      BufferAllocator::add_buffer((BufferAllocator *)this);
    }
    do
    {
      std::condition_variable::wait(this + 1, &__lk);
      uint64_t v4 = *(void *)&this->__cv_.__opaque[24];
    }
    while (*(void *)&this->__cv_.__opaque[16] == v4);
  }
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&this->__cv_.__opaque[24] = v4 - 8;
  unint64_t v7 = this;
  *a2 = v5;
  operator new();
}

void sub_21E329ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

void BufferAllocator::allocate(void)::$_0::operator()<char *>(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)(*a1 + 96);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(v3 + 32);
  unint64_t v6 = *(void *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v3 + 40, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    unint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 24);
    unsigned __int8 v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unsigned __int8 v16 = *(char **)(v3 + 24);
    }
    *(void *)(v3 + 24) = v14;
    *(void *)(v3 + 32) = v7;
    *(void *)(v3 + 40) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v3 + 32) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_21E32A030(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<char *,BufferAllocator::allocate(void)::$_0,std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void toNativeType(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_21E32A208(_Unwind_Exception *a1)
{
  MEMORY[0x223C24980](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t CFStringGetOSType(const __CFString *a1)
{
  if (!a1)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v5 = "Invalid resource key";
    goto LABEL_8;
  }
  unint64_t Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }
  v8.length = Length;
  *(_DWORD *)buffer = 0;
  v8.location = 0;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4, 0) != 4)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v5 = "Can't get key in cstring format";
LABEL_8:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v5, 0x16u);
  }
  return bswap32(*(unsigned int *)buffer);
}

BOOL addNumberToCFArray<long long>(__CFArray *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
  CFNumberRef v5 = v3;
  if (v3) {
    CFArrayAppendValue(a1, v3);
  }
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease((const void **)&v5);
  return v3 != 0;
}

void sub_21E32A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL addCFNumber64ToDict(__CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongLongType, &valuePtr);
  CFNumberRef v7 = v5;
  if (v5) {
    CFDictionarySetValue(a1, a2, v5);
  }
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease((const void **)&v7);
  return v5 != 0;
}

void sub_21E32A404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

__CFDictionary *cf::make_dict@<X0>(const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  if (keys && values && numValues)
  {
    uint64_t result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], keys, values, numValues, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFMutableDictionaryRef Mutable = result;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFNumberRef v7 = 0;
    uint64_t result = (__CFDictionary *)CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v7);
  }
  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef cf::make_empty_dict@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *a1 = result;
  return result;
}

const void **cf::serialize_to_xml_plist@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v4 = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x263EFFB08], propertyList, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v5 = v4;
  if (v4) {
    BOOL v6 = error == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    uint64_t v11 = std::generic_category();
    exception[1] = 22;
    exception[2] = v11;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't serialize property list";
  }
  CFIndex Length = CFDataGetLength(v4);
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v5) != TypeID)
  {
    unint64_t v12 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v5);
    uint64_t v13 = cf::CFUtilException::CFUtilException(v12);
  }
  uint64_t v14 = 0;
  *a2 = v5;
  a2[1] = (const __CFData *)Length;
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&v14);
  return CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)&error);
}

void sub_21E32A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  CFAutoRelease<__CFError *>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

const void **cf::deserialize_from_xml_plist@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, void *a3@<X8>)
{
  CFErrorRef error = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, length);
  CFDataRef v19 = v5;
  if (v5) {
    BOOL v6 = error == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    unint64_t v12 = std::generic_category();
    exception[1] = 12;
    exception[2] = v12;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }
  CFPropertyListFormat format = kCFPropertyListXMLFormat_v1_0;
  CFPropertyListRef v7 = CFPropertyListCreateWithData(v4, v5, 0, &format, &error);
  if (v7) {
    BOOL v8 = error == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *v13 = &unk_26CF39EE0;
    uint64_t v15 = std::generic_category();
    v13[1] = Code;
    void v13[2] = v15;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "Can't convert data to property list";
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v7) != TypeID)
  {
    unsigned __int8 v16 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v7);
    int v17 = cf::CFUtilException::CFUtilException(v16);
  }
  *a3 = v7;
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v19);
  return CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)&error);
}

void sub_21E32A86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
  __cxa_free_exception(v12);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a11);
  CFAutoRelease<__CFError *>::~CFAutoRelease(&a12);
  _Unwind_Resume(a1);
}

char *CFDataCopyToVector@<X0>(const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length = CFDataGetLength(a1);
  if (!a3) {
    a3 = Length;
  }
  unint64_t v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unable to convert data to vector.", 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BytePtr = CFDataGetBytePtr(a1);
  std::vector<std::byte>::reserve(a4, a3);
  return std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_21E32A97C(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::byte>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    CFDataRef v5 = (char *)a1[1];
    BOOL v6 = operator new(__sz);
    CFPropertyListRef v7 = &v5[(void)v6 - v2];
    BOOL v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      BOOL v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

BOOL addCFStringToDict(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    CFDataRef v5 = (const char *)a3;
  }
  else {
    CFDataRef v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, 0x8000100u);
  CFStringRef v8 = v6;
  if (v6) {
    CFDictionarySetValue(a1, a2, v6);
  }
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v8);
  return v6 != 0;
}

void sub_21E32AAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void cf::add_key_value_pairs_to_dict(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *a2 + 16 * v2;
    do
    {
      CFStringRef v6 = *(const void **)v4;
      CFPropertyListRef v7 = *(const void **)(v4 + 8);
      v4 += 16;
      CFDictionaryAddValue(*a1, v6, v7);
    }
    while (v4 != v5);
  }
}

void cf::create_dict_from_list(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  cf::add_key_value_pairs_to_dict(a2, a1);
}

void sub_21E32AB9C(_Unwind_Exception *a1)
{
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      int v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      int v17 = 0;
    }
    unint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    unint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(char **)(a1 + 8);
      unint64_t v28 = v17;
    }
    unint64_t v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    CFDataRef v19 = &__src[a5];
    uint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    __int16 v22 = &v5[a5];
    unint64_t v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  CFDataRef v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  uint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

const void **CFAutoRelease<__CFError *>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void convertHexToBytes(char *__s, unint64_t *a2)
{
  CFNumberRef v3 = &v17;
  std::string::basic_string[abi:ne180100]<0>(&v17, __s);
  uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v8 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  }
  else {
    CFStringRef v8 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    CFNumberRef v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v3 != v8)
  {
    do
    {
      v3->__r_.__value_.__s.__data_[0] = __tolower(v3->__r_.__value_.__s.__data_[0]);
      CFNumberRef v3 = (std::string *)((char *)v3 + 1);
    }
    while (v3 != v8);
    uint64_t v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
    std::string::size_type v6 = v17.__r_.__value_.__r.__words[0];
    char v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 >= 0)
  {
    uint64_t v9 = &v17;
  }
  else
  {
    uint64_t v4 = size;
    uint64_t v9 = (std::string *)v6;
  }
  if (v4 >= 2)
  {
    char v10 = (std::string *)((char *)v9 + v4);
    uint64_t v11 = v9;
    while (1)
    {
      uint64_t v12 = (std::string *)memchr(v11, 48, v4 - 1);
      if (!v12) {
        goto LABEL_21;
      }
      if (LOWORD(v12->__r_.__value_.__l.__data_) == 30768) {
        break;
      }
      uint64_t v11 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      uint64_t v4 = (char *)v10 - (char *)v11;
      if ((char *)v10 - (char *)v11 < 2) {
        goto LABEL_21;
      }
    }
    if (v12 != v10 && v12 == v9)
    {
      uint64_t v13 = std::string::erase(&v17, 0, 2uLL);
      std::string::operator=(&v17, v13);
    }
  }
LABEL_21:
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  boost::algorithm::unhex<std::string,std::back_insert_iterator<std::vector<unsigned char>>>((uint64_t)&v17, &v14);
  if (a2) {
    *a2 = v15 - v14;
  }
  operator new[]();
}

void sub_21E32AF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  switch(a2)
  {
    case 3:
      __cxa_begin_catch(exception_object);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      int64_t v20 = std::generic_category();
      exception[1] = 22;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Does not contain an \"even number\" of hex digits.";
    case 2:
      __cxa_begin_catch(exception_object);
      uint64_t v21 = __cxa_allocate_exception(0x40uLL);
      void *v21 = &unk_26CF39EE0;
      __int16 v22 = std::generic_category();
      v21[1] = 22;
      uint64_t v21[2] = v22;
      *((unsigned char *)v21 + 24) = 0;
      *((unsigned char *)v21 + 48) = 0;
      v21[7] = "Contains non-hexadecimal characters.";
    case 1:
      __cxa_begin_catch(exception_object);
      unint64_t v23 = __cxa_allocate_exception(0x40uLL);
      *unint64_t v23 = &unk_26CF39EE0;
      uint64_t v24 = std::generic_category();
      v23[1] = 22;
      v23[2] = v24;
      *((unsigned char *)v23 + 24) = 0;
      *((unsigned char *)v23 + 48) = 0;
      v23[7] = "Decoding error.";
  }
  _Unwind_Resume(exception_object);
}

unint64_t *boost::algorithm::unhex<std::string,std::back_insert_iterator<std::vector<unsigned char>>>(uint64_t a1, unint64_t *a2)
{
  int v3 = *(char *)(a1 + 23);
  BOOL v4 = v3 < 0;
  uint64_t v5 = *(void *)a1;
  if (v3 >= 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v9 = v5;
  if (v6)
  {
    uint64_t v7 = v5 + v6;
    do
      a2 = boost::algorithm::detail::decode_one<std::__wrap_iter<char const*>,std::back_insert_iterator<std::vector<unsigned char>>,BOOL (*)(std::__wrap_iter<char const*>,std::__wrap_iter<char const*>)>(&v9, v7, a2, (unsigned int (*)(uint64_t, uint64_t))boost::algorithm::detail::iter_end<std::__wrap_iter<char const*>>);
    while (v9 != v7);
  }
  return a2;
}

uint64_t di_utils::buffer_to_uuid(di_utils *this, uint64_t a2)
{
  v3[2] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  return boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()((uint64_t)v3, (char *)this, a2);
}

void *operator<<(void *a1, uint64_t a2)
{
  int v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v4 = strlen(v3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" (error code ", 13);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t DiskImagesRuntimeException::what(DiskImagesRuntimeException *this)
{
  if (!*((unsigned char *)this + 48))
  {
    uint64_t result = (uint64_t)this + 56;
    return *(void *)result;
  }
  uint64_t result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t di_utils::random_uuid(di_utils *this)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uuid_generate_random(out);
  return *(void *)out;
}

void *details::get_dummy_shared_ptr(void)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<char>::~shared_ptr[abi:ne180100], &details::get_dummy_shared_ptr(void)::dummy_shared_ptr, &dword_21E237000);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)details::get_dummy_shared_ptr(void)::dummy_once_flag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(details::get_dummy_shared_ptr(void)::dummy_once_flag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<details::get_dummy_shared_ptr(void)::$_0 &&>>);
  }
  return &details::get_dummy_shared_ptr(void)::dummy_shared_ptr;
}

uint64_t std::shared_ptr<char>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t process_terminator::terminate(process_terminator *this)
{
  if (process_terminator::supports_termination)
  {
    char v1 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)&process_terminator::terminated, (unsigned __int8 *)&v1, 1u);
    if (!v1)
    {
      *(void *)&long long v3 = "void process_terminator::terminate()";
      *((void *)&v3 + 1) = 34;
      int v4 = 16;
      di_log::logger<di_log::log_printer<137ul>>::logger(v5, &v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Terminating due to unrecoverable I/O error", 42);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<137ul>>::~logger_buf((uint64_t)v5);
      MEMORY[0x223C24910](&v7);
      return raise(15);
    }
  }
  return result;
}

void sub_21E32B4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<137ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t trim_data(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 144);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v7 = a4[1];
  unint64_t v8 = *a4 - (v5 - v7);
  if (v8 >= a3) {
    unint64_t v8 = a3;
  }
  unint64_t v34 = v8;
  unint64_t v9 = v5 - v7;
  if (v5 == v7) {
    goto LABEL_86;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 8);
  char v93 = *(void **)a1;
  uint64_t v94 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v95 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v95[9] = *(_OWORD *)(a1 + 25);
  uint64_t v96 = *(void *)(a1 + 48);
  long long v97 = *(_OWORD *)(a1 + 56);
  long long v98 = *(_OWORD *)(a1 + 72);
  long long v99 = *(_OWORD *)(a1 + 88);
  char v100 = *(unsigned char *)(a1 + 104);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v101 = *(void *)(a1 + 112);
  uint64_t v102 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v103 = *(_OWORD *)(a1 + 128);
  uint64_t v104 = *v6;
  char v105 = *(unsigned char *)(a1 + 152);
  unint64_t v14 = v8 + v9;
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v93, v8 + v9);
  sg_vec_ns::details::buffer_iterator::rtrim_written(&v97);
  uint64_t v15 = (_OWORD *)(a1 + 16);
  uint64_t v16 = (long long *)(a1 + 72);
  std::string v17 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v62 = *(void **)a1;
  uint64_t v63 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v64 = *v15;
  *(_OWORD *)&v64[9] = *(_OWORD *)(a1 + 25);
  long long v66 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v67 = *v16;
  CFDataRef v19 = (long long *)(a1 + 128);
  uint64_t v65 = *(void *)(a1 + 48);
  long long v68 = v18;
  char v69 = *(unsigned char *)(a1 + 104);
  int64_t v20 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v70 = *(void *)(a1 + 112);
  uint64_t v71 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v72 = *v19;
  uint64_t v73 = *v6;
  char v74 = *((unsigned char *)v6 + 8);
  sg_vec_ns::generate_vec_ref((uint64_t)&v62, a2, a4[1], v14, 0xFFFFFFFFFFFFFFFFLL, (sg_vec_ref *)&v75);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  sg_vec_ref::begin((sg_vec_ref *)&v75, (uint64_t)v121);
  sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v93, v121);
  if (v122) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v122);
  }
  if (*((void *)&v121[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121[0] + 1));
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v93, v9);
  sg_vec_ref::end((sg_vec_ref *)&v75, (uint64_t)v59);
  __src = v93;
  uint64_t v49 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v50[0] = *(_OWORD *)v95;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v95[9];
  v52[0] = v97;
  v52[1] = v98;
  uint64_t v51 = v96;
  _OWORD v52[2] = v99;
  char v53 = v100;
  uint64_t v54 = v101;
  uint64_t v55 = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v56 = v103;
  uint64_t v57 = v104;
  char v58 = v105;
  uint64_t v21 = *(void **)a1;
  __int16 v22 = *(std::__shared_weak_count **)(a1 + 8);
  char v35 = *(void **)a1;
  uint64_t v36 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v37 = *v15;
  *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 25);
  long long v23 = *v16;
  long long v24 = *(_OWORD *)(a1 + 88);
  long long v39 = *(_OWORD *)(a1 + 56);
  long long v40 = v23;
  uint64_t v38 = *(void *)(a1 + 48);
  long long v41 = v24;
  char v42 = *(unsigned char *)(a1 + 104);
  int64_t v25 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v43 = *(void *)(a1 + 112);
  uint64_t v44 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = *v19;
  uint64_t v46 = *v6;
  char v47 = *((unsigned char *)v6 + 8);
  __dst = v21;
  long long v107 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v108 = *(_OWORD *)v37;
  *(_OWORD *)&v108[9] = *(_OWORD *)&v37[9];
  long long v110 = v39;
  long long v111 = v40;
  uint64_t v109 = v38;
  long long v112 = v41;
  char v113 = v42;
  uint64_t v114 = v43;
  unint64_t v115 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v26 = 0;
  long long v116 = v45;
  uint64_t v117 = v46;
  char v118 = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&__src, (uint64_t)v59))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)v52);
    unint64_t v27 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v56 + 1))
    {
      unint64_t v28 = *(void *)&v108[16];
      if (*(void *)&v50[0] < *(void *)&v108[16]) {
        unint64_t v28 = *(void *)&v50[0];
      }
      if (v28 >= *((void *)&v56 + 1)) {
        int64_t v29 = *((void *)&v56 + 1);
      }
      else {
        int64_t v29 = v28;
      }
      if (v29)
      {
        memmove(__dst, __src, v29);
        if (v29 > 0)
        {
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__src, v29);
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&__dst, v29);
          int v30 = 0;
          v26 += v29;
          if (!v27) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
      else
      {
        *(void *)&long long v119 = "trim_data(const sg_vec::iterator &, const sg_vec::iterator &, size_t, const io_result_t &)::(anonymous class)::operator()(const auto &, const auto &, size_t) const [src:auto = sg_vec_ns::details::sg_vec_iterator, dst:auto = sg_vec_ns::details::sg_vec_iterator]";
        *((void *)&v119 + 1) = 121;
        int v120 = 16;
        di_log::logger<di_log::log_printer<183ul>>::logger(v121, &v119);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"Trimming: Written ", 18);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)", dest buffer_size ", 19);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)" src size ", 10);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)", trimmed size", 14);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf((uint64_t)v121);
        MEMORY[0x223C24910](v124);
      }
      *(void *)&long long v119 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/utils.cpp:180:13)]";
      *((void *)&v119 + 1) = 97;
      int v120 = 16;
      di_log::logger<di_log::log_printer<615ul>>::logger(v121, &v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"IO error with sg: ", 18);
      operator<<(&v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)" dest ", 6);
      operator<<(&v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)" returned status ", 17);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<615ul>>::~logger_buf((uint64_t)v121);
      MEMORY[0x223C24910](v124);
      int v30 = 1;
      if (!v27) {
        goto LABEL_48;
      }
LABEL_47:
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      goto LABEL_48;
    }
    sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&__src);
    int v30 = 2;
    if (v27) {
      goto LABEL_47;
    }
LABEL_48:
    if ((v30 | 2) != 2) {
      goto LABEL_54;
    }
  }
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v35, v26);
LABEL_54:
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  if ((void)v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v80);
  }
  if (v102) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v102);
  }
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
LABEL_86:
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v75 = *(void **)a1;
  unint64_t v76 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v77[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v78 = *(void *)(a1 + 48);
  long long v79 = *(_OWORD *)(a1 + 56);
  long long v80 = *(_OWORD *)(a1 + 72);
  long long v81 = *(_OWORD *)(a1 + 88);
  char v82 = *(unsigned char *)(a1 + 104);
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v83 = *(void *)(a1 + 112);
  uint64_t v84 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v85 = *(_OWORD *)(a1 + 128);
  uint64_t v86 = *v6;
  char v87 = *((unsigned char *)v6 + 8);
  sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v75, v34);
  sg_vec_ns::details::buffer_iterator::rtrim_written(&v79);
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  return v34;
}

void sub_21E32BCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

unint64_t *boost::algorithm::detail::decode_one<std::__wrap_iter<char const*>,std::back_insert_iterator<std::vector<unsigned char>>,BOOL (*)(std::__wrap_iter<char const*>,std::__wrap_iter<char const*>)>(uint64_t *a1, uint64_t a2, unint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  int v7 = 0;
  std::string v17 = a3;
  uint64_t v8 = *a1;
  char v9 = 1;
  do
  {
    char v10 = v9;
    if (a4(v8, a2))
    {
      long long v14 = 0u;
      long long v15 = 0u;
      DWORD2(v15) = -1;
      v13[0] = &unk_26CF39F48;
      v13[1] = &unk_26CF39F78;
      boost::throw_exception<boost::algorithm::not_enough_input>(v13);
    }
    int v11 = boost::algorithm::detail::hex_char_to_int<char>(*(char *)*a1);
    char v9 = 0;
    int v7 = v11 + 16 * v7;
    char v16 = v7;
    uint64_t v8 = *a1 + 1;
    *a1 = v8;
  }
  while ((v10 & 1) != 0);
  std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v17, &v16);
  return v17;
}

void sub_21E32BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::algorithm::not_enough_input::~not_enough_input((std::exception *)va);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::detail::iter_end<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void boost::throw_exception<boost::algorithm::not_enough_input>(void *a1)
{
  exception = __cxa_allocate_exception(0x30uLL);
  boost::algorithm::not_enough_input::not_enough_input((uint64_t)exception, a1);
}

void sub_21E32BF58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::not_enough_input::~not_enough_input(std::exception *this)
{
  std::exception::~exception(this);
  *(void *)(v1 + 8) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  uint64_t v1;
  uint64_t vars8;

  std::exception::~exception(this);
  *(void *)(v1 + 8) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
  JUMPOUT(0x223C249A0);
}

uint64_t boost::algorithm::detail::hex_char_to_int<char>(int a1)
{
  unsigned __int8 v1 = a1 - 48;
  if ((a1 - 48) >= 0xA)
  {
    if ((a1 - 65) > 5)
    {
      if ((a1 - 97) > 5) {
        boost::exception_detail::set_info_rv<boost::error_info<boost::algorithm::bad_char_,char>>::set<boost::algorithm::non_hex_input>();
      }
      return (a1 - 87);
    }
    else
    {
      return (a1 - 55);
    }
  }
  return v1;
}

void sub_21E32C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  boost::algorithm::non_hex_input::~non_hex_input((std::exception *)va);
  _Unwind_Resume(a1);
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, unsigned char *a2)
{
  int v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    char v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *int v4 = v13;
    v4[1] = v7;
    void v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

uint64_t boost::algorithm::not_enough_input::not_enough_input(uint64_t a1, void *a2)
{
  long long v3 = (char *)a2 + *(void *)(*a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *(void *)(a1 + 8) = &unk_26CF39F98;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v3 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = &unk_26CF39F48;
  *(void *)(a1 + 8) = &unk_26CF39F78;
  return a1;
}

uint64_t *virtual thunk to'boost::algorithm::not_enough_input::~not_enough_input(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &unk_26CF39F98;
  uint64_t v2 = (uint64_t *)(v1 + 16);
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void virtual thunk to'boost::algorithm::not_enough_input::~not_enough_input(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  JUMPOUT(0x223C249A0);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void boost::throw_exception<boost::algorithm::non_hex_input>(const boost::algorithm::non_hex_input *a1)
{
  exception = (boost::algorithm::non_hex_input *)__cxa_allocate_exception(0x30uLL);
  boost::algorithm::non_hex_input::non_hex_input(exception, a1);
}

void sub_21E32C4B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::non_hex_input::~non_hex_input(std::exception *this)
{
  std::exception::~exception(this);
  *(void *)(v1 + 8) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
}

{
  uint64_t v1;
  uint64_t vars8;

  std::exception::~exception(this);
  *(void *)(v1 + 8) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 + 16));
  JUMPOUT(0x223C249A0);
}

boost::algorithm::non_hex_input *boost::algorithm::non_hex_input::non_hex_input(boost::algorithm::non_hex_input *this, const boost::algorithm::non_hex_input *a2)
{
  long long v3 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  uint64_t v4 = *((void *)v3 + 1);
  *((void *)this + 1) = &unk_26CF39F98;
  *((void *)this + 2) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *((_OWORD *)v3 + 1);
  *((_DWORD *)this + 10) = *((_DWORD *)v3 + 8);
  *(_OWORD *)((char *)this + 24) = v5;
  *(void *)this = &unk_26CF39FE0;
  *((void *)this + 1) = &unk_26CF3A010;
  return this;
}

uint64_t *virtual thunk to'boost::algorithm::non_hex_input::~non_hex_input(void *a1)
{
  std::exception::~exception((std::exception *)((char *)a1 + *(void *)(*a1 - 24)));
  *(void *)(v1 + 8) = &unk_26CF39F98;
  uint64_t v2 = (uint64_t *)(v1 + 16);
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void virtual thunk to'boost::algorithm::non_hex_input::~non_hex_input(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::exception::~exception((std::exception *)v1);
  *((void *)v1 + 1) = &unk_26CF39F98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  JUMPOUT(0x223C249A0);
}

void boost::exception_detail::set_info_rv<boost::error_info<boost::algorithm::bad_char_,char>>::set<boost::algorithm::non_hex_input>()
{
}

void sub_21E32C8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::error_info<boost::algorithm::bad_char_,char>::clone()
{
}

void boost::error_info<boost::algorithm::bad_char_,char>::~error_info()
{
}

void boost::to_string<boost::algorithm::bad_char_,char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)__p, (const char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL));
  if (__p[0]) {
    uint64_t v4 = (char *)__p[0];
  }
  else {
    uint64_t v4 = (char *)((unint64_t)"PN5boost9algorithm9bad_char_E" & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v4);
  free(__p[0]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v14;
  }
  else {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v14.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v14, v5, 91);
  std::string v15 = v14;
  memset(&v14, 0, sizeof(v14));
  uint64_t v6 = std::string::append(&v15, "] = ", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  boost::to_string<char>((char *)(a1 + 8), __p);
  if ((v13 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v9 = v13;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  unint64_t v10 = std::string::append(&v16, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 10);
  *a2 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_21E32CB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  int status = 0;
  size_t v4 = 0;
  *(void *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

uint64_t boost::to_string<char>@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  char v9 = *a1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)&v9, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a2);
  uint64_t v5 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v6[-1] + *(void *)(v5 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C24910](&v8);
}

void sub_21E32CD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::shared_ptr[abi:ne180100]<boost::error_info<boost::algorithm::bad_char_,char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E32CE04(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::shared_ptr[abi:ne180100]<boost::error_info<boost::algorithm::bad_char_,char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::error_info<boost::algorithm::bad_char_,char> *,std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::__shared_ptr_default_delete<boost::error_info<boost::algorithm::bad_char_,char>,boost::error_info<boost::algorithm::bad_char_,char>>,std::allocator<boost::error_info<boost::algorithm::bad_char_,char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
    size_t v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)a2, v4);
    uint64_t v5 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        (***((void (****)(void **__return_ptr))v5 + 5))(__p);
        if (v15 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        if (v15 >= 0) {
          uint64_t v7 = HIBYTE(v15);
        }
        else {
          uint64_t v7 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)v6, v7);
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 1);
        if (v8)
        {
          do
          {
            char v9 = v8;
            uint64_t v8 = *(boost::exception_detail::error_info_container_impl **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            char v9 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 2);
            BOOL v10 = *(void *)v9 == (void)v5;
            uint64_t v5 = v9;
          }
          while (!v10);
        }
        uint64_t v5 = v9;
      }
      while (v9 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17, __p);
    uint64_t v11 = v15;
    long long v12 = *(_OWORD *)__p;
    *(_OWORD *)long long __p = *((_OWORD *)this + 2);
    uint64_t v15 = *((void *)this + 6);
    *((_OWORD *)this + 2) = v12;
    *((void *)this + 6) = v11;
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v17[-1] + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v17[0] = MEMORY[0x263F8C318] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x223C24910](&v19);
  }
  uint64_t result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_21E32D104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::find<boost::exception_detail::type_info_>(a1 + 8, a2);
  if ((void *)(a1 + 16) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[6];
    *a3 = result[5];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char v9 = a3;
  uint64_t v5 = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::piecewise_construct_t const&,std::tuple<boost::exception_detail::type_info_ const&>,std::tuple<>>((uint64_t **)(a1 + 8), a3, (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)v5[6];
  void v5[5] = v7;
  v5[6] = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    boost::exception_detail::error_info_container_impl::~error_info_container_impl((void **)this);
    MEMORY[0x223C249A0]();
  }
  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_21E32D3E8(_Unwind_Exception *a1)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::find<boost::exception_detail::type_info_>(uint64_t a1, uint64_t *a2)
{
  long long v3 = (void *)(a1 + 8);
  size_t v4 = std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__lower_bound<boost::exception_detail::type_info_>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4[4];
  if (*a2 != v6
    && strcmp((const char *)(*(void *)(*a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
  {
    return v3;
  }
  return v5;
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__lower_bound<boost::exception_detail::type_info_>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = v5[4];
      if (v7 == v6)
      {
        a4 = v5;
      }
      else if (strcmp((const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL)) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::piecewise_construct_t const&,std::tuple<boost::exception_detail::type_info_ const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x38uLL);
    void v7[4] = **a4;
    v7[5] = 0;
    void v7[6] = 0;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, void *a2, uint64_t *a3)
{
  size_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = v5[4];
    if (*a3 != v7)
    {
      uint64_t v8 = (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        char v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          size_t v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          size_t v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        uint64_t v5 = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

void boost::exception_detail::error_info_container_impl::~error_info_container_impl(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)(this + 1), this[2]);
}

void std::shared_ptr<boost::exception_detail::error_info_base>::shared_ptr[abi:ne180100]<boost::exception_detail::error_info_base,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E32D6F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<boost::error_info<boost::algorithm::bad_char_,char>>::shared_ptr[abi:ne180100]<boost::error_info<boost::algorithm::bad_char_,char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<boost::exception_detail::error_info_base *,std::shared_ptr<boost::exception_detail::error_info_base>::__shared_ptr_default_delete<boost::exception_detail::error_info_base,boost::exception_detail::error_info_base>,std::allocator<boost::exception_detail::error_info_base>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__emplace_unique_key_args<boost::exception_detail::type_info_,std::pair<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,std::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x38uLL);
    *((void *)v6 + 4) = *(void *)a3;
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<details::get_dummy_shared_ptr(void)::$_0 &&>>()
{
}

void std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E32D924(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C249A0](v1, 0x1000C4077774924);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *di_log::logger<di_log::log_printer<183ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<183ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3A260;
  a1[45] = &unk_26CF3A360;
  a1[46] = &unk_26CF3A388;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3A260;
  a1[45] = &unk_26CF3A2E8;
  a1[46] = &unk_26CF3A310;
  return a1;
}

void sub_21E32DAEC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3A3F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E32DBD0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3A3F8;
  di_log::logger_buf<di_log::log_printer<183ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<183ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<183ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<183ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<183ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<183ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E32E148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<183ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 183;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        std::string v14 = a2;
      }
      else {
        std::string v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 183;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

BOOL lock_free::bitmap_t::update_pair_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5 = a4 - a3 + 2;
  unint64_t v6 = ~(-1 << v5) << a3;
  if (a4 - a3 == 62) {
    unint64_t v6 = -1;
  }
  int v7 = *a5;
  int v8 = a5[1];
  if (v7 == v8)
  {
    uint64_t v9 = (atomic_ullong *)(*(void *)(a1 + 8) + 8 * a2);
    if (*a5) {
      BOOL v10 = (v6 & ~atomic_fetch_or(v9, v6)) == 0;
    }
    else {
      BOOL v10 = (atomic_fetch_and(v9, ~v6) & v6) == 0;
    }
  }
  else
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      unint64_t v12 = v5 >> 1;
      uint64_t v13 = v7 | (2 * v8);
      do
      {
        uint64_t v11 = v13 | (4 * v11);
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v14 = v11 << a3;
    uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8 * a2);
    unint64_t v16 = v15 & ~v6 | v14;
    uint64_t v17 = v15;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
    if (v17 != v15)
    {
      unint64_t v18 = ~v6;
      do
      {
        uint64_t v15 = v17;
        unint64_t v16 = v17 & v18 | v14;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 8) + 8 * a2), (unint64_t *)&v17, v16);
      }
      while (v17 != v15);
    }
    BOOL v10 = v15 == v16;
  }
  return !v10;
}

unint64_t lock_free::first_pair_match(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t lock_free::first_pair_mismatch(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2 * a4[1]) | (4 * v5);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a3 - a2 == 62) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v4) << a2;
  }
  unint64_t v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t lock_free::bitmap_t::update_bits(lock_free::bitmap_t *this, unint64_t a2, unint64_t a3, int a4)
{
  if (a2 > a3 || *((void *)this + 2) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v22, 0x16u);
  }
  unint64_t v4 = a2 >> 6;
  unint64_t v5 = a2 & 0x3F;
  uint64_t v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    uint64_t v7 = v6 - v5 + 1;
    uint64_t v8 = ~(-1 << v7) << v5;
    if (v7 == 64) {
      unint64_t v9 = -1;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v10 = *((void *)this + 1);
    if (a4)
    {
      unint64_t v11 = atomic_fetch_or((atomic_ullong *volatile)(v10 + 8 * v4), v9);
      unint64_t v5 = v9;
    }
    else
    {
      unint64_t v5 = 0;
      unint64_t v11 = atomic_fetch_and((atomic_ullong *volatile)(v10 + 8 * v4), ~v9);
    }
    LOBYTE(v5) = (v11 & v9) != v5;
  }
  else
  {
    unint64_t v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      unint64_t v5 = ~(-1 << -(char)v5) << v5;
      uint64_t v13 = *((void *)this + 1);
      if (a4)
      {
        unint64_t v14 = atomic_fetch_or((atomic_ullong *volatile)(v13 + 8 * v4), v5);
        unint64_t v15 = v5;
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v14 = atomic_fetch_and((atomic_ullong *volatile)(v13 + 8 * v4), ~v5);
      }
      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }
    if (v6 != 63)
    {
      unint64_t v16 = ~(-2 << v6);
      uint64_t v17 = *((void *)this + 1);
      if (a4)
      {
        unint64_t v18 = atomic_fetch_or((atomic_ullong *volatile)(v17 + 8 * v12), v16);
        unint64_t v19 = v16;
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v18 = atomic_fetch_and((atomic_ullong *volatile)(v17 + 8 * v12), ~v16);
      }
      if ((v18 & v16) != v19) {
        LOBYTE(v5) = 1;
      }
      --v12;
    }
    for (; v4 <= v12; ++v4)
      LOBYTE(v5) = (*((void *)this + 1) + 8 * v4 != __swp(*((_DWORD *)this + 2) + 8 * v4, (unsigned int *)(*((void *)this + 1) + 8 * v4))) | v5;
  }
  return v5 & 1;
}

void sub_21E32E720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::update_pair_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v19, 0x16u);
  }
  unint64_t v6 = a3 - 2;
  unint64_t v7 = a2 >> 6;
  uint64_t v8 = a2 & 0x3F;
  unint64_t v9 = v6 & 0x3F;
  if (a2 >> 6 == v6 >> 6)
  {
    uint64_t v10 = a2 >> 6;
    return lock_free::bitmap_t::update_pair_element(a1, v10, v8, v6 & 0x3F, a4);
  }
  else
  {
    unint64_t v12 = v6 >> 6;
    uint64_t v13 = (a2 & 0x3F) != 0 && lock_free::bitmap_t::update_pair_element(a1, v7++, v8, 62, a4);
    if (v9 <= 0x3D) {
      uint64_t v13 = lock_free::bitmap_t::update_pair_element(a1, v12--, 0, v9, a4) | v13;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 32;
    do
    {
      uint64_t v14 = *a4 | (2 * a4[1]) | (4 * v14);
      --v15;
    }
    while (v15);
    while (v7 <= v12)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      if (v13)
      {
        *(void *)(v16 + 8 * v7) = v14;
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v17 = (unsigned int *)(v16 + 8 * v7);
        uint64_t v14 = __swp(v17, v17);
        uint64_t v13 = v17 != (unsigned int *)v14;
      }
      ++v7;
    }
    return v13;
  }
}

void sub_21E32E944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t lock_free::bitmap_t::find_match_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v26, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t pair_match = lock_free::first_pair_match(v12, v10, (a3 - 2) & 0x3F, a4);
    return pair_match + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t pair_match = lock_free::first_pair_match(v14, v10, 62, a4);
    if (pair_match != 64) {
      return pair_match + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v23 = lock_free::first_pair_match(v22, 0, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2) {
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v9 << 6;
    while (((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555) == 0)
    {
      ++v9;
      v21 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
    return __clz(__rbit64((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555))
         + v21;
  }
  return v4;
}

void sub_21E32EB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t lock_free::bitmap_t::find_mismatch_bits(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || ((a3 - a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"invalid bits range ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-", 1);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v27, 0x16u);
  }
  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t pair_mismatch = lock_free::first_pair_mismatch(v12, v10, (a3 - 2) & 0x3F, a4);
    return pair_mismatch + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t pair_mismatch = lock_free::first_pair_mismatch(v14, v10, 62, a4);
    if (pair_mismatch != 64) {
      return pair_mismatch + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v9;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = -1;
  }
  uint64_t v18 = 32;
  do
  {
    uint64_t v15 = *a4 | (2 * a4[1]) | (4 * v15);
    --v18;
  }
  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v24 = lock_free::first_pair_mismatch(v23, 0, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2) {
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0);
      }
    }
  }
  else
  {
    uint64_t v20 = v9 << 6;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v9);
      unint64_t v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555;
      if (v22) {
        return __clz(__rbit64(v22)) + v20;
      }
      ++v9;
      v20 += 64;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }
  return v4;
}

void sub_21E32EDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::is_reset(lock_free::bitmap_t *this)
{
  unint64_t v1 = *((void *)this + 2) + 63;
  if (v1 < 0x40) {
    return 1;
  }
  unint64_t v3 = v1 >> 6;
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v3 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*v4) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
  }
  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t lock_free::bitmap_t::get_num_set(lock_free::bitmap_t *this)
{
  unint64_t v1 = *((void *)this + 2) + 63;
  if (v1 < 0x40) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v2 = 0;
  uint64_t v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  do
  {
    unint64_t v6 = atomic_load((unint64_t *)(*((void *)this + 1) + v4));
    unint64_t v8 = v6;
    BYTE6(v9) = 1;
    v2 += std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (unsigned char *)&v9 + 6);
    v4 += 8;
  }
  while (v5 != v4);
  return v2;
}

unint64_t lock_free::bitmap_t::get_bit(lock_free::bitmap_t *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bits in the bitmap", 19);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v5, 0x16u);
  }
  unint64_t v2 = atomic_load((unint64_t *)(*((void *)this + 1) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_21E32F004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL lock_free::bitmap_t::set_bit(lock_free::bitmap_t *this, unint64_t a2, int a3)
{
  if (*((void *)this + 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Bit ", 4);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" requested while there are only ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" bits in the bitmap", 19);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v8, 0x16u);
  }
  unint64_t v3 = 1 << a2;
  uint64_t v4 = (atomic_ullong *)(*((void *)this + 1) + 8 * (a2 >> 6));
  if (a3) {
    unint64_t v5 = atomic_fetch_or(v4, v3);
  }
  else {
    unint64_t v5 = atomic_fetch_and(v4, ~v3);
  }
  return (v5 & v3) == 0;
}

void sub_21E32F144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(a1, a2, v5);
  }
  else {
    return std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>((uint64_t *)a1, a2, v5);
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t crypto::header::header(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = 1919118949;
  int v7 = 1919118949;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig1_t", 1919118949, &v7, 1);
  *(_DWORD *)(a1 + 4) = 1634952291;
  int v7 = 1634952291;
  smart_enums::validators::value<unsigned int>((uint64_t)"sig2_t", 1634952291, &v7, 1);
  *(_DWORD *)(a1 + 8) = 2;
  int v7 = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", 2, &v7, 1);
  *(_DWORD *)(a1 + 12) = 16;
  int v7 = 16;
  smart_enums::validators::value<unsigned int>((uint64_t)"iv_size_t", 16, &v7, 1);
  *(_DWORD *)(a1 + 16) = 5;
  int v7 = 5;
  smart_enums::validators::value<unsigned int>((uint64_t)"encryption_mode", 5, &v7, 1);
  *(_DWORD *)(a1 + 20) = -2147483647;
  int v7 = -2147483647;
  smart_enums::validators::value<unsigned int>((uint64_t)"algorithm_type", -2147483647, &v7, 1);
  *(_DWORD *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 28) = 91;
  int v7 = 91;
  smart_enums::validators::value<unsigned int>((uint64_t)"prng_algorithm_type", 91, &v7, 1);
  *(_DWORD *)(a1 + 32) = 160;
  int v7 = 160;
  unint64_t v4 = (di_utils *)smart_enums::validators::value<unsigned int>((uint64_t)"prng_key_bits_size_t", 160, &v7, 1);
  *(_DWORD *)(a1 + 52) = 512;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = xmmword_21E3A3E70;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 36) = di_utils::random_uuid(v4);
  *(void *)(a1 + 44) = v5;
  return a1;
}

void crypto::header::header(crypto::header *this, Backend *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 60) = 0;
  unint64_t v3 = (*(uint64_t (**)(Backend *))(*(void *)a2 + 40))(a2);
  if (v3 < 0xC
    || (Backend::read(a2, v8, 12, v3 - 12) & 0x80000000) != 0
    || *(_DWORD *)v8 != 0x1000000
    || v9 != 1634952291
    || v10 != 1919118949)
  {
    if ((unint64_t)(*(uint64_t (**)(Backend *))(*(void *)a2 + 40))(a2) > 0x4B) {
      operator new[]();
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (*(uint64_t (**)(Backend *))(*(void *)a2 + 40))(a2);
    void *exception = &unk_26CF37F28;
    exception[1] = "crypto";
    exception[2] = 76;
    exception[3] = v5;
  }
  uint8x8_t v6 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(v6, "The image is encrypted with obsolete encoding version 1", 0xA0u);
}

void sub_21E32F924(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21E32F934()
{
  MEMORY[0x223C24980](v0, 0x1000C8077774924);
  JUMPOUT(0x21E32FA4CLL);
}

void sub_21E32F93C(_Unwind_Exception *a1)
{
}

void sub_21E32F9F8(uint64_t a1, ...)
{
  va_start(va, a1);
  std::ostringstream::~ostringstream((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x21E32FA34);
}

void sub_21E32FA54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

__n128 crypto::header::header(crypto::header *this, const char *a2)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 68) = 0;
  *(void *)((char *)this + 60) = 0;
  *(_OWORD *)this = *(_OWORD *)a2;
  __n128 result = *((__n128 *)a2 + 1);
  long long v3 = *((_OWORD *)a2 + 2);
  long long v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

char *crypto::header::write(crypto::header *this, char *a2)
{
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((_DWORD *)a2 + 4) = bswap32(*((_DWORD *)this + 4));
  *((_DWORD *)a2 + 5) = bswap32(*((_DWORD *)this + 5));
  *((_DWORD *)a2 + 6) = bswap32(*((_DWORD *)this + 6));
  *((_DWORD *)a2 + 7) = bswap32(*((_DWORD *)this + 7));
  *((_DWORD *)a2 + 8) = bswap32(*((_DWORD *)this + 8));
  *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)this + 36);
  *((_DWORD *)a2 + 13) = bswap32(*((_DWORD *)this + 13));
  *((void *)a2 + 7) = bswap64(*((void *)this + 7));
  *((void *)a2 + 8) = bswap64(*((void *)this + 8));
  *((_DWORD *)a2 + 18) = bswap32(*((_DWORD *)this + 18));
  return a2 + 76;
}

const void **crypto::header::populate_crypto_header_info(crypto::header *this, DiskImageInfo *a2)
{
  uint64_t v3 = (*(uint64_t (**)(char *))(*(void *)((char *)a2 + *(void *)(*(void *)a2 - 40)) + 16))((char *)a2 + *(void *)(*(void *)a2 - 40));
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Image contains crypto format but info class is missing EncryptionInfo", 0x16u);
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((unsigned int *)this + 6);
  if (!*(unsigned char *)(v3 + 16)) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  *(void *)(v3 + 8) = v5;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFUUIDRef v12 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFUUIDBytes *)((char *)this + 36));
  CFStringRef v7 = CFUUIDCreateString(v6, v12);
  CFStringRef v11 = v7;
  if (*(void *)(v4 + 24))
  {
    CFRelease(*(CFTypeRef *)(v4 + 24));
    CFStringRef v7 = v11;
  }
  *(void *)(v4 + 24) = v7;
  CFStringRef v11 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v11);
  return CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v12);
}

void sub_21E32FC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

crypto::public_key_header *crypto::public_key_header::public_key_header(crypto::public_key_header *this, const char *a2)
{
  v9[1] = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  LODWORD(v9[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", 0, v9, 1);
  bzero((char *)this + 48, 0x204uLL);
  LODWORD(v9[0]) = bswap32(*(_DWORD *)a2);
  crypto::public_key_header::_publicKeyHash::set_len(this, v9);
  long long v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)((char *)this + 20) = v4;
  int v5 = bswap32(*((_DWORD *)a2 + 9));
  LODWORD(v9[0]) = 42;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo", v5, v9, 1);
  *((_DWORD *)this + 9) = v5;
  int v6 = bswap32(*((_DWORD *)a2 + 10));
  v9[0] = 0x800000010000000ALL;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_padding_algo", v6, v9, 2);
  *((_DWORD *)this + 10) = v6;
  int v7 = bswap32(*((_DWORD *)a2 + 11));
  LODWORD(v9[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", v7, v9, 1);
  *((_DWORD *)this + 11) = v7;
  LODWORD(v9[0]) = bswap32(*((_DWORD *)a2 + 12));
  crypto::public_key_header::_encryptedBlob::set_len((_DWORD *)this + 12, v9);
  memcpy((char *)this + 52, a2 + 52, 0x200uLL);
  return this;
}

crypto::public_key_header *crypto::public_key_header::public_key_header(crypto::public_key_header *this, const crypto::format *a2, __SecKey **a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0x2A00000000;
  LODWORD(__p) = 42;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo", 42, &__p, 1);
  *((_DWORD *)this + 10) = 10;
  long long __p = (void *)0x800000010000000ALL;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_padding_algo", 10, &__p, 2);
  *((_DWORD *)this + 11) = 0;
  LODWORD(__p) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"public_key_crypto_algo_mode", 0, &__p, 1);
  bzero((char *)this + 48, 0x204uLL);
  crypto::format::make_key_blob(a2, &__p);
  CFErrorRef error = 0;
  CFDataRef v23 = SecKeyCopyExternalRepresentation(*a3, &error);
  if (!v23)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &unk_26CF39EE0;
    unint64_t v14 = std::generic_category();
    exception[1] = Code;
    exception[2] = v14;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Key from the certificate is not exportable.";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v23, (uint64_t *)&theData);
  BytePtr = CFDataGetBytePtr(theData);
  CC_LONG Length = CFDataGetLength(theData);
  CC_SHA1(BytePtr, Length, (unsigned __int8 *)this + 4);
  LODWORD(plaintext) = 20;
  crypto::public_key_header::_publicKeyHash::set_len(this, &plaintext);
  CFDataRef v20 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)__p, v26 - (unsigned char *)__p);
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v20, (uint64_t *)&plaintext);
  uint8x8_t v8 = *a3;
  CFStringRef crypto_algo_and_padding = (const __CFString *)crypto::public_key_header::get_crypto_algo_and_padding(this);
  CFDataRef v20 = SecKeyCreateEncryptedData(v8, crypto_algo_and_padding, plaintext, &error);
  if (!v20)
  {
    uint64_t v15 = __cxa_allocate_exception(0x40uLL);
    unsigned int v16 = CFErrorGetCode(error);
    void *v15 = &unk_26CF39EE0;
    uint64_t v17 = std::generic_category();
    v15[1] = v16;
    void v15[2] = v17;
    *((unsigned char *)v15 + 24) = 0;
    *((unsigned char *)v15 + 48) = 0;
    void v15[7] = "Failed to encrypt data using public key from certificate.";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v20, (uint64_t *)&v19);
  int v18 = CFDataGetLength(v19);
  crypto::public_key_header::_encryptedBlob::set_len((_DWORD *)this + 12, &v18);
  CFDataRef v10 = v19;
  v28.length = CFDataGetLength(v19);
  v28.location = 0;
  CFDataGetBytes(v10, v28, (UInt8 *)this + 52);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v19);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&plaintext);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&theData);
  if (__p)
  {
    unint64_t v26 = __p;
    operator delete(__p);
  }
  return this;
}

void sub_21E330110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  __cxa_free_exception(v18);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a13);
  CFAutoRelease<__CFData const*>::~CFAutoRelease(&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **crypto::format::make_key_blob@<X0>(crypto::format *this@<X0>, void *a2@<X8>)
{
  __n128 result = (void **)std::vector<std::byte>::vector(a2, *((void *)this + 1) + *((void *)this + 4) - (*(void *)this + *((void *)this + 3)) + 5);
  long long v4 = (char *)*result;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = v5 - *(void *)this;
  if (v5 != *(void *)this) {
    __n128 result = (void **)memmove(*result, *(const void **)this, v5 - *(void *)this);
  }
  int v7 = &v4[v6];
  uint8x8_t v8 = (unsigned char *)*((void *)this + 3);
  int v9 = (unsigned char *)*((void *)this + 4);
  int64_t v10 = v9 - v8;
  if (v9 != v8) {
    __n128 result = (void **)memmove(v7, v8, v9 - v8);
  }
  strcpy(&v7[v10], "CKIE");
  return result;
}

uint64_t *makeCFAutoReleaseThrowOnNull<__CFData const*>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    long long v4 = std::generic_category();
    exception[1] = 22;
    exception[2] = v4;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }
  return result;
}

void sub_21E3302CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
}

_DWORD *crypto::public_key_header::_publicKeyHash::set_len(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_publicKeyHash";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

uint64_t crypto::public_key_header::get_crypto_algo_and_padding(crypto::public_key_header *this)
{
  if (*((_DWORD *)this + 9) != 42) {
    goto LABEL_7;
  }
  int v1 = *((_DWORD *)this + 10);
  if (v1 == 10)
  {
    uint64_t v2 = MEMORY[0x263F17350];
    return *(void *)v2;
  }
  if (v1 != -2147483647)
  {
LABEL_7:
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unsupported public key algorithm.", 0xA1u);
  }
  uint64_t v2 = MEMORY[0x263F17340];
  return *(void *)v2;
}

_DWORD *crypto::public_key_header::_encryptedBlob::set_len(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_encryptedBlob";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this, const char *a2)
{
  v12[1] = *MEMORY[0x263EF8340];
  long long v4 = (_DWORD *)((char *)this + 12);
  uint64_t v5 = (_DWORD *)((char *)this + 48);
  uint64_t v6 = (_DWORD *)((char *)this + 100);
  bzero(this, 0x268uLL);
  int v7 = bswap32(*(_DWORD *)a2);
  LODWORD(v12[0]) = 103;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_algorithm_t", v7, v12, 1);
  *(_DWORD *)this = v7;
  int v8 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v12[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_prng_algorithm_t", v8, v12, 1);
  *((_DWORD *)this + 1) = v8;
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 2));
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 3));
  crypto::password_header::_salt::set_len(v4, v12);
  long long v9 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v9;
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 12));
  crypto::password_header::_blob_encryption_iv::set_len(v5, v12);
  long long v10 = *(_OWORD *)(a2 + 68);
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)((char *)this + 68) = v10;
  *((_DWORD *)this + 21) = bswap32(*((_DWORD *)a2 + 21));
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 22));
  v12[0] = 0x8000000100000011;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_algo", (int)v5, v12, 2);
  *((_DWORD *)this + 22) = v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 23));
  LODWORD(v12[0]) = 7;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_padding_algo", (int)v5, v12, 1);
  *((_DWORD *)this + 23) = v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 24));
  LODWORD(v12[0]) = 6;
  smart_enums::validators::value<unsigned int>((uint64_t)"crypto_mode", (int)v5, v12, 1);
  *((_DWORD *)this + 24) = v5;
  LODWORD(v12[0]) = bswap32(*((_DWORD *)a2 + 25));
  crypto::password_header::_blob::set_len(v6, v12);
  memcpy((char *)this + 104, a2 + 104, 0x200uLL);
  return this;
}

char *crypto::password_header::write(crypto::password_header *this, char *a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)this);
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  long long v3 = *((_OWORD *)this + 2);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 1);
  *((_OWORD *)a2 + 2) = v3;
  *((_DWORD *)a2 + 12) = bswap32(*((_DWORD *)this + 12));
  long long v4 = *(_OWORD *)((char *)this + 52);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)((char *)this + 68);
  *(_OWORD *)(a2 + 52) = v4;
  *((_DWORD *)a2 + 21) = bswap32(*((_DWORD *)this + 21));
  *((_DWORD *)a2 + 22) = bswap32(*((_DWORD *)this + 22));
  *((_DWORD *)a2 + 23) = bswap32(*((_DWORD *)this + 23));
  *((_DWORD *)a2 + 24) = bswap32(*((_DWORD *)this + 24));
  *((_DWORD *)a2 + 25) = bswap32(*((_DWORD *)this + 25));
  memcpy(a2 + 104, (char *)this + 104, 0x200uLL);
  return a2 + 616;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this)
{
  v3[1] = *MEMORY[0x263EF8340];
  *(_DWORD *)this = 103;
  LODWORD(v3[0]) = 103;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_algorithm_t", 103, v3, 1);
  *((_DWORD *)this + 1) = 0;
  LODWORD(v3[0]) = 0;
  smart_enums::validators::value<unsigned int>((uint64_t)"key_derivation_prng_algorithm_t", 0, v3, 1);
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)((char *)this + 84) = 0x11000000C0;
  v3[0] = 0x8000000100000011;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_algo", 17, v3, 2);
  *((_DWORD *)this + 23) = 7;
  LODWORD(v3[0]) = 7;
  smart_enums::validators::value<unsigned int>((uint64_t)"wrap_key_crypto_padding_algo", 7, v3, 1);
  *((_DWORD *)this + 24) = 6;
  LODWORD(v3[0]) = 6;
  smart_enums::validators::value<unsigned int>((uint64_t)"crypto_mode", 6, v3, 1);
  bzero((char *)this + 100, 0x204uLL);
  LODWORD(v3[0]) = 20;
  crypto::password_header::_salt::set_len((_DWORD *)this + 3, v3);
  LODWORD(v3[0]) = 8;
  crypto::password_header::_blob_encryption_iv::set_len((_DWORD *)this + 12, v3);
  crypto::generate_random_bytes((crypto::password_header *)((char *)this + 16), *((unsigned int *)this + 3));
  crypto::generate_random_bytes((crypto::password_header *)((char *)this + 52), *((unsigned int *)this + 12));
  return this;
}

_DWORD *crypto::password_header::_salt::set_len(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_salt";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

_DWORD *crypto::password_header::_blob_encryption_iv::set_len(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x21u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_blob_encryption_iv";
    exception[2] = "field size too large";
  }
  *__n128 result = *a2;
  return result;
}

uint64_t crypto::generate_random_bytes(crypto *this, size_t a2)
{
  uint64_t result = CCRandomGenerateBytes(this, a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"random generation failed with err code ", 39);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v4, 0x9Au);
  }
  return result;
}

void sub_21E330A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t crypto::password_header::get_derived_key_encryption_algorithm(crypto::password_header *this)
{
  int v1 = *((_DWORD *)this + 22);
  if (v1 == -2147483647) {
    return 0;
  }
  if (v1 != 17)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Unsupported key decryption algo", 31);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v4, 0xA1u);
  }
  return 2;
}

void sub_21E330AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t crypto::keys::generate_derivation_key@<X0>(crypto::keys *this@<X0>, const crypto::password_header *a2@<X1>, uint8_t **a3@<X8>)
{
  unint64_t v5 = *((unsigned int *)this + 21);
  if ((v5 & 7) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "crypto_format: key size isn't a multiple of 8", 0x16u);
  }
  char v15 = 0;
  std::vector<std::byte>::vector(a3, v5 >> 3, &v15);
  size_t v8 = strlen((const char *)a2);
  uint64_t result = CCKeyDerivationPBKDF(2u, (const char *)a2, v8, (const uint8_t *)this + 16, *((unsigned int *)this + 3), 1u, *((_DWORD *)this + 2), *a3, a3[1] - *a3);
  unsigned int v10 = result;
  if (result)
  {
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &unk_26CF39EE0;
    unint64_t v14 = std::generic_category();
    v13[1] = v10;
    void v13[2] = v14;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "crypto_format: Can't derive key";
  }
  return result;
}

void sub_21E330C60(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *crypto::password_header::_blob::set_len(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x201u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_blob";
    exception[2] = "field size too large";
  }
  *uint64_t result = *a2;
  return result;
}

crypto::password_header *crypto::password_header::password_header(crypto::password_header *this, const crypto::format *a2, const char *a3)
{
  uint64_t v6 = crypto::password_header::password_header(this);
  LODWORD(v11[0]) = 8;
  crypto::password_header::_blob_encryption_iv::set_len((_DWORD *)v6 + 12, v11);
  size_t v7 = strlen(a3);
  *((_DWORD *)this + 2) = CCCalibratePBKDF(2u, v7, *((unsigned int *)this + 3), 1u, (unint64_t)*((unsigned int *)this + 21) >> 3, 0x64u);
  crypto::format::make_key_blob(a2, &v15);
  size_t dataOutMoved = 0;
  crypto::keys::generate_derivation_key(this, (const crypto::password_header *)a3, &v12);
  CCAlgorithm derived_key_encryption_algorithm = crypto::password_header::get_derived_key_encryption_algorithm(this);
  LODWORD(a3) = CCCrypt(0, derived_key_encryption_algorithm, 1u, v12, v13 - v12, (char *)this + 52, v15, v16 - (unsigned char *)v15, (char *)this + 104, 0x200uLL, &dataOutMoved);
  bzero(v12, v13 - v12);
  if (a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Image key encoding failed with err code ", 40);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v11, 0x9Au);
  }
  LODWORD(v11[0]) = dataOutMoved;
  crypto::password_header::_blob::set_len((_DWORD *)this + 25, v11);
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    unsigned int v16 = v15;
    operator delete(v15);
  }
  return this;
}

void sub_21E330E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  size_t v7 = *(void **)(v5 - 88);
  if (v7)
  {
    *(void *)(v5 - 80) = v7;
    operator delete(v7);
  }
  size_t v8 = *(void **)(v5 - 56);
  if (v8)
  {
    *(void *)(v5 - 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

crypto::auth_table_entry *crypto::auth_table_entry::auth_table_entry(crypto::auth_table_entry *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  int v4 = bswap32(*(_DWORD *)a2);
  long long v6 = xmmword_21E3A3E80;
  int v7 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", v4, &v6, 5);
  *(_DWORD *)this = v4;
  *(void *)((char *)this + 4) = bswap64(*(void *)(a2 + 4));
  *(void *)((char *)this + 12) = bswap64(*(void *)(a2 + 12));
  return this;
}

void crypto::keys::generate_password_wrapped_key(const crypto::password_header *a1@<X1>, crypto::password_header *a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  size_t __sz = 0;
  crypto::keys::generate_derivation_key(a1, a2, (uint8_t **)&__p);
  CCAlgorithm derived_key_encryption_algorithm = crypto::password_header::get_derived_key_encryption_algorithm(a1);
  unsigned int v7 = CCCrypt(1u, derived_key_encryption_algorithm, 1u, __p, v11 - (unsigned char *)__p, (char *)a1 + 52, (char *)a1 + 104, *((unsigned int *)a1 + 25), __src, *((unsigned int *)a1 + 25), &__sz);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    long long v9 = std::generic_category();
    exception[1] = v7;
    exception[2] = v9;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't decrypt wrapped key";
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::byte>::reserve(a3, __sz);
  std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)a3, (char *)*a3, __src, &__src[__sz], __sz);
  if (__p)
  {
    CFStringRef v11 = __p;
    operator delete(__p);
  }
}

void sub_21E331110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unsigned int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double crypto::keys::generate_base_key@<D0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  if (!crypto::keys::verify_cookie(a1, a2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "crypto_format: Cookie differs", 0x23u);
  }
  long long v6 = *a2;
  size_t v7 = (unint64_t)*(unsigned int *)(a1 + 24) >> 3;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(&v17, v6, (uint64_t)v6 + v7, v7);
  unint64_t v8 = *(unsigned int *)(a1 + 24);
  long long v9 = (char *)*a2 + (v8 >> 3);
  uint64_t v10 = (*(_DWORD *)(a1 + 32) + v8) >> 3;
  uint64_t v11 = (uint64_t)*a2 + v10;
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(&v15, v9, v11, v10 - (v8 >> 3));
  *(_OWORD *)a3 = v17;
  *(void *)(a3 + 16) = v18;
  double result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  *(void *)(a3 + 40) = v16;
  return result;
}

void sub_21E33123C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL crypto::keys::verify_cookie(uint64_t a1, void *a2)
{
  uint64_t v2 = ((*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24)) >> 3) + 5;
  if (a2[1] - *a2 != v2) {
    return 0;
  }
  uint64_t v3 = *a2 + v2;
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 4;
  LODWORD(v6.__r_.__value_.__l.__data_) = *(_DWORD *)(v3 - 5);
  v6.__r_.__value_.__s.__data_[4] = 0;
  BOOL v4 = std::string::compare(&v6, "CKIE") == 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4;
}

void crypto::keys::generate_password_base_key(crypto::keys *this, Backend *a2, const crypto::header *a3, unint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a5 == 616) {
    operator new[]();
  }
  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF encryption: password header size mismatch", 0x16u);
}

void sub_21E3314A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x223C24980](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t crypto::keys::keys(uint64_t a1, uint64_t a2, uint64_t *a3, __SecKey *a4, uint64_t a5)
{
  long long v9 = (void *)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  CFErrorRef error = 0;
  *(void *)&long long v22 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)(a5 + 52), *(unsigned int *)(a5 + 48));
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v22, (uint64_t *)&v28);
  CFStringRef crypto_algo_and_padding = (const __CFString *)crypto::public_key_header::get_crypto_algo_and_padding((crypto::public_key_header *)a5);
  CFDataRef v27 = SecKeyCreateDecryptedData(a4, crypto_algo_and_padding, v28, &error);
  if (!v27)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *exception = &unk_26CF39EE0;
    CFDataRef v20 = std::generic_category();
    exception[1] = Code;
    exception[2] = v20;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "Error while decrypting data using keychain";
  }
  makeCFAutoReleaseThrowOnNull<__CFData const*>((uint64_t *)&v27, (uint64_t *)&v26);
  uint64_t v11 = *a3;
  CFDataCopyToVector(v26, 0, 0, (unint64_t *)__p);
  v12.n128_f64[0] = crypto::keys::generate_base_key(v11, (const void **)__p, (uint64_t)&v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v13;
  if (v14) {
    MEMORY[0x223C249A0](v14, 0x1000C4015A9971DLL, v12);
  }
  long long v15 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v15;
    operator delete(v15);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v22;
  *(void *)(a1 + 16) = v23;
  uint64_t v16 = *(void **)(a1 + 24);
  if (v16)
  {
    *(void *)(a1 + 32) = v16;
    operator delete(v16);
    *long long v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = v24;
  *(void *)(a1 + 40) = v25;
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v26);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v28);
  return a1;
}

void sub_21E3316D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v20);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)(v22 - 64));
  long long v24 = *(void **)(v19 + 56);
  if (v24)
  {
    *(void *)(v19 + 64) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void *)(v19 + 48);
  *(void *)(v19 + 48) = 0;
  if (v25) {
    MEMORY[0x223C249A0](v25, 0x1000C4015A9971DLL);
  }
  unint64_t v26 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 32) = v26;
    operator delete(v26);
  }
  CFDataRef v27 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<std::byte>,std::vector<std::byte>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void crypto::keys::keys(_OWORD *a1)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new[]();
}

void sub_21E331AD8()
{
  __cxa_end_catch();
  std::tuple<std::vector<std::byte>,std::vector<std::byte>>::~tuple((uint64_t)&v0);
  JUMPOUT(0x21E331B0CLL);
}

void sub_21E331AFC()
{
}

__n128 crypto::keys::keys(void *a1, uint64_t a2, __n128 *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  uint64_t v5 = *a4;
  *a4 = 0;
  a1[6] = v5;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return result;
}

const void **crypto::format::populate_crypto_info(crypto::header **this, DiskImageInfo *a2)
{
  return crypto::header::populate_crypto_header_info(this[6], a2);
}

uint64_t crypto::format::aes_context::aes_context(uint64_t a1, CCOperation a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = a1 + 24;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(void *)(v10 + 24) = a5;
  *(void *)(v10 + 32) = a4;
  CCCryptorStatus v11 = CCCryptorCreate(a2, 0, 0, *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3, 0, (CCCryptorRef *)(v10 - 16));
  if (v11)
  {
    unsigned int v13 = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &unk_26CF39EE0;
    long long v15 = std::generic_category();
    exception[1] = v13;
    exception[2] = v15;
    *((unsigned char *)exception + 24) = 0;
    *((unsigned char *)exception + 48) = 0;
    exception[7] = "crypto_format: Can't initialize aes cryptor";
  }
  *(unsigned char *)a1 = 1;
  return a1;
}

void sub_21E331CEC(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void crypto::format::aes_context::~aes_context(CCCryptorRef *this)
{
  if (*(unsigned char *)this) {
    CCCryptorRelease(this[1]);
  }
  uint64_t v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
}

uint64_t crypto::format::format(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v3 = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v3;
  std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>(a1 + 24, &v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  return a1;
}

void sub_21E331E0C(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v5) {
    MEMORY[0x223C249A0](v5, 0x1000C4015A9971DLL);
  }
  std::string v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t crypto::format::format(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4, __SecKey *a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  CFDataRef v27 = a5;
  long long v9 = (unint64_t *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v10;
  unint64_t v11 = (unint64_t)*(unsigned int *)(v10 + 24) >> 3;
  __n128 v12 = *(crypto **)a1;
  unsigned int v13 = *(char **)(a1 + 8);
  if (v11 <= v13 - (char *)v12)
  {
    if (v11 < v13 - (char *)v12)
    {
      unsigned int v13 = (char *)v12 + v11;
      *(void *)(a1 + 8) = (char *)v12 + v11;
    }
  }
  else
  {
    std::vector<std::byte>::__append((unint64_t *)a1, v11 - (v13 - (char *)v12));
    __n128 v12 = *(crypto **)a1;
    unsigned int v13 = *(char **)(a1 + 8);
  }
  crypto::generate_random_bytes(v12, v13 - (char *)v12);
  unint64_t v15 = (unint64_t)*(unsigned int *)(*(void *)(a1 + 48) + 32) >> 3;
  uint64_t v16 = *(crypto **)(a1 + 24);
  long long v17 = *(char **)(a1 + 32);
  if (v15 <= v17 - (char *)v16)
  {
    if (v15 < v17 - (char *)v16)
    {
      long long v17 = (char *)v16 + v15;
      *(void *)(a1 + 32) = (char *)v16 + v15;
    }
  }
  else
  {
    std::vector<std::byte>::__append(v9, v15 - (v17 - (char *)v16));
    uint64_t v16 = *(crypto **)(a1 + 24);
    long long v17 = *(char **)(a1 + 32);
  }
  crypto::generate_random_bytes(v16, v17 - (char *)v16);
  std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>((uint64_t)v9, v28);
  long long v18 = *(_OWORD *)v28;
  *(_OWORD *)CFDataRef v28 = 0uLL;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*(void *)&v28[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v28[8]);
    }
  }
  long long __p = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  if (a4)
  {
    crypto::password_header::password_header((crypto::password_header *)v28, (const crypto::format *)a1, a4);
    unint64_t v25 = std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::password_header>((uint64_t *)&__p, (uint64_t)v28);
  }
  if (a5)
  {
    crypto::public_key_header::public_key_header((crypto::public_key_header *)v28, (const crypto::format *)a1, &v27);
    unint64_t v20 = v25;
    if (v25 >= v26)
    {
      uint64_t v22 = std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::public_key_header>((uint64_t *)&__p, (uint64_t)v28);
    }
    else
    {
      *(_DWORD *)(v25 + 32) = 0;
      *(_OWORD *)unint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_DWORD *)unint64_t v20 = *(_DWORD *)v28;
      long long v21 = *(_OWORD *)&v28[4];
      *(_OWORD *)(v20 + 20) = v29;
      *(_OWORD *)(v20 + 4) = v21;
      *(void *)(v20 + 36) = v30;
      *(_DWORD *)(v20 + 44) = v31;
      bzero((void *)(v20 + 48), 0x204uLL);
      *(_DWORD *)(v20 + 48) = v32;
      memcpy((void *)(v20 + 52), v33, 0x200uLL);
      *(_DWORD *)(v20 + 616) = 1;
      uint64_t v22 = v20 + 620;
    }
    unint64_t v25 = v22;
  }
  crypto::format::write_header_and_keys(a1, a3, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v25 = (unint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_21E332158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v10 + 64);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = 0;
  if (v14) {
    MEMORY[0x223C249A0](v14, 0x1000C4015A9971DLL);
  }
  unint64_t v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void crypto::format::write_header_and_keys(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(*(void *)(a1 + 48) + 72) = 1496311187 * v6;
  uint64_t v29 = 76;
  unint64_t v7 = 0xBDEF7BDEF7BDEF7CLL * v6 + 76;
  unint64_t v28 = v7;
  total_entries_std::string::size_type size = crypto::format::get_total_entries_size(a1, a3);
  std::vector<char>::vector(&v27, total_entries_size + v7);
  crypto::header::write(*(crypto::header **)(a1 + 48), v27.__begin_);
  uint64_t v9 = *a3;
  for (uint64_t i = a3[1]; v9 != i; v9 += 620)
  {
    long long v21 = &v29;
    uint64_t v22 = (std::__shared_weak_count *)&v28;
    uint64_t v23 = &v27;
    uint64_t v11 = *(unsigned int *)(v9 + 616);
    if (v11 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v30 = &v21;
    ((void (*)(uint64_t ***, uint64_t))off_26CF3A5C8[v11])(&v30, v9);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) < *(void *)(*(void *)(a1 + 48) + 64))
  {
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    if (v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &unk_26CF39EE0;
      unint64_t v20 = std::generic_category();
      exception[1] = v12;
      exception[2] = v20;
      *((unsigned char *)exception + 24) = 0;
      *((unsigned char *)exception + 48) = 0;
      exception[7] = "Failed truncating crypto header";
    }
  }
  std::vector<char>::pointer begin = v27.__begin_;
  std::vector<char>::pointer end = v27.__end_;
  unint64_t v15 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  long long v21 = (uint64_t *)begin;
  uint64_t v22 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (std::vector<char> *)(end - begin);
  uint64_t v24 = 0;
  int64_t v25 = end - begin;
  char v26 = 0;
  unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)a2 + 80))(a2, &v21);
  if (v23 != (std::vector<char> *)(int)v16)
  {
    long long v17 = __cxa_allocate_exception(0x40uLL);
    *long long v17 = &unk_26CF39EE0;
    long long v18 = std::generic_category();
    v17[1] = v16;
    v17[2] = v18;
    *((unsigned char *)v17 + 24) = 0;
    *((unsigned char *)v17 + 48) = 0;
    v17[7] = "Failed writing crypto header";
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
}

void sub_21E3324B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t crypto::format::get_total_entries_size(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  int v4 = 0;
  do
  {
    uint64_t v5 = *(unsigned int *)(v2 + 616);
    if (v5 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    uint64_t v8 = &v7;
    v4 += ((uint64_t (*)(char **, uint64_t))off_26CF3A5B8[v5])(&v8, v2);
    v2 += 620;
  }
  while (v2 != v3);
  return v4;
}

uint64_t crypto_format_backend::crypt_chunk(crypto_format_backend *this, crypto::format::aes_context *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a4;
  uint64_t v9 = 0;
  unint64_t v10 = *(unsigned int *)(*(void *)(*((void *)this + 5) + 48) + 52);
  while (1)
  {
    unsigned int v11 = crypto::format::aes_context::crypt(a2, (a5 + v9) / v10, &a3[v9], &a3[v9], 1);
    if (v11) {
      break;
    }
    v9 += v10;
    if (!--v6) {
      return 0;
    }
  }
  int v13 = v11;
  *(void *)&long long v14 = "crypto_format_backend::crypt_chunk(crypto::format::aes_context &, char *, size_t, uint64_t)";
  *((void *)&v14 + 1) = 34;
  int v15 = 16;
  di_log::logger<di_log::log_printer<690ul>>::logger(v16, &v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Crypto operation on data of ", 28);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" failed with ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf((uint64_t)v16);
  MEMORY[0x223C24910](&v18);
  if (v13 < 0) {
    return v13;
  }
  else {
    return -v13;
  }
}

void sub_21E3326C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<690ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

crypto *crypto::format::aes_context::crypt(crypto::format::aes_context *this, unsigned int a2, const void *a3, void *a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  macOut[0] = 0;
  macOut[1] = 0;
  int v17 = 0;
  unint64_t v10 = (const void *)*((void *)this + 7);
  LODWORD(v13) = bswap32(a2);
  memcpy(&__dst, v10, sizeof(__dst));
  CCHmacUpdate(&__dst, &v13, 4uLL);
  CCHmacFinal(&__dst, macOut);
  CCCryptorStatus v11 = CCCryptorReset(*((CCCryptorRef *)this + 1), macOut);
  if (v11)
  {
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    di_log::logger<di_log::log_printer<564ul>>::logger(&__dst, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"CommonCryptoReset @ ", 20);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf((uint64_t)&__dst);
  }
  else
  {
    CCCryptorStatus v11 = CCCryptorUpdate(*((CCCryptorRef *)this + 1), a3, *((void *)this + 6) * a5, a4, *((void *)this + 6) * a5, 0);
    if (!v11) {
      return 0;
    }
    *(void *)&long long v13 = "crypto::format::aes_context::crypt(uint32_t, const void *, void *, size_t)";
    *((void *)&v13 + 1) = 34;
    int v14 = 16;
    di_log::logger<di_log::log_printer<578ul>>::logger(&__dst, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"CommonCryptoUpdate @ ", 21);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)"/", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst.ctx[90], (uint64_t)" returned ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf((uint64_t)&__dst);
  }
  MEMORY[0x223C24910](&__dst.ctx[92]);
  if (v11 < 0) {
    return (crypto *)v11;
  }
  else {
    return (crypto *)-v11;
  }
}

void sub_21E332940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<578ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<690ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<690ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3AA30;
  a1[45] = &unk_26CF3AB30;
  a1[46] = &unk_26CF3AB58;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3AA30;
  a1[45] = &unk_26CF3AAB8;
  a1[46] = &unk_26CF3AAE0;
  return a1;
}

void sub_21E332A74(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  return a1;
}

void crypto_format_backend::crypt(crypt *this, crypto::format::aes_context *a2, char *a3, unint64_t a4, uint64_t a5)
{
  if (a4 >= 0x21 && (int v10 = *(_DWORD *)(*(void *)(*((void *)this + 5) + 48) + 52), qos_class_self() > 0x14))
  {
    unsigned int v13 = 0;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN21crypto_format_backend5cryptERN6crypto6format11aes_contextEPcmy_block_invoke;
    block[3] = &__block_descriptor_tmp_6;
    block[4] = this;
    block[5] = a4;
    block[6] = a2;
    block[7] = a3;
    int v12 = v10;
    block[8] = a5;
    block[9] = &v13;
    dispatch_apply((a4 + 31) >> 5, 0, block);
    atomic_load(&v13);
  }
  else
  {
    crypto_format_backend::crypt_chunk(this, a2, a3, a4, a5);
  }
}

void ___ZN21crypto_format_backend5cryptERN6crypto6format11aes_contextEPcmy_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 32 * a2;
  int v4 = *(crypto_format_backend **)(a1 + 32);
  if ((unint64_t)(*(void *)(a1 + 40) - 32 * a2) >= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 40) - 32 * a2;
  }
  crypto::format::aes_context::aes_context((uint64_t)v7, *(_DWORD *)(*(void *)(a1 + 48) + 16), *(void *)(a1 + 48) + 24, *(void *)(*(void *)(a1 + 48) + 56), *(void *)(*(void *)(a1 + 48) + 48));
  unsigned int v6 = crypto_format_backend::crypt_chunk(v4, (crypto::format::aes_context *)v7, (char *)(*(void *)(a1 + 56) + v3 * *(unsigned int *)(a1 + 80)), v5, v3 * *(unsigned int *)(a1 + 80) + *(void *)(a1 + 64));
  if (v6) {
    atomic_store(v6, *(unsigned int **)(a1 + 72));
  }
  crypto::format::aes_context::~aes_context(v7);
}

void sub_21E332C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CCCryptorRef a9)
{
}

void crypto_format_backend::read_aligned(crypto_format_backend *this, char *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = *(void *)(*((void *)this + 5) + 48);
    uint64_t v9 = *(unsigned int *)(v8 + 52);
    if (*((unsigned char *)this + 192)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(void *)(v8 + 64);
    }
    if ((Backend::read(*((Backend **)this + 3), a2, v9 * a3, v10 + a4) & 0x80000000) != 0)
    {
      *(void *)&long long v11 = "crypto_format_backend::read_aligned(char *, ssize_t, uint64_t)";
      *((void *)&v11 + 1) = 35;
      int v12 = 16;
      di_log::logger<di_log::log_printer<738ul>>::logger(v13, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Crypto couldn't read from inner backend @ ", 42);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf((uint64_t)v13);
      MEMORY[0x223C24910](&v15);
    }
    else
    {
      crypto_format_backend::crypt(this, (crypto_format_backend *)((char *)this + 120), a2, a3, a4);
    }
  }
}

void sub_21E332E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<738ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<738ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<738ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3AC50;
  a1[45] = &unk_26CF3AD50;
  a1[46] = &unk_26CF3AD78;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3AC50;
  a1[45] = &unk_26CF3ACD8;
  a1[46] = &unk_26CF3AD00;
  return a1;
}

void sub_21E332F28(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  return a1;
}

void crypto_format_backend::read(crypto_format_backend *this, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v5 = (uint64_t)a2[2];
  int v4 = a2[3];
  uint64_t v6 = *(unsigned int *)(*(void *)(*((void *)this + 5) + 48) + 52);
  uint64_t v7 = (unint64_t)v4 / v6 * v6;
  unint64_t v8 = (unint64_t)v4 % v6;
  if ((unint64_t)v4 % v6)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, (unint64_t)v4 / v6 * v6);
    if (v10) {
      return;
    }
    unint64_t v11 = v8;
    if (v5 >= (uint64_t)(v6 - v8)) {
      size_t v12 = v6 - v8;
    }
    else {
      size_t v12 = v5;
    }
    memcpy(v3, (const void *)(*((void *)this + 23) + v11), v12);
    v5 -= v12;
    v3 += v12;
    v7 += v6;
  }
  crypto_format_backend::read_aligned(this, v3, v5 / v6, v7);
  if (!v9 && v5 % v6)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v5 - v5 % v6 + v7);
    if (!v13) {
      memcpy(&v3[v5 / v6 * v6], *((const void **)this + 23), v5 % v6);
    }
  }
}

uint64_t crypto_format_backend::write_aligned(crypto_format_backend *this, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*((void *)this + 5) + 48);
  if (*((unsigned char *)this + 192)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(unsigned int *)(v8 + 52);
  crypto_format_backend::crypt(this, (crypto_format_backend *)((char *)this + 56), a2, a3, a4);
  uint64_t v12 = v11;
  if (!v11)
  {
    uint64_t v13 = Backend::write(*((Backend **)this + 3), a2, v10 * a3, v9 + a4);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v12 = v13;
      *(void *)&long long v15 = "crypto_format_backend::write_aligned(char *, ssize_t, uint64_t)";
      *((void *)&v15 + 1) = 36;
      int v16 = 16;
      di_log::logger<di_log::log_printer<806ul>>::logger(v17, &v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Crypto couldn't write to inner backend @ ", 41);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"/", 1);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf((uint64_t)v17);
      MEMORY[0x223C24910](&v19);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

void sub_21E3331EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<806ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<806ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<806ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3AE70;
  a1[45] = &unk_26CF3AF70;
  a1[46] = &unk_26CF3AF98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3AE70;
  a1[45] = &unk_26CF3AEF8;
  a1[46] = &unk_26CF3AF20;
  return a1;
}

void sub_21E333304(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  return a1;
}

void crypto_format_backend::write(crypto_format_backend *this, uint64_t a2)
{
  int v4 = *(char **)a2;
  int64_t v6 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  int64_t v7 = *(unsigned int *)(*(void *)(*((void *)this + 5) + 48) + 52);
  uint64_t v8 = v5 / v7 * v7;
  unint64_t v9 = v5 % v7;
  if (v5 % v7)
  {
    crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v5 / v7 * v7);
    if (v11) {
      return;
    }
    uint64_t v12 = &v4[v9];
    size_t v13 = v6 >= (uint64_t)(v7 - v9) ? v7 - v9 : v6;
    memcpy(*((void **)this + 23), v12, v13);
    if (crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8)) {
      return;
    }
    v6 -= v13;
    v4 += v13;
    v8 += v13;
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v10 = v6 / v7;
    if (crypto_format_backend::write_aligned(this, v4, v6 / v7, v8)) {
      return;
    }
    v4 += v10 * v7;
    v8 += v10 * v7;
    v6 %= v7;
    goto LABEL_5;
  }
  if (v6 < v7)
  {
LABEL_5:
    if (v6)
    {
      crypto_format_backend::read_aligned(this, *((char **)this + 23), 1uLL, v8);
      if (!v15)
      {
        memcpy(*((void **)this + 23), v4, v6);
        crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8);
      }
    }
    return;
  }
  uint64_t v14 = 0;
  while (1)
  {
    memcpy(*((void **)this + 23), &v4[v14], v7);
    if (crypto_format_backend::write_aligned(this, *((char **)this + 23), 1uLL, v8 + v14)) {
      break;
    }
    v6 -= v7;
    v14 += v7;
    if (v6 < v7)
    {
      v8 += v14;
      v4 += v14;
      goto LABEL_5;
    }
  }
}

uint64_t crypto_format_backend::unmap_range(crypto_format_backend *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (*((unsigned char *)this + 192)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 5) + 48) + 64);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v4 + a2);
}

uint64_t crypto_format_backend::truncate(crypto_format_backend *this, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v3 = *((_DWORD *)this + 48);
  uint64_t v4 = *(void *)(*((void *)this + 5) + 48);
  if ((v3 & 2) == 0) {
    *(void *)(v4 + ++*(_DWORD *)(this + 56) = a2;
  }
  uint64_t v5 = *((void *)this + 3);
  if (v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v5 + 56))(v5, (a2 + (unint64_t)*(unsigned int *)(v4 + 52) - 1)/ *(unsigned int *)(v4 + 52)* *(unsigned int *)(v4 + 52)+ v6);
  if (!v7)
  {
    crypto::header::write(*(crypto::header **)(*((void *)this + 5) + 48), v16);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
    int v11 = v16;
    uint64_t v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v13 = xmmword_21E3A3E90;
    uint64_t v14 = 76;
    char v15 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, char **))(**((void **)this + 3) + 80))(*((void *)this + 3), &v11);
    if ((void)v13 == v9) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v9;
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return v7;
}

void sub_21E333698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

const void **crypto_format_backend::populate_backend_info(crypto_format_backend *this, DiskImageInfo *a2)
{
  return crypto::header::populate_crypto_header_info(*(crypto::header **)(*((void *)this + 5) + 48), a2);
}

void crypto_format_backend::crypto_format_backend(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 72))(&v6);
  BackendInternalBackend::BackendInternalBackend((Backend *)a1, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)a1 = &unk_26CF3A478;
  *(void *)(a1 + 40) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  crypto::format::aes_context::aes_context(a1 + 56, 0, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  crypto::format::aes_context::aes_context(a1 + 120, 1u, *a3, *(void *)(*a3 + 56), *(unsigned int *)(*(void *)(*a3 + 48) + 52));
  operator new[]();
}

void sub_21E3337EC(_Unwind_Exception *a1)
{
  crypto::format::aes_context::~aes_context(v3);
  crypto::format::aes_context::~aes_context(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void BackendInternalBackend::BackendInternalBackend(Backend *a1, void *a2)
{
  Backend::Backend(a1);
  *int v3 = &unk_26CF3B088;
  uint64_t v4 = a2[1];
  void v3[3] = *a2;
  v3[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void BackendInternalBackend::~BackendInternalBackend(BackendInternalBackend *this)
{
  *(void *)this = &unk_26CF3B088;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void crypto_format_backend::crypto_format_backend(Backend *a1, uint64_t a2, void *a3)
{
  BackendInternalBackend::BackendInternalBackend(a1, a3);
  *uint64_t v5 = &unk_26CF3A478;
  uint64_t v6 = *(void *)(a2 + 48);
  void v5[5] = *(void *)(a2 + 40);
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  crypto::format::aes_context::aes_context((uint64_t)a1 + 56, *(_DWORD *)(a2 + 72), a2 + 80, *(void *)(a2 + 112), *(void *)(a2 + 104));
  crypto::format::aes_context::aes_context((uint64_t)a1 + 120, *(_DWORD *)(a2 + 136), a2 + 144, *(void *)(a2 + 176), *(void *)(a2 + 168));
  operator new[]();
}

void sub_21E3339AC(_Unwind_Exception *a1)
{
  crypto::format::aes_context::~aes_context(v3);
  crypto::format::aes_context::~aes_context(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void crypto_format_backend::construct_context_from_inner(uint64_t a1, void *a2)
{
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,crypto_format_backend&,std::shared_ptr<Backend> const&,void>((uint64_t)&v2, a1, a2);
}

uint64_t crypto_format_backend::get_size(crypto_format_backend *this)
{
  if ((*((unsigned char *)this + 192) & 2) != 0
    || (uint64_t result = *(void *)(*(void *)(*((void *)this + 5) + 48) + 56)) == 0)
  {
    unint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
    if (*((unsigned char *)this + 192)) {
      unint64_t v4 = 0;
    }
    else {
      unint64_t v4 = *(void *)(*(void *)(*((void *)this + 5) + 48) + 64);
    }
    if (v3 <= v4)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
      if (*((unsigned char *)this + 192)) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)(*(void *)(*((void *)this + 5) + 48) + 64);
      }
      return v5 - v6;
    }
  }
  return result;
}

void crypto_format_backend::~crypto_format_backend(crypto_format_backend *this)
{
  crypto_format_backend::~crypto_format_backend(this);
  JUMPOUT(0x223C249A0);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_26CF3A478;
  char v2 = *((void *)this + 23);
  if (v2) {
    MEMORY[0x223C24980](v2, 0x1000C8077774924);
  }
  crypto::format::aes_context::~aes_context((CCCryptorRef *)this + 15);
  crypto::format::aes_context::~aes_context((CCCryptorRef *)this + 7);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_26CF3B088;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t BackendInternalBackend::flush(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t BackendInternalBackend::supports_unmap(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 32))();
}

uint64_t BackendInternalBackend::is_writable(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 48))();
}

void *crypto_format_backend::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"crypto", 6);
}

void *BackendInternalBackend::full_name(void **a1)
{
  char v2 = (void *)((uint64_t (*)(void **))(*a1)[8])(a1);
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
  unint64_t v4 = (void *)(*(uint64_t (**)(void *, void *))(*a1[3] + 64))(a1[3], v3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
}

uint64_t BackendInternalBackend::get_identifier(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 160))();
}

void vbuf::vbuf_exception::~vbuf_exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x223C249A0);
}

uint64_t vbuf::vbuf_exception::what(vbuf::vbuf_exception *this)
{
  return *((void *)this + 1);
}

uint64_t vbuf::vbuf_exception::reason@<X0>(const char **this@<X0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  size_t v4 = strlen(this[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)this[1], v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" - ", 3);
  uint64_t v5 = this[2];
  size_t v6 = strlen(v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, v12);
  v12[0] = *MEMORY[0x263F8C2B8];
  uint64_t v7 = v12[0];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = v9;
  uint64_t v10 = v8;
  v13[0] = v8;
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](&v15);
  std::stringbuf::str[abi:ne180100]((uint64_t)v17, a2);
  v16[0] = v7;
  *(void *)((char *)v16 + *(void *)(v7 - 24)) = v9;
  void v16[2] = v10;
  v17[0] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C24910](&v19);
}

void *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](void *a1, void *a2)
{
  a1[16] = MEMORY[0x263F8C368] + 16;
  unint64_t v3 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v5;
  *(void *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = a2[1];
  a2[1] = 0;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v7 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v6, v7);
  v6[1].__vftable = v7[1].__vftable;
  v7[1].__vftable = 0;
  v6[1].__fmtflags_ = v7[1].__fmtflags_;
  uint64_t v8 = v3[5];
  uint64_t v9 = v3[4];
  a1[2] = v9;
  *(void *)((char *)a1 + *(void *)(v9 - 24) + 16) = v8;
  uint64_t v10 = v3[1];
  *a1 = v10;
  *(void *)((char *)a1 + *(void *)(v10 - 24)) = v3[6];
  *a1 = MEMORY[0x263F8C328] + 24;
  a1[16] = MEMORY[0x263F8C328] + 104;
  a1[2] = MEMORY[0x263F8C328] + 64;
  *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_21E33421C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

void std::stringbuf::str[abi:ne180100](uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = std::stringbuf::view[abi:ne180100](a1);
  if (v5)
  {
    size_t v6 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      size_t v6 = (void *)*v6;
    }
    std::string::size_type v7 = v4 - (void)v6;
  }
  else
  {
    std::string::size_type v7 = 0;
  }
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0, v7);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void sub_21E3342D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::byte>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<std::byte>::__vallocate[abi:ne180100](a1, a2);
    size_t v6 = (unsigned char *)a1[1];
    std::string::size_type v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_21E334354(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::byte const*>,std::__wrap_iter<std::byte const*>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    size_t v6 = result;
    uint64_t result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E3343D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::byte>::__append(unint64_t *a1, size_t a2)
{
  size_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    long long v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      char v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      size_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::password_header>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  long long __p = v10;
  char v14 = &v10[620 * v4];
  uint64_t v15 = (uint64_t)v14;
  int v16 = &v10[620 * v9];
  *(_DWORD *)(std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>((uint64_t)v14, a2)+ 616) = 0;
  v15 += 620;
  std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v11 = a1[1];
  if ((char *)v15 != v14) {
    uint64_t v15 = (uint64_t)&v14[(v15 - (uint64_t)v14 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_21E334678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  bzero((void *)(a1 + 100), 0x204uLL);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  memcpy((void *)(a1 + 104), (const void *)(a2 + 104), 0x200uLL);
  return a1;
}

uint64_t *std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = v6 - 620;
    do
    {
      uint64_t v8 = v4 - 620;
      *(unsigned char *)uint64_t v7 = 0;
      *(_DWORD *)(v7 + 616) = -1;
      uint64_t v9 = *(unsigned int *)(v4 - 4);
      if (v9 != -1)
      {
        uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t, uint64_t))off_26CF3A5A8[v9])(&v13, v7, v8);
        *(_DWORD *)(v7 + 616) = v9;
      }
      v7 -= 620;
      uint64_t v4 = v8;
    }
    while (v8 != v5);
    uint64_t v6 = v7 + 620;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x69B4069B4069B5) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(620 * a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6crypto15password_headerENS8_17public_key_headerEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,crypto::password_header>::__alt[abi:ne180100]<crypto::password_header>(a2, a3);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6crypto15password_headerENS8_17public_key_headerEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
  bzero((void *)(a2 + 48), 0x204uLL);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  return memcpy((void *)(a2 + 52), (const void *)(a3 + 52), 0x200uLL);
}

uint64_t std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__emplace_back_slow_path<crypto::public_key_header>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2FE592FE592FE593 * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x69B4069B4069B4) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2FE592FE592FE593 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x34DA034DA034DALL) {
    unint64_t v9 = 0x69B4069B4069B4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<std::variant<crypto::password_header,crypto::public_key_header>>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[620 * v4];
  long long __p = v10;
  int v16 = v11;
  char v18 = &v10[620 * v9];
  *((_DWORD *)v11 + 8) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v11 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v11 + 4) = v12;
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  bzero(v11 + 48, 0x204uLL);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  memcpy(v11 + 52, (const void *)(a2 + 52), 0x200uLL);
  *((_DWORD *)v11 + 154) = 1;
  uint64_t v17 = v11 + 620;
  std::vector<std::variant<crypto::password_header,crypto::public_key_header>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 620) % 0x26CuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_21E334AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::byte>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::byte>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_21E334BA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN6crypto6format22get_total_entries_sizeERKNS_6vectorINS_7variantIJNS8_15password_headerENS8_17public_key_headerEEEENS_9allocatorISE_EEEEENK3__0clEmRKSE_EUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSN_DpT0_()
{
  return 616;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN6crypto6format22get_total_entries_sizeERKNS_6vectorINS_7variantIJNS8_15password_headerENS8_17public_key_headerEEEENS_9allocatorISE_EEEEENK3__0clEmRKSE_EUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSN_DpT0_()
{
  return 564;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::byte>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    unint64_t v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_21E334C2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<crypto::format::write_header_and_keys(Backend &,std::vector<std::variant<crypto::password_header,crypto::public_key_header>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,crypto::password_header,crypto::public_key_header> const&>(void ***a1, crypto::password_header *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  long long v7 = xmmword_21E3A3E80;
  int v8 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", 1, &v7, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x1000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x6802000000000000;
  **v3 += 20;
  uint64_t result = crypto::password_header::write(a2, (char *)(*v3[2] + *v3[1]));
  *v3[1] += 616;
  return result;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<crypto::format::write_header_and_keys(Backend &,std::vector<std::variant<crypto::password_header,crypto::public_key_header>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,crypto::password_header,crypto::public_key_header> const&>(void ***a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  long long v9 = xmmword_21E3A3E80;
  int v10 = 9;
  smart_enums::validators::value<unsigned int>((uint64_t)"auth_table_entry_mechanism", 2, &v9, 5);
  unint64_t v4 = *v3[1];
  uint64_t v5 = *v3[2] + **v3;
  *(_DWORD *)uint64_t v5 = 0x2000000;
  *(void *)(v5 + 4) = bswap64(v4);
  *(void *)(v5 + 12) = 0x3402000000000000;
  **v3 += 20;
  uint64_t v6 = *v3[2] + *v3[1];
  *(_DWORD *)uint64_t v6 = bswap32(*(_DWORD *)a2);
  long long v7 = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(v6 + 4) = v7;
  *(_DWORD *)(v6 + 36) = bswap32(*(_DWORD *)(a2 + 36));
  *(_DWORD *)(v6 + 40) = bswap32(*(_DWORD *)(a2 + 40));
  *(_DWORD *)(v6 + 44) = bswap32(*(_DWORD *)(a2 + 44));
  *(_DWORD *)(v6 + 48) = bswap32(*(_DWORD *)(a2 + 48));
  uint64_t result = memcpy((void *)(v6 + 52), (const void *)(a2 + 52), 0x200uLL);
  *v3[1] += 564;
  return result;
}

void *di_log::logger<di_log::log_printer<564ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<564ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3A5F0;
  a1[45] = &unk_26CF3A6F0;
  a1[46] = &unk_26CF3A718;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3A5F0;
  a1[45] = &unk_26CF3A678;
  a1[46] = &unk_26CF3A6A0;
  return a1;
}

void sub_21E334F74(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<578ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<578ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3A810;
  a1[45] = &unk_26CF3A910;
  a1[46] = &unk_26CF3A938;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3A810;
  a1[45] = &unk_26CF3A898;
  a1[46] = &unk_26CF3A8C0;
  return a1;
}

void sub_21E3350DC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3A788;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3351C0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3A788;
  di_log::logger_buf<di_log::log_printer<564ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<564ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<564ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<564ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<564ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<564ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E335738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<564ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 564;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 564;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3A9A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3359C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3A9A8;
  di_log::logger_buf<di_log::log_printer<578ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<578ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<578ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<578ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<578ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<578ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E335F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<578ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 578;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 578;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<690ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<690ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3ABC8;
  di_log::logger_buf<di_log::log_printer<690ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<690ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E336674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<690ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<690ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 690;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 690;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<738ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<738ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3ADE8;
  di_log::logger_buf<di_log::log_printer<738ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<738ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E336DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<738ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<738ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 738;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 738;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<806ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<806ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3B008;
  di_log::logger_buf<di_log::log_printer<806ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<806ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E33755C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<806ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<806ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 806;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        char v14 = a2;
      }
      else {
        char v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 806;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t BackendInternalBackend::unmap_range(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 24))();
}

uint64_t BackendInternalBackend::get_size(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 40))();
}

uint64_t BackendInternalBackend::truncate(BackendInternalBackend *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 56))();
}

uint64_t BackendInternalBackend::write(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t BackendInternalBackend::read(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

void BackendInternalBackend::construct_context_from_inner(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Unexpected context construction by ", 35);
  operator<<((uint64_t)v3, a1);
  DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_21E337904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(void *)(v28 + *(void *)(*MEMORY[0x263F8C2C8] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](&a27);
  if (v29) {
    __cxa_free_exception(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<crypto::format::aes_iv,std::allocator<crypto::format::aes_iv>,std::vector<std::byte> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x198uLL);
  uint64_t result = std::__shared_ptr_emplace<crypto::format::aes_iv>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::byte> &,std::allocator<crypto::format::aes_iv>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_21E337AF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<crypto::format::aes_iv>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::byte> &,std::allocator<crypto::format::aes_iv>,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF3B150;
  CCHmacInit((CCHmacContext *)(a1 + 24), 0, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_21E337B5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto::format::aes_iv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3B150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto::format::aes_iv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3B150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<690ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3ABC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E337C68(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<738ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3ADE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E337CF8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<806ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3B008;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E337D88(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,crypto_format_backend&,std::shared_ptr<Backend> const&,void>(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<crypto_format_backend&,std::shared_ptr<Backend> const&,std::allocator<crypto_format_backend>,0>((uint64_t)v5, a2, a3);
}

void sub_21E337E04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<crypto_format_backend&,std::shared_ptr<Backend> const&,std::allocator<crypto_format_backend>,0>(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF216A0;
  crypto_format_backend::crypto_format_backend((Backend *)(a1 + 24), a2, a3);
}

void sub_21E337E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void AEAHelper::create_auth_data(void *a1@<X0>, AEAwrapper::AuthData *a2@<X8>)
{
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 176))(*a1);
  if (v3 < 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "AEAHelper: Invalid file descriptor.", 0x16u);
  }
  AEAContext v6 = AAFileStreamOpenWithFD(v3, 0);
  AEAwrapper::ByteStream::ByteStream(&v7, &v6);
  AEAwrapper::Context::Context((AEAwrapper::Context *)&v6, (AEAwrapper::ByteStream *)&v7);
  AEAwrapper::AuthData::AuthData(a2, (AEAwrapper::Context *)&v6);
  AEAwrapper::Context::~Context(&v6);
  AEAwrapper::ByteStream::~ByteStream(&v7);
}

void sub_21E337F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AAByteStream a10)
{
}

void AEAHelper::create_key_parameters(AEAHelper *this, const AEAwrapper::AuthData *a2)
{
}

void sub_21E33838C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a33)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
  }
  MEMORY[0x223C24980](v42, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void *get_auth_data_value@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  AEAContext v6 = (char *)malloc_type_valloc(0x800uLL, 0xF8ED6DDuLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  __s = (char *)&unk_26CF3B1A0;
  v24[2] = (char *)&__s;
  __s2 = v6;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)&__s);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](&__s);
  EntryCFIndex Count = AEAwrapper::AuthData::getEntryCount(a1);
  if (EntryCount)
  {
    uint32_t v8 = 0;
    long long v9 = __s2;
    while (1)
    {
      size_t v22 = 0;
      bzero(v9, 0x800uLL);
      if (AEAwrapper::AuthData::getEntry(a1, v8, 0x800uLL, v9, 0, 0, 0, &v22))
      {
        os_log_type_t v12 = std::generic_category();
        *(_DWORD *)a3 = 1;
        goto LABEL_13;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t v11 = *(const char **)a2;
        size_t v10 = *(void *)(a2 + 8);
      }
      else
      {
        size_t v10 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v11 = (const char *)a2;
      }
      long long v9 = __s2;
      if (!strncmp(v11, __s2, v10)) {
        break;
      }
      if (EntryCount == ++v8) {
        goto LABEL_10;
      }
    }
    if (v22 < 0x100000)
    {
      uint64_t v15 = (char *)malloc_type_valloc(v22 + 1, 0xF8ED6DDuLL);
      if (!v15)
      {
        __int16 v20 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v21 = std::bad_alloc::bad_alloc(v20);
        __cxa_throw(v21, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      v27[0] = &unk_26CF3B1A0;
      v27[3] = v27;
      __s = v15;
      std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v27);
      std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v27);
      bzero(__s, v22 + 1);
      if (AEAwrapper::AuthData::getEntry(a1, v8, 0x800uLL, __s2, 0, v22, (unsigned __int8 *)__s, 0))
      {
        int v16 = std::generic_category();
        char v17 = 0;
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = v16;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((void *)a3, __s);
        char v17 = 1;
      }
      *(unsigned char *)(a3 + 24) = v17;
      std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&__s, 0);
      std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v24);
      goto LABEL_14;
    }
    os_log_type_t v12 = std::generic_category();
    uint64_t v13 = 84;
  }
  else
  {
LABEL_10:
    os_log_type_t v12 = std::generic_category();
    uint64_t v13 = 22;
  }
  *(void *)a3 = v13;
LABEL_13:
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_14:
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&__s2, 0);
  return std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v26);
}

void sub_21E338714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v3);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)va1, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::expected<std::string,std::error_code>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v4 = *(char *)(a1 + 23);
    if (*((unsigned char *)a2 + 24))
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
    else
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
  else if (*((unsigned char *)a2 + 24))
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
  }
  return a1;
}

void AEAHelper::AEAHelper(AEAwrapper::AuthData *a1, void *a2)
{
  AEAHelper::create_auth_data(a2, a1);
  AEAHelper::create_key_parameters(a1, v3);
}

void sub_21E338848(_Unwind_Exception *a1)
{
  AEAwrapper::AuthData::~AuthData(v1);
  _Unwind_Resume(a1);
}

uint64_t *AEAwrapper::ByteStream::ByteStream(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (!v2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Error opening ByteStream", 0x16u);
  }
  return result;
}

void AEAwrapper::ByteStream::~ByteStream(AAByteStream *this)
{
}

ssize_t AEAwrapper::ByteStream::pread(AAByteStream *this, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*this, a2, a3, a4);
}

uint64_t *AEAwrapper::ByteStream::make_DecryptionRandomAccessInputStream@<X0>(AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return AEAwrapper::ByteStream::ByteStream(a6, (uint64_t *)&v8);
}

AEAwrapper::Context *AEAwrapper::Context::Context(AEAwrapper::Context *this, AAByteStream *a2)
{
  AEAContext v3 = AEAContextCreateWithEncryptedStream(*a2);
  *(void *)this = v3;
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Context creation failed.", 0x16u);
  }
  return this;
}

void AEAwrapper::Context::~Context(AEAContext *this)
{
}

uint64_t AEAwrapper::Context::setSymmetricKey(AEAContext *this, uint8_t *buf, size_t buf_size)
{
  uint64_t result = AEAContextSetFieldBlob(*this, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Context setup failed.", 0x16u);
  }
  return result;
}

uint64_t AEAwrapper::Context::getAEAIdentifier(AEAContext_impl **this)
{
  __dst[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *this;
  buf_std::string::size_type size = 0;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0, 0, &buf_size) < 0) {
    return 0;
  }
  size_t v2 = buf_size;
  if (buf_size >= 0x100000) {
    size_t v3 = 0x100000;
  }
  else {
    size_t v3 = buf_size;
  }
  int v4 = (uint8_t *)malloc_type_valloc(v3, 0xF8ED6DDuLL);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v10, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  __dst[0] = &unk_26CF3B220;
  __dst[3] = __dst;
  buf = v4;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)__dst);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](__dst);
  long long v5 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0) < 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v2 >= 0x10) {
      size_t v6 = 16;
    }
    else {
      size_t v6 = v2;
    }
    memcpy(__dst, v5, v6);
    uint64_t v7 = __dst[0];
  }
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&buf, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v13);
  return v7;
}

void sub_21E338C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

AEAwrapper::AuthData *AEAwrapper::AuthData::AuthData(AEAwrapper::AuthData *this, AEAContext *a2)
{
  AEAAuthData v3 = AEAAuthDataCreateWithContext(*a2);
  *(void *)this = v3;
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Authentication Data creation failed.", 0x16u);
  }
  return this;
}

void AEAwrapper::AuthData::~AuthData(AEAAuthData *this)
{
}

uint64_t AEAwrapper::AuthData::getEntryCount(AEAAuthData *this)
{
  return AEAAuthDataGetEntryCount(*this);
}

uint64_t AEAwrapper::AuthData::getEntry(AEAAuthData *this, uint32_t a2, size_t a3, char *a4, unint64_t *a5, size_t a6, unsigned __int8 *a7, unint64_t *a8)
{
  return AEAAuthDataGetEntry(*this, a2, a3, a4, a5, a6, a7, a8);
}

void *AEAwrapper::DecryptionStream::DecryptionStream(void *result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = v4;
  *a3 = 0;
  result[2] = *a4;
  *a4 = 0;
  return result;
}

uint64_t AEAwrapper::DecryptionStream::getCompressionBlockSize(AEAContext *this)
{
  return AEAContextGetFieldUInt(this[1], 4u);
}

uint64_t AEAwrapper::DecryptionStream::getRawSize(AEAContext *this)
{
  return AEAContextGetFieldUInt(this[1], 0xDu);
}

ssize_t AEAwrapper::DecryptionStream::pread(AAByteStream *this, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(this[2], a2, a3, a4);
}

uint64_t transformed_extents_iterator_interface::transformed_extents_iterator_interface(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)a1 = &unk_26CF3B2E8;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)a1 = &unk_26CF3B2A0;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 48, a2 + 48);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 96, a2 + 96);
  uint64_t v7 = *(_OWORD **)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = *(_OWORD **)(a1 + 144);
  }
  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_21E338F38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    DiskImage::const_extents_iterator_t::operator++(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t transformed_extents_iterator_interface::transformed_extents_iterator_interface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &unk_26CF3B2E8;
  *(void *)(a1 + 8) = a2;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a4;
  *(void *)a1 = &unk_26CF3B2A0;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 48, a5);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1 + 96, a6);
  std::allocate_shared[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t>,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,std::vector<DiskImage::diskimage_extent_t> const&,void>(a7, (void *)(a1 + 144));
  uint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = v12;
  if (v12 == v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *(void *)(v12 - 24);
  }
  if (*(void *)(a1 + 24) > v14) {
    unint64_t v14 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = 2;
  return a1;
}

void sub_21E339048(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    diskimage_uio::details::extents_db_impl::begin();
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL transformed_extents_iterator_interface::get_next_extent@<W0>(transformed_extents_iterator_interface *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v7 = *((void *)this + 20);
  uint64_t v6 = *((void *)this + 21);
  while (v7 != v6 && *(void *)(v7 + 8) <= a2)
  {
    v7 += 32;
    *((void *)this + 20) = v7;
  }
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)this + 48, (uint64_t)this + 96))
  {
    if (*((_DWORD *)this + 20) == 3 || *((void *)this + 8) > v3) {
      break;
    }
    DiskImage::const_extents_iterator_t::operator++((transformed_extents_iterator_interface *)((char *)this + 48), (uint64_t)v19);
    uint64_t v8 = v19[0];
    v19[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
  }
  BOOL result = DiskImage::const_extents_iterator_t::operator!=((uint64_t)this + 48, (uint64_t)this + 96);
  if (result && *((_DWORD *)this + 20) == 3)
  {
    unint64_t v10 = *((void *)this + 8);
    if (*((void *)this + 7) > v3) {
      unint64_t v3 = *((void *)this + 7);
    }
    int v11 = 3;
    goto LABEL_44;
  }
  BOOL result = DiskImage::const_extents_iterator_t::operator==((uint64_t)this + 48, (uint64_t)this + 96);
  uint64_t v12 = *((void *)this + 20);
  uint64_t v13 = *((void *)this + 21);
  if (result && v12 == v13)
  {
    int v11 = 0;
    unint64_t v10 = *((void *)this + 3);
    goto LABEL_44;
  }
  if (v12 == v13)
  {
    unint64_t v10 = *((void *)this + 7);
    if (v10 <= v3)
    {
      unint64_t v10 = *((void *)this + 8);
      int v11 = *((_DWORD *)this + 20);
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  BOOL result = DiskImage::const_extents_iterator_t::operator==((uint64_t)this + 48, (uint64_t)this + 96);
  if (result)
  {
    unint64_t v14 = (unint64_t *)*((void *)this + 20);
    unint64_t v10 = *v14;
    if (*v14 <= v3)
    {
      unint64_t v10 = v14[1];
      int v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }
LABEL_39:
    int v11 = 0;
    goto LABEL_44;
  }
  unint64_t v15 = *((void *)this + 7);
  int v16 = (char *)*((void *)this + 20);
  unint64_t v17 = *(void *)v16;
  if (*(void *)v16 >= v15) {
    unint64_t v10 = *((void *)this + 7);
  }
  else {
    unint64_t v10 = *(void *)v16;
  }
  if (v10 <= v3) {
    unint64_t v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = *((void *)v16 + 1);
  }
  else
  {
    if (v17 >= *((void *)this + 8)) {
      unint64_t v17 = *((void *)this + 8);
    }
    int v16 = (char *)this + 56;
  }
  int v11 = *((_DWORD *)v16 + 6);
  unint64_t v3 = v10;
  if (*((void *)this + 3) >= v17) {
    unint64_t v10 = v17;
  }
  else {
    unint64_t v10 = *((void *)this + 3);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

BOOL transformed_extents_iterator_interface::make_val@<W0>(transformed_extents_iterator_interface *this@<X0>, uint64_t a2@<X8>)
{
  BOOL result = transformed_extents_iterator_interface::get_next_extent(this, *((void *)this + 5), (uint64_t)v9);
  int v5 = *(_DWORD *)&v9[24];
  uint64_t v7 = *(void *)v9;
  unint64_t v6 = *(void *)&v9[8];
  do
  {
    if (v6 >= *((void *)this + 3)) {
      break;
    }
    if (v5 == 3) {
      break;
    }
    if (v5 != *(_DWORD *)&v9[24]) {
      break;
    }
    unint64_t v6 = *(void *)&v9[8];
    BOOL result = transformed_extents_iterator_interface::get_next_extent(this, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)uint64_t v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }
  while (*(void *)&v8[0] == v6);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void *DiskImage::extents_t_transformer::make_custom_interface_extents@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  char v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  DiskImage::extents_t::extents_t(a4, a1, (uint64_t)v8, a3);
  return std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v8);
}

void sub_21E3393D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::extents_t::extents_t(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  long long v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = (void *)std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__value_func[abi:ne180100](a1 + 56, (uint64_t)a2 + 56);
  std::function<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator=(v10, a3);
  long long v11 = *a4;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a4 + 16);
  *(_OWORD *)(a1 + 8) = v11;
  return a1;
}

void sub_21E339474(_Unwind_Exception *a1)
{
  DiskImage::extents_t::~extents_t(v1);
  _Unwind_Resume(a1);
}

uint64_t DiskImage::extents_t_transformer::make_transformed_extents@<X0>(DiskImage::extents_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  DiskImage::extents_t::begin(a1, (uint64_t)v35);
  DiskImage::extents_t::end(a1, (uint64_t)v34);
  unint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *(void *)unint64_t v6 = &unk_26CF3B318;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v31, (uint64_t)v35);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v32, (uint64_t)v34);
  *(void *)&long long v33 = v6 + 24;
  *((void *)&v33 + 1) = v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  uint64_t v7 = *((void *)v6 + 4);
  if (v7 == *((void *)v6 + 3)) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *(void *)(v7 - 24);
  }
  if (*((void *)a1 + 2) > v8) {
    unint64_t v8 = *((void *)a1 + 2);
  }
  *(void *)&long long v29 = *((void *)a1 + 1);
  *((void *)&v29 + 1) = v8;
  char v30 = 2;
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v20, (uint64_t)v31);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)&v24, (uint64_t)v32);
  long long v28 = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v37 = 0;
  uint64_t v9 = (char *)operator new(0x78uLL);
  uint64_t v10 = v20;
  *(void *)uint64_t v9 = &unk_26CF3B368;
  *((void *)v9 + 1) = v10;
  long long v11 = v22;
  *((_OWORD *)v9 + 1) = v21;
  *((_OWORD *)v9 + 2) = v11;
  *((_DWORD *)v9 + 12) = v23;
  uint64_t v12 = v24;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  *((void *)v9 + 7) = v12;
  long long v13 = v26;
  *((_OWORD *)v9 + 4) = v25;
  *((_OWORD *)v9 + 5) = v13;
  *((_DWORD *)v9 + 24) = v27;
  *(_OWORD *)(v9 + 104) = v28;
  long long v28 = 0uLL;
  unint64_t v37 = v9;
  DiskImage::extents_t_transformer::make_custom_interface_extents((long long *)a1, (uint64_t)v36, &v29, a3);
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100](v36);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  uint64_t v16 = v32[0];
  v32[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  uint64_t v17 = v31[0];
  v31[0] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  uint64_t v18 = v34[0];
  v34[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  uint64_t result = v35[0];
  v35[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_21E3397B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__function::__value_func<std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__value_func[abi:ne180100]((void *)(v27 - 88));
  DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(&a9);
  DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(&a26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  uint64_t v29 = *(void *)(v27 - 184);
  *(void *)(v27 - 184) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  uint64_t v30 = *(void *)(v27 - 136);
  *(void *)(v27 - 136) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t *DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t,DiskImage::extents_t &&::allocator<std::vector>> &&)::$_0::~$_0(uint64_t *a1)
{
  size_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void transformed_extents_iterator_interface::clone(transformed_extents_iterator_interface *this)
{
}

void sub_21E339988(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C4015EBE80FLL);
  _Unwind_Resume(a1);
}

void transformed_extents_iterator_interface::~transformed_extents_iterator_interface(transformed_extents_iterator_interface *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  size_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t>,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,std::vector<DiskImage::diskimage_extent_t> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__shared_ptr_emplace[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> const&,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_21E339B34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__shared_ptr_emplace[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> const&,std::allocator<std::vector<DiskImage::diskimage_extent_t>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26CF3B318;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<DiskImage::diskimage_extent_t>::__init_with_size[abi:ne180100]<DiskImage::diskimage_extent_t*,DiskImage::diskimage_extent_t*>((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  return a1;
}

void sub_21E339BAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3B318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3B318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<std::vector<DiskImage::diskimage_extent_t>>::__on_zero_shared(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *std::vector<DiskImage::diskimage_extent_t>::__init_with_size[abi:ne180100]<DiskImage::diskimage_extent_t*,DiskImage::diskimage_extent_t*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<DiskImage::diskimage_extent_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E339CB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DiskImage::diskimage_extent_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<ref::details::ref_cnt_set_handle>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_26CF3B368;
  size_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_26CF3B368;
  size_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  JUMPOUT(0x223C249A0);
}

void *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  size_t v2 = operator new(0x78uLL);
  void *v2 = &unk_26CF3B368;
  std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21E339EDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF3B368;
  return std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100]((uint64_t *)(a1 + 8));
}

void std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy_deallocate(uint64_t *a1)
{
  std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::operator()()
{
}

void sub_21E339FF4(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0x10E1C4015EBE80FLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::vector<DiskImage::diskimage_extent_t> & const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = DiskImage::const_extents_iterator_t::const_extents_iterator_t(a1, a2);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(v4 + 48, a2 + 48);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_21E33A0B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    DiskImage::const_extents_iterator_t::operator++(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__alloc_func<DiskImage::extents_t_transformer::make_transformed_extents(DiskImage::extents_t &&,std::vector<DiskImage::diskimage_extent_t> &&)::$_0,DiskImage::diskimage_extent_t<std::vector<DiskImage::diskimage_extent_t> &>,std::unique_ptr<DiskImage::base_extents_iterator_interface> ()(DiskImage::extents_t const&,unsigned long long)>::destroy[abi:ne180100](uint64_t *a1)
{
  size_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v5();
  }
  return result;
}

uLong udif::get_csum_any(unsigned int *a1)
{
  uLong result = *a1;
  if (result)
  {
    if (result != 2)
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Unknown checksum found", 0x16u);
    }
    return crc32(0, 0, 0) << 32;
  }
  return result;
}

udif::header *udif::header::header(udif::header *this, const char *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  uint64_t v4 = (void *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  uint64_t v5 = (void *)((char *)this + 32);
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_num_t", 0, &v37, 2);
  *((_DWORD *)this + 15) = 0;
  uint64_t v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_count_t", 0, &v37, 2);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 26) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 5) = 0u;
  udif::checksum_type::checksum_type((udif::header *)((char *)this + 80));
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 4++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  udif::checksum_type::checksum_type((udif::header *)((char *)this + 352));
  *((_DWORD *)this + 89) = 0;
  *((_DWORD *)this + 122) = 0;
  uint64_t v37 = 0x100000000;
  LODWORD(v38) = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"image_variant_type", 0, &v37, 3);
  *(void *)((char *)this + 492) = 0;
  int v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_signature", v6, &v37, 1);
  *(_DWORD *)this = 2037149547;
  int v7 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v37) = 4;
  smart_enums::validators::value<unsigned int>((uint64_t)"version_t", v7, &v37, 1);
  *((_DWORD *)this + 1) = 4;
  int v8 = bswap32(*((_DWORD *)a2 + 2));
  LODWORD(v37) = 512;
  smart_enums::validators::value<unsigned int>((uint64_t)"header_size_t", v8, &v37, 1);
  *((_DWORD *)this + 2) = 512;
  udif::header::header_flags::header_flags(&v37, bswap32(*((_DWORD *)a2 + 3)));
  *((_DWORD *)this + 3) = v37;
  *uint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 3) = bswap64(*((void *)a2 + 3));
  *uint64_t v5 = bswap64(*((void *)a2 + 4));
  *((void *)this + 5) = bswap64(*((void *)a2 + 5));
  *((void *)this + 6) = bswap64(*((void *)a2 + 6));
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 14));
  uint64_t v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_num_t", (int)v5, &v37, 2);
  *((_DWORD *)this + 14) = v5;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 15));
  uint64_t v37 = 0x100000000;
  smart_enums::validators::value<unsigned int>((uint64_t)"segment_count_t", (int)v5, &v37, 2);
  *((_DWORD *)this + 15) = v5;
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  udif::checksum_type::checksum_type((udif::checksum_type *)v36);
  long long v9 = *((_OWORD *)a2 + 12);
  *(_OWORD *)&v36[96] = *((_OWORD *)a2 + 11);
  *(_OWORD *)&v36[112] = v9;
  *(void *)&v36[128] = *((void *)a2 + 26);
  long long v10 = *((_OWORD *)a2 + 8);
  *(_OWORD *)&unsigned char v36[32] = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v36[48] = v10;
  long long v11 = *((_OWORD *)a2 + 10);
  *(_OWORD *)&v36[64] = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v36[80] = v11;
  long long v12 = *((_OWORD *)a2 + 6);
  *(_OWORD *)uint64_t v36 = *((_OWORD *)a2 + 5);
  *(_OWORD *)&v36[16] = v12;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  uint64_t v37 = *(void *)v36;
  udif::details::endian_reverse((uint64_t)&v37, (int *)&v27);
  *((void *)this + 10) = v27;
  *(_OWORD *)((char *)this + 152) = v32;
  *(_OWORD *)((char *)this + 168) = v33;
  *(_OWORD *)((char *)this + 184) = v34;
  *(_OWORD *)((char *)this + 200) = v35;
  *(_OWORD *)((char *)this + 88) = v28;
  *(_OWORD *)((char *)this + 104) = v29;
  *(_OWORD *)((char *)this + 120) = v30;
  *(_OWORD *)((char *)this + 136) = v31;
  *((void *)this + 27) = bswap64(*((void *)a2 + 27));
  *((void *)this + 28) = bswap64(*((void *)a2 + 28));
  long long v13 = *(_OWORD *)(a2 + 232);
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)((char *)this + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)((char *)this + 280) = v15;
  *(_OWORD *)((char *)this + 248) = v14;
  *(_OWORD *)((char *)this + 232) = v13;
  *((void *)this + 37) = bswap64(*((void *)a2 + 37));
  *((void *)this + 38) = bswap64(*((void *)a2 + 38));
  long long v16 = *(_OWORD *)(a2 + 312);
  long long v17 = *(_OWORD *)(a2 + 328);
  *((void *)this + 43) = *((void *)a2 + 43);
  *(_OWORD *)((char *)this + 312) = v16;
  *(_OWORD *)((char *)this + 328) = v17;
  udif::checksum_type::checksum_type((udif::checksum_type *)v36);
  long long v18 = *((_OWORD *)a2 + 29);
  *(_OWORD *)&v36[96] = *((_OWORD *)a2 + 28);
  *(_OWORD *)&v36[112] = v18;
  *(void *)&v36[128] = *((void *)a2 + 60);
  long long v19 = *((_OWORD *)a2 + 25);
  *(_OWORD *)&unsigned char v36[32] = *((_OWORD *)a2 + 24);
  *(_OWORD *)&v36[48] = v19;
  long long v20 = *((_OWORD *)a2 + 27);
  *(_OWORD *)&v36[64] = *((_OWORD *)a2 + 26);
  *(_OWORD *)&v36[80] = v20;
  long long v21 = *((_OWORD *)a2 + 23);
  *(_OWORD *)uint64_t v36 = *((_OWORD *)a2 + 22);
  *(_OWORD *)&v36[16] = v21;
  long long v42 = *(_OWORD *)&v36[72];
  long long v43 = *(_OWORD *)&v36[88];
  long long v44 = *(_OWORD *)&v36[104];
  long long v45 = *(_OWORD *)&v36[120];
  long long v38 = *(_OWORD *)&v36[8];
  long long v39 = *(_OWORD *)&v36[24];
  long long v40 = *(_OWORD *)&v36[40];
  long long v41 = *(_OWORD *)&v36[56];
  uint64_t v37 = *(void *)v36;
  udif::details::endian_reverse((uint64_t)&v37, (int *)&v27);
  *((void *)this + 44) = v27;
  long long v22 = v33;
  *(_OWORD *)((char *)this + 424) = v32;
  *(_OWORD *)((char *)this + 440) = v22;
  long long v23 = v35;
  *(_OWORD *)((char *)this + 4++*(_DWORD *)(this + 56) = v34;
  *(_OWORD *)((char *)this + 472) = v23;
  long long v24 = v29;
  *(_OWORD *)((char *)this + 360) = v28;
  *(_OWORD *)((char *)this + 376) = v24;
  long long v25 = v31;
  *(_OWORD *)((char *)this + 392) = v30;
  *(_OWORD *)((char *)this + 408) = v25;
  LODWORD(v5) = bswap32(*((_DWORD *)a2 + 122));
  uint64_t v37 = 0x100000000;
  LODWORD(v38) = 2;
  smart_enums::validators::value<unsigned int>((uint64_t)"image_variant_type", (int)v5, &v37, 3);
  *((_DWORD *)this + 122) = v5;
  *(void *)((char *)this + 492) = bswap64(*(void *)(a2 + 492));
  return this;
}

void sub_21E33A6D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t udif::header::write(udif::header *this, char *a2)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v12 = "*udif::header::write(char *)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    di_log::logger<di_log::log_printer<85ul>>::logger(v14, &v12);
    udif::operator<<(&v15, (uint64_t)this);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](&v16);
  }
  *(_DWORD *)a2 = *(_DWORD *)this;
  *((_DWORD *)a2 + 1) = bswap32(*((_DWORD *)this + 1));
  *((_DWORD *)a2 + 2) = bswap32(*((_DWORD *)this + 2));
  *((_DWORD *)a2 + 3) = bswap32(*((_DWORD *)this + 3));
  *((void *)a2 + 2) = *((void *)this + 2);
  *((void *)a2 + 3) = bswap64(*((void *)this + 3));
  *((void *)a2 + 4) = bswap64(*((void *)this + 4));
  *((void *)a2 + 5) = bswap64(*((void *)this + 5));
  *((void *)a2 + 6) = bswap64(*((void *)this + 6));
  *((_DWORD *)a2 + 14) = bswap32(*((_DWORD *)this + 14));
  *((_DWORD *)a2 + 15) = bswap32(*((_DWORD *)this + 15));
  *((_OWORD *)a2 + 4) = *((_OWORD *)this + 4);
  uint64_t v4 = udif::details::serialize_field((uint64_t)this + 80, (uint64_t)(a2 + 80));
  *(void *)uint64_t v4 = bswap64(*((void *)this + 27));
  *(void *)(v4 + 8) = bswap64(*((void *)this + 28));
  long long v5 = *(_OWORD *)((char *)this + 232);
  long long v6 = *(_OWORD *)((char *)this + 248);
  long long v7 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 80) = bswap64(*((void *)this + 37));
  *(void *)(v4 + 88) = bswap64(*((void *)this + 38));
  long long v9 = *(_OWORD *)((char *)this + 312);
  long long v8 = *(_OWORD *)((char *)this + 328);
  *(void *)(v4 + 128) = *((void *)this + 43);
  *(_OWORD *)(v4 + 96) = v9;
  *(_OWORD *)(v4 + 112) = v8;
  uint64_t v10 = udif::details::serialize_field((uint64_t)this + 352, v4 + 136);
  *(_DWORD *)uint64_t v10 = bswap32(*((_DWORD *)this + 122));
  *(void *)(v10 + 4) = bswap64(*(void *)((char *)this + 492));
  return v10 + 12;
}

void sub_21E33A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<85ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<85ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<85ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3B428;
  a1[45] = &unk_26CF3B528;
  a1[46] = &unk_26CF3B550;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3B428;
  a1[45] = &unk_26CF3B4B0;
  a1[46] = &unk_26CF3B4D8;
  return a1;
}

void sub_21E33A9A4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *udif::operator<<(void *a1, uint64_t a2)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"header (", 8);
  uint64_t v4 = (void *)std::ostream::operator<<();
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"):", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  long long v6 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  int v7 = *(_DWORD *)(a2 + 12);
  int v112 = *(_DWORD *)(a2 + 60);
  int v113 = *(_DWORD *)(a2 + 56);
  uint64_t v110 = *(void *)(a2 + 72);
  uint64_t v111 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 168);
  long long v134 = *(_OWORD *)(a2 + 152);
  long long v135 = v9;
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v136 = *(_OWORD *)(a2 + 184);
  long long v137 = v10;
  long long v11 = *(_OWORD *)(a2 + 104);
  long long v130 = *(_OWORD *)(a2 + 88);
  long long v131 = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v132 = *(_OWORD *)(a2 + 120);
  long long v133 = v12;
  long long v13 = *(_OWORD *)(a2 + 248);
  long long v126 = *(_OWORD *)(a2 + 232);
  long long v127 = v13;
  long long v14 = *(_OWORD *)(a2 + 280);
  long long v128 = *(_OWORD *)(a2 + 264);
  long long v129 = v14;
  long long v15 = *(_OWORD *)(a2 + 328);
  long long v123 = *(_OWORD *)(a2 + 312);
  long long v124 = v15;
  uint64_t v125 = *(void *)(a2 + 344);
  uint64_t v16 = *(void *)(a2 + 352);
  long long v17 = *(_OWORD *)(a2 + 440);
  long long v119 = *(_OWORD *)(a2 + 424);
  long long v120 = v17;
  long long v18 = *(_OWORD *)(a2 + 472);
  long long v121 = *(_OWORD *)(a2 + 456);
  long long v122 = v18;
  long long v19 = *(_OWORD *)(a2 + 376);
  long long v115 = *(_OWORD *)(a2 + 360);
  long long v116 = v19;
  long long v20 = *(_OWORD *)(a2 + 408);
  long long v117 = *(_OWORD *)(a2 + 392);
  long long v118 = v20;
  int v109 = *(_DWORD *)(a2 + 488);
  long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"signature", 9);
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
  v138[23] = 4;
  strcpy(v138, "koly");
  long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v138, 4);
  if ((v138[23] & 0x80000000) != 0) {
    operator delete(*(void **)v138);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"version", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
  long long v26 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v27 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"header_size", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
  long long v29 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  long long v30 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"flags", 5);
  long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v7;
  long long v33 = udif::operator<<(v32, (int *)&v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"run_data_fork_offset", 20);
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
  uint64_t v37 = *v36;
  long long v38 = (char *)v36 + *(void *)(*v36 - 24);
  int v39 = *((_DWORD *)v38 + 2);
  *((_DWORD *)v38 + 2) = v39 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v36 + *(void *)(v37 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, v138);
  std::ostream::operator<<();
  uint64_t v40 = *v36;
  *(_DWORD *)((char *)v36 + *(void *)(*v36 - 24) + 8) = v39;
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(v40 - 24)));
  long long v41 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_offset", 16);
  long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
  uint64_t v44 = *v43;
  long long v45 = (char *)v43 + *(void *)(*v43 - 24);
  LODWORD(v36) = *((_DWORD *)v45 + 2);
  *((_DWORD *)v45 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v43 + *(void *)(v44 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, v138);
  std::ostream::operator<<();
  uint64_t v46 = *v43;
  *(_DWORD *)((char *)v43 + *(void *)(*v43 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v46 - 24)));
  char v47 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_len", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
  uint64_t v49 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
  int v50 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"rsrc_fork_offset", 16);
  uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
  uint64_t v53 = *v52;
  uint64_t v54 = (char *)v52 + *(void *)(*v52 - 24);
  LODWORD(v36) = *((_DWORD *)v54 + 2);
  *((_DWORD *)v54 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v52 + *(void *)(v53 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v52, v138);
  std::ostream::operator<<();
  uint64_t v55 = *v52;
  *(_DWORD *)((char *)v52 + *(void *)(*v52 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v55 - 24)));
  long long v56 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"rsrc_fork_len", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
  char v58 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
  unint64_t v59 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_num", 11);
  unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v113;
  uint64_t v62 = udif::operator<<(v61, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
  uint64_t v63 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_count", 13);
  uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v112;
  long long v66 = udif::operator<<(v65, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
  long long v67 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v111;
  *(void *)&v138[8] = v110;
  long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"segment_id", 10);
  char v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
  print_buffer(v69, (uint64_t)v138, 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet(&v114, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v8;
  long long v139 = v134;
  long long v140 = v135;
  long long v141 = v136;
  long long v142 = v137;
  *(_OWORD *)&v138[8] = v130;
  *(_OWORD *)&v138[24] = v131;
  *(_OWORD *)&v138[40] = v132;
  *(_OWORD *)&v138[56] = v133;
  uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_fork_checksum", 18);
  long long v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
  udif::details::operator<<(v72, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v72 + *(void *)(*v72 - 24)));
  uint64_t v73 = std::locale::use_facet(&v114, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  char v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"xml_offset", 10);
  uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
  uint64_t v76 = *v75;
  unint64_t v77 = (char *)v75 + *(void *)(*v75 - 24);
  LODWORD(v36) = *((_DWORD *)v77 + 2);
  *((_DWORD *)v77 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v75 + *(void *)(v76 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v75, v138);
  std::ostream::operator<<();
  uint64_t v78 = *v75;
  *(_DWORD *)((char *)v75 + *(void *)(*v75 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(v78 - 24)));
  long long v79 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"xml_length", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)": ", 2);
  long long v81 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  char v82 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v126;
  *(_OWORD *)&v138[16] = v127;
  *(_OWORD *)&v138[32] = v128;
  *(_OWORD *)&v138[48] = v129;
  uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"external", 8);
  uint64_t v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
  print_buffer(v84, (uint64_t)v138, 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
  long long v85 = std::locale::use_facet(&v114, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"code_sign_offset", 16);
  char v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)": ", 2);
  uint64_t v88 = *v87;
  uint64_t v89 = (char *)v87 + *(void *)(*v87 - 24);
  LODWORD(v36) = *((_DWORD *)v89 + 2);
  *((_DWORD *)v89 + 2) = v36 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v87 + *(void *)(v88 - 24) + 8) |= 0x200u;
  v138[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v87, v138);
  std::ostream::operator<<();
  uint64_t v90 = *v87;
  *(_DWORD *)((char *)v87 + *(void *)(*v87 - 24) + 8) = v36;
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(v90 - 24)));
  uint64_t v91 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"code_sign_length", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)": ", 2);
  char v93 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  uint64_t v94 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)long long v138 = v123;
  *(_OWORD *)&v138[16] = v124;
  *(void *)&v138[32] = v125;
  unint64_t v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"reserved", 8);
  uint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)": ", 2);
  print_buffer(v96, (uint64_t)v138, 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
  long long v97 = std::locale::use_facet(&v114, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  *(void *)long long v138 = v16;
  long long v139 = v119;
  long long v140 = v120;
  long long v141 = v121;
  long long v142 = v122;
  *(_OWORD *)&v138[8] = v115;
  *(_OWORD *)&v138[24] = v116;
  *(_OWORD *)&v138[40] = v117;
  *(_OWORD *)&v138[56] = v118;
  long long v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"master_checksum", 15);
  long long v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)": ", 2);
  udif::details::operator<<(v99, (int *)v138);
  std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(void *)(*v99 - 24)));
  char v100 = std::locale::use_facet(&v114, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
  std::locale::~locale(&v114);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"image_variant", 13);
  uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": ", 2);
  LODWORD(v114.__locale_) = v109;
  long long v103 = udif::operator<<(v102, &v114);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
  uint64_t v104 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  char v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sector_count", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)": ", 2);
  char v106 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(*v106 - 24)));
  long long v107 = std::locale::use_facet((const std::locale *)v138, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale((std::locale *)v138);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_21E33BEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (*(char *)(v18 - 233) < 0) {
    operator delete(*(void **)(v18 - 256));
  }
  _Unwind_Resume(exception_object);
}

__n128 udif::details::endian_reverse@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  udif::checksum_type::checksum_type((udif::checksum_type *)&v8, bswap32(*(_DWORD *)a1));
  *a2 = v8;
  a2[1] = 0;
  unsigned int v7 = bswap32(*(_DWORD *)(a1 + 4));
  udif::details::checksum::_checksum::set_len(a2 + 1, &v7);
  int v5 = *a2;
  if (*a2) {
    BOOL v6 = v5 == 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 18) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      __n128 result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }
  return result;
}

_DWORD *udif::details::checksum::_checksum::set_len(_DWORD *this, const unsigned int *a2)
{
  if (*a2 >= 0x408)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_26CF3A588;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }
  *this = *a2;
  return this;
}

BOOL udif::details::checksum::operator==(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  udif::details::checksum::checksum((uint64_t)v4, a2);
  return udif::details::checksum::operator==(a1, v4);
}

uint64_t udif::details::checksum::checksum(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  BOOL v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_26CF3B630[v2])(&v7, &v6, a2 + 4);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = v11;
  return a1;
}

unsigned int *udif::details::endian_reverse@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    __n128 result = udif::details::descriptor_special::descriptor_special(&v4, v3);
    unsigned int v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t udif::details::serialize_field(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  uint64_t v2 = (_OWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    BOOL v4 = v3 == 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = 0;
  }
  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(a1 + 8));
    uint64_t v2 = (_OWORD *)(a2 + 12);
    uint64_t v5 = 4;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + ++*(_DWORD *)(this + 56) = v8;
    _OWORD *v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    long long v9 = *(_OWORD *)(a1 + 72);
    long long v10 = *(_OWORD *)(a1 + 88);
    long long v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 88) = v10;
    uint64_t v5 = 128;
  }
  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t udif::details::run_info::make_sectors_interval@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(result + 8) + v3;
  unint64_t v5 = v4 + *(void *)(result + 16);
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(void *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid UDIF, run is not within block boundary", 0x16u);
  }
  return result;
}

void udif::details::UDIF_base::get_xml_data(udif::details::UDIF_base *this)
{
}

void sub_21E33C468(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  MEMORY[0x223C24980](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void udif::details::UDIF_base::write_resources(udif::details::UDIF_base *this, const __CFDictionary *a2)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  values = a2;
  keys[0] = @"resource-fork";
  cf::make_dict((const void **)keys, (const void **)&values, 1, (CFMutableDictionaryRef *)&propertyList);
  if (DIDebugLogsEnabled())
  {
    int v3 = *__error();
    if (DIForwardLogs())
    {
      v16[0] = 0;
      DIOSLog = getDIOSLog();
      os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 41;
      *(_WORD *)long long v19 = 2080;
      *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v19[10] = 2114;
      *(void *)&v19[12] = propertyList;
      unint64_t v5 = (const char *)_os_log_send_and_compose_impl();
      if (v5)
      {
        long long v6 = (char *)v5;
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v5);
        free(v6);
      }
    }
    else
    {
      long long v7 = getDIOSLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 41;
        *(_WORD *)long long v19 = 2080;
        *(void *)&v19[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v19[10] = 2114;
        *(void *)&v19[12] = propertyList;
        _os_log_impl(&dword_21E237000, v7, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }
    *__error() = v3;
  }
  cf::serialize_to_xml_plist(propertyList, v16);
  uint64_t v8 = *(void *)(*((void *)this + 9) + 216);
  uint64_t v9 = *((void *)this + 7);
  CFDataRef v10 = v16[1];
  BytePtr = CFDataGetBytePtr(v16[0]);
  uint64_t v12 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)buf = BytePtr;
  *(void *)long long v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&void v19[8] = v10;
  *(void *)&v19[16] = v8;
  CFDataRef v20 = v10;
  char v21 = 0;
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v9 + 96))(v9, buf);
  if (*(void *)v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
  }
  if ((v13 & 0x80000000) == 0)
  {
    *(void *)(*((void *)this + 9) + 224) = v10;
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x40uLL);
  void *exception = &unk_26CF39EE0;
  long long v15 = std::generic_category();
  exception[1] = v13;
  exception[2] = v15;
  *((unsigned char *)exception + 24) = 0;
  *((unsigned char *)exception + 48) = 0;
  exception[7] = "Can't write UDIF resource part";
}

void sub_21E33C8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  _Unwind_Resume(a1);
}

void *udif::details::operator<<(void *a1, _DWORD *a2)
{
  if ((*a2 & 0x80000000) != 0)
  {
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"special: ", 9);
    if (*a2 == -1) {
      unint64_t v5 = "ddm";
    }
    else {
      unint64_t v5 = "entire_device";
    }
    if (*a2 == -1) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = 13;
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"partition_num: ", 15);
    return (void *)std::ostream::operator<<();
  }
}

void *udif::details::operator<<(void *a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Blocks header", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  int v6 = *(_DWORD *)(a2 + 36);
  long long v58 = *(_OWORD *)(a2 + 40);
  uint64_t v59 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 152);
  long long v54 = *(_OWORD *)(a2 + 136);
  long long v55 = v8;
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v56 = *(_OWORD *)(a2 + 168);
  long long v57 = v9;
  long long v10 = *(_OWORD *)(a2 + 88);
  long long v50 = *(_OWORD *)(a2 + 72);
  long long v51 = v10;
  long long v11 = *(_OWORD *)(a2 + 120);
  long long v52 = *(_OWORD *)(a2 + 104);
  long long v53 = v11;
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"signature", 9);
  unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  v60[23] = 4;
  strcpy(v60, "mish");
  long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v60, 4);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  long long v15 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"version", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  long long v17 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"first_sector_number", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
  CFDataRef v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  char v21 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sector_count", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
  long long v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  long long v24 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"data_start", 10);
  long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
  uint64_t v27 = *v26;
  long long v28 = (char *)v26 + *(void *)(*v26 - 24);
  int v29 = *((_DWORD *)v28 + 2);
  *((_DWORD *)v28 + 2) = v29 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) |= 0x200u;
  v60[0] = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, v60);
  std::ostream::operator<<();
  uint64_t v30 = *v26;
  *(_DWORD *)((char *)v26 + *(void *)(*v26 - 24) + 8) = v29;
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v30 - 24)));
  long long v31 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"decompression_buffer_req", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
  long long v33 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  LODWORD(v49.__locale_) = v6;
  long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"descriptor", 10);
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
  uint64_t v37 = udif::details::operator<<(v36, &v49);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  long long v38 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  *(_OWORD *)uint64_t v60 = v58;
  *(void *)&v60[16] = v59;
  int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"reserved", 8);
  uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
  print_buffer(v40, (uint64_t)v60, 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
  long long v41 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  *(void *)uint64_t v60 = v7;
  long long v64 = v54;
  long long v65 = v55;
  long long v66 = v56;
  long long v67 = v57;
  *(_OWORD *)&v60[8] = v50;
  long long v61 = v51;
  long long v62 = v52;
  long long v63 = v53;
  long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"checksum", 8);
  long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
  udif::details::operator<<(v43, (int *)v60);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  uint64_t v44 = std::locale::use_facet(&v49, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v49);
  std::ostream::put();
  std::ostream::flush();
  long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"run_count", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
  uint64_t v46 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
  char v47 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
  std::locale::~locale((std::locale *)v60);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_21E33D2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *udif::details::operator<<(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"type: ", 6);
  int v16 = *a2;
  int v6 = udif::operator<<(v5, &v16);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  long long v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, &v15);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
  int v10 = *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"len: ", 5);
  long long v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" data: ", 7);
  *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v13 = a2[1];
  if (v13) {
    print_buffer(v8, (uint64_t)(a2 + 2), v13);
  }
  else {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(empty)", 7);
  }
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = v10;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

void *udif::details::UDIF_base::get_compressed_types(udif::details::UDIF_base *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  {
    udif::run_type::run_type((udif::run_type *)v2, -2147483643);
    v2[1] = 0;
    udif::run_type::run_type((udif::run_type *)v3, -2147483641);
    v3[1] = 1;
    udif::run_type::run_type((udif::run_type *)v4, -2147483640);
    v4[1] = 2;
    udif::run_type::run_type((udif::run_type *)v5, -2147483642);
    v5[1] = 4;
    std::map<udif::run_type,CompressedBackend::algo_t>::map[abi:ne180100]((uint64_t)&udif::details::UDIF_base::get_compressed_types(void)::compressed_types, v2, 4);
    __cxa_atexit((void (*)(void *))std::map<udif::run_type,CompressedBackend::algo_t>::~map[abi:ne180100], &udif::details::UDIF_base::get_compressed_types(void)::compressed_types, &dword_21E237000);
  }
  return &udif::details::UDIF_base::get_compressed_types(void)::compressed_types;
}

void sub_21E33D658(_Unwind_Exception *a1)
{
}

uint64_t std::map<udif::run_type,CompressedBackend::algo_t>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *udif::details::UDIF_base::find_compression_algo_by_run@<X0>(udif::details::UDIF_base *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  compressed_types = (udif::details::UDIF_base *)udif::details::UDIF_base::get_compressed_types(a1);
  uint64_t v6 = qword_267D2B170;
  if (!qword_267D2B170) {
    goto LABEL_12;
  }
  unsigned int v7 = *a2;
  long long v8 = &qword_267D2B170;
  do
  {
    unsigned int v9 = *(_DWORD *)(v6 + 28);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      long long v11 = (uint64_t *)v6;
    }
    else {
      long long v11 = (uint64_t *)(v6 + 8);
    }
    if (v10) {
      long long v8 = (uint64_t *)v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 != &qword_267D2B170 && v7 >= *((_DWORD *)v8 + 7))
  {
    __n128 result = udif::details::UDIF_base::get_compressed_types(compressed_types);
    *(_DWORD *)a3 = *((_DWORD *)v8 + 8);
    char v13 = 1;
  }
  else
  {
LABEL_12:
    __n128 result = udif::details::UDIF_base::get_compressed_types(compressed_types);
    char v13 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 4) = v13;
  return result;
}

uint64_t **udif::details::UDIF_base::update_compressed_types(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  if (HIBYTE(*a3) == 128)
  {
    unsigned int v9 = result;
    int v14 = *a3;
    ((void (*)(_DWORD **__return_ptr))(*result)[2])(v13);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unsupported compressed run (", 28);
      int v15 = *a3;
      udif::operator<<(v13, &v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }
    v13[0] = a3;
    BOOL v10 = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      BOOL v10 = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13)[5];
    }
    if (v10 > a4) {
      a4 = v10;
    }
    v13[0] = a3;
    __n128 result = std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(a2, a3, (uint64_t)&std::piecewise_construct, v13);
    result[5] = a4;
    *((unsigned char *)v9 + 88) = 1;
    long long v11 = v9[12];
    if (v11 <= a5) {
      long long v11 = a5;
    }
    v9[12] = v11;
  }
  return result;
}

void sub_21E33D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void udif::details::UDIF_base::create_backends(uint64_t a1, void *a2)
{
  udif::run_type::run_type((udif::run_type *)&v11, 1);
  udif::details::UDIF_base::add_backend_to_map(a1, &v11, 0);
  uint64_t v6 = (void *)*a2;
  int v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      int v10 = *((_DWORD *)v5 + 8);
      udif::details::UDIF_base::add_backend_to_map(a1, &v10, v5[5]);
      unsigned int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unint64_t v5 = v8;
        }
        while (!v9);
      }
      unint64_t v5 = v8;
    }
    while (v8 != v4);
  }
}

void udif::details::UDIF_base::add_backend_to_map(uint64_t a1, int *a2, uint64_t a3)
{
  if (*a2 != 1)
  {
    int v13 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(void *)a1 + 16))(&v14, a1, &v13);
    if (BYTE4(v14))
    {
      int v11 = v14;
      CompressedBackend::make_backend((void *)(a1 + 56), &v11, a3);
    }
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: compression algo is invalid", 0x16u);
  }
  udif::run_type::run_type((udif::run_type *)&v15, 1);
  *(void *)&long long v12 = &v15;
  int v4 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>((uint64_t **)(a1 + 104), (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, (_DWORD **)&v12);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  unint64_t v5 = *(uint64_t **)(a1 + 64);
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = (std::__shared_weak_count *)v4[6];
  void v4[5] = v6;
  v4[6] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_21E33DB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void udif::details::UDIF_base::make_backend_contexts(udif::details::UDIF_base *this@<X0>, uint64_t a2@<X8>)
{
  long long v23 = 0;
  uint64_t v24 = 0;
  long long v22 = (uint64_t *)&v23;
  (*(void (**)(long long *__return_ptr))(**((void **)this + 7) + 72))(&v21);
  int v4 = (udif::details::UDIF_base *)*((void *)this + 13);
  if (v4 != (udif::details::UDIF_base *)((char *)this + 112))
  {
    while (1)
    {
      unint64_t v5 = (const void *)*((void *)v4 + 5);
      if (v5 == *((const void **)this + 7)) {
        break;
      }
      if (v5)
      {
        if (v6)
        {
          unsigned int v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v19 = (std::__shared_weak_count *)*((void *)&v21 + 1);
          if (*((void *)&v21 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v6 + 176))(&v20);
          long long v25 = (_DWORD *)((char *)v4 + 32);
          long long v8 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(&v22, (unsigned int *)v4 + 8, (uint64_t)&std::piecewise_construct, &v25);
          long long v9 = v20;
          long long v20 = 0uLL;
          int v10 = (std::__shared_weak_count *)v8[6];
          *(_OWORD *)(v8 + 5) = v9;
          if (v10)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            if (*((void *)&v20 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
            }
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
LABEL_17:
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
        }
      }
      int v13 = (udif::details::UDIF_base *)*((void *)v4 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = *(udif::details::UDIF_base **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (udif::details::UDIF_base *)*((void *)v4 + 2);
          BOOL v15 = *(void *)v14 == (void)v4;
          int v4 = v14;
        }
        while (!v15);
      }
      int v4 = v14;
      if (v14 == (udif::details::UDIF_base *)((char *)this + 112)) {
        goto LABEL_25;
      }
    }
    *(void *)&long long v20 = (char *)v4 + 32;
    int v11 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(&v22, (unsigned int *)v4 + 8, (uint64_t)&std::piecewise_construct, (_DWORD **)&v20);
    long long v12 = v21;
    if (*((void *)&v21 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = (std::__shared_weak_count *)v11[6];
    *(_OWORD *)(v11 + 5) = v12;
    goto LABEL_17;
  }
LABEL_25:
  int v16 = v23;
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = a2 + 8;
  uint64_t v18 = v24;
  *(void *)(a2 + 16) = v24;
  if (v18)
  {
    void v16[2] = v17;
    long long v22 = (uint64_t *)&v23;
    long long v23 = 0;
    uint64_t v24 = 0;
    int v16 = 0;
  }
  else
  {
    *(void *)a2 = v17;
  }
  *(_OWORD *)(a2 + 24) = v21;
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy((uint64_t)&v22, v16);
}

void sub_21E33DDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t udif::details::UDIF_base::validate_runs(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 8);
  if (v1 != (void *)(this + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        unsigned int v7 = v1;
        *(void *)&long long v9 = "udif::details::UDIF_base::validate_runs()";
        *((void *)&v9 + 1) = 39;
        int v10 = 16;
        di_log::logger<di_log::log_printer<417ul>>::logger(v11, &v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Run interval: ", 14);
        boost::icl::operator<<<char,std::char_traits<char>,boost::icl::discrete_interval<unsigned long long,std::less>>(v12, (uint64_t)(v7 + 4));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" of type ", 9);
        LODWORD(v8) = *((_DWORD *)v7 + 14);
        udif::operator<<(v12, &v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" has size ", 10);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"which is larger than allowed ", 29);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" or exceeds size_t size ", 24);
        uint64_t v8 = -1;
        std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<417ul>>,unsigned long,0>((uint64_t)v11);
        di_log::logger<di_log::log_printer<417ul>>::~logger((uint64_t)v11);
        exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
        DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: compressed runs should be <= 1MB", 0x16u);
      }
      uint64_t v2 = (void *)v1[1];
      if (v2)
      {
        do
        {
          int v3 = v2;
          uint64_t v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          int v3 = (void *)v1[2];
          BOOL v4 = *v3 == (void)v1;
          uint64_t v1 = v3;
        }
        while (!v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != (void *)(this + 16));
  }
  return this;
}

void sub_21E33DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  di_log::logger<di_log::log_printer<417ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<417ul>>,unsigned long,0>(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<417ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<417ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3B658;
  a1[45] = &unk_26CF3B758;
  a1[46] = &unk_26CF3B780;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3B658;
  a1[45] = &unk_26CF3B6E0;
  a1[46] = &unk_26CF3B708;
  return a1;
}

void sub_21E33E138(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t *udif::details::UDIF_base::add_block(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::find<boost::icl::discrete_interval<unsigned long long,std::less>>(a1 + 32, a2))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Invalid UDIF format, contains intersected blocks", 0x16u);
  }
  int v6 = *((_DWORD *)a3 + 2);
  long long v19 = *(_OWORD *)((char *)a3 + 76);
  long long v20 = *(_OWORD *)((char *)a3 + 92);
  long long v21 = *(_OWORD *)((char *)a3 + 108);
  long long v22 = *(_OWORD *)((char *)a3 + 124);
  long long v15 = *(_OWORD *)((char *)a3 + 12);
  long long v16 = *(_OWORD *)((char *)a3 + 28);
  long long v17 = *(_OWORD *)((char *)a3 + 44);
  long long v18 = *(_OWORD *)((char *)a3 + 60);
  uint64_t v7 = *a3;
  uint64_t v12 = *(void *)(a2 + 16);
  long long v11 = *(_OWORD *)a2;
  uint64_t v13 = v7;
  int v14 = v6;
  char v23 = 1;
  return boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(v5, (uint64_t)&v11);
}

void udif::details::UDIF_base::generate_blocks(udif::details::UDIF_base *this, CFArrayRef theArray)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  CFArrayGetCount(theArray);
  operator new[]();
}

void sub_21E33E8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29)
{
}

void *di_log::logger<di_log::log_printer<458ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<458ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3B878;
  a1[45] = &unk_26CF3B978;
  a1[46] = &unk_26CF3B9A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3B878;
  a1[45] = &unk_26CF3B900;
  a1[46] = &unk_26CF3B928;
  return a1;
}

void sub_21E33EA74(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<500ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<500ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3BA98;
  a1[45] = &unk_26CF3BB98;
  a1[46] = &unk_26CF3BBC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3BA98;
  a1[45] = &unk_26CF3BB20;
  a1[46] = &unk_26CF3BB48;
  return a1;
}

void sub_21E33EBE0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t *udif::details::UDIF_base::get_dummy_runs(udif::details::UDIF_base *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  {
    udif::run_type::run_type((udif::run_type *)&v2, 0);
    long long v3 = xmmword_21E3A4430;
    char v4 = 2;
    int v5 = v2;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::map[abi:ne180100]((uint64_t)&udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs, (unint64_t *)&v3, 1);
    __cxa_atexit((void (*)(void *))std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::~map[abi:ne180100], &udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs, &dword_21E237000);
  }
  return &udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs;
}

void sub_21E33ED38(_Unwind_Exception *a1)
{
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

udif::details::UDIF_base *udif::details::UDIF_base::create_iterator(udif::details::UDIF_base *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  char v7 = 2;
  __n128 result = (udif::details::UDIF_base *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)this + 8, (uint64_t)v6);
  if ((udif::details::UDIF_base *)((char *)this + 16) == result)
  {
    udif::details::UDIF_base::get_dummy_runs(result);
    return (udif::details::UDIF_base *)udif::details::UDIF_base::get_dummy_runs(void)::dummy_runs;
  }
  return result;
}

void udif::details::UDIF_base::_get_runs_for_io(udif::details::UDIF_base *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  iterator = udif::details::UDIF_base::create_iterator(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    long long v9 = iterator;
    int v10 = (udif::details::UDIF_base *)((char *)a1 + 16);
    unint64_t v11 = a2;
    while (v9 != v10)
    {
      uint64_t v12 = *((void *)v9 + 4);
      unint64_t v13 = v12 << 9;
      if (v11 < v12 << 9) {
        goto LABEL_11;
      }
      uint64_t v14 = (*((void *)v9 + 5) - v12) << 9;
      if (v14 - (v11 - v13) >= v5) {
        unint64_t v15 = v5;
      }
      else {
        unint64_t v15 = v14 - (v11 - v13);
      }
      unsigned int v16 = *((_DWORD *)v9 + 14);
      unsigned int v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        long long v30 = *((_OWORD *)v9 + 4);
        *(void *)&long long v31 = v13;
        *((void *)&v31 + 1) = v14;
        *(void *)&long long v32 = v11 - a2;
        *((void *)&v32 + 1) = v11 - v13;
      }
      else
      {
        *(void *)&long long v30 = *((void *)v9 + 8) + v11 - v13;
        *((void *)&v30 + 1) = v15;
        *(void *)&long long v31 = v11;
        *((void *)&v31 + 1) = v15;
        long long v32 = v11 - a2;
      }
      unint64_t v33 = v15;
      uint64_t v22 = a4[1];
      uint64_t v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a4, v23, (const char *)1, (uint64_t)&v29, &v34);
      }
      else
      {
        *(_DWORD *)uint64_t v23 = v16;
        long long v24 = v30;
        long long v25 = v31;
        long long v26 = v32;
        *(void *)(v23 + ++*(_DWORD *)(this + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        ++a4[1];
      }
      uint64_t v27 = (udif::details::UDIF_base *)*((void *)v9 + 1);
      if (v27)
      {
        do
        {
          long long v9 = v27;
          uint64_t v27 = *(udif::details::UDIF_base **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          long long v28 = v9;
          long long v9 = (udif::details::UDIF_base *)*((void *)v9 + 2);
        }
        while (*(udif::details::UDIF_base **)v9 != v28);
      }
LABEL_23:
      v11 += v15;
      v5 -= v15;
      if (!v5) {
        return;
      }
    }
    unint64_t v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5) {
      unint64_t v15 = v5;
    }
    else {
      unint64_t v15 = v13 - v11;
    }
    udif::run_type::run_type((udif::run_type *)&v29, 0);
    long long v30 = 0uLL;
    *(void *)&long long v31 = v11;
    *((void *)&v31 + 1) = v15;
    long long v32 = v11 - a2;
    unint64_t v33 = v15;
    uint64_t v17 = a4[1];
    uint64_t v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a4, v18, (const char *)1, (uint64_t)&v29, &v34);
    }
    else
    {
      *(_DWORD *)uint64_t v18 = v29;
      long long v19 = v30;
      long long v20 = v31;
      long long v21 = v32;
      *(void *)(v18 + ++*(_DWORD *)(this + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + 8) = v19;
      ++a4[1];
    }
    goto LABEL_23;
  }
}

uint64_t udif::details::UDIF_base::create_runs_range_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(a1 + 8, a2);
  std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>(v3, a2);
  return v4;
}

uint64_t udif::details::UDIF_base::create_runs_iterator(udif::details::UDIF_base *this)
{
  return *((void *)this + 1);
}

uint64_t udif::details::UDIF_base::print_checksum_verification_status(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  v18[19] = *MEMORY[0x263EF8340];
  udif::details::checksum::checksum((uint64_t)v16, a3);
  if (udif::details::checksum::operator==(a4, v16))
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    di_log::logger<di_log::log_printer<601ul>>::logger(v16, &v14);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" - same ", 8);
    checksum::operator<<((uint64_t)&v17, a3);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf((uint64_t)v16);
  }
  else
  {
    *(void *)&long long v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + 1) = 60;
    int v15 = 0;
    di_log::logger<di_log::log_printer<603ul>>::logger(v16, &v14);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" - different calculated: <", 26);
    checksum::operator<<((uint64_t)&v17, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"> real: <", 9);
    udif::details::operator<<(&v17, a4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)">", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf((uint64_t)v16);
  }
  return MEMORY[0x223C24910](v18);
}

void sub_21E33F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<601ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<601ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<601ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3BCB8;
  a1[45] = &unk_26CF3BDB8;
  a1[46] = &unk_26CF3BDE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3BCB8;
  a1[45] = &unk_26CF3BD40;
  a1[46] = &unk_26CF3BD68;
  return a1;
}

void sub_21E33F340(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<603ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<603ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3BED8;
  a1[45] = &unk_26CF3BFD8;
  a1[46] = &unk_26CF3C000;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3BED8;
  a1[45] = &unk_26CF3BF60;
  a1[46] = &unk_26CF3BF88;
  return a1;
}

void sub_21E33F4A8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  return a1;
}

void udif::details::UDIF_base::UDIF_base(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_26CF3B3E8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = a2[1];
  uint64_t v3 = a2[2];
  *(void *)(a1 + 64) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  compressed_types = (udif::details::UDIF_base *)udif::details::UDIF_base::get_compressed_types((udif::details::UDIF_base *)a1);
  udif::details::UDIF_base::get_dummy_runs(compressed_types);
  *(unsigned char *)(a1 + 89) = *(void *)(*(void *)(a1 + 72) + 216) >= *(void *)(*(void *)(a1 + 72) + 32)
                                                                   + *(void *)(*(void *)(a1 + 72) + 24);
  udif::details::UDIF_base::get_rsrc_iterators((udif::details::UDIF_base *)a1);
}

void sub_21E33F804(_Unwind_Exception *a1)
{
  std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair(v7 - 168);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy(v4, *(void **)(v1 + 112));
  uint64_t v9 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v9) {
    MEMORY[0x223C249A0](v9, 0x1000C407784F2AFLL);
  }
  int v10 = *(std::__shared_weak_count **)(v1 + 64);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v3, *v6);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v2, *v5);
  _Unwind_Resume(a1);
}

void udif::details::UDIF_base::get_rsrc_iterators(udif::details::UDIF_base *this)
{
}

void sub_21E33FA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  udif::xml_rsrc_iterator::~xml_rsrc_iterator((const void **)va);
  udif::xml_rsrc_iterator::~xml_rsrc_iterator((const void **)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

void udif::xml_rsrc_iterator::~xml_rsrc_iterator(const void **this)
{
  if (*((unsigned char *)this + 24)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(this + 2);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *di_log::logger<di_log::log_printer<638ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<638ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3C0F8;
  a1[45] = &unk_26CF3C1F8;
  a1[46] = &unk_26CF3C220;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3C0F8;
  a1[45] = &unk_26CF3C180;
  a1[46] = &unk_26CF3C1A8;
  return a1;
}

void sub_21E33FB98(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  return a1;
}

void udif::details::UDIF_base::get_identifier(udif::details::UDIF_base *this)
{
}

void sub_21E33FDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a10);
  _Unwind_Resume(a1);
}

void udif::details::UDIF_base::get_resources(udif::details::UDIF_base *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  udif::details::UDIF_base::get_xml_data(this);
}

void sub_21E3400EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)va);
  if (v5) {
    MEMORY[0x223C24980](v5, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

udif::details::blocks *udif::details::blocks::blocks(udif::details::blocks *this, const char *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  uint64_t v4 = (void *)((char *)this + 16);
  *((void *)this + 4) = 0xFFFFFFFE00000000;
  uint64_t v5 = (_DWORD *)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v6 = (char *)this + 40;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  udif::checksum_type::checksum_type((udif::details::blocks *)((char *)this + 64));
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 50) = 0;
  int v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  smart_enums::validators::value<unsigned int>((uint64_t)"blocks_signature", v7, &v25, 1);
  *(_DWORD *)this = 1752394093;
  int v8 = bswap32(*((_DWORD *)a2 + 1));
  LODWORD(v25) = 1;
  smart_enums::validators::value<unsigned int>((uint64_t)"version", v8, &v25, 1);
  *((_DWORD *)this + 1) = 1;
  *((void *)this + 1) = bswap64(*((void *)a2 + 1));
  *uint64_t v4 = bswap64(*((void *)a2 + 2));
  *((void *)this + 3) = bswap64(*((void *)a2 + 3));
  *uint64_t v5 = bswap32(*((_DWORD *)a2 + 8));
  LODWORD(v25) = *((_DWORD *)a2 + 9);
  udif::details::endian_reverse((unsigned int *)&v25, (unsigned int *)v24);
  *((_DWORD *)this + 9) = *(_DWORD *)v24;
  long long v9 = *(_OWORD *)(a2 + 40);
  *((void *)v6 + 2) = *((void *)a2 + 7);
  *(_OWORD *)uint64_t v6 = v9;
  udif::checksum_type::checksum_type((udif::checksum_type *)v24);
  long long v10 = *((_OWORD *)a2 + 11);
  *(_OWORD *)&v24[96] = *((_OWORD *)a2 + 10);
  *(_OWORD *)&v24[112] = v10;
  *(void *)&v24[128] = *((void *)a2 + 24);
  long long v11 = *((_OWORD *)a2 + 7);
  *(_OWORD *)&v24[32] = *((_OWORD *)a2 + 6);
  *(_OWORD *)&v24[48] = v11;
  long long v12 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&v24[64] = *((_OWORD *)a2 + 8);
  *(_OWORD *)&v24[80] = v12;
  long long v13 = *((_OWORD *)a2 + 5);
  *(_OWORD *)long long v24 = *((_OWORD *)a2 + 4);
  *(_OWORD *)&v24[16] = v13;
  long long v30 = *(_OWORD *)&v24[72];
  long long v31 = *(_OWORD *)&v24[88];
  long long v32 = *(_OWORD *)&v24[104];
  long long v33 = *(_OWORD *)&v24[120];
  long long v26 = *(_OWORD *)&v24[8];
  long long v27 = *(_OWORD *)&v24[24];
  long long v28 = *(_OWORD *)&v24[40];
  long long v29 = *(_OWORD *)&v24[56];
  uint64_t v25 = *(void *)v24;
  udif::details::endian_reverse((uint64_t)&v25, (int *)&v15);
  *((void *)this + 8) = v15;
  *(_OWORD *)((char *)this + 136) = v20;
  *(_OWORD *)((char *)this + 152) = v21;
  *(_OWORD *)((char *)this + 168) = v22;
  *(_OWORD *)((char *)this + 184) = v23;
  *(_OWORD *)((char *)this + 72) = v16;
  *(_OWORD *)((char *)this + 88) = v17;
  *(_OWORD *)((char *)this + 104) = v18;
  *(_OWORD *)((char *)this + 120) = v19;
  *((_DWORD *)this + 50) = bswap32(*((_DWORD *)a2 + 50));
  return this;
}

void sub_21E3403B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

udif::details::run_t *udif::details::run_t::run_t(udif::details::run_t *this, const char *a2)
{
  uint64_t v4 = udif::run_type::run_type(this);
  *((_DWORD *)v4 + 9) = 0;
  *(_OWORD *)((char *)v4 + 20) = 0u;
  *(_OWORD *)((char *)v4 + 4) = 0u;
  udif::run_type::run_type((udif::run_type *)&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)this = v6;
  *((_DWORD *)this + 1) = bswap32(*((_DWORD *)a2 + 1));
  *((void *)this + 1) = bswap64(*((void *)a2 + 1));
  *((void *)this + 2) = bswap64(*((void *)a2 + 2));
  *((void *)this + 3) = bswap64(*((void *)a2 + 3));
  *((void *)this + 4) = bswap64(*((void *)a2 + 4));
  return this;
}

const void **udif::details::create_data_wrap_dict@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X4>, CFDictionaryRef *a5@<X8>)
{
  v31[19] = *MEMORY[0x263EF8340];
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 23) >= 0) {
    long long v10 = (const char *)a1;
  }
  else {
    long long v10 = *(const char **)a1;
  }
  CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v10, 0x8000100u);
  CFTypeRef cf = 0;
  CFStringRef v23 = v11;
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v12 = (const char *)a2;
    }
    else {
      long long v12 = *(const char **)a2;
    }
    CFTypeRef cf = CFStringCreateWithCString(v9, v12, 0x8000100u);
  }
  else
  {
    CFTypeRef cf = &stru_26CF47AE8;
  }
  keys[0] = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)keys);
  std::to_string(&v21, a3);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v13 = &v21;
  }
  else {
    long long v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  CFStringRef v20 = CFStringCreateWithCString(v9, (const char *)v13, 0x600u);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)keys);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v26 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((unsigned char *)&v26 + *(void *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, (char *)values);
  *(void *)&v28[*(void *)(v26 - 24)] = 4;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]((uint64_t)&v26 + 8, &v19);
  keys[0] = *(void **)MEMORY[0x263F8C2B8];
  uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)keys + *((void *)keys[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v26 = v14;
  *((void *)&v26 + 1) = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](v31);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v19;
  }
  else {
    uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  CFStringRef v18 = CFStringCreateWithCString(v9, (const char *)v15, 0x600u);
  *(_OWORD *)keys = xmmword_2644A2AE0;
  long long v26 = *(_OWORD *)off_2644A2AF0;
  long long v27 = @"CFName";
  values[0] = a4;
  values[1] = (void *)v23;
  values[2] = (void *)v20;
  values[3] = (void *)v18;
  if (*(unsigned char *)(a2 + 24)) {
    CFIndex v16 = 5;
  }
  else {
    CFIndex v16 = 4;
  }
  values[4] = (void *)cf;
  *a5 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, v16, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
  return CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v23);
}

void sub_21E340814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C24910](a1 + 128);
  return a1;
}

void *udif::operator<<(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"type: ", 6);
  int v26 = *a2;
  int v6 = udif::operator<<(v5, &v26);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" data: ", 7);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) |= 0x200u;
  CFAllocatorRef v9 = (void *)std::ostream::operator<<();
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/", 1);
  uint64_t v11 = *v10;
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) &= ~0x200u;
  long long v12 = (void *)std::ostream::operator<<();
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" logical: ", 10);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  uint64_t v15 = (void *)std::ostream::operator<<();
  CFIndex v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/", 1);
  uint64_t v17 = *v16;
  *(_DWORD *)((char *)v16 + *(void *)(*v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v16 + *(void *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) &= ~0x200u;
  CFStringRef v18 = (void *)std::ostream::operator<<();
  std::string v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" io: ", 5);
  uint64_t v20 = *v19;
  *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) |= 0x200u;
  std::string v21 = (void *)std::ostream::operator<<();
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)",", 1);
  uint64_t v23 = *v22;
  *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + 8) &= ~0x200u;
  long long v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v4;
  return a1;
}

{
  int v3;
  uint64_t i;
  int v5;
  char v7;
  uint64_t vars8;

  uint64_t v3 = *a2;
  if (*a2)
  {
    for (uint64_t i = 0; i != 18; i += 6)
    {
      uint64_t v5 = udif::header::header_flags::strings[i];
      if ((v5 & v3) != 0)
      {
        v3 &= ~v5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *(void *)&udif::header::header_flags::strings[i + 2], *(void *)&udif::header::header_flags::strings[i + 4]);
        if (v3)
        {
          int v7 = 44;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v7, 1);
        }
      }
    }
    return a1;
  }
  else
  {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"none", 4);
  }
}

uint64_t udif::xml_rsrc_iterator::get_type(udif::xml_rsrc_iterator *this)
{
  uint64_t result = CFStringGetOSType(*(const __CFString **)(*(void *)this + 8 * *((void *)this + 4)));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"UDIF: Failed converting type array string (", 43);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") to type", 9);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  return result;
}

void sub_21E340E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *udif::xml_rsrc_iterator::get_value(CFDictionaryRef *this)
{
  uint64_t result = CFDictionaryGetValue(this[2], *((const void **)*this + (void)this[4]));
  if (!result)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "UDIF: Can't get resource array", 0x16u);
  }
  return result;
}

BOOL udif::xml_rsrc_iterator::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a1 + 24) != 0) == (v3 != 0)) {
      return *(void *)(a1 + 32) == *(void *)(a2 + 32);
    }
    return 0;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

void UDIF_header::UDIF_header(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = *a2;
  uint64_t v2 = a2[1];
  a1[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  operator new[]();
}

void sub_21E3411F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<898ul>>::~logger((uint64_t)va);
  MEMORY[0x223C24980](v5, 0x1000C8077774924);
  int v7 = (std::__shared_weak_count *)v4[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *v4;
  *BOOL v4 = 0;
  if (v8) {
    MEMORY[0x223C249A0](v8, 0x1000C407784F2AFLL);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<898ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<898ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3C318;
  a1[45] = &unk_26CF3C418;
  a1[46] = &unk_26CF3C440;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3C318;
  a1[45] = &unk_26CF3C3A0;
  a1[46] = &unk_26CF3C3C8;
  return a1;
}

void sub_21E34138C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *UDIF_header::UDIF_header(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *uint64_t result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<85ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<85ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3B5C0;
  di_log::logger_buf<di_log::log_printer<85ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<85ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E341984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<85ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<85ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 85;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 85;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

udif::checksum_type *udif::checksum_type::checksum_type(udif::checksum_type *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = a2;
  v4[0] = xmmword_21E3A3E80;
  v4[1] = xmmword_21E3A4440;
  uint64_t v5 = 0x900000008;
  int v6 = 10;
  smart_enums::validators::value<unsigned int>((uint64_t)"checksum_type", a2, v4, 11);
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<udif::details::checksum::checksum(checksum::Any<locks::None,checksum::None,checksum::CRC32> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>@<X0>(uint64_t a1@<X8>)
{
  return udif::details::checksum::checksum<locks::None,checksum::None<locks::None>>(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<udif::details::checksum::checksum(checksum::Any<locks::None,checksum::None,checksum::CRC32> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,checksum::None<locks::None>,checksum::CRC32<locks::None>> const&>@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return udif::details::checksum::checksum<locks::None,checksum::CRC32<locks::None>>(a2, (uint64_t)a1, a1);
}

uint64_t udif::details::checksum::checksum<locks::None,checksum::None<locks::None>>(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  udif::checksum_type::checksum_type((udif::checksum_type *)&v3, 0);
  *(void *)a1 = v3;
  unsigned int v4 = 0;
  udif::details::checksum::_checksum::set_len(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

uint64_t udif::details::checksum::checksum<locks::None,checksum::CRC32<locks::None>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  udif::checksum_type::checksum_type((udif::checksum_type *)&v6, 2);
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  unsigned int v7 = 32;
  udif::details::checksum::_checksum::set_len(&v8, &v7);
  *(_DWORD *)CFAllocatorRef v9 = a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *udif::details::descriptor_special::descriptor_special(unsigned int *this, unsigned int a2)
{
  *this = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "descriptor_special";
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &unk_26CF39B98;
    *((_DWORD *)exception + 8) = a2;
  }
  return this;
}

udif::run_type *udif::run_type::run_type(udif::run_type *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = a2;
  v4[0] = xmmword_21E3A4450;
  v4[1] = xmmword_21E3A4460;
  _OWORD v4[2] = xmmword_21E3A4470;
  unint64_t v5 = 0x8000000880000007;
  int v6 = -1;
  smart_enums::validators::value<unsigned int>((uint64_t)"run_type", a2, v4, 15);
  return this;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<417ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<417ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3B7F0;
  di_log::logger_buf<di_log::log_printer<417ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<417ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<417ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<417ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 417;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 417;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<458ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<458ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3BA10;
  di_log::logger_buf<di_log::log_printer<458ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<458ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E342BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<458ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<458ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 458;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 458;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<500ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<500ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3BC30;
  di_log::logger_buf<di_log::log_printer<500ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<500ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E343364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<500ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<500ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 500;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 500;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<601ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<601ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3BE50;
  di_log::logger_buf<di_log::log_printer<601ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<601ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E343AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<601ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<601ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 601;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 601;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<603ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<603ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3C070;
  di_log::logger_buf<di_log::log_printer<603ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<603ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34424C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<603ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<603ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 603;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 603;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<638ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<638ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3C290;
  di_log::logger_buf<di_log::log_printer<638ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<638ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3449C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<638ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<638ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 638;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 638;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t udif::xml_rsrc_iterator::xml_rsrc_iterator(uint64_t a1, void *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v7) {
    CFRetain(v7);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = a4;
  return a1;
}

void sub_21E344C6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::pair[abi:ne180100]<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(result + ++*(_DWORD *)(this + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(void *)(result + ++*(_DWORD *)(this + 56) = 0;
    *(void *)(result + ++*(_DWORD *)(this + 56) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(result + 64) = 1;
  }
  *(void *)(result + 72) = *(void *)(a3 + 32);
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<898ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<898ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3C4B0;
  di_log::logger_buf<di_log::log_printer<898ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<898ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E345228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<898ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<898ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 898;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    CFAllocatorRef v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 898;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

_DWORD *udif::header::header_flags::header_flags(_DWORD *this, int a2)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  *this = a2;
  uint64_t v5 = 0x200000001;
  int v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4;
  }
  while (v2 != 12);
  if (a2)
  {
    int v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_flags";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = v3;
  }
  return this;
}

udif::checksum_type *udif::checksum_type::checksum_type(udif::checksum_type *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = 0;
  v3[0] = xmmword_21E3A3E80;
  v3[1] = xmmword_21E3A4440;
  uint64_t v4 = 0x900000008;
  int v5 = 10;
  smart_enums::validators::value<unsigned int>((uint64_t)"checksum_type", 0, v3, 11);
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<85ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3B5C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34567C(_Unwind_Exception *a1)
{
}

uint64_t *print_buffer(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  if (a3 != 1)
  {
    uint64_t v7 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
      char v13 = 48;
      uint64_t v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v13);
      *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
      ++a2;
      CFAllocatorRef v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      --v7;
    }
    while (v7);
    uint64_t v4 = *a1;
  }
  *(_DWORD *)((char *)a1 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v12 = 48;
  uint64_t v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v12);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v5;
  return a1;
}

uint64_t std::map<udif::run_type,CompressedBackend::algo_t>::map[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__emplace_hint_unique_key_args<udif::run_type,std::pair<udif::run_type const,CompressedBackend::algo_t> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_21E345A28(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__emplace_hint_unique_key_args<udif::run_type,std::pair<udif::run_type const,CompressedBackend::algo_t> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__find_equal<udif::run_type>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,CompressedBackend::algo_t>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,CompressedBackend::algo_t>>>::__find_equal<udif::run_type>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      CFAllocatorRef v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        CFAllocatorRef v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **std::__tree<std::__value_type<udif::run_type,unsigned long long>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,unsigned long long>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,unsigned long long>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        CFAllocatorRef v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFAllocatorRef v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t di_log::logger_buf<di_log::log_printer<417ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3B7F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E345DB0(_Unwind_Exception *a1)
{
}

uint64_t std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::find<boost::icl::discrete_interval<unsigned long long,std::less>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = (*(unsigned char *)(a2 + 16) & 2) != 0 ? *(void *)a2 : *(void *)a2 + 1;
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = (*(unsigned char *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      CFAllocatorRef v9 = (uint64_t *)v3;
    }
    else {
      CFAllocatorRef v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2) {
    return v2;
  }
  unint64_t v10 = *(void *)(v6 + 32);
  if ((*(unsigned char *)(v6 + 48) & 2) == 0) {
    ++v10;
  }
  if ((unint64_t)(*(unsigned char *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1 < v10) {
    return v2;
  }
  return v6;
}

uint64_t *boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return (uint64_t *)(a1 + 1);
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }
  unint64_t v5 = (uint64_t *)(a2 + 24);
  if (boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<std::optional<udif::details::block_info>>,true>::is_absorbable(a2 + 24)) {
    return (uint64_t *)(a1 + 1);
  }
  uint64_t result = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    BOOL v8 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    CFAllocatorRef v9 = (uint64_t **)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v11 = v10;
        unint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        CFAllocatorRef v9 = (uint64_t **)v11;
      }
      while (v12);
    }
    char v13 = v11;
    uint64_t v16 = v8;
    boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(a1, &v14, v5, &v16, &v13);
    return v16;
  }
  return result;
}

BOOL boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<std::optional<udif::details::block_info>>,true>::is_absorbable(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  LOBYTE(v2) = 0;
  char v12 = 0;
  if (byte_267D2B00C)
  {
    uint64_t v2 = boost::icl::identity_element<std::optional<udif::details::block_info>>::value(void)::_value;
    int v3 = dword_267D2AF88;
    long long v8 = unk_267D2AFCC;
    long long v9 = unk_267D2AFDC;
    long long v10 = unk_267D2AFEC;
    long long v11 = unk_267D2AFFC;
    long long v4 = *(_OWORD *)algn_267D2AF8C;
    long long v5 = unk_267D2AF9C;
    long long v6 = unk_267D2AFAC;
    long long v7 = unk_267D2AFBC;
    char v12 = 1;
  }
  return std::operator==[abi:ne180100]<udif::details::block_info,udif::details::block_info>(a1, (uint64_t)&v2);
}

uint64_t boost::icl::interval_base_map<boost::icl::split_interval_map<unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::optional<udif::details::block_info>,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(uint64_t **a1, long long *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  long long v8 = *a5;
  long long v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      long long v10 = v9;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    long long v11 = *a5;
    do
    {
      long long v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      long long v11 = v10;
    }
    while (!v12);
  }
  uint64_t v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((void *)&v37 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    int v17 = (long long *)((char *)a3 + 12);
    do
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
          if (*((void *)&v41 + 1) >= (unint64_t)v41) {
            goto LABEL_24;
          }
        }
        else if ((unint64_t)v41 < *((void *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }
      else if ((unint64_t)v41 < *((void *)&v41 + 1) && (unint64_t)(v41 + 1) < *((void *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        char v53 = 0;
        if (*((unsigned char *)a3 + 140))
        {
          uint64_t v43 = *a3;
          int v44 = *((_DWORD *)a3 + 2);
          long long v18 = *(_OWORD *)((char *)a3 + 92);
          long long v49 = *(_OWORD *)((char *)a3 + 76);
          long long v50 = v18;
          long long v19 = *(_OWORD *)((char *)a3 + 124);
          long long v51 = *(_OWORD *)((char *)a3 + 108);
          long long v52 = v19;
          long long v20 = *(_OWORD *)((char *)a3 + 28);
          long long v45 = *v17;
          long long v46 = v20;
          long long v21 = *(_OWORD *)((char *)a3 + 60);
          long long v47 = *(_OWORD *)((char *)a3 + 44);
          long long v48 = v21;
          char v53 = 1;
        }
        *a4 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }
      long long v31 = v39;
      uint64_t v32 = v40;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      long long v39 = v41;
      LOBYTE(v40) = v42;
      uint64_t v15 = *a4;
      unsigned int v22 = (uint64_t *)(*a4)[1];
      uint64_t v23 = *a4;
      if (v22)
      {
        do
        {
          uint64_t v13 = v22;
          unsigned int v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v23[2];
          BOOL v12 = *v13 == (void)v23;
          uint64_t v23 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
    }
    while (v13 != v10);
  }
  long long v27 = v39;
  uint64_t v28 = v40;
  uint64_t result = boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    if ((unint64_t)v29 >= *((void *)&v29 + 1)) {
      goto LABEL_44;
    }
    unint64_t v26 = v29 + 1;
    goto LABEL_40;
  }
  if (v30 != 3)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    unint64_t v26 = v29;
LABEL_40:
    if (v26 >= v25) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  if (*((void *)&v29 + 1) < (unint64_t)v29) {
    goto LABEL_44;
  }
LABEL_41:
  long long v41 = v29;
  uint64_t v42 = v30;
  LOBYTE(v43) = 0;
  char v53 = 0;
  if (*((unsigned char *)a3 + 140))
  {
    uint64_t v43 = *a3;
    int v44 = *((_DWORD *)a3 + 2);
    long long v49 = *(_OWORD *)((char *)a3 + 76);
    long long v50 = *(_OWORD *)((char *)a3 + 92);
    long long v51 = *(_OWORD *)((char *)a3 + 108);
    long long v52 = *(_OWORD *)((char *)a3 + 124);
    long long v45 = *(_OWORD *)((char *)a3 + 12);
    long long v46 = *(_OWORD *)((char *)a3 + 28);
    long long v47 = *(_OWORD *)((char *)a3 + 44);
    long long v48 = *(_OWORD *)((char *)a3 + 60);
    char v53 = 1;
  }
  uint64_t result = (uint64_t)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  uint64_t v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

BOOL std::operator==[abi:ne180100]<udif::details::block_info,udif::details::block_info>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 140)) {
    BOOL v2 = *(unsigned char *)(a2 + 140) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 140) != 0) == (*(unsigned char *)(a2 + 140) != 0);
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return udif::details::checksum::operator==((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  }
  return 0;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0xC8uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((void *)result + 6) = *(void *)(a2 + 16);
  *((unsigned char *)result + ++*(_DWORD *)(this + 56) = 0;
  *((unsigned char *)result + 196) = 0;
  if (*(unsigned char *)(a2 + 164))
  {
    *((void *)result + 7) = *(void *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 132) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 148) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 180) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 68) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 100) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((unsigned char *)result + 196) = 1;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__construct_node<std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<458ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3BA10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E346640(_Unwind_Exception *a1)
{
}

uint64_t **boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_insert(uint64_t **a1, uint64_t a2)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
      if (*((void *)&v14 + 1) < (unint64_t)v14) {
        return a1 + 1;
      }
    }
    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return a1 + 1;
    }
  }
  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return a1 + 1;
  }
  long long v5 = (int *)(a2 + 24);
  if (boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<udif::details::run_info>,true>::is_absorbable(a2 + 24)) {
    return a1 + 1;
  }
  long long v7 = (uint64_t *)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info> const&>(a1, a2, a2);
  if (v8)
  {
    int v17 = v7;
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, &v17);
    return boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v17);
  }
  else
  {
    long long v9 = (uint64_t *)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::lower_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    long long v10 = (uint64_t **)std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::upper_bound[abi:ne180100]<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, (uint64_t)&v14);
    long long v11 = *v10;
    if (*v10)
    {
      do
      {
        BOOL v12 = v11;
        long long v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        BOOL v12 = v10[2];
        BOOL v13 = *v12 == (void)v10;
        long long v10 = (uint64_t **)v12;
      }
      while (v13);
    }
    uint64_t v16 = v9;
    int v17 = v12;
    boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }
}

BOOL boost::icl::on_absorbtion<boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,boost::icl::inplace_plus<udif::details::run_info>,true>::is_absorbable(uint64_t a1)
{
  {
    udif::run_type::run_type((udif::run_type *)&boost::icl::identity_element<udif::details::run_info>::value(void)::_value, 2);
    qword_267D2B018 = 0;
    qword_267D2B020 = 0;
  }
  return *(_DWORD *)a1 == boost::icl::identity_element<udif::details::run_info>::value(void)::_value
      && *(void *)(a1 + 8) == qword_267D2B018
      && *(void *)(a1 + 16) == qword_267D2B020;
}

void sub_21E34683C(_Unwind_Exception *a1)
{
}

uint64_t boost::icl::interval_base_map<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::insert_main(uint64_t **a1, long long *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  char v8 = *a5;
  long long v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      long long v10 = v9;
      long long v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    long long v11 = *a5;
    do
    {
      long long v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      long long v11 = v10;
    }
    while (!v12);
  }
  BOOL v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }
  else
  {
    long long v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }
      while (v12);
    }
  }
  long long v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&long long v37 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *((void *)&v37 + 1) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  char v38 = 2;
  long long v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    int v17 = (long long *)(a3 + 2);
    while (1)
    {
      long long v37 = *((_OWORD *)v13 + 2);
      char v38 = *((unsigned char *)v13 + 48);
      long long v33 = v39;
      uint64_t v34 = v40;
      boost::icl::right_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30) {
        break;
      }
      if ((unint64_t)v29 < *((void *)&v29 + 1) && (unint64_t)(v29 + 1) < *((void *)&v29 + 1)) {
        goto LABEL_22;
      }
LABEL_23:
      long long v27 = v39;
      uint64_t v28 = v40;
      boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      long long v39 = v29;
      LOBYTE(v40) = v30;
      uint64_t v15 = *a4;
      long long v18 = (uint64_t *)(*a4)[1];
      long long v19 = *a4;
      if (v18)
      {
        do
        {
          BOOL v13 = v18;
          long long v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v19[2];
          BOOL v12 = *v13 == (void)v19;
          long long v19 = v13;
        }
        while (!v12);
      }
      *a4 = v13;
      if (v13 == v10) {
        goto LABEL_32;
      }
    }
    if (v30 == 3)
    {
      if (*((void *)&v29 + 1) < (unint64_t)v29) {
        goto LABEL_23;
      }
    }
    else if ((unint64_t)v29 >= *((void *)&v29 + 1))
    {
      goto LABEL_23;
    }
LABEL_22:
    int v31 = *a3;
    long long v32 = *v17;
    *(void *)&long long v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }
LABEL_32:
  long long v23 = v39;
  uint64_t v24 = v40;
  uint64_t result = boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      if (*((void *)&v25 + 1) < (unint64_t)v25) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    unint64_t v21 = *((void *)&v25 + 1);
    unint64_t v22 = v25;
  }
  else
  {
    unint64_t v21 = *((void *)&v25 + 1);
    if ((unint64_t)v25 >= *((void *)&v25 + 1)) {
      goto LABEL_41;
    }
    unint64_t v22 = v25 + 1;
  }
  if (v22 < v21)
  {
LABEL_40:
    long long v29 = v25;
    uint64_t v30 = v26;
    int v31 = *a3;
    long long v32 = *(_OWORD *)(a3 + 2);
    *(void *)&long long v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t **)&v29);
    uint64_t result = (uint64_t)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a1, (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }
LABEL_41:
  *a4 = v15;
  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x50uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    void v6[4] = *(_OWORD *)(a3 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t **a2)
{
  BOOL v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }
    while (v7);
  }
  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(unsigned char *)(v5 + 48) & 1) + *(void *)(v5 + 40)
    && *(_DWORD *)(v5 + 56) == *((_DWORD *)v2 + 14)
    && *(void *)(v5 + 64) == v2[8]
    && *(void *)(v5 + 72) == v2[9])
  {
    long long v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, v2);
    operator delete(v2);
    long long v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(unsigned char *)(v5 + 48) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }
  return v2;
}

uint64_t **boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(uint64_t **a1, uint64_t ***a2)
{
  int v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }
    while (!v9);
  }
  if (v7 != v3)
  {
    long long v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      long long v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1))
      && *((_DWORD *)result + 14) == *((_DWORD *)v7 + 14)
      && result[8] == v7[8]
      && result[9] == v7[9])
    {
      long long v17 = *((_OWORD *)v7 + 2);
      long long v18 = v7[6];
      std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      long long v13 = *((_OWORD *)*a2 + 2);
      long long v14 = v11[6];
      boost::icl::hull<boost::icl::discrete_interval<unsigned long long,std::less>>((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      long long v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((unsigned char *)v12 + 48) = v16;
      return *a2;
    }
  }
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<500ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3BC30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E346EC8(_Unwind_Exception *a1)
{
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_21E346F48(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(a1, a2, &v11, &v10, a3);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x50uLL);
    unint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    void v7[4] = *(_OWORD *)(a4 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2
    && !boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a5, a2 + 4))
  {
    if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(a5, v15 + 4))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    long long v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    char v16 = a2;
    do
    {
      long long v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      char v16 = v12;
    }
    while (v17);
  }
  if (boost::icl::operator<<boost::icl::discrete_interval<unsigned long long,std::less>>(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>,std::less<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,ChecksumScheduler<checksum::Any<locks::None,checksum::None,checksum::CRC32>::bind_algos,details::udif_verify::scheduler_type,locks::Std>::wrapper>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>((uint64_t)a1, a3, a5);
}

void boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 57) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  long long v14 = operator new(v11 << 6);
  boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x1FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  BOOL v9 = &a2[v3];
  if (v8 < 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = *a1 + (a1[1] << 6);
  uint64_t v12 = a2;
  if (*a1 != a4)
  {
    uint64_t v13 = (void *)*a1;
    uint64_t v12 = a2;
    do
    {
      *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
      long long v14 = *(_OWORD *)(v13 + 1);
      long long v15 = *(_OWORD *)(v13 + 3);
      long long v16 = *(_OWORD *)(v13 + 5);
      *(void *)(v12 + ++*(_DWORD *)(this + 56) = v13[7];
      *(_OWORD *)(v12 + 40) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + 8) = v14;
      v12 += 64;
      v13 += 8;
    }
    while (v13 != (void *)a4);
  }
  *(_DWORD *)uint64_t v12 = *(_DWORD *)a6;
  long long v17 = *(_OWORD *)(a6 + 8);
  long long v18 = *(_OWORD *)(a6 + 24);
  long long v19 = *(_OWORD *)(a6 + 40);
  *(void *)(v12 + ++*(_DWORD *)(this + 56) = *(void *)(a6 + 56);
  *(_OWORD *)(v12 + 40) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + 8) = v17;
  if (v11 != a4)
  {
    uint64_t v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)a4;
      long long v21 = *(_OWORD *)(a4 + 8);
      long long v22 = *(_OWORD *)(a4 + 24);
      long long v23 = *(_OWORD *)(a4 + 40);
      *(void *)(v20 + ++*(_DWORD *)(this + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(v20 + 40) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + 8) = v21;
      a4 += 64;
      v20 += 64;
    }
    while (a4 != v11);
  }
  if (v10)
  {
    uint64_t v24 = (void *)*a1;
    if (a1 + 3 != (void *)*a1) {
      operator delete(v24);
    }
  }
  uint64_t v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<601ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3BE50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E347448(_Unwind_Exception *a1)
{
}

uint64_t checksum::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  long long v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26CF3C520[v2])(&v5, a2 + 4);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksumlsERNS_13basic_ostreamIcNS_11char_traitsIcEEEERKNS8_3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEEEEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJNSH_ISG_EENSI_ISG_EEEEEEEEDcSM_DpT0_(void ***a1)
{
  return checksum::operator<<(**a1);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN8checksumlsERNS_13basic_ostreamIcNS_11char_traitsIcEEEERKNS8_3AnyIN5locks4NoneEJNS8_4NoneENS8_5CRC32EEEEEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJNSH_ISG_EENSI_ISG_EEEEEEEEDcSM_DpT0_(void ***a1, int *a2)
{
  return checksum::operator<<(**a1, a2);
}

void *checksum::operator<<(void *a1)
{
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"none {", 6);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"[empty]", 7);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"}", 1);
}

void *checksum::operator<<(void *a1, int *a2)
{
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"crc32 {", 7);
  int v6 = *a2;
  uint64_t v4 = print_buffer(v3, (uint64_t)&v6, 4);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"}", 1);
}

uint64_t di_log::logger_buf<di_log::log_printer<603ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3C070;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3475F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<638ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3C290;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E347688(_Unwind_Exception *a1)
{
}

void std::shared_ptr<__CFString const*>::shared_ptr[abi:ne180100]<__CFString const*,std::default_delete<__CFString const*[]>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E347704(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x223C24980](v1, 0x60C8044C4A2DFLL);
  }
  __cxa_rethrow();
}

void sub_21E34772C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<__CFString const* *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<__CFString const* *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223C24980);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<__CFString const* *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

udif::run_type *udif::run_type::run_type(udif::run_type *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = 0;
  v3[0] = xmmword_21E3A4450;
  v3[1] = xmmword_21E3A4460;
  _OWORD v3[2] = xmmword_21E3A4470;
  unint64_t v4 = 0x8000000880000007;
  int v5 = -1;
  smart_enums::validators::value<unsigned int>((uint64_t)"run_type", 0, v3, 15);
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<898ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3C4B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E347904(_Unwind_Exception *a1)
{
}

void sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a4;
  *a4 = 0;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  operator new();
}

void sub_21E347A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v15 + 8);
  *(void *)(v15 + 8) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sparse_bundles::mapped_blocks_t::load_file(sparse_bundles::mapped_blocks_t *this)
{
  unint64_t v2 = (unint64_t)(*(void *)(*((void *)this + 1) + 16) + 7) >> 3;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  BOOL v4 = v3 == v2 || v3 == v2 + 16;
  uint64_t v5 = v4;
  if (v4)
  {
    unint64_t v6 = v3 - v2;
    uint64_t v7 = *(void *)(*((void *)this + 1) + 8);
    uint64_t v8 = *((void *)details::get_dummy_shared_ptr() + 1);
    *(void *)&long long v20 = v7;
    *((void *)&v20 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v21 = v2;
    unint64_t v22 = v6;
    unint64_t v23 = v2;
    char v24 = 0;
    unsigned int v9 = (*(uint64_t (**)(void, long long *))(**((void **)this + 2) + 88))(*((void *)this + 2), &v20);
    if (v2 != v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed reading ", 15);
      sparse_bundles::operator<<(v17);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v17, v9);
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v15 = "sparse_bundles::mapped_blocks_t::load_file()";
      *((void *)&v15 + 1) = 42;
      int v16 = 2;
      di_log::logger<di_log::log_printer<89ul>>::logger(v17, &v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Found a valid file for ", 23);
      sparse_bundles::operator<<(&v18);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf((uint64_t)v17);
      MEMORY[0x223C24910](v19);
    }
    *((unsigned char *)this + 24) = 0;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
  else if (v3)
  {
    *(void *)&long long v20 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v20 + 1) = 42;
    LODWORD(v21) = 16;
    di_log::logger<di_log::log_printer<93ul>>::logger(v17, &v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"invalid file size for ", 22);
    sparse_bundles::operator<<(&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", current is ", 13);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" while expected is ", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", truncating", 12);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf((uint64_t)v17);
    MEMORY[0x223C24910](v19);
    unsigned int v10 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 56))(*((void *)this + 2), 0);
    if (v10)
    {
      unsigned int v11 = v10;
      uint64_t v12 = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed truncating ", 18);
      sparse_bundles::operator<<(v17);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)v12, (uint64_t)v17, v11);
    }
  }
  else if (DIDebugLogsEnabled())
  {
    *(void *)&long long v20 = "sparse_bundles::mapped_blocks_t::load_file()";
    *((void *)&v20 + 1) = 42;
    LODWORD(v21) = 2;
    di_log::logger<di_log::log_printer<99ul>>::logger(v17, &v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"file of ", 8);
    sparse_bundles::operator<<(&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" was just created (truncated)", 29);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf((uint64_t)v17);
    MEMORY[0x223C24910](v19);
  }
  return v5;
}

void sub_21E347EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::mapped_blocks_t::map_range(lock_free::bitmap_t **this, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2 + a3 - 1;
  uint64_t result = DIDebugLogsEnabled();
  if (result)
  {
    *(void *)&long long v10 = "sparse_bundles::mapped_blocks_t::map_range(uint64_t, uint64_t)";
    *((void *)&v10 + 1) = 42;
    int v11 = 2;
    di_log::logger<di_log::log_printer<150ul>>::logger(v12, &v10);
    sparse_bundles::operator<<(&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" - map_range: [", 15);
    uint64_t v8 = v13;
    *(_DWORD *)((char *)&v13 + *(void *)(v13 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v13 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)&v13 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v9 = v13;
    *(_DWORD *)((char *)&v13 + *(void *)(v13 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v13 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((unsigned char *)&v13 + *(void *)(v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"]", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf((uint64_t)v12);
    uint64_t result = MEMORY[0x223C24910](&v14);
  }
  if (a3)
  {
    uint64_t result = lock_free::bitmap_t::update_bits(this[1], a2 >> 12, v6 >> 12, 1);
    if (result) {
      *((unsigned char *)this + 24) = 1;
    }
  }
  return result;
}

void sub_21E348198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<150ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void sparse_bundles::mapped_blocks_t::open_mapped_file(void *a1)
{
  (**(void (***)(void))*a1)(*a1);
  sparse_bundles::band_to_filename(&__p);
  operator new();
}

void sub_21E348274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2)
{
}

void sub_21E34835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sparse_bundles::mapped_blocks_t::mapped_blocks_t();
  }
  _Unwind_Resume(exception_object);
}

void sparse_bundles::mapped_blocks_t::mapped_blocks_t(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_21E348414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sparse_bundles::mapped_blocks_t::mapped_blocks_t();
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<89ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<89ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3C5A8;
  a1[45] = &unk_26CF3C6A8;
  a1[46] = &unk_26CF3C6D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3C5A8;
  a1[45] = &unk_26CF3C630;
  a1[46] = &unk_26CF3C658;
  return a1;
}

void sub_21E348530(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<93ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<93ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3C7C8;
  a1[45] = &unk_26CF3C8C8;
  a1[46] = &unk_26CF3C8F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3C7C8;
  a1[45] = &unk_26CF3C850;
  a1[46] = &unk_26CF3C878;
  return a1;
}

void sub_21E348698(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<99ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<99ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3C9E8;
  a1[45] = &unk_26CF3CAE8;
  a1[46] = &unk_26CF3CB10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3C9E8;
  a1[45] = &unk_26CF3CA70;
  a1[46] = &unk_26CF3CA98;
  return a1;
}

void sub_21E348800(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sparse_bundles::mapped_blocks_t::write(lock_free::bitmap_t **a1, uint64_t a2)
{
  return sparse_bundles::mapped_blocks_t::map_range(a1, *(void *)(a2 + 24), *(void *)(a2 + 16));
}

uint64_t sparse_bundles::mapped_blocks_t::flush(sparse_bundles::mapped_blocks_t *this)
{
  if (*((unsigned char *)this + 24))
  {
    unint64_t v3 = *(void *)(*((void *)this + 1) + 16) + 7;
    if ((*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2)) == v3 >> 3
      || (uint64_t v2 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 56))(*((void *)this + 2), 0),
          !v2))
    {
      unint64_t v4 = v3 >> 3;
      *((unsigned char *)this + 24) = 0;
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *(void *)(*((void *)this + 1) + 8);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
      uint64_t v11 = v6;
      uint64_t v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = v4;
      uint64_t v14 = 0;
      unint64_t v15 = v4;
      char v16 = 0;
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 80))(v5, &v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v4 == (int)v2)
      {
        uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 1);
        if (v2) {
          *((unsigned char *)this + 24) = 1;
        }
        if (DIDebugLogsEnabled())
        {
          *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
          *((void *)&v9 + 1) = 38;
          int v10 = 2;
          di_log::logger<di_log::log_printer<141ul>>::logger(&v11, &v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Flushed ", 8);
          sparse_bundles::operator<<(&v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)", res=", 6);
          std::ostream::operator<<();
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf((uint64_t)&v11);
          MEMORY[0x223C24910](v18);
        }
      }
      else
      {
        *((unsigned char *)this + 24) = 1;
      }
    }
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v9 = "sparse_bundles::mapped_blocks_t::flush()";
      *((void *)&v9 + 1) = 38;
      int v10 = 2;
      di_log::logger<di_log::log_printer<114ul>>::logger(&v11, &v9);
      sparse_bundles::operator<<(&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" is clean, skipping flush", 25);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<114ul>>::~logger_buf((uint64_t)&v11);
      MEMORY[0x223C24910](v18);
    }
    return 0;
  }
  return v2;
}

void sub_21E348B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<141ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<141ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<141ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3CC08;
  a1[45] = &unk_26CF3CD08;
  a1[46] = &unk_26CF3CD30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3CC08;
  a1[45] = &unk_26CF3CC90;
  a1[46] = &unk_26CF3CCB8;
  return a1;
}

void sub_21E348C38(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<150ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<150ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3CE28;
  a1[45] = &unk_26CF3CF28;
  a1[46] = &unk_26CF3CF50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3CE28;
  a1[45] = &unk_26CF3CEB0;
  a1[46] = &unk_26CF3CED8;
  return a1;
}

void sub_21E348DA0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sparse_bundles::mapped_blocks_t::unmap_interval(lock_free::bitmap_t **this, unint64_t a2, unint64_t a3)
{
  uint64_t result = DIDebugLogsEnabled();
  if (result)
  {
    *(void *)&long long v11 = "sparse_bundles::mapped_blocks_t::unmap_interval(uint64_t, uint64_t)";
    *((void *)&v11 + 1) = 47;
    int v12 = 2;
    di_log::logger<di_log::log_printer<166ul>>::logger(v13, &v11);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" - unmap_range: [", 17);
    uint64_t v7 = v14;
    *(_DWORD *)((char *)&v14 + *(void *)(v14 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v14 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)&v14 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"-", 1);
    std::ostream::operator<<();
    uint64_t v8 = v14;
    *(_DWORD *)((char *)&v14 + *(void *)(v14 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v14 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)&v14 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"]", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v13);
    uint64_t result = MEMORY[0x223C24910](&v15);
  }
  if (a3 != a2)
  {
    unint64_t v9 = a2 >> 12;
    unint64_t v10 = a3 >> 12;
    if ((a2 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      ++v9;
    }
    if ((~(_WORD)a3 & 0xFFF) != 0)
    {
      if (v9 == v10) {
        return result;
      }
      --v10;
    }
    uint64_t result = lock_free::bitmap_t::update_bits(this[1], v9, v10, 0);
    if (result) {
      *((unsigned char *)this + 24) = 1;
    }
  }
  return result;
}

void sub_21E34902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<166ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sparse_bundles::operator<<(void *a1)
{
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"mapped blocks of band ", 22);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v3 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  return a1;
}

{
  void *v1;
  void *result;

  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"band ", 5);
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(*v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t result = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)result + *(void *)(*result - 24) + 8) = *(_DWORD *)((unsigned char *)result
                                                                            + *(void *)(*result - 24)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<89ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<89ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3C740;
  di_log::logger_buf<di_log::log_printer<89ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<89ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E349604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<89ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<89ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 89;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 89;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<93ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<93ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3C960;
  di_log::logger_buf<di_log::log_printer<93ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<93ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E349D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<93ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<93ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 93;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 93;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<99ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<99ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3CB80;
  di_log::logger_buf<di_log::log_printer<99ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<99ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34A4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<99ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<99ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 99;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 99;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<141ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<141ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3CDA0;
  di_log::logger_buf<di_log::log_printer<141ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<141ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34AC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<141ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<141ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 141;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 141;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<150ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<150ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3CFC0;
  di_log::logger_buf<di_log::log_printer<150ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<150ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34B3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<150ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<150ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 150;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    long long v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 150;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<89ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3C740;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34B69C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<93ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3C960;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34B72C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<99ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3CB80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34B7BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<141ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3CDA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34B84C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<150ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3CFC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E34B8DC(_Unwind_Exception *a1)
{
}

uint64_t sparse_bundles::Band::Band(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26CF3D040;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 68) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  uint64_t v6 = a4[4];
  *(void *)(a1 + 160) = a4[3];
  *(void *)(a1 + 168) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (lock_free::bitmap_t *)a4[40];
  if (v7) {
    lock_free::bitmap_t::set_bit(v7, a3, 1);
  }
  return a1;
}

void sub_21E34B9B4(_Unwind_Exception *a1)
{
  sparse_bundles::Band::ContextsList::~ContextsList(v2);
  char v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::Band::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((void *)&v13 + 1) = 38;
    LODWORD(v14) = 2;
    di_log::logger<di_log::log_printer<47ul>>::logger(v18, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Reading ", 8);
    operator<<(&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)" to ", 4);
    sparse_bundles::operator<<(&v19);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf((uint64_t)v18);
    MEMORY[0x223C24910](v20);
  }
  unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  unint64_t v6 = *(void *)(a3 + 24);
  if (v5 >= *(void *)(a3 + 16) + v6)
  {
    int v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), a3);
  }
  else if (v5 <= v6)
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v13 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v13 + 1) = 38;
      LODWORD(v14) = 2;
      di_log::logger<di_log::log_printer<63ul>>::logger(v18, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Band data doesn't exist, zeroing", 32);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf((uint64_t)v18);
      MEMORY[0x223C24910](v20);
    }
    bzero(*(void **)a3, *(void *)(a3 + 16));
    int v9 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 32);
    uint64_t v8 = *(void *)(a3 + 8);
    *(void *)&long long v13 = *(void *)a3;
    *((void *)&v13 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v5 - v6;
    unint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = 0;
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v11 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v11 + 1) = 38;
      int v12 = 2;
      di_log::logger<di_log::log_printer<56ul>>::logger(v18, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Band data is partial, reading ", 30);
      operator<<(&v19);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf((uint64_t)v18);
      MEMORY[0x223C24910](v20);
    }
    int v9 = (*(uint64_t (**)(void, long long *))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16), &v13);
    bzero((void *)(*(void *)a3 + v14), *(void *)(a3 + 16) - v14);
    if (v14 == v9) {
      int v9 = *(_DWORD *)(a3 + 16);
    }
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v9 >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return v9;
  }
}

void sub_21E34BCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  di_log::logger<di_log::log_printer<63ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<47ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<47ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3D130;
  a1[45] = &unk_26CF3D230;
  a1[46] = &unk_26CF3D258;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3D130;
  a1[45] = &unk_26CF3D1B8;
  a1[46] = &unk_26CF3D1E0;
  return a1;
}

void sub_21E34BDF8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<56ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<56ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3D350;
  a1[45] = &unk_26CF3D450;
  a1[46] = &unk_26CF3D478;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3D350;
  a1[45] = &unk_26CF3D3D8;
  a1[46] = &unk_26CF3D400;
  return a1;
}

void sub_21E34BF60(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<63ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<63ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3D570;
  a1[45] = &unk_26CF3D670;
  a1[46] = &unk_26CF3D698;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3D570;
  a1[45] = &unk_26CF3D5F8;
  a1[46] = &unk_26CF3D620;
  return a1;
}

void sub_21E34C0C8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sparse_bundles::Band::write(sparse_bundles::Band *a1, uint64_t a2, uint64_t a3)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((void *)&v8 + 1) = 39;
    int v9 = 2;
    di_log::logger<di_log::log_printer<74ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Writing ", 8);
    operator<<(&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" to ", 4);
    sparse_bundles::operator<<(&v11);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x223C24910](&v12);
  }
  mapped_blocks = (lock_free::bitmap_t **)sparse_bundles::Band::get_mapped_blocks(a1);
  sparse_bundles::mapped_blocks_t::write(mapped_blocks, a3);
  LODWORD(result) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 80))(*(void *)(a2 + 16), a3);
  *((unsigned char *)a1 + 68) = 1;
  if ((int)result >= 0) {
    return *(void *)(a3 + 16);
  }
  else {
    return (int)result;
  }
}

void sub_21E34C25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<74ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<74ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<74ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3D790;
  a1[45] = &unk_26CF3D890;
  a1[46] = &unk_26CF3D8B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3D790;
  a1[45] = &unk_26CF3D818;
  a1[46] = &unk_26CF3D840;
  return a1;
}

void sub_21E34C370(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  return a1;
}

unint64_t sparse_bundles::Band::get_mapped_blocks(sparse_bundles::Band *this)
{
  unint64_t result = atomic_load((unint64_t *)this + 6);
  if (!result)
  {
    unint64_t v5 = this;
    if (atomic_load_explicit((atomic_ullong *volatile)this + 7, memory_order_acquire) != -1)
    {
      v4[0] = &v5;
      unint64_t v6 = v4;
      std::__call_once((std::once_flag::_State_type *)this + 7, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<sparse_bundles::Band::get_mapped_blocks(void)::$_0 &&>>);
    }
    unint64_t result = atomic_load((unint64_t *)this + 6);
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Failed opening mapped blocks file for ", 38);
      sparse_bundles::operator<<(v4);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v4, *((_DWORD *)this + 16));
    }
  }
  return result;
}

void sub_21E34C4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sparse_bundles::Band::unmap_extents(sparse_bundles::Band *a1, void *a2)
{
  unint64_t mapped_blocks = sparse_bundles::Band::get_mapped_blocks(a1);
  unint64_t v6 = (void *)*a2;
  char v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0) {
        unint64_t v7 = v5[4];
      }
      else {
        unint64_t v7 = v5[4] + 1;
      }
      sparse_bundles::mapped_blocks_t::unmap_interval((lock_free::bitmap_t **)mapped_blocks, v7, (v5[6] & 1) + v5[5] - 1);
      long long v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          unint64_t v5 = v9;
        }
        while (!v10);
      }
      unint64_t v5 = v9;
    }
    while (v9 != v4);
  }
  uint64_t v11 = *(lock_free::bitmap_t **)(mapped_blocks + 8);
  return lock_free::bitmap_t::is_reset(v11);
}

void sparse_bundles::Band::new_band(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v14 = a3;
  uint64_t v12 = 0;
  long long v13 = 0;
  int v9 = (***(uint64_t (****)(void))(a2 + 8))(*(void *)(a2 + 8));
  sparse_bundles::band_to_filename(__p);
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int,std::string,int &,void>(&v9, (uint64_t)__p, &v14, &v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (*a4)
  {
    int v9 = 3;
    std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,void>((uint64_t *)&v10, (uint64_t)a4, &v9, __p);
    unint64_t v5 = __p[0];
    unint64_t v6 = (atomic_ullong *)__p[1];
  }
  else
  {
    unint64_t v5 = v10;
    unint64_t v6 = v11;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v12 = v5;
  long long v13 = v6;
  operator new();
}

void sub_21E34C6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sparse_bundles::Band::erase(sparse_bundles::Band *this, const sparse_bundles::bundle_commons_t *a2)
{
  if (*(unsigned char *)(*(void *)this + 8))
  {
    *(void *)&long long __p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&__p + 1) = 32;
    int v12 = 0;
    di_log::logger<di_log::log_printer<116ul>>::logger(v14, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Skipping erase of band ", 23);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", disk image is terminated", 26);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
    return;
  }
  sparse_bundles::band_to_filename(&__p);
  int v4 = (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
  int v5 = FileLocal::unlink_from(v4, (uint64_t *)&__p);
  if (v5)
  {
    if (v5 >= 0) {
      int v6 = v5;
    }
    else {
      int v6 = -v5;
    }
    if (v6 != 2)
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 16;
      di_log::logger<di_log::log_printer<126ul>>::logger(v14, &v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to erase mapped file of band ", 36);
      *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", error ", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf((uint64_t)v14);
      goto LABEL_11;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v9 + 1) = 32;
      int v10 = 2;
      di_log::logger<di_log::log_printer<124ul>>::logger(v14, &v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"No mapped file for band ", 24);
      *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 2;
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v14);
LABEL_11:
      MEMORY[0x223C24910](v16);
    }
  }
  int v7 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
  if (FileLocal::unlink_from(v7, (uint64_t *)&__p))
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 16;
    di_log::logger<di_log::log_printer<136ul>>::logger(v14, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to erase band ", 21);
    *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)", error ", 8);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<136ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
  }
  else
  {
    char v8 = (lock_free::bitmap_t *)*((void *)this + 40);
    if (v8) {
      lock_free::bitmap_t::set_bit(v8, (unint64_t)a2, 0);
    }
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v9 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v9 + 1) = 32;
    int v10 = 2;
    di_log::logger<di_log::log_printer<139ul>>::logger(v14, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Completed erase of band ", 24);
    *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v16[*(void *)(v15 - 24)] = *(_DWORD *)&v16[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
  }
  if (v13 < 0) {
    operator delete((void *)__p);
  }
}

void sub_21E34CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<116ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<116ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3D9B0;
  a1[45] = &unk_26CF3DAB0;
  a1[46] = &unk_26CF3DAD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3D9B0;
  a1[45] = &unk_26CF3DA38;
  a1[46] = &unk_26CF3DA60;
  return a1;
}

void sub_21E34CDA0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<126ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<126ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3DBD0;
  a1[45] = &unk_26CF3DCD0;
  a1[46] = &unk_26CF3DCF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3DBD0;
  a1[45] = &unk_26CF3DC58;
  a1[46] = &unk_26CF3DC80;
  return a1;
}

void sub_21E34CF08(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<139ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<139ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3DDF0;
  a1[45] = &unk_26CF3DEF0;
  a1[46] = &unk_26CF3DF18;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3DDF0;
  a1[45] = &unk_26CF3DE78;
  a1[46] = &unk_26CF3DEA0;
  return a1;
}

void sub_21E34D070(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  return a1;
}

void sparse_bundles::Band::~Band(sparse_bundles::Band *this)
{
  *(void *)this = &unk_26CF3D040;
  sparse_bundles::open_bands_t::mark_as_placed((sparse_bundles::open_bands_t *)(*((void *)this + 5) + 184), *((void *)this + 4), 0);
  sparse_bundles::Band::ContextsList::clear((uint64_t **)this + 9);
  uint64_t v2 = (sparse_bundles::mapped_blocks_t *)atomic_load((unint64_t *)this + 6);
  if (*((unsigned char *)this + 69))
  {
    if (!v2) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  if (v2)
  {
    if (*(unsigned char *)(**((void **)this + 5) + 8))
    {
      *(void *)&long long v7 = "sparse_bundles::Band::~Band()";
      *((void *)&v7 + 1) = 27;
      int v8 = 0;
      di_log::logger<di_log::log_printer<152ul>>::logger(v9, &v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Disk image is terminated, skipping flush of ", 44);
      sparse_bundles::operator<<(&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)", dirty=", 8);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x223C24910](v11);
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v7 = "sparse_bundles::Band::~Band()";
        *((void *)&v7 + 1) = 27;
        int v8 = 2;
        di_log::logger<di_log::log_printer<154ul>>::logger(v9, &v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"flushing and closing ", 21);
        sparse_bundles::operator<<(&v10);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v9);
        MEMORY[0x223C24910](v11);
      }
      sparse_bundles::mapped_blocks_t::flush(v2);
      if (*((unsigned char *)this + 68)) {
        (*(void (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 1);
      }
    }
LABEL_13:
    uint64_t v3 = *((void *)v2 + 2);
    *((void *)v2 + 2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x223C249A0](v2, 0x1020C40171E6E99);
    goto LABEL_18;
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v7 = "sparse_bundles::Band::~Band()";
    *((void *)&v7 + 1) = 27;
    int v8 = 2;
    di_log::logger<di_log::log_printer<163ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Closing an unchanged ", 21);
    sparse_bundles::operator<<(&v10);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x223C24910](v11);
  }
LABEL_18:
  int v5 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((unsigned char *)this + 69)) {
    sparse_bundles::Band::erase(*((sparse_bundles::Band **)this + 5), *((const sparse_bundles::bundle_commons_t **)this + 4));
  }
  sparse_bundles::open_bands_t::remove((sparse_bundles::open_bands_t *)(*((void *)this + 5) + 184), *((void *)this + 4));
  sparse_bundles::Band::ContextsList::~ContextsList((sparse_bundles::Band *)((char *)this + 72));
  int v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

{
  uint64_t vars8;

  sparse_bundles::Band::~Band(this);
  JUMPOUT(0x223C249A0);
}

void sparse_bundles::Band::create_ctx(sparse_bundles::Band *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(sparse_bundles::Band *))(*(void *)this + 136))(this);
  std::shared_ptr<sparse_bundles::Band::ContextBand>::shared_ptr[abi:ne180100]<sparse_bundles::Band::ContextBand,void>(a2, v3);
}

void sub_21E34D494(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void sparse_bundles::Band::ContextsList::add(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::emplace_back<std::shared_ptr<sparse_bundles::Band::ContextBand> const&>((uint64_t *)a1, a2);
  std::mutex::unlock(v4);
}

void sub_21E34D504(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sparse_bundles::Band::flush(sparse_bundles::Band *this)
{
  if ((*((unsigned char *)this + 68) & 1) == 0) {
    return 0;
  }
  *((unsigned char *)this + 68) = 0;
  uint64_t v3 = (sparse_bundles::mapped_blocks_t *)atomic_load((unint64_t *)this + 6);
  uint64_t v1 = sparse_bundles::mapped_blocks_t::flush(v3);
  if (v1
    || (uint64_t v1 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), 1),
        v1))
  {
    *((unsigned char *)this + 68) = 1;
    *(void *)&long long v5 = "sparse_bundles::Band::flush()";
    *((void *)&v5 + 1) = 27;
    int v6 = 16;
    di_log::logger<di_log::log_printer<203ul>>::logger(v7, &v5);
    sparse_bundles::operator<<(&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)": flush failed (", 16);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x223C24910](&v9);
  }
  return v1;
}

void sub_21E34D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<203ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<203ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<203ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3E010;
  a1[45] = &unk_26CF3E110;
  a1[46] = &unk_26CF3E138;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3E010;
  a1[45] = &unk_26CF3E098;
  a1[46] = &unk_26CF3E0C0;
  return a1;
}

void sub_21E34D754(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<203ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t *sparse_bundles::band_ptr::release(uint64_t *this)
{
  if (*this && atomic_fetch_add((atomic_ullong *volatile)*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    this = (uint64_t *)*v1;
    if (*v1)
    {
      JUMPOUT(0x223C249A0);
    }
  }
  return this;
}

void sparse_bundles::band_ptr::~band_ptr(sparse_bundles::band_ptr *this)
{
}

uint64_t sparse_bundles::band_ptr::band_ptr(uint64_t this, unint64_t **a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  unint64_t v3 = atomic_load(v2);
  if (!v3) {
LABEL_5:
  }
    operator new();
  unint64_t v4 = v3;
  while (1)
  {
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)this, &v4, v3 + 1);
    if (v4 == v3) {
      break;
    }
    unint64_t v3 = v4;
    if (!v4) {
      goto LABEL_5;
    }
  }
  long long v5 = a2[2];
  *(void *)(this + 8) = a2[1];
  *(void *)(this + 16) = v5;
  return this;
}

uint64_t sparse_bundles::band_ptr::band_ptr(uint64_t result, uint64_t a2)
{
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2) {
    *(void *)a2 = 0;
  }
  return result;
}

sparse_bundles::band_ptr *sparse_bundles::band_ptr::operator=(sparse_bundles::band_ptr *this, sparse_bundles::band_ptr *a2)
{
  if (this != a2)
  {
    sparse_bundles::band_ptr::release((uint64_t *)this);
    *(_OWORD *)this = *(_OWORD *)a2;
    *((void *)this + 2) = *((void *)a2 + 2);
    *(void *)a2 = 0;
  }
  return this;
}

uint64_t sparse_bundles::band_ptr::replace_if_evictable@<X0>(unint64_t **this@<X0>, sparse_bundles::Band *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = atomic_load(*this);
  sparse_bundles::eviction_t::increase((atomic_ullong *)((*this)[1] + 56));
  if (v6 != 1
    || (uint64_t v7 = 1, atomic_compare_exchange_strong((atomic_ullong *volatile)*this, (unint64_t *)&v7, 0), v7 != 1))
  {
    sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)((*this)[1] + 56));
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      di_log::logger<di_log::log_printer<331ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Missed an evictable slot", 24);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x223C24910](v17);
    }
    operator new();
  }
  uint64_t v8 = this[1];
  if (v8)
  {
    sparse_bundles::Band::ContextsList::clear((uint64_t **)v8 + 9);
    uint64_t v9 = this[1];
    uint64_t v10 = (dispatch_group_t *)((*this)[1] + 392);
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    void v12[2] = ___ZN14sparse_bundles8band_ptr20replace_if_evictableEPNS_4BandE_block_invoke;
    v12[3] = &__block_descriptor_tmp_7;
    void v12[4] = this;
    uint64_t v12[5] = v9;
    workqueue::transaction::add(v10, v12);
  }
  else
  {
    sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)((*this)[1] + 56));
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v13 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
      *((void *)&v13 + 1) = 46;
      int v14 = 2;
      di_log::logger<di_log::log_printer<347ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Replaced an empty slot", 22);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x223C24910](v17);
    }
  }
  this[1] = (unint64_t *)a2;
  if (!a2)
  {
    this[2] = (unint64_t *)-1;
    operator new();
  }
  this[2] = (unint64_t *)*((void *)a2 + 4);
  atomic_store(2uLL, *this);
  *((std::chrono::steady_clock::time_point *)*this + 2) = std::chrono::steady_clock::now();
  uint64_t result = sparse_bundles::band_ptr::band_ptr(a3, this);
  atomic_fetch_add((atomic_ullong *volatile)*this, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void *di_log::logger<di_log::log_printer<331ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<331ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3E230;
  a1[45] = &unk_26CF3E330;
  a1[46] = &unk_26CF3E358;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3E230;
  a1[45] = &unk_26CF3E2B8;
  a1[46] = &unk_26CF3E2E0;
  return a1;
}

void sub_21E34DDC4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t ___ZN14sparse_bundles8band_ptr20replace_if_evictableEPNS_4BandE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    di_log::logger<di_log::log_printer<340ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Background close of ", 20);
    sparse_bundles::operator<<(&v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x223C24910](v9);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  sparse_bundles::eviction_t::decrease((sparse_bundles::eviction_t *)(*(void *)(*(void *)v2 + 8) + 56));
  uint64_t result = DIDebugLogsEnabled();
  if (result)
  {
    *(void *)&long long v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46;
    int v6 = 2;
    di_log::logger<di_log::log_printer<343ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Close completed", 15);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf((uint64_t)v7);
    return MEMORY[0x223C24910](v9);
  }
  return result;
}

void sub_21E34DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<343ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<340ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<340ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3E450;
  a1[45] = &unk_26CF3E550;
  a1[46] = &unk_26CF3E578;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3E450;
  a1[45] = &unk_26CF3E4D8;
  a1[46] = &unk_26CF3E500;
  return a1;
}

void sub_21E34E0A0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<340ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<343ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<343ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3E670;
  a1[45] = &unk_26CF3E770;
  a1[46] = &unk_26CF3E798;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3E670;
  a1[45] = &unk_26CF3E6F8;
  a1[46] = &unk_26CF3E720;
  return a1;
}

void sub_21E34E208(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<343ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<347ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<347ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3E890;
  a1[45] = &unk_26CF3E990;
  a1[46] = &unk_26CF3E9B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3E890;
  a1[45] = &unk_26CF3E918;
  a1[46] = &unk_26CF3E940;
  return a1;
}

void sub_21E34E370(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<347ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sparse_bundles::band_ptr::erase_if_unmapped(sparse_bundles::band_ptr *this, uint64_t a2)
{
  unint64_t v4 = atomic_load(*(unint64_t **)this);
  while (v4 == 1)
  {
    unint64_t v4 = 1;
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)this, &v4, 0);
    if (v4 == 1)
    {
      unint64_t mapped_blocks = sparse_bundles::Band::get_mapped_blocks(*((sparse_bundles::Band **)this + 1));
      if (lock_free::bitmap_t::is_reset(*(lock_free::bitmap_t **)(mapped_blocks + 8)))
      {
        sparse_bundles::Band::ContextsList::clear((uint64_t **)(*((void *)this + 1) + 72));
        uint64_t v6 = *((void *)this + 1);
        uint64_t v7 = (dispatch_group_t *)(*(void *)(*(void *)this + 8) + 392);
        v11[0] = MEMORY[0x263EF8330];
        v11[1] = 0x40000000;
        v11[2] = ___ZN14sparse_bundles8band_ptr17erase_if_unmappedEy_block_invoke;
        v11[3] = &__block_descriptor_tmp_40;
        v11[4] = v6;
        workqueue::transaction::add(v7, v11);
        *((void *)this + 1) = 0;
        *((void *)this + 2) = -1;
        uint64_t v8 = *(unint64_t **)this;
        uint64_t v9 = 1;
        atomic_store(1uLL, v8);
      }
      else
      {
        if (DIDebugLogsEnabled())
        {
          *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
          *((void *)&v14 + 1) = 43;
          int v15 = 2;
          di_log::logger<di_log::log_printer<399ul>>::logger(v16, &v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Skipping erase of ", 18);
          sparse_bundles::operator<<(&v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)", band was written to", 21);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf((uint64_t)v16);
          MEMORY[0x223C24910](v18);
        }
        return 1;
      }
      return v9;
    }
  }
  if (v4)
  {
    sparse_bundles::band_ptr::band_ptr((uint64_t)&v14, (unint64_t **)this);
    if (*((void *)&v14 + 1) && *(void *)(*((void *)&v14 + 1) + 32) == a2)
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        di_log::logger<di_log::log_printer<387ul>>::logger(v16, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Skipping band erase (in use)", 28);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)v16);
        MEMORY[0x223C24910](v18);
      }
      uint64_t v9 = 1;
    }
    else
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&long long v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43;
        int v13 = 2;
        di_log::logger<di_log::log_printer<390ul>>::logger(v16, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process", 79);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)v16);
        MEMORY[0x223C24910](v18);
      }
      uint64_t v9 = 0;
    }
    sparse_bundles::band_ptr::release((uint64_t *)&v14);
  }
  else
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((void *)&v14 + 1) = 43;
      int v15 = 2;
      di_log::logger<di_log::log_printer<382ul>>::logger(v16, &v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf((uint64_t)v16);
      MEMORY[0x223C24910](v18);
    }
    return 0;
  }
  return v9;
}

void *di_log::logger<di_log::log_printer<382ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<382ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3EAB0;
  a1[45] = &unk_26CF3EBB0;
  a1[46] = &unk_26CF3EBD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3EAB0;
  a1[45] = &unk_26CF3EB38;
  a1[46] = &unk_26CF3EB60;
  return a1;
}

void sub_21E34E7E4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<382ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<399ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<399ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3ECD0;
  a1[45] = &unk_26CF3EDD0;
  a1[46] = &unk_26CF3EDF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3ECD0;
  a1[45] = &unk_26CF3ED58;
  a1[46] = &unk_26CF3ED80;
  return a1;
}

void sub_21E34E94C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<399ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t ___ZN14sparse_bundles8band_ptr17erase_if_unmappedEy_block_invoke(uint64_t a1)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((void *)&v4 + 1) = 43;
    int v5 = 2;
    di_log::logger<di_log::log_printer<406ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Background erase of ", 20);
    sparse_bundles::operator<<(&v7);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 16))(v2);
}

void sub_21E34EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<406ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<406ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<406ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3EEF0;
  a1[45] = &unk_26CF3EFF0;
  a1[46] = &unk_26CF3F018;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3EEF0;
  a1[45] = &unk_26CF3EF78;
  a1[46] = &unk_26CF3EFA0;
  return a1;
}

void sub_21E34EBA0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<406ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t sparse_bundles::Band::get_block_size(sparse_bundles::Band *this)
{
  return *(void *)(*((void *)this + 5) + 48);
}

uint64_t sparse_bundles::Band::get_num_blocks(sparse_bundles::Band *this)
{
  return *(void *)(*((void *)this + 5) + 40) / *(void *)(*((void *)this + 5) + 48);
}

uint64_t sparse_bundles::Band::is_writable(sparse_bundles::Band *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48))();
}

void sparse_bundles::Band::_create_ctx(sparse_bundles::Band *this)
{
}

void sub_21E34ECD4(_Unwind_Exception *a1)
{
  MEMORY[0x223C249A0](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void sparse_bundles::Band::ContextsList::~ContextsList(sparse_bundles::Band::ContextsList *this)
{
  sparse_bundles::Band::ContextsList::clear((uint64_t **)this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  uint64_t v3 = (void **)this;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sparse_bundles::Band::ContextsList::clear(uint64_t **this)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v9 = "sparse_bundles::Band::ContextsList::clear()";
    *((void *)&v9 + 1) = 41;
    int v10 = 2;
    di_log::logger<di_log::log_printer<92ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Resetting ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" band contexts", 14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x223C24910](&v13);
  }
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  if (*this != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      int v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = this[11];
      uint64_t v6 = this[12];
      if (v6) {
        atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v4 + 24);
      *(void *)(v4 + 16) = v7;
      *(void *)(v4 + 24) = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_21E34EE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<92ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<47ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<47ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3D2C8;
  di_log::logger_buf<di_log::log_printer<47ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<47ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34F3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<47ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<47ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 47;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 47;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<56ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<56ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3D4E8;
  di_log::logger_buf<di_log::log_printer<56ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<56ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E34FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<56ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<56ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 56;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 56;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<63ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<63ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3D708;
  di_log::logger_buf<di_log::log_printer<63ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<63ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35029C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<63ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<63ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 63;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 63;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<74ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<74ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3D928;
  di_log::logger_buf<di_log::log_printer<74ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<74ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E350A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<74ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<74ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 74;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 74;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<116ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<116ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3DB48;
  di_log::logger_buf<di_log::log_printer<116ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<116ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E351184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<116ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<116ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 116;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 116;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<126ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<126ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3DD68;
  di_log::logger_buf<di_log::log_printer<126ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<126ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3518F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<126ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<126ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 126;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 126;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<139ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<139ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3DF88;
  di_log::logger_buf<di_log::log_printer<139ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<139ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35206C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<139ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<139ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 139;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 139;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::emplace_back<std::shared_ptr<sparse_bundles::Band::ContextBand> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    long long v14 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v4, v13);
    int v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__swap_out_circular_buffer(a1, v19);
    long long v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_21E3523C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<sparse_bundles::Band::ContextBand>>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<sparse_bundles::Band::ContextBand>>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<sparse_bundles::Band::ContextBand>>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<sparse_bundles::Band::ContextBand>>,std::reverse_iterator<std::shared_ptr<sparse_bundles::Band::ContextBand>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<char>>,std::reverse_iterator<std::shared_ptr<char>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<203ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<203ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<203ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<203ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<203ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3E1A8;
  di_log::logger_buf<di_log::log_printer<203ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<203ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<203ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E352A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<203ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<203ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 203;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 203;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<331ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<331ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3E3C8;
  di_log::logger_buf<di_log::log_printer<331ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<331ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3531B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<331ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 331;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 331;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<340ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<340ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<340ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<340ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<340ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3E5E8;
  di_log::logger_buf<di_log::log_printer<340ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<340ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<340ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35392C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<340ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<340ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 340;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 340;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<343ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<343ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<343ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<343ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<343ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3E808;
  di_log::logger_buf<di_log::log_printer<343ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<343ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<343ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3540A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<343ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<343ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 343;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 343;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<347ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<347ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<347ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<347ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<347ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3EA28;
  di_log::logger_buf<di_log::log_printer<347ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<347ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<347ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E354814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<347ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<347ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 347;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 347;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<382ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<382ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<382ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<382ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<382ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3EC48;
  di_log::logger_buf<di_log::log_printer<382ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<382ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<382ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E354F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<382ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<382ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 382;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 382;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<399ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<399ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<399ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<399ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<399ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3EE68;
  di_log::logger_buf<di_log::log_printer<399ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<399ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<399ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3556FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<399ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<399ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 399;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 399;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<406ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<406ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<406ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<406ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<406ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3F088;
  di_log::logger_buf<di_log::log_printer<406ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<406ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<406ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E355E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<406ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<406ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 406;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    long long v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 406;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sparse_bundles::Band::ContextBand::~ContextBand(sparse_bundles::Band::ContextBand *this)
{
  *(void *)this = &unk_26CF3F108;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26CF3F108;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<47ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3D2C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3561F0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<56ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3D4E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E356280(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<63ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3D708;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E356310(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<74ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3D928;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3563A0(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int,std::string,int &,void>(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int,std::string,int &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E35642C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int,std::string,int &,std::allocator<FileLocal>,0>(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  int v5 = *a4;
  int v6 = FileDescriptorWrapper::open_from(*a2, a3, *a4);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_21E3564B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,std::allocator<crypto_format_backend>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E35653C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,std::allocator<crypto_format_backend>,0>(void *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216A0;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,crypto_format_backend*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21E356598(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> const&,unsigned int,crypto_format_backend*>(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  int v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  crypto_format_backend::header_ignore_fields_t::header_ignore_fields_t(&v8, *a4);
  crypto_format_backend::crypto_format_backend(a1, &v9, a3, &v8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return a1;
}

void sub_21E356620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *crypto_format_backend::header_ignore_fields_t::header_ignore_fields_t(_DWORD *this, int a2)
{
  *this = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[1] = "header_ignore_fields_t";
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &unk_26CF1FB20;
    *((_DWORD *)exception + 8) = v2;
  }
  return this;
}

uint64_t di_log::logger_buf<di_log::log_printer<116ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3DB48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E356744(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<126ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3DD68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3567D4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<139ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3DF88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E356864(_Unwind_Exception *a1)
{
}

void std::shared_ptr<sparse_bundles::Band::ContextBand>::shared_ptr[abi:ne180100]<sparse_bundles::Band::ContextBand,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E3568E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    DiskImageASIF::set_size(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sparse_bundles::Band::ContextBand *,std::shared_ptr<sparse_bundles::Band::ContextBand>::__shared_ptr_default_delete<sparse_bundles::Band::ContextBand,sparse_bundles::Band::ContextBand>,std::allocator<sparse_bundles::Band::ContextBand>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<203ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3E1A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E356A24(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<sparse_bundles::Band::get_mapped_blocks(void)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((void *)&v3 + 1) = 72;
    LODWORD(v4) = 2;
    di_log::logger<di_log::log_printer<219ul>>::logger(v7, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Opening mapped blocks for ", 26);
    sparse_bundles::operator<<(&v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x223C24910](&v9);
  }
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)&long long v3 = MEMORY[0x263EF8330];
  *((void *)&v3 + 1) = 0x40000000;
  char v4 = ___ZZN14sparse_bundles4Band17get_mapped_blocksEvENK3__0clEv_block_invoke;
  long long v5 = &__block_descriptor_tmp_810;
  uint64_t v6 = v1;
  sparse_bundles::bundle_commons_t::run_in_high_tier(v2, (uint64_t)&v3);
}

void *di_log::logger<di_log::log_printer<219ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<219ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3F1E0;
  a1[45] = &unk_26CF3F2E0;
  a1[46] = &unk_26CF3F308;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3F1E0;
  a1[45] = &unk_26CF3F268;
  a1[46] = &unk_26CF3F290;
  return a1;
}

void sub_21E356D2C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<219ul>>::~logger(uint64_t a1)
{
  return a1;
}

void ___ZZN14sparse_bundles4Band17get_mapped_blocksEvENK3__0clEv_block_invoke(uint64_t a1)
{
  get_sink_backend(*(void *)(a1 + 32) + 16, &v1);
  operator new();
}

void sub_21E356E50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<226ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<226ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3F400;
  a1[45] = &unk_26CF3F500;
  a1[46] = &unk_26CF3F528;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3F400;
  a1[45] = &unk_26CF3F488;
  a1[46] = &unk_26CF3F4B0;
  return a1;
}

void sub_21E356F88(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<226ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<219ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3F378;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E35706C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3F378;
  di_log::logger_buf<di_log::log_printer<219ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<219ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<219ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<219ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<219ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<219ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<219ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<219ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<219ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3575E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<219ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 219;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 219;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<226ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3F598;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E357870(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3F598;
  di_log::logger_buf<di_log::log_printer<226ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<226ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<226ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<226ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<226ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<226ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<226ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<226ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<226ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E357DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<226ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 226;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    unint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        long long v14 = a2;
      }
      else {
        long long v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 226;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<331ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3E3C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E358074(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<340ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3E5E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E358104(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<343ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3E808;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E358194(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<347ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3EA28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E358224(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<382ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3EC48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3582B4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<399ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3EE68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E358344(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<406ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3F088;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3583D4(_Unwind_Exception *a1)
{
}

atomic_ullong *sparse_bundles::eviction_t::increase(atomic_ullong *this)
{
  return this;
}

void sparse_bundles::eviction_t::decrease(sparse_bundles::eviction_t *this)
{
  unsigned __int8 v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)this, 0xFFFFFFFFFFFFFFFFLL) == 1 && *((unsigned char *)this + 72))
  {
    *((unsigned char *)this + 72) = 0;
    std::condition_variable::notify_one((std::condition_variable *)((char *)this + 80));
  }
  std::mutex::unlock(v2);
}

uint64_t sparse_bundles::eviction_t::start_flush(uint64_t this)
{
  *(unsigned char *)(this + 72) = 1;
  return this;
}

void sparse_bundles::eviction_t::complete_flush(sparse_bundles::eviction_t *this)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (atomic_fetch_add((atomic_ullong *volatile)this, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    *((unsigned char *)this + 72) = 0;
  }
  else
  {
    while (*((unsigned char *)this + 72))
      std::condition_variable::wait((std::condition_variable *)((char *)this + 80), &v2);
  }
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

uint64_t sparse_bundles::open_bands_t::insert(uint64_t **this, unint64_t a2)
{
  unint64_t v19 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(this + 3);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(this + 3));
  LOBYTE(v15[0]) = 0;
  std::__tree<std::__value_type<unsigned long long,BOOL>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,BOOL>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,BOOL>(this, &v19, &v19, v15);
  char v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      di_log::logger<di_log::log_printer<72ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" was opened in the background, waiting for it to become available", 65);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x223C24910](v17);
    }
    uint64_t v7 = this[1];
    char v6 = (char *)(this + 1);
    long long v5 = v7;
    if (v7)
    {
      do
      {
        uint64_t v8 = v6;
        do
        {
          unint64_t v9 = v5[4];
          BOOL v10 = v9 >= v19;
          if (v9 >= v19) {
            unint64_t v11 = (uint64_t **)v5;
          }
          else {
            unint64_t v11 = (uint64_t **)(v5 + 1);
          }
          if (v10) {
            uint64_t v8 = (char *)v5;
          }
          long long v5 = *v11;
        }
        while (*v11);
        if (v8 == v6) {
          break;
        }
        if (v19 < *((void *)v8 + 4)) {
          break;
        }
        if (v8[40]) {
          break;
        }
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        long long v5 = *(uint64_t **)v6;
      }
      while (*(void *)v6);
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36;
      int v14 = 2;
      di_log::logger<di_log::log_printer<79ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Band ", 5);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" is now available", 17);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf((uint64_t)v15);
      MEMORY[0x223C24910](v17);
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v4 & 1;
}

void sub_21E358790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(unsigned char *)(v13 - 64)) {
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<72ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<72ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3F620;
  a1[45] = &unk_26CF3F720;
  a1[46] = &unk_26CF3F748;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3F620;
  a1[45] = &unk_26CF3F6A8;
  a1[46] = &unk_26CF3F6D0;
  return a1;
}

void sub_21E3588D8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<79ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<79ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3F840;
  a1[45] = &unk_26CF3F940;
  a1[46] = &unk_26CF3F968;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3F840;
  a1[45] = &unk_26CF3F8C8;
  a1[46] = &unk_26CF3F8F0;
  return a1;
}

void sub_21E358A40(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  return a1;
}

void sparse_bundles::open_bands_t::mark_as_placed(sparse_bundles::open_bands_t *this, unint64_t a2, int a3)
{
  char v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v7 = (void *)*((void *)this + 1);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = (char *)this + 8;
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v7 + 1;
    }
    if (v10) {
      uint64_t v8 = (char *)v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (char *)this + 8 || *((void *)v8 + 4) > a2) {
LABEL_12:
  }
    uint64_t v8 = (char *)this + 8;
  v8[40] = a3;
  if (a3) {
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  }
  std::mutex::unlock(v6);
}

void sparse_bundles::open_bands_t::remove(sparse_bundles::open_bands_t *this, unint64_t a2)
{
  unint64_t v9 = a2;
  char v3 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>((uint64_t)this, &v9);
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((void *)&v4 + 1) = 36;
    int v5 = 2;
    di_log::logger<di_log::log_printer<98ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Band ", 5);
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)" is closed, notifying waiters", 29);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v3);
}

void sub_21E358C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<98ul>>::logger(void *a1, long long *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<98ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF3FA60;
  a1[45] = &unk_26CF3FB60;
  a1[46] = &unk_26CF3FB88;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF3FA60;
  a1[45] = &unk_26CF3FAE8;
  a1[46] = &unk_26CF3FB10;
  return a1;
}

void sub_21E358DB8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<98ul>>::~logger(uint64_t a1)
{
  return a1;
}

sparse_bundles::bundle_commons_t *sparse_bundles::bundle_commons_t::bundle_commons_t(sparse_bundles::bundle_commons_t *this, DiskImageSparseBundle *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  int v9 = 0;
  std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,int,void>(&v9, __p);
  long long v3 = *(_OWORD *)__p;
  *((void *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = v3;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 17) = 1018212795;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = xmmword_21E3A52C0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 113) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 850045863;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 1018212795;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  long long v4 = (system_properties *)std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.diskimages.band_management");
  unsigned int logical_cpus = system_properties::get_logical_cpus(v4);
  workqueue::workqueue::workqueue((char *)this + 328, __p, logical_cpus);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  workqueue::workqueue::create_transaction((sparse_bundles::bundle_commons_t *)((char *)this + 328), 0, (uint64_t)this + 392);
  workqueue::workqueue::set_target_priority((uint64_t)this + 328, 3);
  return this;
}

void sub_21E358F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __int16 v20 = v17;
  workqueue::transaction::~transaction(v20);
  workqueue::workqueue::~workqueue(v18);
  uint64_t v22 = v14[40];
  v14[40] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sparse_bundles::open_bands_t::~open_bands_t(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)((char *)v15 - 120));
  unint64_t v23 = (std::__shared_weak_count *)v14[4];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = v14[2];
  void v14[2] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
  }
  uint64_t v25 = *v19;
  *unint64_t v19 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  }
  _Unwind_Resume(a1);
}

void sparse_bundles::open_bands_t::~open_bands_t(sparse_bundles::open_bands_t *this)
{
}

void sparse_bundles::bundle_commons_t::run_in_high_tier(uint64_t a1, uint64_t a2)
{
  v18[18] = *(dispatch_group_t *)MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  uint64_t v11 = 0x4802000000;
  os_log_type_t v12 = __Block_byref_object_copy__7;
  uint64_t v13 = __Block_byref_object_dispose__7;
  long long __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  workqueue::workqueue::create_transaction((workqueue::workqueue *)(a1 + 328), 0, (uint64_t)v18);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  _OWORD v8[2] = ___ZN14sparse_bundles16bundle_commons_t16run_in_high_tierEU13block_pointerFvvE_block_invoke;
  v8[3] = &unk_2644A2C60;
  char v8[4] = a2;
  void v8[5] = &v9;
  workqueue::transaction::add(v18, v8);
  workqueue::transaction::~transaction((workqueue::transaction *)v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    long long v4 = v10;
    uint64_t v5 = *((unsigned int *)v10 + 16);
    *(void *)exception = &unk_26CF39EE0;
    char v6 = std::generic_category();
    *((void *)exception + 1) = v5;
    *((void *)exception + 2) = v6;
    uint64_t v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((void *)exception + 5) = v7;
    v4[6] = 0;
    v4[7] = 0;
    void v4[5] = 0;
    exception[48] = 1;
  }
  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_21E359240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t ___ZN14sparse_bundles16bundle_commons_t16run_in_high_tierEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sparse_bundles::band_to_filename@<X0>(void *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  *(_DWORD *)((char *)v5 + *(void *)(v4 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v4 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v5[-1] + *(void *)(v4 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v5[0] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C24910](&v7);
}

void sub_21E359534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<72ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<72ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3F7B8;
  di_log::logger_buf<di_log::log_printer<72ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<72ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E359A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<72ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<72ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 72;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 72;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<79ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<79ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3F9D8;
  di_log::logger_buf<di_log::log_printer<79ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<79ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35A1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<79ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<79ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 79;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 79;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<98ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<98ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<98ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<98ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<98ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF3FBF8;
  di_log::logger_buf<di_log::log_printer<98ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<98ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<98ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35A958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<98ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<98ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 98;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      BOOL v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 98;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,BOOL>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,BOOL>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,BOOL>(uint64_t **a1, unint64_t *a2, void *a3, unsigned char *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    os_log_type_t v12 = operator new(0x30uLL);
    void v12[4] = *a3;
    *((unsigned char *)v12 + 40) = *a4;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t di_log::logger_buf<di_log::log_printer<72ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3F7B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E35ADF0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<79ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3F9D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E35AE80(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<98ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF3FBF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E35AF10(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,int,void>(int *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<BackendNull>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E35AF84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<BackendNull>,0>(uint64_t a1, int *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF21058;
  uint64_t v3 = *a2;
  uint64_t v4 = di_utils::random_uuid((di_utils *)a1);
  uint64_t v6 = v5;
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = &unk_26CF210A8;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v4;
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_21E35B020(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void AEA_backend::AEA_backend(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a2);
  *uint64_t v6 = &unk_26CF3FC78;
  uint64_t v7 = v6 + 5;
  uint64_t v8 = *a2;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v12 = 0;
  int v13 = v10;
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  uint64_t v15 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<aea_format::AEA_format,std::allocator<aea_format::AEA_format>,aea_format::AEA_format,void>((uint64_t)&v12, v7);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  operator new();
}

void sub_21E35B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  BackendInternalBackend::~BackendInternalBackend(v13);
  _Unwind_Resume(a1);
}

void AEA_backend::create_streams(AEA_backend *this, int a2)
{
  uint64_t v4 = (std::mutex *)*((void *)this + 9);
  std::mutex::lock(v4);
  lseek(a2, 0, 0);
  *(void *)&long long v10 = AAFileStreamOpenWithFD(a2, 0);
  AEAwrapper::ByteStream::ByteStream(&v13, &v10);
  AEAwrapper::Context::Context((AEAwrapper::Context *)&v12, (AEAwrapper::ByteStream *)&v13);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v6 = *(uint8_t **)(v5 + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AEAwrapper::Context::setSymmetricKey(&v12, v6, 0x20uLL);
  AEAwrapper::ByteStream::make_DecryptionRandomAccessInputStream(&v13, &v12, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v11);
  std::allocate_shared[abi:ne180100]<AEAwrapper::DecryptionStream,std::allocator<AEAwrapper::DecryptionStream>,AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,void>(&v13, (uint64_t *)&v12, &v11, &v10);
  long long v8 = v10;
  long long v10 = 0uLL;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  AEAwrapper::ByteStream::~ByteStream(&v11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  AEAwrapper::Context::~Context(&v12);
  AEAwrapper::ByteStream::~ByteStream(&v13);
  std::mutex::unlock(v4);
}

void sub_21E35B304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v6 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v8 = va_arg(va2, AEAContext);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  AEAwrapper::Context::~Context((AEAContext *)va1);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t AEA_backend::AEA_backend(uint64_t a1, void *a2, void *a3)
{
  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a3);
  *uint64_t v5 = &unk_26CF3FC78;
  uint64_t v6 = a2[6];
  void v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v7 = a2[10];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  AEA_backend::create_streams((AEA_backend *)a1, *(_DWORD *)(*(void *)(a1 + 40) + 8));
  return a1;
}

void sub_21E35B400(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  AEA_backend::AEA_backend((uint64_t)v1, v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

double AEA_backend::construct_context_from_inner@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,AEA_backend&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t AEA_backend::read(uint64_t a1, uint64_t a2)
{
  return AEAwrapper::DecryptionStream::pread(*(AAByteStream **)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t AEA_backend::get_size(AEA_backend *this)
{
  return **((void **)this + 5);
}

uint64_t AEA_backend::get_compressed_blk_size(AEAContext **this)
{
  return AEAwrapper::DecryptionStream::getCompressionBlockSize(this[7]);
}

void AEA_backend::~AEA_backend(AEA_backend *this)
{
  *(void *)this = &unk_26CF3FC78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)this = &unk_26CF3B088;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_26CF3FC78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)this = &unk_26CF3B088;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  JUMPOUT(0x223C249A0);
}

void *AEA_backend::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AEA", 3);
}

void *std::allocate_shared[abi:ne180100]<aea_format::AEA_format,std::allocator<aea_format::AEA_format>,aea_format::AEA_format,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  double result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = &unk_26CF3FD58;
  result[3] = *(void *)a1;
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  result[5] = *(void *)(a1 + 16);
  result[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<aea_format::AEA_format>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3FD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<aea_format::AEA_format>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3FD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<aea_format::AEA_format>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::shared_ptr<AEA_backend::shared_state_t>::shared_ptr[abi:ne180100]<AEA_backend::shared_state_t,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E35B788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AEA_backend::shared_state_t>::reset[abi:ne180100]((std::mutex **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

std::mutex *std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::__on_zero_shared(uint64_t a1)
{
  double result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AEA_backend::shared_state_t *,std::shared_ptr<AEA_backend::shared_state_t>::__shared_ptr_default_delete<AEA_backend::shared_state_t,AEA_backend::shared_state_t>,std::allocator<AEA_backend::shared_state_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *std::unique_ptr<AEA_backend::shared_state_t>::reset[abi:ne180100](std::mutex **a1, std::mutex *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x223C249A0);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<AEAwrapper::DecryptionStream,std::allocator<AEAwrapper::DecryptionStream>,AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,void>@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  AEAContext v8 = operator new(0x30uLL);
  double result = std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__shared_ptr_emplace[abi:ne180100]<AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,std::allocator<AEAwrapper::DecryptionStream>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_21E35B918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__shared_ptr_emplace[abi:ne180100]<AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,std::allocator<AEAwrapper::DecryptionStream>,0>(void *a1, void *a2, uint64_t *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF3FE20;
  AEAwrapper::DecryptionStream::DecryptionStream(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_21E35B974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3FE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF3FE20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<AEAwrapper::DecryptionStream>::__on_zero_shared(AAByteStream *a1)
{
  uint64_t v2 = a1 + 3;
  AEAwrapper::ByteStream::~ByteStream(a1 + 5);
  AEAwrapper::Context::~Context(a1 + 4);
  AEAwrapper::ByteStream::~ByteStream(v2);
}

void std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,AEA_backend&,std::shared_ptr<Backend> const&,void>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<AEA_backend&,std::shared_ptr<Backend> const&,std::allocator<AEA_backend>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E35BAB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<AEA_backend&,std::shared_ptr<Backend> const&,std::allocator<AEA_backend>,0>(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF21740;
  AEA_backend::AEA_backend((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_21E35BB0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "full_fsync";
    uint64_t v3 = 10;
  }
  else if (a2 == 1)
  {
    uint64_t v2 = "fsync";
    uint64_t v3 = 5;
  }
  else if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"bad flush type (", 16);
    a1 = (void *)std::ostream::operator<<();
    uint64_t v2 = ")";
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v2 = "barrier";
    uint64_t v3 = 7;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

void *operator<<(void *a1)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 24);
  int v3 = *((_DWORD *)v2 + 2);
  *((_DWORD *)v2 + 2) = v3 & 0xFFFFFFB5 | 8;
  char v16 = 48;
  uint64_t v4 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, &v16);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) |= 0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"sg: buffer = ", 13);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
  uint64_t v7 = (void *)std::ostream::operator<<();
  AEAContext v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
  uint64_t v9 = *v8;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)v8 + *(void *)(v9 - 24) + 24) = 0;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) &= ~0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" std::string::size_type size = ", 8);
  long long v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" buffer_std::string::size_type size = ", 15);
  AAByteStream v11 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  char v15 = 48;
  AEAContext v12 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, &v15);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) |= 0x200u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" offset = ", 10);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v3;
  return a1;
}

void Backend::Backend(Backend *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26CF3FE70;
}

uint64_t operator<<(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, a1);
}

void get_sink_backend(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  if (*(void *)a1
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 4);
    v9[0] = *((void *)v5 + 3);
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    get_sink_backend(v9);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_21E35BF9C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t replace_internal_backend(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t v4 = *(const void **)a1;
  if (v4 == *a2) {
    return 4294967274;
  }
  if (!v4) {
    return 4294967294;
  }
  if (!v7) {
    return 4294967294;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (const void *)*((void *)v7 + 3);
  long long v10 = (std::__shared_weak_count *)*((void *)v7 + 4);
  v16[0] = v9;
  v16[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9 == *a2)
  {
    uint64_t v14 = *a3;
    uint64_t v13 = a3[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    char v15 = (std::__shared_weak_count *)*((void *)v7 + 4);
    *((void *)v7 + 3) = v14;
    *((void *)v7 + 4) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v11 = 0;
    if (!v10) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = replace_internal_backend(v16, a2, a3);
    if (!v10) {
      goto LABEL_11;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_11:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v11;
}

void sub_21E35C0FC(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void get_next_backend_in_graph(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  if (*(void *)a1
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6[3];
    uint64_t v8 = v6[4];
    *a2 = v9;
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    *a2 = v4;
    a2[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

uint64_t BackendSG::BackendSG(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v10 = a4;
  uint64_t v11 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF3B088;
  *(void *)(a1 + 24) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26CF3FF30;
  *(void *)(a1 + 40) = a3;
  unsigned int v9 = 0;
  std::allocate_shared[abi:ne180100]<BufferAllocator,std::allocator<BufferAllocator>,unsigned long &,int,unsigned long &,void>(&v11, &v9, &v10, (void *)(a1 + 48));
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 112) = a5;
  return a1;
}

void sub_21E35C2C8(_Unwind_Exception *a1)
{
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void BackendSG::write(uint64_t a1)
{
  BufferAllocator::allocate(*(std::condition_variable **)(a1 + 48), &v1);
}

void sub_21E35C428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  di_log::logger<di_log::log_printer<124ul>>::~logger((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 40);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void BackendSG::read(uint64_t a1)
{
  BufferAllocator::allocate(*(std::condition_variable **)(a1 + 48), &v1);
}

void sub_21E35C5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  di_log::logger<di_log::log_printer<138ul>>::~logger((uint64_t)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 56);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<138ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<138ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF400F8;
  a1[45] = &unk_26CF401F8;
  a1[46] = &unk_26CF40220;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF400F8;
  a1[45] = &unk_26CF40180;
  a1[46] = &unk_26CF401A8;
  return a1;
}

void sub_21E35C6E0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t BackendSG::truncate(BackendSG *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  if (v4)
  {
    *(void *)&long long v11 = "int BackendSG::truncate(uint64_t)";
    *((void *)&v11 + 1) = 23;
    int v12 = 16;
    di_log::logger<di_log::log_printer<157ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"BackendSG: truncating the inner backend failed, CFErrorRef error = ", 56);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x223C24910](&v15);
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)this + 88);
    uint64_t v6 = *((void *)this + 9);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 9);
      *((void *)this + 8) = v7;
      *((void *)this + 9) = v6;
      if (v8)
      {
        long long v10 = v5;
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        long long v5 = v10;
      }
    }
    else
    {
      *((void *)this + 9) = 0;
    }
    *((void *)this + 10) = a2;
    *(_OWORD *)((char *)this + 88) = v5;
    *((unsigned char *)this + 104) = 0;
  }
  return v4;
}

void sub_21E35C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  di_log::logger<di_log::log_printer<157ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 BackendSG::BackendSG(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF3B088;
  uint64_t v3 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26CF3FF30;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a2 + 80);
  *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  *(__n128 *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return result;
}

double BackendSG::construct_context_from_inner@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,BackendSG&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t BufferedWriteBackend::BufferedWriteBackend(uint64_t a1, void *a2, std::vector<char>::size_type __n)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF3B088;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26CF3FFF8;
  *(void *)(a1 + 40) = 850045863;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 104), __n);
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  return a1;
}

void sub_21E35CA20(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t BufferedWriteBackend::reset_last_offset(BufferedWriteBackend *this, unint64_t a2)
{
  uint64_t v4 = *((void *)this + 13);
  unint64_t v5 = a2 % (*((void *)this + 14) - v4);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  uint64_t v9 = v4;
  long long v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = v5;
  uint64_t v12 = a2 - v5;
  unint64_t v13 = v5;
  char v14 = 0;
  uint64_t v7 = (*(uint64_t (**)(BufferedWriteBackend *, uint64_t *))(*(void *)this + 104))(this, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v5 == (int)v7)
  {
LABEL_7:
    uint64_t v7 = 0;
    *((void *)this + 16) = a2;
    *((unsigned char *)this + 136) = 1;
  }
  return v7;
}

void sub_21E35CB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t BufferedWriteBackend::write(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (!*(unsigned char *)(a1 + 136))
  {
    unint64_t offset = BufferedWriteBackend::reset_last_offset((BufferedWriteBackend *)a1, *(void *)(a2 + 24));
    if (offset) {
      goto LABEL_26;
    }
  }
  unint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 104);
  size_t v7 = *(void *)(a1 + 112) - v6;
  unint64_t v8 = v5 % v7;
  if (v5 % v7)
  {
    size_t v9 = v7 - v8;
    if (v9 >= *(void *)(a2 + 16)) {
      size_t v10 = *(void *)(a2 + 16);
    }
    else {
      size_t v10 = v9;
    }
    memcpy((void *)(v6 + v8), *(const void **)a2, v10);
    size_t v11 = *(void *)(a1 + 104);
    size_t v7 = *(void *)(a1 + 112) - v11;
    if (v10 + v8 == v7)
    {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
      size_t v20 = v11;
      uint64_t v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v22 = v10 + v8;
      size_t v23 = v5 - v8;
      size_t v24 = v10 + v8;
      char v25 = 0;
      unint64_t offset = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
      unint64_t v14 = v22;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v14 != (int)offset) {
        goto LABEL_26;
      }
      size_t v7 = *(void *)(a1 + 112) - *(void *)(a1 + 104);
    }
  }
  else
  {
    size_t v10 = 0;
  }
  unint64_t offset = *(void *)(a2 + 16);
  unint64_t v15 = (offset - v10) / v7 * v7;
  if (offset - v10 == (offset - v10) % v7)
  {
LABEL_23:
    if (offset > v10)
    {
      memcpy(*(void **)(a1 + 104), (const void *)(*(void *)a2 + v10), offset - v10);
      unint64_t offset = *(void *)(a2 + 16);
    }
    *(void *)(a1 + 128) += offset;
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  size_t v17 = *(void *)(a2 + 24) + v10;
  __int16 v18 = *(std::__shared_weak_count **)(a2 + 8);
  size_t v20 = *(void *)a2 + v10;
  uint64_t v21 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v15;
  size_t v23 = v17;
  size_t v24 = v16 - v10;
  char v25 = 0;
  unint64_t offset = (*(uint64_t (**)(void, size_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v15 == (int)offset)
  {
    v10 += v15;
    unint64_t offset = *(void *)(a2 + 16);
    goto LABEL_23;
  }
LABEL_26:
  std::mutex::unlock(v4);
  return offset;
}

void sub_21E35CD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t BufferedWriteBackend::flush(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v5 = *(void *)(a1 + 104);
    unint64_t v6 = *(void *)(a1 + 112) - v5;
    unint64_t v7 = *(void *)(a1 + 128) % v6;
    if (!v7) {
      goto LABEL_11;
    }
    bzero((void *)(v5 + v7), v6 - v7);
    uint64_t v8 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    size_t v11 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
    uint64_t v17 = v9;
    __int16 v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v10 - v9;
    uint64_t v20 = v8 - v7;
    uint64_t v21 = v10 - v9;
    char v22 = 0;
    int v12 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), &v17);
    uint64_t v13 = v12;
    uint64_t v14 = v12 >= 0 ? 4294967291 : v12;
    uint64_t v15 = v19;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v15 == v13) {
LABEL_11:
    }
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2);
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v4);
  return v14;
}

void sub_21E35CEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void BufferedWriteBackend::~BufferedWriteBackend(BufferedWriteBackend *this)
{
  BufferedWriteBackend::~BufferedWriteBackend(this);
  JUMPOUT(0x223C249A0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_26CF3FFF8;
  BufferedWriteBackend::flush((uint64_t)this, 1);
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  *(void *)this = &unk_26CF3B088;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *BufferedWriteBackend::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BufferedWriteBackend", 20);
}

void *BufferedWriteBackend::construct_context_from_inner@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(a2, (void *)(a1 + 8));
}

void BackendSG::~BackendSG(BackendSG *this)
{
  *(void *)this = &unk_26CF3FF30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_26CF3B088;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_26CF3FF30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_26CF3B088;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x223C249A0);
}

void *BackendSG::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendSG", 9);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<138ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<138ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF40290;
  di_log::logger_buf<di_log::log_printer<138ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<138ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35D5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<138ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<138ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 138;
    __int16 v22 = 2082;
    size_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    size_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 138;
      __int16 v22 = 2082;
      size_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  double result = __error();
  *double result = v5;
  return result;
}

void *std::allocate_shared[abi:ne180100]<BufferAllocator,std::allocator<BufferAllocator>,unsigned long &,int,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xB8uLL);
  double result = std::__shared_ptr_emplace<BufferAllocator>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,unsigned long &,std::allocator<BufferAllocator>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_21E35D8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BufferAllocator>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,int,unsigned long &,std::allocator<BufferAllocator>,0>(void *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF40310;
  BufferAllocator::BufferAllocator((BufferAllocator *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_21E35D964(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF40310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF40310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<BufferAllocator>::__on_zero_shared(uint64_t a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<138ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF40290;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E35DA74(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<BackendSG,std::allocator<BackendSG>,BackendSG&,std::shared_ptr<Backend> const&,void>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x90uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *char v6 = &unk_26CF34DC8;
  BackendSG::BackendSG((uint64_t)(v6 + 3), a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void CompressedBackend::make_backend(void *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (*a2 == 4) {
    std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,std::shared_ptr<Backend> const&,unsigned long &,void>((uint64_t)&v4, a1, &v3);
  }
  std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,void>((uint64_t)&v4, a1, a2, &v3);
}

void CompressedBackend::CompressedBackend(Backend *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  BackendInternalBackend::BackendInternalBackend(a1, a2);
  *(void *)uint64_t v6 = &unk_26CF40360;
  *(_DWORD *)(v6 + 40) = *a3;
  *(void *)(v6 + 48) = a4;
  operator new[]();
}

void sub_21E35DC2C(_Unwind_Exception *a1)
{
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void CompressedBackend::CompressedBackend(Backend *a1, uint64_t a2, void *a3)
{
  BackendInternalBackend::BackendInternalBackend(a1, a3);
  *(void *)uint64_t v4 = &unk_26CF40360;
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  operator new[]();
}

void sub_21E35DCE0(_Unwind_Exception *a1)
{
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

void CompressedBackend::~CompressedBackend(CompressedBackend *this)
{
  *(void *)this = &unk_26CF40360;
  boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 72);
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    MEMORY[0x223C24980](v2, 0x1000C8077774924);
  }
  *(void *)this = &unk_26CF3B088;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t CompressedBackend::read(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 64);
  if (v4 != *(char **)(a1 + 56))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
    uint64_t v4 = *(char **)(a1 + 56);
  }
  uint64_t v5 = Backend::read(*(Backend **)(a1 + 24), v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
    *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
    *((void *)&v10 + 1) = 27;
    int v11 = 16;
    di_log::logger<di_log::log_printer<49ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Internal backend read() failed. ret=", 36);
    std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)&v14[*(void *)(v13 - 24) - 8]);
    uint64_t v8 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    std::ostream::flush();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x223C24910](v14);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192))(a1, a2, *(void *)(a1 + 56));
    if (v6)
    {
      return v6;
    }
    else
    {
      *(void *)&long long v10 = "int CompressedBackend::read(const sg_entry &)";
      *((void *)&v10 + 1) = 27;
      int v11 = 16;
      di_log::logger<di_log::log_printer<55ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Decompression failed", 20);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x223C24910](v14);
      return 4294967291;
    }
  }
  return v7;
}

void sub_21E35DFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<55ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<49ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<49ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF40638;
  a1[45] = &unk_26CF40738;
  a1[46] = &unk_26CF40760;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF40638;
  a1[45] = &unk_26CF406C0;
  a1[46] = &unk_26CF406E8;
  return a1;
}

void sub_21E35E0D8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<55ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<55ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF40858;
  a1[45] = &unk_26CF40958;
  a1[46] = &unk_26CF40980;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF40858;
  a1[45] = &unk_26CF408E0;
  a1[46] = &unk_26CF40908;
  return a1;
}

void sub_21E35E240(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  return a1;
}

unint64_t CompressedBackend::future_read@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + 2;
  unint64_t v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v6 = a1[8];
    unint64_t v8 = *v7;
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)&long long v23 = v6;
  *((void *)&v23 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v24 = v8;
  *(void *)&unsigned char v24[8] = v10;
  *(void *)&v24[16] = v8;
  v24[24] = 0;
  (*(void (**)(void *__return_ptr, uint64_t, long long *))(*(void *)v9 + 128))(v30, v9, &v23);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (!BYTE4(v30[0]) && !v30[4]) {
    return lw_future<int>::lw_future(a3, v30);
  }
  LOBYTE(v23) = 0;
  BYTE4(v23) = 0;
  *((void *)&v23 + 1) = 0;
  *(void *)uint64_t v24 = ref::details::_get_tagged_ptr_lock((unint64_t)&v23, v12);
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v23, v14);
  int v31 = &v23;
  *(void *)&unsigned char v24[8] = tagged_ptr_cond;
  *(void *)&v24[16] = &v31;
  lw_future<int>::lw_future((unint64_t)v28, &v23);
  uint64_t v16 = v31;
  long long v29 = v31;
  *((void *)v31 + 4) = &v29;
  uint64_t v17 = a2[1];
  *(void *)&long long v23 = *a2;
  *((void *)&v23 + 1) = v17;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    uint64_t v16 = v29;
  }
  *(_OWORD *)&v24[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v7;
  char v25 = v16;
  long long v29 = 0;
  *((void *)v16 + 4) = &v25;
  lw_future<int>::lw_future((unint64_t)v26, v30);
  uint64_t v18 = a1[9];
  uint64_t v27 = a1[8];
  uint64_t v19 = a1[10];
  __int16 v20 = (_OWORD *)(v18 + 104 * v19);
  if (v19 == a1[11])
  {
    boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(a1 + 9, (void *)(v18 + 104 * v19), (const char *)1, (uint64_t)&v23, &v31);
  }
  else
  {
    *__int16 v20 = v23;
    long long v23 = 0uLL;
    long long v21 = *(_OWORD *)v24;
    *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)&v24[9];
    v20[1] = v21;
    __int16 v22 = (void *)(v18 + 104 * v19);
    v22[6] = v25;
    v22 += 6;
    char v25 = 0;
    *(void *)(*v22 + 32) = v22;
    lw_future<int>::lw_future((unint64_t)(v22 + 1), v26);
    *(void *)(v18 + 104 * v19 + 96) = v27;
    ++a1[10];
  }
  if (v25) {
    *((void *)v25 + 4) = 0;
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  a1[8] += *v7;
  unint64_t result = lw_future<int>::lw_future(a3, v28);
  if (v29) {
    *((void *)v29 + 4) = 0;
  }
  return result;
}

void sub_21E35E550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15) {
    *(void *)(a15 + 32) = 0;
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a28) {
    *(void *)(a28 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void CompressedBackend::run_futures(CompressedBackend *this)
{
  (*(void (**)(void))(**((void **)this + 3) + 144))(*((void *)this + 3));
  uint64_t v3 = *((void *)this + 9);
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    uint64_t v4 = v3 + 48;
    uint64_t v5 = 104 * v2;
    do
    {
      unsigned int v6 = lw_future<int>::get((unsigned int *)(v4 + 8));
      unsigned int v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v10 = v3 + 48;
        uint64_t v11 = *(unsigned int **)v4;
        unsigned int *v11 = v7;
        uint64_t v9 = v11 + 1;
      }
      else if (*(void *)(v4 - 32) <= (unint64_t)v6)
      {
        uint64_t v12 = (*(uint64_t (**)(CompressedBackend *, uint64_t, void))(*(void *)this + 192))(this, v4 - 48, *(void *)(v4 + 48));
        if (v12)
        {
          int v13 = v12;
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = v13;
        }
        else
        {
          *(void *)&long long v15 = "void CompressedBackend::run_futures()";
          *((void *)&v15 + 1) = 35;
          int v16 = 16;
          di_log::logger<di_log::log_printer<94ul>>::logger(v17, &v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Decompression failed", 20);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf((uint64_t)v17);
          MEMORY[0x223C24910](&v19);
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = -5;
        }
        uint64_t v9 = v14 + 1;
      }
      else
      {
        unint64_t v8 = *(unsigned int **)v4;
        *unint64_t v8 = -5;
        uint64_t v9 = v8 + 1;
        uint64_t v10 = v4;
      }
      *uint64_t v9 = 1;
      lw_promise<int>::notify_future(v10);
      v3 += 104;
      v4 += 104;
      v5 -= 104;
    }
    while (v5);
  }
  *((void *)this + 8) = *((void *)this + 7);
  boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all((void *)this + 9);
}

void sub_21E35E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<94ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<94ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<94ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF40A78;
  a1[45] = &unk_26CF40B78;
  a1[46] = &unk_26CF40BA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF40A78;
  a1[45] = &unk_26CF40B00;
  a1[46] = &unk_26CF40B28;
  return a1;
}

void sub_21E35E894(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t CompressedBackend::write(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 64) != *(void *)(a1 + 56)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, a2);
  if (!v4) {
    return 4294967291;
  }
  uint64_t v5 = v4;
  uint64_t v6 = Backend::write(*(Backend **)(a1 + 24), *(char **)(a1 + 56), v4, *(void *)(a2 + 24));
  if ((v6 & 0x80000000) == 0) {
    return v5;
  }
  uint64_t v7 = v6;
  *(void *)&long long v10 = "int CompressedBackend::write(const sg_entry &)";
  *((void *)&v10 + 1) = 28;
  int v11 = 16;
  di_log::logger<di_log::log_printer<117ul>>::logger(v12, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Internal backend write() failed. ret=", 37);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)&v13 + *(void *)(v13 - 24)));
  unint64_t v8 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<117ul>>::~logger_buf((uint64_t)v12);
  MEMORY[0x223C24910](&v14);
  return v7;
}

void sub_21E35EABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::locale::~locale((std::locale *)(v5 - 40));
  di_log::logger<di_log::log_printer<117ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CompressedBackend::name(uint64_t a1, void *a2)
{
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Compressed(", 11);
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = operator<<(v3, &v6);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
}

void StandardCompressedBackend::StandardCompressedBackend(Backend *a1, void *a2, int *a3, uint64_t a4)
{
  int v4 = *a3;
  CompressedBackend::CompressedBackend(a1, a2, &v4, a4);
}

void sub_21E35EC84(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 222);
  *((void *)v1 + 222) = 0;
  if (v3) {
    MEMORY[0x223C249A0](v3, 0x1000C4052888210);
  }
  uint64_t v4 = *((void *)v1 + 221);
  *((void *)v1 + 221) = 0;
  if (v4) {
    MEMORY[0x223C24980](v4, 0x1000C8077774924);
  }
  CompressedBackend::~CompressedBackend(v1);
  _Unwind_Resume(a1);
}

void StandardCompressedBackend::StandardCompressedBackend(Backend *a1, uint64_t a2, void *a3)
{
}

void sub_21E35EDC0(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 222);
  *((void *)v1 + 222) = 0;
  if (v3) {
    MEMORY[0x223C249A0](v3, 0x1000C4052888210);
  }
  uint64_t v4 = *((void *)v1 + 221);
  *((void *)v1 + 221) = 0;
  if (v4) {
    MEMORY[0x223C24980](v4, 0x1000C8077774924);
  }
  CompressedBackend::~CompressedBackend(v1);
  _Unwind_Resume(a1);
}

size_t StandardCompressedBackend::decompress(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer(*(uint8_t **)a2, *(void *)(a2 + 32), a3, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t StandardCompressedBackend::compress(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer(*(uint8_t **)(a1 + 56), *(void *)(a2 + 16), *(const uint8_t **)a2, *(void *)(a2 + 16), *(void **)(a1 + 1768), (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

void StandardCompressedBackend::construct_context_from_inner(uint64_t a1, void *a2)
{
  std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,StandardCompressedBackend&,std::shared_ptr<Backend> const&,void>((uint64_t)&v2, a1, a2);
}

uint64_t BZIPCompressedBackend::decompress(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int destLen = *(void *)(a2 + 32);
  if (!BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0)) {
    return destLen;
  }
  *(void *)&long long v4 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((void *)&v4 + 1) = 40;
  int v5 = 16;
  di_log::logger<di_log::log_printer<242ul>>::logger(v6, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"BZIP decompression failed, res=", 31);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf((uint64_t)v6);
  MEMORY[0x223C24910](&v8);
  return 0;
}

void sub_21E35EF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<242ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<242ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<242ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF40C98;
  a1[45] = &unk_26CF40D98;
  a1[46] = &unk_26CF40DC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF40C98;
  a1[45] = &unk_26CF40D20;
  a1[46] = &unk_26CF40D48;
  return a1;
}

void sub_21E35F08C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t BZIPCompressedBackend::compress(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unsigned int destLen = v2;
  unint64_t v3 = v2 / 0x186A0;
  if ((int)(v2 / 0x186A0) >= 8) {
    LODWORD(v3) = 8;
  }
  int v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if (v4 != -8)
  {
    if (!v4) {
      return destLen;
    }
    *(void *)&long long v6 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((void *)&v6 + 1) = 38;
    int v7 = 16;
    di_log::logger<di_log::log_printer<265ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"BZIP compression failed, res=", 29);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x223C24910](&v10);
  }
  return 0;
}

void sub_21E35F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<265ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<265ul>>::logger(void *a1, long long *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<265ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF40EB8;
  a1[45] = &unk_26CF40FB8;
  a1[46] = &unk_26CF40FE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF40EB8;
  a1[45] = &unk_26CF40F40;
  a1[46] = &unk_26CF40F68;
  return a1;
}

void sub_21E35F30C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  return a1;
}

void BZIPCompressedBackend::construct_context_from_inner(uint64_t a1, void *a2)
{
  std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,BZIPCompressedBackend&,std::shared_ptr<Backend> const&,void>((uint64_t)&v2, a1, a2);
}

void StandardCompressedBackend::~StandardCompressedBackend(StandardCompressedBackend *this)
{
  *(void *)this = &unk_26CF40438;
  uint64_t v2 = *((void *)this + 222);
  *((void *)this + 222) = 0;
  if (v2) {
    MEMORY[0x223C249A0](v2, 0x1000C4052888210);
  }
  uint64_t v3 = *((void *)this + 221);
  *((void *)this + 221) = 0;
  if (v3) {
    MEMORY[0x223C24980](v3, 0x1000C8077774924);
  }
  CompressedBackend::~CompressedBackend(this);
}

{
  uint64_t vars8;

  StandardCompressedBackend::~StandardCompressedBackend(this);
  JUMPOUT(0x223C249A0);
}

void BZIPCompressedBackend::~BZIPCompressedBackend(BZIPCompressedBackend *this)
{
  CompressedBackend::~CompressedBackend(this);
  JUMPOUT(0x223C249A0);
}

uint64_t boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      int v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<49ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<49ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF407D0;
  di_log::logger_buf<di_log::log_printer<49ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<49ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E35FA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<49ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<49ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 49;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 49;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<55ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<55ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF409F0;
  di_log::logger_buf<di_log::log_printer<55ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<55ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3601D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<55ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<55ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 55;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 55;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<94ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<94ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF40C10;
  di_log::logger_buf<di_log::log_printer<94ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<94ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36094C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<94ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<94ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 94;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 94;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

_DWORD *StandardCompressedBackend::pimpl::pimpl(_DWORD *a1, int *a2)
{
  *a1 = StandardCompressedBackend::pimpl::pimpl(CompressedBackend::algo_t)::algos[*a2];
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((void *)&v5 + 1) = 39;
    int v6 = 2;
    di_log::logger<di_log::log_printer<175ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Using compression ", 18);
    int v10 = *a2;
    operator<<(&v8, &v10);
    *(_DWORD *)((char *)&v8 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)&v8 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)" constant ", 10);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x223C24910](&v9);
  }
  return a1;
}

void sub_21E360CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<175ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<242ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<242ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF40E30;
  di_log::logger_buf<di_log::log_printer<242ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<242ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3611EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<242ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<242ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 242;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 242;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<265ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<265ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41050;
  di_log::logger_buf<di_log::log_printer<265ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<265ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E361960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<265ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<265ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 265;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 265;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,std::shared_ptr<Backend> const&,unsigned long &,void>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v5 = operator new(0x6F8uLL);
  std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,std::allocator<BZIPCompressedBackend>,0>((uint64_t)v5, a2, a3);
}

void sub_21E361C14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,unsigned long &,std::allocator<BZIPCompressedBackend>,0>(uint64_t a1, void *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF410D0;
  uint64_t v3 = *a3;
  int v4 = 4;
  CompressedBackend::CompressedBackend((Backend *)(a1 + 24), a2, &v4, v3);
}

void sub_21E361CA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF410D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF410D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<BZIPCompressedBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,void>(uint64_t a1, void *a2, int *a3, uint64_t *a4)
{
  uint64_t v7 = operator new(0x710uLL);
  std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,std::allocator<StandardCompressedBackend>,0>((uint64_t)v7, a2, a3, a4);
}

void sub_21E361DCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,CompressedBackend::algo_t &,unsigned long &,std::allocator<StandardCompressedBackend>,0>(uint64_t a1, void *a2, int *a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF41120;
  int v4 = *a3;
  StandardCompressedBackend::StandardCompressedBackend((Backend *)(a1 + 24), a2, &v4, *a4);
}

void sub_21E361E40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF41120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF41120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t std::__shared_ptr_emplace<StandardCompressedBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t di_log::logger_buf<di_log::log_printer<49ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF407D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E361F6C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<55ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF409F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E361FFC(_Unwind_Exception *a1)
{
}

void boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t *a1@<X0>, void *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = operator new(104 * v11);
  boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>((uint64_t)a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x13B13B13B13B13BLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  uint64_t v9 = &a2[v3];
  if (v8 < 0x13B13B13B13B13BLL) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(a1, *(void **)a1, a4, (void *)(*(void *)a1 + 104 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = v10 + 48;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 40);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        v12 += 104;
        --v11;
      }
      while (v11);
    }
    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = a3;
}

void sub_21E362204(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t>>(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a5;
  uint64_t v17 = a1;
  uint64_t v12 = boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(a1, a2, a3, a5);
  uint64_t v16 = v12;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(void *)(v12 + 48) = *(void *)(a7 + 48);
  *(void *)(a7 + 48) = 0;
  *(void *)(*(void *)(v12 + 48) + 32) = v12 + 48;
  lw_future<int>::lw_future(v12 + 56, (_DWORD *)(a7 + 56));
  *(void *)(v12 + 96) = *(void *)(a7 + 96);
  boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(a1, a3, a4, v12 + 104 * a6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  return boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(&v15);
}

void sub_21E362300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 32) = 0;
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>>::~scoped_destructor_range((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = &a2[v7];
      uint64_t v9 = a4 + v7 * 8;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2[v7];
      *unint64_t v8 = 0;
      v8[1] = 0;
      long long v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(a4 + v7 * 8 + 48) = a2[v7 + 6];
      void v8[6] = 0;
      *(void *)(*(void *)(a4 + v7 * 8 + 48) + 32) = a4 + v7 * 8 + 48;
      lw_future<int>::lw_future(a4 + v7 * 8 + 56, &a2[v7 + 7]);
      *(void *)(v9 + 96) = a2[v7 + 12];
      v7 += 13;
    }
    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }
  return a4;
}

void sub_21E3623E0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    *(void *)(v4 + 32) = 0;
  }
  boost::container::uninitialized_move_alloc<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,CompressedBackend::promise_io_t*,CompressedBackend::promise_io_t*>((std::__shared_weak_count **)(v3 + 8), a1, a2, v3, v2);
  __cxa_rethrow();
}

void sub_21E36240C(_Unwind_Exception *a1)
{
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    unint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 104;
    *a1 = v2;
  }
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<94ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF40C10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3624F4(_Unwind_Exception *a1)
{
}

void boost::container::vector<CompressedBackend::promise_io_t,boost::container::small_vector_allocator<CompressedBackend::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 48;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      char v4 = *(std::__shared_weak_count **)(v3 - 40);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      v3 += 104;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

void std::allocate_shared[abi:ne180100]<StandardCompressedBackend,std::allocator<StandardCompressedBackend>,StandardCompressedBackend&,std::shared_ptr<Backend> const&,void>(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x710uLL);
  std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<StandardCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<StandardCompressedBackend>,0>((uint64_t)v5, a2, a3);
}

void sub_21E3625D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<StandardCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<StandardCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<StandardCompressedBackend>,0>(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF41120;
  StandardCompressedBackend::StandardCompressedBackend((Backend *)(a1 + 24), a2, a3);
}

void sub_21E36262C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<242ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF40E30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3626BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<265ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41050;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E36274C(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<BZIPCompressedBackend,std::allocator<BZIPCompressedBackend>,BZIPCompressedBackend&,std::shared_ptr<Backend> const&,void>(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = operator new(0x6F8uLL);
  std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<BZIPCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<BZIPCompressedBackend>,0>((uint64_t)v5, a2, a3);
}

void sub_21E3627C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BZIPCompressedBackend>::__shared_ptr_emplace[abi:ne180100]<BZIPCompressedBackend&,std::shared_ptr<Backend> const&,std::allocator<BZIPCompressedBackend>,0>(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26CF410D0;
  CompressedBackend::CompressedBackend((Backend *)(a1 + 24), a2, a3);
}

void sub_21E362840(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptorWrapper::handle_open_from_error_message@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W3>, void *a4@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v36);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Couldn't open ", 14);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"' with flags ", 13);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  uint64_t v15 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a3 == 13)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v16 = (const char *)a2;
    }
    else {
      uint64_t v16 = *(const char **)a2;
    }
    if (fstatat(a1, v16, &v35, 0))
    {
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v34.__r_.__value_.__l.__size_ = 65;
      LODWORD(v34.__r_.__value_.__r.__words[2]) = 16;
      di_log::logger<di_log::log_printer<66ul>>::logger(&v31, (long long *)&v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"fstatfs failed with err code", 28);
      __error();
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)" trying to check permission after EACCES", 40);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf((uint64_t)&v31);
      MEMORY[0x223C24910](&v33);
    }
    else
    {
      std::to_string(&v31, v35.st_gid);
      uint64_t v17 = getgrgid(v35.st_gid);
      if (v17) {
        std::string::__assign_external(&v31, v17->gr_name);
      }
      __int16 v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)", UID:GID(Name)=", 16);
      std::to_string(&v34, v35.st_uid);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v34;
      }
      else {
        uint64_t v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
      __int16 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v31;
      }
      else {
        long long v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v31.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)" mode=", 6);
      uint64_t v26 = *v25;
      *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) |= 0x200u;
      uint64_t v27 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v27 + *(void *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (our euid is ", 14);
      geteuid();
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 1);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v38, a4);
  v36[0] = *MEMORY[0x263F8C2B8];
  uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v36 + *(void *)(v36[0] - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v37 = v29;
  v38[0] = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete((void *)v38[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C24910](&v40);
}

void sub_21E362D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<66ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<66ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF414A8;
  a1[45] = &unk_26CF415A8;
  a1[46] = &unk_26CF415D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF414A8;
  a1[45] = &unk_26CF41530;
  a1[46] = &unk_26CF41558;
  return a1;
}

void sub_21E362E74(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t FileDescriptorWrapper::open_file(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  v31[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t v3 = open((const char *)a1, a2, 438);
  if (v3 == -1)
  {
    int v11 = *__error();
    if (DIForwardLogs())
    {
      *(void *)&long long v21 = 0;
      DIOSLog = getDIOSLog();
      os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v2 = *(void *)v2;
      }
      int v13 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&uint8_t buf[4] = 69;
      __int16 v24 = 2080;
      char v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      __int16 v26 = 2081;
      uint64_t v27 = v2;
      __int16 v28 = 1024;
      int v29 = v13;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl();
      if (v14)
      {
        uint64_t v15 = (char *)v14;
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v14);
        free(v15);
      }
    }
    else
    {
      uint64_t v16 = getDIOSLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v2 + 23) < 0) {
          uint64_t v2 = *(void *)v2;
        }
        int v17 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&uint8_t buf[4] = 69;
        __int16 v24 = 2080;
        char v25 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        __int16 v26 = 2081;
        uint64_t v27 = v2;
        __int16 v28 = 1024;
        int v29 = v17;
        _os_log_impl(&dword_21E237000, v16, OS_LOG_TYPE_ERROR, "%.*s: Failed opening %{private}s, errno %d", buf, 0x22u);
      }
    }
    *__error() = v11;
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Couldn't open file with flags ", 30);
    uint64_t v19 = *(void *)buf;
    *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] = *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(void *)(v19 - 24) + 8] |= 0x200u;
    std::ostream::operator<<();
    __int16 v20 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)buf, *v20);
  }
  uint64_t v4 = v3;
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v21 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((void *)&v21 + 1) = 36;
    int v22 = 2;
    di_log::logger<di_log::log_printer<78ul>>::logger(buf, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"'", 1);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v8 = v30;
    *(_DWORD *)((char *)v31 + *(void *)(v30 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(_DWORD *)((unsigned char *)v31 + *(void *)(v30 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v31 + *(void *)(v8 - 24)) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v9 = v30;
    *(_DWORD *)((char *)v31 + *(void *)(v30 - 24)) &= ~0x200u;
    *(_DWORD *)((char *)v31 + *(void *)(v9 - std::mutex::~mutex((std::mutex *)((char *)this + 24)) = *(_DWORD *)((unsigned char *)v31 + *(void *)(v9 - 24)) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf((uint64_t)buf);
    MEMORY[0x223C24910](v31);
  }
  return v4;
}

void sub_21E363378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<78ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<78ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF416C8;
  a1[45] = &unk_26CF417C8;
  a1[46] = &unk_26CF417F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF416C8;
  a1[45] = &unk_26CF41750;
  a1[46] = &unk_26CF41778;
  return a1;
}

void sub_21E3634C4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t FileDescriptorWrapper::open_from(int a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  v25[1] = 438;
  uint64_t v26 = v5;
  v25[0] = a3 | 0x100;
  uint64_t v6 = fcntl(a1, 56, v25);
  if (v6 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    uint64_t v15 = __error();
    FileDescriptorWrapper::handle_open_from_error_message(a1, a2, *v15, &v22);
    if ((v24 & 0x80u) == 0) {
      uint64_t v16 = &v22;
    }
    else {
      uint64_t v16 = (long long *)v22;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v17 = v24;
    }
    else {
      uint64_t v17 = *((void *)&v22 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v16, v17);
    __int16 v18 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v19, *v18);
  }
  uint64_t v7 = v6;
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v22 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((void *)&v22 + 1) = 36;
    int v23 = 2;
    di_log::logger<di_log::log_printer<95ul>>::logger(v19, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"'", 1);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"' opened successfully with flags ", 33);
    uint64_t v11 = v20;
    *(_DWORD *)((char *)&v20 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((unsigned char *)&v20 + *(void *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v20 + *(void *)(v11 - 24) + 8) |= 0x200u;
    std::ostream::operator<<();
    uint64_t v12 = v20;
    *(_DWORD *)((char *)&v20 + *(void *)(v20 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v20 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)&v20 + *(void *)(v12 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)", fd=", 5);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x223C24910](&v21);
  }
  return v7;
}

void sub_21E3637DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    std::ostringstream::~ostringstream((uint64_t)va);
    if ((v4 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::ostringstream::~ostringstream((uint64_t)va);
    if (!v4) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

void *di_log::logger<di_log::log_printer<95ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<95ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF418E8;
  a1[45] = &unk_26CF419E8;
  a1[46] = &unk_26CF41A10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF418E8;
  a1[45] = &unk_26CF41970;
  a1[46] = &unk_26CF41998;
  return a1;
}

void sub_21E363944(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  return a1;
}

void FileDescriptorWrapper::~FileDescriptorWrapper(FileDescriptorWrapper *this)
{
  *(void *)this = &unk_26CF41170;
  int v1 = *((_DWORD *)this + 2);
  if (v1 != -1)
  {
    close(v1);
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v2 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((void *)&v2 + 1) = 45;
      int v3 = 2;
      di_log::logger<di_log::log_printer<103ul>>::logger(v4, &v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"File descriptor ", 16);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)" closed", 7);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf((uint64_t)v4);
      MEMORY[0x223C24910](&v6);
    }
  }
}

{
  uint64_t vars8;

  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  JUMPOUT(0x223C249A0);
}

void *di_log::logger<di_log::log_printer<103ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<103ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF41B08;
  a1[45] = &unk_26CF41C08;
  a1[46] = &unk_26CF41C30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF41B08;
  a1[45] = &unk_26CF41B90;
  a1[46] = &unk_26CF41BB8;
  return a1;
}

void sub_21E363B9C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  return a1;
}

void FileDescriptor::FileDescriptor(FileDescriptor *this, int a2, char a3)
{
  *((_DWORD *)this + 2) = a2;
  *(void *)this = &unk_26CF20EA0;
  *((unsigned char *)this + 12) = a3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  FileDescriptor::update_info(this);
}

void sub_21E363C94(_Unwind_Exception *a1)
{
  FileDescriptorWrapper::~FileDescriptorWrapper(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::update_info(FileDescriptor *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  memset(&v35, 0, sizeof(v35));
  uint64_t result = FileDescriptor::get_stat(this, &v35);
  if ((v35.st_mode & 0xB000) != 0x2000)
  {
    *((void *)this + 2) = v35.st_size;
    goto LABEL_17;
  }
  bzero(v38, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*((_DWORD *)this + 2), 50, v38) < 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v21 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "get path failed", *v21);
  }
  if (!basename_r(v38, bsdName))
  {
    int v23 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unsigned __int8 v24 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(v23, "basename_r failed", *v24);
  }
  mach_port_t v3 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v4 = IOBSDNameMatching(*MEMORY[0x263F0EC88], 0, bsdName);
  io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
  io_registry_entry_t v6 = MatchingService;
  if (!MatchingService)
  {
    uint64_t v26 = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(v26, "device not found in registry", 0x13u);
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"Size", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (CFProperty)
  {
    unint64_t v10 = TypeID;
    if (CFGetTypeID(CFProperty) != TypeID)
    {
      __int16 v28 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
      CFTypeID v29 = CFGetTypeID(CFProperty);
      uint64_t v30 = (void *)cf::CFUtilException::CFUtilException(v28, v29, v10);
    }
  }
  CFTypeRef cf = CFProperty;
  CFTypeRef v11 = IORegistryEntryCreateCFProperty(v6, @"Preferred Block Size", v7, 0);
  CFTypeID v12 = CFNumberGetTypeID();
  if (v11 && CFGetTypeID(v11) != v12)
  {
    std::string v31 = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
    CFGetTypeID(v11);
    uint64_t v32 = cf::CFUtilException::CFUtilException(v31);
  }
  CFTypeRef v33 = v11;
  IOObjectRelease(v6);
  if (!cf || (CFTypeID v13 = CFGetTypeID(cf), v13 != CFNumberGetTypeID()))
  {
    uint64_t v16 = "device size not found in registry";
LABEL_20:
    uint64_t v17 = 19;
    goto LABEL_22;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    uint64_t v16 = "Failed converting CFNumber to longlong";
    uint64_t v17 = 22;
LABEL_22:
    __int16 v18 = __cxa_allocate_exception(0x40uLL);
    void *v18 = &unk_26CF39EE0;
    uint64_t v19 = std::generic_category();
    v18[1] = v17;
    _OWORD v18[2] = v19;
    *((unsigned char *)v18 + 24) = 0;
    *((unsigned char *)v18 + 48) = 0;
    v18[7] = v16;
  }
  *((void *)this + 2) = valuePtr;
  if (!v33 || (CFTypeID v14 = CFGetTypeID(v33), v14 != CFNumberGetTypeID()))
  {
    uint64_t v16 = "device block size not found in registry";
    goto LABEL_20;
  }
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)v33, kCFNumberLongLongType, &valuePtr)) {
    goto LABEL_21;
  }
  *((void *)this + 3) = valuePtr;
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&v33);
  uint64_t result = (uint64_t)CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&cf);
LABEL_17:
  __darwin_ino64_t st_ino = v35.st_ino;
  *((void *)this + 4) = v35.st_dev;
  *((void *)this + 5) = st_ino;
  return result;
}

void sub_21E3640AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
  __cxa_free_exception(v13);
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&a13);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::get_stat@<X0>(FileDescriptor *this@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*((_DWORD *)this + 2), a2);
  if (result)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    CFDictionaryRef v4 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "fstat failed", *v4);
  }
  return result;
}

void sub_21E364170(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FileDescriptor::get_statfs@<X0>(FileDescriptor *this@<X0>, statfs *a2@<X8>)
{
  uint64_t result = fstatfs(*((_DWORD *)this + 2), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    CFDictionaryRef v4 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "fstatfs failed", *v4);
  }
  return result;
}

void sub_21E3641F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL FileDescriptor::is_device(FileDescriptor *this, const stat *a2)
{
  return (*((_WORD *)this + 2) & 0xB000) == 0x2000;
}

BOOL FileDescriptor::is_device(FileDescriptor *this)
{
  FileDescriptor::get_stat(this, &v2);
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t FileDescriptor::get_mounted_on_fs(FileDescriptor *this)
{
  uint64_t v1 = (FileDescriptor *)MEMORY[0x270FA5388](this);
  uint64_t v3 = v2;
  uint64_t v12 = *MEMORY[0x263EF8340];
  FileDescriptor::get_statfs(v1, &__src);
  memcpy(__dst, &__src, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>((void *)v3, &__dst[72]);
  *(void *)&long long v8 = "FileDescriptor::get_mounted_on_fs() const";
  *((void *)&v8 + 1) = 33;
  int v9 = 2;
  di_log::logger<di_log::log_printer<159ul>>::logger(&__src, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src.f_mntonname[272], (uint64_t)"File system is ", 15);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src.f_mntonname[272], v5, v6);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)&__src);
  return MEMORY[0x223C24910](&__src.f_mntonname[280]);
}

void sub_21E364378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL FileDescriptor::mounted_on_same_fs(FileDescriptor *this, const FileDescriptor *a2, const FileDescriptor *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  FileDescriptor::get_statfs(this, &v8);
  int32_t v4 = v8.f_fsid.val[0];
  int32_t v5 = v8.f_fsid.val[1];
  FileDescriptor::get_statfs(a2, &v8);
  return v4 == v8.f_fsid.val[0] && v5 == v8.f_fsid.val[1];
}

void FileLocal::shared_state_t::init_unmap_zeros(FileLocal::shared_state_t *this)
{
  uint64_t v2 = (std::once_flag::_State_type *)((char *)this + 144);
  uint64_t v3 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    int32_t v5 = &v3;
    int32_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<FileLocal::shared_state_t::init_unmap_zeros(void)::$_0 &&>>);
  }
}

uint64_t FileLocal::unlink_from(int a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = (uint64_t *)*a2;
  }
  if (fcntl(a1, 57, v2) < 0) {
    return -*__error();
  }
  else {
    return 0;
  }
}

off_t FileLocal::get_file_size_from(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  if (fstatat(a1, (const char *)a2, &v10, 32))
  {
    if (*__error() == 13 || *__error() == 1) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Cannot stat ", 12);
    int v5 = *(char *)(v2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = *(void *)v2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v6, v7);
    statfs v8 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v9, *v8);
  }
  return v10.st_size;
}

void sub_21E3646D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FileLocal::write(uint64_t a1, uint64_t a2)
{
  ssize_t v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v5 = v4;
  if (v4 < 0 || v4 != *(void *)(a2 + 16))
  {
    *(void *)&long long v11 = "int FileLocal::write(const sg_entry &)";
    *((void *)&v11 + 1) = 20;
    int v12 = 16;
    di_log::logger<di_log::log_printer<298ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Error writing file @ ", 21);
    operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x223C24910](&v15);
    if (v5 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 24) + v4;
    uint64_t v7 = (unint64_t *)(*(void *)(a1 + 40) + 64);
    unint64_t v8 = atomic_load(v7);
    if (v8 < v6)
    {
      unint64_t v9 = v8;
      do
      {
        atomic_compare_exchange_strong((atomic_ullong *volatile)v7, &v9, v6);
        if (v9 == v8) {
          break;
        }
        unint64_t v8 = v9;
      }
      while (v9 < v6);
    }
  }
  return v5;
}

void sub_21E3648C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<298ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<298ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<298ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF41D28;
  a1[45] = &unk_26CF41E28;
  a1[46] = &unk_26CF41E50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF41D28;
  a1[45] = &unk_26CF41DB0;
  a1[46] = &unk_26CF41DD8;
  return a1;
}

void sub_21E3649DC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t FileLocal::read(uint64_t a1, uint64_t a2)
{
  ssize_t v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v4 = v3;
  if (v3 < 0 || v3 != *(void *)(a2 + 16))
  {
    *(void *)&long long v6 = "int FileLocal::read(const sg_entry &)";
    *((void *)&v6 + 1) = 19;
    int v7 = 16;
    di_log::logger<di_log::log_printer<313ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Error reading file @ ", 21);
    operator<<(&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)". returned ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" with errno: ", 13);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x223C24910](&v10);
    if (v4 == -1) {
      return -*__error();
    }
    else {
      return 4294967291;
    }
  }
  return v4;
}

void sub_21E364B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<313ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<313ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<313ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF41F48;
  a1[45] = &unk_26CF42048;
  a1[46] = &unk_26CF42070;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF41F48;
  a1[45] = &unk_26CF41FD0;
  a1[46] = &unk_26CF41FF8;
  return a1;
}

void sub_21E364C84(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t FileLocal::truncate(int **this, unint64_t a2)
{
  unint64_t v4 = (*((uint64_t (**)(int **))*this + 5))(this);
  if (v4 < a2)
  {
    char __buf = 0;
    ssize_t v5 = pwrite(*this[7], &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      ssize_t v6 = v5;
      *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
      *((void *)&v8 + 1) = 23;
      int v9 = 16;
      di_log::logger<di_log::log_printer<331ul>>::logger(v10, &v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Failed to increase file size, pwrite returned ", 46);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" errno: ", 8);
      __error();
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<331ul>>::~logger_buf((uint64_t)v10);
      MEMORY[0x223C24910](v12);
      if (v6 != -1) {
        return 4294967291;
      }
      return -*__error();
    }
LABEL_7:
    uint64_t result = 0;
    atomic_store(a2, (unint64_t *)this[5] + 8);
    return result;
  }
  if (v4 <= a2 || ftruncate(*this[7], a2) != -1) {
    goto LABEL_7;
  }
  *(void *)&long long v8 = "int FileLocal::truncate(uint64_t)";
  *((void *)&v8 + 1) = 23;
  int v9 = 16;
  di_log::logger<di_log::log_printer<336ul>>::logger(v10, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"ftruncate failed, errno: ", 25);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf((uint64_t)v10);
  MEMORY[0x223C24910](v12);
  return -*__error();
}

void sub_21E364EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  di_log::logger<di_log::log_printer<336ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<336ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<336ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF42168;
  a1[45] = &unk_26CF42268;
  a1[46] = &unk_26CF42290;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF42168;
  a1[45] = &unk_26CF421F0;
  a1[46] = &unk_26CF42218;
  return a1;
}

void sub_21E364FEC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t FileLocal::flush(uint64_t a1, int a2)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 2;
    di_log::logger<di_log::log_printer<370ul>>::logger(v14, &v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Calling ", 8);
    operator<<(&v15, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)" on ", 4);
    operator<<((uint64_t)&v15, a1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
  }
  if (a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      uint64_t v4 = -*__error();
      goto LABEL_6;
    }
    return 0;
  }
  if (a2 == 2) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = 1;
  }
  if ((*(void *)(*(void *)(a1 + 40) + 56) & v5) != 0)
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
      *((void *)&v12 + 1) = 20;
      int v13 = 2;
      di_log::logger<di_log::log_printer<381ul>>::logger(v14, &v12);
      operator<<(&v15, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)" is not supported", 17);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf((uint64_t)v14);
      MEMORY[0x223C24910](v16);
    }
    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 16))(a1, a2 != 2);
  }
  int v7 = **(_DWORD **)(a1 + 56);
  if (a2 == 2) {
    int v8 = fcntl(v7, 51, 0);
  }
  else {
    int v8 = fcntl(v7, 85, 0);
  }
  if (v8 != -1) {
    return 0;
  }
  uint64_t v10 = __error();
  uint64_t v4 = -*v10;
  unsigned int v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), v5, memory_order_relaxed);
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 0;
    di_log::logger<di_log::log_printer<388ul>>::logger(v14, &v12);
    operator<<(&v15, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)" is not supported (err code ", 28);
    __error();
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
    if (a2 == 2) {
      return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
    }
    atomic_fetch_or_explicit((atomic_ullong *volatile)(*(void *)(a1 + 40) + 56), 2uLL, memory_order_relaxed);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 1);
  }
LABEL_6:
  if (v4)
  {
    *(void *)&long long v12 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v12 + 1) = 20;
    int v13 = 16;
    di_log::logger<di_log::log_printer<398ul>>::logger(v14, &v12);
    operator<<(&v15, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)" failed wih error ", 18);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x223C24910](v16);
  }
  return v4;
}

void sub_21E365400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  di_log::logger<di_log::log_printer<388ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<370ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<370ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF42388;
  a1[45] = &unk_26CF42488;
  a1[46] = &unk_26CF424B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF42388;
  a1[45] = &unk_26CF42410;
  a1[46] = &unk_26CF42438;
  return a1;
}

void sub_21E365544(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<381ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<381ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF425A8;
  a1[45] = &unk_26CF426A8;
  a1[46] = &unk_26CF426D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF425A8;
  a1[45] = &unk_26CF42630;
  a1[46] = &unk_26CF42658;
  return a1;
}

void sub_21E3656AC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<388ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<388ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF427C8;
  a1[45] = &unk_26CF428C8;
  a1[46] = &unk_26CF428F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF427C8;
  a1[45] = &unk_26CF42850;
  a1[46] = &unk_26CF42878;
  return a1;
}

void sub_21E365814(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<398ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<398ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF429E8;
  a1[45] = &unk_26CF42AE8;
  a1[46] = &unk_26CF42B10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF429E8;
  a1[45] = &unk_26CF42A70;
  a1[46] = &unk_26CF42A98;
  return a1;
}

void sub_21E36597C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  return a1;
}

size_t FileLocal::unmap_range(FileLocal *this, unint64_t a2, size_t a3)
{
  uint64_t v6 = *((void *)this + 5);
  FileLocal::shared_state_t::init_unmap_zeros((FileLocal::shared_state_t *)v6);
  size_t v7 = *(void *)(v6 + 72);
  int v8 = *(unsigned __int8 *)(v6 + 88);
  uint64_t v9 = *((void *)this + 5);
  FileLocal::shared_state_t::init_unmap_zeros((FileLocal::shared_state_t *)v9);
  if (!*(unsigned char *)(v9 + 136) || !v8)
  {
    *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((void *)&v25 + 1) = 26;
    LODWORD(v26) = 0;
    di_log::logger<di_log::log_printer<411ul>>::logger(&v27, &v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"fd block size retrieval failed (err code ", 41);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)")", 1);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf((uint64_t)&v27);
    goto LABEL_14;
  }
  uint64_t v10 = *(char **)(v9 + 96);
  unint64_t v11 = (a2 + v7 - 1) / v7 * v7;
  unint64_t v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    unint64_t v14 = a2 - v11 + a3;
    size_t v15 = v14 / v7 * v7;
    unint64_t v16 = v14 == v14 % v7 ? 0 : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = v16;
      size_t v26 = v14 / v7 * v7;
      size_t v19 = fcntl(**((_DWORD **)this + 7), 99, &v25);
      if (!v19)
      {
        if (v16 != a2)
        {
          uint64_t v20 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v16 - a2;
          unint64_t v30 = a2;
          unint64_t v31 = v16 - a2;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(FileLocal *, char **))(*(void *)this + 80))(this, &v27);
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            di_log::logger<di_log::log_printer<432ul>>::logger(&v27, &v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60);
            __error();
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)")", 1);
            di_log::logger<di_log::log_printer<432ul>>::~logger((uint64_t)&v27);
            return v7;
          }
        }
        if (v15 + v16 < v12)
        {
          size_t v21 = a3 - v15 - (v16 - a2);
          long long v22 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
          uint64_t v27 = v10;
          __int16 v28 = v22;
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v29 = v21;
          unint64_t v30 = v15 + v16;
          unint64_t v31 = v21;
          char v32 = 0;
          size_t v7 = (*(uint64_t (**)(FileLocal *, char **))(*(void *)this + 80))(this, &v27);
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v23 + 1) = 26;
            int v24 = 16;
            di_log::logger<di_log::log_printer<441ul>>::logger(&v27, &v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58);
            __error();
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)")", 1);
            di_log::logger<di_log::log_printer<441ul>>::~logger((uint64_t)&v27);
            return v7;
          }
        }
        return 0;
      }
      size_t v7 = v19;
      *(void *)&long long v23 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((void *)&v23 + 1) = 26;
      int v24 = 0;
      di_log::logger<di_log::log_printer<424ul>>::logger(&v27, &v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Punch hole is not supported (err code ", 38);
      __error();
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)")", 1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf((uint64_t)&v27);
LABEL_14:
      MEMORY[0x223C24910](v34);
      return v7;
    }
  }
  ssize_t v17 = FileLocal::write_zeros(this, a2, a3, v7, v10);
  if (v17 == a3) {
    return 0;
  }
  size_t v7 = v17;
  *(void *)&long long v25 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((void *)&v25 + 1) = 26;
  LODWORD(v26) = 16;
  di_log::logger<di_log::log_printer<449ul>>::logger(&v27, &v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Write zeros to unmap region failed (err code", 44);
  __error();
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)")", 1);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf((uint64_t)&v27);
  MEMORY[0x223C24910](v34);
  if ((v7 & 0x8000000000000000) == 0) {
    return 4294967291;
  }
  else {
    return v7;
  }
}

void sub_21E365E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<411ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<411ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF42C08;
  a1[45] = &unk_26CF42D08;
  a1[46] = &unk_26CF42D30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF42C08;
  a1[45] = &unk_26CF42C90;
  a1[46] = &unk_26CF42CB8;
  return a1;
}

void sub_21E365FD4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<424ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<424ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF42E28;
  a1[45] = &unk_26CF42F28;
  a1[46] = &unk_26CF42F50;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF42E28;
  a1[45] = &unk_26CF42EB0;
  a1[46] = &unk_26CF42ED8;
  return a1;
}

void sub_21E36613C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<432ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<432ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF43048;
  a1[45] = &unk_26CF43148;
  a1[46] = &unk_26CF43170;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF43048;
  a1[45] = &unk_26CF430D0;
  a1[46] = &unk_26CF430F8;
  return a1;
}

void sub_21E3662A4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<441ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<441ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF43268;
  a1[45] = &unk_26CF43368;
  a1[46] = &unk_26CF43390;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF43268;
  a1[45] = &unk_26CF432F0;
  a1[46] = &unk_26CF43318;
  return a1;
}

void sub_21E36640C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  return a1;
}

ssize_t FileLocal::write_zeros(FileLocal *this, off_t a2, size_t a3, size_t a4, char *a5)
{
  size_t v7 = a3;
  long long v22 = 0;
  long long v23 = 0;
  int v24 = 0;
  std::vector<iovec>::reserve((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    uint64_t v10 = v23;
    do
    {
      if (v7 >= a4) {
        size_t v11 = a4;
      }
      else {
        size_t v11 = v7;
      }
      if (v10 >= v24)
      {
        uint64_t v12 = v10 - v22;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<iovec>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)((char *)v24 - (char *)v22) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          size_t v15 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v24, v14);
        }
        else {
          size_t v15 = 0;
        }
        unint64_t v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        __int16 v18 = v22;
        ssize_t v17 = v23;
        size_t v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }
          while (v17 != v18);
          ssize_t v17 = v22;
        }
        uint64_t v10 = v16 + 1;
        long long v22 = v19;
        long long v23 = v16 + 1;
        int v24 = (iovec *)&v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }
      long long v23 = v10;
      v7 -= v11;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = v23;
  }
  ssize_t v20 = pwritev(**((_DWORD **)this + 7), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  return v20;
}

void sub_21E36660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<449ul>>::logger(void *a1, long long *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<449ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF43488;
  a1[45] = &unk_26CF43588;
  a1[46] = &unk_26CF435B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF43488;
  a1[45] = &unk_26CF43510;
  a1[46] = &unk_26CF43538;
  return a1;
}

void sub_21E366730(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  return a1;
}

void std::vector<iovec>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    size_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t FileLocal::lock(FileLocal *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (*(unsigned char *)(v1 + 48)
    || ((*(uint64_t (**)(FileLocal *))(*(void *)this + 48))(this) & 1) == 0
    && FileDescriptor::is_mounted_on_smb(*((FileDescriptor **)this + 5)))
  {
    return 0;
  }
  int v4 = (*(uint64_t (**)(FileLocal *))(*(void *)this + 48))(this);
  if (v4) {
    int v5 = 6;
  }
  else {
    int v5 = 5;
  }
  if (!flock(**((_DWORD **)this + 7), v5))
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    di_log::logger<di_log::log_printer<485ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)") is locked", 11);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x223C24910](v12);
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 1;
    return result;
  }
  if (*__error() != 35)
  {
    *(void *)&long long v8 = "int FileLocal::lock()";
    *((void *)&v8 + 1) = 19;
    int v9 = 0;
    di_log::logger<di_log::log_printer<492ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"flock returned errno ", 21);
    __error();
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)", keeping file unlocked", 23);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x223C24910](v12);
    return 0;
  }
  *(void *)&long long v8 = "int FileLocal::lock()";
  *((void *)&v8 + 1) = 19;
  int v9 = 16;
  di_log::logger<di_log::log_printer<489ul>>::logger(v10, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Cannot acquire ", 15);
  if (v4) {
    uint64_t v6 = "exclusive";
  }
  else {
    uint64_t v6 = "shared";
  }
  if (v4) {
    uint64_t v7 = 9;
  }
  else {
    uint64_t v7 = 6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)" lock, errno ", 13);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf((uint64_t)v10);
  MEMORY[0x223C24910](v12);
  return -*__error();
}

void sub_21E366AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<489ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<489ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<489ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF436A8;
  a1[45] = &unk_26CF437A8;
  a1[46] = &unk_26CF437D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF436A8;
  a1[45] = &unk_26CF43730;
  a1[46] = &unk_26CF43758;
  return a1;
}

void sub_21E366C30(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t non-virtual thunk to'FileLocal::lock(FileLocal *this)
{
  return FileLocal::lock((FileLocal *)((char *)this - 24));
}

uint64_t FileLocal::unlock_all(FileLocal *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!*(unsigned char *)(v1 + 48)) {
    return 0;
  }
  if (flock(**((_DWORD **)this + 7), 8))
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 16;
    di_log::logger<di_log::log_printer<502ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Failed unlocking file with fd ", 30);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x223C24910](v7);
    return -*__error();
  }
  else
  {
    *(void *)&long long v3 = "int FileLocal::unlock_all()";
    *((void *)&v3 + 1) = 25;
    int v4 = 0;
    di_log::logger<di_log::log_printer<505ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"File (fd ", 9);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)") is unlocked", 13);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x223C24910](v7);
    uint64_t result = 0;
    *(unsigned char *)(v1 + 48) = 0;
  }
  return result;
}

void sub_21E366E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<505ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<502ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<502ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF438C8;
  a1[45] = &unk_26CF439C8;
  a1[46] = &unk_26CF439F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF438C8;
  a1[45] = &unk_26CF43950;
  a1[46] = &unk_26CF43978;
  return a1;
}

void sub_21E366F44(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t non-virtual thunk to'FileLocal::unlock_all(FileLocal *this)
{
  return FileLocal::unlock_all((FileLocal *)((char *)this - 24));
}

uint64_t FileLocal::is_locked(FileLocal *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 48);
}

uint64_t non-virtual thunk to'FileLocal::is_locked(FileLocal *this)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + 48);
}

uint64_t FileLocal::remove_lock_ownership(FileLocal *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t result = *(unsigned __int8 *)(v1 + 48);
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

void FileLocal::run_futures(FileLocal *this)
{
  v43[32] = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 9);
  if (v1)
  {
    int v38 = *(unsigned __int8 *)(*((void *)this + 5) + 49);
    uint64_t v37 = (void *)((char *)this + 64);
    long long v3 = (void *)*((void *)this + 8);
    int v4 = v3;
    while (1)
    {
      long long v41 = (iovec *)v43;
      uint64_t v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      long long v42 = xmmword_21E3A5A20;
      uint64_t v6 = &v3[8 * v1];
      uint64_t v40 = &v41;
      if (v4 == v6)
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          int v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(void *)&long long v39 = v9[8];
            *((void *)&v39 + 1) = v9[10];
            std::back_insert_iterator<boost::container::small_vector<iovec,16ul,void,void>>::operator=[abi:ne180100]((uint64_t *)&v40, &v39);
            unint64_t v8 = (unint64_t)(v9 + 8);
            uint64_t v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6) {
              goto LABEL_11;
            }
          }
          unint64_t v8 = (unint64_t)v9;
LABEL_11:
          uint64_t v7 = v42;
        }
      }
      unint64_t v11 = v8 + 64;
      int v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        uint64_t v15 = v4[3];
        int v16 = **((_DWORD **)this + 7);
        if (v7 == 1) {
          ssize_t v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        }
        else {
          ssize_t v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        }
        uint64_t v19 = v17;
        if (v17 < 1) {
          goto LABEL_43;
        }
        unint64_t v28 = v17 + v15;
        uint64_t v29 = *((void *)this + 5);
        unint64_t v30 = atomic_load((unint64_t *)(v29 + 64));
        if (v30 < v17 + v15)
        {
          unint64_t v31 = v30;
          do
          {
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v29 + 64), &v31, v28);
            if (v31 == v30) {
              break;
            }
            unint64_t v30 = v31;
          }
          while (v31 < v28);
LABEL_43:
          if (v19 == -1) {
            uint64_t v19 = -(uint64_t)*__error();
          }
        }
      }
      else
      {
        if (!v12)
        {
          off_t v13 = v4[3];
          if (v7 == 1)
          {
            ssize_t v14 = pread(**((_DWORD **)this + 7), v41->iov_base, v41->iov_len, v4[3]);
LABEL_42:
            uint64_t v19 = v14;
            goto LABEL_43;
          }
          if (!v38)
          {
            ssize_t v14 = preadv(**((_DWORD **)this + 7), v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_42;
          }
          uint64_t v18 = v11 - (void)v4;
          if ((v11 - (void)v4) << 26)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            int v21 = **((_DWORD **)this + 7);
            uint64_t v22 = 16 * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000) == 0)
              {
                ssize_t v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                size_t v25 = *p_iov_len;
                uint64_t v26 = v19 + v24;
                uint64_t v27 = -5;
                if (v24 == -1) {
                  uint64_t v27 = -1;
                }
                if (v24 == v25) {
                  v19 += v24;
                }
                else {
                  uint64_t v19 = v27;
                }
                if (v24 == v25) {
                  uint64_t v20 = v26;
                }
                else {
                  uint64_t v20 = v27;
                }
              }
              p_iov_len += 2;
              v22 -= 16;
            }
            while (v22);
            goto LABEL_43;
          }
        }
        uint64_t v19 = 0;
      }
      char v32 = v4 + 7;
      do
      {
        uint64_t v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19) {
            uint64_t v33 = v19;
          }
          else {
            uint64_t v33 = *(v32 - 5);
          }
        }
        uint64_t v34 = *v32;
        *(_DWORD *)uint64_t v34 = v33;
        *(unsigned char *)(v34 + 4) = 1;
        lw_promise<int>::notify_future((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        stat v35 = v32 + 8;
        uint64_t v36 = v32 + 1;
        v32 += 8;
      }
      while ((unint64_t)v36 <= v8);
      if (*((void *)&v42 + 1))
      {
        if (v43 != (void *)v41) {
          operator delete(v41);
        }
      }
      int v4 = v35 - 7;
      long long v3 = (void *)*((void *)this + 8);
      uint64_t v1 = *((void *)this + 9);
      if (v35 - 7 == &v3[8 * v1])
      {
        boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(v37);
        return;
      }
    }
  }
}

void sub_21E367330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    if (v18 != __p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL FileLocal::mounted_on_same_fs(FileDescriptor **this, const FileDescriptor **a2, const FileDescriptor *a3)
{
  return FileDescriptor::mounted_on_same_fs(this[5], a2[5], a3);
}

void PurgeableFileBackend::~PurgeableFileBackend(PurgeableFileBackend *this)
{
  *(void *)this = &unk_26CF41198;
  *((void *)this + 3) = &unk_26CF41278;
  *((void *)this + 4) = &unk_26CF412B0;
  if (futimes(**((_DWORD **)this + 7), 0))
  {
    *(void *)&long long v4 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((void *)&v4 + 1) = 43;
    int v5 = 16;
    di_log::logger<di_log::log_printer<643ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"futimes failed on ", 18);
    operator<<((uint64_t)&v7, (uint64_t)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)", errno ", 8);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  *(void *)this = &unk_26CF41300;
  *((void *)this + 3) = &unk_26CF413E0;
  *((void *)this + 4) = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  uint64_t vars8;

  PurgeableFileBackend::~PurgeableFileBackend(this);
  JUMPOUT(0x223C249A0);
}

void *di_log::logger<di_log::log_printer<643ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<643ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF43AE8;
  a1[45] = &unk_26CF43BE8;
  a1[46] = &unk_26CF43C10;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF43AE8;
  a1[45] = &unk_26CF43B70;
  a1[46] = &unk_26CF43B98;
  return a1;
}

void sub_21E36762C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  return a1;
}

void non-virtual thunk to'PurgeableFileBackend::~PurgeableFileBackend(PurgeableFileBackend *this)
{
}

{
  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 32));
}

{
  uint64_t vars8;

  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24));
  JUMPOUT(0x223C249A0);
}

{
  uint64_t vars8;

  PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 32));
  JUMPOUT(0x223C249A0);
}

uint64_t get_fd_from_backend(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v3)
  {
    if (v6)
    {
      long long v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v6 + 176))(v6);
      goto LABEL_10;
    }
    return 0xFFFFFFFFLL;
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (**v3)(v3);
LABEL_10:
  uint64_t v7 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v7;
}

void sub_21E367888(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL FileLocal::supports_unmap(FileDescriptor **this)
{
  return FileDescriptor::is_mounted_on_apfs(this[5]);
}

unint64_t FileLocal::get_size(FileLocal *this)
{
  return atomic_load((unint64_t *)(*((void *)this + 5) + 64));
}

uint64_t FileLocal::is_writable(FileLocal *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 12);
}

void *FileLocal::name(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"file(", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
}

double FileLocal::getContext@<D0>(FileLocal *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,FileLocal&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t FileLocal::future_read@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  uint64_t v18 = 0;
  *(void *)&v19[0] = ref::details::_get_tagged_ptr_lock((unint64_t)&v17, a2);
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v17, v6);
  ssize_t v24 = &v17;
  *((void *)&v19[0] + 1) = tagged_ptr_cond;
  *(void *)&v19[1] = &v24;
  lw_future<int>::lw_future((unint64_t)v22, &v17);
  uint64_t v8 = v24;
  long long v23 = v24;
  void v24[4] = (uint64_t)&v23;
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  uint64_t v18 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v23;
  }
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)a2 + 25);
  v19[0] = *((_OWORD *)a2 + 1);
  int v20 = 0;
  int v21 = v8;
  long long v23 = 0;
  char v8[4] = (uint64_t)&v21;
  uint64_t v11 = a1[9];
  uint64_t v12 = a1[8] + (v11 << 6);
  if (v11 == a1[10])
  {
    boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(a1 + 8, v12, (const char *)1, (uint64_t)&v17, &v24);
    if (v21) {
      v21[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v12 = v9;
    *(void *)(v12 + 8) = v10;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v13 = v19[0];
    *(_OWORD *)(v12 + 25) = *(_OWORD *)((char *)v19 + 9);
    *(_OWORD *)(v12 + 16) = v13;
    int v14 = v20;
    *(void *)(v12 + ++*(_DWORD *)(this + 56) = v21;
    uint64_t v15 = v12 + 56;
    *(_DWORD *)(v15 - 8) = v14;
    int v21 = 0;
    *(void *)(*(void *)v15 + 32) = v15;
    ++a1[9];
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t result = lw_future<int>::lw_future(a3, v22);
  if (v23) {
    v23[4] = 0;
  }
  return result;
}

void sub_21E367B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_21E367BCC()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x21E367BC4);
  }
  JUMPOUT(0x21E367BC0);
}

unint64_t FileLocal::future_write@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  uint64_t v18 = 0;
  *(void *)&v19[0] = ref::details::_get_tagged_ptr_lock((unint64_t)&v17, a2);
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v17, v6);
  ssize_t v24 = &v17;
  *((void *)&v19[0] + 1) = tagged_ptr_cond;
  *(void *)&v19[1] = &v24;
  lw_future<int>::lw_future((unint64_t)v22, &v17);
  uint64_t v8 = v24;
  long long v23 = v24;
  void v24[4] = (uint64_t)&v23;
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  uint64_t v18 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v23;
  }
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)a2 + 25);
  v19[0] = *((_OWORD *)a2 + 1);
  int v20 = 1;
  int v21 = v8;
  long long v23 = 0;
  char v8[4] = (uint64_t)&v21;
  uint64_t v11 = a1[9];
  uint64_t v12 = a1[8] + (v11 << 6);
  if (v11 == a1[10])
  {
    boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(a1 + 8, v12, (const char *)1, (uint64_t)&v17, &v24);
    if (v21) {
      v21[4] = 0;
    }
  }
  else
  {
    *(void *)uint64_t v12 = v9;
    *(void *)(v12 + 8) = v10;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v13 = v19[0];
    *(_OWORD *)(v12 + 25) = *(_OWORD *)((char *)v19 + 9);
    *(_OWORD *)(v12 + 16) = v13;
    int v14 = v20;
    *(void *)(v12 + ++*(_DWORD *)(this + 56) = v21;
    uint64_t v15 = v12 + 56;
    *(_DWORD *)(v15 - 8) = v14;
    int v21 = 0;
    *(void *)(*(void *)v15 + 32) = v15;
    ++a1[9];
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t result = lw_future<int>::lw_future(a3, v22);
  if (v23) {
    v23[4] = 0;
  }
  return result;
}

void sub_21E367D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + 32) = 0;
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23) {
    *(void *)(a23 + 32) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_21E367D84()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x21E367D7CLL);
  }
  JUMPOUT(0x21E367D78);
}

uint64_t FileLocal::get_identifier(FileLocal *this)
{
  return *(void *)(*((void *)this + 5) + 32);
}

uint64_t FileLocal::get_file_descriptor(FileLocal *this)
{
  return **((unsigned int **)this + 7);
}

void non-virtual thunk to'FileLocal::~FileLocal(FileLocal *this)
{
  *((void *)this - 3) = &unk_26CF41300;
  *(void *)this = &unk_26CF413E0;
  *((void *)this + 1) = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 40);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *((void *)this - 3) = &unk_26CF41300;
  *(void *)this = &unk_26CF413E0;
  *((void *)this + 1) = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 40);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x223C249A0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *((void *)this - 4) = &unk_26CF41300;
  *((void *)this - 1) = &unk_26CF413E0;
  *(void *)this = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *((void *)this - 4) = &unk_26CF41300;
  *((void *)this - 1) = &unk_26CF413E0;
  *(void *)this = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t non-virtual thunk to'FileLocal::get_file_descriptor(FileLocal *this)
{
  return **((unsigned int **)this + 3);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<66ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<66ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41640;
  di_log::logger_buf<di_log::log_printer<66ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<66ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E368590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<66ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<66ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 66;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 66;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<78ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<78ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41860;
  di_log::logger_buf<di_log::log_printer<78ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<78ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E368D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<78ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<78ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 78;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 78;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<95ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<95ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41A80;
  di_log::logger_buf<di_log::log_printer<95ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<95ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E369478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<95ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<95ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 95;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 95;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<103ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<103ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41CA0;
  di_log::logger_buf<di_log::log_printer<103ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<103ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E369BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<103ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<103ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 103;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 103;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<298ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<298ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF41EC0;
  di_log::logger_buf<di_log::log_printer<298ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<298ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36A360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<298ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<298ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 298;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 298;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<313ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<313ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF420E0;
  di_log::logger_buf<di_log::log_printer<313ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<313ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36AAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<313ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<313ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 313;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 313;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<336ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<336ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42300;
  di_log::logger_buf<di_log::log_printer<336ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<336ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36B248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<336ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 336;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 336;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<370ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<370ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42520;
  di_log::logger_buf<di_log::log_printer<370ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<370ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<370ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<370ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 370;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 370;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<381ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<381ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42740;
  di_log::logger_buf<di_log::log_printer<381ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<381ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36C130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<381ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<381ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 381;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 381;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<388ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<388ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42960;
  di_log::logger_buf<di_log::log_printer<388ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<388ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36C8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<388ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<388ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 388;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 388;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<398ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<398ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42B80;
  di_log::logger_buf<di_log::log_printer<398ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<398ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36D018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<398ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<398ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 398;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 398;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<411ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<411ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42DA0;
  di_log::logger_buf<di_log::log_printer<411ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<411ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36D78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<411ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<411ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 411;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 411;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<424ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<424ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF42FC0;
  di_log::logger_buf<di_log::log_printer<424ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<424ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36DF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<424ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<424ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 424;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 424;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<432ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<432ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF431E0;
  di_log::logger_buf<di_log::log_printer<432ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<432ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36E674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<432ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<432ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 432;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 432;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<441ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<441ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43400;
  di_log::logger_buf<di_log::log_printer<441ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<441ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36EDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<441ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<441ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 441;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 441;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<449ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<449ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43620;
  di_log::logger_buf<di_log::log_printer<449ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<449ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36F55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<449ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<449ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 449;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 449;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<489ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<489ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43840;
  di_log::logger_buf<di_log::log_printer<489ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<489ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E36FCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<489ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<489ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 489;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 489;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<502ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<502ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43A60;
  di_log::logger_buf<di_log::log_printer<502ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<502ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E370444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<502ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<502ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 502;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 502;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<643ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<643ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43C80;
  di_log::logger_buf<di_log::log_printer<643ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<643ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E370BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<643ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<643ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 643;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    uint64_t v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 643;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,FileLocal&,void>(const FileLocal *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<FileLocal&,std::allocator<FileLocal>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E370E64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<FileLocal&,std::allocator<FileLocal>,0>(void *a1, const FileLocal *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), a2);
  return a1;
}

void sub_21E370EC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void FileLocal::FileLocal(FileLocal *this, const FileLocal *a2)
{
  Backend::Backend((Backend *)this);
  *(void *)uint64_t v3 = &unk_26CF41300;
  *(void *)(v3 + 24) = &unk_26CF413E0;
  uint64_t v4 = *((void *)a2 + 5);
  uint64_t v5 = *((void *)a2 + 6);
  *(void *)(v3 + 32) = &unk_26CF41418;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(v3 + 40);
  }
  *(void *)(v3 + ++*(_DWORD *)(this + 56) = v4 + 8;
  *(void *)(v3 + 64) = v3 + 88;
  *(_OWORD *)(v3 + 72) = xmmword_21E39BDD0;
}

void boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 57) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  int v14 = operator new(v11 << 6);
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

void boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>((uint64_t)a1, *a1, a4, *a1 + (a1[1] << 6), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10 + 56;
      do
      {
        if (*(void *)v12) {
          *(void *)(*(void *)v12 + 32) = 0;
        }
        uint64_t v13 = *(std::__shared_weak_count **)(v12 - 48);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        v12 += 64;
        --v11;
      }
      while (v11);
    }
    if (a1 + 3 != (uint64_t *)*a1) {
      operator delete((void *)*a1);
    }
  }
  uint64_t v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_21E3710E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if ((void *)(v2 + 24) != v1) {
      operator delete(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,FileLocal::promise_io_t*,FileLocal::promise_io_t>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a5;
  uint64_t v19 = a1;
  while (a2 != a3)
  {
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v7;
    int v8 = *(_DWORD *)(a2 + 48);
    *(void *)(a5 + ++*(_DWORD *)(this + 56) = *(void *)(a2 + 56);
    uint64_t v9 = a5 + 56;
    *(_DWORD *)(v9 - 8) = v8;
    *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
    *(void *)(*(void *)v9 + 32) = v9;
    a5 = v9 + 8;
    a2 += 64;
  }
  uint64_t v18 = a5;
  *(_OWORD *)a5 = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  long long v10 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a5 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(a5 + 16) = v10;
  int v11 = *(_DWORD *)(a7 + 48);
  *(void *)(a5 + ++*(_DWORD *)(this + 56) = *(void *)(a7 + 56);
  *(_DWORD *)(a5 + 48) = v11;
  *(void *)(a7 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(*(void *)(a5 + 56) + 32) = a5 + 56;
  if (a3 != a4)
  {
    uint64_t v12 = a5 + (a6 << 6);
    do
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v12 + 25) = *(_OWORD *)(a3 + 25);
      *(_OWORD *)(v12 + 16) = v13;
      int v14 = *(_DWORD *)(a3 + 48);
      *(void *)(v12 + ++*(_DWORD *)(this + 56) = *(void *)(a3 + 56);
      uint64_t v15 = v12 + 56;
      *(_DWORD *)(v15 - 8) = v14;
      *(void *)(a3 + ++*(_DWORD *)(this + 56) = 0;
      *(void *)(*(void *)v15 + 32) = v15;
      a3 += 64;
      uint64_t v12 = v15 + 8;
    }
    while (a3 != a4);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  return boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(&v17);
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 56);
    if (v4) {
      *(void *)(v4 + 32) = 0;
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 64;
    *a1 = v2;
  }
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<66ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41640;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3712E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<78ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41860;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E371378(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<95ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41A80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E371408(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<103ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41CA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E371498(_Unwind_Exception *a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<FileLocal::shared_state_t::init_unmap_zeros(void)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  if (fstatfs(*(_DWORD *)(*v1 + 8), &v18) < 0)
  {
    *(void *)&long long v19 = "FileLocal::shared_state_t::init_unmap_zeros()::(anonymous class)::operator()() const";
    *((void *)&v19 + 1) = 76;
    int v20 = 16;
    di_log::logger<di_log::log_printer<236ul>>::logger(&v14, &v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"fstatfs failed with err code ", 29);
    __error();
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf((uint64_t)&v14);
    MEMORY[0x223C24910](&v17);
    int v6 = *__error();
    long long v7 = std::generic_category();
    int v8 = *(unsigned __int8 *)(v2 + 88);
    *(_DWORD *)(v2 + 72) = v6;
    *(void *)(v2 + 80) = v7;
    if (v8) {
      *(unsigned char *)(v2 + 88) = 0;
    }
    int v9 = *__error();
    long long v10 = std::generic_category();
    int v11 = v10;
    if (*(unsigned char *)(v2 + 136))
    {
      std::__expected_base<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::__repr::__destroy_union_member[abi:ne180100]((uint64_t *)(v2 + 96));
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v11;
      *(unsigned char *)(v2 + 136) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 96) = v9;
      *(void *)(v2 + 104) = v10;
    }
  }
  else
  {
    f_bstd::string::size_type size = v18.f_bsize;
    if (!*(unsigned char *)(v2 + 88)) {
      *(unsigned char *)(v2 + 88) = 1;
    }
    *(void *)(v2 + 72) = f_bsize;
    char v4 = malloc_type_valloc(f_bsize, 0xF8ED6DDuLL);
    if (!v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v13 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v13, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    *(void *)&long long v19 = &unk_26CF43F20;
    uint64_t v21 = &v19;
    int v14 = v4;
    std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)&v19);
    std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](&v19);
    std::expected<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::operator=[abi:ne180100]<std::unique_ptr<char,std::function<void ()(char *)>>>(v2 + 96, (uint64_t *)&v14);
    std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)&v14, 0);
    std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v15);
    int64_t v5 = *(void *)(v2 + 72);
    if (v5 >= 1) {
      bzero(*(void **)(v2 + 96), v5);
    }
  }
}

void sub_21E3716C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = v2;
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<236ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<236ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF43D08;
  a1[45] = &unk_26CF43E08;
  a1[46] = &unk_26CF43E30;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF43D08;
  a1[45] = &unk_26CF43D90;
  a1[46] = &unk_26CF43DB8;
  return a1;
}

void sub_21E37181C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<236ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t std::expected<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::operator=[abi:ne180100]<std::unique_ptr<char,std::function<void ()(char *)>>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100]((uint64_t *)a1, a2);
  }
  else
  {
    std::__expected_base<std::unique_ptr<char,std::function<void ()(char *)>>,std::error_code>::__repr::__destroy_union_member[abi:ne180100]((uint64_t *)a1);
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100](a1 + 8, (uint64_t)(a2 + 1));
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<236ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43EA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E371968(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF43EA0;
  di_log::logger_buf<di_log::log_printer<236ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<236ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<236ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<236ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<236ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<236ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<236ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<236ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<236ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E371EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<236ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 236;
    __int16 v22 = 2082;
    long long v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      long long v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 236;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<298ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF41EC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372238(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<313ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF420E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3722C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<336ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42300;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372358(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<370ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42520;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3723E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<381ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42740;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372478(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<388ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42960;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372508(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<398ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42B80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372598(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<411ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42DA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372628(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<424ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF42FC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3726B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<432ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF431E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372748(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<441ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43400;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3727D8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<449ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43620;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372868(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<489ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43840;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3728F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<502ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43A60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372988(_Unwind_Exception *a1)
{
}

uint64_t *std::back_insert_iterator<boost::container::small_vector<iovec,16ul,void,void>>::operator=[abi:ne180100](uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v4 + 8);
  char v6 = (char *)(*(void *)v4 + 16 * v5);
  if (v5 == *(void *)(v4 + 16))
  {
    boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>((void **)v4, v6, (const char *)1, a2, &v8);
  }
  else
  {
    *(_OWORD *)char v6 = *a2;
    ++*(void *)(v4 + 8);
  }
  return a1;
}

void boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::priv_destroy_all(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *a1 + 56;
    do
    {
      if (*(void *)v3) {
        *(void *)(*(void *)v3 + 32) = 0;
      }
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 48);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

uint64_t di_log::logger_buf<di_log::log_printer<643ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF43C80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E372AE4(_Unwind_Exception *a1)
{
}

uint64_t Ram::write(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy((void *)(*(void *)(a1 + 64) + v4), *(const void **)a2, v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::write(const sg_entry &)";
    *((void *)&v6 + 1) = 14;
    int v7 = 16;
    di_log::logger<di_log::log_printer<30ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Trying to write @ ", 18);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x223C24910](&v10);
    return 4294967274;
  }
}

void sub_21E372BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<30ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<30ul>>::logger(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<30ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44080;
  a1[45] = &unk_26CF44180;
  a1[46] = &unk_26CF441A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44080;
  a1[45] = &unk_26CF44108;
  a1[46] = &unk_26CF44130;
  return a1;
}

void sub_21E372D18(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<30ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t Ram::read(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v3 + v4 <= *(void *)(a1 + 72))
  {
    memcpy(*(void **)a2, (const void *)(*(void *)(a1 + 64) + v4), v3);
    return *(unsigned int *)(a2 + 16);
  }
  else
  {
    *(void *)&long long v6 = "int Ram::read(const sg_entry &)";
    *((void *)&v6 + 1) = 13;
    int v7 = 16;
    di_log::logger<di_log::log_printer<42ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Trying to read @ ", 17);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"bytes, which is after end of ramdisk", 36);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x223C24910](&v10);
    return 4294967274;
  }
}

void sub_21E372E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<42ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<42ul>>::logger(void *a1, long long *a2)
{
  size_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<42ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF442A0;
  a1[45] = &unk_26CF443A0;
  a1[46] = &unk_26CF443C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF442A0;
  a1[45] = &unk_26CF44328;
  a1[46] = &unk_26CF44350;
  return a1;
}

void sub_21E372FA4(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<42ul>>::~logger(uint64_t a1)
{
  return a1;
}

void Ram::~Ram(Ram *this)
{
  Ram::~Ram(this);
  JUMPOUT(0x223C249A0);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_26CF43FA0;
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
  std::__function::__value_func<void ()(char *)>::~__value_func[abi:ne180100]((void *)this + 4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t Ram::flush()
{
  return 0;
}

uint64_t Ram::unmap_range(Ram *this, unint64_t a2, uint64_t a3)
{
  if (a3 == -1) {
    return 0;
  }
  unint64_t v3 = *((void *)this + 12);
  unint64_t v4 = (a2 + v3 - 1) / v3 * v3;
  if (a2 > v4 || v4 >= a3 + a2) {
    return 0;
  }
  unint64_t v6 = a2 - v4 + a3;
  size_t v7 = v6 / v3 * v3;
  if (v6 == v6 % v3) {
    return 0;
  }
  uint64_t v8 = 4294967262;
  if (__CFADD__(v4, v7)) {
    return v8;
  }
  unint64_t v10 = *((void *)this + 9);
  if (v4 > v10 || v7 + v4 > v10) {
    return v8;
  }
  return madvise((void *)(*((void *)this + 8) + v4), v7, 5);
}

uint64_t Ram::supports_unmap(Ram *this)
{
  return 1;
}

uint64_t Ram::get_size(Ram *this)
{
  return *((void *)this + 9);
}

uint64_t Ram::is_writable(Ram *this)
{
  return 1;
}

uint64_t Ram::truncate(Ram *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *((void *)this + 9) = a2;
  return result;
}

void *Ram::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ram", 3);
}

uint64_t Ram::get_identifier(Ram *this)
{
  return *((void *)this + 10);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<30ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<30ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<30ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<30ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<30ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF44218;
  di_log::logger_buf<di_log::log_printer<30ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<30ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<30ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E373658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<30ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<30ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 30;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 30;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<42ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<42ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<42ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<42ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<42ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF44438;
  di_log::logger_buf<di_log::log_printer<42ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<42ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<42ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E373DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<42ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<42ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 42;
    __int16 v22 = 2082;
    long long v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    int v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 42;
      __int16 v22 = 2082;
      long long v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<30ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF44218;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E3740F0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<42ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF44438;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E374180(_Unwind_Exception *a1)
{
}

uint64_t SparseBundleBackend::SparseBundleBackend(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9 = SparseBundleBackend::open_bundle(a2, a3);
  FileDescriptorBackend::FileDescriptorBackend((FileDescriptorBackend *)a1, v9, (a3 & 3) != 0);
  *(void *)a1 = &unk_26CF444B8;
  *(void *)(a1 + 24) = &unk_26CF44590;
  *(void *)(a1 + 72) = &unk_26CF445B8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    SparseBundleBackend::set_bytes_per_band(a1, a4);
    SparseBundleBackend::prepare_new_bundle((SparseBundleBackend *)a1);
    BOOL v10 = 1;
  }
  else if (*(unsigned char *)(a1 + 36))
  {
    BOOL v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  if (!*(void *)(a1 + 112)) {
    SparseBundleBackend::read_info((SparseBundleBackend *)a1);
  }
  if (v10) {
    SparseBundleBackend::create_mapped_folder((SparseBundleBackend *)a1, (a3 & 0x200) != 0);
  }
  return a1;
}

void sub_21E3742CC(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v3) {
    SparseBundleBackend::SparseBundleBackend(v3);
  }
  SparseBundleBackend::SparseBundleBackend((uint64_t)v1);
  FileDescriptorBackend::~FileDescriptorBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t SparseBundleBackend::open_bundle(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    if (*(char *)(a1 + 23) < 0) {
      a1 = *(void *)a1;
    }
    if (mkdir((const char *)a1, 0x1FFu) != -1) {
      return FileDescriptorWrapper::open_file(v2, 0);
    }
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "Failed creating sparsebundle folder";
LABEL_16:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v8, v7);
  }
  if ((a2 & 3) == 0 || geteuid()) {
    return FileDescriptorWrapper::open_file(v2, 0);
  }
  if (*(char *)(v2 + 23) >= 0) {
    uint64_t v3 = (const char *)v2;
  }
  else {
    uint64_t v3 = *(const char **)v2;
  }
  if (stat(v3, &v11))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "stat failed";
    goto LABEL_16;
  }
  if (!v11.st_uid) {
    return FileDescriptorWrapper::open_file(v2, 0);
  }
  set_euid_wrapper::set_euid_wrapper((set_euid_wrapper *)v10, v11.st_uid);
  uint64_t v4 = FileDescriptorWrapper::open_file(v2, 0);
  set_euid_wrapper::~set_euid_wrapper((set_euid_wrapper *)v10);
  return v4;
}

void sub_21E374418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void FileDescriptorBackend::FileDescriptorBackend(FileDescriptorBackend *this, int a2, char a3)
{
  Backend::Backend((Backend *)this);
  FileDescriptor::FileDescriptor((FileDescriptor *)(v6 + 24), a2, a3);
  *(void *)this = &unk_26CF44660;
  *((void *)this + 3) = &unk_26CF44720;
}

void sub_21E37458C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SparseBundleBackend::set_bytes_per_band(uint64_t this, unint64_t a2)
{
  if (a2 < 0x100000 || a2 > 0x200000000 || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid band size (", 19);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes)", 7);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v3, 0x16u);
  }
  *(void *)(this + 128) = a2;
  return this;
}

void sub_21E374670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void SparseBundleBackend::prepare_new_bundle(SparseBundleBackend *this)
{
  v22[131] = *MEMORY[0x263EF8340];
  if (mkdirat(*((_DWORD *)this + 8), "bands", 0x1FFu) == -1)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    unsigned int v7 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed creating bands folder", *v7);
  }
  SparseBundleBackend::write_info_plists(this);
  int v2 = *((_DWORD *)this + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "token");
  int v3 = FileDescriptorWrapper::open_from(v2, (uint64_t)__p, 1538);
  FileLocal::FileLocal((FileLocal *)&v17, v3, 1, 0);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  int v4 = *((_DWORD *)this + 8);
  std::string::basic_string[abi:ne180100]<0>(v9, "lock");
  int v5 = FileDescriptorWrapper::open_from(v4, (uint64_t)v9, 1538);
  FileLocal::FileLocal((FileLocal *)__p, v5, 1, 0);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  __p[0] = &unk_26CF41300;
  uint64_t v13 = &unk_26CF413E0;
  int v14 = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  int v17 = &unk_26CF41300;
  uint64_t v19 = &unk_26CF413E0;
  __int16 v20 = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v22);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_21E3748F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SparseBundleBackend::read_info(SparseBundleBackend *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "Info.plist");
  SparseBundleBackend::read_info((uint64_t)this);
}

void sub_21E3749EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    long long v64 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "SparseBundleBackend::read_info()";
    *((void *)&a11 + 1) = 30;
    a12 = 16;
    di_log::logger<di_log::log_printer<263ul>>::logger(&__p, &a11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a61, (uint64_t)"Failed to read ", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a61, (uint64_t)"Info.plist", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a61, (uint64_t)", ", 2);
    long long v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v64 + 16))(v64);
    size_t v66 = strlen(v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a61, (uint64_t)v65, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a61, (uint64_t)", reading from backup", 21);
    di_log::logger<di_log::log_printer<263ul>>::~logger((uint64_t)&__p);
    __cxa_end_catch();
    std::string::basic_string[abi:ne180100]<0>(&__p, "Info.bckup");
    SparseBundleBackend::read_info(v61);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SparseBundleBackend::create_mapped_folder(SparseBundleBackend *this, char a2)
{
  uint64_t result = mkdirat(*((_DWORD *)this + 8), "mapped", 0x1FFu);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed creating ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"mapped", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" folder", 7);
    uint64_t v6 = __error();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v12, *v6);
  }
  if ((a2 & 1) == 0)
  {
    memset(&v11, 0, sizeof(v11));
    FileDescriptor::get_stat((SparseBundleBackend *)((char *)this + 24), &v11);
    if (fchmodat(*((_DWORD *)this + 8), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      unsigned int v7 = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"fchmodat failed for ", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"mapped", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" folder", 7);
      uint64_t v8 = __error();
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)v7, (uint64_t)v12, *v8);
    }
    uint64_t result = geteuid();
    if (!result && v11.st_uid)
    {
      uint64_t result = fchownat(*((_DWORD *)this + 8), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if (result == -1)
      {
        int v9 = __cxa_allocate_exception(0x40uLL);
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"fchownat failed for ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"mapped", 6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" folder", 7);
        char v10 = __error();
        DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }
  return result;
}

void sub_21E374F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void FileDescriptorBackend::~FileDescriptorBackend(FileDescriptorBackend *this)
{
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorBackend *)((char *)this + 24));
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void SparseBundleBackend::SparseBundleBackend(FileDescriptorBackend *a1, int a2, char a3, void *a4)
{
  FileDescriptorBackend::FileDescriptorBackend(a1, a2, a3);
  *uint64_t v6 = &unk_26CF444B8;
  v6[3] = &unk_26CF44590;
  v6[9] = &unk_26CF445B8;
  void v6[10] = *a4;
  uint64_t v7 = a4[1];
  v6[11] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 14) = 0;
  SparseBundleBackend::read_info(a1);
}

void sub_21E37519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<93ul>>::~logger((uint64_t)va);
  uint64_t v6 = *((void *)v4 + 14);
  *((void *)v4 + 14) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 13);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 11);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  FileDescriptorBackend::~FileDescriptorBackend(v4);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<161ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<161ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44B90;
  a1[45] = &unk_26CF44C90;
  a1[46] = &unk_26CF44CB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44B90;
  a1[45] = &unk_26CF44C18;
  a1[46] = &unk_26CF44C40;
  return a1;
}

void sub_21E37531C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<161ul>>::~logger(uint64_t a1)
{
  return a1;
}

void SparseBundleBackend::write_info_plists(SparseBundleBackend *this)
{
  v14[93] = *MEMORY[0x263EF8340];
  *(void *)&long long __p = "SparseBundleBackend::write_info_plists()";
  *((void *)&__p + 1) = 38;
  int v5 = 0;
  di_log::logger<di_log::log_printer<322ul>>::logger(v7, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Updating ", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Info.bckup", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)", disk size: ", 13);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf((uint64_t)v7);
  MEMORY[0x223C24910](v14);
  int v2 = *((_DWORD *)this + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Info.bckup");
  int v3 = FileDescriptorWrapper::open_from(v2, (uint64_t)&__p, 1538);
  FileLocal::FileLocal((FileLocal *)v7, v3, 1, 0);
  if (v6 < 0) {
    operator delete((void *)__p);
  }
  SparseBundleBackend::write_info_to_file(this, (Backend *)v7);
  SparseBundleBackend::write_primary_info_plist(this);
  v7[0] = &unk_26CF41300;
  int v9 = &unk_26CF413E0;
  char v10 = &unk_26CF41418;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v12);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_21E375550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void SparseBundleBackend::read_info(uint64_t a1)
{
}

void sub_21E375C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<207ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<207ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44DB0;
  a1[45] = &unk_26CF44EB0;
  a1[46] = &unk_26CF44ED8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44DB0;
  a1[45] = &unk_26CF44E38;
  a1[46] = &unk_26CF44E60;
  return a1;
}

void sub_21E375ED8(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<207ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<263ul>>::logger(void *a1, long long *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<263ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44FD0;
  a1[45] = &unk_26CF450D0;
  a1[46] = &unk_26CF450F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44FD0;
  a1[45] = &unk_26CF45058;
  a1[46] = &unk_26CF45080;
  return a1;
}

void sub_21E376040(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<263ul>>::~logger(uint64_t a1)
{
  return a1;
}

const void **SparseBundleBackend::write_primary_info_plist(SparseBundleBackend *this)
{
  *(void *)&long long v8 = "SparseBundleBackend::write_primary_info_plist()";
  *((void *)&v8 + 1) = 45;
  int v9 = 0;
  di_log::logger<di_log::log_printer<304ul>>::logger(__p, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Updating ", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Info.plist", 10);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf((uint64_t)__p);
  MEMORY[0x223C24910](&v12);
  uint64_t v2 = *((void *)this + 14);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Info.plist");
    operator new();
  }
  unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 56))(v2, 0);
  if (v3)
  {
    unsigned int v4 = v3;
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed truncating plist", v4);
  }
  return SparseBundleBackend::write_info_to_file(this, *((Backend **)this + 14));
}

void sub_21E376254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<270ul>>::logger(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<270ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF451F0;
  a1[45] = &unk_26CF452F0;
  a1[46] = &unk_26CF45318;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF451F0;
  a1[45] = &unk_26CF45278;
  a1[46] = &unk_26CF452A0;
  return a1;
}

void sub_21E3763A0(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<270ul>>::~logger(uint64_t a1)
{
  return a1;
}

const void **SparseBundleBackend::write_info_to_file(SparseBundleBackend *this, Backend *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(Mutable, @"diskimage-bundle-type", @"com.apple.diskimage.sparsebundle");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263EFFB60], @"6.0");
  addCFNumber64ToDict(Mutable, @"bundle-backingstore-version", 2);
  addCFNumber64ToDict(Mutable, @"size", *((void *)this + 15));
  addCFNumber64ToDict(Mutable, @"band-size", *((void *)this + 16));
  int v5 = Mutable;
  char v6 = operator new(0x28uLL);
  long long __p = v6;
  long long v18 = xmmword_21E3A0B60;
  *char v6 = 0u;
  v6[1] = 0u;
  *(void *)((char *)v6 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)this + 136, v6);
  addCFStringToDict(v5, @"uuid", (uint64_t)&__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  CFErrorRef error = 0;
  CFDataRef v7 = CFPropertyListCreateData(v4, Mutable, kCFPropertyListXMLFormat_v1_0, 0, &error);
  CFDataRef v22 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed creating property list", 29);
    unsigned int Code = CFErrorGetCode(error);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&__p, Code);
  }
  CFIndex Length = CFDataGetLength(v7);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v22);
  uint64_t v10 = *((void *)details::get_dummy_shared_ptr() + 1);
  long long __p = BytePtr;
  *(void *)&long long v18 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)&v18 + 1) = Length;
  uint64_t v19 = 0;
  CFIndex v20 = Length;
  char v21 = 0;
  unsigned int v11 = (*(uint64_t (**)(Backend *, void **))(*(void *)a2 + 96))(a2, &__p);
  if ((void)v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
  }
  if ((v11 & 0x80000000) != 0
    || (unsigned int v11 = (*(uint64_t (**)(Backend *, uint64_t))(*(void *)a2 + 16))(a2, 2)) != 0)
  {
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &unk_26CF39EE0;
    int v14 = std::generic_category();
    v13[1] = v11;
    void v13[2] = v14;
    *((unsigned char *)v13 + 24) = 0;
    *((unsigned char *)v13 + 48) = 0;
    v13[7] = "Failed writing sparsebundle info";
  }
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)&v22);
  CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)&error);
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&Mutable);
}

void sub_21E3766F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::ostringstream::~ostringstream((uint64_t)&__p);
  CFAutoRelease<__CFData const*>::~CFAutoRelease((const void **)(v14 - 72));
  CFAutoRelease<__CFError *>::~CFAutoRelease((const void **)(v14 - 64));
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)(v14 - 56));
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<304ul>>::logger(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<304ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45410;
  a1[45] = &unk_26CF45510;
  a1[46] = &unk_26CF45538;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45410;
  a1[45] = &unk_26CF45498;
  a1[46] = &unk_26CF454C0;
  return a1;
}

void sub_21E37689C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<304ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<322ul>>::logger(void *a1, long long *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<322ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45630;
  a1[45] = &unk_26CF45730;
  a1[46] = &unk_26CF45758;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45630;
  a1[45] = &unk_26CF456B8;
  a1[46] = &unk_26CF456E0;
  return a1;
}

void sub_21E376A04(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<322ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t SparseBundleBackend::truncate(SparseBundleBackend *this, uint64_t a2)
{
  *((void *)this + 15) = (a2 + 4095) & 0xFFFFFFFFFFFFF000;
  SparseBundleBackend::write_info_plists(this);
  return 0;
}

void SparseBundleBackend::open_token_file(SparseBundleBackend *this@<X0>, void *a2@<X8>)
{
  unsigned int v3 = (int *)((char *)this + 32);
  if ((*(unsigned int (**)(SparseBundleBackend *))(*(void *)this + 48))(this)) {
    int v4 = 2;
  }
  else {
    int v4 = 0;
  }
  int v7 = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, "token");
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,std::string,int &,void>(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21E376C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SparseBundleBackend::lock(SparseBundleBackend *this)
{
  if (((*(uint64_t (**)(SparseBundleBackend *))(*(void *)this + 192))(this) & 1) == 0)
  {
    int v12 = 0;
    if ((*(unsigned int (**)(SparseBundleBackend *))(*(void *)this + 48))(this)) {
      int v2 = 550;
    }
    else {
      int v2 = 20;
    }
    int v12 = v2;
    std::string::basic_string[abi:ne180100]<0>(__p, "lock");
    std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,std::string,int &,void>((int *)this + 8, (uint64_t)__p, &v12, &v6);
    long long v3 = v6;
    long long v6 = 0uLL;
    int v4 = (std::__shared_weak_count *)*((void *)this + 11);
    *((_OWORD *)this + 5) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (*((void *)&v6 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
      }
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&long long v6 = "int SparseBundleBackend::lock()";
    *((void *)&v6 + 1) = 29;
    int v7 = 0;
    di_log::logger<di_log::log_printer<361ul>>::logger(__p, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Opened bundle's lock file with flags 0x", 39);
    *(_DWORD *)((char *)&v10 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)&v10 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v10 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)&v10 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<361ul>>::~logger_buf((uint64_t)__p);
    MEMORY[0x223C24910](&v11);
  }
  return 0;
}

void sub_21E376E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, int a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2 == 1)
  {
    uint64_t v60 = __cxa_begin_catch(exception_object);
    int v61 = v60[2];
    if (v61 < 0) {
      int v61 = -v61;
    }
    BOOL v62 = v61 == 45 || v61 == 2;
    *(void *)&a9 = "int SparseBundleBackend::lock()";
    *((void *)&a9 + 1) = 29;
    if (v62)
    {
      a10 = 0;
      di_log::logger<di_log::log_printer<367ul>>::logger(&__p, &a9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30);
      operator<<(&a60, (uint64_t)v60);
      di_log::logger<di_log::log_printer<367ul>>::~logger((uint64_t)&__p);
    }
    else
    {
      a10 = 16;
      di_log::logger<di_log::log_printer<370ul>>::logger(&__p, &a9);
      operator<<(&a60, (uint64_t)v60);
      di_log::logger<di_log::log_printer<370ul>>::~logger((uint64_t)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x21E376E14);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<367ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<367ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45850;
  a1[45] = &unk_26CF45950;
  a1[46] = &unk_26CF45978;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45850;
  a1[45] = &unk_26CF458D8;
  a1[46] = &unk_26CF45900;
  return a1;
}

void sub_21E377070(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<367ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t non-virtual thunk to'SparseBundleBackend::lock(SparseBundleBackend *this)
{
  return SparseBundleBackend::lock((SparseBundleBackend *)((char *)this - 72));
}

uint64_t SparseBundleBackend::unlock_all(SparseBundleBackend *this)
{
  if ((*(unsigned int (**)(SparseBundleBackend *))(*(void *)this + 192))(this))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    *(void *)&long long v4 = "int SparseBundleBackend::unlock_all()";
    *((void *)&v4 + 1) = 35;
    int v5 = 0;
    di_log::logger<di_log::log_printer<379ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Bundle's lock file is closed", 28);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x223C24910](&v8);
  }
  return 0;
}

void sub_21E3771A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<379ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<379ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<379ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45A70;
  a1[45] = &unk_26CF45B70;
  a1[46] = &unk_26CF45B98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45A70;
  a1[45] = &unk_26CF45AF8;
  a1[46] = &unk_26CF45B20;
  return a1;
}

void sub_21E3772BC(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<379ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t non-virtual thunk to'SparseBundleBackend::unlock_all(SparseBundleBackend *this)
{
  return 0;
}

BOOL SparseBundleBackend::is_locked(SparseBundleBackend *this)
{
  return *((void *)this + 10) != 0;
}

BOOL non-virtual thunk to'SparseBundleBackend::is_locked(SparseBundleBackend *this)
{
  return *((void *)this + 1) != 0;
}

void SparseBundleBackend::open_bands_folder(SparseBundleBackend *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "bands");
  operator new();
}

void sub_21E377408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x223C249A0](v15, 0x1081C409227ACB4);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SparseBundleBackend::open_mapped_folder(SparseBundleBackend *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "mapped");
  operator new();
}

void sub_21E3774E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x223C249A0](v15, 0x1081C409227ACB4);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SparseBundleBackend::browse_bands_folder(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "bands");
  int v4 = FileDescriptorWrapper::open_from(v3, (uint64_t)__p, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  dirEntries_t::dirEntries_t((dirEntries_t *)&v9, v4);
  while (1)
  {
    int v5 = readdir(v9);
    if (!v5) {
      break;
    }
    *__error() = 0;
    d_name = v5->d_name;
    uint64_t v7 = strtoll(v5->d_name, 0, 16);
    if (!*__error())
    {
      std::string::basic_string[abi:ne180100]<0>(__p, d_name);
      std::function<void ()(std::string const&,unsigned long long)>::operator()(a2, (uint64_t)__p, v7);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return closedir(v9);
}

void sub_21E377610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DIR *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(std::string const&,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void SparseBundleBackend::get_existing_bands(SparseBundleBackend *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  unint64_t v1 = (unint64_t)(*((void *)this + 15) + *((void *)this + 16) - 1) / *((void *)this + 16);
  operator new();
}

void sub_21E37788C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void *)(v12 - 104);
  *(void *)(v12 - 104) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<437ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<437ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45C90;
  a1[45] = &unk_26CF45D90;
  a1[46] = &unk_26CF45DB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45C90;
  a1[45] = &unk_26CF45D18;
  a1[46] = &unk_26CF45D40;
  return a1;
}

void sub_21E377A20(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<437ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<446ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<446ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF45EB0;
  a1[45] = &unk_26CF45FB0;
  a1[46] = &unk_26CF45FD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF45EB0;
  a1[45] = &unk_26CF45F38;
  a1[46] = &unk_26CF45F60;
  return a1;
}

void sub_21E377B88(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<446ul>>::~logger(uint64_t a1)
{
  return a1;
}

void SparseBundleBackend::~SparseBundleBackend(SparseBundleBackend *this)
{
  *(void *)this = &unk_26CF444B8;
  uint64_t v2 = (SparseBundleBackend *)((char *)this + 24);
  *((void *)this + 3) = &unk_26CF44590;
  *((void *)this + 9) = &unk_26CF445B8;
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(v2);
  long long v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  FileDescriptorWrapper *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_26CF444B8;
  uint64_t v2 = (SparseBundleBackend *)((char *)this + 24);
  *((void *)this + 3) = &unk_26CF44590;
  *((void *)this + 9) = &unk_26CF445B8;
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(v2);
  long long v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  JUMPOUT(0x223C249A0);
}

uint64_t SparseBundleBackend::flush(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))();
}

uint64_t SparseBundleBackend::get_size(SparseBundleBackend *this)
{
  return *((void *)this + 15);
}

uint64_t FileDescriptorBackend::is_writable(FileDescriptorBackend *this)
{
  return *((unsigned __int8 *)this + 36);
}

void *SparseBundleBackend::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"sparsebundle", 12);
}

uint64_t SparseBundleBackend::write()
{
  return 4294967251;
}

uint64_t SparseBundleBackend::read()
{
  return 4294967251;
}

uint64_t FileDescriptorBackend::get_identifier(FileDescriptorBackend *this)
{
  return *((void *)this + 7);
}

void non-virtual thunk to'SparseBundleBackend::~SparseBundleBackend(SparseBundleBackend *this)
{
  *((void *)this - 3) = &unk_26CF444B8;
  *(void *)this = &unk_26CF44590;
  *((void *)this + 6) = &unk_26CF445B8;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *((void *)this - 3) = &unk_26CF444B8;
  *(void *)this = &unk_26CF44590;
  *((void *)this + 6) = &unk_26CF445B8;
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this - 1);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x223C249A0);
}

{
  FileDescriptorWrapper *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *((void *)this - 9) = &unk_26CF444B8;
  uint64_t v2 = (SparseBundleBackend *)((char *)this - 48);
  *((void *)this - 6) = &unk_26CF44590;
  *(void *)this = &unk_26CF445B8;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(v2);
  long long v6 = (std::__shared_weak_count *)*((void *)this - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  FileDescriptorWrapper *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *((void *)this - 9) = &unk_26CF444B8;
  uint64_t v2 = (SparseBundleBackend *)((char *)this - 48);
  *((void *)this - 6) = &unk_26CF44590;
  *(void *)this = &unk_26CF445B8;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(v2);
  long long v6 = (std::__shared_weak_count *)*((void *)this - 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  JUMPOUT(0x223C249A0);
}

void set_euid_wrapper::set_euid_wrapper(set_euid_wrapper *this, uid_t a2)
{
  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"failed to set euid to ", 22);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v5, 1u);
  }
  *(void *)&long long v3 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((void *)&v3 + 1) = 34;
  int v4 = 0;
  di_log::logger<di_log::log_printer<128ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"uid temporarily set to ", 23);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x223C24910](&v7);
}

void sub_21E3782F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<128ul>>::logger(void *a1, long long *a2)
{
  long long v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<128ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44750;
  a1[45] = &unk_26CF44850;
  a1[46] = &unk_26CF44878;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44750;
  a1[45] = &unk_26CF447D8;
  a1[46] = &unk_26CF44800;
  return a1;
}

void sub_21E37843C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<128ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<128ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF448E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E378520(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF448E8;
  di_log::logger_buf<di_log::log_printer<128ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<128ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<128ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<128ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<128ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<128ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<128ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<128ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<128ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E378A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<128ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 128;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 128;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void set_euid_wrapper::~set_euid_wrapper(set_euid_wrapper *this)
{
  seteuid(0);
  *(void *)&long long v1 = "set_euid_wrapper::~set_euid_wrapper()";
  *((void *)&v1 + 1) = 35;
  int v2 = 0;
  di_log::logger<di_log::log_printer<133ul>>::logger(v3, &v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"uid restored to 0 (res=", 23);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)")", 1);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf((uint64_t)v3);
  MEMORY[0x223C24910](&v5);
}

void *di_log::logger<di_log::log_printer<133ul>>::logger(void *a1, long long *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x263F8C368] + 16;
  di_log::logger_buf<di_log::log_printer<133ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = &unk_26CF44970;
  a1[45] = &unk_26CF44A70;
  a1[46] = &unk_26CF44A98;
  std::ios_base::init(v3, a1);
  a1[63] = 0;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = &unk_26CF44970;
  a1[45] = &unk_26CF449F8;
  a1[46] = &unk_26CF44A20;
  return a1;
}

void sub_21E378E6C(_Unwind_Exception *a1)
{
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger<di_log::log_printer<133ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<133ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF44B08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E378F50(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF44B08;
  di_log::logger_buf<di_log::log_printer<133ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<133ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<133ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<133ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<133ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<133ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<133ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<133ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<133ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E3794C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<133ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 133;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 133;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<161ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  unsigned __int8 v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<161ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<161ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<161ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<161ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF44D28;
  di_log::logger_buf<di_log::log_printer<161ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<161ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<161ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E379C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<161ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<161ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 161;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 161;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<207ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<207ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<207ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<207ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<207ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF44F48;
  di_log::logger_buf<di_log::log_printer<207ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<207ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<207ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37A374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<207ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<207ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 207;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 207;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::byte>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_21E37A618(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<263ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<263ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<263ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<263ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<263ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF45168;
  di_log::logger_buf<di_log::log_printer<263ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<263ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<263ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37AB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<263ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<263ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 263;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 263;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<270ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<270ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<270ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<270ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<270ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF45388;
  di_log::logger_buf<di_log::log_printer<270ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<270ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<270ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37B2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<270ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<270ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 270;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 270;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<304ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<304ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<304ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<304ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<304ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF455A8;
  di_log::logger_buf<di_log::log_printer<304ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<304ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<304ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<304ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<304ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 304;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 304;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<322ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<322ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<322ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<322ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<322ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF457C8;
  di_log::logger_buf<di_log::log_printer<322ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<322ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<322ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37C1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<322ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<322ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 322;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 322;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<367ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<367ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<367ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<367ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<367ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF459E8;
  di_log::logger_buf<di_log::log_printer<367ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<367ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<367ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37C92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<367ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<367ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 367;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 367;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<379ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<379ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<379ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<379ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<379ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF45C08;
  di_log::logger_buf<di_log::log_printer<379ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<379ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<379ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37D0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<379ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<379ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 379;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 379;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void dirEntries_t::dirEntries_t(dirEntries_t *this, int a2)
{
  uint64_t v3 = fdopendir(a2);
  *(void *)this = v3;
  if (!v3)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed opening folder for entries reading", 0x13u);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<437ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<437ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<437ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<437ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<437ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF45E28;
  di_log::logger_buf<di_log::log_printer<437ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<437ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<437ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<437ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<437ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 437;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 437;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<446ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(v2);
  MEMORY[0x223C24910](a1 + 8);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'di_log::logger<di_log::log_printer<446ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(v1);
  JUMPOUT(0x223C24910);
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(v1);
  MEMORY[0x223C24910](v1 + 368);
  JUMPOUT(0x223C249A0);
}

void di_log::logger<di_log::log_printer<446ul>>::~logger(uint64_t a1)
{
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(a1);
  MEMORY[0x223C24910](a1 + 368);
  JUMPOUT(0x223C249A0);
}

uint64_t di_log::logger_buf<di_log::log_printer<446ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<446ul>>::overflow(unsigned char *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
    }
    else {
      std::ostream::put();
    }
  }
  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = &unk_26CF46048;
  di_log::logger_buf<di_log::log_printer<446ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 96 + *(void *)(v3 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C24910](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<446ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24);
    if ((*(unsigned char *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(v3 + 40) + 32))(__p);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<446ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (long long *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_21E37DFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(uint64_t a1)
{
  di_log::logger_buf<di_log::log_printer<446ul>>::~logger_buf(a1);
  JUMPOUT(0x223C249A0);
}

int *di_log::log_printer<446ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 446;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v9);
      free(v10);
    }
  }
  else
  {
    char v11 = getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 446;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_21E237000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }
  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<161ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF44D28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E2B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<207ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF44F48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E348(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<263ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF45168;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E3D8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<270ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF45388;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E468(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<304ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF455A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E4F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<322ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF457C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E588(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,std::string,int &,void>(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,std::string,int &,std::allocator<FileLocal>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_21E37E614(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,std::string,int &,std::allocator<FileLocal>,0>(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF20FB8;
  int v5 = *a4;
  int v6 = FileDescriptorWrapper::open_from(*a2, a3, *a4);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_21E37E698(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<367ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF459E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E728(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<379ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF45C08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E7B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<437ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF45E28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37E848(_Unwind_Exception *a1)
{
}

void std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::~__func()
{
}

__n128 std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26CF460C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26CF460C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (**(void **)(a1 + 8) <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Bands folder contains an out of range band (", 44);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v10, 0x16u);
  }
  BOOL result = lock_free::bitmap_t::set_bit(**(lock_free::bitmap_t ***)(a1 + 16), *a3, 1);
  ++**(void **)(a1 + 24);
  return result;
}

void sub_21E37E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  a10 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a10 + *(void *)(a10 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a11 = MEMORY[0x263F8C318] + 16;
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::operator()((uint64_t)&a11, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SparseBundleBackend::get_existing_bands(void)::$_0,std::allocator<SparseBundleBackend::get_existing_bands(void)::$_0>,void ()(std::string const&,unsigned long long)>::target_type()
{
}

uint64_t di_log::logger_buf<di_log::log_printer<446ul>>::logger_buf(uint64_t a1, long long *a2)
{
  *(void *)std::streambuf::basic_streambuf() = &unk_26CF46048;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 64) = v4;
  long long v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_21E37EC7C(_Unwind_Exception *a1)
{
}

const void **info::DiskImageStackableInfo::get_layers@<X0>(const DiskImageStackable *a1@<X1>, char a2@<W2>, const __CFArray **a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 4), MEMORY[0x263EFFF70]);
  CFArrayRef theArray = Mutable;
  uint64_t v8 = (int *)*((void *)a1 + 2);
  uint64_t v9 = (int *)*((void *)a1 + 3);
  if (v8 != v9)
  {
    do
    {
      (*(void (**)(char **__return_ptr))(**((void **)v8 + 3) + 48))(&v23);
      CFIndex Count = CFArrayGetCount(theArray);
      char v11 = @"Base";
      if (Count != -1 - 0x5555555555555555 * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 4)) {
        char v11 = off_2644A2CF8[*v8];
      }
      __int16 v22 = v11;
      os_log_type_t v12 = theArray;
      if ((a2 & 4) != 0)
      {
        size_t v25 = @"Role";
        uint64_t v26 = v11;
        CFRetain(v11);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)&v23[*(void *)(*(void *)v23 - 96)] + 16))(&v18);
        uint64_t v27 = @"Image";
        uint64_t v28 = v18;
        uint64_t v18 = 0;
        uint64_t v19 = &v25;
        uint64_t v20 = 2;
        cf::create_dict_from_list((uint64_t *)&v19, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v12, value);
        CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&value);
        for (uint64_t i = 24; i != -8; i -= 16)
          CFAutoRelease<void const*>::~CFAutoRelease((const void **)((char *)&v25 + i));
        CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&v18);
      }
      else
      {
        size_t v25 = @"Role";
        uint64_t v26 = v11;
        CFRetain(v11);
        uint64_t v13 = (*(uint64_t (**)(char *))(*(void *)&v23[*(void *)(*(void *)v23 - 96)] + 24))(&v23[*(void *)(*(void *)v23 - 96)]);
        uint64_t v27 = @"Image Format";
        uint64_t v28 = v13;
        uint64_t v19 = &v25;
        uint64_t v20 = 2;
        cf::create_dict_from_list((uint64_t *)&v19, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v12, value);
        CFAutoRelease<__CFDictionary *>::~CFAutoRelease((const void **)&value);
        for (uint64_t j = 24; j != -8; j -= 16)
          CFAutoRelease<void const*>::~CFAutoRelease((const void **)((char *)&v25 + j));
      }
      CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v22);
      uint64_t v16 = v23;
      uint64_t v23 = 0;
      if (v16) {
        (*(void (**)(char *))(*(void *)v16 + 8))(v16);
      }
      v8 += 12;
    }
    while (v8 != v9);
    CFArrayRef Mutable = theArray;
  }
  *a3 = Mutable;
  CFArrayRef theArray = 0;
  return CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&theArray);
}

void sub_21E37EF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, const void *a17, char a18)
{
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&a14);
  for (uint64_t i = 24; i != -8; i -= 16)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(&a18 + i));
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&a11);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a15);
  uint64_t v20 = a16;
  a16 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  CFAutoRelease<__CFArray *>::~CFAutoRelease(&a17);
  _Unwind_Resume(a1);
}

CFTypeRef *CFAutoRelease<__CFString const*>::operator=(CFTypeRef *a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRetain(*a2);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  *a1 = *a2;
  return a1;
}

info::DiskImageStackableInfo *info::DiskImageStackableInfo::DiskImageStackableInfo(info::DiskImageStackableInfo *this, const DiskImageStackable *a2, char a3)
{
  *((void *)this + 5) = &unk_26CF2C060;
  *((void *)this + 6) = &unk_26CF2C090;
  *((void *)this + 7) = &unk_26CF2C0C0;
  *((void *)this + 8) = &unk_26CF2C0F0;
  *(void *)this = off_26CF46898;
  *((void *)this + 3) = off_26CF468E0;
  *((void *)this + 4) = off_26CF46928;
  *(void *)((char *)this + unk_26CF46870) = off_26CF46970;
  *(void *)((char *)this + *(void *)(*(void *)this - 4std::mutex::~mutex((std::mutex *)((char *)this + 8)) = off_26CF469B8;
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = off_26CF46A00;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF46A48;
  *(void *)this = off_26CF46670;
  *((void *)this + 3) = off_26CF466B8;
  *((void *)this + 4) = off_26CF46700;
  *(void *)((char *)this + unk_26CF46648) = off_26CF46748;
  *(void *)((char *)this + *(void *)(*(void *)this - 4std::mutex::~mutex((std::mutex *)((char *)this + 8)) = off_26CF46790;
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = off_26CF467D8;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = off_26CF46820;
  *((void *)this + 9) = &off_26CF46AA8;
  *((void *)this + 3) = &off_26CF46B00;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 17) = off_26CF46BF0;
  *((void *)this + 5) = off_26CF46C48;
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 20) = 0;
  info::IdentityInfo::IdentityInfo<DiskImageStackable>((void *)this + 21, (DiskImage *)&off_26CF465F0, (uint64_t)a2);
  *(void *)this = &unk_26CF461B8;
  *((void *)this + 3) = &unk_26CF46200;
  *((void *)this + 4) = &unk_26CF46248;
  *((void *)this + 5) = &unk_26CF46290;
  *((void *)this + 6) = &unk_26CF462D8;
  *((void *)this + 7) = &unk_26CF46320;
  *((void *)this + 8) = &unk_26CF46368;
  *((void *)this + 9) = &unk_26CF463C8;
  *((void *)this + 17) = &unk_26CF46438;
  *((void *)this + 21) = &unk_26CF464A8;
  *((void *)this + 1) = 0;
  long long v5 = (CFTypeRef *)((char *)this + 8);
  *((void *)this + 2) = 0;
  int v6 = (CFTypeRef *)((char *)this + 16);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(char **__return_ptr))(*(void *)v8 + 48))(&v22);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 24)] + 16))(&v22[*(void *)(*(void *)v22 - 24)]);
  uint64_t v11 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112) + 16) = *(void *)(v10 + 16);
  *(void *)((char *)this + *(void *)(v11 - 112) + 8) = *(void *)(v10 + 8);
  *(void *)((char *)this + *(void *)(v11 - 112) + ++*(_DWORD *)(this + 56) = *(void *)(v10 + 56);
  os_log_type_t v12 = (char *)this + *(void *)(v11 - 112);
  uint64_t v13 = *(void *)(v10 + 40);
  v12[48] = *(unsigned char *)(v10 + 48);
  *((void *)v12 + 5) = v13;
  uint64_t v14 = (char *)this + *(void *)(*(void *)this - 112);
  uint64_t v15 = *(void *)(v10 + 24);
  v14[32] = *(unsigned char *)(v10 + 32);
  *((void *)v14 + 3) = v15;
  uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 64)] + 16))(&v22[*(void *)(*(void *)v22 - 64)]);
  CFAutoRelease<__CFString const*>::operator=((CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128) + 16), (CFTypeRef *)(v16 + 16));
  CFAutoRelease<__CFString const*>::operator=((CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128) + 24), (CFTypeRef *)(v16 + 24));
  info::DiskImageStackableInfo::get_layers(a2, a3, (const __CFArray **)&v21);
  if (*v5) {
    CFRelease(*v5);
  }
  *long long v5 = v21;
  uint64_t v21 = 0;
  CFAutoRelease<__CFArray const*>::~CFAutoRelease(&v21);
  int v17 = (const void *)(*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96)] + 24))(&v22[*(void *)(*(void *)v22 - 96)]);
  uint64_t v21 = v17;
  if (*v6)
  {
    CFRelease(*v6);
    int v17 = v21;
  }
  *int v6 = v17;
  uint64_t v21 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&v21);
  uint64_t v18 = v22;
  __int16 v22 = 0;
  if (v18) {
    (*(void (**)(char *))(*(void *)v18 + 8))(v18);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return this;
}

void sub_21E37F848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a11);
  uint64_t v18 = a12;
  a12 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v13);
  CFAutoRelease<__CFArray const*>::~CFAutoRelease(v16);
  info::IdentityInfo::~IdentityInfo(v15, (const void **)&off_26CF465F0);
  info::EncryptionInfo::~EncryptionInfo(v12, (const void **)&off_26CF465D0);
  _Unwind_Resume(a1);
}

void *info::IdentityInfo::IdentityInfo<DiskImageStackable>(void *a1, DiskImage *a2, uint64_t a3)
{
  *a1 = &unk_26CF2CF70;
  uint64_t v4 = *((void *)a2 + 1);
  *a1 = v4;
  *(void *)((char *)a1 + *(void *)(v4 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  *a1 = *(void *)a2;
  *(void *)((char *)a1 + *(void *)(v5 - PurgeableFileBackend::~PurgeableFileBackend((PurgeableFileBackend *)((char *)this - 24)) = *((void *)a2 + 3);
  a1[1] = 0;
  a1[2] = 0;
  int v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0;
  uint64_t identifier = di_stackable::get_identifier(*(di_stackable **)(*(void *)(a3 + 16) + 24), a2);
  uint64_t v9 = v8;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)&v15.byte0 = identifier;
  *(void *)&v15.byte8 = v9;
  CFUUIDRef v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v15);
  CFStringRef v11 = CFUUIDCreateString(v10, v14);
  CFStringRef v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v11 = v13;
  }
  a1[1] = v11;
  CFStringRef v13 = 0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_21E37FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&a9);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease(&a10);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24));
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 16));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v11);
  _Unwind_Resume(a1);
}

void info::DiskImageStackableInfo::~DiskImageStackableInfo(const void **this)
{
  *(void *)(v2 + 168) = off_26CF46D38;
  *(void *)(v2 + 64) = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v2 + 192));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 22);
  this[17] = off_26CF46BF0;
  this[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 20);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)(v2 + 168) = off_26CF46D38;
  *(void *)(v2 + 64) = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v2 + 192));
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 22);
  this[17] = off_26CF46BF0;
  this[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 20);
  JUMPOUT(0x223C249A0);
}

const void **info::DiskImageStackableInfo::serialize_to_dict@<X0>(CFArrayRef *this@<X0>, void *a2@<X8>)
{
  v13[14] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*((uint64_t (**)(CFArrayRef *))*this + 3))(this);
  v13[0] = @"Image Format";
  v13[1] = v4;
  void v13[2] = @"Format Description";
  void v13[3] = @"Stackable image";
  info::SizeInfo::serialize_to_dict((info::SizeInfo *)((char *)this + *((void *)*this - 14)), &valuePtr);
  void v13[4] = @"Size Info";
  unint64_t v13[5] = valuePtr;
  CFIndex valuePtr = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&valuePtr);
  info::EncryptionInfo::serialize_to_dict((info::EncryptionInfo *)((char *)this + *((void *)*this - 15)), &valuePtr);
  v13[6] = @"Encryption Info";
  v13[7] = valuePtr;
  CFIndex valuePtr = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&valuePtr);
  info::IdentityInfo::serialize_to_dict((info::IdentityInfo *)((char *)this + *((void *)*this - 16)), &valuePtr);
  void v13[8] = @"Identity Info";
  v13[9] = valuePtr;
  CFIndex valuePtr = 0;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&valuePtr);
  CFIndex valuePtr = CFArrayGetCount(this[1]);
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongType, &valuePtr);
  v13[10] = @"Images Count";
  void v13[11] = v5;
  uint64_t v9 = 0;
  CFArrayRef v6 = this[1];
  v13[12] = @"Stack Info";
  v13[13] = v6;
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = (uint64_t)v13;
  v10[1] = 7;
  cf::create_dict_from_list(v10, (CFMutableDictionaryRef *)&v11);
  *a2 = v11;
  CFStringRef v11 = 0;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v11);
  for (uint64_t i = 13; i != -1; i -= 2)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v13[i]);
  return CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&v9);
}

void sub_21E37FEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  CFAutoRelease<__CFNumber const*>::~CFAutoRelease(&a9);
  do
  {
    CFAutoRelease<void const*>::~CFAutoRelease(v14 - 1);
    v14 -= 2;
  }
  while (v14 != (const void **)&a14);
  _Unwind_Resume(a1);
}

__CFString *info::DiskImageStackableInfo::get_category(info::DiskImageStackableInfo *this)
{
  return @"STCK";
}

const void **virtual thunk to'info::DiskImageStackableInfo::~DiskImageStackableInfo(void *a1)
{
  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

void virtual thunk to'info::DiskImageStackableInfo::~DiskImageStackableInfo(void *a1)
{
  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)a1 + *(void *)(*a1 - 32));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

void virtual thunk to'info::DiskImageStackableInfo::~DiskImageStackableInfo(info::DiskImageStackableInfo *this)
{
  uint64_t v1 = (const void **)((char *)this + *(void *)(*(void *)this - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
}

{
  const void **v1;
  uint64_t vars8;

  uint64_t v1 = (const void **)((char *)this + *(void *)(*(void *)this - 24));
  v1[21] = off_26CF46D38;
  v1[8] = off_26CF46D90;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 24);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 23);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 22);
  v1[17] = off_26CF46BF0;
  v1[5] = off_26CF46C48;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v1 + 20);
  JUMPOUT(0x223C249A0);
}

const void **virtual thunk to'info::DiskImageStackableInfo::serialize_to_dict@<X0>(info::DiskImageStackableInfo *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageStackableInfo::serialize_to_dict((CFArrayRef *)((char *)this + *(void *)(*(void *)this - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageStackableInfo::get_category(info::DiskImageStackableInfo *this)
{
  return @"STCK";
}

const void **virtual thunk to'info::DiskImageStackableInfo::serialize_to_dict@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return info::DiskImageStackableInfo::serialize_to_dict((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

{
  return info::DiskImageStackableInfo::serialize_to_dict((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40)), a2);
}

__CFString *virtual thunk to'info::DiskImageStackableInfo::get_category()
{
  return @"STCK";
}

{
  return @"STCK";
}

void info::DiskImageStackableInfo::~DiskImageStackableInfo(const void **this, const void **a2)
{
  uint64_t v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 13)) = a2[1];
  *(const void **)((char *)this + *((void *)*this - 12)) = a2[2];
  *(const void **)((char *)this + *((void *)*this - 3)) = a2[3];
  *(const void **)((char *)this + *((void *)*this - 4)) = a2[4];
  *(const void **)((char *)this + *((void *)*this - 5)) = a2[5];
  *(const void **)((char *)this + *((void *)*this - 6)) = a2[6];
  *(const void **)((char *)this + *((void *)*this - 7)) = a2[7];
  *(const void **)((char *)this + *((void *)*this - std::mutex::~mutex((std::mutex *)((char *)this + 8)) = a2[8];
  *(const void **)((char *)this + *((void *)*this - 14)) = a2[9];
  *(const void **)((char *)this + *((void *)*this - 15)) = a2[10];
  *(const void **)((char *)this + *((void *)*this - 16)) = a2[11];
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 2);
  CFAutoRelease<__CFArray const*>::~CFAutoRelease(this + 1);
}

void KnoxbackendData::KnoxbackendData(std::string *this, long long *a2, std::string::size_type a3, std::string::size_type *a4, std::string::size_type a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
  }
  std::string::size_type v12 = *a4;
  std::string::size_type v11 = a4[1];
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = v12;
  this[1].__r_.__value_.__r.__words[2] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *((char *)a2 + 23);
  if (v13 >= 0) {
    CFUUIDRef v14 = (std::string::value_type *)a2;
  }
  else {
    CFUUIDRef v14 = *(std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v15 = *((void *)a2 + 1);
  }
  this[2].__r_.__value_.__r.__words[0] = di_utils::buffer_to_uuid((di_utils *)v14, v15);
  this[2].__r_.__value_.__l.__size_ = v16;
  this[2].__r_.__value_.__r.__words[2] = a5;
}

void sub_21E3815E4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Knoxbackend::KnoxCreateStreams(uint64_t a1, char *a2, uint64_t a3, uint8_t **a4)
{
  if (a2[23] >= 0) {
    CFArrayRef v6 = a2;
  }
  else {
    CFArrayRef v6 = *(char **)a2;
  }
  *(void *)&long long v9 = AAS3DownloadStreamOpen(v6, 0, 0, 0);
  AEAwrapper::ByteStream::ByteStream(&v12, &v9);
  AEAwrapper::Context::Context((AEAwrapper::Context *)&v11, (AEAwrapper::ByteStream *)&v12);
  AEAwrapper::Context::setSymmetricKey(&v11, *a4, 0x20uLL);
  AEAwrapper::ByteStream::make_DecryptionRandomAccessInputStream(&v12, &v11, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 0, (uint64_t *)&v10);
  std::allocate_shared[abi:ne180100]<AEAwrapper::DecryptionStream,std::allocator<AEAwrapper::DecryptionStream>,AEAwrapper::ByteStream,AEAwrapper::Context,AEAwrapper::ByteStream,void>(&v12, (uint64_t *)&v11, &v10, &v9);
  long long v7 = v9;
  long long v9 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  AEAwrapper::ByteStream::~ByteStream(&v10);
  AEAwrapper::Context::~Context(&v11);
  AEAwrapper::ByteStream::~ByteStream(&v12);
}

void sub_21E3816EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  AAByteStream v4 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  AEAContext v6 = va_arg(va2, AEAContext);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va);
  AEAwrapper::Context::~Context((AEAContext *)va1);
  AEAwrapper::ByteStream::~ByteStream((AAByteStream *)va2);
  _Unwind_Resume(a1);
}

uint64_t Knoxbackend::Knoxbackend(uint64_t a1, char **a2, uint64_t a3, std::string::size_type *a4)
{
  Backend::Backend((Backend *)a1);
  *(void *)uint64_t v8 = &unk_26CF46EA8;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  long long v9 = *a2;
  std::string::size_type v10 = a4[1];
  v18[0] = (uint8_t *)*a4;
  v18[1] = (uint8_t *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  Knoxbackend::KnoxCreateStreams(a1, v9, v7, v18);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  AEAContext v11 = (long long *)*a2;
  std::string::size_type RawSize = AEAwrapper::DecryptionStream::getRawSize(*(AEAContext **)(a1 + 40));
  std::string::size_type CompressionBlockSize = AEAwrapper::DecryptionStream::getCompressionBlockSize(*(AEAContext **)(a1 + 40));
  std::allocate_shared[abi:ne180100]<KnoxbackendData,std::allocator<KnoxbackendData>,std::string &,unsigned long long,std::shared_ptr<unsigned char> const&,unsigned long,void>(v11, &RawSize, a4, &CompressionBlockSize, &v17);
  long long v12 = v17;
  long long v17 = 0uLL;
  int v13 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (*((void *)&v17 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  return a1;
}

void sub_21E38181C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)v1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  CFNumberRef v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

ssize_t Knoxbackend::read(uint64_t a1, uint64_t a2)
{
  return AEAwrapper::DecryptionStream::pread(*(AAByteStream **)(a1 + 40), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void Knoxbackend::~Knoxbackend(Knoxbackend *this)
{
  Knoxbackend::~Knoxbackend(this);
  JUMPOUT(0x223C249A0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_26CF46EA8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  AAByteStream v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t Knoxbackend::flush()
{
  return 4294967251;
}

uint64_t Knoxbackend::get_size(Knoxbackend *this)
{
  return *(void *)(*((void *)this + 3) + 24);
}

uint64_t Knoxbackend::is_writable(Knoxbackend *this)
{
  return 0;
}

uint64_t Knoxbackend::truncate(Knoxbackend *this)
{
  return 4294967251;
}

void *Knoxbackend::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"knox", 4);
}

double Knoxbackend::getContext@<D0>(Knoxbackend *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Knoxbackend,std::allocator<Knoxbackend>,Knoxbackend&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t Knoxbackend::write()
{
  return 4294967251;
}

uint64_t Knoxbackend::get_identifier(Knoxbackend *this)
{
  return *(void *)(*((void *)this + 3) + 48);
}

void std::allocate_shared[abi:ne180100]<Knoxbackend,std::allocator<Knoxbackend>,Knoxbackend&,void>(const Knoxbackend *a1@<X1>, void *a2@<X8>)
{
  AAByteStream v4 = operator new(0x50uLL);
  std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<Knoxbackend&,std::allocator<Knoxbackend>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21E381A1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<Knoxbackend&,std::allocator<Knoxbackend>,0>(void *a1, const Knoxbackend *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF217E0;
  Knoxbackend::Knoxbackend((Knoxbackend *)(a1 + 3), a2);
  return a1;
}

void sub_21E381A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void Knoxbackend::Knoxbackend(Knoxbackend *this, const Knoxbackend *a2)
{
  Backend::Backend((Backend *)this);
  *(void *)uint64_t v4 = &unk_26CF46EA8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 4);
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 4);
    *((void *)this + 3) = v6;
    *((void *)this + 4) = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    *((void *)this + 3) = v6;
    *((void *)this + 4) = 0;
  }
  uint64_t v9 = *((void *)a2 + 5);
  uint64_t v8 = *((void *)a2 + 6);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v10 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = v9;
  *((void *)this + 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

std::string *std::allocate_shared[abi:ne180100]<KnoxbackendData,std::allocator<KnoxbackendData>,std::string &,unsigned long long,std::shared_ptr<unsigned char> const&,unsigned long,void>@<X0>(long long *a1@<X1>, std::string::size_type *a2@<X2>, std::string::size_type *a3@<X3>, std::string::size_type *a4@<X4>, void *a5@<X8>)
{
  std::string::size_type v10 = (std::string *)operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<KnoxbackendData>::__shared_ptr_emplace[abi:ne180100]<std::string &,unsigned long long,std::shared_ptr<unsigned char> const&,unsigned long,std::allocator<KnoxbackendData>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_21E381B98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<KnoxbackendData>::__shared_ptr_emplace[abi:ne180100]<std::string &,unsigned long long,std::shared_ptr<unsigned char> const&,unsigned long,std::allocator<KnoxbackendData>,0>(std::string *a1, long long *a2, std::string::size_type *a3, std::string::size_type *a4, std::string::size_type *a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26CF46F80;
  KnoxbackendData::KnoxbackendData(a1 + 1, a2, *a3, a4, *a5);
  return a1;
}

void sub_21E381BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<KnoxbackendData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF46F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KnoxbackendData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF46F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_emplace<KnoxbackendData>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<KnoxbackendData,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void readSynchronizer::readSynchronizer(Backend *a1, void *a2)
{
  BackendInternalBackend::BackendInternalBackend(a1, a2);
  *(void *)uint64_t v2 = &unk_26CF46FD0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + ++*(_DWORD *)(this + 56) = 0u;
  resources = system_properties::get_resources((system_properties *)v2);
  int v4 = *((_DWORD *)resources + 2);
  if (v4 == 1)
  {
    int v5 = ((uint64_t (*)(void))*resources)();
  }
  else
  {
    if (v4) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    int v5 = *(_DWORD *)resources;
  }
  v6[0] = v5 + 1;
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<ref::Allocator<CurrentReader,unsigned long long>,std::allocator<ref::Allocator<CurrentReader,unsigned long long>>,unsigned int,int,void>((uint64_t)&v8, v6, &v7);
}

void sub_21E381EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset(v13);
  readSynchronizer::readSynchronizer((uint64_t)v12);
  BackendInternalBackend::~BackendInternalBackend(v12);
  _Unwind_Resume(a1);
}

atomic_ullong *ref::Allocator<CurrentReader,unsigned long long>::allocate@<X0>(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v15 = 0;
  std::string::size_type v16 = a2;
  ref::Allocator<CurrentReader,unsigned long long>::add_tag(a1, a2, a3, &v13);
  if (v13 && !*(unsigned char *)(v13 + 312) || v13 && *(unsigned char *)(v13 + 312))
  {
LABEL_17:
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v13, 0), a4);
    return ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v13);
  }
  if (*(unsigned char *)(a1 + 704) && v14 != (void *)(a1 + 728))
  {
    do
    {
      ref::Allocator<CurrentReader,unsigned long long>::allocate_from_empty_pool(a1, (uint64_t)a2, &v11);
      uint64_t v15 = v11;
      ref::tagged_ptr<CurrentReader,unsigned long long>::operator=((atomic_ullong *)&v13, &v12);
      ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v12);
      if (v13)
      {
        if (!*(unsigned char *)(v13 + 312)) {
          break;
        }
      }
      unint64_t min = (unint64_t *)ref::Allocator<CurrentReader,unsigned long long>::extract_min((void *)a1);
      if (min)
      {
        uint64_t v15 = min;
        ref::Allocator<CurrentReader,unsigned long long>::insert_elem(a1, min, (uint64_t)a2, (unint64_t *)&v11);
        ref::tagged_ptr<CurrentReader,unsigned long long>::operator=((atomic_ullong *)&v13, (atomic_ullong *)&v11);
        ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v11);
        break;
      }
    }
    while (*(unsigned char *)(a1 + 704));
    std::mutex::lock((std::mutex *)(a1 + 744));
    char v8 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *&>((uint64_t **)(a1 + 720), v14, (unint64_t *)&v16, (uint64_t *)&v16, (uint64_t *)&v15);
    if (!v9) {
      void v8[5] = (uint64_t)v15;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
    std::mutex::unlock((std::mutex *)(a1 + 744));
    ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
    goto LABEL_17;
  }
  *a4 = 0;
  return ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v13);
}

void sub_21E3820B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

atomic_ullong *ref::tagged_ptr<CurrentReader,unsigned long long>::operator=(atomic_ullong *a1, atomic_ullong *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = atomic_exchange(a2, 0);
    ref::tagged_ptr<CurrentReader,unsigned long long>::reset(a1);
    atomic_store(v3, (unint64_t *)a1);
  }
  return a1;
}

uint64_t ref::tagged_ptr<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char>,unsigned long long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return ref::details::ctrl_blk<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char>,unsigned long long>(*a1, a2, a3);
}

void sub_21E38215C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E382184(_Unwind_Exception *a1)
{
}

atomic_ullong *readSynchronizer::get_reader_ptr@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (ref::details **)a2[3];
  int v7 = *(unint64_t ***)(a1 + 40);
  char v8 = *v7;
  char v9 = v7[1];
  while (v8 != v9)
  {
    ref::tagged_weak_ptr<CurrentReader,unsigned long long>::lock_if_tag(v8, (uint64_t)v6, (unint64_t *)&v23);
    if (v23 && !*(unsigned char *)(v23 + 312))
    {
      ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr((unint64_t *)&v21, (unint64_t *)&v23);
      uint64_t v22 = -2;
      *(void *)a3 = 0;
      atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
      *(_DWORD *)(a3 + 8) = v22;
      ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v21);
      return ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v23);
    }
    ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v23);
    ++v8;
  }
  ref::Allocator<CurrentReader,unsigned long long>::allocate(*(void *)(a1 + 56), v6, 1, (unint64_t *)&v23);
  if (v23 && (unsigned int v10 = atomic_load((unsigned int *)(v23 + 24)), v10 == 2))
  {
    ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr((unint64_t *)&v21, (unint64_t *)&v23);
    uint64_t v22 = -2;
    *(void *)a3 = 0;
    atomic_store(atomic_exchange(&v21, 0), (unint64_t *)a3);
    *(_DWORD *)(a3 + 8) = v22;
    ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v21);
  }
  else
  {
    uint64_t v21 = a2[3];
    ref::tagged_ptr<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char> const&,unsigned long long>(&v23, a2, &v21);
    AEAContext v11 = *(unint64_t ***)(a1 + 40);
    atomic_ullong v12 = *v11;
    unint64_t v13 = v11[1];
    if (*v11 == v13)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      do
      {
        unint64_t v15 = atomic_load(v12);
        if (!v15) {
          goto LABEL_13;
        }
LABEL_12:
        if (*(void *)(v15 + 32) == -2)
        {
LABEL_13:
          while (1)
          {
            unint64_t v16 = atomic_load((unint64_t *)&v23);
            unint64_t v17 = v15;
            atomic_compare_exchange_strong((atomic_ullong *volatile)v12, &v17, v16);
            if (v17 == v15) {
              break;
            }
            unint64_t v15 = v17;
            if (v17) {
              goto LABEL_12;
            }
          }
          ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr((unint64_t *)&v21, (unint64_t *)&v23);
        }
        else
        {
          uint64_t v21 = 0;
          atomic_store(0, (unint64_t *)&v21);
        }
        if (v21) {
          int v18 = *(unsigned __int8 *)(v21 + 312) == 0;
        }
        else {
          int v18 = 0;
        }
        if (v23) {
          int v19 = *(unsigned __int8 *)(v23 + 312) == 0;
        }
        else {
          int v19 = 0;
        }
        ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v21);
        if (v18 == v19) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v12 != v13);
    }
    ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr((unint64_t *)a3, (unint64_t *)&v23);
    *(_DWORD *)(a3 + 8) = v14;
  }
  return ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v23);
}

void sub_21E3823D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

unint64_t *ref::tagged_weak_ptr<CurrentReader,unsigned long long>::lock_if_tag@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr(&v8, v6, 1);
    if (v8 && !*(unsigned char *)(v8 + 312))
    {
      uint64_t v7 = *(void *)(v8 + 32);
      *a3 = 0;
      if (v7 == a2) {
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v8, 0), a3);
      }
    }
    else
    {
      *a3 = 0;
    }
    return (unint64_t *)ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t ref::tagged_ptr<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char> const&,unsigned long long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return ref::details::ctrl_blk<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char> const&,unsigned long long>(*a1, a2, a3);
}

void sub_21E3824EC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (*(void *)(v2 + 256)) {
      std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(v2 + 232, v2);
    }
  }
  __cxa_rethrow();
}

void sub_21E382514(_Unwind_Exception *a1)
{
}

uint64_t readSynchronizer::try_copy(uint64_t a1, uint64_t *a2, int *a3, void **a4)
{
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v4 = *a2 + 40;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 140));
  if (v5)
  {
    uint64_t v7 = *(unsigned char *)(*a2 + 192) ? *a2 + 40 : 0;
    size_t v8 = atomic_load((unsigned int *)(v7 + 144));
    *a3 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      char v9 = *a4;
      if (*(unsigned char *)(*a2 + 192)) {
        uint64_t v10 = *a2 + 40;
      }
      else {
        uint64_t v10 = 0;
      }
      AEAContext v11 = *(const void **)v10;
      atomic_ullong v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v9, v11, *a3);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      else
      {
        memcpy(v9, v11, v8);
      }
      uint64_t v13 = *a2;
      if (*a2)
      {
        if (*(unsigned char *)(v13 + 192)) {
          v13 += 40;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(v13 + 136), 0xFFFFFFFF);
    }
  }
  return v5 & 1;
}

void readSynchronizer::try_notify(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v3 + 192)) {
      v3 += 40;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v4 = (std::mutex *)(v3 + 72);
  std::mutex::lock((std::mutex *)(v3 + 72));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v5 = *a2 + 40;
  }
  else {
    uint64_t v5 = 0;
  }
  if (atomic_load((unsigned int *)(v5 + 136)))
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      if (*(unsigned char *)(v7 + 192)) {
        v7 += 40;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 24));
  }
  std::mutex::unlock(v4);
}

uint64_t readSynchronizer::_read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v6 + 192)) {
      v6 += 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v7 = (std::mutex *)(v6 + 72);
  std::mutex::lock((std::mutex *)(v6 + 72));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), a3);
  uint64_t v9 = v8;
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v10 = *a2 + 40;
  }
  else {
    uint64_t v10 = 0;
  }
  atomic_store(v8, (unsigned int *)(v10 + 144));
  if (*(unsigned char *)(*a2 + 192)) {
    uint64_t v11 = *a2 + 40;
  }
  else {
    uint64_t v11 = 0;
  }
  atomic_store(1u, (unsigned __int8 *)(v11 + 140));
  std::mutex::unlock(v7);
  return v9;
}

void sub_21E382768(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *readSynchronizer::read(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2;
  unsigned int v23 = 0;
  reader_ptr = readSynchronizer::get_reader_ptr(a1, a2, (uint64_t)&v21);
  unint64_t v5 = v22;
  if (v22 != -2)
  {
    uint64_t v11 = readSynchronizer::_read(a1, &v21, (uint64_t)v2);
    unsigned int v23 = v11;
    readSynchronizer::try_notify(v11, &v21);
    if (v5 < (uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 3)
    {
      __lk.__m_ = 0;
      unint64_t v12 = atomic_load((unint64_t *)(a1 + 72));
      atomic_store(v12, (unint64_t *)&__lk);
      atomic_store(atomic_exchange((atomic_ullong *volatile)&__lk, 0), (unint64_t *)(**(void **)(a1 + 40) + 8 * v5));
    }
    if (v21 && *(void *)(v21 + 256)) {
      std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(v21 + 232, v21);
    }
    goto LABEL_35;
  }
  uint64_t v6 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v6 = v21 + 40;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v6 + 136), 1u);
  if (readSynchronizer::try_copy((uint64_t)reader_ptr, &v21, (int *)&v23, (void **)&v2->__vftable)) {
    goto LABEL_35;
  }
  uint64_t v7 = v21;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v7 = v21 + 40;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v7 + 72);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v7 + 72));
  int v9 = readSynchronizer::try_copy(v8, &v21, (int *)&v23, (void **)&v2->__vftable);
  char v10 = v9;
  if (v9)
  {
    uint64_t v2 = (std::__shared_weak_count *)v23;
  }
  else
  {
    uint64_t v13 = v21;
    if (v21)
    {
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v13 = v21 + 40;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    std::condition_variable::wait((std::condition_variable *)(v13 + 24), &__lk);
    if (*(unsigned char *)(v21 + 192)) {
      uint64_t v14 = v21 + 40;
    }
    else {
      uint64_t v14 = 0;
    }
    size_t v15 = atomic_load((unsigned int *)(v14 + 144));
    unsigned int v23 = v15;
    if ((int)v15 >= 1)
    {
      unint64_t v16 = v2->__vftable;
      if (*(unsigned char *)(v21 + 192)) {
        uint64_t v17 = v21 + 40;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(const void **)v17;
      uint64_t v2 = *(std::__shared_weak_count **)(v17 + 8);
      if (v2)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        memcpy(v16, v18, v15);
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      else
      {
        memcpy(v16, v18, v15);
      }
    }
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if ((v10 & 1) == 0) {
LABEL_35:
  }
    uint64_t v2 = (std::__shared_weak_count *)v23;
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v21);
  return v2;
}

void sub_21E382974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)va);
  _Unwind_Resume(a1);
}

double readSynchronizer::construct_context_from_inner@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,readSynchronizer&,std::shared_ptr<Backend> const&,void>(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void readSynchronizer::~readSynchronizer(atomic_ullong *this)
{
  readSynchronizer::~readSynchronizer(this);
  JUMPOUT(0x223C249A0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *this = (atomic_ullong)&unk_26CF46FD0;
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset(this + 9);
  uint64_t v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *this = (atomic_ullong)&unk_26CF3B088;
  uint64_t v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void *readSynchronizer::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"readSynchronizer", 16);
}

void *std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_21E382A84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (v3)
  {
    unint64_t v4 = atomic_load(v3);
    if (!v4)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (atomic_ullong *)v3[37];
    if (v7) {
      v3[38] = atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    if (!ref::details::ctrl_blk<CurrentReader,unsigned long long>::wait_for_ready((uint64_t)v3))
    {
      if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL ref::details::ctrl_blk<CurrentReader,unsigned long long>::wait_for_ready(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }
  else
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 1uLL);
    unsigned int v6 = atomic_load(v2);
    if (v6 != 2 && !*(unsigned char *)(a1 + 312)) {
      std::__atomic_base<ref::details::ctrl_blk<CurrentReader,unsigned long long>::ready_state,false>::wait[abi:ne180100](a1 + 24, 1u, 5u);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v7 = atomic_load((unint64_t *)a1);
    if (v7 < 2)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = atomic_load(v2);
      return v8 == 2;
    }
  }
}

BOOL std::__atomic_base<ref::details::ctrl_blk<CurrentReader,unsigned long long>::ready_state,false>::wait[abi:ne180100](uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  long long v6 = v4;
  return std::__libcpp_thread_poll_with_backoff[abi:ne180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state,std::__cxx_atomic_base_impl<ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>>,ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::ready_state>> &>((uint64_t)&v4, (uint64_t)&v5, 0);
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (!*(unsigned char *)(a1 + 312)
    && (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 == 2)
    && *(unsigned char *)(a1 + 192)
    && (uint64_t v7 = *(void *)(a1 + 288)) != 0)
  {
    int v8 = (a3 >> 1) & 2;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40))
    {
      if ((v3 & 2) == 0)
      {
        if (v3) {
          std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 200, a1, a2, v8 | 1);
        }
        return 0;
      }
      *(void *)&long long v10 = "ref::details::ctrl_blk<CurrentReader, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = CurrentReader, tag_t = unsigned long long]";
      *((void *)&v10 + 1) = 68;
      int v11 = 16;
      di_log::logger<di_log::log_printer<210ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Got error when trying to close ", 31);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" with ret ", 10);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)", Force closing.", 16);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x223C24910](&v14);
    }
  }
  else
  {
    int v8 = (a3 >> 1) & 2;
  }
  atomic_store(0, (unsigned int *)(a1 + 24));
  if (*(unsigned char *)(a1 + 192))
  {
    CurrentReader::~CurrentReader((CurrentReader *)(a1 + 40));
    *(unsigned char *)(a1 + 192) = 0;
  }
  std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(a1 + 200, a1, a2, v8);
  MEMORY[0x223C24800](a1 + 24);
  return 1;
}

void sub_21E382DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  di_log::logger<di_log::log_printer<210ul>>::~logger((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void CurrentReader::~CurrentReader(CurrentReader *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 24));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

atomic_ullong *ref::tagged_ptr<CurrentReader,unsigned long long>::reset(atomic_ullong *a1)
{
  double result = (atomic_ullong *)atomic_exchange(a1, 0);
  if (result)
  {
    if (atomic_fetch_add(result, 0xFFFFFFFFFFFFFFFFLL) == 1)
    {
      uint64_t v2 = result[4];
      result[4] = -1;
      return (atomic_ullong *)ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)result, v2, 1u);
    }
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<ref::Allocator<CurrentReader,unsigned long long>,std::allocator<ref::Allocator<CurrentReader,unsigned long long>>,unsigned int,int,void>(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v5 = operator new(0x580uLL);
  std::__shared_ptr_emplace<ref::Allocator<CurrentReader,unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned int,int,std::allocator<ref::Allocator<CurrentReader,unsigned long long>>,0>(v5, a2, a3);
}

void sub_21E382FB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ref::Allocator<CurrentReader,unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned int,int,std::allocator<ref::Allocator<CurrentReader,unsigned long long>>,0>(void *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF470B0;
  std::construct_at[abi:ne180100]<ref::Allocator<CurrentReader,unsigned long long>,unsigned int,int,ref::Allocator<CurrentReader,unsigned long long>*>((uint64_t)(a1 + 3), a2, a3);
}

void sub_21E383014(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ref::Allocator<CurrentReader,unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF470B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ref::Allocator<CurrentReader,unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26CF470B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void *std::__shared_ptr_emplace<ref::Allocator<CurrentReader,unsigned long long>>::__on_zero_shared(uint64_t a1)
{
  return ref::Allocator<CurrentReader,unsigned long long>::~Allocator(a1 + 24);
}

void std::construct_at[abi:ne180100]<ref::Allocator<CurrentReader,unsigned long long>,unsigned int,int,ref::Allocator<CurrentReader,unsigned long long>*>(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = 0;
  ref::Allocator<CurrentReader,unsigned long long>::Allocator(a1, v3, v4, (uint64_t)v5);
}

void sub_21E38311C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ref::Allocator<CurrentReader,unsigned long long>::Allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(a1);
  *(void *)(v8 + 424) = a2;
  *(void *)(v8 + 432) = a3;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 4++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(void *)(v8 + 488) = 850045863;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 528) = 0u;
  *(void *)(v8 + 544) = 0;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(void *)(v8 + 592) = 850045863;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  *(void *)(v8 + 648) = 0;
  *(void *)(v8 + 6++*(_DWORD *)(this + 56) = 1018212795;
  *(void *)(v8 + 696) = 0;
  *(_OWORD *)(v8 + 680) = 0u;
  *(unsigned char *)(v8 + 704) = 1;
  *(_OWORD *)(v8 + 664) = 0u;
  gcd::gcd_queue::gcd_queue(v8 + 712, "dealloc_queue", 2);
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = a1 + 728;
  *(void *)(a1 + 744) = 850045863;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 808) = 1018212795;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 56) = 850045863;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 920) = a1 + 920;
  *(void *)(a1 + 928) = a1 + 920;
  *(void *)(a1 + 936) = 0;
  std::__function::__value_func<int ()(CurrentReader &)>::__value_func[abi:ne180100](a1 + 944, a4);
  ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(a1 + 976, a1);
  *(void *)(a1 + 1320) = &unk_26CF473B0;
  *(void *)(a1 + 1328) = a1;
  *(void *)(a1 + 1344) = a1 + 1320;
  *(void *)(a1 + 1352) = &unk_26CF47440;
  *(void *)(a1 + 1360) = a1;
  *(void *)(a1 + 1376) = a1 + 1352;
  operator new[]();
}

void sub_21E383370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, std::condition_variable *a12, NSObject **a13)
{
  std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100](a10);
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 808));
  std::mutex::~mutex((std::mutex *)(v13 + 744));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(v13 + 720, *a11);
  gcd::gcd_group::~gcd_group(a13);
  std::condition_variable::~condition_variable(a12);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 488));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v14);
  ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::emplace_back<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  unint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

uint64_t ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::~tagged_allocated_type(uint64_t a1)
{
  return a1;
}

uint64_t ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::error_ctrl_blk_t(uint64_t a1)
{
  *(void *)a1 = &unk_26CF47100;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = &unk_26CF47190;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = a1 + 32;
  *(void *)(a1 + 64) = &unk_26CF47220;
  *(void *)(a1 + 88) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  uint64_t v2 = ref::details::ctrl_blk<CurrentReader,unsigned long long>::ctrl_blk(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::init(v2, -1);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(unsigned char *)(a1 + 416) = 1;
  return a1;
}

void sub_21E383604(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ref::details::ctrl_blk<CurrentReader,unsigned long long>::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 312) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0, (unint64_t *)(a1 + 8));
  atomic_store(0, (unint64_t *)(a1 + 16));
  if (*(unsigned char *)(a1 + 192))
  {
    CurrentReader::~CurrentReader((CurrentReader *)(a1 + 40));
    *(unsigned char *)(a1 + 192) = 0;
  }
  uint64_t v3 = *(atomic_ullong **)(a1 + 296);
  if (v3) {
    *(void *)(a1 + 304) = atomic_fetch_add_explicit(v3, 1uLL, memory_order_relaxed);
  }
  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26CF47100;
  return result;
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF47100;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26CF47190;
  return result;
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF47190;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target_type()
{
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26CF47220;
  return result;
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26CF47220;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::{lambda(CurrentReader&)#1}>,int ()(CurrentReader&)>::target_type()
{
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::ctrl_blk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](a1 + 200, a2);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__value_func[abi:ne180100](a1 + 232, a3);
  std::__function::__value_func<int ()(CurrentReader &)>::__value_func[abi:ne180100](a1 + 264, a4);
  *(void *)(a1 + 296) = a5;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  return a1;
}

void sub_21E383994(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v3);
  if (*(unsigned char *)(v1 + 192)) {
    CurrentReader::~CurrentReader(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::~ctrl_blk(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {
    CurrentReader::~CurrentReader((CurrentReader *)(a1 + 40));
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<int ()(CurrentReader &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  v5[0] = &unk_26CF472B0;
  v5[1] = a1;
  double v5[3] = v5;
  v4[0] = &unk_26CF47330;
  v4[1] = a1;
  double v4[3] = v4;
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::ctrl_blk(a1 + 8, (uint64_t)v5, (uint64_t)v4, a2 + 944, a2 + 568);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](v5);
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_21E383DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26CF472B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF472B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return std::function<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(**(void **)(a1 + 8) + 1320, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48))(v4, &v7, &v6, &v8);
}

void std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26CF47330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF47330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(uint64_t a1)
{
  return std::function<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(**(void **)(a1 + 8) + 1352, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::tagged_allocated_type(ref::Allocator<CurrentReader,unsigned long long> &)::{lambda(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target_type()
{
}

uint64_t std::function<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26CF473B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF473B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::target_type()
{
}

void ref::Allocator<CurrentReader,unsigned long long>::deleter(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if (*(_DWORD *)(a2 + 336)) {
    return;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v7 = (std::mutex *)(a1 + 856);
    std::mutex::lock((std::mutex *)(a1 + 856));
    int v8 = operator new(0x20uLL);
    _OWORD v8[2] = a2;
    v8[3] = a3;
    uint64_t v9 = *(void *)(a1 + 920);
    *int v8 = v9;
    v8[1] = a1 + 920;
    *(void *)(v9 + 8) = v8;
    *(void *)(a1 + 920) = v8;
    ++*(void *)(a1 + 936);
    atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 4u);
    tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v10);
    std::mutex::lock(tagged_ptr_lock);
    uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v12);
    std::condition_variable::notify_all(tagged_ptr_cond);
    std::mutex::unlock(tagged_ptr_lock);
LABEL_14:
    std::mutex::unlock(v7);
    return;
  }
  ref::Allocator<CurrentReader,unsigned long long>::delete_tag(a1, a3);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)(a2 + 328));
  if ((atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 1u) & 2) == 0) {
    ref::Allocator<CurrentReader,unsigned long long>::add_to_free_pool(a1, a2);
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (atomic_load((unint64_t *)(a1 + 584)))
    {
      std::mutex::lock((std::mutex *)(a1 + 592));
      if (atomic_load((unint64_t *)(a1 + 584))) {
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 656));
      }
      std::mutex::unlock((std::mutex *)(a1 + 592));
    }
  }
  uint64_t v17 = (unint64_t *)(a1 + 560);
  if (atomic_load(v17))
  {
    uint64_t v7 = (std::mutex *)ref::details::_get_tagged_ptr_lock(a2, v14);
    std::mutex::lock(v7);
    if (atomic_load(v17))
    {
      uint64_t v21 = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v19);
      std::condition_variable::notify_all(v21);
    }
    goto LABEL_14;
  }
}

void sub_21E3842C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<CurrentReader,unsigned long long>::delete_tag(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 744);
  std::mutex::lock((std::mutex *)(a1 + 744));
  std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *>>>::__erase_unique<unsigned long long>(a1 + 720, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
  std::mutex::unlock(v3);
}

void sub_21E384348(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ref::Allocator<CurrentReader,unsigned long long>::add_to_free_pool(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::push_back((void *)(a1 + 440), &v4);
  std::mutex::unlock(v3);
}

void sub_21E3843A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,std::allocator<ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100](v5, v33);
      stat v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      stat v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21E384710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__func()
{
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26CF47440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26CF47440;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(uint64_t a1, unint64_t *a2, atomic_ullong *a3)
{
}

uint64_t std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1},std::allocator<ref::Allocator<CurrentReader,unsigned long long>::{lambda(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)#1}>,void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::target_type()
{
}

void ref::Allocator<CurrentReader,unsigned long long>::deallocate(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 552);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8;
      if (v7 + v6 >= v8) {
        return;
      }
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = (atomic_ullong *)(v7 + v6);
      unint64_t v10 = a2;
      atomic_compare_exchange_strong(v9, &v10, 0);
      if (v10 == a2)
      {
        ref::Allocator<CurrentReader,unsigned long long>::drop_elem(a1, a2, 1uLL, a3);
        ref::Allocator<CurrentReader,unsigned long long>::add_to_free_pool(a1, a2);
      }
    }
  }
}

uint64_t ref::Allocator<CurrentReader,unsigned long long>::drop_elem(uint64_t a1, unint64_t a2, unint64_t a3, atomic_ullong *a4)
{
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 576), 1uLL);
  if (a3) {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
  }
  atomic_fetch_or((atomic_uint *volatile)(a2 + 336), 2u);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)(a2 + 328));
  if (a4) {
    ref::tagged_ptr<CurrentReader,unsigned long long>::reset(a4);
  }
  if (a3)
  {
    char v8 = atomic_load((unsigned int *)(a2 + 336));
    if ((v8 & 4) == 0)
    {
      uint64_t v9 = a3 & 0x100;
      uint64_t v10 = (a3 >> 8) & 1;
      uint64_t v11 = (a3 >> 16) & 1;
      do
      {
        if (*(_DWORD *)(a2 + 336)) {
          break;
        }
        if (v10)
        {
          std::mutex::lock((std::mutex *)(a1 + 488));
          uint64_t v12 = *(void *)(a1 + 480);
          std::mutex::unlock((std::mutex *)(a1 + 488));
          if (v12) {
            break;
          }
        }
        if (ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list(a1, v11, 0, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond(a2, v20);
          v22.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v29 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = v22.__d_.__rep_ + 200000;
          unint64_t v26 = a2;
          char v27 = v10;
          *(_DWORD *)uint64_t v28 = *(_DWORD *)v32;
          *(_DWORD *)&v28[3] = *(_DWORD *)&v32[3];
          std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<CurrentReader,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::Allocator<CurrentReader,unsigned long long>::drop_elem_options,ref::tagged_ptr<CurrentReader,unsigned long long> *)::{lambda(void)#1}>(tagged_ptr_cond, &__lk, &v30, (uint64_t)&v26);
        }
        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock(a2, v13);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v15 = ref::details::_get_tagged_ptr_cond(a2, v14);
          char v16 = atomic_load((unsigned int *)(a2 + 336));
          if ((v16 & 4) == 0)
          {
            uint64_t v17 = (std::condition_variable *)v15;
            do
            {
              if (*(_DWORD *)(a2 + 336)) {
                break;
              }
              if (v10)
              {
                std::mutex::lock((std::mutex *)(a1 + 488));
                uint64_t v18 = *(void *)(a1 + 480);
                std::mutex::unlock((std::mutex *)(a1 + 488));
                if (v18) {
                  break;
                }
              }
              std::condition_variable::wait(v17, &__lk);
              char v19 = atomic_load((unsigned int *)(a2 + 336));
            }
            while ((v19 & 4) == 0);
          }
        }
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        int v23 = *(_DWORD *)(a2 + 336);
        if (!v9 || (v23 & 1) != 0)
        {
          if (v23) {
            break;
          }
        }
        else if (*(void *)(a1 + 480))
        {
          break;
        }
        char v24 = atomic_load((unsigned int *)(a2 + 336));
      }
      while ((v24 & 4) == 0);
    }
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
  }
  return atomic_fetch_and((atomic_uint *volatile)(a2 + 336), 0xFFFFFFFD) & 1;
}

void sub_21E384B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 936)) {
    return 0;
  }
  uint64_t v18 = (std::mutex *)(a1 + 856);
  std::mutex::lock((std::mutex *)(a1 + 856));
  if (*(void *)(a1 + 936))
  {
    char v8 = *(uint64_t **)(a1 + 928);
    if (v8 == (uint64_t *)(a1 + 920))
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1;
      do
      {
        unint64_t v12 = v8[2];
        if ((ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val(v12 + 8, v8[3], v10) | a2) == 1)
        {
          tagged_ptr_lock = (std::mutex *)ref::details::_get_tagged_ptr_lock(v12, v13);
          std::mutex::lock(tagged_ptr_lock);
          atomic_fetch_and((atomic_uint *volatile)(v12 + 336), 0xFFFFFFFB);
          std::mutex::unlock(tagged_ptr_lock);
          uint64_t v15 = *v8;
          char v16 = (uint64_t *)v8[1];
          *(void *)(v15 + 8) = v16;
          *(void *)v8[1] = v15;
          --*(void *)(a1 + 936);
          operator delete(v8);
          char v8 = v16;
        }
        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          char v8 = (uint64_t *)v8[1];
        }
      }
      while (v8 != (uint64_t *)(a1 + 920));
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v18);
  return v11;
}

void sub_21E384C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t std::condition_variable::wait_until<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>,ref::Allocator<CurrentReader,unsigned long long>::drop_elem(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::Allocator<CurrentReader,unsigned long long>::drop_elem_options,ref::tagged_ptr<CurrentReader,unsigned long long> *)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 336));
    if ((v9 & 4) != 0) {
      return 1;
    }
    if (*(_DWORD *)(*(void *)a4 + 336)) {
      return 1;
    }
    if (*(unsigned char *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 488);
      std::mutex::lock((std::mutex *)(v8 + 488));
      uint64_t v11 = *(void *)(v8 + 480);
      std::mutex::unlock(v10);
      if (v11) {
        return 1;
      }
    }
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0;
      goto LABEL_14;
    }
    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09)
      {
        v14.__d_.__rep_ = 0x8000000000000000;
        goto LABEL_14;
      }
    }
    else if ((unint64_t)v13 > 0x20C49BA5E353F7)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }
  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 336));
  if (v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 336)) {
    return 1;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    return 0;
  }
  std::mutex::lock((std::mutex *)(v15 + 488));
  BOOL v17 = *(void *)(v15 + 480) != 0;
  std::mutex::unlock((std::mutex *)(v15 + 488));
  return v17;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 13);
  if (atomic_fetch_add(a1 + 13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v3 = a1[17];
    a1[17] = -1;
    ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)(a1 + 13), v3, 1u);
  }
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::~ctrl_blk(v2);
  std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100](a1);
}

void *std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *ref::Allocator<CurrentReader,unsigned long long>::~Allocator(uint64_t a1)
{
  *(unsigned char *)(a1 + 704) = 0;
  if (*(void *)(a1 + 424))
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v3), 0);
      if (v4)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000 | 0x10001;
        ref::Allocator<CurrentReader,unsigned long long>::drop_elem(a1, v4, v1, 0);
        ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)(v4 + 328));
        ref::details::ctrl_blk<CurrentReader,unsigned long long>::~ctrl_blk(v4 + 8);
        MEMORY[0x223C249A0](v4, 0x1072C408B028EDDLL);
      }
      ++v3;
    }
    while (*(void *)(a1 + 424) > v3);
  }
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(a1 + 712), &__block_literal_global_9);
  uint64_t v5 = *(void *)(a1 + 552);
  if (v5) {
    MEMORY[0x223C24980](v5, 0x20C8093837F09);
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v6 = *(void *)(a1 + 448);
  if (*(void *)(a1 + 456) != v6)
  {
    unint64_t v7 = *(void *)(a1 + 472);
    uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
    char v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    uint64_t v10 = *(void *)(v6 + (((*(void *)(a1 + 480) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 480) + v7) & 0x1FF);
    while (v9 != (uint64_t *)v10)
    {
      uint64_t v11 = *v9;
      if (*v9)
      {
        ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)(v11 + 328));
        ref::details::ctrl_blk<CurrentReader,unsigned long long>::~ctrl_blk(v11 + 8);
        MEMORY[0x223C249A0](v11, 0x1072C408B028EDDLL);
      }
      if ((uint64_t *)((char *)++v9 - *v8) == (uint64_t *)4096)
      {
        std::chrono::system_clock::time_point v12 = (uint64_t *)v8[1];
        ++v8;
        char v9 = v12;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 488));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::~__value_func[abi:ne180100]((void *)(a1 + 1352));
  std::__function::__value_func<void ()(ref::details::tagged_allocated_type<CurrentReader,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::~__value_func[abi:ne180100]((void *)(a1 + 1320));
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)(a1 + 1304));
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::~ctrl_blk(a1 + 984);
  std::__function::__value_func<int ()(CurrentReader &)>::~__value_func[abi:ne180100]((void *)(a1 + 944));
  std::__list_imp<std::pair<ref::details::tagged_allocated_type<di_asif::details::table,unsigned long long> *,unsigned long long>>::clear((void *)(a1 + 920));
  std::mutex::~mutex((std::mutex *)(a1 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 808));
  std::mutex::~mutex((std::mutex *)(a1 + 744));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy(a1 + 720, *(void **)(a1 + 728));
  gcd::gcd_group::~gcd_group((NSObject **)(a1 + 712));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 592));
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)(a1 + 440));
  return ref::Allocator<CurrentReader,unsigned long long>::error_ctrl_blk_t::~error_ctrl_blk_t((void *)a1);
}

void std::shared_ptr<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::shared_ptr[abi:ne180100]<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21E3852AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>> *,std::shared_ptr<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::__shared_ptr_default_delete<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>,std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>,std::allocator<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C249A0);
}

void std::__shared_ptr_pointer<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>> *,std::shared_ptr<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::__shared_ptr_default_delete<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>,std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>,std::allocator<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>> *,std::shared_ptr<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::__shared_ptr_default_delete<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>,std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>,std::allocator<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<ref::tagged_weak_ptr<CurrentReader,unsigned long long>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x223C249A0);
  }
}

void ref::Allocator<CurrentReader,unsigned long long>::add_tag(uint64_t a1@<X0>, ref::details **a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v42 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 744);
  uint64_t v8 = (void *)(a1 + 728);
  char v9 = (uint64_t **)(a1 + 720);
  uint64_t v10 = (ref::details *)(a1 + 976);
  uint64_t v36 = (unint64_t *)(a1 + 104);
  uint64_t v37 = (std::condition_variable *)(a1 + 808);
  do
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v42;
    }
    else
    {
      uint64_t v15 = (void *)*v8;
      if (!*v8) {
        goto LABEL_18;
      }
      uint64_t v11 = v42;
      char v16 = v8;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= (unint64_t)v42;
        if (v17 >= (unint64_t)v42) {
          char v19 = v15;
        }
        else {
          char v19 = v15 + 1;
        }
        if (v18) {
          char v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v8 || (unint64_t)v42 < v16[4] || (ref::details *)v16[5] == v10)
      {
LABEL_18:
        uint64_t v43 = 0;
        *a4 = 0;
        a4[1] = (unint64_t)v8;
        atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
        ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v43);
        goto LABEL_19;
      }
    }
    uint64_t v43 = v11;
    int v44 = (unint64_t *)v10;
    std::chrono::system_clock::time_point v12 = std::__tree<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,ref::details::tagged_allocated_type<di_asif::details::map_element,unsigned long long> *>>(v9, (unint64_t *)&v43, (uint64_t *)&v43);
    uint64_t v13 = v12;
    if (v14)
    {
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v12;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_19:
      int v20 = 1;
      goto LABEL_20;
    }
    uint64_t v40 = (ref::details *)v12[5];
    if (v40 != v10)
    {
      std::unique_lock<std::mutex>::unlock(&__lk);
      ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr(&v39, (unint64_t *)v40 + 41);
      if (v39 && !*(unsigned char *)(v39 + 312))
      {
        uint64_t v21 = (uint64_t)v42;
        if (*(ref::details ***)(v39 + 32) == v42)
        {
          *a4 = 0;
          a4[1] = (unint64_t)v13;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v39, 0), a4);
          goto LABEL_66;
        }
        if (*(void *)(v39 + 32) != -1 || (a3 & 1) != 0)
        {
LABEL_30:
          if (ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list(a1, 0, v21, 1u) != -1)
          {
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 1uLL);
            v38.__m_ = (std::unique_lock<std::mutex>::mutex_type *)ref::details::_get_tagged_ptr_lock((unint64_t)v40, v22);
            v38.__owns_ = 1;
            std::mutex::lock(v38.__m_);
            uint64_t tagged_ptr_cond = (std::condition_variable *)ref::details::_get_tagged_ptr_cond((unint64_t)v40, v23);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
            uint64_t v43 = &v40;
            int v44 = &v39;
            uint64_t v45 = &v42;
            std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<CurrentReader,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(tagged_ptr_cond, &v38, &v46, (uint64_t)&v43);
            atomic_fetch_add((atomic_ullong *volatile)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL);
            if (v38.__owns_) {
              std::mutex::unlock(v38.__m_);
            }
            int v20 = 3;
            goto LABEL_67;
          }
          uint64_t v43 = 0;
          unint64_t v33 = atomic_load(v36);
          if (v33)
          {
            unint64_t v34 = v33;
            while (1)
            {
              atomic_compare_exchange_strong((atomic_ullong *volatile)v36, &v34, v33 + 1);
              if (v34 == v33) {
                break;
              }
              unint64_t v33 = v34;
              if (!v34) {
                goto LABEL_65;
              }
            }
            stat v35 = *(atomic_ullong **)(a1 + 400);
            unint64_t v34 = (unint64_t)v36;
            if (v35)
            {
              *(void *)(a1 + 408) = atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
              unint64_t v34 = (unint64_t)v36;
            }
          }
          else
          {
            unint64_t v34 = 0;
          }
LABEL_65:
          atomic_store(v34, (unint64_t *)&v43);
          *a4 = 0;
          a4[1] = (unint64_t)v8;
          atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
          ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v43);
LABEL_66:
          int v20 = 1;
LABEL_67:
          ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v39);
          goto LABEL_20;
        }
      }
      else if (a3)
      {
        uint64_t v21 = (uint64_t)v42;
        goto LABEL_30;
      }
      uint64_t v43 = 0;
      *a4 = 0;
      a4[1] = (unint64_t)v8;
      atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
      ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v43);
      goto LABEL_66;
    }
    unint64_t v25 = (void *)*v8;
    if (*v8)
    {
      unint64_t v26 = v42;
      char v27 = v8;
      while (1)
      {
        unint64_t v28 = v25[4];
        BOOL v29 = v28 >= (unint64_t)v26;
        if (v28 >= (unint64_t)v26) {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = v25;
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = v25 + 1;
        }
        if (v29) {
          char v27 = v25;
        }
        unint64_t v25 = (void *)*v30;
        if (!*v30)
        {
          if (v27 == v8) {
            break;
          }
          if ((unint64_t)v26 < v27[4]) {
            break;
          }
          long long v31 = (ref::details *)v27[5];
          if (v31 != v10)
          {
            uint64_t v32 = *((void *)v31 + 41);
            if (v32)
            {
              if (!*(unsigned char *)(v32 + 312)) {
                break;
              }
            }
          }
          if (!*(unsigned char *)(a1 + 704)) {
            break;
          }
          std::condition_variable::wait(v37, &__lk);
          unint64_t v25 = (void *)*v8;
          char v27 = v8;
          if (!*v8) {
            break;
          }
        }
      }
    }
    int v20 = 0;
LABEL_20:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v20 == 1) {
      return;
    }
  }
  while (*(unsigned char *)(a1 + 704));
  uint64_t v43 = 0;
  *a4 = 0;
  a4[1] = (unint64_t)v8;
  atomic_store(atomic_exchange((atomic_ullong *volatile)&v43, 0), a4);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v43);
}

void sub_21E38578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, atomic_ullong a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

atomic_ullong *ref::Allocator<CurrentReader,unsigned long long>::allocate_from_empty_pool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  atomic_ullong v11 = 0;
  uint64_t v6 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(*(void *)(*(void *)(a1 + 448) + ((*(void *)(a1 + 472) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a1 + 472) & 0x1FFLL));
    ++*(void *)(a1 + 472);
    *(void *)(a1 + 480) = v7 - 1;
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100](a1 + 440, 1);
    ref::Allocator<CurrentReader,unsigned long long>::insert_elem(a1, v8, a2, v12);
    ref::tagged_ptr<CurrentReader,unsigned long long>::operator=(&v11, (atomic_ullong *)v12);
    ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)v12);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 576));
  if (v9 + v7 >= *(void *)(a1 + 432))
  {
    ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list(a1, 0, 0, 0);
  }
  else
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    void v12[2] = (unint64_t)___ZN3ref9AllocatorI13CurrentReaderyE9evict_lruEv_block_invoke;
    void v12[3] = (unint64_t)&__block_descriptor_tmp_154;
    void v12[4] = a1;
    gcd::gcd_queue::async((dispatch_queue_t *)(a1 + 712), v12);
  }
  *a3 = v8;
  a3[1] = 0;
  atomic_store(atomic_exchange(&v11, 0), (unint64_t *)a3 + 1);
  return ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v11);
}

void sub_21E385954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_ullong a9)
{
  std::mutex::unlock(v9);
  ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&a9);
  _Unwind_Resume(a1);
}

unint64_t ref::Allocator<CurrentReader,unsigned long long>::extract_min(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 71);
  uint64_t v2 = a1[53];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = a1[69];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 312) != -1)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }
    ++v3;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1[69] + 8 * v4), &v8, 0);
  if (v8 != v5
    || (ref::Allocator<CurrentReader,unsigned long long>::drop_elem((uint64_t)a1, v5, 0x101uLL, 0) & 1) == 0)
  {
    return 0;
  }
  return v5;
}

atomic_ullong *ref::Allocator<CurrentReader,unsigned long long>::insert_elem@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::mark_used((uint64_t)a2, a3);
  uint64_t v7 = (atomic_ullong *)(a2 + 1);
  unint64_t v14 = 0;
  unint64_t v8 = atomic_load(a2 + 1);
  if (v8)
  {
    unint64_t v9 = v8;
    while (1)
    {
      atomic_compare_exchange_strong(v7, &v9, v8 + 1);
      if (v9 == v8) {
        break;
      }
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = (atomic_ullong *)a2[38];
    if (v10) {
      a2[39] = atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  atomic_store((unint64_t)v7, &v14);
  if (*(void *)(a1 + 424))
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 552) + 8 * v11), (unint64_t *)&v12, (unint64_t)a2);
      if (!v12) {
        break;
      }
      if (*(void *)(a1 + 424) <= (unint64_t)++v11) {
        goto LABEL_12;
      }
    }
    *a4 = 0;
    atomic_store(atomic_exchange((atomic_ullong *volatile)&v14, 0), a4);
  }
  else
  {
LABEL_12:
    *a4 = 0;
  }
  return ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v14);
}

unint64_t *ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = (atomic_ullong *)a2;
  *a1 = 0;
  if (a2)
  {
    unint64_t v5 = atomic_load(a2);
    if (!v5)
    {
LABEL_6:
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    unint64_t v6 = v5;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a2, &v6, v5 + 1);
      if (v6 == v5) {
        break;
      }
      unint64_t v5 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
    unint64_t v8 = (atomic_ullong *)a2[37];
    if (v8) {
      a2[38] = atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    if (a3 && !ref::details::ctrl_blk<CurrentReader,unsigned long long>::wait_for_ready((uint64_t)a2))
    {
      if (atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v3[4];
        v3[4] = -1;
        ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)v3, v9, 1u);
      }
      goto LABEL_6;
    }
  }
LABEL_7:
  atomic_store((unint64_t)v3, a1);
  return a1;
}

BOOL std::condition_variable::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>,ref::Allocator<CurrentReader,unsigned long long>::add_tag(unsigned long long,BOOL)::{lambda(void)#1}>(std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if (*(_DWORD *)(**(void **)a4 + 336)) {
      return 1;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(unsigned char *)(*(void *)v8 + 312) && *(void *)(*(void *)v8 + 32) == **(void **)(a4 + 16)) {
        return 1;
      }
    }
    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
            goto LABEL_17;
          }
        }
        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
      }
LABEL_15:
      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_17:
      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if (*(_DWORD *)(**(void **)a4 + 336)) {
    return 1;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(unsigned char *)(*(void *)v14 + 312)
      && *(void *)(*(void *)v14 + 32) == **(void **)(a4 + 16);
}

uint64_t ___ZN3ref9AllocatorI13CurrentReaderyE9evict_lruEv_block_invoke(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t min = ref::Allocator<CurrentReader,unsigned long long>::extract_min(v1);
  if (min) {
    ref::Allocator<CurrentReader,unsigned long long>::add_to_free_pool((uint64_t)v1, min);
  }
  return ref::Allocator<CurrentReader,unsigned long long>::run_failed_dtors_list((uint64_t)v1, 0, 0, 0);
}

atomic_ullong *ref::details::tagged_allocated_type<CurrentReader,unsigned long long>::mark_used(uint64_t a1, uint64_t a2)
{
  atomic_store(0, (unsigned int *)(a1 + 336));
  uint64_t v3 = (unint64_t *)(a1 + 8);
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::init(a1 + 8, a2);
  unint64_t v9 = 0;
  unint64_t v4 = atomic_load(v3);
  if (v4)
  {
    unint64_t v5 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v5, v4 + 1);
      if (v5 == v4) {
        break;
      }
      unint64_t v4 = v5;
      if (!v5) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = *(atomic_ullong **)(a1 + 304);
    unint64_t v5 = (unint64_t)v3;
    if (v6)
    {
      *(void *)(a1 + 312) = atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
      unint64_t v5 = (unint64_t)v3;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
LABEL_9:
  atomic_store(v5, &v9);
  ref::tagged_ptr<CurrentReader,unsigned long long>::operator=((atomic_ullong *)(a1 + 328), (atomic_ullong *)&v9);
  double result = ref::tagged_ptr<CurrentReader,unsigned long long>::reset((atomic_ullong *)&v9);
  if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1;
    return (atomic_ullong *)ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)v3, v8, 1u);
  }
  return result;
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char>,unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  std::optional<CurrentReader>::emplace[abi:ne180100]<std::shared_ptr<char>,unsigned long long,void>((CurrentReader *)(a1 + 40), a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<CurrentReader,unsigned long long>::notify_ready(a1);
}

void sub_21E385EBC(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E385EE0(_Unwind_Exception *a1)
{
}

CurrentReader *std::optional<CurrentReader>::emplace[abi:ne180100]<std::shared_ptr<char>,unsigned long long,void>(CurrentReader *this, uint64_t *a2, uint64_t *a3)
{
  if (*((unsigned char *)this + 152))
  {
    CurrentReader::~CurrentReader(this);
    *((unsigned char *)this + 152) = 0;
  }
  std::construct_at[abi:ne180100]<CurrentReader,std::shared_ptr<char>,unsigned long long,CurrentReader*>((uint64_t)this, a2, a3);
  *((unsigned char *)this + 152) = 1;
  return this;
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::notify_ready(uint64_t result)
{
  if (atomic_load((unint64_t *)(result + 8))) {
    return MEMORY[0x223C24800](result + 24);
  }
  return result;
}

uint64_t std::construct_at[abi:ne180100]<CurrentReader,std::shared_ptr<char>,unsigned long long,CurrentReader*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *a3;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t ref::details::ctrl_blk<CurrentReader,unsigned long long>::make_value<std::shared_ptr<char> const&,unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  std::optional<CurrentReader>::emplace[abi:ne180100]<std::shared_ptr<char> const&,unsigned long long,void>((CurrentReader *)(a1 + 40), a2, a3);
  atomic_store(2u, (unsigned int *)(a1 + 24));
  return ref::details::ctrl_blk<CurrentReader,unsigned long long>::notify_ready(a1);
}

void sub_21E386054(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_store(0, (unsigned int *)(v1 + 24));
  *(unsigned char *)(v1 + 312) = 1;
  ref::details::ctrl_blk<CurrentReader,unsigned long long>::notify_ready(v1);
  __cxa_rethrow();
}

void sub_21E386078(_Unwind_Exception *a1)
{
}

CurrentReader *std::optional<CurrentReader>::emplace[abi:ne180100]<std::shared_ptr<char> const&,unsigned long long,void>(CurrentReader *this, uint64_t *a2, uint64_t *a3)
{
  if (*((unsigned char *)this + 152))
  {
    CurrentReader::~CurrentReader(this);
    *((unsigned char *)this + 152) = 0;
  }
  std::construct_at[abi:ne180100]<CurrentReader,std::shared_ptr<char> const&,unsigned long long,CurrentReader*>((uint64_t)this, a2, a3);
  *((unsigned char *)this + 152) = 1;
  return this;
}

uint64_t std::construct_at[abi:ne180100]<CurrentReader,std::shared_ptr<char> const&,unsigned long long,CurrentReader*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v6 = *a3;
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t std::function<void ()(ref::details::ctrl_blk<CurrentReader,unsigned long long> *,ref::tagged_ptr<CurrentReader,unsigned long long> &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,readSynchronizer&,std::shared_ptr<Backend> const&,void>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<readSynchronizer&,std::shared_ptr<Backend> const&,std::allocator<readSynchronizer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_21E386234(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<readSynchronizer&,std::shared_ptr<Backend> const&,std::allocator<readSynchronizer>,0>(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26CF216F0;
  readSynchronizer::readSynchronizer((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_21E386290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t readSynchronizer::readSynchronizer(uint64_t a1, void *a2, void *a3)
{
  BackendInternalBackend::BackendInternalBackend((Backend *)a1, a3);
  *uint64_t v5 = &unk_26CF46FD0;
  uint64_t v6 = a2[6];
  void v5[5] = a2[5];
  v5[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[8];
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = a2[7];
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  ref::tagged_ptr<CurrentReader,unsigned long long>::tagged_ptr((unint64_t *)(a1 + 72), a2 + 9);
  return a1;
}

void sub_21E38632C(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BackendInternalBackend::~BackendInternalBackend(v1);
  _Unwind_Resume(a1);
}

uint64_t sg_vec_ns::details::buffer_iterator::make_value@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(this + 24) == *(void *)(this + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return this;
  }
  uint64_t v3 = **(void **)this + *(void *)(this + 32);
  if (*(void *)(this + 56)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)this + 8);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(this + 64);
  if (v5) {
LABEL_10:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  *(void *)a3 = v3;
  *(void *)(a3 + 8) = v5;
  unint64_t v6 = *(void *)(this + 32);
  unint64_t v7 = *(void *)(*(void *)this + 16) - v6;
  if (v7 >= *(void *)(this + 24) - *(void *)(this + 16)) {
    unint64_t v7 = *(void *)(this + 24) - *(void *)(this + 16);
  }
  unint64_t v8 = **(void **)(this + 8);
  BOOL v9 = v8 >= v6;
  unint64_t v10 = v8 - v6;
  if (!v9) {
    unint64_t v10 = 0;
  }
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v10;
  return this;
}

sg_vec_ns::details::buffer_iterator *sg_vec_ns::details::buffer_iterator::buffer_iterator(sg_vec_ns::details::buffer_iterator *this, void *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8 = 0;
  *(void *)this = *a2;
  *((void *)this + 1) = *a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((void *)this + 4) = a6;
  *((unsigned char *)this + 48) = a7;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (a4 < a5)
  {
    unint64_t v8 = **a3;
    if (v8 >= a6) {
      unint64_t v8 = a6;
    }
  }
  *((void *)this + 5) = v8;
  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, 1, (uint64_t)v11);
  BOOL v9 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = v11[0];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_OWORD *)((char *)this + 72) = v11[1];
  return this;
}

sg_vec_ns::details::buffer_iterator *sg_vec_ns::details::buffer_iterator::operator++(sg_vec_ns::details::buffer_iterator *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = *(void *)(*(void *)this + 16) + v2 - *((void *)this + 4);
    uint64_t v6 = *(void *)this + 24;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
    *(void *)this = v6;
    *((void *)this + 1) = v4 + 8;
    *((void *)this + 2) = v5;
  }
  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, v2 != v3, (uint64_t)v9);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = v9[0];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(_OWORD *)((char *)this + 72) = v9[1];
  return this;
}

sg_vec_ns::details::buffer_iterator *sg_vec_ns::details::buffer_iterator::operator+=(sg_vec_ns::details::buffer_iterator *this, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *((void *)this + 2);
    unint64_t v4 = *((void *)this + 3) - v3;
    if (*(void *)(*(void *)this + 16) - *((void *)this + 4) < v4) {
      unint64_t v4 = *(void *)(*(void *)this + 16) - *((void *)this + 4);
    }
    BOOL v5 = v4 <= a2;
    if (v4 <= a2)
    {
      int v6 = *((unsigned __int8 *)this + 48);
      uint64_t v7 = *((void *)this + 1) + 8;
      uint64_t v8 = *(void *)this + 24;
      do
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        if (v6)
        {
          *(void *)(v7 - 8) = *((void *)this + 5) + v4;
          uint64_t v3 = *((void *)this + 2);
        }
        *((void *)this + 4) = 0;
        *((void *)this + 5) = 0;
        v3 += v4;
        *((void *)this + 2) = v3;
        a2 -= v4;
        if (!a2) {
          break;
        }
        unint64_t v4 = *(void *)(v8 + 16);
        if (v4 >= *((void *)this + 3) - v3) {
          unint64_t v4 = *((void *)this + 3) - v3;
        }
        v7 += 8;
        v8 += 24;
        BOOL v11 = v4 > a2;
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
      }
      while (!v11);
      *(void *)this = v10;
      *((void *)this + 1) = v9;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  unint64_t v12 = *((void *)this + 5) + a2;
  *((void *)this + 5) = v12;
  if (v12 && *((unsigned char *)this + 48)) {
    **((void **)this + 1) = v12;
  }
  *((void *)this + 2) += a2;
  *((void *)this + 4) += a2;
  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, v5, (uint64_t)v15);
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = v15[0];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(_OWORD *)((char *)this + 72) = v15[1];
  return this;
}

{
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  _OWORD v20[2];

  uint64_t v3 = 0;
  if (a2)
  {
    unint64_t v4 = *((void *)this + 4);
    BOOL v5 = *((void *)this + 2);
    int v6 = *((void *)this + 3);
    uint64_t v7 = *((void *)this + 1) + 8;
    uint64_t v8 = *(void *)this + 24;
    while (1)
    {
      uint64_t v9 = v6 - v5;
      if (*(void *)(v8 - 8) - v4 < v6 - v5) {
        uint64_t v9 = *(void *)(v8 - 8) - v4;
      }
      uint64_t v10 = *(void *)(v7 - 8);
      BOOL v11 = v10 >= v4;
      unint64_t v12 = v10 - v4;
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = v11 ? v12 : 0;
      uint64_t v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14)) {
        break;
      }
      unint64_t v4 = 0;
      v5 += v9;
      *((void *)this + 1) = v7;
      *((void *)this + 2) = v5;
      *(void *)this = v8;
      if (a2 >= v14) {
        char v16 = a2 - v14;
      }
      else {
        char v16 = 0;
      }
      v7 += 8;
      *((void *)this + 4) = 0;
      *((void *)this + 5) = 0;
      uint64_t v3 = 1;
      v8 += 24;
      BOOL v11 = v14 >= a2;
      a2 = v16;
      if (v11) {
        goto LABEL_22;
      }
    }
    unint64_t v17 = *((void *)this + 5) + a2;
    *((void *)this + 2) = v5 + a2;
    *((void *)this + 4) = v4 + a2;
    *((void *)this + 5) = v17;
  }
LABEL_22:
  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, v3 & 1, (uint64_t)v20);
  BOOL v18 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(this + 56) = v20[0];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *(_OWORD *)((char *)this + 72) = v20[1];
  return this;
}

void *sg_vec_ns::details::buffer_iterator::rtrim_written(void *this)
{
  uint64_t v1 = this[2];
  if (v1 != this[3])
  {
    uint64_t v2 = this[4];
    uint64_t v3 = (void *)this[1];
    unint64_t v4 = (uint64_t *)(*this + 16);
    do
    {
      *v3++ = v2;
      uint64_t v5 = *v4;
      v4 += 3;
      uint64_t v6 = this[3];
      unint64_t v7 = v5 - v2;
      if (v7 >= v6 - v1) {
        unint64_t v7 = v6 - v1;
      }
      v1 += v7;
      uint64_t v2 = 0;
    }
    while (v1 != v6);
  }
  return this;
}

void sg_vec_ns::details::sg_vec_iterator::make_val(sg_vec_ns::details::sg_vec_iterator *this@<X0>, const sg_vec_ns::details::sg_vec_iterator *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 6);
  if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)this, (uint64_t)a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::sg_vec_iterator *)((char *)this + 56));
    uint64_t v7 = *((void *)this + 14);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 15);
    if (v8)
    {
      p_shared_owners = &v8->__shared_owners_;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = *((void *)this + 16);
      uint64_t v11 = *((void *)this + 18);
      unint64_t v12 = *((void *)a2 + 18) - v11;
      if (v12 >= v10) {
        unint64_t v12 = *((void *)this + 16);
      }
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      char v13 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v8;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v11;
      *(void *)(a3 + 32) = v10;
      *(unsigned char *)(a3 + 40) = v13;
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    else
    {
      unint64_t v14 = *((void *)this + 16);
      uint64_t v15 = *((void *)this + 18);
      unint64_t v16 = *((void *)a2 + 18) - v15;
      if (v16 >= v14) {
        unint64_t v16 = *((void *)this + 16);
      }
      char v17 = *(unsigned char *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v15;
      *(void *)(a3 + 32) = v14;
      *(unsigned char *)(a3 + 40) = v17;
    }
  }
}

BOOL sg_vec_ns::details::sg_vec_iterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != *(void **)(a2 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152)) {
    BOOL v5 = *(unsigned char *)(a2 + 152) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return *(void *)(a1 + 144) == *(void *)(a2 + 144);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[27];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v2[33];
  uint64_t v8 = v2[34];
  uint64_t v9 = v2[35];
  unint64_t v10 = (std::__shared_weak_count *)v2[41];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  BOOL v12 = v11 == v7 && *(void *)(a1 + 64) == v8 && *(void *)(a1 + 72) == v9;
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  if (v14 == v7 && v13 == v8)
  {
    int v17 = v12 ^ (*(void *)(a2 + 72) != v9);
    if (v11 != v7 || v17 == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    char v16 = v11 != v14 || v12;
    if (v16) {
      goto LABEL_32;
    }
  }
  if (*(void *)(a1 + 64) != v13 || *(void *)(a1 + 72) != *(void *)(a2 + 72))
  {
LABEL_32:
    BOOL v3 = 0;
    goto LABEL_33;
  }
  BOOL v3 = *(void *)(a1 + 144) == *(void *)(a2 + 144);
LABEL_33:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

double sg_vec_ref::end@<D0>(sg_vec_ref *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a2, (uint64_t)this + 208).n128_u64[0];
  return result;
}

void sg_vec_ref::sg_vec_ref(sg_vec_ref *this, const sg_vec_ns::details::buffer_iterator *a2, const sg_vec_ns::details::buffer_iterator *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *((void *)a3 + 2);
  *((void *)this + 1) = *(void *)a2;
  uint64_t v8 = (sg_vec_ref *)((char *)this + 8);
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)this = v7 - *((void *)a2 + 2);
  *((void *)this + 2) = v9;
  long long v10 = *((_OWORD *)a2 + 1);
  long long v11 = *((_OWORD *)a2 + 2);
  *((unsigned char *)this + ++*(_DWORD *)(this + 56) = *((unsigned char *)a2 + 48);
  *(_OWORD *)((char *)this + 40) = v11;
  *(_OWORD *)((char *)this + 24) = v10;
  uint64_t v12 = *((void *)a2 + 8);
  *((void *)this + 8) = *((void *)a2 + 7);
  *((void *)this + 9) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 72);
  *((void *)this + 12) = *(void *)a3;
  *((void *)this + 13) = *((void *)a3 + 1);
  long long v13 = *((_OWORD *)a3 + 1);
  long long v14 = *((_OWORD *)a3 + 2);
  *((unsigned char *)this + 144) = *((unsigned char *)a3 + 48);
  *((_OWORD *)this + 7) = v13;
  *((_OWORD *)this + 8) = v14;
  uint64_t v15 = *((void *)a3 + 8);
  *((void *)this + 19) = *((void *)a3 + 7);
  *((void *)this + 20) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a3 + 72);
  *((void *)this + 23) = a4;
  *((void *)this + 24) = a5;
  *((unsigned char *)this + 200) = a6;
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)this + 208), this, (sg_vec_ref *)((char *)this + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)this + 368), this, v8, 1);
}

void sub_21E386AE0(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sg_vec_ref::sg_vec_ref(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a3;
  if (*a2 == *a3)
  {
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(void *)(v12 + 16);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      else
      {
        uint64_t v16 = *(void *)(v12 + 16);
      }
      v14 += v16;
      v12 += 24;
    }
    while (v12 != v13);
  }
  *(void *)a1 = v14;
  sg_vec_ns::details::buffer_iterator::buffer_iterator((sg_vec_ns::details::buffer_iterator *)(a1 + 8), a2, a4, 0, v14, 0, 1);
  sg_vec_ns::details::buffer_iterator::buffer_iterator((sg_vec_ns::details::buffer_iterator *)(a1 + 96), a3, a5, *(void *)a1, *(void *)a1, 0, 1);
  *(void *)(a1 + 184) = a6;
  *(void *)(a1 + 192) = a7;
  *(unsigned char *)(a1 + 200) = 0;
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)(a1 + 208), (sg_vec_ref *)a1, (const sg_vec_ns::details::buffer_iterator *)(a1 + 96), 0);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)(a1 + 368), (sg_vec_ref *)a1, (const sg_vec_ns::details::buffer_iterator *)(a1 + 8), 1);
  return a1;
}

void sub_21E386C54(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 160);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

double sg_vec_ref::begin@<D0>(sg_vec_ref *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a2, (uint64_t)this + 368).n128_u64[0];
  return result;
}

void sg_vec_ref::subvec(sg_vec_ref *this@<X0>, const sg_vec_ns::details::sg_vec_iterator *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 27);
  uint64_t v64 = *((void *)this + 26);
  long long v65 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *((_OWORD *)this + 14);
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)this + 233);
  long long v10 = (char *)this + 264;
  long long v68 = *(_OWORD *)((char *)this + 264);
  long long v11 = *(_OWORD *)((char *)this + 296);
  long long v69 = *(_OWORD *)((char *)this + 280);
  uint64_t v67 = *((void *)this + 32);
  char v71 = *((unsigned char *)this + 312);
  long long v70 = v11;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 41);
  *(void *)&long long v72 = *((void *)this + 40);
  *((void *)&v72 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v73 = *((_OWORD *)this + 21);
  uint64_t v74 = *((void *)this + 44);
  char v75 = *((unsigned char *)this + 360);
  BOOL v13 = sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)&v64);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v14 = (_OWORD *)((char *)this + 224);
  uint64_t v15 = (long long *)((char *)this + 280);
  long long v48 = (long long *)((char *)this + 336);
  uint64_t v16 = (char *)this + 352;
  if (!v13)
  {
    uint64_t v17 = *((void *)this + 24);
    if (v17 + *((void *)this + 23) < a3) {
      a3 = v17 + *((void *)this + 23);
    }
    if (a3 >= *((void *)a2 + 18))
    {
      unint64_t v25 = (std::__shared_weak_count *)*((void *)a2 + 1);
      uint64_t v64 = *(void *)a2;
      long long v65 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v66[0] = *((_OWORD *)a2 + 1);
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)a2 + 25);
      uint64_t v67 = *((void *)a2 + 6);
      long long v68 = *(_OWORD *)((char *)a2 + 56);
      long long v69 = *(_OWORD *)((char *)a2 + 72);
      long long v70 = *(_OWORD *)((char *)a2 + 88);
      char v71 = *((unsigned char *)a2 + 104);
      uint64_t v26 = *((void *)a2 + 15);
      *(void *)&long long v72 = *((void *)a2 + 14);
      *((void *)&v72 + 1) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      long long v73 = *((_OWORD *)a2 + 8);
      uint64_t v74 = *((void *)a2 + 18);
      char v75 = *((unsigned char *)a2 + 152);
      if (a4)
      {
        unint64_t v27 = *((void *)this + 14);
        if ((unint64_t)v69 <= v27)
        {
          long long v52 = v68;
          *(_OWORD *)char v53 = v69;
          *(_OWORD *)&v53[16] = v70;
          LOBYTE(v54) = v71;
          BOOL v29 = (std::__shared_weak_count *)*((void *)&v72 + 1);
          long long v55 = v72;
          if (*((void *)&v72 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            unint64_t v27 = *((void *)this + 14);
          }
          long long v56 = v73;
          if (*(void *)v53 >= v27)
          {
            unint64_t v28 = 0;
          }
          else
          {
            unint64_t v28 = 0;
            do
            {
              sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)&v52);
              if (*((void *)this + 14) - (void)v69 >= *((void *)&v56 + 1)) {
                unint64_t v30 = *((void *)&v56 + 1);
              }
              else {
                unint64_t v30 = *((void *)this + 14) - v69;
              }
              if (v30) {
                sg_vec_ns::details::buffer_iterator::operator+=((sg_vec_ns::details::buffer_iterator *)&v52, v30);
              }
              else {
                sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v52);
              }
              v28 += v30;
            }
            while (*(void *)v53 < *((void *)this + 14));
            BOOL v29 = (std::__shared_weak_count *)*((void *)&v55 + 1);
          }
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
        }
        else
        {
          unint64_t v28 = 0;
        }
        if (v28 >= a4) {
          unint64_t v31 = a4;
        }
        else {
          unint64_t v31 = v28;
        }
        if (v31) {
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v64, v31);
        }
        if (v28 < a4) {
          sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v64, a4 - v31);
        }
      }
      uint64_t v33 = *((void *)this + 26);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)this + 27);
      *(void *)&long long v52 = v33;
      *((void *)&v52 + 1) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = v33;
      *(_OWORD *)char v53 = *v14;
      *(_OWORD *)&v53[9] = *(_OWORD *)((char *)this + 233);
      long long v34 = *(_OWORD *)((char *)this + 296);
      long long v56 = *v15;
      uint64_t v35 = *((void *)this + 33);
      uint64_t v36 = *((void *)this + 32);
      uint64_t v54 = v36;
      *(void *)&long long v55 = v35;
      uint64_t v37 = v35;
      uint64_t v38 = *((void *)this + 34);
      *((void *)&v55 + 1) = v38;
      long long v57 = v34;
      char v58 = *((unsigned char *)this + 312);
      uint64_t v40 = *((void *)this + 40);
      unint64_t v39 = (std::__shared_weak_count *)*((void *)this + 41);
      uint64_t v59 = v40;
      uint64_t v60 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v61 = *v48;
      char v63 = v16[8];
      unint64_t v62 = a3;
      sg_vec_ns::details::sg_vec_iterator::make_val((sg_vec_ns::details::sg_vec_iterator *)&v64, (const sg_vec_ns::details::sg_vec_iterator *)&v52, (uint64_t)&v49);
      long long v41 = v50;
      uint64_t v42 = v65;
      uint64_t v64 = v49;
      long long v65 = v50;
      if (v42)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        long long v41 = v65;
      }
      v66[0] = v51[0];
      *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v51 + 9);
      *(void *)a5 = v64;
      *(void *)(a5 + 8) = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 16) = v66[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v66 + 9);
      *(_OWORD *)(a5 + ++*(_DWORD *)(this + 56) = v68;
      long long v43 = v70;
      *(_OWORD *)(a5 + 72) = v69;
      *(void *)(a5 + 48) = v67;
      *(_OWORD *)(a5 + 88) = v43;
      *(unsigned char *)(a5 + 104) = v71;
      uint64_t v44 = *((void *)&v72 + 1);
      *(void *)(a5 + 112) = v72;
      *(void *)(a5 + 120) = v44;
      if (v44) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 128) = v73;
      *(void *)(a5 + 144) = v74;
      *(unsigned char *)(a5 + 152) = v75;
      *(void *)(a5 + 160) = v47;
      *(void *)(a5 + 168) = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a5 + 176) = *(_OWORD *)v53;
      *(_OWORD *)(a5 + 185) = *(_OWORD *)&v53[9];
      long long v45 = v57;
      *(_OWORD *)(a5 + 232) = v56;
      *(void *)(a5 + 208) = v36;
      *(void *)(a5 + 216) = v37;
      *(void *)(a5 + 224) = v38;
      *(_OWORD *)(a5 + 248) = v45;
      *(unsigned char *)(a5 + 264) = v58;
      *(void *)(a5 + 272) = v40;
      *(void *)(a5 + 280) = v39;
      if (v39)
      {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        if (!v32) {
          goto LABEL_72;
        }
      }
      else
      {
        *(_OWORD *)(a5 + 288) = v61;
        *(void *)(a5 + 304) = v62;
        *(unsigned char *)(a5 + 312) = v63;
        if (!v32) {
          goto LABEL_72;
        }
      }
      char v24 = v32;
LABEL_71:
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      goto LABEL_72;
    }
  }
  BOOL v18 = (std::__shared_weak_count *)*((void *)this + 27);
  uint64_t v64 = *((void *)this + 26);
  long long v65 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v66[0] = *v14;
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)this + 233);
  long long v68 = *(_OWORD *)v10;
  long long v19 = *((_OWORD *)v10 + 2);
  long long v69 = *v15;
  uint64_t v67 = *((void *)this + 32);
  long long v70 = v19;
  char v71 = v10[48];
  uint64_t v20 = *((void *)this + 41);
  *(void *)&long long v72 = *((void *)this + 40);
  *((void *)&v72 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v73 = *v48;
  uint64_t v74 = *(void *)v16;
  char v75 = *((unsigned char *)this + 360);
  uint64_t v21 = *((void *)this + 27);
  *(void *)&long long v52 = *((void *)this + 26);
  *((void *)&v52 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)char v53 = *v14;
  *(_OWORD *)&v53[9] = *(_OWORD *)((char *)this + 233);
  long long v55 = *(_OWORD *)v10;
  long long v22 = *((_OWORD *)v10 + 2);
  long long v56 = *v15;
  uint64_t v54 = *((void *)this + 32);
  long long v57 = v22;
  char v58 = v10[48];
  int v23 = (std::__shared_weak_count *)*((void *)this + 41);
  uint64_t v59 = *((void *)this + 40);
  uint64_t v60 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v61 = *v48;
  unint64_t v62 = *(void *)v16;
  char v63 = *((unsigned char *)this + 360);
  std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100]<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator,0>(a5, (uint64_t)&v64, (uint64_t)&v52);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  char v24 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1)) {
    goto LABEL_71;
  }
LABEL_72:
  if (*((void *)&v72 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
}

void sub_21E3872B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator+=(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sg_vec_ns::details::buffer_iterator::operator+=((sg_vec_ns::details::buffer_iterator *)(a1 + 56), a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    BOOL v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sg_vec_ns::details::sg_vec_iterator::make_val((sg_vec_ns::details::sg_vec_iterator *)a1, (const sg_vec_ns::details::sg_vec_iterator *)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return a1;
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void v8[2];
  _OWORD v9[2];
  uint64_t v10;
  long long v11;
  long long v12;
  long long v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  long long v17;
  uint64_t v18;
  char v19;
  long long v20;
  _OWORD v21[2];

  *(void *)(a1 + 144) += a2;
  sg_vec_ns::details::buffer_iterator::operator+=((sg_vec_ns::details::buffer_iterator *)(a1 + 56), a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    v8[0] = *(void *)(v3 + 208);
    v8[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v10 = *(void *)(v3 + 256);
    long long v11 = *(_OWORD *)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 312);
    long long v12 = *(_OWORD *)(v3 + 280);
    long long v13 = *(_OWORD *)(v3 + 296);
    BOOL v5 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v15 = *(void *)(v3 + 320);
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)(v3 + 336);
    uint64_t v18 = *(void *)(v3 + 352);
    char v19 = *(unsigned char *)(v3 + 360);
    sg_vec_ns::details::sg_vec_iterator::make_val((sg_vec_ns::details::sg_vec_iterator *)a1, (const sg_vec_ns::details::sg_vec_iterator *)v8, (uint64_t)&v20);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    *(_OWORD *)(a1 + 16) = v21[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v21 + 9);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return a1;
}

void sub_21E387410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21E38754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator++(uint64_t a1)
{
  sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)(a1 + 56));
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 216);
    v7[0] = *(void *)(v2 + 208);
    v7[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v8[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(v2 + 233);
    uint64_t v9 = *(void *)(v2 + 256);
    long long v10 = *(_OWORD *)(v2 + 264);
    char v13 = *(unsigned char *)(v2 + 312);
    long long v11 = *(_OWORD *)(v2 + 280);
    long long v12 = *(_OWORD *)(v2 + 296);
    unint64_t v4 = *(std::__shared_weak_count **)(v2 + 328);
    uint64_t v14 = *(void *)(v2 + 320);
    uint64_t v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v16 = *(_OWORD *)(v2 + 336);
    uint64_t v17 = *(void *)(v2 + 352);
    char v18 = *(unsigned char *)(v2 + 360);
    sg_vec_ns::details::sg_vec_iterator::make_val((sg_vec_ns::details::sg_vec_iterator *)a1, (const sg_vec_ns::details::sg_vec_iterator *)v7, (uint64_t)&v19);
    BOOL v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v19;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    *(_OWORD *)(a1 + 16) = v20[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v20 + 9);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  return a1;
}

void sub_21E38767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sg_vec_ns::details::sg_vec_iterator::is_end_of_buffers(sg_vec_ns::details::sg_vec_iterator *this)
{
  return *((void *)this + 10) == *((void *)this + 9);
}

void sg_vec_ns::details::sg_vec_iterator::subvec(sg_vec_ns::details::sg_vec_iterator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *((void *)a1 + 3);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < (unint64_t)(v7 & 1) + *(void *)(a2 + 8) - 1)
  {
    unint64_t v10 = *((void *)a1 + 2) + v6;
    char v11 = v7 & 2;
    unint64_t v12 = *(void *)a2;
    if ((v7 & 2) != 0) {
      unint64_t v13 = *(void *)a2;
    }
    else {
      unint64_t v13 = v12 + 1;
    }
    if (v10 <= v13)
    {
      uint64_t v14 = *((void *)a1 + 6);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
      uint64_t v73 = *(void *)a1;
      uint64_t v74 = v15;
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = *((void *)a1 + 6);
      }
      else
      {
        uint64_t v16 = v14;
      }
      v75[0] = *((_OWORD *)a1 + 1);
      *(_OWORD *)((char *)v75 + 9) = *(_OWORD *)((char *)a1 + 25);
      uint64_t v76 = v16;
      long long v77 = *(_OWORD *)((char *)a1 + 56);
      long long v78 = *(_OWORD *)((char *)a1 + 72);
      long long v79 = *(_OWORD *)((char *)a1 + 88);
      char v80 = *((unsigned char *)a1 + 104);
      uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 15);
      uint64_t v81 = *((void *)a1 + 14);
      char v82 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v83 = *((_OWORD *)a1 + 8);
      uint64_t v84 = *((void *)a1 + 18);
      char v85 = *((unsigned char *)a1 + 152);
      while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v73, a3))
      {
        v10 += *(void *)&v75[0];
        unint64_t v18 = *(void *)a2;
        if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
          ++v18;
        }
        if (v10 >= v18) {
          break;
        }
        sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v73);
      }
      long long v19 = *(std::__shared_weak_count **)(v14 + 216);
      uint64_t v60 = *(void *)(v14 + 208);
      long long v61 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v62[0] = *(_OWORD *)(v14 + 224);
      *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
      long long v20 = (long long *)(v14 + 264);
      long long v64 = *(_OWORD *)(v14 + 264);
      long long v21 = *(_OWORD *)(v14 + 296);
      long long v65 = *(_OWORD *)(v14 + 280);
      uint64_t v63 = *(void *)(v14 + 256);
      char v67 = *(unsigned char *)(v14 + 312);
      long long v66 = v21;
      long long v22 = *(std::__shared_weak_count **)(v14 + 328);
      uint64_t v68 = *(void *)(v14 + 320);
      long long v69 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v70 = *(_OWORD *)(v14 + 336);
      uint64_t v71 = *(void *)(v14 + 352);
      char v72 = *(unsigned char *)(v14 + 360);
      BOOL v23 = sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v73, (uint64_t)&v60);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (v23)
      {
        char v24 = (_OWORD *)(v14 + 224);
        unint64_t v25 = (long long *)(v14 + 280);
        uint64_t v26 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v60 = *(void *)(v14 + 208);
        long long v61 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v62[0] = *v24;
        *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)(v14 + 233);
        long long v64 = *v20;
        long long v27 = *(_OWORD *)(v14 + 296);
        long long v65 = *v25;
        unint64_t v28 = (long long *)(v14 + 336);
        BOOL v29 = (uint64_t *)(v14 + 352);
        uint64_t v63 = *(void *)(v14 + 256);
        long long v66 = v27;
        char v67 = *(unsigned char *)(v14 + 312);
        unint64_t v30 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v68 = *(void *)(v14 + 320);
        long long v69 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v70 = *v28;
        uint64_t v71 = *v29;
        char v72 = *(unsigned char *)(v14 + 360);
        unint64_t v31 = *(std::__shared_weak_count **)(v14 + 216);
        uint64_t v47 = *(void *)(v14 + 208);
        long long v48 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)uint64_t v49 = *v24;
        *(_OWORD *)&v49[9] = *(_OWORD *)(v14 + 233);
        long long v32 = *v25;
        long long v33 = *(_OWORD *)(v14 + 296);
        long long v51 = *v20;
        long long v52 = v32;
        uint64_t v50 = *(void *)(v14 + 256);
        long long v53 = v33;
        char v54 = *(unsigned char *)(v14 + 312);
        long long v34 = *(std::__shared_weak_count **)(v14 + 328);
        uint64_t v55 = *(void *)(v14 + 320);
        long long v56 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v57 = *v28;
        uint64_t v58 = *v29;
        char v59 = *(unsigned char *)(v14 + 360);
        std::pair<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator>::pair[abi:ne180100]<sg_vec_ns::details::sg_vec_iterator,sg_vec_ns::details::sg_vec_iterator,0>(a4, (uint64_t)&v60, (uint64_t)&v47);
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        if (v69) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v69);
        }
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        if (v82) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v82);
        }
        if (v74) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
        }
        return;
      }
      if (v82) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
      unint64_t v12 = *(void *)a2;
      unint64_t v6 = *((void *)a1 + 3);
      char v11 = v7 & 2;
    }
    if (v11) {
      unint64_t v35 = v12;
    }
    else {
      unint64_t v35 = v12 + 1;
    }
    unint64_t v36 = v35 - v6;
    if (v35 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v37 < v12) {
            goto LABEL_70;
          }
        }
        else
        {
          unint64_t v37 = *(void *)(a2 + 8);
          if (v12 >= v37)
          {
LABEL_70:
            uint64_t v39 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
            goto LABEL_71;
          }
        }
      }
      else
      {
        unint64_t v37 = *(void *)(a2 + 8);
        if (v12 >= v37 || v12 + 1 >= v37) {
          goto LABEL_70;
        }
      }
      uint64_t v39 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v37;
LABEL_71:
      unint64_t v40 = v39 + v35;
      long long v41 = (sg_vec_ref *)*((void *)a1 + 6);
      if (*(void *)(a3 + 144) >= v40) {
        unint64_t v42 = v40;
      }
      else {
        unint64_t v42 = *(void *)(a3 + 144);
      }
      uint64_t v43 = a4;
      uint64_t v44 = a1;
      unint64_t v36 = 0;
LABEL_84:
      sg_vec_ref::subvec(v41, v44, v42, v36, v43);
      return;
    }
    if (v7)
    {
      if (v7 == 3)
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v38 < v12) {
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v38 = *(void *)(a2 + 8);
        if (v12 >= v38)
        {
LABEL_79:
          uint64_t v45 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
          goto LABEL_80;
        }
      }
    }
    else
    {
      unint64_t v38 = *(void *)(a2 + 8);
      if (v12 >= v38 || v12 + 1 >= v38) {
        goto LABEL_79;
      }
    }
    uint64_t v45 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v38;
LABEL_80:
    unint64_t v46 = v45 + v35;
    long long v41 = (sg_vec_ref *)*((void *)a1 + 6);
    if (*(void *)(a3 + 144) >= v46) {
      unint64_t v42 = v46;
    }
    else {
      unint64_t v42 = *(void *)(a3 + 144);
    }
    uint64_t v43 = a4;
    uint64_t v44 = a1;
    goto LABEL_84;
  }
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4, a3);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(a4 + 160, a3);
}

void sub_21E387BA4(_Unwind_Exception *a1)
{
  sg_vec_ns::details::sg_vec_iterator::~sg_vec_iterator((sg_vec_ns::details::sg_vec_iterator *)(v1 - 248));
  _Unwind_Resume(a1);
}

void sg_vec_ns::details::sg_vec_iterator::subvec(sg_vec_ns::details::sg_vec_iterator *this@<X0>, const sg_vec_ns::details::sg_vec_iterator *a2@<X2>, unint64_t a3@<X1>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = (sg_vec_ref *)*((void *)this + 6);
  if (*((void *)a2 + 18) >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = *((void *)a2 + 18);
  }
  sg_vec_ref::subvec(v6, this, v7, a4, a5);
}

sg_vec_ns::details::sg_vec_iterator *sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(sg_vec_ns::details::sg_vec_iterator *this, sg_vec_ref *a2, const sg_vec_ns::details::buffer_iterator *a3, char a4)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = *(void *)a3;
  *((void *)this + 8) = *((void *)a3 + 1);
  long long v6 = *((_OWORD *)a3 + 1);
  long long v7 = *((_OWORD *)a3 + 2);
  *((unsigned char *)this + 104) = *((unsigned char *)a3 + 48);
  *(_OWORD *)((char *)this + 88) = v7;
  *(_OWORD *)((char *)this + 72) = v6;
  *((void *)this + 14) = *((void *)a3 + 7);
  uint64_t v8 = *((void *)a3 + 8);
  *((void *)this + 15) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)this + 8) = *(_OWORD *)((char *)a3 + 72);
  *((unsigned char *)this + 152) = a4;
  uint64_t v9 = *(void *)a3;
  if (*(_OWORD *)a3 == *((_OWORD *)a2 + 6) && *((void *)a3 + 2) == *((void *)a2 + 14))
  {
    *((void *)this + 18) = *((void *)a2 + 23) + *((void *)a2 + 24);
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 8);
    long long v11 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)unint64_t v40 = v10;
    *(_OWORD *)&v40[16] = v11;
    long long v41 = *(_OWORD *)((char *)a2 + 40);
    char v42 = *((unsigned char *)a2 + 56);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 9);
    uint64_t v43 = *((void *)a2 + 8);
    uint64_t v44 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *(void *)a3;
    }
    long long v45 = *((_OWORD *)a2 + 5);
    unint64_t v13 = *((void *)a3 + 1);
    unint64_t v14 = *((void *)a3 + 2);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)a3 + 8);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((void)v10 == v9 && *(_OWORD *)&v40[8] == __PAIR128__(v14, v13))
    {
      uint64_t v16 = 0;
    }
    else
    {
      int v17 = 0;
      do
      {
        sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)v40);
        unint64_t v18 = v44;
        if (v44)
        {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          int v19 = DWORD2(v45);
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        else
        {
          int v19 = DWORD2(v45);
        }
        v17 += v19;
        sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)v40);
      }
      while (*(void *)v40 != v9 || *(void *)&v40[8] != v13 || *(void *)&v40[16] != v14);
      uint64_t v16 = v17;
    }
    *((void *)this + 18) = *((void *)a2 + 23) + v16;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    long long v22 = (std::__shared_weak_count *)*((void *)a2 + 27);
    v26[0] = *((void *)a2 + 26);
    v26[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v27[0] = *((_OWORD *)a2 + 14);
    *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)a2 + 233);
    uint64_t v28 = *((void *)a2 + 32);
    long long v29 = *(_OWORD *)((char *)a2 + 264);
    char v32 = *((unsigned char *)a2 + 312);
    long long v30 = *(_OWORD *)((char *)a2 + 280);
    long long v31 = *(_OWORD *)((char *)a2 + 296);
    BOOL v23 = (std::__shared_weak_count *)*((void *)a2 + 41);
    uint64_t v33 = *((void *)a2 + 40);
    long long v34 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v35 = *((_OWORD *)a2 + 21);
    uint64_t v36 = *((void *)a2 + 44);
    char v37 = *((unsigned char *)a2 + 360);
    sg_vec_ns::details::sg_vec_iterator::make_val(this, (const sg_vec_ns::details::sg_vec_iterator *)v26, (uint64_t)&v38);
    char v24 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v38;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    *((_OWORD *)this + 1) = v39[0];
    *(_OWORD *)((char *)this + 25) = *(_OWORD *)((char *)v39 + 9);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  return this;
}