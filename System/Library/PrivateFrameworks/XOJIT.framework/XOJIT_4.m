BOOL UpgradePTESTIntrinsic(llvm::Function *a1, int a2, llvm::Function **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *ValueName;
  uint64_t v12;
  void v14[4];
  __int16 v15;

  v6 = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
  llvm::FixedVectorType::get((uint64_t **)(***(void ***)a1 + 1704), (llvm::Type *)4);
  v8 = v7;
  if (v6 == v7)
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
      v12 = *ValueName;
      v10 = ValueName + 2;
      v9 = v12;
    }
    else
    {
      v9 = 0;
      v10 = &str_3_24;
    }
    v15 = 773;
    v14[0] = v10;
    v14[1] = v9;
    v14[2] = ".old";
    llvm::Value::setName(a1, (const llvm::Twine *)v14);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)a1 + 5), a2, 0, 0);
  }
  return v6 == v8;
}

BOOL UpgradeX86IntrinsicsWith8BitMask(llvm::Function *this, int a2, llvm::Function **a3)
{
  int v3 = *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 3) + 16)
                             + 8 * (*(_DWORD *)(*((void *)this + 3) + 12) - 1))
                 + 8);
  if (v3 == 8205)
  {
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v10 = *ValueName;
      v8 = ValueName + 2;
      uint64_t v7 = v10;
    }
    else
    {
      uint64_t v7 = 0;
      v8 = &str_3_24;
    }
    __int16 v13 = 773;
    v12[0] = v8;
    v12[1] = v7;
    v12[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v12);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), a2, 0, 0);
  }
  return v3 == 8205;
}

BOOL UpgradeX86MaskedFPCompare(llvm::Function *this, int a2, llvm::Function **a3)
{
  int v3 = *(_DWORD *)(**(void **)(*((void *)this + 3) + 16) + 8) & 0xFE;
  if (v3 != 18)
  {
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v10 = *ValueName;
      v8 = ValueName + 2;
      uint64_t v7 = v10;
    }
    else
    {
      uint64_t v7 = 0;
      v8 = &str_3_24;
    }
    __int16 v13 = 773;
    v12[0] = v8;
    v12[1] = v7;
    v12[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v12);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), a2, 0, 0);
  }
  return v3 != 18;
}

BOOL UpgradeX86BF16Intrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6 = **(void **)(*((void *)this + 3) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(v6 + 8);
  }
  if (v7 != 1)
  {
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v11 = *ValueName;
      v9 = ValueName + 2;
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      v9 = &str_3_24;
    }
    __int16 v14 = 773;
    v13[0] = v9;
    v13[1] = v8;
    v13[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v13);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

BOOL UpgradeX86BF16DPIntrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(v6 + 8);
  }
  if (v7 != 1)
  {
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v11 = *ValueName;
      v9 = ValueName + 2;
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      v9 = &str_3_24;
    }
    __int16 v14 = 773;
    v13[0] = v9;
    v13[1] = v8;
    v13[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v13);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

uint64_t *llvm::IRBuilderBase::CreateAShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 24))(*((void *)this + 9), 27, a2, a3);
  if (!result)
  {
    __int16 v13 = 257;
    uint64_t v11 = llvm::BinaryOperator::Create(27, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v12, 0);
    if (a5) {
      *((unsigned char *)v11 + 17) |= 2u;
    }
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v11, (uint64_t)a4);
  }
  return result;
}

void *std::vector<llvm::Type *>::__assign_with_size[abi:nn180100]<llvm::Type * const*,llvm::Type * const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  int v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >> 61) {
      abort();
    }
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v9, v12);
    uint64_t v10 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      result = memmove(result, v6, v14);
    }
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v10) >> 3;
  if (v17 >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v10)
  {
    result = memmove((void *)*result, __src, v16 - v10);
    uint64_t v10 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    v19 = v10;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v10[v14];
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 88))(*(void *)(a1 + 72));
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v13 = (uint64_t *)llvm::InsertValueInst::Create(a2, a3, a4, a5, (const llvm::Twine *)v14, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v13, a6);
  }
  return result;
}

uint64_t std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 48;
        std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 24, (__n128 *)((char *)v5 + 24));
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t _GLOBAL__sub_I_AutoUpgrade_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)DisableAutoUpgradeDebugInfo, 0, 0);
  byte_26B41F4D0 = 0;
  qword_26B41F4D8 = (uint64_t)&unk_270DBC978;
  unk_26B41F4E0 = 0;
  DisableAutoUpgradeDebugInfo[0] = (uint64_t)&unk_270DBC910;
  qword_26B41F4E8 = (uint64_t)&unk_270DBC658;
  qword_26B41F4F0 = (uint64_t)&unk_270DBC998;
  qword_26B41F508 = (uint64_t)&qword_26B41F4F0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-auto-upgrade-debug-info", 0x1FuLL);
  qword_26B41F470 = (uint64_t)"Disable autoupgrade of debug info";
  unk_26B41F478 = 33;
  llvm::cl::Option::addArgument((llvm::cl::Option *)DisableAutoUpgradeDebugInfo);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, DisableAutoUpgradeDebugInfo, &dword_261C2B000);
}

void llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      int v3 = *(llvm::ValueSymbolTable **)(v2 + 104);
      if (v3) {
        llvm::ValueSymbolTable::reinsertValue(v3, (uint64_t ***)a2);
      }
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 104);
      if (v3)
      {
        ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
        uint64_t v5 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v3 + 20));
        unint64_t v6 = *ValueName;
        return llvm::StringMapImpl::RemoveKey(v3, v5, v6);
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::BasicBlock(uint64_t a1, void *a2, const llvm::Twine *a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
  *(void *)a1 = *a2 + 1632;
  *(void *)(a1 + 8) = 0;
  unsigned int v7 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 22;
  *(_DWORD *)(a1 + 20) = v7;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 40;
  *(void *)(a1 + 48) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  if (a4) {
    llvm::BasicBlock::insertInto((llvm::BasicBlock *)a1, a4, a5);
  }
  llvm::Value::setName((llvm::Value *)a1, a3);
  return a1;
}

void llvm::BasicBlock::insertInto(llvm::BasicBlock *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  if (a3)
  {
    uint64_t v5 = a3;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, (uint64_t)this);
    uint64_t v6 = *((void *)v5 + 3);
    uint64_t v5 = (llvm::BasicBlock *)((char *)v5 + 24);
    *((void *)this + 3) = v6;
    *((void *)this + 4) = v5;
    unsigned int v7 = (char *)this + 24;
    *(void *)(v6 + 8) = v7;
    *(void *)uint64_t v5 = v7;
  }
  else
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, (uint64_t)this);
    uint64_t v8 = *((void *)a2 + 9);
    *((void *)this + 3) = v8;
    *((void *)this + 4) = (char *)a2 + 72;
    char v9 = (char *)this + 24;
    *(void *)(v8 + 8) = v9;
    *((void *)a2 + 9) = v9;
  }
}

void llvm::BasicBlock::~BasicBlock(llvm::BasicBlock *this, llvm::Value *i)
{
  if ((*((_WORD *)this + 9) & 0x7FFF) != 0)
  {
    uint64_t v3 = llvm::ConstantInt::get(***(void ***)this + 1992, 1);
    uint64_t v4 = *((void *)this + 1);
    if (v4)
    {
      uint64_t v5 = (void **)v3;
      do
      {
        uint64_t v6 = *(llvm::Constant ******)(v4 + 24);
        FoldedCast = getFoldedCast((llvm *)0x30, v5, *v6, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, FoldedCast, (llvm::Value *)1, v8);
        llvm::Constant::destroyConstant((int32x2_t ****)v6, v9, v10, v11);
        uint64_t v4 = *((void *)this + 1);
      }
      while (v4);
    }
  }
  unint64_t v12 = (llvm::BasicBlock *)((char *)this + 40);
  uint64_t v13 = (llvm::Value *)*((void *)this + 6);
  if (v13 != (llvm::BasicBlock *)((char *)this + 40))
  {
    do
    {
      if (v13) {
        uint64_t v14 = (uint64_t)v13 - 24;
      }
      else {
        uint64_t v14 = 0;
      }
      llvm::User::dropAllReferences(v14);
      uint64_t v13 = (llvm::Value *)*((void *)v13 + 1);
    }
    while (v13 != v12);
    i = (llvm::Value *)*((void *)this + 6);
    if (i != v12)
    {
      do
        i = (llvm::Value *)llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase((uint64_t)this + 40, (uint64_t)i);
      while (v12 != i);
      for (i = (llvm::Value *)*((void *)this + 6);
            v12 != i;
            i = (llvm::Value *)llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase((uint64_t)this + 40, (uint64_t)i))
      {
        ;
      }
    }
  }
  llvm::Value::~Value(this, i);
}

void llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1[2];
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 104);
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = a3;
  uint64_t v6 = a1[2];
  if (v6) {
    unsigned int v7 = *(llvm::ValueSymbolTable **)(v6 + 104);
  }
  else {
    unsigned int v7 = 0;
  }
  if ((llvm::ValueSymbolTable *)v5 != v7 && (void *)*a1 != a1)
  {
    if (v5)
    {
      for (i = (void *)a1[1]; i != a1; i = (void *)i[1])
      {
        if (i) {
          uint64_t v9 = (uint64_t ***)(i - 3);
        }
        else {
          uint64_t v9 = 0;
        }
        if ((*((unsigned char *)v9 + 23) & 0x10) != 0)
        {
          ValueName = (unint64_t *)llvm::Value::getValueName(v9);
          llvm::StringMapImpl::RemoveKey(v5, (uint64_t *)((char *)ValueName + *(unsigned int *)(v5 + 20)), *ValueName);
        }
      }
    }
    if (v7)
    {
      for (j = (void *)a1[1]; j != a1; j = (void *)j[1])
      {
        if (j) {
          unint64_t v12 = (uint64_t ***)(j - 3);
        }
        else {
          unint64_t v12 = 0;
        }
        if ((*((unsigned char *)v12 + 23) & 0x10) != 0) {
          llvm::ValueSymbolTable::reinsertValue(v7, v12);
        }
      }
    }
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    uint64_t v3 = (llvm::BasicBlock *)(a2 - 24);
  }
  else {
    uint64_t v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(a1, (uint64_t)v3);
  uint64_t v4 = *((void *)v3 + 3);
  uint64_t v5 = (void *)*((void *)v3 + 4);
  *uint64_t v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 3) = 0;
  *((void *)v3 + 4) = 0;
  llvm::ilist_alloc_traits<llvm::BasicBlock>::deleteNode(v3, v6);
  return v2;
}

void llvm::BasicBlock::moveBefore(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = (uint64_t *)*((void *)this + 4);
    uint64_t v3 = (uint64_t *)((char *)this + 24);
    if (v2 != (uint64_t *)((char *)a2 + 24) && v3 != v2) {
      llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(*((void *)a2 + 7) + 72, (uint64_t *)a2 + 3, *((void *)this + 7) + 72, v3, v2);
    }
  }
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    BOOL v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(v2 + 40);
  do
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      break;
    }
    uint64_t v8 = *(void *)(v1 + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    BOOL v10 = v8 && v9 >= 0x1C;
  }
  while (!v10 || v9 - 29 >= 0xB);
  if (v1) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t llvm::BasicBlock::getUniquePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    BOOL v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(v2 + 40);
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      break;
    }
    uint64_t v8 = *(void *)(v1 + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8) {
      BOOL v10 = v9 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10 && v9 - 29 <= 0xA)
    {
      if (*(void *)(v8 + 40) != v7) {
        return 0;
      }
      while (1)
      {
        uint64_t v1 = *(void *)(v1 + 8);
        if (!v1) {
          break;
        }
        uint64_t v12 = *(void *)(v1 + 24);
        unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v12) {
          BOOL v14 = v13 >= 0x1C;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14 && v13 - 29 < 0xB)
        {
          uint64_t result = 0;
          if (*(void *)(v12 + 40) != v7) {
            return result;
          }
        }
      }
      return v7;
    }
  }
  return v7;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v5 = *((void *)this + 5);
  uint64_t result = (uint64_t)this + 40;
  uint64_t v4 = v5;
  if (v5 != result)
  {
    uint64_t v6 = (llvm::Instruction *)(v4 - 24);
    if (v4) {
      uint64_t v7 = v4 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned __int8 *)(v7 + 16) - 29 <= 0xA)
    {
      uint64_t result = llvm::Instruction::getNumSuccessors(v6);
      if (result)
      {
        int v10 = result;
        for (unsigned int i = 0; i != v10; ++i)
        {
          uint64_t Successor = llvm::Instruction::getSuccessor(v6, i);
          uint64_t result = llvm::BasicBlock::replacePhiUsesWith(Successor, a2, a3);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::replacePhiUsesWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v3 = this + 40;
  uint64_t v4 = *(void *)(this + 48);
  if (v4 != this + 40)
  {
    do
    {
      if (v4) {
        this = v4 - 24;
      }
      else {
        this = 0;
      }
      if (!v4) {
        break;
      }
      if (*(unsigned char *)(this + 16) != 83) {
        break;
      }
      this = llvm::PHINode::replaceIncomingBlockWith(this, a2, a3);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t llvm::PHINode::replaceIncomingBlockWith(uint64_t this, const llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  uint64_t v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      int v7 = *(_DWORD *)(this + 20);
      if ((v7 & 0x40000000) != 0) {
        uint64_t v8 = *(void *)(this - 8);
      }
      else {
        uint64_t v8 = this - 32 * (v7 & 0x7FFFFFF);
      }
      uint64_t v9 = *(unsigned int *)(this + 60);
      if (*(const llvm::BasicBlock **)(v8 + 32 * v9 + v5) == a2) {
        *(void *)(v8 + 32 * v9 + v5) = a3;
      }
      v5 += 8;
    }
    while (v6 != v5);
  }
  return this;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((void *)(a2 + 40), (void *)(a2 + 56), a1 - 72);
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v4 = *(llvm::ValueSymbolTable **)(a1 + 32);
    if (v4)
    {
      llvm::ValueSymbolTable::reinsertValue(v4, (uint64_t ***)a2);
    }
  }
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((void *)(a2 + 40), (void *)(a2 + 56), 0);
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)a2);
      uint64_t v6 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v4 + 20));
      unint64_t v7 = *ValueName;
      llvm::StringMapImpl::RemoveKey(v4, v6, v7);
    }
  }
}

llvm::BasicBlock *llvm::ilist_alloc_traits<llvm::BasicBlock>::deleteNode(llvm::BasicBlock *result, llvm::Value *a2)
{
  if (result)
  {
    llvm::BasicBlock::~BasicBlock(result, a2);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    int v3 = (llvm::Value *)(a2 - 24);
  }
  else {
    int v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(a1, v3);
  uint64_t v4 = *((void *)v3 + 3);
  uint64_t v5 = (void *)*((void *)v3 + 4);
  *uint64_t v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 3) = 0;
  *((void *)v3 + 4) = 0;
  llvm::Value::deleteValue((void (**)(void))v3, v6);
  return v2;
}

void llvm::Registry<llvm::GCStrategy>::Add<anonymous namespace'::ErlangGC>::CtorFn()
{
}

void anonymous namespace'::ErlangGC::~ErlangGC(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::GCStrategy::isGCManagedPointer()
{
  return 0;
}

void llvm::GCStrategy::~GCStrategy(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::Registry<llvm::GCStrategy>::Add<anonymous namespace'::OcamlGC>::CtorFn()
{
}

void anonymous namespace'::OcamlGC::~OcamlGC(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::Registry<llvm::GCStrategy>::Add<anonymous namespace'::ShadowStackGC>::CtorFn()
{
}

void anonymous namespace'::ShadowStackGC::~ShadowStackGC(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::Registry<llvm::GCStrategy>::Add<anonymous namespace'::StatepointGC>::CtorFn()
{
}

void anonymous namespace'::StatepointGC::~StatepointGC(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t anonymous namespace'::StatepointGC::isGCManagedPointer(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void llvm::Registry<llvm::GCStrategy>::Add<anonymous namespace'::CoreCLRGC>::CtorFn()
{
}

void anonymous namespace'::CoreCLRGC::~CoreCLRGC(void **this)
{
  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC2D80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t anonymous namespace'::CoreCLRGC::isGCManagedPointer(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void _GLOBAL__sub_I_BuiltinGCs_cpp()
{
  _MergedGlobals_35 = (uint64_t)"erlang";
  unk_26B41CA40 = 6;
  qword_26B41CA48 = (uint64_t)"erlang-compatible garbage collector";
  unk_26B41CA50 = 35;
  qword_26B41CA68 = (uint64_t)&_MergedGlobals_35;
  uint64_t v0 = (void *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail) {
    uint64_t v0 = &llvm::Registry<llvm::GCStrategy>::Head;
  }
  *uint64_t v0 = &qword_26B41CA60;
  qword_26B41CA70 = (uint64_t)"ocaml";
  qword_26B41CA78 = 5;
  unk_26B41CA80 = "ocaml 3.10-compatible GC";
  qword_26B41CA88 = 24;
  qword_26B41CAA0 = (uint64_t)&qword_26B41CA70;
  qword_26B41CA98 = (uint64_t)&qword_26B41CAD0;
  qword_26B41CA60 = (uint64_t)&qword_26B41CA98;
  qword_26B41CAA8 = (uint64_t)"shadow-stack";
  qword_26B41CAB0 = 12;
  unk_26B41CAB8 = "Very portable GC for uncooperative code generators";
  qword_26B41CAC0 = 50;
  qword_26B41CAD8 = (uint64_t)&qword_26B41CAA8;
  qword_26B41CAE0 = (uint64_t)"statepoint-example";
  qword_26B41CAE8 = 18;
  unk_26B41CAF0 = "an example strategy for statepoint";
  qword_26B41CAF8 = 34;
  qword_26B41CB10 = (uint64_t)&qword_26B41CAE0;
  qword_26B41CB18 = (uint64_t)"coreclr";
  qword_26B41CAD0 = (uint64_t)&qword_26B41CB08;
  qword_26B41CB20 = 7;
  unk_26B41CB28 = "CoreCLR-compatible GC";
  qword_26B41CB30 = 21;
  qword_26B41CB40 = 0;
  qword_26B41CB48 = (uint64_t)&qword_26B41CB18;
  qword_26B41CB08 = &qword_26B41CB40;
  llvm::Registry<llvm::GCStrategy>::Tail = (uint64_t)&qword_26B41CB40;
}

llvm::ConstantExpr *llvm::ConstantFoldCastInstruction(llvm *this, void **a2, llvm::Constant ****a3, llvm::Type *a4)
{
  v59[16] = *MEMORY[0x263EF8340];
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 12)
  {
    return (llvm::ConstantExpr *)llvm::PoisonValue::get((llvm::PoisonValue *)a3, (llvm::Type *)a2);
  }
  if ((v5 - 11) > 1)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    {
      int v11 = *((unsigned __int8 *)a3 + 8);
      if (v11 != 10 && this != 50 && v11 != 11) {
        goto LABEL_8;
      }
    }
    int v12 = *((unsigned __int8 *)a2 + 16);
    if (v12 == 5)
    {
      uint64_t v13 = *((unsigned __int16 *)a2 + 9);
      if ((v13 - 38) > 0xC)
      {
        if (this != 50 && v13 == 34 && *((unsigned __int8 *)a2 + 17) <= 3u && ((*a2)[1] & 0xFE) != 0x12)
        {
          int v50 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          int v51 = v50 - 1;
          if (v50 == 1)
          {
            uint64_t v52 = 1;
LABEL_91:
            v54 = (llvm::ConstantExpr *)a2[-4 * v52];
            return llvm::ConstantExpr::getPointerCast(v54, (llvm::Constant *)a3, v9, v10);
          }
          v53 = a2 + 4;
          while ((llvm::Constant::isNullValue((llvm::Constant *)v53[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]) & 1) != 0)
          {
            v53 += 4;
            if (!--v51)
            {
              uint64_t v52 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              goto LABEL_91;
            }
          }
        }
      }
      else
      {
        isEliminableCastPair = (llvm::ConstantExpr *)llvm::CastInst::isEliminableCastPair(v13, (uint64_t)this, *a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (llvm::Type *)*a2, (uint64_t)a3, 0, (llvm::Type *)(**a3 + 252), 0);
        if (isEliminableCastPair)
        {
          v16 = (llvm::ConstantExpr *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          return llvm::ConstantExpr::getCast(isEliminableCastPair, v16, (llvm::Constant ***)a3, 0, v15);
        }
      }
      int v12 = *((unsigned __int8 *)a2 + 16);
    }
    BOOL v17 = v12 == 15 || v12 == 10;
    if (v17 && (a3[1] & 0xFE) == 0x12 && *((_DWORD *)a3 + 8) == *((_DWORD *)*a2 + 8))
    {
      v18 = a3[3];
      SplatValue = (llvm::ConstantExpr *)llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
      if (SplatValue)
      {
        uint64_t v21 = *((unsigned int *)a3 + 8);
        uint64_t v22 = *((unsigned __int8 *)a3 + 8) == 19;
        Cast = llvm::ConstantExpr::getCast(this, SplatValue, v18, 0, v20);
        return (llvm::ConstantExpr *)llvm::ConstantVector::getSplat((llvm::Type *)(v21 | (v22 << 32)), (uint64_t)Cast, v24);
      }
      v57 = v59;
      uint64_t v58 = 0x1000000000;
      v39 = (llvm::Type *)*((unsigned int *)*a2 + 8);
      if (v39)
      {
        v40 = 0;
        v41 = (llvm::ConstantInt *)(*(void *)**a2 + 1992);
        do
        {
          v42 = (llvm::Constant *)llvm::ConstantInt::get(v41, v40);
          Element = (llvm::ConstantExpr *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v42, 0, v43, v44);
          v47 = llvm::ConstantExpr::getCast(this, Element, v18, 0, v46);
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v57, (uint64_t)v47);
          v40 = (llvm::Type *)((char *)v40 + 1);
        }
        while (v39 != v40);
        v48 = (uint64_t ****)v57;
        v49 = (llvm::Type *)v58;
      }
      else
      {
        v49 = 0;
        v48 = (uint64_t ****)v59;
      }
      uint64_t ConstantBytes = (uint64_t)llvm::ConstantVector::get(v48, v49);
      if (v57 != v59) {
        free(v57);
      }
    }
    else
    {
      uint64_t ConstantBytes = 0;
      switch((int)this)
      {
        case '\'':
          if (v12 != 16) {
            goto LABEL_95;
          }
          unsigned int v36 = *((_DWORD *)a3 + 2) >> 8;
          v35 = (llvm::IntegerType *)**a2;
          llvm::APInt::zext((llvm::APInt *)(a2 + 3), v36, (llvm::APInt *)&v57);
          goto LABEL_61;
        case '(':
          if (v12 != 16) {
            goto LABEL_95;
          }
          unsigned int v37 = *((_DWORD *)a3 + 2) >> 8;
          v35 = (llvm::IntegerType *)**a2;
          llvm::APInt::sext((llvm::APInt *)(a2 + 3), v37, (llvm::APInt *)&v57);
          goto LABEL_61;
        case ')':
        case '*':
          if (v12 != 17) {
            goto LABEL_95;
          }
          LOBYTE(v55) = 0;
          llvm::APInt::APInt((llvm::APInt *)&v57, *((_DWORD *)a3 + 2) >> 8, 0);
          BYTE4(v58) = this == 41;
          if (llvm::APFloat::convertToInteger((uint64_t)(a2 + 3), (uint64_t)&v57, 0, &v55) == 1)
          {
            uint64_t v29 = llvm::PoisonValue::get((llvm::PoisonValue *)a3, v26);
            goto LABEL_81;
          }
          v38 = (llvm::IntegerType *)**a2;
          goto LABEL_80;
        case '+':
        case ',':
          if (v12 != 16) {
            goto LABEL_95;
          }
          v30 = *(_UNKNOWN **)((char *)&off_265597350
                             + ((uint64_t)((unint64_t)*((unsigned int *)a3 + 2) << 56) >> 53));
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
          if ((_BYTE)v31) {
          llvm::APInt::APInt((llvm::APInt *)&v55, PrimitiveSizeInBits, 0);
          }
          llvm::APFloat::Storage::Storage<llvm::APInt const&>((llvm::detail::IEEEFloat *)&v58, v30, &v55);
          if (v56 >= 0x41 && v55) {
            MEMORY[0x263E50080](v55, 0x1000C8000313F17);
          }
          llvm::APFloat::convertFromAPInt((uint64_t)&v57, (uint64_t)(a2 + 3), this == 44, 1);
          uint64_t ConstantBytes = llvm::ConstantFP::get(**a2, (uint64_t)&v57);
          goto LABEL_53;
        case '-':
        case '.':
          if (v12 != 17) {
            goto LABEL_95;
          }
          llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v58, (const llvm::APFloat::Storage *)(a2 + 4));
          llvm::APFloat::convert((uint64_t)&v57, *(_UNKNOWN **)((char *)&off_265597350 + ((uint64_t)((unint64_t)*((unsigned int *)a3 + 2) << 56) >> 53)), 1, &v55);
          uint64_t ConstantBytes = llvm::ConstantFP::get(**a2, (uint64_t)&v57);
LABEL_53:
          llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v58);
          return (llvm::ConstantExpr *)ConstantBytes;
        case '/':
          if (!llvm::Constant::isNullValue((llvm::Constant *)a2)) {
            goto LABEL_95;
          }
          return (llvm::ConstantExpr *)llvm::ConstantInt::get((llvm::ConstantInt *)a3, 0);
        case '0':
          if (!llvm::Constant::isNullValue((llvm::Constant *)a2)) {
            goto LABEL_95;
          }
          return (llvm::ConstantExpr *)llvm::ConstantPointerNull::get((uint64_t)a3);
        case '1':
          return (llvm::ConstantExpr *)FoldBitCast((uint64_t ***)a2, (llvm::Type *)a3);
        case '2':
          return (llvm::ConstantExpr *)ConstantBytes;
        default:
          int v33 = *((_DWORD *)*a2 + 2);
          if ((v33 & 0xFE) == 0x12) {
            goto LABEL_95;
          }
          unsigned int v34 = *((_DWORD *)a3 + 2);
          if (v12 == 16)
          {
            v35 = (llvm::IntegerType *)**a2;
            llvm::APInt::trunc((llvm::APInt *)(a2 + 3), v34 >> 8, (llvm::APInt *)&v57);
LABEL_61:
            v38 = v35;
LABEL_80:
            uint64_t v29 = llvm::ConstantInt::get(v38, (llvm::APInt *)&v57, v27, v28);
LABEL_81:
            uint64_t ConstantBytes = v29;
            if (v58 >= 0x41 && v57) {
              MEMORY[0x263E50080](v57, 0x1000C8000313F17);
            }
          }
          else if ((((unsigned __int16)v34 | (unsigned __int16)v33) & 0x700) != 0 {
                 || (uint64_t ConstantBytes = (uint64_t)ExtractConstantBytes((llvm::Constant *)a2, 0, v34 >> 11)) == 0)
          }
          {
LABEL_95:
            uint64_t ConstantBytes = 0;
          }
          break;
      }
    }
    return (llvm::ConstantExpr *)ConstantBytes;
  }
  if (this <= 0x2C && ((1 << (char)this) & 0x198000000000) != 0)
  {
LABEL_8:
    return (llvm::ConstantExpr *)llvm::Constant::getNullValue((llvm::Constant *)a3, (llvm::Type *)a2);
  }
  return (llvm::ConstantExpr *)llvm::UndefValue::get((llvm::UndefValue *)a3, (llvm::Type *)a2);
}

llvm::Constant *ExtractConstantBytes(llvm::Constant *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = (llvm::Type *)(8 * a2);
  unint64_t v7 = (llvm::LLVMContext *)(8 * a3);
  unsigned int v8 = a3 + a2;
  unsigned int v9 = 8 * (a3 + a2);
  while (1)
  {
    __n128 v10 = a1;
    int v11 = *((unsigned __int8 *)a1 + 16);
    if (v11 != 5)
    {
      if (v11 != 16) {
        return 0;
      }
      unsigned int v28 = *((_DWORD *)a1 + 8);
      unsigned int v56 = v28;
      if (v28 > 0x40) {
        operator new[]();
      }
      unint64_t v29 = *((void *)a1 + 3);
      unint64_t v55 = v29;
      if (a2)
      {
        if (v28 == v6) {
          unint64_t v55 = 0;
        }
        else {
          unint64_t v55 = v29 >> (char)v6;
        }
      }
      llvm::APInt::trunc((llvm::APInt *)&v55, v7, (llvm::APInt *)&v53);
      if (v56 >= 0x41 && v55) {
        MEMORY[0x263E50080](v55, 0x1000C8000313F17);
      }
      unint64_t v55 = v53;
      unsigned int v56 = v54;
      a1 = (llvm::Constant *)llvm::ConstantInt::get(**(llvm::IntegerType ***)a1, (llvm::APInt *)&v55, v48, v49);
      if (v56 >= 0x41 && v55) {
        MEMORY[0x263E50080]();
      }
      return a1;
    }
    int v12 = *((unsigned __int16 *)a1 + 9);
    if (v12 != 39)
    {
      a1 = 0;
      switch(v12)
      {
        case 25:
          uint64_t v22 = ((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[4];
          if (v22) {
            BOOL v23 = *(unsigned char *)(v22 + 16) == 16;
          }
          else {
            BOOL v23 = 0;
          }
          if (!v23) {
            return 0;
          }
          unsigned int v24 = *(_DWORD *)(v22 + 32);
          unsigned int v56 = v24;
          if (v24 > 0x40) {
            operator new[]();
          }
          unint64_t v25 = *(void *)(v22 + 24);
          if ((v25 & 7) != 0) {
            return 0;
          }
          unint64_t v26 = v25 >> 3;
          if (v24 == 3) {
            unint64_t v27 = 0;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27 >= v8) {
            goto LABEL_78;
          }
          if (v27 > a2) {
            return 0;
          }
          __n128 v46 = (llvm::Constant *)*((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
          unsigned int v47 = a2 - v27;
          goto LABEL_80;
        case 26:
          uint64_t v30 = ((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[4];
          if (v30) {
            BOOL v31 = *(unsigned char *)(v30 + 16) == 16;
          }
          else {
            BOOL v31 = 0;
          }
          if (!v31) {
            return 0;
          }
          int v32 = *(_DWORD *)(*(void *)v10 + 8) >> 11;
          unsigned int v33 = *(_DWORD *)(v30 + 32);
          unsigned int v56 = v33;
          if (v33 > 0x40) {
            operator new[]();
          }
          unint64_t v34 = *(void *)(v30 + 24);
          if ((v34 & 7) != 0) {
            return 0;
          }
          unint64_t v35 = v34 >> 3;
          if (v33 == 3) {
            unint64_t v36 = 0;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36 < v32 - a2)
          {
            if (v36 > v32 - v8) {
              return 0;
            }
            __n128 v46 = (llvm::Constant *)*((void *)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
            unsigned int v47 = v36 + a2;
LABEL_80:
            uint64_t ConstantBytes = (llvm::Constant *)ExtractConstantBytes(v46, v47, a3);
          }
          else
          {
LABEL_78:
            int v50 = (llvm::Constant *)llvm::IntegerType::get(**(llvm::IntegerType ***)v10, v7);
            uint64_t ConstantBytes = (llvm::Constant *)llvm::Constant::getNullValue(v50, v51);
          }
          a1 = ConstantBytes;
          break;
        case 28:
          unsigned int v37 = (llvm::Constant *)ExtractConstantBytes(((llvm::Constant **)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[4], a2, a3);
          a1 = v37;
          if (!v37 || (llvm::Constant::isNullValue(v37) & 1) != 0) {
            return a1;
          }
          uint64_t v38 = ExtractConstantBytes(*((llvm::Constant **)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v38) {
            return 0;
          }
          v40 = (llvm::PoisonValue **)v38;
          uint64_t v41 = 28;
          goto LABEL_57;
        case 29:
          v42 = (unsigned char *)ExtractConstantBytes(((llvm::Constant **)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF))[4], a2, a3);
          a1 = (llvm::Constant *)v42;
          if (!v42 || v42[16] == 16 && llvm::APInt::isAllOnes((llvm::APInt *)(v42 + 24))) {
            return a1;
          }
          uint64_t v43 = ExtractConstantBytes(*((llvm::Constant **)v10 - 4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v43) {
            return 0;
          }
          v40 = (llvm::PoisonValue **)v43;
          uint64_t v41 = 29;
LABEL_57:
          return llvm::ConstantExpr::get((llvm::ConstantExpr *)v41, v40, a1, 0, 0, v39);
        default:
          return a1;
      }
      return a1;
    }
    uint64_t v13 = (llvm::ConstantInt ***)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    a1 = (llvm::Constant *)*v13;
    BOOL v14 = **v13;
    unsigned int v15 = *((_DWORD *)v14 + 2);
    if (v6 >= v15 >> 8) {
      break;
    }
    unsigned int v16 = v15 >> 8;
    if (!a2 && v7 == v16) {
      return a1;
    }
    if ((v15 & 0x700) != 0 || v9 > v16)
    {
      if (v9 < v16)
      {
        if (a2)
        {
          v18 = (llvm::Constant *)llvm::ConstantInt::get(v14, v6);
          a1 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1A, (llvm::PoisonValue **)a1, v18, 0, 0, v19);
        }
        llvm::IntegerType::get(**(llvm::IntegerType ***)v10, v7);
        return (llvm::Constant *)getFoldedCast(38, a1, v20);
      }
      return 0;
    }
  }
  __n128 v44 = (llvm::Constant *)llvm::IntegerType::get(**(llvm::IntegerType ***)v10, (llvm::LLVMContext *)(8 * a3));
  return (llvm::Constant *)llvm::Constant::getNullValue(v44, v45);
}

uint64_t ***FoldBitCast(uint64_t ***a1, llvm::Type *a2)
{
  v42[16] = *MEMORY[0x263EF8340];
  v39 = a1;
  int v3 = *a1;
  if (*a1 == (uint64_t **)a2) {
    return a1;
  }
  if (v3) {
    BOOL v5 = *((_DWORD *)v3 + 2) == 15;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    BOOL v6 = (*((_DWORD *)a2 + 2) ^ *((_DWORD *)v3 + 2)) > 0xFF || a2 == 0;
    BOOL v7 = !v6 && *((_DWORD *)a2 + 2) == 15;
    if (v7 && v3[3] && *((void *)a2 + 3) && llvm::Type::isSized(*v3[2], 0))
    {
      v40 = v42;
      uint64_t v41 = 0x800000000;
      NullValue = (llvm::Type **)llvm::Constant::getNullValue((llvm::Constant *)(**(void **)a2 + 1992), a2);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v40, (uint64_t)NullValue);
      uint64_t v9 = *v3[2];
      if (v9)
      {
        while (1)
        {
          if (v9 == **((void **)a2 + 2)) {
            goto LABEL_29;
          }
          int v10 = *(_DWORD *)(v9 + 8);
          if (v10 == 17) {
            goto LABEL_25;
          }
          if (v10 != 16) {
            break;
          }
          if (!*(_DWORD *)(v9 + 12)) {
            goto LABEL_28;
          }
          int v11 = *(uint64_t **)(v9 + 16);
LABEL_26:
          uint64_t v9 = *v11;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v40, (uint64_t)NullValue);
          if (!v9) {
            goto LABEL_29;
          }
        }
        if ((v10 & 0xFE) != 0x12)
        {
LABEL_28:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v40, (uint64_t)NullValue);
          uint64_t v9 = 0;
          goto LABEL_29;
        }
LABEL_25:
        int v11 = (uint64_t *)(v9 + 24);
        goto LABEL_26;
      }
LABEL_29:
      uint64_t v12 = **((void **)a2 + 2);
      if (v9 == v12) {
        NullValue = (llvm::Type **)llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)*v3[2], (uint64_t *)a1, (llvm::Value *)v40, v41, 1, 0, 0);
      }
      if (v40 != v42) {
        free(v40);
      }
      if (v9 == v12) {
        return (uint64_t ***)NullValue;
      }
    }
  }
  if (!a2 || (*((_DWORD *)a2 + 2) & 0xFE) != 0x12)
  {
    int v13 = *((unsigned __int8 *)a1 + 16);
LABEL_42:
    unsigned int v16 = *((_DWORD *)a2 + 2);
    if (v13 != 16)
    {
      if (v13 == 17)
      {
        NullValue = 0;
        if (v16 == 13 && *((unsigned char *)*a1 + 8) != 6)
        {
          v18 = (llvm::IntegerType *)**a1;
          llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v40, (llvm::APFloat *)(a1 + 3));
          NullValue = (llvm::Type **)llvm::ConstantInt::get(v18, (llvm::APInt *)&v40, v19, v20);
          if (v41 >= 0x41)
          {
            if (v40) {
              MEMORY[0x263E50080](v40, 0x1000C8000313F17);
            }
          }
        }
        return (uint64_t ***)NullValue;
      }
      if (v13 == 19) {
        return (uint64_t ***)llvm::ConstantPointerNull::get((uint64_t)a2);
      }
      return 0;
    }
    if (v16 != 13)
    {
      if (v16 < 4 || v16 == 5 || (NullValue = 0, (v16 & 0xFFFFFFFD) == 4) && v16 != 6)
      {
        uint64_t v21 = *(void *)a2;
        llvm::APFloat::Storage::Storage<llvm::APInt const&>((llvm::detail::IEEEFloat *)&v41, *(&off_265597350 + (char)v16), (const llvm::APInt **)a1 + 3);
        NullValue = (llvm::Type **)llvm::ConstantFP::get(v21, (uint64_t)&v40);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v41);
      }
      return (uint64_t ***)NullValue;
    }
    return a1;
  }
  int v13 = *((unsigned __int8 *)a1 + 16);
  if (*a1 && ((*a1)[1] & 0xFE) == 0x12)
  {
    if (v13 == 13) {
      return (uint64_t ***)llvm::Constant::getNullValue(a2, a2);
    }
    if (llvm::Constant::isAllOnesValue((llvm::Constant *)a1)) {
      return (uint64_t ***)llvm::Constant::getAllOnesValue(a2, v14);
    }
    if (llvm::Constant::isNullValue((llvm::Constant *)a1)) {
      return (uint64_t ***)llvm::Constant::getNullValue(a2, a2);
    }
    if (*((unsigned char *)a2 + 8) != 19)
    {
      uint64_t v22 = (llvm::Type *)*((unsigned int *)a2 + 8);
      if (v22 == *((_DWORD *)*a1 + 8))
      {
        uint64_t v23 = *((void *)a2 + 3);
        SplatValue = (void *)llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
        if (SplatValue)
        {
          uint64_t FoldedCast = (uint64_t)SplatValue;
          unsigned int v28 = (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((unsigned char *)a2 + 8) == 19) << 32));
          if (*SplatValue != v23) {
            uint64_t FoldedCast = getFoldedCast(49, SplatValue, v26);
          }
          return (uint64_t ***)llvm::ConstantVector::getSplat(v28, FoldedCast, v25);
        }
        v40 = v42;
        uint64_t v41 = 0x1000000000;
        if (v22)
        {
          uint64_t v30 = 0;
          BOOL v31 = (llvm::ConstantInt *)(***a1 + 1992);
          do
          {
            int v32 = (llvm::Constant *)llvm::ConstantInt::get(v31, v30);
            Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a1, v32, 0, v33, v34);
            if (*Element != v23) {
              Element = (void *)getFoldedCast(49, Element, v36);
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v40, (uint64_t)Element);
            uint64_t v30 = (llvm::Type *)((char *)v30 + 1);
          }
          while (v22 != v30);
          unsigned int v37 = (uint64_t ****)v40;
          uint64_t v38 = (llvm::Type *)v41;
        }
        else
        {
          uint64_t v38 = 0;
          unsigned int v37 = (uint64_t ****)v42;
        }
        NullValue = (llvm::Type **)llvm::ConstantVector::get(v37, v38);
        if (v40 != v42) {
          free(v40);
        }
        return (uint64_t ***)NullValue;
      }
    }
    return 0;
  }
  if ((v13 & 0xFE) != 0x10) {
    goto LABEL_42;
  }
  NullValue = (llvm::Type **)llvm::ConstantVector::get(&v39, (llvm::Type *)1);
  if (*NullValue != a2) {
    return (uint64_t ***)getFoldedCast(49, NullValue, v17);
  }
  return (uint64_t ***)NullValue;
}

llvm::Constant *llvm::ConstantFoldSelectInstruction(llvm *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  v32[16] = *MEMORY[0x263EF8340];
  if (llvm::Constant::isNullValue(this)) {
    return a3;
  }
  if (llvm::Constant::isAllOnesValue(this)) {
    return (llvm::Constant *)a2;
  }
  int v9 = *((unsigned __int8 *)this + 16);
  if (!this || v9 != 10)
  {
LABEL_29:
    if (v9 == 12) {
      return (llvm::Constant *)llvm::PoisonValue::get(*a2, v8);
    }
    if ((v9 - 11) <= 1)
    {
      if (*((unsigned __int8 *)a2 + 16) - 11 >= 2) {
        return a3;
      }
      else {
        return (llvm::Constant *)a2;
      }
    }
    if (a2 == (llvm::PoisonValue **)a3) {
      return (llvm::Constant *)a2;
    }
    int v28 = *((unsigned __int8 *)a2 + 16);
    if (v28 != 12)
    {
      int v29 = *((unsigned __int8 *)a3 + 16);
      if (v29 == 12) {
        return (llvm::Constant *)a2;
      }
      if ((v28 - 11) > 1) {
        goto LABEL_42;
      }
      if (!llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a3))
      {
        int v29 = *((unsigned __int8 *)a3 + 16);
LABEL_42:
        if ((v29 - 11) > 1) {
          return 0;
        }
        if (llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a2)) {
          return (llvm::Constant *)a2;
        }
        return 0;
      }
    }
    return a3;
  }
  int v10 = *(unsigned int **)this;
  uint64_t v30 = v32;
  uint64_t v31 = 0x1000000000;
  int v11 = (llvm::Type *)v10[8];
  if (!v11)
  {
    unsigned int v24 = 0;
    unint64_t v25 = (uint64_t ****)v32;
LABEL_23:
    BOOL v7 = (llvm::Type *)llvm::ConstantVector::get(v25, (llvm::Type *)v24);
    char v26 = 1;
    unint64_t v25 = (uint64_t ****)v30;
    goto LABEL_25;
  }
  BOOL v7 = 0;
  uint64_t v12 = (llvm::ConstantInt *)(**(void **)v10 + 1992);
  int v13 = this;
  do
  {
    BOOL v14 = (llvm::Constant *)llvm::ConstantInt::get(v12, v7);
    Element = (llvm::PoisonValue **)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v14, 0, v15, v16);
    v18 = (llvm::Constant *)llvm::ConstantInt::get(v12, v7);
    uint64_t v21 = (llvm::PoisonValue **)llvm::ConstantExpr::getExtractElement(a3, v18, 0, v19, v20);
    uint64_t v22 = (unsigned __int8 *)*((void *)v13 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    int v23 = v22[16];
    if (v23 == 12)
    {
      Element = (llvm::PoisonValue **)llvm::PoisonValue::get(*Element, v8);
    }
    else if (Element != v21)
    {
      if ((v23 - 11) > 1)
      {
        if (v23 != 16) {
          break;
        }
        if (llvm::Constant::isNullValue((llvm::Constant *)v22)) {
          Element = v21;
        }
      }
      else if (*((unsigned __int8 *)Element + 16) - 11 >= 2)
      {
        Element = v21;
      }
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, (uint64_t)Element);
    BOOL v7 = (llvm::Type *)((char *)v7 + 1);
    int v13 = (llvm *)((char *)v13 + 32);
  }
  while (v11 != v7);
  unsigned int v24 = v31;
  unint64_t v25 = (uint64_t ****)v30;
  if (v31 == v10[8]) {
    goto LABEL_23;
  }
  char v26 = 0;
LABEL_25:
  if (v25 != v32) {
    free(v25);
  }
  if ((v26 & 1) == 0)
  {
    int v9 = *((unsigned __int8 *)this + 16);
    goto LABEL_29;
  }
  return v7;
}

BOOL llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()(unsigned __int8 *a1)
{
  unsigned int v2 = a1[16];
  if (v2 < 0x14 && ((0xB1029u >> v2) & 1) != 0) {
    return (0xB0009u >> v2) & 1;
  }
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12
    && (llvm::Constant::containsPoisonElement((llvm::Constant *)a1) & 1) == 0)
  {
    return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
  }
  return 0;
}

uint64_t llvm::ConstantFoldExtractElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4, __n128 a5)
{
  v41[8] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)this;
  int v6 = *((unsigned __int8 *)this + 16);
  if (v6 == 12 || (int v8 = *((unsigned __int8 *)a2 + 16), (v8 - 11) <= 1))
  {
LABEL_3:
    int v9 = *(llvm::PoisonValue **)(v5 + 24);
    return llvm::PoisonValue::get(v9, a2);
  }
  if ((v6 - 11) > 1)
  {
    if (v8 == 16)
    {
      if (*(unsigned char *)(v5 + 8) == 18 && v5 != 0)
      {
        unint64_t v14 = *(unsigned int *)(v5 + 32);
        unsigned int v15 = (unint64_t *)((char *)a2 + 24);
        unsigned int v16 = *((_DWORD *)a2 + 8);
        if (v16 >= 0x41)
        {
          if (v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40) {
            goto LABEL_3;
          }
          unsigned int v15 = (unint64_t *)*v15;
        }
        if (*v15 >= v14) {
          goto LABEL_3;
        }
      }
      if (v6 == 5)
      {
        int v17 = *((unsigned __int16 *)this + 9);
        if (v17 == 62)
        {
          uint64_t v25 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
          if (v25) {
            BOOL v26 = *(unsigned char *)(v25 + 16) == 16;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26)
          {
            if (*(_DWORD *)(v25 + 32) > 0x40u) {
              operator new[]();
            }
            uint64_t v30 = *(void **)(v25 + 24);
            LODWORD(v40) = *(_DWORD *)(v25 + 32);
            v39 = v30;
            BYTE4(v40) = 1;
            if (*((_DWORD *)a2 + 8) > 0x40u) {
              operator new[]();
            }
            uint64_t v31 = *((void *)a2 + 3);
            unsigned int v37 = *((_DWORD *)a2 + 8);
            uint64_t v36 = v31;
            char v38 = 1;
            int v32 = llvm::APSInt::compareValues((llvm::APSInt *)&v39, (const llvm::APSInt *)&v36, a3);
            int v34 = v32;
            if (v37 >= 0x41 && v36) {
              MEMORY[0x263E50080](v36, 0x1000C8000313F17);
            }
            if (v40 >= 0x41 && v39) {
              MEMORY[0x263E50080](v39, 0x1000C8000313F17);
            }
            unint64_t v35 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
            if (v34) {
              return llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v35, a2, 0, v33);
            }
            else {
              return *((void *)v35 + 4);
            }
          }
        }
        else if (v17 == 34)
        {
          v39 = v41;
          a5.n128_u64[0] = 0x800000000;
          uint64_t v40 = 0x800000000;
          int v18 = *((_DWORD *)this + 5);
          unint64_t v19 = v18 & 0x7FFFFFF;
          if ((v18 & 0x7FFFFFFu) >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v19, 8);
            LODWORD(v19) = *((_DWORD *)this + 5) & 0x7FFFFFF;
          }
          if (v19)
          {
            uint64_t v20 = v19;
            uint64_t v21 = this;
            while (1)
            {
              uint64_t Element = *((void *)v21 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
              if ((*(_DWORD *)(*(void *)Element + 8) & 0xFE) == 0x12)
              {
                uint64_t Element = llvm::ConstantExpr::getExtractElement(*((llvm::ConstantExpr **)v21 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), a2, 0, a4);
                if (!Element) {
                  break;
                }
              }
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v39, Element);
              uint64_t v21 = (llvm *)((char *)v21 + 32);
              if (!--v20) {
                goto LABEL_29;
              }
            }
            Aggregateuint64_t Element = 0;
          }
          else
          {
LABEL_29:
            uint64_t v23 = 24;
            if (*((unsigned char *)this + 16) == 62) {
              uint64_t v23 = 64;
            }
            Aggregateuint64_t Element = llvm::ConstantExpr::getWithOperands((uint64_t)this, (llvm::ConstantExpr **)v39, v40, *(llvm::Constant ****)(v5 + 24), 0, *(llvm::GetElementPtrInst **)((char *)this + v23), a5);
          }
          if (v39 != v41) {
            free(v39);
          }
          return AggregateElement;
        }
      }
      Aggregateuint64_t Element = llvm::Constant::getAggregateElement(this, a2);
      if (AggregateElement) {
        return AggregateElement;
      }
      unint64_t v27 = (llvm::Constant *)((char *)a2 + 24);
      unint64_t v28 = *(unsigned int *)(v5 + 32);
      unsigned int v29 = *((_DWORD *)a2 + 8);
      if (v29 < 0x41) {
        goto LABEL_40;
      }
      if (v29 - llvm::APInt::countLeadingZerosSlowCase(v27) <= 0x40)
      {
        unint64_t v27 = *(llvm::APInt **)v27;
LABEL_40:
        if (*(void *)v27 < v28)
        {
          Aggregateuint64_t Element = llvm::Constant::getSplatValue(this, 0);
          if (AggregateElement) {
            return AggregateElement;
          }
        }
      }
    }
    return 0;
  }
  int v11 = *(llvm::UndefValue **)(v5 + 24);
  return llvm::UndefValue::get(v11, a2);
}

llvm::ConstantExpr *llvm::ConstantFoldInsertElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t v4 = this;
  v24[16] = *MEMORY[0x263EF8340];
  int v5 = *((unsigned __int8 *)a3 + 16);
  if ((v5 - 11) > 1)
  {
    if (*((unsigned char *)this + 16) == 13)
    {
      if (llvm::Constant::isNullValue(a2)) {
        return v4;
      }
      int v5 = *((unsigned __int8 *)a3 + 16);
    }
    if (v5 != 16) {
      return 0;
    }
    int v10 = *(unsigned int **)v4;
    if (*(unsigned char *)(*(void *)v4 + 8) == 19) {
      return 0;
    }
    unint64_t v11 = v10[8];
    uint64_t v12 = (unint64_t *)((char *)a3 + 24);
    unsigned int v13 = *((_DWORD *)a3 + 8);
    unint64_t v14 = (unint64_t *)((char *)a3 + 24);
    if (v13 >= 0x41)
    {
      if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) > 0x40) {
        goto LABEL_28;
      }
      unint64_t v14 = (unint64_t *)*v12;
    }
    if (*v14 < v11)
    {
      uint64_t v22 = v24;
      uint64_t v23 = 0x1000000000;
      if (v11 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v11, 8);
        int v10 = *(unsigned int **)v4;
        unsigned int v13 = *((_DWORD *)a3 + 8);
      }
      if (v13 >= 0x41) {
        uint64_t v12 = (unint64_t *)*v12;
      }
      if (v11)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **(void **)v10 + 1992;
        int v17 = (unint64_t *)*v12;
        do
        {
          uint64_t Element = a2;
          if (v17 != (unint64_t *)v15)
          {
            unint64_t v19 = (llvm::Constant *)llvm::ConstantInt::get(v16, v15);
            uint64_t Element = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(v4, v19, 0, v20, v21);
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v22, (uint64_t)Element);
          ++v15;
        }
        while (v11 != v15);
      }
      uint64_t v4 = (llvm::ConstantExpr *)llvm::ConstantVector::get((uint64_t ****)v22, (llvm::Type *)v23);
      if (v22 != v24) {
        free(v22);
      }
      return v4;
    }
LABEL_28:
    int v6 = (llvm::PoisonValue *)v10;
    goto LABEL_3;
  }
  int v6 = *(llvm::PoisonValue **)this;
LABEL_3:
  return (llvm::ConstantExpr *)llvm::PoisonValue::get(v6, a2);
}

uint64_t llvm::ConstantFoldShuffleVectorInstruction(llvm::ConstantExpr *a1, llvm::ConstantExpr *a2, int *a3, BOOL a4)
{
  LODWORD(v4) = a4;
  v35[32] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  int v6 = *(unsigned __int8 *)(*(void *)a1 + 8);
  BOOL v7 = *(uint64_t ***)(*(void *)a1 + 24);
  if (a4)
  {
    int v8 = a3;
    uint64_t v11 = 4 * a4;
    uint64_t v12 = 4 * a4;
    unsigned int v13 = a3;
    while (*v13 == -1)
    {
      ++v13;
      v12 -= 4;
      if (!v12) {
        goto LABEL_5;
      }
    }
    int v17 = a3;
    do
    {
      if (*v17) {
        goto LABEL_17;
      }
      ++v17;
      v11 -= 4;
    }
    while (v11);
    int v18 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)v5 + 1992), 0, 0, a4);
    uint64_t Element = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(a1, v18, 0, v19);
    if (llvm::Constant::isNullValue(Element))
    {
      llvm::VectorType::get(v7, (llvm::Type *)(v4 | ((unint64_t)(v6 == 19) << 32)));
      return llvm::ConstantAggregateZero::get(v21, v22);
    }
    if (v6 == 19)
    {
      int v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_17:
      if (v6 == 19) {
        return 0;
      }
      unsigned int v24 = *(_DWORD *)(v5 + 32);
      unsigned int v33 = v35;
      uint64_t v34 = 0x2000000000;
      uint64_t v4 = v4;
      if (v4)
      {
        do
        {
          BOOL v26 = (llvm::Type *)*v8++;
          uint64_t v25 = v26;
          if (v26 == -1 || v25 >= 2 * v24)
          {
            uint64_t v30 = llvm::UndefValue::get((llvm::UndefValue *)v7, v25);
          }
          else
          {
            if (v25 >= v24)
            {
              unint64_t v27 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)a2 + 1992), (llvm::Type *)(v25 - v24), 0, a4);
              unsigned int v29 = a2;
            }
            else
            {
              unint64_t v27 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(void ***)a1 + 1992), v25, 0, a4);
              unsigned int v29 = a1;
            }
            uint64_t v30 = llvm::ConstantExpr::getExtractElement(v29, v27, 0, v28);
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v33, v30);
          --v4;
        }
        while (v4);
        uint64_t v31 = (uint64_t ****)v33;
        int v32 = (llvm::Type *)v34;
      }
      else
      {
        int v32 = 0;
        uint64_t v31 = (uint64_t ****)v35;
      }
      uint64_t v23 = llvm::ConstantVector::get(v31, v32);
      if (v33 != v35) {
        free(v33);
      }
      return (uint64_t)v23;
    }
    return llvm::ConstantVector::getSplat(v4, Element);
  }
  else
  {
LABEL_5:
    llvm::VectorType::get(*(uint64_t ***)(*(void *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(v6 == 19) << 32)));
    return llvm::UndefValue::get(v14, v15);
  }
}

void *llvm::ConstantFoldInsertValueInstruction(llvm::Constant *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  v21[32] = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v7 = *(void *)a1;
    int v8 = *(unsigned __int8 *)(v7 + 8);
    if (v7) {
      BOOL v9 = v8 == 16;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      int v10 = *(_DWORD *)(v7 + 12);
    }
    else {
      int v10 = *(_DWORD *)(v7 + 32);
    }
    unint64_t v19 = v21;
    uint64_t v20 = 0x2000000000;
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a4 - 1;
      while (1)
      {
        Aggregateuint64_t Element = llvm::Constant::getAggregateElement(a1, v11);
        if (!AggregateElement) {
          break;
        }
        uint64_t inserted = AggregateElement;
        if (v11 == *a3) {
          uint64_t inserted = llvm::ConstantFoldInsertValueInstruction(AggregateElement, a2, a3 + 1, v12);
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v19, inserted);
        uint64_t v11 = (llvm::Type *)(v11 + 1);
        if (v10 == v11)
        {
          uint64_t v7 = *(void *)a1;
          int v8 = *(unsigned __int8 *)(*(void *)a1 + 8);
          uint64_t v15 = (llvm::Constant **)v19;
          uint64_t v16 = (unint64_t *)v20;
          goto LABEL_16;
        }
      }
      a2 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = (llvm::Constant **)v21;
LABEL_16:
      if (v8 == 16) {
        int v17 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v7, v15, v16);
      }
      else {
        int v17 = llvm::ConstantArray::get((llvm::PoisonValue *)v7, (llvm::Type *)v15, v16);
      }
      a2 = v17;
    }
    if (v19 != v21) {
      free(v19);
    }
  }
  return a2;
}

llvm::ConstantExpr *llvm::ConstantFoldUnaryInstruction(llvm *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  int v3 = (llvm::ConstantExpr *)a2;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t ***)a2;
  int v6 = *(_DWORD *)(*(void *)a2 + 8);
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12 || v6 == 19)
  {
    int v9 = a2[16];
    BOOL v8 = this == 12;
    if (this == 12 && (v9 - 11) < 2) {
      return v3;
    }
  }
  else
  {
    BOOL v8 = this == 12;
    int v9 = a2[16];
  }
  if (v9 == 17)
  {
    if (v8)
    {
      int v10 = *v5;
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v34, (const llvm::APFloat::Storage *)(a2 + 32));
      llvm::APFloat::changeSign((uint64_t)v33);
      if (v34 == &llvm::semPPCDoubleDouble)
      {
        uint64_t v31 = (uint64_t)&llvm::semPPCDoubleDouble;
        v32[0] = v35;
        uint64_t v34 = &llvm::semBogus;
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v31 = (uint64_t)&llvm::semBogus;
        llvm::detail::IEEEFloat::operator=((uint64_t)&v31, (uint64_t)&v34);
      }
      int v3 = (llvm::ConstantExpr *)llvm::ConstantFP::get((uint64_t)v10, (uint64_t)&v30);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v31);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v34);
      return v3;
    }
    return 0;
  }
  if (v6 != 18) {
    return 0;
  }
  uint64_t v11 = **v5;
  uint64_t SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (!SplatValue || (uint64_t v14 = llvm::ConstantFoldUnaryInstruction(this, SplatValue, v13)) == 0)
  {
    uint64_t v30 = v32;
    uint64_t v31 = 0x1000000000;
    unint64_t v19 = (llvm::Type *)*((unsigned int *)v5 + 8);
    if (v19)
    {
      uint64_t v20 = 0;
      __n128 v21 = (llvm::ConstantInt *)(v11 + 1992);
      while (1)
      {
        uint64_t v22 = (llvm::Constant *)llvm::ConstantInt::get(v21, v20);
        unsigned int Element = llvm::ConstantExpr::getExtractElement(v3, v22, 0, v23, v24);
        uint64_t v27 = llvm::ConstantFoldUnaryInstruction(this, Element, v26);
        if (!v27) {
          break;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, v27);
        uint64_t v20 = (llvm::Type *)((char *)v20 + 1);
        if (v19 == v20)
        {
          unint64_t v28 = (uint64_t ****)v30;
          unsigned int v29 = (llvm::Type *)v31;
          goto LABEL_27;
        }
      }
      int v3 = 0;
    }
    else
    {
      unsigned int v29 = 0;
      unint64_t v28 = (uint64_t ****)v32;
LABEL_27:
      int v3 = (llvm::ConstantExpr *)llvm::ConstantVector::get(v28, v29);
    }
    if (v30 != v32) {
      free(v30);
    }
    return v3;
  }
  uint64_t v16 = v14;
  int v17 = (llvm::Type *)(*((unsigned int *)v5 + 8) | ((unint64_t)(*((unsigned char *)v5 + 8) == 19) << 32));
  return (llvm::ConstantExpr *)llvm::ConstantVector::getSplat(v17, v16, v15);
}

llvm::Constant *llvm::ConstantFoldBinaryInstruction(llvm *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  v121[16] = *MEMORY[0x263EF8340];
  BinOpIdentity = (llvm::Constant *)llvm::ConstantExpr::getBinOpIdentity(this, *a2, 0, 0);
  if (BinOpIdentity)
  {
    if (BinOpIdentity == (llvm::Constant *)a2) {
      return a3;
    }
    if (BinOpIdentity == a3) {
      return (llvm::Constant *)a2;
    }
  }
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 12 || (int v13 = *((unsigned __int8 *)a3 + 16), v13 == 12))
  {
    uint64_t v14 = *a2;
LABEL_7:
    return (llvm::Constant *)llvm::PoisonValue::get(v14, v8);
  }
  uint64_t v16 = *a2;
  if ((*((_DWORD *)*a2 + 2) & 0xFE) != 0x12 || *((_DWORD *)*a2 + 2) == 19)
  {
    char v18 = v12 - 11;
    char v19 = v13 - 11;
    if ((v12 - 11) < 2u || (v13 - 11) <= 1u)
    {
      switch((int)this)
      {
        case 13:
        case 15:
          goto LABEL_119;
        case 14:
        case 18:
        case 21:
        case 24:
          goto LABEL_20;
        case 16:
          if (llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>((uint64_t)a2)
            && *((unsigned __int8 *)a3 + 16) - 11 < 2)
          {
            return a3;
          }
LABEL_20:
          if (*((unsigned __int8 *)a2 + 16) - 11 <= 1
            && *((unsigned __int8 *)a3 + 16) - 11 < 2)
          {
            return (llvm::Constant *)a2;
          }
          __n128 v21 = *a2;
          return (llvm::Constant *)llvm::ConstantFP::getNaN(v21, 0, 0);
        case 17:
          if ((v19 | v18) < 2u) {
            return (llvm::Constant *)a2;
          }
          uint64_t v118 = 0;
          __src = &v118;
          uint64_t v120 = 0;
          if ((llvm::PatternMatch::apint_match::match<llvm::Constant>((uint64_t)&__src, (llvm::Constant *)a2) & 1) == 0)
          {
            v117[0] = &v118;
            v117[1] = 0;
            if ((llvm::PatternMatch::apint_match::match<llvm::Constant>((uint64_t)v117, a3) & 1) == 0) {
              goto LABEL_111;
            }
          }
          uint64_t v52 = (unsigned char *)v118;
          if (*(_DWORD *)(v118 + 8) >= 0x41u) {
            uint64_t v52 = *(unsigned char **)v118;
          }
          if ((*v52 & 1) == 0) {
            goto LABEL_111;
          }
          return (llvm::Constant *)llvm::UndefValue::get(*a2, v8);
        case 19:
        case 20:
          if (llvm::PatternMatch::undef_match::check(a3, v8)
            || llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src + 1, a3))
          {
            goto LABEL_80;
          }
          if (llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&__src, a3))return (llvm::Constant *)a2; {
          goto LABEL_111;
          }
        case 22:
        case 23:
          if (!llvm::PatternMatch::undef_match::check(a3, v8)
            && !llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src + 1, a3))
          {
            goto LABEL_111;
          }
LABEL_80:
          v39 = *(llvm::PoisonValue **)a3;
          return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
        case 25:
        case 26:
        case 27:
          if ((v13 - 11) <= 1u) {
            goto LABEL_73;
          }
          if (llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src, a3)) {
            return (llvm::Constant *)a2;
          }
LABEL_111:
          uint64_t NullValue = llvm::Constant::getNullValue(*a2, v8);
          break;
        case 28:
          uint64_t v51 = (uint64_t)a2;
          if ((v19 | v18) < 2u) {
            return (llvm::Constant *)v51;
          }
          goto LABEL_69;
        case 29:
          uint64_t v51 = (uint64_t)a2;
          if ((v19 | v18) < 2u) {
            return (llvm::Constant *)v51;
          }
          return (llvm::Constant *)llvm::Constant::getAllOnesValue(v16, v8);
        case 30:
          if ((v19 | v18) <= 1u)
          {
LABEL_69:
            return (llvm::Constant *)llvm::Constant::getNullValue(v16, v8);
          }
          else
          {
LABEL_119:
            return (llvm::Constant *)llvm::UndefValue::get(v16, v8);
          }
        default:
          goto LABEL_25;
      }
      return (llvm::Constant *)NullValue;
    }
  }
LABEL_25:
  if (v13 == 16)
  {
    switch((int)this)
    {
      case 13:
      case 15:
        uint64_t v22 = (llvm::Constant *)((char *)a3 + 24);
        unsigned int v23 = *((_DWORD *)a3 + 8);
        if (v23 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v22) != v23) {
            break;
          }
        }
        else if (*(void *)v22)
        {
          break;
        }
        return (llvm::Constant *)a2;
      case 17:
        uint64_t v31 = (llvm::Constant *)((char *)a3 + 24);
        unsigned int v32 = *((_DWORD *)a3 + 8);
        if (v32 <= 0x40)
        {
          uint64_t v29 = *(void *)v31;
          if (!*(void *)v31) {
            return a3;
          }
          goto LABEL_49;
        }
        int v40 = llvm::APInt::countLeadingZerosSlowCase(v31);
        if (v40 == v32) {
          return a3;
        }
        if (v40 == v32 - 1) {
          return (llvm::Constant *)a2;
        }
        break;
      case 19:
      case 20:
        uint64_t v27 = (llvm::Constant *)((char *)a3 + 24);
        unsigned int v28 = *((_DWORD *)a3 + 8);
        if (v28 > 0x40)
        {
          int v38 = llvm::APInt::countLeadingZerosSlowCase(v27);
          if (v38 == v28 - 1) {
            return (llvm::Constant *)a2;
          }
          goto LABEL_72;
        }
        uint64_t v29 = *(void *)v27;
        if (!*(void *)v27) {
          goto LABEL_73;
        }
LABEL_49:
        if (v29 == 1) {
          return (llvm::Constant *)a2;
        }
        break;
      case 22:
      case 23:
        uint64_t v30 = (llvm::Constant *)((char *)a3 + 24);
        unsigned int v28 = *((_DWORD *)a3 + 8);
        if (v28 <= 0x40)
        {
          if (!*(void *)v30) {
            goto LABEL_73;
          }
          if (*(void *)v30 != 1) {
            break;
          }
LABEL_68:
          uint64_t v16 = *(llvm::Constant **)a3;
          goto LABEL_69;
        }
        int v38 = llvm::APInt::countLeadingZerosSlowCase(v30);
        if (v38 == v28 - 1) {
          goto LABEL_68;
        }
LABEL_72:
        if (v38 == v28)
        {
LABEL_73:
          uint64_t v14 = *(llvm::PoisonValue **)a3;
          goto LABEL_7;
        }
        break;
      case 27:
        if (v12 != 5 || *((_WORD *)a2 + 9) != 39) {
          break;
        }
        uint64_t v24 = 26;
        unsigned int v25 = a2;
        BOOL v26 = a3;
        goto LABEL_34;
      case 28:
        unsigned int v33 = (void *)((char *)a3 + 24);
        unsigned int v34 = *((_DWORD *)a3 + 8);
        if (v34 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == v34) {
            return a3;
          }
        }
        else if (!*v33)
        {
          return a3;
        }
        if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))) {
          return (llvm::Constant *)a2;
        }
        int v41 = *((unsigned __int8 *)a2 + 16);
        if (v41 != 5) {
          goto LABEL_148;
        }
        int v42 = *((unsigned __int16 *)a2 + 9);
        if (v42 != 39) {
          goto LABEL_125;
        }
        uint64_t v43 = (llvm::APInt *)(*(_DWORD *)(*(void *)a3 + 8) >> 8);
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2[-4
                                                                                  * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
        if ((_BYTE)v44) {
        llvm::APInt::getLowBitsSet(v43, PrimitiveSizeInBits, (llvm::APInt *)&__src);
        }
        if (v120 > 0x40) {
          operator new[]();
        }
        if (((unint64_t)__src & ~*v33) == 0) {
          return (llvm::Constant *)a2;
        }
        int v42 = *((unsigned __int16 *)a2 + 9);
LABEL_125:
        if (v42 != 47) {
          break;
        }
        unsigned int v54 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        unsigned int v55 = *((unsigned __int8 *)v54 + 16);
        if (v55 > 3) {
          break;
        }
        uint64_t v56 = *((void *)v54 + 5);
        if (v56)
        {
          unsigned __int8 PointerAlignment = llvm::Value::getPointerAlignment(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (const llvm::DataLayout *)(v56 + 256));
          if (!*((unsigned char *)v54 + 16) && *(unsigned __int16 *)(v56 + 276) < 0x100u)
          {
            unsigned __int8 PointerAlignment = 2;
            goto LABEL_135;
          }
        }
        else
        {
          if (v55 != 3) {
            break;
          }
          int v58 = (*((_DWORD *)v54 + 8) >> 17) & 0x3F;
          if (!v58) {
            break;
          }
          unsigned __int8 PointerAlignment = v58 - 1;
        }
        if (!PointerAlignment) {
          break;
        }
LABEL_135:
        if (*(_DWORD *)(*(void *)a3 + 8) >> 8 >= PointerAlignment) {
          unsigned int v59 = PointerAlignment;
        }
        else {
          unsigned int v59 = *(_DWORD *)(*(void *)a3 + 8) >> 8;
        }
        llvm::APInt::getLowBitsSet((llvm::APInt *)(*(_DWORD *)(*(void *)a3 + 8) >> 8), v59, (llvm::APInt *)&__src);
        if (*((_DWORD *)a3 + 8) > 0x40u) {
          operator new[]();
        }
        if ((*v33 & ~(unint64_t)__src) != 0)
        {
          char v60 = 0;
          uint64_t v51 = (uint64_t)a2;
        }
        else
        {
          uint64_t v51 = llvm::Constant::getNullValue(*(llvm::Constant **)a3, v8);
          char v60 = 1;
        }
        if (v120 >= 0x41 && __src) {
          MEMORY[0x263E50080](__src, 0x1000C8000313F17);
        }
        if ((v60 & 1) == 0) {
          break;
        }
        return (llvm::Constant *)v51;
      case 29:
        unsigned int v35 = *((_DWORD *)a3 + 8);
        if (v35 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == v35) {
            return (llvm::Constant *)a2;
          }
        }
        else if (!*((void *)a3 + 3))
        {
          return (llvm::Constant *)a2;
        }
        if (!llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))) {
          break;
        }
        return a3;
      case 30:
        uint64_t v36 = (llvm::Constant *)((char *)a3 + 24);
        unsigned int v37 = *((_DWORD *)a3 + 8);
        if (v37 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v36) == v37) {
            return (llvm::Constant *)a2;
          }
        }
        else if (!*(void *)v36)
        {
          return (llvm::Constant *)a2;
        }
        if (v12 != 5 || *((unsigned __int16 *)a2 + 9) - 53 > 1) {
          break;
        }
        unsigned __int16 InversePredicate = llvm::CmpInst::getInversePredicate(*((unsigned __int16 *)a2 + 12));
        uint64_t v48 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v49 = *v48;
        int v50 = v48[4];
        return (llvm::Constant *)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)InversePredicate, (unsigned __int16)v49, v50, 0, v47);
      default:
        break;
    }
LABEL_147:
    int v41 = *((unsigned __int8 *)a2 + 16);
LABEL_148:
    if (v41 == 17)
    {
      if (*((unsigned char *)a3 + 16) == 17)
      {
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v120, (const llvm::APFloat::Storage *)(a2 + 4));
        v64 = (llvm::Constant *)((char *)a3 + 24);
        switch((int)this)
        {
          case 14:
            llvm::APFloat::add((uint64_t)&__src, (uint64_t)v64, 1);
            break;
          case 16:
            llvm::APFloat::subtract((uint64_t)&__src, (uint64_t)v64, 1);
            break;
          case 18:
            llvm::APFloat::multiply((uint64_t)&__src, (uint64_t)v64, 1);
            break;
          case 21:
            llvm::APFloat::divide((uint64_t)&__src, (uint64_t)v64, 1);
            break;
          case 24:
            llvm::APFloat::mod((llvm::APFloat *)&__src, v64);
            break;
          default:
            llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v120);
            goto LABEL_186;
        }
        uint64_t v51 = llvm::ConstantFP::get(*(void *)*a2, (uint64_t)&__src);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v120);
        return (llvm::Constant *)v51;
      }
    }
    else if (v41 == 16)
    {
      if (*((unsigned char *)a3 + 16) == 16)
      {
        v61 = (llvm::APInt *)(a2 + 3);
        v62 = (unint64_t *)((char *)a3 + 24);
        switch((int)this)
        {
          case 13:
            v63 = *(llvm::IntegerType **)*a2;
            unsigned int v116 = *((_DWORD *)a2 + 8);
            if (v116 > 0x40) {
              operator new[]();
            }
            v115 = *(void **)v61;
            llvm::APInt::operator+=((uint64_t)&v115, (void **)v62);
            LODWORD(v120) = v116;
            __src = v115;
            unsigned int v116 = 0;
            uint64_t v51 = llvm::ConstantInt::get(v63, (llvm::APInt *)&__src, v108, v109);
            if (v120 >= 0x41 && __src) {
              MEMORY[0x263E50080](__src, 0x1000C8000313F17);
            }
            if (v116 < 0x41) {
              return (llvm::Constant *)v51;
            }
            v110 = v115;
            if (!v115) {
              return (llvm::Constant *)v51;
            }
            goto LABEL_277;
          case 15:
            v93 = *(llvm::IntegerType **)*a2;
            unsigned int v114 = *((_DWORD *)a2 + 8);
            if (v114 > 0x40) {
              operator new[]();
            }
            v113 = *(void **)v61;
            llvm::APInt::operator-=((uint64_t)&v113, (void **)v62);
            LODWORD(v120) = v114;
            __src = v113;
            unsigned int v114 = 0;
            uint64_t v51 = llvm::ConstantInt::get(v93, (llvm::APInt *)&__src, v111, v112);
            if (v120 >= 0x41 && __src) {
              MEMORY[0x263E50080](__src, 0x1000C8000313F17);
            }
            if (v114 < 0x41) {
              return (llvm::Constant *)v51;
            }
            v110 = v113;
            if (!v113) {
              return (llvm::Constant *)v51;
            }
            goto LABEL_277;
          case 17:
            v94 = *(llvm::IntegerType **)*a2;
            llvm::APInt::operator*((uint64_t)v61, (void *)a3 + 3, (llvm::APInt *)&__src);
            goto LABEL_247;
          case 19:
            v94 = *(llvm::IntegerType **)*a2;
            llvm::APInt::udiv(v61, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_247;
          case 20:
            if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))
              && llvm::APInt::isMinSignedValue((llvm::APInt *)(a2 + 3)))
            {
              goto LABEL_248;
            }
            v94 = *(llvm::IntegerType **)*a2;
            llvm::APInt::sdiv(v61, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_247;
          case 22:
            v94 = *(llvm::IntegerType **)*a2;
            llvm::APInt::urem(v61, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_247;
          case 23:
            if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))
              && llvm::APInt::isMinSignedValue((llvm::APInt *)(a2 + 3)))
            {
              goto LABEL_248;
            }
            v94 = *(llvm::IntegerType **)*a2;
            llvm::APInt::srem(v61, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_247;
          case 25:
            unint64_t v95 = *((unsigned int *)a2 + 8);
            unsigned int v96 = *((_DWORD *)a3 + 8);
            v97 = v62;
            if (v96 < 0x41) {
              goto LABEL_235;
            }
            if (v96 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v62) >= 0x41) {
              goto LABEL_248;
            }
            v97 = (unint64_t *)*v62;
LABEL_235:
            v39 = *a2;
            if (*v97 >= v95) {
              return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
            }
            v94 = *(llvm::IntegerType **)v39;
            llvm::APInt::shl(v61, (uint64_t ***)v62, (uint64_t)&__src);
            goto LABEL_247;
          case 26:
            unint64_t v98 = *((unsigned int *)a2 + 8);
            unsigned int v99 = *((_DWORD *)a3 + 8);
            v100 = v62;
            if (v99 < 0x41) {
              goto LABEL_240;
            }
            if (v99 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v62) >= 0x41) {
              goto LABEL_248;
            }
            v100 = (unint64_t *)*v62;
LABEL_240:
            v39 = *a2;
            if (*v100 >= v98) {
              return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
            }
            v94 = *(llvm::IntegerType **)v39;
            llvm::APInt::lshr(v61, (uint64_t ***)v62, (uint64_t)&__src);
            goto LABEL_247;
          case 27:
            unint64_t v101 = *((unsigned int *)a2 + 8);
            unsigned int v102 = *((_DWORD *)a3 + 8);
            v103 = v62;
            if (v102 < 0x41) {
              goto LABEL_245;
            }
            if (v102 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v62) >= 0x41)
            {
LABEL_248:
              v39 = *a2;
              return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
            }
            v103 = (unint64_t *)*v62;
LABEL_245:
            v39 = *a2;
            if (*v103 >= v101) {
              return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
            }
            v94 = *(llvm::IntegerType **)v39;
            llvm::APInt::ashr(v61, (uint64_t ***)v62, (uint64_t)&__src);
LABEL_247:
            v104 = v94;
LABEL_275:
            uint64_t v51 = llvm::ConstantInt::get(v104, (llvm::APInt *)&__src, v9, v10);
            if (v120 >= 0x41)
            {
              v110 = __src;
              if (__src) {
LABEL_277:
              }
                MEMORY[0x263E50080](v110, 0x1000C8000313F17);
            }
            break;
          case 28:
            v105 = *(llvm::IntegerType **)*a2;
            unsigned int v106 = *((_DWORD *)a2 + 8);
            if (v106 > 0x40) {
              operator new[]();
            }
            v107 = (void *)(*v62 & *(void *)v61);
            goto LABEL_274;
          case 29:
            v105 = *(llvm::IntegerType **)*a2;
            unsigned int v106 = *((_DWORD *)a2 + 8);
            if (v106 > 0x40) {
              operator new[]();
            }
            v107 = (void *)(*v62 | *(void *)v61);
            goto LABEL_274;
          case 30:
            v105 = *(llvm::IntegerType **)*a2;
            unsigned int v106 = *((_DWORD *)a2 + 8);
            if (v106 > 0x40) {
              operator new[]();
            }
            v107 = (void *)(*v62 ^ *(void *)v61);
LABEL_274:
            LODWORD(v120) = v106;
            __src = v107;
            v104 = v105;
            goto LABEL_275;
          default:
            goto LABEL_186;
        }
        return (llvm::Constant *)v51;
      }
      if (this <= 0x1B && ((1 << (char)this) & 0xED80000) != 0)
      {
        v68 = (llvm::APInt *)(a2 + 3);
        unsigned int v69 = *((_DWORD *)a2 + 8);
        if (v69 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v68) == v69) {
            return (llvm::Constant *)a2;
          }
        }
        else if (!*(void *)v68)
        {
          return (llvm::Constant *)a2;
        }
      }
    }
    else
    {
      v65 = *a2;
      if (*a2 && (*((_DWORD *)v65 + 2) & 0xFE) == 0x12)
      {
        uint64_t SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(a3, 0);
        if (SplatValue)
        {
          v67 = SplatValue;
          if (this <= 0x17
            && ((1 << (char)this) & 0xD80000) != 0
            && llvm::Constant::isNullValue(SplatValue))
          {
            v39 = v65;
            return (llvm::Constant *)llvm::PoisonValue::get(v39, v8);
          }
          uint64_t v70 = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
          if (v70)
          {
            if (((1 << (char)this) & 0x1FD4000) != 0) {
              uint64_t v71 = llvm::ConstantFoldBinaryInstruction(this, v70, v67, (llvm::Constant *)v10);
            }
            else {
              uint64_t v71 = llvm::ConstantExpr::get(this, v70, v67, 0, 0, v11);
            }
            if (!v71) {
              return 0;
            }
            return (llvm::Constant *)llvm::ConstantVector::getSplat(*((unsigned int *)v65 + 8) | ((unint64_t)(*((unsigned char *)v65 + 8) == 19) << 32), v71);
          }
        }
        if (*((unsigned char *)v65 + 8) == 18)
        {
          __src = v121;
          uint64_t v120 = 0x1000000000;
          v72 = (llvm::Type *)*((unsigned int *)v65 + 8);
          if (v72)
          {
            v73 = 0;
            v74 = (llvm::ConstantInt *)(**(void **)v65 + 1992);
            while (1)
            {
              v75 = (llvm::Constant *)llvm::ConstantInt::get(v74, v73, 0, (BOOL)v10);
              unsigned int Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v75, 0, v76);
              v79 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(a3, v75, 0, v78);
              v82 = v79;
              if (((1 << (char)this) & 0x7E02A000) != 0)
              {
                uint64_t v83 = llvm::ConstantExpr::get(this, Element, v79, 0, 0, v81);
              }
              else
              {
                if (((1 << (char)this) & 0x1254000) == 0 && llvm::Constant::isNullValue(v79))
                {
                  uint64_t v51 = llvm::PoisonValue::get(v65, v84);
                  goto LABEL_219;
                }
                uint64_t v83 = llvm::ConstantFoldBinaryInstruction(this, Element, v82, v80);
              }
              if (!v83)
              {
                uint64_t v51 = 0;
                goto LABEL_219;
              }
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, v83);
              v73 = (llvm::Type *)((char *)v73 + 1);
              if (v72 == v73)
              {
                v85 = (uint64_t ****)__src;
                v86 = (llvm::Type *)v120;
                goto LABEL_214;
              }
            }
          }
          v86 = 0;
          v85 = (uint64_t ****)v121;
LABEL_214:
          uint64_t v51 = (uint64_t)llvm::ConstantVector::get(v85, v86);
LABEL_219:
          if (__src != v121) {
            free(__src);
          }
          return (llvm::Constant *)v51;
        }
      }
    }
LABEL_186:
    if (*((unsigned char *)a2 + 16) == 5)
    {
      if (this <= 0x1E
        && ((1 << (char)this) & 0x70022000) != 0
        && *((unsigned __int16 *)a2 + 9) == this)
      {
        uint64_t v87 = llvm::ConstantExpr::get(this, a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], a3, 0, 0, v11);
        v88 = (llvm::Constant *)v87;
        if (*(unsigned char *)(v87 + 16) != 5 || *(unsigned __int16 *)(v87 + 18) != this)
        {
          v89 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          uint64_t v90 = (uint64_t)this;
          return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v90, v89, v88, 0, 0, v11);
        }
      }
      goto LABEL_197;
    }
    if (*((unsigned char *)a3 + 16) != 5 || this > 0x1E || ((1 << (char)this) & 0x70066000) == 0)
    {
LABEL_197:
      if (*((_DWORD *)*a2 + 2) == 269)
      {
        uint64_t v51 = 0;
        switch((int)this)
        {
          case 13:
          case 15:
            uint64_t v90 = 30;
            goto LABEL_216;
          case 17:
            uint64_t v90 = 28;
LABEL_216:
            LODWORD(v89) = a2;
            v88 = a3;
            return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v90, v89, v88, 0, 0, v11);
          case 19:
          case 20:
          case 25:
          case 26:
          case 27:
            return (llvm::Constant *)a2;
          case 22:
          case 23:
            v91 = *(uint64_t **)*a2;
            uint64_t v92 = *v91;
            uint64_t v51 = *(void *)(*v91 + 1600);
            if (!v51)
            {
              uint64_t v51 = llvm::ConstantInt::get(v92 + 1920, 0);
              *(void *)(v92 + 1600) = v51;
            }
            return (llvm::Constant *)v51;
          default:
            return (llvm::Constant *)v51;
        }
      }
      return 0;
    }
    return (llvm::Constant *)llvm::ConstantFoldBinaryInstruction(this, a3, (llvm::Constant *)a2, (llvm::Constant *)v10);
  }
  if (v12 != 16 || this > 0x1E || ((1 << (char)this) & 0x70066000) == 0) {
    goto LABEL_147;
  }
  uint64_t v24 = (uint64_t)this;
  unsigned int v25 = a3;
  BOOL v26 = (llvm::Constant *)a2;
LABEL_34:
  return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v24, v25, v26, 0, 0, v11);
}

llvm::Constant *llvm::ConstantFoldCompareInstruction(unsigned int a1, llvm::Type *a2, uint64_t a3, BOOL a4)
{
  uint64_t v5 = a2;
  v69[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t **)(***(void ***)a2 + 1920);
  if (*(void *)a2) {
    BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    llvm::VectorType::get(v7, (llvm::Type *)(*(unsigned int *)(*(void *)a2 + 32) | ((unint64_t)(*(_DWORD *)(*(void *)a2 + 8) == 19) << 32)));
    uint64_t v7 = v9;
  }
  if (a1 == 15)
  {
LABEL_35:
    return (llvm::Constant *)llvm::Constant::getAllOnesValue((llvm::Constant *)v7, a2);
  }
  if (!a1)
  {
LABEL_9:
    return (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v7, a2);
  }
  int v11 = *((unsigned __int8 *)v5 + 16);
  if (v11 == 12 || (int v12 = *(unsigned __int8 *)(a3 + 16), v12 == 12))
  {
    return (llvm::Constant *)llvm::PoisonValue::get((llvm::PoisonValue *)v7, a2);
  }
  if ((v11 - 11) >= 2 && (v12 - 11) > 1)
  {
    uint64_t v13 = constantFoldCompareGlobalToNull(a1, v5, (llvm::GlobalValue *)a3);
    if (v13) {
      return (llvm::Constant *)v13;
    }
    uint64_t v13 = constantFoldCompareGlobalToNull(a1, (llvm::Constant *)a3, v5);
    if (v13) {
      return (llvm::Constant *)v13;
    }
    if (llvm::Constant::isNullValue((llvm::Constant *)a3))
    {
      if (a1 == 36) {
        goto LABEL_9;
      }
      if (a1 == 35) {
        goto LABEL_35;
      }
    }
    uint64_t v20 = *(void *)v5;
    if (*(_DWORD *)(*(void *)v5 + 8) == 269)
    {
      if (a1 == 33)
      {
        uint64_t v22 = (llvm::PoisonValue **)v5;
        goto LABEL_67;
      }
      if (a1 == 32)
      {
        if (*(unsigned char *)(a3 + 16) == 16)
        {
          Not = llvm::ConstantExpr::getNot((llvm::Constant **)a3, a2);
          uint64_t v22 = (llvm::PoisonValue **)v5;
LABEL_68:
          return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1E, v22, Not, 0, 0, v19);
        }
        uint64_t v22 = (llvm::PoisonValue **)llvm::ConstantExpr::getNot((llvm::Constant **)v5, a2);
LABEL_67:
        Not = (llvm::Constant *)a3;
        goto LABEL_68;
      }
    }
    int v23 = *((unsigned __int8 *)v5 + 16);
    if (v23 == 17)
    {
      if (*(unsigned char *)(a3 + 16) == 17)
      {
        unsigned int v24 = llvm::FCmpInst::compare((llvm::Type *)((char *)v5 + 24), (const llvm::APFloat *)(a3 + 24), a1);
        goto LABEL_49;
      }
    }
    else if (v23 == 16 && *(unsigned char *)(a3 + 16) == 16)
    {
      unsigned int v24 = llvm::ICmpInst::compare((uint64_t)v5 + 24, (const void **)(a3 + 24), a1);
LABEL_49:
      uint64_t v16 = v24;
      goto LABEL_133;
    }
    if ((*(_DWORD *)(*(void *)v5 + 8) & 0xFE) == 0x12)
    {
      uint64_t SplatValue = llvm::Constant::getSplatValue(v5, 0);
      if (!SplatValue
        || (unsigned __int16 v27 = SplatValue, (v28 = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)a3, 0)) == 0))
      {
        if (*(unsigned char *)(v20 + 8) == 19) {
          return 0;
        }
        v67 = v69;
        uint64_t v68 = 0x400000000;
        int v38 = (llvm::Type *)*(unsigned int *)(v20 + 32);
        if (v38)
        {
          v39 = 0;
          int v40 = (llvm::ConstantInt *)(***(void ***)v5 + 1992);
          do
          {
            int v41 = (llvm::Constant *)llvm::ConstantInt::get(v40, v39, 0, v26);
            unsigned __int16 Element = llvm::ConstantExpr::getExtractElement(v5, v41, 0, v42);
            v45 = (llvm::Constant *)llvm::ConstantInt::get(v40, v39, 0, v44);
            BOOL v47 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a3, v45, 0, v46);
            uint64_t Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, Element, v47, 0, v48);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v67, Compare);
            v39 = (llvm::Type *)((char *)v39 + 1);
          }
          while (v38 != v39);
          int v50 = (uint64_t ****)v67;
          uint64_t v51 = (llvm::Type *)v68;
        }
        else
        {
          uint64_t v51 = 0;
          int v50 = (uint64_t ****)v69;
        }
        uint64_t v13 = (uint64_t)llvm::ConstantVector::get(v50, v51);
        if (v67 != v69) {
          free(v67);
        }
        return (llvm::Constant *)v13;
      }
      uint64_t v30 = *(unsigned int *)(v20 + 32);
      uint64_t v31 = *(unsigned __int8 *)(v20 + 8) == 19;
      uint64_t v32 = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, v27, v28, 0, v29);
      return (llvm::Constant *)llvm::ConstantVector::getSplat(v30 | (v31 << 32), v32);
    }
    if ((*(_DWORD *)(*(void *)v5 + 8) < 4u
       || *(_DWORD *)(*(void *)v5 + 8) == 5
       || (*(_DWORD *)(*(void *)v5 + 8) & 0xFD) == 4)
      && (v23 == 5 || *(unsigned char *)(a3 + 16) == 5))
    {
      uint64_t v13 = 0;
      switch(evaluateFCmpRelation(v5, (llvm::Constant *)a3))
      {
        case 1u:
          HIDWORD(v34) = a1 - 1;
          LODWORD(v34) = a1 - 1;
          unsigned int v33 = v34 >> 1;
          if (v33 < 7 && ((0x75u >> v33) & 1) != 0) {
            goto LABEL_109;
          }
          uint64_t v16 = a1 == 3;
          goto LABEL_133;
        case 2u:
          unsigned int v14 = a1 - 2;
          if (a1 - 2 >= 0xD) {
            goto LABEL_132;
          }
          uint64_t v15 = &unk_261E91D50;
          goto LABEL_30;
        case 3u:
          if ((a1 & 0xFFFFFFF7) == 2) {
            goto LABEL_109;
          }
          uint64_t v16 = 0;
          uint64_t v13 = 0;
          if ((a1 & 0xFFFFFFF7) != 4) {
            return (llvm::Constant *)v13;
          }
          goto LABEL_133;
        case 4u:
          unsigned int v14 = a1 - 4;
          if (a1 - 4 >= 0xB) {
            goto LABEL_132;
          }
          uint64_t v15 = &unk_261E91CF8;
          goto LABEL_30;
        case 5u:
          if ((a1 & 0xFFFFFFF7) == 2) {
            goto LABEL_132;
          }
          uint64_t v13 = 0;
          if ((a1 & 0xFFFFFFF7) != 4) {
            return (llvm::Constant *)v13;
          }
          goto LABEL_109;
        case 6u:
          if ((a1 & 0xFFFFFFF7) == 1) {
            goto LABEL_132;
          }
          uint64_t v13 = 0;
          if ((a1 & 0xFFFFFFF7) != 6) {
            return (llvm::Constant *)v13;
          }
          goto LABEL_109;
        case 9u:
          if (a1 == 6) {
            goto LABEL_132;
          }
          uint64_t v13 = 0;
          if (a1 != 9) {
            return (llvm::Constant *)v13;
          }
          goto LABEL_109;
        default:
          return (llvm::Constant *)v13;
      }
    }
    unsigned int v35 = a1 - 38;
    switch(evaluateICmpRelation(v5, (llvm::Constant *)a3, a1 - 38 < 4, v17, v18))
    {
      case '!':
        BOOL v52 = a1 != 32;
        if (a1 == 33) {
          goto LABEL_109;
        }
        goto LABEL_120;
      case '""':
        unsigned int v14 = a1 - 32;
        if (a1 - 32 >= 6) {
          goto LABEL_121;
        }
        uint64_t v15 = &unk_261E91E38;
        goto LABEL_30;
      case '#':
        BOOL v52 = a1 != 36;
        if ((a1 & 0xFFFFFFFE) != 0x22) {
          goto LABEL_120;
        }
        goto LABEL_109;
      case '$':
        unsigned int v14 = a1 - 32;
        if (a1 - 32 >= 6) {
          goto LABEL_121;
        }
        uint64_t v15 = &unk_261E91DB8;
        goto LABEL_30;
      case '%':
        BOOL v52 = a1 != 34;
        if ((a1 & 0xFFFFFFFE) == 0x24) {
          goto LABEL_109;
        }
        goto LABEL_120;
      case '&':
        signed int v53 = a1 - 32;
        if (a1 - 32 >= 0xA || ((0x3C3u >> v53) & 1) == 0) {
          goto LABEL_121;
        }
        unsigned int v54 = &unk_261E91E68;
        goto LABEL_118;
      case '\'':
        BOOL v52 = a1 != 40;
        if ((a1 & 0xFFFFFFFE) != 0x26) {
          goto LABEL_120;
        }
        goto LABEL_109;
      case '(':
        signed int v53 = a1 - 32;
        if (a1 - 32 >= 0xA || ((0x3C3u >> v53) & 1) == 0) {
          goto LABEL_121;
        }
        unsigned int v54 = &unk_261E91DE8;
LABEL_118:
        uint64_t v16 = v54[v53];
        goto LABEL_133;
      case ')':
        BOOL v52 = a1 != 38;
        if ((a1 & 0xFFFFFFFE) == 0x28) {
          goto LABEL_109;
        }
LABEL_120:
        if (!v52) {
          goto LABEL_132;
        }
LABEL_121:
        int v55 = *(unsigned __int8 *)(a3 + 16);
        if (v55 == 5 && *(_WORD *)(a3 + 18) == 49)
        {
          uint64_t v56 = *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
          uint64_t v57 = *(void *)v56;
          int v58 = *(_DWORD *)(*(void *)v56 + 8);
          if (((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 18) == ((v58 & 0xFE) == 18))
          {
            if ((v58 & 0xFE) == 0x12) {
              int v58 = *(_DWORD *)(**(void **)(v57 + 16) + 8);
            }
            if (v58 >= 4u && v58 != 5 && (v58 & 0xFD) != 4)
            {
              if (*(void *)v5 != v57) {
                LOWORD(v5) = getFoldedCast(49, v5, v37);
              }
              unint64_t SwappedPredicate = (unsigned __int16)a1;
              unsigned __int16 v65 = (unsigned __int16)v5;
              v66 = v56;
              goto LABEL_145;
            }
          }
        }
        if (*((unsigned char *)v5 + 16) != 5) {
          goto LABEL_141;
        }
        int v59 = *((unsigned __int16 *)v5 + 9);
        if (v59 == 39)
        {
          if (v35 < 4) {
            goto LABEL_139;
          }
        }
        else
        {
          if (v59 != 40) {
            goto LABEL_142;
          }
          if (v35 >= 4)
          {
LABEL_139:
            if (*((unsigned char *)v5 + 16) != 5)
            {
              int v55 = *(unsigned __int8 *)(a3 + 16);
LABEL_141:
              if (v55 == 5)
              {
LABEL_144:
                unint64_t SwappedPredicate = (unsigned __int16)llvm::CmpInst::getSwappedPredicate(a1);
                unsigned __int16 v65 = a3;
                v66 = v5;
                goto LABEL_145;
              }
            }
LABEL_142:
            if (!llvm::Constant::isNullValue(v5)
              || (llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) != 0)
            {
              return 0;
            }
            goto LABEL_144;
          }
        }
        uint64_t v60 = *((void *)v5 - 4 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF));
        if (getFoldedCast(38, v5, v37) == v60)
        {
          uint64_t FoldedCast = (llvm::ConstantExpr *)getFoldedCast(38, a3, v61);
          if (llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*((unsigned __int16 *)v5 + 9), FoldedCast, *(llvm::Constant ****)a3, 0, v63) == (llvm::ConstantExpr *)a3)
          {
            unint64_t SwappedPredicate = (unsigned __int16)a1;
            unsigned __int16 v65 = v60;
            v66 = FoldedCast;
LABEL_145:
            return (llvm::Constant *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)SwappedPredicate, v65, v66, 0, v36);
          }
        }
        goto LABEL_139;
      case '*':
        goto LABEL_121;
      default:
        uint64_t v16 = 0;
        if (a1 > 0x29 || ((1 << a1) & 0x2A90000AA00) == 0) {
          goto LABEL_133;
        }
LABEL_109:
        uint64_t v16 = 1;
        goto LABEL_133;
    }
  }
  if ((a1 & 0xFFFFFFFE) != 0x20)
  {
    unsigned int v14 = a1 - 32;
    if (a1 - 32 > 9)
    {
      uint64_t v16 = a1 - 8 < 7;
LABEL_133:
      return (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v7, (llvm::Type *)v16, 0, a4);
    }
    if (v5 != (llvm::Type *)a3)
    {
      if (v14 > 9)
      {
LABEL_132:
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = &unk_261E91CA8;
LABEL_30:
        uint64_t v16 = v15[v14];
      }
      goto LABEL_133;
    }
  }
  return (llvm::Constant *)llvm::UndefValue::get((llvm::UndefValue *)v7, a2);
}

uint64_t constantFoldCompareGlobalToNull(int a1, llvm::Constant *a2, llvm::GlobalValue *a3)
{
  uint64_t result = 0;
  if (a3 && *((unsigned __int8 *)a3 + 16) <= 3u)
  {
    if (!llvm::Constant::isNullValue(a2)
      || *((unsigned char *)a3 + 16) == 1
      || (llvm::GlobalValue::hasExternalWeakLinkage(a3) & 1) != 0
      || *(_DWORD *)(*(void *)a3 + 8) > 0xFFu)
    {
      return 0;
    }
    if (a1 != 33)
    {
      if (a1 == 32)
      {
        uint64_t v7 = **(uint64_t ***)a2;
        uint64_t v8 = *v7;
        uint64_t result = *(void *)(*v7 + 1600);
        if (!result)
        {
          uint64_t result = llvm::ConstantInt::get(v8 + 1920, 0);
          *(void *)(v8 + 1600) = result;
        }
        return result;
      }
      return 0;
    }
    uint64_t v9 = **(uint64_t ***)a2;
    uint64_t v10 = *v9;
    uint64_t result = *(void *)(*v9 + 1592);
    if (!result)
    {
      uint64_t result = llvm::ConstantInt::get(v10 + 1920, 1);
      *(void *)(v10 + 1592) = result;
    }
  }
  return result;
}

uint64_t evaluateFCmpRelation(llvm::Constant *a1, llvm::Constant *a2)
{
  if (a1 == a2) {
    return 9;
  }
  if (*((unsigned char *)a1 + 16) == 5) {
    return 16;
  }
  if (*((unsigned char *)a2 + 16) == 5)
  {
    uint64_t result = evaluateFCmpRelation(a2, a1);
    if (result != 16)
    {
      return llvm::CmpInst::getSwappedPredicate(result);
    }
    return result;
  }
  FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)1, (uint64_t ***)a1, a2, 0);
  if (FCmp && *((unsigned char *)FCmp + 16) == 16)
  {
    unsigned int v6 = *((_DWORD *)FCmp + 8);
    if (v6 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(FCmp + 3)) != v6) {
        return 1;
      }
    }
    else if (FCmp[3])
    {
      return 1;
    }
  }
  uint64_t v7 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)4, (uint64_t ***)a1, a2, 0);
  if (v7 && *((unsigned char *)v7 + 16) == 16)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v8 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 3)) != v8) {
        return 4;
      }
    }
    else if (v7[3])
    {
      return 4;
    }
  }
  uint64_t v9 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)2, (uint64_t ***)a1, a2, 0);
  if (!v9 || *((unsigned char *)v9 + 16) != 16) {
    return 16;
  }
  unsigned int v10 = *((_DWORD *)v9 + 8);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 3)) == v10) {
      return 16;
    }
  }
  else if (!v9[3])
  {
    return 16;
  }
  return 2;
}

uint64_t evaluateICmpRelation(llvm::Constant *a1, llvm::Constant *a2, char a3, uint64_t a4, BOOL a5)
{
  if (a1 == a2) {
    return 32;
  }
  uint64_t NullValue = a2;
  uint64_t v7 = a1;
  while (1)
  {
    unsigned int v8 = *((unsigned __int8 *)v7 + 16);
    if (v8 >= 6)
    {
      if (*((unsigned __int8 *)NullValue + 16) < 6u) {
        goto LABEL_43;
      }
      uint64_t ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, (unsigned __int16)v7, NullValue, 0, a5);
      if (!ICmp || *(unsigned char *)(ICmp + 16) != 16)
      {
LABEL_66:
        if (a3) {
          uint64_t v19 = 40;
        }
        else {
          uint64_t v19 = 36;
        }
        uint64_t v27 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, (unsigned __int16)v7, NullValue, 0, v17);
        if (v27 && *(unsigned char *)(v27 + 16) == 16)
        {
          unsigned int v29 = *(_DWORD *)(v27 + 32);
          if (v29 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v27 + 24)) == v29) {
              goto LABEL_79;
            }
          }
          else if (!*(void *)(v27 + 24))
          {
            goto LABEL_79;
          }
          return v19;
        }
LABEL_79:
        if (a3) {
          uint64_t v19 = 38;
        }
        else {
          uint64_t v19 = 34;
        }
        uint64_t v30 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, (unsigned __int16)v7, NullValue, 0, v28);
        if (!v30 || *(unsigned char *)(v30 + 16) != 16) {
          return 42;
        }
        unsigned int v31 = *(_DWORD *)(v30 + 32);
        if (v31 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v30 + 24)) == v31) {
            return 42;
          }
        }
        else if (!*(void *)(v30 + 24))
        {
          return 42;
        }
        return v19;
      }
      unsigned int v18 = *(_DWORD *)(ICmp + 32);
      if (v18 <= 0x40)
      {
        if (*(void *)(ICmp + 24)) {
          return 32;
        }
        goto LABEL_66;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(ICmp + 24)) == v18) {
        goto LABEL_66;
      }
      return 32;
    }
    if (v8 <= 3)
    {
      unsigned int v20 = *((unsigned __int8 *)NullValue + 16);
      if (v20 != 5)
      {
        if (v20 <= 3)
        {
          uint64_t v15 = v7;
LABEL_61:
          BOOL v26 = NullValue;
          goto LABEL_62;
        }
        if (v20 != 4)
        {
          if ((llvm::GlobalValue::hasExternalWeakLinkage(v7) & 1) == 0
            && *((unsigned char *)v7 + 16) != 1
            && *(_DWORD *)(*(void *)v7 + 8) < 0x100u)
          {
            return 34;
          }
          return 42;
        }
        return 33;
      }
LABEL_43:
      int v22 = evaluateICmpRelation(NullValue, v7, a3 & 1);
      if (v22 == 42) {
        return 42;
      }
      return llvm::CmpInst::getSwappedPredicate(v22);
    }
    if (v8 == 4)
    {
      int v21 = *((unsigned __int8 *)NullValue + 16);
      if (v21 == 4)
      {
        if (*((void *)NullValue - 8) == *((void *)v7 - 8)) {
          return 42;
        }
      }
      else if (v21 == 5)
      {
        goto LABEL_43;
      }
      return 33;
    }
    uint64_t v9 = *((unsigned __int16 *)v7 + 9);
    if (v9 > 0x31) {
      return 42;
    }
    unsigned int v10 = (unsigned __int8 *)*((void *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
    if (((1 << v9) & 0x198000000000) != 0) {
      goto LABEL_8;
    }
    if (v9 != 49) {
      break;
    }
    BOOL v14 = v10[16] > 3u || v10 == 0;
    if (!v14 && NullValue && *((unsigned __int8 *)NullValue + 16) <= 3u)
    {
      uint64_t v15 = (const llvm::GlobalValue *)*((void *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
      goto LABEL_61;
    }
LABEL_8:
    int v11 = *(_DWORD *)(*(void *)v10 + 8);
    if ((v11 & 0xFE) == 0x12) {
      int v11 = *(_DWORD *)(**(void **)(*(void *)v10 + 16) + 8);
    }
    if (v11 < 6u && ((0x2Fu >> v11) & 1) != 0
      || (v11 & 0xFD) == 4
      || !llvm::Constant::isNullValue(NullValue)
      || (*(_DWORD *)(*(void *)v7 + 8) & 0xFD) != 0xD)
    {
      return 42;
    }
    int v13 = *((unsigned __int16 *)v7 + 9);
    if (v13 == 40) {
      a3 = 1;
    }
    else {
      a3 &= v13 != 39;
    }
    uint64_t NullValue = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
    uint64_t v7 = (llvm::Constant *)v10;
    if (v10 == (unsigned __int8 *)NullValue) {
      return 32;
    }
  }
  if (v9 != 34) {
    return 42;
  }
  unsigned int v24 = *((unsigned __int8 *)NullValue + 16);
  if (v24 == 19)
  {
    BOOL v25 = v10[16] > 3u || v10 == 0;
    if (!v25
      && (llvm::GlobalValue::hasExternalWeakLinkage(*((llvm::GlobalValue **)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF))) & 1) == 0
      && (*((unsigned char *)v7 + 17) & 2) != 0)
    {
      return 34;
    }
    return 42;
  }
  if (v24 <= 3)
  {
    if (v10[16] >= 4u) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = (llvm::Constant *)*((void *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
    }
    if (v32) {
      BOOL v33 = v32 == NullValue;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33 || !llvm::GEPOperator::hasAllZeroIndices(v7)) {
      return 42;
    }
    uint64_t v15 = v32;
    goto LABEL_61;
  }
  if (v24 <= 0x1B)
  {
    if (v24 != 5 || *((_WORD *)NullValue + 9) != 34) {
      return 42;
    }
  }
  else if (v24 != 62)
  {
    return 42;
  }
  int v34 = *((_DWORD *)NullValue + 5);
  if ((v34 & 0x40000000) != 0) {
    unsigned int v35 = (char *)*((void *)NullValue - 1);
  }
  else {
    unsigned int v35 = (char *)NullValue - 32 * (v34 & 0x7FFFFFF);
  }
  if (v10[16] > 3u) {
    return 42;
  }
  BOOL v36 = *(unsigned __int8 **)v35;
  if (*(unsigned __int8 *)(*(void *)v35 + 16) > 3u
    || v10 == v36
    || !llvm::GEPOperator::hasAllZeroIndices(v7)
    || !llvm::GEPOperator::hasAllZeroIndices(NullValue))
  {
    return 42;
  }
  uint64_t v15 = (const llvm::GlobalValue *)v10;
  BOOL v26 = (const llvm::GlobalValue *)v36;
LABEL_62:
  return areGlobalsPotentiallyEqual(v15, v26);
}

uint64_t llvm::ConstantFoldGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, unsigned int a3, uint64_t a4, llvm::Value *a5, uint64_t a6)
{
  unsigned int v6 = (unsigned __int8 *)a2;
  v130[8] = *MEMORY[0x263EF8340];
  if (!a6) {
    return (uint64_t)v6;
  }
  unint64_t v7 = a6;
  unsigned int v8 = (llvm::Constant **)a5;
  uint64_t TypeAtIndex = (uint64_t)a1;
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, a5, a6);
  BOOL v14 = v12;
  int v15 = v6[16];
  if (v15 == 12) {
    goto LABEL_5;
  }
  if ((v15 - 11) <= 1)
  {
    if (!a3)
    {
      return llvm::UndefValue::get(v12, v13);
    }
LABEL_5:
    return llvm::PoisonValue::get(v12, v13);
  }
  uint64_t v17 = *(void *)v6;
  if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12)
  {
    uint64_t v17 = **(void **)(v17 + 16);
    int v18 = *(unsigned __int8 *)(v17 + 8);
  }
  else
  {
    int v18 = *(_DWORD *)(*(void *)v6 + 8);
  }
  unsigned int v121 = a3;
  int v122 = BYTE4(a4);
  BOOL v19 = v18 == 15 && *(void *)(v17 + 24) == 0;
  BOOL v20 = !v19;
  if (v7 == 1) {
    BOOL v20 = 0;
  }
  if (!v20 && !BYTE4(a4))
  {
    uint64_t v21 = 8 * v7;
    int v22 = v8;
    do
    {
      int v23 = *v22;
      if ((llvm::Constant::isNullValue(*v22) & 1) == 0 && *((unsigned __int8 *)v23 + 16) - 11 > 1) {
        goto LABEL_29;
      }
      ++v22;
      v21 -= 8;
    }
    while (v21);
    if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(void *)v6 + 8) & 0xFE) != 0x12)
    {
      unint64_t v114 = *((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32);
      return llvm::ConstantVector::getSplat(v114, v6);
    }
    return (uint64_t)v6;
  }
LABEL_29:
  if (llvm::Constant::isNullValue((llvm::Constant *)v6))
  {
    uint64_t v26 = 8 * v7;
    uint64_t v27 = 8 * v7;
    BOOL v28 = v8;
    while (*((unsigned __int8 *)*v28 + 16) - 11 < 2 || llvm::Constant::isNullValue(*v28))
    {
      ++v28;
      v27 -= 8;
      if (!v27)
      {
        uint64_t v29 = *(void *)v6;
        if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12) {
          uint64_t v29 = **(void **)(v29 + 16);
        }
        uint64_t v30 = v8 + 1;
        uint64_t v31 = v26 - 8;
        do
        {
          if (!v31) {
            break;
          }
          uint64_t v32 = *v30++;
          uint64_t TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)TypeAtIndex, v32, v25);
          v31 -= 8;
        }
        while (TypeAtIndex);
        BOOL v33 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v29 + 8) >> 8));
        int v34 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v29 + 8) >> 8));
        if (*(void *)v6) {
          BOOL v36 = (*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v36 = 0;
        }
        if (v36) {
          llvm::VectorType::get(v33, (llvm::Type *)(*(unsigned int *)(*(void *)v6 + 32) | ((unint64_t)(*(_DWORD *)(*(void *)v6 + 8) == 19) << 32)));
        }
        while (1)
        {
          uint64_t v37 = *(void *)*v8;
          if (v37 && (*(_DWORD *)(v37 + 8) & 0xFE) == 18) {
            break;
          }
          ++v8;
          v26 -= 8;
          if (!v26) {
            goto LABEL_187;
          }
        }
        llvm::VectorType::get(v33, (llvm::Type *)(*(unsigned int *)(v37 + 32) | ((unint64_t)(*(_DWORD *)(v37 + 8) == 19) << 32)));
LABEL_187:
        return llvm::Constant::getNullValue(v34, v35);
      }
    }
  }
  char v39 = v121;
  if (v6[16] == 5)
  {
    int v40 = *((unsigned __int16 *)v6 + 9);
    if (v40 == 34)
    {
      uint64_t ElementPtr = foldGEPOfGEP((uint64_t)v6, TypeAtIndex, v121, (uint64_t)v8, v7);
      if (ElementPtr) {
        return ElementPtr;
      }
      int v40 = *((unsigned __int16 *)v6 + 9);
    }
    if (v7 >= 2 && (v40 - 38) <= 0xC && llvm::Constant::isNullValue(*v8))
    {
      int v41 = *(uint64_t **)&v6[-32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
      uint64_t v42 = *v41;
      if (*(unsigned char *)(*v41 + 8) != 15) {
        uint64_t v42 = 0;
      }
      uint64_t v43 = *(void *)v6;
      if (*(unsigned char *)(*(void *)v6 + 8) != 15) {
        uint64_t v43 = 0;
      }
      BOOL v44 = !v42 || v43 == 0;
      if (!v44 && *(void *)(v42 + 24) && *(void *)(v43 + 24))
      {
        if (*(unsigned char *)(**(void **)(v42 + 16) + 8) == 17) {
          uint64_t v45 = **(void **)(v42 + 16);
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v46 = **(void **)(v43 + 16);
        if (*(unsigned char *)(v46 + 8) != 17) {
          uint64_t v46 = 0;
        }
        BOOL v47 = !v45 || v46 == 0;
        if (!v47
          && *(void *)(v45 + 24) == *(void *)(v46 + 24)
          && (*(_DWORD *)(v43 + 8) ^ *(_DWORD *)(v42 + 8)) <= 0xFF)
        {
          return llvm::ConstantExpr::getGetElementPtr(v45, v41, v8, v7, v121, a4, 0);
        }
      }
    }
  }
  uint64_t v129 = 0x800000000;
  unint64_t v48 = *(void *)v6;
  v127[0] = v8;
  v127[1] = TypeAtIndex | 4;
  v128 = v130;
  BOOL v49 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  if (v7 == 1) {
    goto LABEL_176;
  }
  BOOL v126 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  uint64_t v119 = a4;
  uint64_t v120 = v6;
  uint64_t v125 = (a4 + 1);
  uint64_t v50 = 1;
  int v51 = 1;
  unint64_t IndexedType = TypeAtIndex;
  int v53 = BYTE4(a4);
  do
  {
    unint64_t v54 = v48;
    unint64_t v48 = IndexedType;
    int v55 = v8[v50];
    int v56 = *((unsigned __int8 *)v55 + 16);
    if ((v56 - 15) > 1)
    {
LABEL_95:
      BOOL v126 = 1;
      goto LABEL_96;
    }
    if (v53) {
      BOOL v57 = v50 == v125;
    }
    else {
      BOOL v57 = 0;
    }
    char v58 = v57;
    if (*((unsigned __int8 *)v8[v50 - 1] + 16) - 17 >= 0xFFFFFFFE && (v58 & 1) == 0)
    {
      int v59 = *(unsigned __int8 *)(IndexedType + 8);
      if (v59 != 16)
      {
        if ((v59 & 0xFE) == 0x12) {
          goto LABEL_95;
        }
        if (v56 == 16)
        {
          uint64_t v116 = v50 - 1;
          if (isIndexInRangeOfArrayType(*(void *)(IndexedType + 32), (uint64_t)v55)) {
            goto LABEL_96;
          }
          __n128 v61 = (void *)((char *)v55 + 24);
          unsigned int v62 = *((_DWORD *)v55 + 8);
          unsigned int v63 = v62 - 1;
          if (v62 >= 0x41) {
            __n128 v61 = (void *)(*v61 + 8 * (v63 >> 6));
          }
          if ((*v61 >> v63)) {
            goto LABEL_95;
          }
        }
        else
        {
          unint64_t v117 = v7;
          int v64 = *(_DWORD *)(*(void *)v55 + 32);
          if (!v64)
          {
            int v53 = v122;
LABEL_131:
            unint64_t v7 = v117;
            goto LABEL_96;
          }
          uint64_t v116 = v50 - 1;
          unint64_t v123 = IndexedType;
          unsigned int v65 = 0;
          char v66 = 1;
          do
          {
            uint64_t ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v55, v65);
            BOOL v68 = isIndexInRangeOfArrayType(*(void *)(v123 + 32), ElementAsConstant);
            unsigned int v69 = (void *)(ElementAsConstant + 24);
            unsigned int v70 = *(_DWORD *)(ElementAsConstant + 32);
            unsigned int v71 = v70 - 1;
            if (v70 >= 0x41) {
              unsigned int v69 = (void *)(*v69 + 8 * (v71 >> 6));
            }
            if ((*v69 >> v71))
            {
              BOOL v126 = 1;
              int v53 = v122;
              unint64_t v48 = v123;
              goto LABEL_131;
            }
            v66 &= v68;
            ++v65;
          }
          while (v64 != v65);
          char v72 = v66 | v126;
          int v53 = v122;
          unint64_t v48 = v123;
          unint64_t v7 = v117;
          if (v72) {
            goto LABEL_96;
          }
          BOOL v126 = 0;
        }
        if (*(unsigned char *)(v54 + 8) == 16) {
          goto LABEL_95;
        }
        v73 = *(llvm::Type **)(v48 + 32);
        if (!v73) {
          goto LABEL_95;
        }
        unint64_t v124 = v48;
        llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)&v128, v7);
        uint64_t FoldedCast = (llvm::PoisonValue **)*((void *)v128 + v116);
        if (!FoldedCast) {
          uint64_t FoldedCast = (llvm::PoisonValue **)v8[v116];
        }
        Splat = (llvm::PoisonValue **)v8[v50];
        int v78 = *((_DWORD *)*Splat + 2) & 0xFE;
        int v79 = *((_DWORD *)*FoldedCast + 2) & 0xFE;
        BOOL v80 = v79 == 18 || (*((_DWORD *)*Splat + 2) & 0xFE) == 18;
        if (v78 != 18 && v79 == 18)
        {
          Splat = (llvm::PoisonValue **)llvm::ConstantDataVector::getSplat((llvm::Type *)*((unsigned int *)*FoldedCast + 8), (void **)v8[v50], v74);
        }
        else if (v79 != 18 && v78 == 18)
        {
          uint64_t FoldedCast = (llvm::PoisonValue **)llvm::ConstantDataVector::getSplat((llvm::Type *)*((unsigned int *)*Splat + 8), (void **)FoldedCast, v74);
        }
        uint64_t v83 = *Splat;
        if ((*((_DWORD *)*Splat + 2) & 0xFE) == 0x12) {
          uint64_t v83 = (llvm::ConstantInt *)**((void **)v83 + 2);
        }
        v86 = (llvm::Constant *)llvm::ConstantInt::get(v83, v73, 0, v75);
        if (v80)
        {
          if (v79 == 18) {
            uint64_t v87 = FoldedCast;
          }
          else {
            uint64_t v87 = Splat;
          }
          v86 = (llvm::Constant *)llvm::ConstantDataVector::getSplat((llvm::Type *)*((unsigned int *)*v87 + 8), (void **)v86, v84);
        }
        BOOL v118 = v80;
        v88 = llvm::ConstantFoldBinaryInstruction((llvm *)0x17, Splat, v86, v85);
        *((void *)v128 + v50) = v88;
        uint64_t v90 = llvm::ConstantFoldBinaryInstruction((llvm *)0x14, Splat, v86, v89);
        v91 = *FoldedCast;
        int v115 = v79;
        if ((*((_DWORD *)*FoldedCast + 2) & 0xFE) == 0x12) {
          v91 = (llvm::Type *)**((void **)v91 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v91);
        v93 = *(llvm::Type **)v90;
        v94 = *(llvm::Type **)v90;
        if ((*(_DWORD *)(*(void *)v90 + 8) & 0xFE) == 0x12) {
          v94 = (llvm::Type *)**((void **)v93 + 2);
        }
        unsigned int v95 = llvm::Type::getPrimitiveSizeInBits(v94);
        if (PrimitiveSizeInBits <= v95) {
          unsigned int v96 = v95;
        }
        else {
          unsigned int v96 = PrimitiveSizeInBits;
        }
        if (v96 <= 0x40) {
          uint64_t v97 = 64;
        }
        else {
          uint64_t v97 = v96;
        }
        unint64_t v98 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v93, (llvm::LLVMContext *)v97);
        if (v118)
        {
          if (v115 == 18) {
            unint64_t v101 = FoldedCast;
          }
          else {
            unint64_t v101 = Splat;
          }
          v100.n128_f64[0] = llvm::FixedVectorType::get(v98, (llvm::Type *)*((unsigned int *)*v101 + 8));
        }
        int v53 = v122;
        unint64_t v48 = v124;
        unsigned int v102 = *((_DWORD *)*FoldedCast + 2);
        if ((v102 & 0xFE) == 0x12) {
          unsigned int v102 = *(_DWORD *)(**((void **)*FoldedCast + 2) + 8);
        }
        if (v102 != 13 || v102 >> 8 != v97) {
          uint64_t FoldedCast = (llvm::PoisonValue **)getFoldedCast(40, FoldedCast, v100);
        }
        unsigned int v103 = *(_DWORD *)(*(void *)v90 + 8);
        if ((v103 & 0xFE) == 0x12) {
          unsigned int v103 = *(_DWORD *)(**(void **)(*(void *)v90 + 16) + 8);
        }
        int v104 = v103;
        unsigned int v105 = v103 >> 8;
        if (v104 != 13 || v105 != v97) {
          uint64_t v90 = (llvm::Constant *)getFoldedCast(40, v90, v100);
        }
        v107 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xD, FoldedCast, v90, 0, 0, v99);
        *((void *)v128 + v116) = v107;
      }
    }
LABEL_96:
    uint64_t v60 = llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(v127);
    unint64_t IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)v60);
    ++v51;
    ++v50;
  }
  while (v51 != v7);
  unint64_t v108 = v129;
  a4 = v119;
  unsigned int v6 = v120;
  char v39 = v121;
  BOOL v49 = v126;
  if (v129)
  {
    if (v7)
    {
      uint64_t v109 = 0;
      do
      {
        if (!*(void *)((char *)v128 + v109 * 8)) {
          *(void *)((char *)v128 + v109 * 8) = v8[v109];
        }
        ++v109;
      }
      while (v7 != v109);
    }
    v110 = v128;
    uint64_t v111 = TypeAtIndex;
    v112 = v120;
    uint64_t v113 = v121;
LABEL_175:
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v111, v112, v110, v108, v113, a4, 0);
    goto LABEL_184;
  }
LABEL_176:
  uint64_t ElementPtr = 0;
  if (!v49 && (v39 & 1) == 0)
  {
    if (v6[16] == 3
      && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0
      && *((void *)v6 + 3) == TypeAtIndex
      && isInBoundsIndices<llvm::Value *>(v8, v7))
    {
      uint64_t v111 = TypeAtIndex;
      v112 = v6;
      v110 = v8;
      unint64_t v108 = v7;
      uint64_t v113 = 1;
      goto LABEL_175;
    }
    uint64_t ElementPtr = 0;
  }
LABEL_184:
  if (v128 != v130) {
    free(v128);
  }
  return ElementPtr;
}

uint64_t foldGEPOfGEP(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v60[16] = *MEMORY[0x263EF8340];
  BOOL v5 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
  uint64_t v6 = 72;
  if (v5) {
    uint64_t v6 = 32;
  }
  if (*(void *)(a1 + v6) != a2) {
    return 0;
  }
  SExtOrBitCast = *(llvm::ConstantExpr **)a4;
  if (llvm::Constant::isNullValue(*(llvm::Constant **)a4))
  {
    char v58 = v60;
    uint64_t v59 = 0x1000000000;
    int v14 = *(_DWORD *)(a1 + 20);
    unint64_t v15 = a5 + (v14 & 0x7FFFFFFu) - 1;
    if (v15 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v15, 8);
      int v14 = *(_DWORD *)(a1 + 20);
    }
    if ((v14 & 0x40000000) != 0)
    {
      uint64_t v17 = *(void *)(a1 - 8);
      uint64_t v16 = v14 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v16 = v14 & 0x7FFFFFF;
      uint64_t v17 = a1 - 32 * v16;
    }
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v58, (char *)(v17 + 32), (char *)(v17 + 32 * v16));
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v58, (unsigned char *)(a4 + 8), (unsigned char *)(a4 + 8 * a5));
    BOOL v24 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
    uint64_t v25 = 64;
    if (v24) {
      uint64_t v25 = 24;
    }
    uint64_t v26 = *(void *)(a1 + v25);
    int v27 = *(_DWORD *)(a1 + 20);
    if ((v27 & 0x40000000) != 0) {
      BOOL v28 = *(uint64_t **)(a1 - 8);
    }
    else {
      BOOL v28 = (uint64_t *)(a1 - 32 * (v27 & 0x7FFFFFF));
    }
    uint64_t v34 = *v28;
    unsigned int v35 = *(unsigned __int8 *)(a1 + 17);
    uint64_t v36 = v35 > 3;
    uint64_t v37 = a3 & ((v35 & 2) >> 1);
    if (v35 >= 4) {
      unsigned __int8 v38 = (*(unsigned char *)(a1 + 17) >> 2) - 1;
    }
    else {
      unsigned __int8 v38 = 0;
    }
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(v26, v34, v58, v59, v37, v38 | (unint64_t)(v36 << 32), 0);
    char v39 = v58;
    if (v58 != v60) {
LABEL_43:
    }
      free(v39);
  }
  else
  {
    BOOL v18 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
    uint64_t v19 = 64;
    if (v18) {
      uint64_t v19 = 24;
    }
    uint64_t v20 = *(void *)(a1 + v19);
    int v21 = *(_DWORD *)(a1 + 20);
    if ((v21 & 0x40000000) != 0)
    {
      uint64_t v23 = *(void *)(a1 - 8);
      uint64_t v22 = v21 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v22 = v21 & 0x7FFFFFF;
      uint64_t v23 = a1 - 32 * v22;
    }
    char v58 = (void *)(v23 + 32);
    uint64_t v59 = v20 | 4;
    if (v22 == 1) {
      return 0;
    }
    uint64_t v29 = (void *)(v23 + 32 * v22);
    do
    {
      char v30 = v59;
      llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(&v58);
    }
    while (v58 != v29);
    if ((v30 & 4) == 0) {
      return 0;
    }
    uint64_t ElementPtr = 0;
    if (!SExtOrBitCast || *((unsigned char *)SExtOrBitCast + 16) != 16) {
      return ElementPtr;
    }
    int v31 = *(_DWORD *)(a1 + 20);
    uint64_t v32 = (v31 & 0x7FFFFFFu) - 1;
    uint64_t v33 = (v31 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v31 & 0x7FFFFFF);
    int v40 = *(llvm::Type ***)(v33 + 32 * ((v31 & 0x7FFFFFFu) - 1));
    int v41 = *v40;
    if ((*((_DWORD *)*v40 + 2) & 0xFE) == 0x12) {
      return 0;
    }
    char v58 = v60;
    uint64_t v59 = 0x1000000000;
    if ((unint64_t)(a5 + v32) >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, a5 + v32, 8);
      int v31 = *(_DWORD *)(a1 + 20);
    }
    if ((v31 & 0x40000000) != 0)
    {
      uint64_t v43 = *(void *)(a1 - 8);
      uint64_t v42 = v31 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v42 = v31 & 0x7FFFFFF;
      uint64_t v43 = a1 - 32 * v42;
    }
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v58, (char *)(v43 + 32), (char *)(v43 + 32 * v42 - 32));
    if (v41 != *(llvm::Type **)SExtOrBitCast)
    {
      if (*((_DWORD *)v41 + 2) >> 8 <= *(_DWORD *)(*(void *)SExtOrBitCast + 8) >> 8) {
        unsigned int v45 = *(_DWORD *)(*(void *)SExtOrBitCast + 8) >> 8;
      }
      else {
        unsigned int v45 = *((_DWORD *)v41 + 2) >> 8;
      }
      if (v45 <= 0x40) {
        uint64_t v46 = 64;
      }
      else {
        uint64_t v46 = v45;
      }
      BOOL v47 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v41, (llvm::LLVMContext *)v46);
      SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast((llvm::Type **)SExtOrBitCast, v47, v48);
      int v40 = (llvm::Type **)llvm::ConstantExpr::getSExtOrBitCast(v40, v47, v49);
    }
    uint64_t v50 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xD, (llvm::PoisonValue **)SExtOrBitCast, (llvm::Constant *)v40, 0, 0, v44);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v58, (uint64_t)v50);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v58, (unsigned char *)(a4 + 8), (unsigned char *)(a4 + 8 * a5));
    unint64_t v51 = 0;
    unsigned int v52 = *(unsigned __int8 *)(a1 + 17);
    if (v52 <= 3) {
      unsigned __int8 v53 = 0;
    }
    else {
      unsigned __int8 v53 = (*(unsigned char *)(a1 + 17) >> 2) - 1;
    }
    int v54 = *(_DWORD *)(a1 + 20);
    if (v52 >= 4) {
      unint64_t v51 = (unint64_t)((v54 & 0x7FFFFFF) - 2 != ((*(unsigned char *)(a1 + 17) >> 2) - 1)) << 32;
    }
    BOOL v55 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
    uint64_t v56 = 64;
    if (v55) {
      uint64_t v56 = 24;
    }
    if ((v54 & 0x40000000) != 0) {
      BOOL v57 = *(void **)(a1 - 8);
    }
    else {
      BOOL v57 = (void *)(a1 - 32 * (v54 & 0x7FFFFFF));
    }
    uint64_t ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(void *)(a1 + v56), *v57, v58, v59, a3 & (v52 >> 1), v51 | v53, 0);
    char v39 = v58;
    if (v58 != v60) {
      goto LABEL_43;
    }
  }
  return ElementPtr;
}

BOOL isIndexInRangeOfArrayType(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 24);
  int v5 = *(_DWORD *)(a2 + 32);
  if (v5 - llvm::APInt::getNumSignBits((llvm::APInt *)(a2 + 24)) + 1 > 0x40) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 32);
  if (v6 > 0x40)
  {
    unint64_t v7 = **v4;
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
    return 0;
  }
  unint64_t v7 = (uint64_t)((void)*v4 << -(char)v6) >> -(char)v6;
  if ((v7 & 0x8000000000000000) != 0) {
    return 0;
  }
LABEL_4:
  if (v7) {
    BOOL v8 = v7 >= a1;
  }
  else {
    BOOL v8 = 0;
  }
  return !v8;
}

uint64_t isInBoundsIndices<llvm::Value *>(llvm::Constant **a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  int v2 = a2;
  if (llvm::Constant::isNullValue(*a1)) {
    return 1;
  }
  int v5 = *a1;
  if (*a1 && *((unsigned char *)v5 + 16) == 16)
  {
    unsigned int v6 = (llvm::Constant *)((char *)v5 + 24);
    unsigned int v7 = *((_DWORD *)v5 + 8);
    if (v7 <= 0x40)
    {
      uint64_t v8 = *(void *)v6;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = llvm::ConstantDataVector::isSplat(*a1);
    if (!result) {
      return result;
    }
    uint64_t result = llvm::ConstantDataSequential::getElementAsConstant(v5, 0);
    if (!result) {
      return result;
    }
    if (*(unsigned char *)(result + 16) != 16) {
      return 0;
    }
    unsigned int v7 = *(_DWORD *)(result + 32);
    if (v7 <= 0x40)
    {
      uint64_t v8 = *(void *)(result + 24);
LABEL_9:
      if (v8 != 1) {
        return 0;
      }
      goto LABEL_18;
    }
    unsigned int v6 = (llvm::APInt *)(result + 24);
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v6) != v7 - 1) {
    return 0;
  }
LABEL_18:
  if (v2 == 1) {
    return 1;
  }
  int v9 = v2 - 2;
  unsigned int v10 = a1 + 1;
  do
  {
    int v11 = *v10++;
    uint64_t result = llvm::Constant::isNullValue(v11);
    BOOL v13 = v9-- != 0;
  }
  while (result && v13);
  return result;
}

uint64_t llvm::APSInt::compareValues(llvm::APSInt *this, const llvm::APSInt *a2, const llvm::APSInt *a3)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v5 != v6 || (*((unsigned char *)this + 12) == 0) != (*((unsigned char *)a2 + 12) == 0))
  {
    if (v5 > v6)
    {
      llvm::APSInt::extend((llvm::APSInt *)&v15, a2, v5);
      uint64_t v8 = (const llvm::APSInt *)&v15;
      int v9 = this;
      goto LABEL_7;
    }
    if (v6 > v5)
    {
      llvm::APSInt::extend((llvm::APSInt *)&v15, this, v6);
      int v9 = (llvm::APSInt *)&v15;
      uint64_t v8 = a2;
LABEL_7:
      uint64_t v10 = llvm::APSInt::compareValues(v9, v8, v7);
      if (v16 >= 0x41)
      {
        if (v15) {
          MEMORY[0x263E50080](v15, 0x1000C8000313F17);
        }
      }
      return v10;
    }
    if (*((unsigned char *)this + 12))
    {
      if (!*((unsigned char *)a2 + 12))
      {
        int v12 = (const llvm::APSInt *)(*(void *)a2 + 8 * ((v6 - 1) >> 6));
        if (v6 < 0x41) {
          int v12 = a2;
        }
        if ((*(void *)v12 >> (v6 - 1))) {
          return 1;
        }
      }
    }
    else
    {
      char v13 = v5 - 1;
      if (v5 >= 0x41) {
        int v14 = (llvm::APSInt *)(*(void *)this + 8 * ((v5 - 1) >> 6));
      }
      else {
        int v14 = this;
      }
      if ((*(void *)v14 >> v13)) {
        return 0xFFFFFFFFLL;
      }
    }
    goto LABEL_26;
  }
  if (*((unsigned char *)this + 12))
  {
LABEL_26:
    return llvm::APInt::compare(this, a2);
  }
  return llvm::APInt::compareSigned(this, a2);
}

llvm::APInt *llvm::APSInt::extend(llvm::APSInt *this, llvm::APInt *a2, unsigned int a3)
{
  if (*((unsigned char *)a2 + 12))
  {
    unsigned int v5 = v10;
    uint64_t result = llvm::APInt::zext(a2, a3, (llvm::APInt *)v10);
  }
  else
  {
    unsigned int v5 = v9;
    uint64_t result = llvm::APInt::sext(a2, a3, (llvm::APInt *)v9);
  }
  char v7 = *((unsigned char *)a2 + 12);
  uint64_t v8 = *(void *)v5;
  *((_DWORD *)this + 2) = *((_DWORD *)v5 + 2);
  *(void *)this = v8;
  *((unsigned char *)this + 12) = v7;
  return result;
}

uint64_t areGlobalsPotentiallyEqual(const llvm::GlobalValue *a1, const llvm::GlobalValue *a2)
{
  if (*((unsigned char *)a1 + 16) == 1) {
    return 42;
  }
  if (*((unsigned char *)a2 + 16) == 1) {
    return 42;
  }
  if (llvm::GlobalValue::isInterposable(a1)) {
    return 42;
  }
  if ((*((_DWORD *)a1 + 8) & 0xC0) == 0x80) {
    return 42;
  }
  if (*((unsigned char *)a1 + 16) == 3)
  {
    uint64_t v4 = (llvm::Type *)*((void *)a1 + 3);
    if (!llvm::Type::isSized((uint64_t)v4, 0) || (llvm::Type::isEmptyTy(v4, v5) & 1) != 0) {
      return 42;
    }
  }
  if (llvm::GlobalValue::isInterposable(a2)) {
    return 42;
  }
  if ((*((_DWORD *)a2 + 8) & 0xC0) == 0x80) {
    return 42;
  }
  if (*((unsigned char *)a2 + 16) == 3
    && ((unsigned int v6 = (llvm::Type *)*((void *)a2 + 3), !llvm::Type::isSized((uint64_t)v6, 0))
     || llvm::Type::isEmptyTy(v6, v7)))
  {
    return 42;
  }
  else
  {
    return 33;
  }
}

uint64_t llvm::GEPOperator::hasAllZeroIndices(llvm::GEPOperator *this)
{
  int v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    int v3 = (char *)*((void *)this - 1);
    uint64_t v2 = v1 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    int v3 = (char *)this - 32 * v2;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v3 + 32;
  uint64_t v5 = 32 * v2 - 32;
  while (1)
  {
    uint64_t v6 = *(void *)v4;
    if (!*(void *)v4 || *(unsigned char *)(*(void *)v4 + 16) != 16) {
      break;
    }
    uint64_t v8 = (llvm::APInt *)(v6 + 24);
    unsigned int v9 = *(_DWORD *)(v6 + 32);
    if (v9 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9) {
        return 0;
      }
    }
    else if (*(void *)v8)
    {
      return 0;
    }
    v4 += 32;
    v5 -= 32;
    if (!v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>(uint64_t SplatValue)
{
  int v1 = (llvm::Constant *)SplatValue;
  if (!SplatValue || *(unsigned char *)(SplatValue + 16) != 17)
  {
    uint64_t v3 = *(void *)SplatValue;
    if (*(void *)SplatValue) {
      BOOL v4 = (*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) == 18;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      goto LABEL_29;
    }
    uint64_t SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
    if (!SplatValue || *(unsigned char *)(SplatValue + 16) != 17)
    {
      if (*(unsigned char *)(v3 + 8) == 18)
      {
        int v5 = *(_DWORD *)(v3 + 32);
        if (v5)
        {
          uint64_t v6 = 0;
          LOBYTE(v7) = 0;
          while (1)
          {
            Aggregateunsigned __int16 Element = llvm::Constant::getAggregateElement(v1, v6);
            if (!AggregateElement) {
              break;
            }
            int v9 = *(unsigned __int8 *)(AggregateElement + 16);
            if ((v9 - 11) >= 2)
            {
              if (v9 != 17) {
                goto LABEL_29;
              }
              char v10 = *(_UNKNOWN **)(AggregateElement + 32) == &llvm::semPPCDoubleDouble
                  ? *(unsigned char *)(*(void *)(AggregateElement + 40) + 28)
                  : *(unsigned char *)(AggregateElement + 52);
              if ((v10 & 7) != 3 || (v10 & 8) == 0) {
                goto LABEL_29;
              }
              LOBYTE(v7) = 1;
            }
            uint64_t v6 = (llvm::Type *)(v6 + 1);
            if (v5 == v6) {
              return v7 & 1;
            }
          }
        }
      }
      goto LABEL_29;
    }
  }
  if (*(_UNKNOWN **)(SplatValue + 32) == &llvm::semPPCDoubleDouble) {
    unsigned int v2 = *(unsigned __int8 *)(*(void *)(SplatValue + 40) + 28);
  }
  else {
    unsigned int v2 = *(unsigned __int8 *)(SplatValue + 52);
  }
  if ((v2 & 7) != 3)
  {
LABEL_29:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  int v7 = (v2 >> 3) & 1;
  return v7 & 1;
}

llvm::ConstantRange *llvm::ConstantRange::ConstantRange(llvm::ConstantRange *this, unsigned int a2, int a3)
{
  if (a3) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::APInt::APInt(this, a2, v4);
  unsigned int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 6) = v5;
  if (v5 > 0x40) {
    operator new[]();
  }
  *((void *)this + 2) = *(void *)this;
  return this;
}

BOOL llvm::ConstantRange::isEmptySet(const void **this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)) {
      return 0;
    }
    return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == v2;
  }
  else
  {
    return ((unint64_t)this[2] | (unint64_t)*this) == 0;
  }
}

BOOL llvm::ConstantRange::isFullSet(const void **this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_3;
    }
    return 0;
  }
  if (*this != this[2]) {
    return 0;
  }
LABEL_3:
  return llvm::APInt::isAllOnes((llvm::APInt *)this);
}

uint64_t llvm::ConstantRange::intersectWith@<X0>(const void **a1@<X0>, const void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  do
  {
    int v7 = a2;
    a2 = a1;
    uint64_t result = llvm::ConstantRange::isEmptySet(a1);
    if ((result & 1) != 0 || (uint64_t result = llvm::ConstantRange::isFullSet(v7), result))
    {
      unsigned int v17 = *((_DWORD *)a2 + 2);
      *(_DWORD *)(a4 + 8) = v17;
      if (v17 > 0x40) {
        operator new[]();
      }
      *(void *)a4 = *a2;
      unsigned int v19 = *((_DWORD *)a2 + 6);
      *(_DWORD *)(a4 + 24) = v19;
      if (v19 > 0x40) {
        operator new[]();
      }
      uint64_t v20 = a2[2];
      goto LABEL_22;
    }
    uint64_t result = llvm::ConstantRange::isEmptySet(v7);
    if ((result & 1) != 0 || (uint64_t result = llvm::ConstantRange::isFullSet(a2), result))
    {
      unsigned int v18 = *((_DWORD *)v7 + 2);
      *(_DWORD *)(a4 + 8) = v18;
      if (v18 > 0x40) {
        operator new[]();
      }
      *(void *)a4 = *v7;
      unsigned int v21 = *((_DWORD *)v7 + 6);
      *(_DWORD *)(a4 + 24) = v21;
      if (v21 > 0x40) {
        operator new[]();
      }
      uint64_t v20 = v7[2];
      goto LABEL_22;
    }
    int v9 = a2 + 2;
    int v10 = llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)(a2 + 2));
    int v11 = v7 + 2;
    int v12 = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(v7 + 2));
    int v13 = v12;
    if (v10 > 0)
    {
      if (v12 <= 0)
      {
        if ((llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          uint64_t result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
          if ((result & 0x80000000) == 0)
          {
LABEL_36:
            unsigned int v25 = *((_DWORD *)v7 + 2);
            *(_DWORD *)(a4 + 8) = v25;
            if (v25 > 0x40) {
              operator new[]();
            }
            *(void *)a4 = *v7;
            unsigned int v29 = *((_DWORD *)v7 + 6);
            *(_DWORD *)(a4 + 24) = v29;
            if (v29 > 0x40) {
              operator new[]();
            }
            uint64_t v20 = *v11;
            goto LABEL_22;
          }
          uint64_t result = llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2);
          unsigned int v14 = *((_DWORD *)a2 + 2);
          if ((int)result > 0) {
            goto LABEL_32;
          }
LABEL_10:
          uint64_t v15 = (llvm::ConstantRange *)a4;
          unsigned int v16 = v14;
          goto LABEL_60;
        }
        if ((llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          uint64_t result = llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2);
          if ((int)result <= 0) {
            goto LABEL_53;
          }
          goto LABEL_50;
        }
      }
      else
      {
        if ((llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          if ((int)llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2) <= 0)
          {
            uint64_t result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v22 = a4;
              uint64_t v23 = (const llvm::ConstantRange *)a2;
LABEL_56:
              return llvm::ConstantRange::ConstantRange(v22, v23);
            }
LABEL_53:
            unsigned int v30 = *((_DWORD *)v7 + 2);
            if (v30 > 0x40) {
              operator new[]();
            }
            int v31 = *v7;
            unsigned int v33 = *((_DWORD *)a2 + 6);
            if (v33 > 0x40) {
              operator new[]();
            }
            uint64_t v34 = *v9;
            *(_DWORD *)(a4 + 8) = v30;
            *(void *)a4 = v31;
LABEL_79:
            *(_DWORD *)(a4 + 24) = v33;
            goto LABEL_80;
          }
LABEL_50:
          return getPreferredRange(a4, (llvm::ConstantRange *)a2, (llvm::ConstantRange *)v7, a3);
        }
        if ((llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(a2 + 2)) & 0x80000000) != 0) {
          goto LABEL_50;
        }
        uint64_t result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
        if ((result & 0x80000000) != 0)
        {
          unsigned int v26 = *((_DWORD *)a2 + 2);
          if (v26 > 0x40) {
            operator new[]();
          }
          int v27 = *a2;
          unsigned int v33 = *((_DWORD *)v7 + 6);
          if (v33 > 0x40) {
            operator new[]();
          }
          uint64_t v34 = *v11;
          *(_DWORD *)(a4 + 8) = v26;
          *(void *)a4 = v27;
          goto LABEL_79;
        }
      }
      uint64_t v22 = a4;
      uint64_t v23 = (const llvm::ConstantRange *)v7;
      goto LABEL_56;
    }
    a1 = v7;
  }
  while (v13 > 0);
  if ((llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)v7) & 0x80000000) != 0)
  {
    if ((int)llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)v7) > 0)
    {
      uint64_t result = llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)(v7 + 2));
      if ((result & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_53;
    }
    unsigned int v16 = *((_DWORD *)a2 + 2);
    uint64_t v15 = (llvm::ConstantRange *)a4;
LABEL_60:
    return (uint64_t)llvm::ConstantRange::ConstantRange(v15, v16, 0);
  }
  uint64_t result = llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)(v7 + 2));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v28 = *((_DWORD *)a2 + 2);
    *(_DWORD *)(a4 + 8) = v28;
    if (v28 > 0x40) {
      operator new[]();
    }
    *(void *)a4 = *a2;
    unsigned int v32 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a4 + 24) = v32;
    if (v32 > 0x40) {
      operator new[]();
    }
    uint64_t v20 = *v9;
LABEL_22:
    *(void *)(a4 + 16) = v20;
    return result;
  }
  uint64_t result = llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)(v7 + 2));
  unsigned int v14 = *((_DWORD *)a2 + 2);
  if ((result & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_32:
  if (v14 > 0x40) {
    operator new[]();
  }
  BOOL v24 = *a2;
  unsigned int v35 = *((_DWORD *)v7 + 6);
  if (v35 > 0x40) {
    operator new[]();
  }
  uint64_t v34 = *v11;
  *(_DWORD *)(a4 + 8) = v14;
  *(void *)a4 = v24;
  *(_DWORD *)(a4 + 24) = v35;
LABEL_80:
  *(void *)(a4 + 16) = v34;
  return result;
}

uint64_t llvm::ConstantRange::isWrappedSet(llvm::ConstantRange *this)
{
  uint64_t v2 = (llvm::ConstantRange *)((char *)this + 16);
  if ((int)llvm::APInt::compare(this, (llvm::ConstantRange *)((char *)this + 16)) < 1) {
    return 0;
  }
  unsigned int v3 = *((_DWORD *)this + 6);
  if (v3 > 0x40) {
    BOOL v4 = llvm::APInt::countLeadingZerosSlowCase(v2) == v3;
  }
  else {
    BOOL v4 = *(void *)v2 == 0;
  }
  int v6 = v4;
  return v6 ^ 1u;
}

BOOL llvm::ConstantRange::isSignWrappedSet(llvm::ConstantRange *this)
{
  int v1 = (llvm::ConstantRange *)((char *)this + 16);
  return (int)llvm::APInt::compareSigned(this, (llvm::ConstantRange *)((char *)this + 16)) >= 1
      && !llvm::APInt::isMinSignedValue(v1);
}

BOOL llvm::ConstantRange::isSizeStrictlySmallerThan(const void **this, const void **a2)
{
  if (llvm::ConstantRange::isFullSet(this)) {
    return 0;
  }
  if (llvm::ConstantRange::isFullSet(a2)) {
    return 1;
  }
  unsigned int v15 = *((_DWORD *)this + 6);
  if (v15 > 0x40) {
    operator new[]();
  }
  unsigned int v14 = (char *)this[2];
  llvm::APInt::operator-=((uint64_t)&v14, (void **)this);
  uint64_t v5 = v15;
  int v6 = v14;
  unsigned int v15 = 0;
  unsigned int v13 = *((_DWORD *)a2 + 6);
  if (v13 > 0x40) {
    operator new[]();
  }
  int v12 = (char *)a2[2];
  llvm::APInt::operator-=((uint64_t)&v12, (void **)a2);
  unsigned int v7 = v13;
  unsigned int v13 = 0;
  if (v5 > 0x40)
  {
    unint64_t v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    while (v8)
    {
      unint64_t v9 = *(void *)&v6[v8 - 8];
      unint64_t v10 = *(void *)&v12[v8 - 8];
      v8 -= 8;
      if (v9 != v10)
      {
        BOOL v4 = v9 <= v10;
        goto LABEL_18;
      }
    }
    BOOL v4 = 0;
  }
  else
  {
    BOOL v4 = v6 < v12;
  }
LABEL_18:
  if (v7 >= 0x41)
  {
    if (v12)
    {
      MEMORY[0x263E50080](v12, 0x1000C8000313F17);
      if (v13 >= 0x41)
      {
        if (v12) {
          MEMORY[0x263E50080](v12, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v5 >= 0x41 && v6) {
    MEMORY[0x263E50080](v6, 0x1000C8000313F17);
  }
  if (v15 >= 0x41 && v14) {
    MEMORY[0x263E50080](v14, 0x1000C8000313F17);
  }
  return v4;
}

uint64_t getPreferredRange(uint64_t a1, llvm::ConstantRange *this, llvm::ConstantRange *a3, int a4)
{
  if (a4 == 2)
  {
    if (!llvm::ConstantRange::isSignWrappedSet(this))
    {
      uint64_t result = llvm::ConstantRange::isSignWrappedSet(a3);
      if (result) {
        goto LABEL_13;
      }
    }
    if (llvm::ConstantRange::isSignWrappedSet(this))
    {
      uint64_t result = llvm::ConstantRange::isSignWrappedSet(a3);
      if ((result & 1) == 0) {
        goto LABEL_15;
      }
    }
  }
  else if (a4 == 1)
  {
    char isWrappedSet = llvm::ConstantRange::isWrappedSet(this);
    uint64_t result = llvm::ConstantRange::isWrappedSet(a3);
    if (isWrappedSet)
    {
      if ((result & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if (result)
    {
      goto LABEL_13;
    }
  }
  uint64_t result = llvm::ConstantRange::isSizeStrictlySmallerThan((const void **)this, (const void **)a3);
  if (!result)
  {
LABEL_15:
    unsigned int v10 = *((_DWORD *)a3 + 2);
    *(_DWORD *)(a1 + 8) = v10;
    if (v10 > 0x40) {
      operator new[]();
    }
    *(void *)a1 = *(void *)a3;
    unsigned int v13 = *((_DWORD *)a3 + 6);
    *(_DWORD *)(a1 + 24) = v13;
    if (v13 > 0x40) {
      operator new[]();
    }
    uint64_t v12 = *((void *)a3 + 2);
    goto LABEL_24;
  }
LABEL_13:
  unsigned int v9 = *((_DWORD *)this + 2);
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 > 0x40) {
    operator new[]();
  }
  *(void *)a1 = *(void *)this;
  unsigned int v11 = *((_DWORD *)this + 6);
  *(_DWORD *)(a1 + 24) = v11;
  if (v11 > 0x40) {
    operator new[]();
  }
  uint64_t v12 = *((void *)this + 2);
LABEL_24:
  *(void *)(a1 + 16) = v12;
  return result;
}

uint64_t llvm::Constant::getSplatValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t v3 = 0;
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0xC)
  {
    if (v4 != 5)
    {
      if (v4 == 10)
      {
        uint64_t v5 = *((_DWORD *)this + 5) & 0x7FFFFFF;
        uint64_t v6 = *((void *)this - 4 * v5);
        if (v5 < 2)
        {
          return *((void *)this - 4 * v5);
        }
        else
        {
          uint64_t v7 = -32 * v5;
          do
          {
            uint64_t v3 = *(void *)((char *)this + v7 + 32);
            BOOL v8 = v3 == v6 || a2 == 0;
            if (v8)
            {
              BOOL v8 = v3 == v6;
              uint64_t v3 = v6;
              if (!v8) {
                return 0;
              }
            }
            else if (*(unsigned __int8 *)(v3 + 16) - 11 >= 2)
            {
              if (*(unsigned __int8 *)(v6 + 16) - 11 >= 2) {
                return 0;
              }
            }
            else
            {
              uint64_t v3 = v6;
            }
            v7 += 32;
            uint64_t v6 = v3;
          }
          while (v7 != -32);
        }
      }
      return v3;
    }
    if (*((_WORD *)this + 9) != 63) {
      return 0;
    }
    unsigned int v11 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (*(unsigned __int8 *)(v11[4] + 16) - 11 > 1) {
      return 0;
    }
    uint64_t v12 = *v11;
    if (!v12 || *(unsigned char *)(v12 + 16) != 5) {
      return 0;
    }
    if (*(_WORD *)(v12 + 18) != 62) {
      return 0;
    }
    unsigned int v14 = (void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
    if (*(unsigned __int8 *)(*v14 + 16) - 11 > 1) {
      return 0;
    }
    uint64_t v15 = v14[8];
    if (!v15 || *(unsigned char *)(v15 + 16) != 16) {
      return 0;
    }
    unsigned int v17 = (_DWORD *)*((void *)this + 3);
    uint64_t v18 = *((unsigned int *)this + 8);
    uint64_t v3 = v14[4];
    unsigned int v19 = (void *)(v15 + 24);
    unsigned int v20 = *(_DWORD *)(v15 + 32);
    if (v20 >= 0x41)
    {
      if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24)) > 0x40) {
        return 0;
      }
      unsigned int v19 = (void *)*v19;
    }
    if (!*v19)
    {
      if (v18)
      {
        uint64_t v21 = 4 * v18;
        while (!*v17)
        {
          ++v17;
          v21 -= 4;
          if (!v21) {
            return v3;
          }
        }
        return 0;
      }
      return v3;
    }
    return 0;
  }
  if (v4 == 15)
  {
    if (!llvm::ConstantDataVector::isSplat(this)) {
      return 0;
    }
    return llvm::ConstantDataSequential::getElementAsConstant(this, 0);
  }
  else
  {
    if (v4 != 13) {
      return v3;
    }
    unsigned int v9 = *(llvm::Constant **)(*(void *)this + 24);
    return llvm::Constant::getNullValue(v9, a2);
  }
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 16)
  {
    unsigned int v2 = *((_DWORD *)this + 8);
    if (v2 > 0x40) {
      return llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) == v2;
    }
    else {
      return *((void *)this + 3) == 0;
    }
  }
  else if (this && v1 == 17)
  {
    return llvm::ConstantFP::isExactlyValue((void **)this, 0.0);
  }
  else
  {
    BOOL v5 = v1 > 0x14;
    unsigned int v6 = (0x1C2000u >> v1) & 1;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  if (this && *((unsigned char *)this + 16) == 17)
  {
    if (*((_UNKNOWN **)this + 4) == &llvm::semPPCDoubleDouble) {
      unsigned int v2 = (char *)*((void *)this + 5);
    }
    else {
      unsigned int v2 = (char *)this + 24;
    }
    return (v2[28] & 7) == 3;
  }
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12)
  {
    uint64_t SplatValue = llvm::Constant::getSplatValue(this, 0);
    if (SplatValue)
    {
      if (*(unsigned char *)(SplatValue + 16) == 17)
      {
        if (*(_UNKNOWN **)(SplatValue + 32) == &llvm::semPPCDoubleDouble) {
          unsigned int v2 = *(char **)(SplatValue + 40);
        }
        else {
          unsigned int v2 = (char *)(SplatValue + 24);
        }
        return (v2[28] & 7) == 3;
      }
    }
  }
  return llvm::Constant::isNullValue(this);
}

BOOL llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  while (1)
  {
    int v1 = *((unsigned __int8 *)this + 16);
    if (this)
    {
      if (v1 == 16) {
        break;
      }
    }
    if (this && v1 == 17)
    {
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v5, (llvm::Constant *)((char *)this + 24));
      BOOL isAllOnes = llvm::APInt::isAllOnes((llvm::APInt *)&v5);
      if (v6 >= 0x41 && v5) {
        MEMORY[0x263E50080](v5, 0x1000C8000313F17);
      }
      return isAllOnes;
    }
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12)
    {
      this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
      if (this) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v3 = (llvm::Constant *)((char *)this + 24);
  return llvm::APInt::isAllOnes(v3);
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Type *a2)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (this && (v2 - 11) >= 0xFDu)
  {
    uint64_t v3 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v3 > a2) {
      return *((void *)this + 4 * a2 + -4 * v3);
    }
    return 0;
  }
  uint64_t v5 = *(void *)this;
  int v6 = *(unsigned __int8 *)(*(void *)this + 8);
  if (this && v2 == 13)
  {
    if (v5 && v6 == 17)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 32);
    }
    else if (v5 && (v6 & 0xFE) == 0x12)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 32);
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(v5 + 12);
    }
    if (v7 > a2)
    {
      if (v6 == 17 || (v6 & 0xFE) == 18) {
        unsigned int v11 = (llvm::Constant **)(v5 + 24);
      }
      else {
        unsigned int v11 = (llvm::Constant **)(*(void *)(v5 + 16) + 8 * a2);
      }
      return llvm::Constant::getNullValue(*v11, a2);
    }
    return 0;
  }
  if (v6 == 19) {
    return 0;
  }
  if (v2 == 12)
  {
    if (v6 == 17 || (v6 & 0xFE) == 0x12) {
      unsigned int v8 = *(_DWORD *)(v5 + 32);
    }
    else {
      unsigned int v8 = *(_DWORD *)(v5 + 12);
    }
    if (v8 <= a2) {
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 18) {
      unsigned int v13 = (llvm::PoisonValue **)(v5 + 24);
    }
    else {
      unsigned int v13 = (llvm::PoisonValue **)(*(void *)(v5 + 16) + 8 * a2);
    }
    return llvm::PoisonValue::get(*v13, a2);
  }
  else
  {
    if ((v2 - 11) > 1u)
    {
      if ((v2 & 0xFE) == 0xE && *(_DWORD *)(v5 + 32) > a2) {
        return llvm::ConstantDataSequential::getElementAsConstant(this, a2);
      }
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 0x12) {
      unsigned int v9 = *(_DWORD *)(v5 + 32);
    }
    else {
      unsigned int v9 = *(_DWORD *)(v5 + 12);
    }
    if (v9 <= a2) {
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 0x12) {
      unsigned int v14 = (llvm::UndefValue **)(v5 + 24);
    }
    else {
      unsigned int v14 = (llvm::UndefValue **)(*(void *)(v5 + 16) + 8 * a2);
    }
    return llvm::UndefValue::get(*v14, a2);
  }
}

llvm::Constant *llvm::ConstantExpr::getICmp(llvm::ConstantExpr *this, llvm::Type *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a4;
  __int16 v7 = (__int16)this;
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t result = llvm::ConstantFoldCompareInstruction(this, a2, (uint64_t)a3, (BOOL)a4);
  if (!result && (v4 & 1) == 0)
  {
    v18[0] = a2;
    v18[1] = a3;
    uint64_t v10 = ***(void ***)a2;
    unsigned int v11 = (uint64_t **)(v10 + 1920);
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get(v11, (llvm::Type *)(*(unsigned int *)(*(void *)a2 + 32) | ((unint64_t)(*(_DWORD *)(*(void *)a2 + 8) == 19) << 32)));
      unsigned int v11 = v12;
      uint64_t v10 = ***(void ***)a2;
    }
    LOWORD(v13) = 53;
    WORD1(v13) = v7;
    *((void *)&v13 + 1) = v18;
    uint64_t v14 = 2;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    return (llvm::Constant *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v10 + 1544, (llvm::Type *)v11, &v13, v9);
  }
  return result;
}

uint64_t containsUndefinedElement(llvm::Constant *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1) {
    BOOL v4 = (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 0;
  }
  if ((a2(a3, (uint64_t)a1) & 1) == 0)
  {
    if (*((unsigned char *)a1 + 16) == 13) {
      return 0;
    }
    if (*(unsigned char *)(*(void *)a1 + 8) == 19) {
      return 0;
    }
    int v9 = *(_DWORD *)(v3 + 32);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = 0;
    while (1)
    {
      Aggregateunsigned __int16 Element = llvm::Constant::getAggregateElement(a1, v10);
      if (AggregateElement)
      {
        if (a2(a3, AggregateElement)) {
          break;
        }
      }
      uint64_t result = 0;
      uint64_t v10 = (llvm::Type *)(v10 + 1);
      if (v9 == v10) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t llvm::Constant::containsPoisonElement(llvm::Constant *this)
{
  return containsUndefinedElement(this, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<BOOL ()(llvm::Constant const*)>::callback_fn<llvm::Constant::containsPoisonElement(void)::$_0>, (uint64_t)&v2);
}

BOOL llvm::Constant::containsConstantExpression(llvm::Constant *this)
{
  if (*(void *)this) {
    BOOL v1 = *(unsigned char *)(*(void *)this + 8) == 18;
  }
  else {
    BOOL v1 = 0;
  }
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(*(void *)this + 32);
  if (!v2) {
    return 0;
  }
  BOOL v4 = 0;
  int v5 = v2 - 1;
  do
  {
    int v6 = *(unsigned __int8 *)(llvm::Constant::getAggregateElement(this, v4) + 16);
    BOOL result = v6 == 5;
    BOOL v8 = v6 == 5 || v5 == v4;
    BOOL v4 = (llvm::Type *)(v4 + 1);
  }
  while (!v8);
  return result;
}

uint64_t llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2)
{
  v8[3] = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 2);
  switch((char)v2)
  {
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 20:
      __break(1u);
      JUMPOUT(0x261E18A58);
    case 12:
      int v6 = *(uint64_t **)this;
      uint64_t result = llvm::ConstantTokenNone::get(v6);
      break;
    case 13:
      uint64_t result = llvm::ConstantInt::get(this, 0);
      break;
    case 15:
      uint64_t result = llvm::ConstantPointerNull::get((uint64_t)this);
      break;
    case 16:
    case 17:
    case 18:
    case 19:
      uint64_t result = llvm::ConstantAggregateZero::get(this, a2);
      break;
    case 21:
      uint64_t result = llvm::ConstantTargetNone::get((uint64_t)this);
      break;
    default:
      uint64_t v3 = *(void *)this;
      llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v8, *(&off_265597388 + (char)v2));
      llvm::APFloat::makeZero((llvm::APFloat *)v7, 0);
      uint64_t v4 = llvm::ConstantFP::get(v3, (uint64_t)v7);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v8);
      uint64_t result = v4;
      break;
  }
  return result;
}

uint64_t llvm::ConstantInt::get(llvm::ConstantInt *this, llvm::Type *a2)
{
  int v2 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    this = (llvm::ConstantInt *)**((void **)this + 2);
  }
  uint64_t result = llvm::ConstantInt::get((uint64_t)this, (uint64_t)a2);
  uint64_t v5 = result;
  if ((*((_DWORD *)v2 + 2) & 0xFE) == 0x12)
  {
    int v6 = (llvm::Type *)(*((unsigned int *)v2 + 8) | ((unint64_t)(*((_DWORD *)v2 + 2) == 19) << 32));
    return llvm::ConstantVector::getSplat(v6, v5, v4);
  }
  return result;
}

uint64_t llvm::ConstantFP::get(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)((char *)llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::FindAndConstruct((uint64_t *)(*(void *)a1 + 240), a2)+ 32);
  uint64_t result = *v5;
  if (!*v5)
  {
    BOOL v8 = *(void **)(a2 + 8);
    __int16 v7 = (const llvm::APFloat::Storage *)(a2 + 8);
    int v6 = v8;
    if (v8 == &llvm::semIEEEhalf)
    {
      uint64_t v9 = *(void *)a1 + 1656;
    }
    else if (v6 == &llvm::semBFloat)
    {
      uint64_t v9 = *(void *)a1 + 1680;
    }
    else if (v6 == &llvm::semIEEEsingle)
    {
      uint64_t v9 = *(void *)a1 + 1704;
    }
    else if (v6 == &llvm::semIEEEdouble)
    {
      uint64_t v9 = *(void *)a1 + 1728;
    }
    else if (v6 == &llvm::semX87DoubleExtended)
    {
      uint64_t v9 = *(void *)a1 + 1800;
    }
    else if (v6 == &llvm::semIEEEquad)
    {
      uint64_t v9 = *(void *)a1 + 1824;
    }
    else
    {
      uint64_t v9 = *(void *)a1 + 1848;
    }
    uint64_t v10 = operator new(0x38uLL);
    *uint64_t v10 = v9;
    v10[1] = 0;
    v10[2] = 17;
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)(v10 + 4), v7);
    std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](v5, (uint64_t)v10);
    return *v5;
  }
  return result;
}

uint64_t llvm::ConstantPointerNull::get(uint64_t a1)
{
  uint64_t v4 = a1;
  int v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(void **)a1 + 1352), &v4)+ 1;
  uint64_t result = *v2;
  if (!*v2)
  {
    uint64_t v3 = operator new(0x18uLL);
    *uint64_t v3 = v4;
    v3[1] = 0;
    v3[2] = 19;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v2, v3);
    return *v2;
  }
  return result;
}

uint64_t llvm::ConstantAggregateZero::get(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  uint64_t v5 = this;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(void **)this + 1256), &v5)+ 1;
  uint64_t result = *v3;
  if (!*v3)
  {
    uint64_t v4 = operator new(0x18uLL);
    *uint64_t v4 = v5;
    v4[1] = 0;
    v4[2] = 13;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

uint64_t llvm::ConstantTokenNone::get(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = *(void *)(*a1 + 2064);
  if (!result)
  {
    uint64_t v4 = v2 + 2064;
    uint64_t v5 = operator new(0x18uLL);
    *uint64_t v5 = *a1 + 1776;
    v5[1] = 0;
    v5[2] = 20;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v4, v5);
    return *(void *)v4;
  }
  return result;
}

uint64_t llvm::ConstantTargetNone::get(uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(void **)a1 + 1376), &v4)+ 1;
  uint64_t result = *v2;
  if (!*v2)
  {
    uint64_t v3 = operator new(0x18uLL);
    *uint64_t v3 = v4;
    v3[1] = 0;
    v3[2] = 18;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v2, v3);
    return *v2;
  }
  return result;
}

uint64_t llvm::ConstantInt::get(llvm::IntegerType *a1, llvm::APInt *this, uint64_t a3, unint64_t *a4)
{
  int v6 = *(uint64_t **)a1;
  unsigned int v7 = *((_DWORD *)this + 2);
  if (v7 > 0x40)
  {
    int v10 = llvm::APInt::countLeadingZerosSlowCase(this);
    if (v10 != v7)
    {
      if (v10 == v7 - 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
LABEL_6:
    BOOL v8 = v6 + 21;
    unsigned int v17 = v7;
    uint64_t v9 = &v17;
    goto LABEL_7;
  }
  if (!*(void *)this) {
    goto LABEL_6;
  }
  if (*(void *)this == 1)
  {
LABEL_4:
    BOOL v8 = v6 + 24;
    unsigned int v16 = v7;
    uint64_t v9 = &v16;
LABEL_7:
    unsigned int v11 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(v8, v9)+ 2;
    goto LABEL_10;
  }
LABEL_9:
  unsigned int v11 = (_DWORD *)((char *)llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(v6 + 27, (llvm::hashing::detail::hash_state **)this, a3, a4)+ 16);
LABEL_10:
  uint64_t result = *(void *)v11;
  if (!*(void *)v11)
  {
    long long v13 = llvm::IntegerType::get(a1, (llvm::LLVMContext *)*((unsigned int *)this + 2));
    uint64_t v14 = operator new(0x28uLL);
    v14[5] &= 0x38000000u;
    uint64_t result = llvm::ConstantInt::ConstantInt((uint64_t)v14, (uint64_t)v13, (uint64_t)this);
    uint64_t v15 = *(void *)v11;
    *(void *)unsigned int v11 = result;
    if (v15)
    {
      std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v11, v15);
      return *(void *)v11;
    }
  }
  return result;
}

uint64_t llvm::ConstantVector::getSplat(llvm::Type *a1, uint64_t a2, llvm::Constant *a3)
{
  unsigned int v4 = a1;
  v25[32] = *MEMORY[0x263EF8340];
  if (((unint64_t)a1 & 0xFF00000000) != 0)
  {
    llvm::VectorType::get(*(uint64_t ***)a2, a1);
    int v6 = v5;
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    {
      return llvm::ConstantAggregateZero::get(v6, v7);
    }
    if (*(unsigned __int8 *)(a2 + 16) - 11 <= 1)
    {
      return llvm::UndefValue::get(v6, v7);
    }
    unsigned int v17 = (llvm::ConstantInt *)(**(void **)v6 + 2016);
    uint64_t v18 = (llvm::ConstantExpr *)llvm::PoisonValue::get(v6, v7);
    unsigned int v20 = (llvm::Constant *)llvm::ConstantInt::get(v17, 0, 0, v19);
    Insertunsigned __int16 Element = llvm::ConstantExpr::getInsertElement(v18, (llvm::Constant *)a2, v20, 0, v21);
    uint64_t v23 = v25;
    uint64_t v24 = 0x800000000;
    llvm::SmallVectorImpl<int>::assign((uint64_t)&v23, v4, 0);
    ShuffleVector = llvm::ConstantExpr::getShuffleVector(InsertElement, v18, (int *)v23, v24, 0);
    unsigned int v16 = v23;
    if (v23 == v25) {
      return (uint64_t)ShuffleVector;
    }
LABEL_21:
    free(v16);
    return (uint64_t)ShuffleVector;
  }
  if ((*(unsigned char *)(a2 + 16) & 0xFE) != 0x10
    || (unsigned int v9 = *(_DWORD *)(*(void *)a2 + 8), v9 >= 4u)
    && (v9 != 13
     || ((HIDWORD(v11) = v9 >> 8,
          LODWORD(v11) = (v9 >> 8) - 8,
          unsigned int v10 = v11 >> 3,
          BOOL v12 = v10 > 7,
          int v13 = (1 << v10) & 0x8B,
          !v12)
       ? (BOOL v14 = v13 == 0)
       : (BOOL v14 = 1),
         v14)))
  {
    uint64_t v23 = v25;
    uint64_t v24 = 0x2000000000;
    llvm::SmallVectorImpl<llvm::Constant *>::assign((uint64_t)&v23, a1, a2);
    ShuffleVector = llvm::ConstantVector::get((uint64_t ****)v23, (llvm::Type *)v24);
    unsigned int v16 = v23;
    if (v23 == v25) {
      return (uint64_t)ShuffleVector;
    }
    goto LABEL_21;
  }
  return llvm::ConstantDataVector::getSplat(a1, (void **)a2, a3);
}

uint64_t llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v3 = *((_DWORD *)this + 2);
  if (this && v3 == 13)
  {
    unsigned int v4 = *(llvm::IntegerType **)this;
    llvm::APInt::APInt((llvm::APInt *)&v14, v3 >> 8, -1);
    uint64_t v7 = llvm::ConstantInt::get(v4, (llvm::APInt *)&v14, v5, v6);
    if (v15[0] >= 0x41)
    {
      if (v14) {
        MEMORY[0x263E50080](v14, 0x1000C8000313F17);
      }
    }
    return v7;
  }
  if (v3 < 4u || v3 == 5 || (v3 & 0xFD) == 4)
  {
    llvm::APFloat::getAllOnesValue((unsigned int *)*(&off_265597388 + (char)v3), (uint64_t)&v14);
    uint64_t v7 = llvm::ConstantFP::get(*(void *)this, (uint64_t)&v14);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v15);
    return v7;
  }
  uint64_t v11 = *((unsigned int *)this + 8);
  uint64_t v12 = v3 == 19;
  uint64_t AllOnesValue = llvm::Constant::getAllOnesValue(*((llvm::Constant **)this + 3), a2);
  return llvm::ConstantVector::getSplat(v11 | (v12 << 32), AllOnesValue);
}

uint64_t llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantDataSequential *this, unsigned int a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(llvm::ConstantInt **)(*(void *)this + 24);
  if ((*((unsigned char *)v2 + 8) & 0xFC) != 0)
  {
    ElementAsInteger = (llvm::Type *)llvm::ConstantDataSequential::getElementAsInteger(this, a2);
    return llvm::ConstantInt::get(v2, ElementAsInteger, 0, v4);
  }
  else
  {
    uint64_t v6 = **(void **)this;
    llvm::ConstantDataSequential::getElementAsAPFloat(this, a2, (uint64_t)v8);
    uint64_t v7 = llvm::ConstantFP::get(v6, (uint64_t)v8);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v9);
    return v7;
  }
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 16) {
    return 0;
  }
  unsigned int v3 = (unsigned int *)((char *)a2 + 24);
  unsigned int v4 = *((_DWORD *)a2 + 8);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40) {
      return 0;
    }
    unsigned int v3 = *(unsigned int **)v3;
  }
  uint64_t v6 = (llvm::Type *)*v3;
  return llvm::Constant::getAggregateElement(this, v6);
}

void llvm::Constant::destroyConstant(int32x2_t ****this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  switch(*((unsigned char *)this + 16))
  {
    case 5:
      llvm::ConstantUniqueMap<llvm::ConstantExpr>::remove(***this + 193, (uint64_t)this, a3, a4);
      break;
    case 6:
      v17[0] = *(this - 4);
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(***(void ***)v17[0] + 1496, v17);
      break;
    case 7:
      v17[0] = *(this - 4);
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(***(void ***)v17[0] + 1520, v17);
      break;
    case 8:
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove(***this + 160, (uint64_t *)this, a3, a4);
      break;
    case 9:
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove(***this + 163, (uint64_t *)this, a3, a4);
      break;
    case 0xA:
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove(***this + 166, (uint64_t *)this, a3, a4);
      break;
    case 0xB:
      llvm::UndefValue::destroyConstantImpl((llvm::UndefValue *)this);
    case 0xC:
      uint64_t v12 = (uint64_t)&(***this)[178];
      v17[0] = *this;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(v12, v17);
      break;
    case 0xD:
      BOOL v8 = ***this;
      uint64_t v16 = *this;
      v17[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v8[157], &v16, v17))
      {
        unsigned int v9 = (void *)v17[0];
        std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v17[0] + 8, 0);
        void *v9 = -8192;
        v8[158] = vadd_s32(v8[158], (int32x2_t)0x1FFFFFFFFLL);
      }
      break;
    case 0xE:
    case 0xF:
      llvm::ConstantDataSequential::destroyConstantImpl((llvm::Value **)this);
      break;
    case 0x10:
    case 0x11:
      __break(1u);
      JUMPOUT(0x261E19708);
    case 0x12:
      int v13 = ***this;
      uint64_t v16 = *this;
      v17[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v13[172], &v16, v17))
      {
        uint64_t v14 = (void *)v17[0];
        std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v17[0] + 8, 0);
        *uint64_t v14 = -8192;
        v13[173] = vadd_s32(v13[173], (int32x2_t)0x1FFFFFFFFLL);
      }
      break;
    case 0x13:
      uint64_t v6 = ***this;
      uint64_t v16 = *this;
      v17[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v6[169], &v16, v17))
      {
        uint64_t v7 = (void *)v17[0];
        std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v17[0] + 8, 0);
        *uint64_t v7 = -8192;
        v6[170] = vadd_s32(v6[170], (int32x2_t)0x1FFFFFFFFLL);
      }
      break;
    default:
      uint64_t v10 = *(void *)***(this - 8) + 1472;
      uint64_t v11 = (uint64_t)*(this - 4);
      v17[0] = *(this - 8);
      v17[1] = v11;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::erase(v10, (uint64_t)v17);
      *((_WORD *)*(this - 4) + 9) = *((_WORD *)*(this - 4) + 9) & 0x8000 | (*((_WORD *)*(this - 4) + 9) - 1) & 0x7FFF;
      break;
  }
  while (1)
  {
    uint64_t v15 = this[1];
    if (!v15) {
      break;
    }
    llvm::Constant::destroyConstant((llvm::Constant *)v15[3]);
  }
  llvm::deleteConstant((llvm::Value **)this, v5);
}

void llvm::UndefValue::destroyConstantImpl(llvm::UndefValue *this)
{
  if (*((unsigned char *)this + 16) == 11)
  {
    BOOL v1 = *(void ***)this;
    uint64_t v2 = ***(void ***)this + 1400;
    uint64_t v5 = v1;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(v2, &v5);
    __break(1u);
  }
  unsigned int v3 = *(void ***)this;
  uint64_t v4 = ***(void ***)this + 1424;
  uint64_t v5 = v3;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(v4, &v5);
  __break(1u);
}

void llvm::ConstantDataSequential::destroyConstantImpl(llvm::Value **this)
{
  uint64_t v2 = **(void **)*this;
  RawDataValues = (uint64_t *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)this);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v2 + 1448), RawDataValues, v4);
  uint64_t v6 = *(void *)(v2 + 1448);
  if (Key == -1) {
    uint64_t v7 = *(unsigned int *)(v2 + 1456);
  }
  else {
    uint64_t v7 = Key;
  }
  uint64_t v8 = *(void *)(v6 + 8 * v7);
  uint64_t v10 = *(void *)(v8 + 8);
  unsigned int v9 = (llvm::Value **)(v8 + 8);
  if (!*(void *)(v10 + 32))
  {
    llvm::StringMapImpl::RemoveKey(**(void **)*this + 1448, (uint64_t *)(*(void *)(v6 + 8 * v7) + *(unsigned int *)(**(void **)*this + 1468)), **(void **)(v6 + 8 * v7));
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v9, 0);
    JUMPOUT(0x263E500A0);
  }
  do
  {
    uint64_t v11 = v9;
    uint64_t v12 = *v9;
    unsigned int v9 = (llvm::Value **)((char *)*v9 + 32);
  }
  while (v12 != (llvm::ConstantDataSequential *)this);
  int v13 = this[4];
  this[4] = 0;
  std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v11, v13);
}

void llvm::deleteConstant(llvm::Value **this, llvm::Constant *a2)
{
  switch(*((unsigned char *)this + 16))
  {
    case 5:
      int v4 = *((unsigned __int16 *)this + 9);
      if ((v4 - 38) <= 0xC || (v4 - 13) <= 0x11 || v4 != 63) {
        goto LABEL_2;
      }
      llvm::ShuffleVectorConstantExpr::~ShuffleVectorConstantExpr((llvm::ShuffleVectorConstantExpr *)this);
      break;
    case 0xE:
    case 0xF:
      std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](this + 4, 0);
      goto LABEL_2;
    case 0x10:
      if (*((_DWORD *)this + 8) >= 0x41u)
      {
        unsigned int v3 = this[3];
        if (v3) {
          MEMORY[0x263E50080](v3, 0x1000C8000313F17);
        }
      }
      goto LABEL_2;
    case 0x11:
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(this + 4));
      goto LABEL_2;
    case 0x12:
      __break(1u);
      JUMPOUT(0x261E199A4);
    default:
LABEL_2:
      llvm::Value::~Value((llvm::Value *)this);
      break;
  }
  llvm::User::operator delete((void **)this);
}

void llvm::ShuffleVectorConstantExpr::~ShuffleVectorConstantExpr(llvm::ShuffleVectorConstantExpr *this)
{
  uint64_t v2 = (char *)*((void *)this + 3);
  if (v2 != (char *)this + 40) {
    free(v2);
  }
  llvm::Value::~Value(this);
}

uint64_t llvm::Constant::isConstantUsed(llvm::Constant *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 24);
    BOOL v3 = v2 && v2[16] - 21 >= 0xFFFFFFEF;
    if (!v3 || llvm::Constant::isConstantUsed((llvm::Constant *)v2)) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::Constant::removeDeadConstantUsers(uint64_t this)
{
  uint64_t v1 = (uint64_t *)(this + 8);
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      this = *(void *)(v2 + 24);
      if (this) {
        BOOL v4 = *(unsigned __int8 *)(this + 16) >= 0x15u;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        uint64_t v5 = (uint64_t *)(v2 + 8);
      }
      else
      {
        this = constantIsDead((const llvm::Constant *)this, (const llvm::Constant *)1);
        uint64_t v5 = (uint64_t *)(v3 + 8);
        if (!v3) {
          uint64_t v5 = v1;
        }
        if (this) {
          uint64_t v2 = v3;
        }
        else {
          uint64_t v5 = (uint64_t *)(v2 + 8);
        }
      }
      uint64_t v3 = v2;
      uint64_t v2 = *v5;
    }
    while (*v5);
  }
  return this;
}

uint64_t constantIsDead(const llvm::Constant *a1, const llvm::Constant *a2)
{
  if (*((unsigned __int8 *)a1 + 16) < 4u) {
    return 0;
  }
  BOOL v3 = (int)a2;
  uint64_t v5 = (char *)a1 + 8;
  uint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    do
    {
      uint64_t v7 = *(unsigned __int8 **)(v6 + 24);
      if (!v7 || v7[16] > 0x14u) {
        return 0;
      }
      uint64_t result = constantIsDead((const llvm::Constant *)v7, v3);
      if (!result) {
        return result;
      }
      unsigned int v9 = (uint64_t *)(v6 + 8);
      if (v3) {
        unsigned int v9 = (uint64_t *)v5;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  if (v3)
  {
    llvm::ReplaceableMetadataImpl::SalvageDebugInfo((uint64_t ***)a1, a2);
    llvm::Constant::destroyConstant((int32x2_t ****)a1, v10, v11, v12);
  }
  return 1;
}

void *llvm::ConstantVector::get(uint64_t ****a1, llvm::Type *a2)
{
  uint64_t result = (void *)llvm::ConstantVector::getImpl(a1, a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = **v5 + 1328;
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(v7, v6, (uint64_t *)a1, (unint64_t *)a2);
  }
  return result;
}

llvm::Value *llvm::UndefValue::get(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v5 = this;
  BOOL v3 = (llvm::Value **)(llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(void **)this + 1400), &v5)+ 1);
  uint64_t result = *v3;
  if (!*v3)
  {
    BOOL v4 = (llvm::Value *)operator new(0x18uLL);
    *(void *)BOOL v4 = v5;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 11;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

uint64_t llvm::ConstantInt::ConstantInt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  unsigned int v3 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 16;
  *(_DWORD *)(result + 20) = v3;
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(result + 32) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  *(void *)(result + 24) = *(void *)a3;
  return result;
}

uint64_t llvm::ConstantInt::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(llvm::IntegerType **)a1;
  llvm::APInt::APInt((llvm::APInt *)&v7, *(_DWORD *)(a1 + 8) >> 8, a2);
  uint64_t v5 = llvm::ConstantInt::get(v2, (llvm::APInt *)&v7, v3, v4);
  if (v8 >= 0x41 && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  return v5;
}

uint64_t llvm::ConstantInt::get(llvm::IntegerType **this, llvm::Type *a2, const llvm::APInt *a3, unint64_t *a4)
{
  uint64_t result = llvm::ConstantInt::get(*this, a2, (uint64_t)a3, a4);
  uint64_t v7 = result;
  if ((this[1] & 0xFE) == 0x12)
  {
    unsigned int v8 = (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32));
    return llvm::ConstantVector::getSplat(v8, v7, v6);
  }
  return result;
}

uint64_t llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::Type *a2, double a3)
{
  v10[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  llvm::APFloat::APFloat((llvm::APFloat *)v9, a3);
  int v5 = *((_DWORD *)this + 2);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  llvm::APFloat::convert((uint64_t)v9, *(&off_265597388 + (char)v5), 1, &v8);
  uint64_t Splat = llvm::ConstantFP::get(v4, (uint64_t)v9);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    uint64_t Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v10);
  return Splat;
}

uint64_t llvm::ConstantFP::getNaN(llvm::ConstantFP *this, llvm::Type *a2, uint64_t a3)
{
  v8[3] = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  llvm::APFloat::getNaN(*(&off_265597388 + (char)v4), (char)a2, a3, (uint64_t)v7);
  uint64_t Splat = llvm::ConstantFP::get(*(void *)this, (uint64_t)v7);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    uint64_t Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v8);
  return Splat;
}

uint64_t llvm::ConstantFP::getZero(llvm::ConstantFP *this, llvm::Type *a2)
{
  int v2 = (int)a2;
  v8[3] = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**((void **)this + 2) + 8);
  }
  llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v8, *(&off_265597388 + (char)v4));
  llvm::APFloat::makeZero((llvm::APFloat *)v7, v2);
  uint64_t Splat = llvm::ConstantFP::get(*(void *)this, (uint64_t)v7);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    uint64_t Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v8);
  return Splat;
}

void std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v2 + 32));
    llvm::Value::~Value((llvm::Value *)v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::PoisonValue::get(llvm::PoisonValue *this, llvm::Type *a2)
{
  int v5 = this;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(void **)this + 1424), &v5)+ 1;
  uint64_t result = *v3;
  if (!*v3)
  {
    int v4 = operator new(0x18uLL);
    *int v4 = v5;
    v4[1] = 0;
    v4[2] = 12;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

void *llvm::ConstantArray::get(llvm::PoisonValue *a1, llvm::Type *a2, unint64_t *a3)
{
  uint64_t result = (void *)llvm::ConstantArray::getImpl(a1, a2, (uint64_t)a3);
  if (!result)
  {
    uint64_t v7 = **(void **)a1 + 1280;
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(v7, (uint64_t)a1, (uint64_t *)a2, a3);
  }
  return result;
}

uint64_t llvm::ConstantArray::getImpl(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  v70[15] = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v6 = *(unsigned __int8 **)a2;
    int v7 = *(unsigned __int8 *)(*(void *)a2 + 16);
    if (v7 == 12)
    {
      uint64_t v8 = 8 * a3;
      for (unsigned int i = a2; *(unsigned __int8 **)i == v6; unsigned int i = (llvm::Type *)((char *)i + 8))
      {
        v8 -= 8;
        if (!v8)
        {
          return llvm::PoisonValue::get(this, a2);
        }
      }
    }
    if ((v7 - 11) <= 1)
    {
      uint64_t v11 = 8 * a3;
      for (j = a2; *(unsigned __int8 **)j == v6; j = (llvm::Type *)((char *)j + 8))
      {
        v11 -= 8;
        if (!v11)
        {
          return llvm::UndefValue::get(this, a2);
        }
      }
    }
    if (llvm::Constant::isNullValue(*(llvm::Constant **)a2))
    {
      uint64_t v13 = 8 * a3;
      uint64_t v14 = a2;
      while (*(unsigned __int8 **)v14 == v6)
      {
        uint64_t v14 = (llvm::Type *)((char *)v14 + 8);
        v13 -= 8;
        if (!v13) {
          goto LABEL_20;
        }
      }
    }
    unsigned int v15 = *(_DWORD *)(*(void *)v6 + 8);
    int v16 = v15;
    if (v15 >= 4u)
    {
      if (v15 != 13) {
        return 0;
      }
      HIDWORD(v18) = v15 >> 8;
      LODWORD(v18) = (v15 >> 8) - 8;
      unsigned int v17 = v18 >> 3;
      BOOL v19 = v17 > 7;
      int v20 = (1 << v17) & 0x8B;
      if (v19 || v20 == 0) {
        return 0;
      }
    }
    int v22 = v6[16];
    if (v22 != 17)
    {
      if (v22 == 16)
      {
        unsigned int v23 = v15 >> 8;
        if (v16 == 13 && v23 == 8)
        {
          uint64_t v34 = 0;
          int v27 = (llvm::Type **)v70;
          BOOL v68 = v70;
          *(_OWORD *)unsigned int v69 = xmmword_261E8D180;
          uint64_t v35 = 8 * a3;
          while (1)
          {
            uint64_t v36 = *(void *)((char *)a2 + v34);
            if (!v36 || *(unsigned char *)(v36 + 16) != 16) {
              break;
            }
            unsigned __int8 v38 = (char *)(v36 + 24);
            if (*(_DWORD *)(v36 + 32) >= 0x41u) {
              unsigned __int8 v38 = *(char **)v38;
            }
            llvm::SmallVectorTemplateBase<char,true>::push_back(&v68, *v38);
            v34 += 8;
            if (v35 == v34)
            {
              uint64_t Impl = llvm::ConstantDataArray::get<unsigned char>(***(void ***)a2, (uint64_t *)v68, v69[0]);
              goto LABEL_101;
            }
          }
        }
        else
        {
          if (v16 != 13 || v23 != 16)
          {
            if (v16 == 13 && v23 == 32)
            {
              uint64_t v26 = 0;
              int v27 = &v69[1];
              BOOL v68 = &v69[1];
              v69[0] = (llvm::Type *)0x1000000000;
              uint64_t v28 = 8 * a3;
              while (1)
              {
                uint64_t v29 = *(void *)((char *)a2 + v26);
                if (!v29 || *(unsigned char *)(v29 + 16) != 16) {
                  goto LABEL_114;
                }
                int v31 = (int *)(v29 + 24);
                if (*(_DWORD *)(v29 + 32) >= 0x41u) {
                  int v31 = *(int **)v31;
                }
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v68, *v31);
                v26 += 8;
                if (v28 == v26)
                {
                  uint64_t Impl = llvm::ConstantDataArray::get<unsigned int>(***(void ***)a2, (uint64_t *)v68, (llvm::Type *)LODWORD(v69[0]));
                  goto LABEL_101;
                }
              }
            }
            uint64_t v33 = 0;
            if (v16 == 13 && v23 == 64)
            {
              uint64_t v61 = 0;
              int v27 = &v69[1];
              BOOL v68 = &v69[1];
              v69[0] = (llvm::Type *)0x1000000000;
              uint64_t v62 = 8 * a3;
              while (1)
              {
                uint64_t v63 = *(void *)((char *)a2 + v61);
                if (!v63 || *(unsigned char *)(v63 + 16) != 16) {
                  goto LABEL_114;
                }
                unsigned int v65 = (uint64_t *)(v63 + 24);
                if (*(_DWORD *)(v63 + 32) >= 0x41u) {
                  unsigned int v65 = (uint64_t *)*v65;
                }
                llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v68, *v65);
                v61 += 8;
                if (v62 == v61)
                {
                  uint64_t Impl = llvm::ConstantDataArray::get<unsigned long long>(***(void ***)a2, (uint64_t *)v68, (llvm::Type *)LODWORD(v69[0]));
                  goto LABEL_101;
                }
              }
            }
            return v33;
          }
          uint64_t v49 = 0;
          int v27 = (llvm::Type **)v70;
          BOOL v68 = v70;
          *(_OWORD *)unsigned int v69 = xmmword_261E8D180;
          uint64_t v50 = 8 * a3;
          while (1)
          {
            uint64_t v51 = *(void *)((char *)a2 + v49);
            if (!v51 || *(unsigned char *)(v51 + 16) != 16) {
              break;
            }
            unsigned __int8 v53 = (__int16 *)(v51 + 24);
            if (*(_DWORD *)(v51 + 32) >= 0x41u) {
              unsigned __int8 v53 = *(__int16 **)v53;
            }
            llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v68, *v53);
            v49 += 8;
            if (v50 == v49)
            {
              uint64_t Impl = llvm::ConstantDataArray::get<unsigned short>(***(void ***)a2, (uint64_t *)v68, v69[0]);
              goto LABEL_101;
            }
          }
        }
LABEL_114:
        uint64_t v33 = 0;
LABEL_115:
        if (v68 != v27) {
          free(v68);
        }
        return v33;
      }
      return 0;
    }
    if (v15 < 2u)
    {
      uint64_t v39 = 0;
      int v27 = (llvm::Type **)v70;
      BOOL v68 = v70;
      *(_OWORD *)unsigned int v69 = xmmword_261E8D180;
      uint64_t v40 = 8 * a3;
      while (1)
      {
        uint64_t v41 = *(void *)((char *)a2 + v39);
        if (!v41 || *(unsigned char *)(v41 + 16) != 17) {
          goto LABEL_114;
        }
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v66, (llvm::APFloat *)(v41 + 24));
        __int16 LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v66, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v68, LimitedValue);
        if (v67 >= 0x41 && v66) {
          MEMORY[0x263E50080](v66, 0x1000C8000313F17);
        }
        v39 += 8;
        if (v40 == v39)
        {
          BOOL v44 = (uint64_t *)v68;
          unsigned int v45 = v69[0];
          llvm::ArrayType::get(**(uint64_t ****)a2, v69[0]);
          BOOL v47 = v46;
          unint64_t v48 = (uint64_t *)(2 * (void)v45);
LABEL_100:
          uint64_t Impl = llvm::ConstantDataSequential::getImpl(v44, v48, v47);
LABEL_101:
          uint64_t v33 = Impl;
          goto LABEL_115;
        }
      }
    }
    if (v15 == 2)
    {
      uint64_t v54 = 0;
      int v27 = &v69[1];
      BOOL v68 = &v69[1];
      v69[0] = (llvm::Type *)0x1000000000;
      uint64_t v55 = 8 * a3;
      while (1)
      {
        uint64_t v56 = *(void *)((char *)a2 + v54);
        if (!v56 || *(unsigned char *)(v56 + 16) != 17) {
          goto LABEL_114;
        }
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v66, (llvm::APFloat *)(v56 + 24));
        int v58 = llvm::APInt::getLimitedValue(&v66, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v68, v58);
        if (v67 >= 0x41 && v66) {
          MEMORY[0x263E50080](v66, 0x1000C8000313F17);
        }
        v54 += 8;
        if (v55 == v54)
        {
          BOOL v44 = (uint64_t *)v68;
          uint64_t v59 = LODWORD(v69[0]);
          llvm::ArrayType::get(**(uint64_t ****)a2, (llvm::Type *)LODWORD(v69[0]));
          BOOL v47 = v60;
          unint64_t v48 = (uint64_t *)(4 * v59);
          goto LABEL_100;
        }
      }
    }
    if (v15 != 3) {
      return 0;
    }
    return getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>((uint64_t ****)a2, a3);
  }
  else
  {
LABEL_20:
    return llvm::ConstantAggregateZero::get(this, a2);
  }
}

void *llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  uint64_t v13 = a4;
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  long long v10 = v12;
  uint64_t v11 = v13;
  uint64_t v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (void *)*v14;
  }
}

llvm::Value *llvm::ConstantStruct::get(llvm::ConstantAggregateZero *this, llvm::Constant **a2, unint64_t *a3)
{
  if (!a3) {
    goto LABEL_20;
  }
  int v6 = *((unsigned __int8 *)*a2 + 16);
  isuint64_t NullValue = llvm::Constant::isNullValue(*a2);
  if ((v6 - 11) >= 2 && isNullValue == 0) {
    goto LABEL_17;
  }
  char v9 = isNullValue;
  BOOL v10 = (v6 - 11) < 2;
  BOOL v11 = v6 == 12;
  uint64_t v12 = 8 * (void)a3;
  uint64_t v13 = a2;
  do
  {
    unsigned int v15 = *v13++;
    uint64_t v14 = v15;
    if (!llvm::Constant::isNullValue(v15)) {
      char v9 = 0;
    }
    int v16 = *((unsigned __int8 *)v14 + 16);
    if (v16 != 12) {
      BOOL v11 = 0;
    }
    if (v16 != 11) {
      BOOL v10 = 0;
    }
    v12 -= 8;
  }
  while (v12);
  if (v9)
  {
LABEL_20:
    return (llvm::Value *)llvm::ConstantAggregateZero::get(this, (llvm::Type *)a2);
  }
  else if (v11)
  {
    return (llvm::Value *)llvm::PoisonValue::get(this, (llvm::Type *)a2);
  }
  else
  {
    if (!v10)
    {
LABEL_17:
      uint64_t v17 = **(void **)this + 1304;
      return (llvm::Value *)llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(v17, (uint64_t)this, (uint64_t *)a2, a3);
    }
    return llvm::UndefValue::get(this, (llvm::Type *)a2);
  }
}

void *llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  uint64_t v13 = a4;
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  long long v10 = v12;
  BOOL v11 = v13;
  uint64_t v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantStruct>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (void *)*v14;
  }
}

uint64_t llvm::ConstantVector::getImpl(uint64_t ****a1, llvm::Type *a2)
{
  uint64_t v2 = a2;
  v73[15] = *MEMORY[0x263EF8340];
  llvm::FixedVectorType::get(**a1, a2);
  int v5 = v4;
  int v6 = *a1;
  isuint64_t NullValue = llvm::Constant::isNullValue((llvm::Constant *)*a1);
  int v9 = *((unsigned __int8 *)v6 + 16);
  if ((v9 - 11) < 2) {
    int v10 = 1;
  }
  else {
    int v10 = isNullValue;
  }
  if (v2 == 1 || !v10)
  {
LABEL_9:
    if (isNullValue)
    {
      return llvm::ConstantAggregateZero::get(v5, v8);
    }
    if (v9 == 12)
    {
      return llvm::PoisonValue::get(v5, v8);
    }
    if ((v9 - 11) <= 1)
    {
      return llvm::UndefValue::get(v5, v8);
    }
  }
  else
  {
    unsigned int v11 = 1;
    while (a1[v11] == v6)
    {
      if (v2 == ++v11) {
        goto LABEL_9;
      }
    }
  }
  unsigned int v13 = *((_DWORD *)*v6 + 2);
  if (v13 >= 4u)
  {
    if (v13 != 13) {
      return 0;
    }
    HIDWORD(v15) = v13 >> 8;
    LODWORD(v15) = (v13 >> 8) - 8;
    unsigned int v14 = v15 >> 3;
    BOOL v16 = v14 > 7;
    int v17 = (1 << v14) & 0x8B;
    if (v16 || v17 == 0) {
      return 0;
    }
  }
  if (v9 != 17)
  {
    if (v9 == 16)
    {
      unsigned int v19 = v13 >> 8;
      if (v13 != 13 || v19 != 8)
      {
        if (v13 == 13 && v19 == 16)
        {
          int v22 = (llvm::Type **)v73;
          unsigned int v71 = v73;
          *(_OWORD *)char v72 = xmmword_261E8D180;
          if (v2)
          {
            uint64_t v43 = 8 * (void)v2;
            BOOL v44 = a1;
            while (1)
            {
              unsigned int v45 = *v44;
              if (!*v44 || *((unsigned char *)*v44 + 16) != 16) {
                goto LABEL_120;
              }
              BOOL v47 = (__int16 *)(v45 + 3);
              if (*((_DWORD *)v45 + 8) >= 0x41u) {
                BOOL v47 = *(__int16 **)v47;
              }
              llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v71, *v47);
              ++v44;
              v43 -= 8;
              if (!v43)
              {
                unint64_t v48 = (uint64_t *)v71;
                uint64_t v49 = v72[0];
                goto LABEL_122;
              }
            }
          }
          uint64_t v49 = 0;
          unint64_t v48 = v73;
LABEL_122:
          uint64_t Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v48, v49);
          goto LABEL_127;
        }
        if (v13 == 13 && v19 == 32)
        {
          int v22 = &v72[1];
          unsigned int v71 = &v72[1];
          v72[0] = (llvm::Type *)0x1000000000;
          if (v2)
          {
            uint64_t v23 = 8 * (void)v2;
            uint64_t v24 = a1;
            while (1)
            {
              unsigned int v25 = *v24;
              if (!*v24 || *((unsigned char *)*v24 + 16) != 16) {
                break;
              }
              int v27 = (int *)(v25 + 3);
              if (*((_DWORD *)v25 + 8) >= 0x41u) {
                int v27 = *(int **)v27;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v71, *v27);
              ++v24;
              v23 -= 8;
              if (!v23)
              {
                uint64_t v28 = (uint64_t *)v71;
                uint64_t v29 = (llvm::Type *)LODWORD(v72[0]);
                goto LABEL_132;
              }
            }
LABEL_120:
            uint64_t v30 = 0;
            goto LABEL_128;
          }
          uint64_t v29 = 0;
          uint64_t v28 = (uint64_t *)&v72[1];
LABEL_132:
          uint64_t Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v28, v29);
          goto LABEL_127;
        }
        uint64_t v30 = 0;
        if (v13 == 13 && v19 == 64)
        {
          int v22 = &v72[1];
          unsigned int v71 = &v72[1];
          v72[0] = (llvm::Type *)0x1000000000;
          if (v2)
          {
            uint64_t v60 = 8 * (void)v2;
            uint64_t v61 = a1;
            while (1)
            {
              uint64_t v62 = *v61;
              if (!*v61 || *((unsigned char *)*v61 + 16) != 16) {
                goto LABEL_120;
              }
              int v64 = (uint64_t *)(v62 + 3);
              if (*((_DWORD *)v62 + 8) >= 0x41u) {
                int v64 = (uint64_t *)*v64;
              }
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v71, *v64);
              ++v61;
              v60 -= 8;
              if (!v60)
              {
                unsigned int v65 = (uint64_t *)v71;
                char v66 = (llvm::Type *)LODWORD(v72[0]);
                goto LABEL_134;
              }
            }
          }
          char v66 = 0;
          unsigned int v65 = (uint64_t *)&v72[1];
LABEL_134:
          uint64_t Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v65, v66);
LABEL_127:
          uint64_t v30 = Impl;
LABEL_128:
          if (v71 != v22) {
            free(v71);
          }
        }
        return v30;
      }
      int v22 = (llvm::Type **)v73;
      unsigned int v71 = v73;
      *(_OWORD *)char v72 = xmmword_261E8D180;
      if (v2)
      {
        uint64_t v31 = 8 * (void)v2;
        unsigned int v32 = a1;
        while (1)
        {
          uint64_t v33 = *v32;
          if (!*v32 || *((unsigned char *)*v32 + 16) != 16) {
            goto LABEL_120;
          }
          uint64_t v35 = (char *)(v33 + 3);
          if (*((_DWORD *)v33 + 8) >= 0x41u) {
            uint64_t v35 = *(char **)v35;
          }
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v71, *v35);
          ++v32;
          v31 -= 8;
          if (!v31)
          {
            uint64_t v36 = (uint64_t *)v71;
            uint64_t v2 = v72[0];
            goto LABEL_104;
          }
        }
      }
      uint64_t v36 = v73;
LABEL_104:
      llvm::FixedVectorType::get((uint64_t **)(****a1 + 1944), v2);
      uint64_t v56 = v55;
      BOOL v57 = v36;
      int v58 = (uint64_t *)v2;
LABEL_126:
      uint64_t Impl = llvm::ConstantDataSequential::getImpl(v57, v58, v56);
      goto LABEL_127;
    }
    return 0;
  }
  if (v13 < 2u)
  {
    int v22 = (llvm::Type **)v73;
    unsigned int v71 = v73;
    *(_OWORD *)char v72 = xmmword_261E8D180;
    if (v2)
    {
      uint64_t v37 = 8 * (void)v2;
      unsigned __int8 v38 = a1;
      while (*v38 && *((unsigned char *)*v38 + 16) == 17)
      {
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v69, (llvm::APFloat *)(*v38 + 3));
        __int16 LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v69, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v71, LimitedValue);
        if (v70 >= 0x41 && v69) {
          MEMORY[0x263E50080](v69, 0x1000C8000313F17);
        }
        ++v38;
        v37 -= 8;
        if (!v37)
        {
          uint64_t v41 = (llvm::Type **)v71;
          uint64_t v42 = v72[0];
          goto LABEL_106;
        }
      }
      goto LABEL_120;
    }
    uint64_t v42 = 0;
    uint64_t v41 = (llvm::Type **)v73;
LABEL_106:
    llvm::FixedVectorType::get(**a1, v42);
    uint64_t v56 = v59;
    int v58 = (uint64_t *)(2 * (void)v42);
LABEL_125:
    BOOL v57 = (uint64_t *)v41;
    goto LABEL_126;
  }
  if (v13 == 2)
  {
    int v22 = &v72[1];
    unsigned int v71 = &v72[1];
    v72[0] = (llvm::Type *)0x1000000000;
    if (v2)
    {
      uint64_t v50 = 8 * (void)v2;
      uint64_t v51 = a1;
      while (*v51 && *((unsigned char *)*v51 + 16) == 17)
      {
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v69, (llvm::APFloat *)(*v51 + 3));
        int v53 = llvm::APInt::getLimitedValue(&v69, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v71, v53);
        if (v70 >= 0x41 && v69) {
          MEMORY[0x263E50080](v69, 0x1000C8000313F17);
        }
        ++v51;
        v50 -= 8;
        if (!v50)
        {
          uint64_t v41 = (llvm::Type **)v71;
          uint64_t v54 = (llvm::Type *)LODWORD(v72[0]);
          goto LABEL_124;
        }
      }
      goto LABEL_120;
    }
    uint64_t v54 = 0;
    uint64_t v41 = &v72[1];
LABEL_124:
    llvm::FixedVectorType::get(**a1, v54);
    uint64_t v56 = v68;
    int v58 = (uint64_t *)(4 * v54);
    goto LABEL_125;
  }
  if (v13 != 3) {
    return 0;
  }
  return getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>(a1, (uint64_t)v2);
}

void *llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  unsigned int v13 = a4;
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  long long v10 = v12;
  unsigned int v11 = v13;
  unsigned int v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (void *)*v14;
  }
}

uint64_t llvm::ConstantDataVector::getSplat(llvm::Type *__len, void **a2, llvm::Constant *a3)
{
  v48[15] = *MEMORY[0x263EF8340];
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v5 == 16)
  {
    int v6 = *a2;
    int v7 = *((_DWORD *)*a2 + 2);
    int v8 = *((_DWORD *)*a2 + 2) >> 8;
    if (v7 == 13 && v8 == 8)
    {
      uint64_t v23 = (unsigned __int8 *)(a2 + 3);
      if (*((_DWORD *)a2 + 8) >= 0x41u) {
        uint64_t v23 = *(unsigned __int8 **)v23;
      }
      int v24 = *v23;
      __b = v48;
      v47[1] = (llvm::Type *)16;
      if (__len < 0x11)
      {
        if (__len) {
          memset(v48, v24, __len);
        }
        unsigned int v25 = v48;
      }
      else
      {
        v47[0] = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__b, v48, __len, 1);
        memset(__b, v24, __len);
        int v6 = *a2;
        unsigned int v25 = (uint64_t *)__b;
      }
      v47[0] = (llvm::Type *)__len;
      llvm::FixedVectorType::get((uint64_t **)(**(void **)v6 + 1944), __len);
      uint64_t Impl = llvm::ConstantDataSequential::getImpl(v25, (uint64_t *)__len, v31);
      uint64_t v33 = __b;
      if (__b == v48) {
        return Impl;
      }
    }
    else
    {
      long long v10 = (uint64_t *)(a2 + 3);
      if (v7 == 13 && v8 == 16)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u) {
          long long v10 = (uint64_t *)*v10;
        }
        __int16 v26 = *(_WORD *)v10;
        unsigned int v13 = (llvm::Type **)v48;
        __b = v48;
        *(_OWORD *)BOOL v47 = xmmword_261E8D180;
        llvm::SmallVectorImpl<unsigned short>::assign(&__b, __len, v26);
        int v27 = (void *)**a2;
        unint64_t v15 = (uint64_t *)__b;
        uint64_t v21 = v47[0];
        int v20 = (uint64_t **)(*v27 + 1968);
LABEL_33:
        llvm::FixedVectorType::get(v20, v21);
        uint64_t v29 = v28;
        uint64_t v30 = (uint64_t *)(2 * (void)v21);
      }
      else if (v7 == 13 && v8 == 32)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u) {
          long long v10 = (uint64_t *)*v10;
        }
        int v12 = *(_DWORD *)v10;
        unsigned int v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<int>::assign((uint64_t)&__b, __len, v12);
        unsigned int v14 = (void *)**a2;
        unint64_t v15 = (uint64_t *)__b;
        BOOL v16 = (llvm::Type *)LODWORD(v47[0]);
        int v17 = (uint64_t **)(*v14 + 1992);
LABEL_46:
        llvm::FixedVectorType::get(v17, v16);
        uint64_t v29 = v40;
        uint64_t v30 = (uint64_t *)(4 * (void)v16);
      }
      else
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u) {
          long long v10 = (uint64_t *)*v10;
        }
        uint64_t v34 = *v10;
        unsigned int v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<unsigned long long>::assign((uint64_t)&__b, __len, v34);
        uint64_t v35 = (void *)**a2;
        unint64_t v15 = (uint64_t *)__b;
        uint64_t v36 = (llvm::Type *)LODWORD(v47[0]);
        uint64_t v37 = (uint64_t **)(*v35 + 2016);
LABEL_51:
        llvm::FixedVectorType::get(v37, v36);
        uint64_t v29 = v43;
        uint64_t v30 = (uint64_t *)(8 * (void)v36);
      }
      uint64_t Impl = llvm::ConstantDataSequential::getImpl(v15, v30, v29);
      uint64_t v33 = __b;
      if (__b == v13) {
        return Impl;
      }
    }
    free(v33);
    return Impl;
  }
  if (a2 && v5 == 17)
  {
    switch(*((unsigned char *)*a2 + 8))
    {
      case 0:
      case 1:
        unsigned int v18 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        __int16 LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        unsigned int v13 = (llvm::Type **)v48;
        __b = v48;
        *(_OWORD *)BOOL v47 = xmmword_261E8D180;
        llvm::SmallVectorImpl<unsigned short>::assign(&__b, v18, LimitedValue);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x263E50080](v44, 0x1000C8000313F17);
        }
        int v20 = (uint64_t **)*a2;
        unint64_t v15 = (uint64_t *)__b;
        uint64_t v21 = v47[0];
        goto LABEL_33;
      case 2:
        unsigned int v38 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        int v39 = llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        unsigned int v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<int>::assign((uint64_t)&__b, v38, v39);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x263E50080](v44, 0x1000C8000313F17);
        }
        int v17 = (uint64_t **)*a2;
        unint64_t v15 = (uint64_t *)__b;
        BOOL v16 = (llvm::Type *)LODWORD(v47[0]);
        goto LABEL_46;
      case 3:
        unsigned int v41 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        uint64_t v42 = llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        unsigned int v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<unsigned long long>::assign((uint64_t)&__b, v41, (uint64_t)v42);
        if (v45 >= 0x41 && v44) {
          MEMORY[0x263E50080](v44, 0x1000C8000313F17);
        }
        uint64_t v37 = (uint64_t **)*a2;
        unint64_t v15 = (uint64_t *)__b;
        uint64_t v36 = (llvm::Type *)LODWORD(v47[0]);
        goto LABEL_51;
      default:
        break;
    }
  }
  return llvm::ConstantVector::getSplat();
}

llvm::ConstantExpr *llvm::ConstantExpr::getInsertElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  void v18[3] = *MEMORY[0x263EF8340];
  uint64_t result = llvm::ConstantFoldInsertElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    unsigned int v11 = *(llvm::Type **)this;
    if (*(llvm::Constant **)this == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      uint64_t v12 = **(void **)v11 + 1544;
      LODWORD(v13) = 62;
      *((void *)&v13 + 1) = v18;
      uint64_t v14 = 3;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      return (llvm::ConstantExpr *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v12, v11, &v13, v10);
    }
  }
  return result;
}

void *llvm::ConstantExpr::getShuffleVector(llvm::ConstantExpr *a1, llvm::ConstantExpr *a2, int *a3, BOOL a4, llvm::Type *a5)
{
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)llvm::ConstantFoldShuffleVectorInstruction(a1, a2, a3, a4);
  if (!result)
  {
    llvm::VectorType::get(*(uint64_t ***)(*(void *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(*(unsigned char *)(*(void *)a1 + 8) == 19) << 32)));
    if (v11 == a5)
    {
      return 0;
    }
    else
    {
      long long v13 = v11;
      v20[0] = a1;
      v20[1] = a2;
      uint64_t v14 = **(void **)v11 + 1544;
      LODWORD(v15) = 63;
      *((void *)&v15 + 1) = v20;
      uint64_t v16 = 2;
      uint64_t v17 = a3;
      BOOL v18 = a4;
      uint64_t v19 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v14, v13, &v15, v12);
    }
  }
  return result;
}

void std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](llvm::Value **a1, llvm::Value *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    llvm::Value::~Value(v3, a2);
    llvm::User::operator delete(v4);
  }
}

uint64_t llvm::ConstantExpr::getWithOperands(uint64_t result, llvm::ConstantExpr **a2, uint64_t a3, llvm::Constant ***a4, llvm::Type *a5, llvm::GetElementPtrInst *a6, __n128 a7)
{
  if (*(llvm::Constant ****)result == a4)
  {
    if (!a3) {
      return result;
    }
    uint64_t v8 = -32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    uint64_t v9 = 8 * a3;
    long long v10 = a2;
    while (*v10 == *(llvm::ConstantExpr **)(result + v8))
    {
      ++v10;
      v8 += 32;
      v9 -= 8;
      if (!v9) {
        return result;
      }
    }
  }
  if (a5) {
    int v7 = (uint64_t **)a4;
  }
  else {
    int v7 = 0;
  }
  switch(*(_WORD *)(result + 18))
  {
    case '""':
      if (!a6)
      {
        uint64_t v11 = 24;
        if (*(unsigned char *)(result + 16) == 62) {
          uint64_t v11 = 64;
        }
        a6 = *(llvm::GetElementPtrInst **)(result + v11);
      }
      long long v13 = (llvm::Value *)(a2 + 1);
      uint64_t v12 = *a2;
      unsigned int v14 = *(unsigned __int8 *)(result + 17);
      uint64_t v15 = v14 > 3;
      int v16 = (v14 >> 1) & 1;
      if (v14 >= 4) {
        unsigned __int8 v17 = (*(unsigned char *)(result + 17) >> 2) - 1;
      }
      else {
        unsigned __int8 v17 = 0;
      }
      uint64_t result = llvm::ConstantExpr::getGetElementPtr(a6, (uint64_t *)v12, v13, a3 - 1, v16, v17 | (unint64_t)(v15 << 32), v7);
      break;
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
      uint64_t result = (uint64_t)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*(unsigned __int16 *)(result + 18), *a2, a4, a5, a7);
      break;
    case '5':
    case '6':
      uint64_t result = (uint64_t)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)*(unsigned __int16 *)(result + 24), (uint64_t ***)*a2, a2[1], (llvm::Constant *)(v7 != 0));
      break;
    case '=':
      uint64_t result = llvm::ConstantExpr::getExtractElement(*a2, a2[1], (llvm::Constant *)v7, (llvm::Type *)a4);
      break;
    case '>':
      uint64_t result = llvm::ConstantExpr::getInsertElement(*a2, a2[1], a2[2], (llvm::Constant *)v7, a5);
      break;
    case '?':
      uint64_t result = (uint64_t)llvm::ConstantExpr::getShuffleVector(*a2, a2[1], *(int **)(result + 24), *(unsigned int *)(result + 32), (llvm::Type *)v7);
      break;
    default:
      uint64_t result = (uint64_t)llvm::ConstantExpr::get((llvm::ConstantExpr *)*(unsigned __int16 *)(result + 18), (llvm::PoisonValue **)*a2, a2[1], (llvm::Constant *)(*(unsigned __int8 *)(result + 17) >> 1), (llvm::PoisonValue *)v7, a6);
      break;
  }
  return result;
}

llvm::ConstantExpr *llvm::ConstantExpr::getCast(llvm::ConstantExpr *this, llvm::ConstantExpr *a2, llvm::Constant ***a3, llvm::Type *a4, __n128 a5)
{
  switch((int)this)
  {
    case '\'':
      uint64_t v5 = 39;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '(':
      uint64_t v5 = 40;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case ')':
      uint64_t v5 = 41;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '*':
      uint64_t v5 = 42;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '+':
      uint64_t v5 = 43;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case ',':
      uint64_t v5 = 44;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '-':
      uint64_t v5 = 45;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '.':
      uint64_t v5 = 46;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '/':
      uint64_t v5 = 47;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '0':
      uint64_t v5 = 48;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '1':
      if (*(llvm::Constant ****)a2 == a3) {
        return a2;
      }
      uint64_t v5 = 49;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
    case '2':
      return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(a2, a3, a4, a5);
    default:
      uint64_t v5 = 38;
      return (llvm::ConstantExpr *)getFoldedCast(v5, a2, a5);
  }
}

void *llvm::ConstantExpr::getExtractElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4, __n128 a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)llvm::ConstantFoldExtractElementInstruction(this, a2, a3, a4, a5);
  if (!result)
  {
    long long v10 = *(void ***)this;
    uint64_t v11 = *(llvm::Type **)(*(void *)this + 24);
    if (v11 == a3)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      uint64_t v12 = **v10 + 1544;
      LODWORD(v13) = 61;
      *((void *)&v13 + 1) = v18;
      uint64_t v14 = 2;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v12, v11, &v13, v9);
    }
  }
  return result;
}

llvm::Constant *llvm::ConstantExpr::getCompare(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  if (this > 0xF) {
    return llvm::ConstantExpr::getICmp(this, (llvm::Type *)a2, a3, a4);
  }
  else {
    return (llvm::Constant *)llvm::ConstantExpr::getFCmp(this, a2, a3, a4);
  }
}

llvm::Constant *llvm::ConstantExpr::get(llvm::ConstantExpr *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4, llvm::PoisonValue *a5, llvm::Type *a6)
{
  char v7 = (char)a4;
  char v10 = (char)this;
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    long long v13 = *a2;
    if (*a2 == a5)
    {
      return 0;
    }
    else
    {
      v20[0] = a2;
      v20[1] = a3;
      uint64_t v14 = **(void **)v13 + 1544;
      LOBYTE(v15) = v10;
      BYTE1(v15) = v7;
      WORD1(v15) = 0;
      *((void *)&v15 + 1) = v20;
      uint64_t v16 = 2;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = 0;
      return (llvm::Constant *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v14, v13, &v15, v12);
    }
  }
  return result;
}

int32x2_t llvm::ConstantUniqueMap<llvm::ConstantArray>::remove(int32x2_t *a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  int32x2_t v5 = *a1;
  __int32 v6 = a1[2].i32[0];
  if (!v6)
  {
    uint64_t v8 = 0;
LABEL_8:
    uint64_t v9 = (uint64_t **)(*(void *)&v5 + 8 * v8);
    goto LABEL_9;
  }
  LODWORD(v8) = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(a2, (uint64_t)a2, a3, a4) & (v6 - 1);
  uint64_t v9 = (uint64_t **)(*(void *)&v5 + 8 * v8);
  char v10 = *v9;
  if (*v9 != a2)
  {
    int v11 = 1;
    while (v10 != (uint64_t *)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      char v10 = *(uint64_t **)(*(void *)&v5 + 8 * v8);
      if (v10 == a2) {
        goto LABEL_8;
      }
    }
    int32x2_t v5 = *a1;
    uint64_t v8 = a1[2].u32[0];
    goto LABEL_8;
  }
LABEL_9:
  unint64_t *v9 = (uint64_t *)-8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (!this || v1 != 16)
  {
    if (v1 == 5) {
      this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    }
    else {
      this = (llvm::Constant *)llvm::Constant::getAggregateElement(this, 0);
    }
  }
  return (uint64_t)this + 24;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(uint64_t a1, void *a2)
{
  int32x2_t v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v5))
  {
    int v4 = v5;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v5 + 1, 0);
    *int v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::get(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  int32x2_t v5 = (uint64_t *)(***(void ***)this + 1472);
  v9[0] = this;
  v9[1] = a2;
  __int32 v6 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(v5, v9);
  int32x2_t result = (llvm::BlockAddress *)v6[2];
  if (!result)
  {
    uint64_t v8 = operator new(0x58uLL);
    v8[21] = v8[21] & 0x38000000 | 2;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((void *)v8 + 3) = v8 + 16;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 7) = v8 + 16;
    int32x2_t result = llvm::BlockAddress::BlockAddress((llvm::BlockAddress *)(v8 + 16), this, a2);
    v6[2] = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::BlockAddress(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  *(void *)this = llvm::PointerType::get((llvm::PointerType **)(***(void ***)a2 + 1944), (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8));
  *((void *)this + 1) = 0;
  unsigned int v6 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 4;
  *((_DWORD *)this + 5) = v6;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v7 = *((void *)this - 7);
    if (v7) {
      *(void *)(v7 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v9 = (void *)((char *)a2 + 8);
  uint64_t v8 = v10;
  *((void *)this - 7) = v10;
  if (v10) {
    *(void *)(v8 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v9;
  void *v9 = (char *)this - 64;
  int v11 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v12 = *((void *)this - 3);
    if (v12) {
      *(void *)(v12 + 16) = *((void *)this - 2);
    }
  }
  *int v11 = a3;
  if (a3)
  {
    long long v13 = (void *)((char *)a3 + 8);
    uint64_t v14 = *((void *)a3 + 1);
    *((void *)this - 3) = v14;
    if (v14) {
      *(void *)(v14 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v13;
    *long long v13 = v11;
  }
  *((_WORD *)a3 + 9) = *((_WORD *)a3 + 9) & 0x8000 | (*((_WORD *)a3 + 9) + 1) & 0x7FFF;
  return this;
}

uint64_t llvm::BlockAddress::lookup(llvm::BlockAddress *this, const llvm::BasicBlock *a2)
{
  if ((*((_WORD *)this + 9) & 0x7FFF) == 0) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(****((void ****)this + 7) + 1472);
  v5[0] = *((void *)this + 7);
  v5[1] = this;
  uint64_t v6 = 0;
  int v3 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(v2, (uint64_t)v5, &v6);
  uint64_t result = 0;
  if (v3) {
    return *(void *)(v6 + 16);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::erase(uint64_t a1, uint64_t a2)
{
  int32x2_t v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, a2, &v5))
  {
    int v4 = v5;
    *int32x2_t v5 = -8192;
    v4[1] = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::BlockAddress::handleOperandChangeImpl(llvm::BlockAddress *this, llvm::Value *a2, llvm::Value *a3)
{
  int v3 = a3;
  uint64_t v6 = (llvm::Value **)((char *)this - 64);
  int32x2_t v5 = (llvm::Value *)*((void *)this - 8);
  uint64_t v7 = (llvm::Value **)((char *)this - 32);
  if (v5 == a2)
  {
    uint64_t v8 = *v7;
    int32x2_t v5 = llvm::Value::stripPointerCasts(a3);
    int v3 = v8;
  }
  uint64_t v9 = (uint64_t *)(***(void ***)this + 1472);
  int v24 = v5;
  unsigned int v25 = v3;
  uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(v9, &v24);
  uint64_t v11 = v10[2];
  if (!v11)
  {
    uint64_t v12 = v10;
    long long v13 = (llvm::Value *)*((void *)this - 4);
    *((_WORD *)v13 + 9) = *((_WORD *)v13 + 9) & 0x8000 | (*((_WORD *)v13 + 9) - 1) & 0x7FFF;
    uint64_t v14 = ***(void ***)this + 1472;
    int v24 = (llvm::Value *)*((void *)this - 8);
    unsigned int v25 = v13;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::erase(v14, (uint64_t)&v24);
    v12[2] = this;
    if (*((void *)this - 8))
    {
      **((void **)this - 6) = *((void *)this - 7);
      uint64_t v15 = *((void *)this - 7);
      if (v15) {
        *(void *)(v15 + 16) = *((void *)this - 6);
      }
    }
    *uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v18 = *((void *)v5 + 1);
      uint64_t v17 = (llvm::Value ***)((char *)v5 + 8);
      uint64_t v16 = v18;
      *((void *)this - 7) = v18;
      if (v18) {
        *(void *)(v16 + 16) = (char *)this - 56;
      }
      *((void *)this - 6) = v17;
      *uint64_t v17 = v6;
    }
    if (*v7)
    {
      **((void **)this - 2) = *((void *)this - 3);
      uint64_t v19 = *((void *)this - 3);
      if (v19) {
        *(void *)(v19 + 16) = *((void *)this - 2);
      }
    }
    *((void *)this - 4) = v3;
    uint64_t v22 = *((void *)v3 + 1);
    uint64_t v21 = (llvm::Value ***)((char *)v3 + 8);
    uint64_t v20 = v22;
    *((void *)this - 3) = v22;
    if (v22) {
      *(void *)(v20 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v21;
    *uint64_t v21 = v7;
    *(_WORD *)(*((void *)this - 4) + 18) = *(_WORD *)(*((void *)this - 4) + 18) & 0x8000 | (*(_WORD *)(*((void *)this - 4) + 18)
                                                                                                  + 1) & 0x7FFF;
  }
  return v11;
}

uint64_t llvm::DSOLocalEquivalent::get(llvm::DSOLocalEquivalent *this, llvm::GlobalValue *a2)
{
  int32x2_t v5 = this;
  uint64_t v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(void ***)this + 1496), &v5);
  uint64_t result = v2[1];
  if (!result)
  {
    int v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(void *)int v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = v4 + 8;
    uint64_t result = llvm::DSOLocalEquivalent::DSOLocalEquivalent((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

uint64_t llvm::DSOLocalEquivalent::DSOLocalEquivalent(uint64_t this, llvm::GlobalValue *a2)
{
  *(void *)this = *(void *)a2;
  *(void *)(this + 8) = 0;
  unsigned int v2 = *(_DWORD *)(this + 20) & 0xC0000000 | 1;
  *(_DWORD *)(this + 16) = 6;
  *(_DWORD *)(this + 20) = v2;
  if (*(void *)(this - 32))
  {
    **(void **)(this - 16) = *(void *)(this - 24);
    uint64_t v3 = *(void *)(this - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(this - 16);
    }
  }
  *(void *)(this - 32) = a2;
  uint64_t v6 = *((void *)a2 + 1);
  int v4 = (void *)((char *)a2 + 8);
  uint64_t v5 = v6;
  *(void *)(this - 24) = v6;
  if (v6) {
    *(void *)(v5 + 16) = this - 24;
  }
  *(void *)(this - 16) = v4;
  *int v4 = this - 32;
  return this;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(uint64_t a1, void *a2)
{
  int v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v4))
  {
    *int v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::ConstantExpr *llvm::DSOLocalEquivalent::handleOperandChangeImpl(llvm::Constant *****this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v3 = a3;
  if (*((unsigned __int8 *)a3 + 16) >= 4u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a3;
  }
  uint64_t v18 = v5;
  if (v5)
  {
    uint64_t v6 = (llvm::Constant *****)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)***this + 187, &v18)[1];
    if (v6)
    {
      if (*v6 != *this) {
        return getFoldedCast((llvm *)0x31, v6, *this, 0);
      }
      return (llvm::ConstantExpr *)v6;
    }
  }
  if (llvm::Constant::isNullValue(v3)) {
    return v3;
  }
  uint64_t v7 = llvm::Value::stripPointerCastsAndAliases(v3);
  uint64_t v8 = (uint64_t *)(***this + 187);
  uint64_t v17 = v7;
  uint64_t v18 = 0;
  char v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v8, &v17, &v18);
  uint64_t v10 = v18;
  if (v9)
  {
    uint64_t v3 = (llvm::Constant *)*((void *)v18 + 1);
    if (v3)
    {
      if (*(llvm::Constant *****)v3 != *this) {
        return getFoldedCast((llvm *)0x31, *((void ***)v18 + 1), *this, 0);
      }
      return v3;
    }
  }
  else
  {
    uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)v8, (uint64_t)&v17, &v17, v18);
    *uint64_t v10 = v17;
    v10[1] = 0;
  }
  uint64_t v11 = (uint64_t)(***this + 187);
  uint64_t v12 = (llvm::Value **)(this - 4);
  uint64_t v18 = (llvm::Value *)*(this - 4);
  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v11, &v18);
  v10[1] = this;
  if (*(this - 4))
  {
    **(this - 2) = (llvm::Constant ***)*(this - 3);
    uint64_t v13 = (uint64_t)*(this - 3);
    if (v13) {
      *(void *)(v13 + 16) = *(this - 2);
    }
  }
  *uint64_t v12 = v7;
  if (v7)
  {
    uint64_t v14 = (llvm::Constant ****)((char *)v7 + 8);
    uint64_t v15 = *((void *)v7 + 1);
    *(this - 3) = (llvm::Constant ****)v15;
    if (v15) {
      *(void *)(v15 + 16) = this - 3;
    }
    *(this - 2) = v14;
    *uint64_t v14 = (llvm::Constant ***)v12;
  }
  uint64_t v3 = 0;
  if (*(llvm::Constant *****)v7 != *this) {
    *this = *(llvm::Constant *****)v7;
  }
  return v3;
}

uint64_t llvm::NoCFIValue::get(llvm::NoCFIValue *this, llvm::GlobalValue *a2)
{
  uint64_t v5 = this;
  unsigned int v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(void ***)this + 1520), &v5);
  uint64_t result = v2[1];
  if (!result)
  {
    int v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(void *)int v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = v4 + 8;
    uint64_t result = llvm::NoCFIValue::NoCFIValue((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

uint64_t llvm::NoCFIValue::NoCFIValue(uint64_t this, llvm::GlobalValue *a2)
{
  *(void *)this = *(void *)a2;
  *(void *)(this + 8) = 0;
  unsigned int v2 = *(_DWORD *)(this + 20) & 0xC0000000 | 1;
  *(_DWORD *)(this + 16) = 7;
  *(_DWORD *)(this + 20) = v2;
  if (*(void *)(this - 32))
  {
    **(void **)(this - 16) = *(void *)(this - 24);
    uint64_t v3 = *(void *)(this - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(this - 16);
    }
  }
  *(void *)(this - 32) = a2;
  uint64_t v6 = *((void *)a2 + 1);
  int v4 = (void *)((char *)a2 + 8);
  uint64_t v5 = v6;
  *(void *)(this - 24) = v6;
  if (v6) {
    *(void *)(v5 + 16) = this - 24;
  }
  *(void *)(this - 16) = v4;
  *int v4 = this - 32;
  return this;
}

llvm::ConstantExpr *llvm::NoCFIValue::handleOperandChangeImpl(llvm::Constant *****this, llvm::Value *a2, llvm::Value *a3)
{
  int v4 = llvm::Value::stripPointerCasts(a3);
  if (*((unsigned __int8 *)v4 + 16) >= 4u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v19 = v5;
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)***this + 190, &v19);
  uint64_t v7 = (llvm::Constant *****)v6[1];
  uint64_t v8 = *this;
  if (v7)
  {
    if (*v7 != v8) {
      return getFoldedCast((llvm *)0x31, v7, v8, 0);
    }
  }
  else
  {
    char v9 = v6;
    uint64_t v10 = (uint64_t)(**v8 + 190);
    uint64_t v11 = this - 4;
    uint64_t v18 = (uint64_t)*(this - 4);
    llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v10, &v18);
    v9[1] = this;
    uint64_t v12 = (llvm::Constant ****)v19;
    if (*(this - 4))
    {
      **(this - 2) = (llvm::Constant ***)*(this - 3);
      uint64_t v13 = (uint64_t)*(this - 3);
      if (v13) {
        *(void *)(v13 + 16) = *(this - 2);
      }
    }
    *uint64_t v11 = v12;
    if (v12)
    {
      uint64_t v16 = (llvm::Constant ****)v12[1];
      uint64_t v14 = v12 + 1;
      uint64_t v15 = v16;
      *(this - 3) = v16;
      if (v16) {
        v15[2] = (llvm::Constant ***)(this - 3);
      }
      *(this - 2) = v14;
      *uint64_t v14 = (llvm::Constant ***)v11;
    }
    uint64_t v7 = 0;
    if (*(llvm::Constant *****)v19 != *this) {
      *this = *(llvm::Constant *****)v19;
    }
  }
  return (llvm::ConstantExpr *)v7;
}

uint64_t llvm::ConstantExpr::getAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant ***a2, llvm::Type *a3, __n128 a4)
{
  uint64_t FoldedCast = this;
  uint64_t v6 = *(void *)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  uint64_t v7 = (llvm::Constant *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v7 = *a2[2];
  }
  if (*(void *)(v6 + 24) != *((void *)v7 + 3))
  {
    uint64_t v8 = (uint64_t **)llvm::PointerType::getWithSamePointeeType((uint64_t)v7, (llvm::Type *)(*(_DWORD *)(v6 + 8) >> 8));
    char v9 = v8;
    if ((a2[1] & 0xFE) == 0x12)
    {
      a4.n128_f64[0] = llvm::FixedVectorType::get(v8, (llvm::Type *)*((unsigned int *)a2 + 8));
      char v9 = v10;
    }
    if (*(uint64_t ***)FoldedCast != v9) {
      uint64_t FoldedCast = (llvm::ConstantExpr *)getFoldedCast(49, FoldedCast, a4);
    }
  }
  return getFoldedCast(50, FoldedCast, a4);
}

llvm::ConstantExpr *llvm::ConstantExpr::getZExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12) {
    uint64_t v6 = (llvm::Type *)**((void **)v5 + 2);
  }
  else {
    uint64_t v6 = *this;
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2) {
      return (llvm::ConstantExpr *)this;
    }
    uint64_t v9 = 49;
  }
  else
  {
    uint64_t v9 = 39;
  }
  return getFoldedCast((llvm *)v9, (void **)this, (llvm::Constant ****)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getSExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12) {
    uint64_t v6 = (llvm::Type *)**((void **)v5 + 2);
  }
  else {
    uint64_t v6 = *this;
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2) {
      return (llvm::ConstantExpr *)this;
    }
    uint64_t v10 = 49;
  }
  else
  {
    uint64_t v10 = 40;
  }
  return (llvm::ConstantExpr *)getFoldedCast(v10, this, v9);
}

llvm::ConstantExpr *llvm::ConstantExpr::getTruncOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12) {
    uint64_t v6 = (llvm::Type *)**((void **)v5 + 2);
  }
  else {
    uint64_t v6 = *this;
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2) {
      return (llvm::ConstantExpr *)this;
    }
    uint64_t v9 = 49;
  }
  else
  {
    uint64_t v9 = 38;
  }
  return getFoldedCast((llvm *)v9, (void **)this, (llvm::Constant ****)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3, __n128 a4)
{
  uint64_t v5 = this;
  int v6 = *((_DWORD *)a2 + 2);
  char v7 = v6;
  if ((v6 & 0xFE) == 0x12) {
    char v7 = *(unsigned char *)(**((void **)a2 + 2) + 8);
  }
  if (v7 == 13)
  {
    uint64_t v8 = 47;
    return (llvm::ConstantExpr *)getFoldedCast(v8, v5, a4);
  }
  uint64_t v9 = *(llvm::Constant **)this;
  unsigned int v10 = *(_DWORD *)(*(void *)this + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**((void **)v9 + 2) + 8);
  }
  if ((v6 & 0xFE) == 0x12) {
    int v6 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if (v6 == 15 && (v6 ^ v10) >= 0x100) {
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0, a4);
  }
  if (v9 != a2)
  {
    uint64_t v8 = 49;
    return (llvm::ConstantExpr *)getFoldedCast(v8, v5, a4);
  }
  return this;
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3, __n128 a4)
{
  int v4 = *(llvm::Constant **)this;
  unsigned int v5 = *(_DWORD *)(*(void *)this + 8);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(_DWORD *)(**((void **)v4 + 2) + 8);
  }
  int v6 = *((_DWORD *)a2 + 2);
  if ((v6 & 0xFE) == 0x12) {
    int v6 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if ((v6 ^ v5) >= 0x100) {
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0, a4);
  }
  if (v4 != a2) {
    return getFoldedCast((llvm *)0x31, (void **)this, (llvm::Constant ****)a2, 0);
  }
  return this;
}

llvm::ConstantExpr *llvm::ConstantExpr::getIntegerCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  int v3 = (int)a3;
  uint64_t v6 = *(void *)this;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  uint64_t v8 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    uint64_t v8 = *a2[2];
  }
  unsigned int v9 = llvm::Type::getPrimitiveSizeInBits(v8);
  if (v3) {
    unsigned int v11 = 40;
  }
  else {
    unsigned int v11 = 39;
  }
  if (PrimitiveSizeInBits > v9) {
    unsigned int v11 = 38;
  }
  if (PrimitiveSizeInBits == v9) {
    uint64_t v12 = 49;
  }
  else {
    uint64_t v12 = v11;
  }
  return llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v12, this, a2, 0, v10);
}

llvm::ConstantExpr *llvm::ConstantExpr::getFPCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5 = *(void *)this;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(void **)(v5 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  char v7 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    char v7 = *a2[2];
  }
  unsigned int v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (PrimitiveSizeInBits == v8) {
    return this;
  }
  if (PrimitiveSizeInBits > v8) {
    uint64_t v11 = 45;
  }
  else {
    uint64_t v11 = 46;
  }
  return llvm::ConstantExpr::getCast((llvm::ConstantExpr *)v11, this, a2, 0, v9);
}

llvm::ConstantExpr *getFoldedCast(llvm *a1, void **a2, llvm::Constant ****a3, llvm::Type *a4)
{
  char v4 = (char)a4;
  unsigned __int8 v6 = a1;
  uint64_t v15 = a2;
  uint64_t result = llvm::ConstantFoldCastInstruction(a1, a2, a3, a4);
  if (!result && (v4 & 1) == 0)
  {
    uint64_t v9 = (uint64_t)(**a3 + 193);
    LODWORD(v10) = v6;
    *((void *)&v10 + 1) = &v15;
    uint64_t v11 = 1;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    return (llvm::ConstantExpr *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v9, (llvm::Type *)a3, &v10, v8);
  }
  return result;
}

void *llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(uint64_t a1, llvm::Type *a2, _OWORD *a3, unint64_t *a4)
{
  *(void *)uint64_t v17 = a2;
  long long v7 = a3[1];
  *(_OWORD *)&v17[8] = *a3;
  *(_OWORD *)&v17[24] = v7;
  *(_OWORD *)&v17[40] = a3[2];
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue((uint64_t *)v17, (uint64_t)a2, (uint64_t)a3, a4);
  long long v13 = *(_OWORD *)v17;
  long long v14 = *(_OWORD *)&v17[16];
  long long v15 = *(_OWORD *)&v17[32];
  uint64_t v16 = *(void *)&v17[48];
  v19[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v19)&& v19[0] != *(void *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return *(void **)v19[0];
  }
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  v11[2] = a3[2];
  unsigned int v8 = llvm::ConstantExprKeyType::create((llvm::ConstantExprKeyType *)v11, a2);
  uint64_t v18 = v8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, &v18, (uint64_t)&HashValue, (uint64_t)v19);
  return v8;
}

void *llvm::ConstantExpr::getFCmp(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4 = (char)a4;
  __int16 v7 = (__int16)this;
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)llvm::ConstantFoldCompareInstruction();
  if (!result && (v4 & 1) == 0)
  {
    v18[0] = a2;
    v18[1] = a3;
    uint64_t v10 = ***a2;
    uint64_t v11 = (uint64_t **)(v10 + 1920);
    if (((*a2)[1] & 0xFE) == 0x12)
    {
      llvm::VectorType::get(v11, (llvm::Type *)(*((unsigned int *)*a2 + 8) | ((unint64_t)(*((_DWORD *)*a2 + 2) == 19) << 32)));
      uint64_t v11 = v12;
      uint64_t v10 = ***a2;
    }
    LOWORD(v13) = 54;
    WORD1(v13) = v7;
    *((void *)&v13 + 1) = v18;
    uint64_t v14 = 2;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v10 + 1544, (llvm::Type *)v11, &v13, v9);
  }
  return result;
}

uint64_t llvm::ConstantExpr::getGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, llvm::Value *a3, uint64_t a4, char a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v11 = (llvm::Constant **)a3;
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = **(void **)(v14 + 16);
  }
  uint64_t ElementPtr = llvm::ConstantFoldGetElementPtr(a1, a2, a5, a6, a3, a4);
  if (ElementPtr) {
    return ElementPtr;
  }
  uint64_t TypeAtIndex = a1;
  if (a4)
  {
    uint64_t v19 = v11 + 1;
    uint64_t v20 = 8 * a4 - 8;
    uint64_t TypeAtIndex = a1;
    do
    {
      if (!v20) {
        break;
      }
      uint64_t v21 = *v19++;
      uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v21, v15);
      v20 -= 8;
    }
    while (TypeAtIndex);
  }
  uint64_t v22 = (llvm::Type *)(*(_DWORD *)(v14 + 8) >> 8);
  if (*(void *)(v14 + 24)) {
    uint64_t v23 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, v22);
  }
  else {
    uint64_t v23 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v14, v22);
  }
  uint64_t v25 = *a2;
  char v65 = a5;
  if (*a2 && (*(_DWORD *)(v25 + 8) & 0xFE) == 0x12)
  {
    unsigned int v26 = *(_DWORD *)(v25 + 32);
    BOOL v27 = *(_DWORD *)(v25 + 8) == 19;
  }
  else
  {
    BOOL v27 = 0;
    unsigned int v26 = 0;
    if (!a4) {
      goto LABEL_26;
    }
    uint64_t v28 = 8 * a4;
    uint64_t v29 = v11;
    do
    {
      uint64_t v30 = *(void *)*v29;
      if (v30) {
        BOOL v31 = (*(_DWORD *)(v30 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        unsigned int v26 = *(_DWORD *)(v30 + 32);
        BOOL v27 = *(_DWORD *)(v30 + 8) == 19;
      }
      ++v29;
      v28 -= 8;
    }
    while (v28);
  }
  if (v26)
  {
    llvm::VectorType::get(v23, (llvm::Type *)(v26 | ((unint64_t)v27 << 32)));
    char v32 = 0;
    goto LABEL_27;
  }
LABEL_26:
  char v32 = 1;
LABEL_27:
  if (v23 == a7) {
    return 0;
  }
  __p = 0;
  char v72 = 0;
  v73 = 0;
  unint64_t v33 = a4 + 1;
  int v64 = (llvm::Type *)v23;
  if (a4 == -1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    goto LABEL_34;
  }
  if (v33 >> 61) {
    goto LABEL_83;
  }
  uint64_t v34 = (llvm::Constant **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v73, v33);
  uint64_t v35 = (char *)&v34[v36];
  __p = v34;
  char v72 = v34;
  v73 = (llvm::Constant **)v35;
  if (v34 >= (llvm::Constant **)v35)
  {
LABEL_34:
    uint64_t v38 = ((char *)v34 - (unsigned char *)__p) >> 3;
    if (!((unint64_t)(v38 + 1) >> 61))
    {
      uint64_t v39 = v35 - (unsigned char *)__p;
      uint64_t v40 = v39 >> 2;
      if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
        uint64_t v40 = v38 + 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        uint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v73, v41);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (uint64_t **)&v42[8 * v38];
      BOOL v44 = &v42[8 * v41];
      llvm::ConstantAggregateZero *v43 = a2;
      uint64_t v37 = (llvm::Constant **)(v43 + 1);
      uint64_t v46 = (char *)__p;
      unsigned int v45 = (char *)v72;
      if (v72 != __p)
      {
        do
        {
          BOOL v47 = (uint64_t *)*((void *)v45 - 1);
          v45 -= 8;
          *--uint64_t v43 = v47;
        }
        while (v45 != v46);
        unsigned int v45 = (char *)__p;
      }
      __p = v43;
      char v72 = v37;
      v73 = (llvm::Constant **)v44;
      if (v45) {
        operator delete(v45);
      }
      goto LABEL_48;
    }
LABEL_83:
    abort();
  }
  *uint64_t v34 = (llvm::Constant *)a2;
  uint64_t v37 = v34 + 1;
LABEL_48:
  char v72 = v37;
  v74 = v11;
  uint64_t v75 = (unint64_t)a1 | 4;
  if (!a4) {
    goto LABEL_75;
  }
  unint64_t v48 = &v11[a4];
  do
  {
    uint64_t v49 = *v11;
    if ((v75 & 4) == 0)
    {
      if ((*(_DWORD *)(*(void *)v49 + 8) & 0xFE) != 0x12) {
        goto LABEL_57;
      }
      uint64_t SplatValue = llvm::Constant::getSplatValue(v49, 0);
      goto LABEL_56;
    }
    if ((v32 & 1) == 0 && (*(_DWORD *)(*(void *)v49 + 8) & 0xFE) != 0x12)
    {
      uint64_t SplatValue = llvm::ConstantVector::getSplat(v26 | ((unint64_t)v27 << 32), v49);
LABEL_56:
      uint64_t v49 = (llvm::Constant *)SplatValue;
    }
LABEL_57:
    uint64_t v51 = v72;
    if (v72 >= v73)
    {
      uint64_t v53 = ((char *)v72 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v53 + 1) >> 61) {
        goto LABEL_83;
      }
      unint64_t v54 = ((char *)v73 - (unsigned char *)__p) >> 2;
      if (v54 <= v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      if ((unint64_t)((char *)v73 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55) {
        uint64_t v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v73, v55);
      }
      else {
        uint64_t v56 = 0;
      }
      BOOL v57 = (llvm::Constant **)&v56[8 * v53];
      uint64_t *v57 = v49;
      unsigned int v52 = v57 + 1;
      uint64_t v59 = (char *)__p;
      int v58 = (char *)v72;
      if (v72 != __p)
      {
        do
        {
          uint64_t v60 = (llvm::Constant *)*((void *)v58 - 1);
          v58 -= 8;
          *--BOOL v57 = v60;
        }
        while (v58 != v59);
        int v58 = (char *)__p;
      }
      __p = v57;
      char v72 = v52;
      v73 = (llvm::Constant **)&v56[8 * v55];
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      llvm::Type *v72 = v49;
      unsigned int v52 = v51 + 1;
    }
    char v72 = v52;
    llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(&v74);
    uint64_t v11 = v74;
  }
  while (v74 != v48);
  uint64_t v37 = v72;
LABEL_75:
  BOOL v61 = a6 >= 0x3F || (a6 & 0xFF00000000) == 0;
  char v62 = 2 * a6 + 2;
  if (v61) {
    char v62 = 0;
  }
  uint64_t v63 = **(void **)*a2;
  LOBYTE(v66) = 34;
  BYTE1(v66) = v62 | v65;
  WORD1(v66) = 0;
  *((void *)&v66 + 1) = __p;
  uint64_t v67 = ((char *)v37 - (unsigned char *)__p) >> 3;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unsigned int v70 = a1;
  uint64_t ElementPtr = (uint64_t)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v63 + 1544, v64, &v66, v24);
  if (__p)
  {
    char v72 = (llvm::Constant **)__p;
    operator delete(__p);
  }
  return ElementPtr;
}

llvm::Constant *llvm::ConstantExpr::getNot(llvm::Constant **this, llvm::Constant *a2)
{
  uint64_t AllOnesValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(*this, a2);
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1E, this, AllOnesValue, 0, 0, v4);
}

uint64_t llvm::ConstantExpr::getBinOpIdentity(llvm::ConstantExpr *this, llvm::ConstantFP *a2, llvm::Type *a3, BOOL a4)
{
  switch((int)this)
  {
    case 13:
      return llvm::Constant::getNullValue(a2, a2);
    case 14:
      return llvm::ConstantFP::getZero(a2, (llvm::Type *)!a4);
    case 15:
    case 16:
      goto LABEL_7;
    case 17:
      return llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
    case 18:
      return llvm::ConstantFP::get(a2, a2, 1.0);
    default:
      if ((this - 29) < 2) {
        return llvm::Constant::getNullValue(a2, a2);
      }
      if (this == 28) {
        return llvm::Constant::getAllOnesValue(a2, a2);
      }
LABEL_7:
      if (!a3 || this > 0x1B) {
        return 0;
      }
      if (((1 << (char)this) & 0xE018000) != 0) {
        return llvm::Constant::getNullValue(a2, a2);
      }
      if (((1 << (char)this) & 0x180000) != 0) {
        return llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
      }
      if (this == 21) {
        return llvm::ConstantFP::get(a2, a2, 1.0);
      }
      return 0;
  }
}

int32x2_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::remove(int32x2_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int32x2_t v5 = *a1;
  __int32 v6 = a1[2].i32[0];
  if (!v6)
  {
    uint64_t v8 = 0;
LABEL_8:
    long long v9 = (uint64_t *)(*(void *)&v5 + 8 * v8);
    goto LABEL_9;
  }
  LODWORD(v8) = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(a2, a2, a3, a4) & (v6 - 1);
  long long v9 = (uint64_t *)(*(void *)&v5 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      uint64_t v10 = *(void *)(*(void *)&v5 + 8 * v8);
      if (v10 == a2) {
        goto LABEL_8;
      }
    }
    int32x2_t v5 = *a1;
    uint64_t v8 = a1[2].u32[0];
    goto LABEL_8;
  }
LABEL_9:
  uint64_t *v9 = -8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  uint64_t v1 = *((void *)this + 3);
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if ((_BYTE)v2) {
  return v1;
  }
}

uint64_t llvm::ConstantDataSequential::getImpl(uint64_t *a1, uint64_t *a2, llvm::ConstantAggregateZero *a3)
{
  unint64_t v4 = (unint64_t)a2;
  if (a2)
  {
    a2 = a1;
    uint64_t v5 = 0;
    while (!*((unsigned char *)a1 + v5))
    {
      if (v4 == ++v5) {
        goto LABEL_5;
      }
    }
    __int16 v7 = (llvm::StringMapImpl *)(**(void **)a3 + 1448);
    long long v13 = 0;
    uint64_t v8 = *llvm::StringMap<std::unique_ptr<llvm::ConstantDataSequential>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<llvm::ConstantDataSequential>>(v7, a2, v4, (unint64_t *)&v13);
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](&v13, 0);
    uint64_t v10 = (llvm::Value **)(v8 + 1);
    long long v9 = (llvm::ConstantAggregateZero **)v8[1];
    if (v9)
    {
      while (1)
      {
        uint64_t result = (uint64_t)v9;
        if (*v9 == a3) {
          break;
        }
        long long v9 = (llvm::ConstantAggregateZero **)v9[4];
        if (!v9)
        {
          uint64_t v10 = (llvm::Value **)(result + 32);
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      int v11 = v8 + 2;
      if (*((unsigned char *)a3 + 8) == 17)
      {
        int v12 = operator new(0x28uLL);
        *int v12 = a3;
        v12[1] = 0;
        v12[2] = 14;
        v12[3] = v11;
        void v12[4] = 0;
      }
      else
      {
        int v12 = operator new(0x30uLL);
        *int v12 = a3;
        v12[1] = 0;
        v12[2] = 15;
        v12[3] = v11;
        void v12[4] = 0;
        *((unsigned char *)v12 + 40) &= ~1u;
      }
      std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v10, (llvm::Value *)v12);
      return (uint64_t)*v10;
    }
  }
  else
  {
LABEL_5:
    return llvm::ConstantAggregateZero::get(a3, (llvm::Type *)a2);
  }
  return result;
}

void std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](llvm::Value **a1, llvm::Value *a2)
{
  unsigned int v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100]((char *)v2 + 32, 0);
    llvm::Value::~Value(v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::ConstantDataArray::getFP(uint64_t **a1, uint64_t *a2, llvm::Type *a3)
{
  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(8 * (void)a3), v5);
}

uint64_t llvm::ConstantDataArray::getString(uint64_t a1, char *a2, llvm::Type *a3, char a4)
{
  v15[8] = *MEMORY[0x263EF8340];
  if (a4)
  {
    long long v13 = v15;
    long long v14 = xmmword_261E8ACE0;
    llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(&v13, a2, (char *)a3 + (void)a2);
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v13, 0);
    __int16 v7 = (uint64_t *)v13;
    uint64_t v8 = (uint64_t *)v14;
    llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 1944), (llvm::Type *)v14);
    uint64_t Impl = llvm::ConstantDataSequential::getImpl(v7, v8, v9);
    if (v13 != v15) {
      free(v13);
    }
    return Impl;
  }
  else
  {
    llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 1944), a3);
    return llvm::ConstantDataSequential::getImpl((uint64_t *)a2, (uint64_t *)a3, v12);
  }
}

uint64_t llvm::ConstantDataVector::get(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  llvm::FixedVectorType::get((uint64_t **)(*(void *)a1 + 1944), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)a3, v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((uint64_t **)(*(void *)a1 + 1968), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((uint64_t **)(*(void *)a1 + 1992), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get((uint64_t **)(*(void *)a1 + 2016), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(8 * (void)a3), v5);
}

uint64_t llvm::ConstantDataVector::getFP(uint64_t **a1, uint64_t *a2, llvm::Type *a3)
{
  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(2 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(4 * (void)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;
  uint64_t vars8;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)(8 * (void)a3), v5);
}

uint64_t llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = a2;
  uint64_t v5 = *(llvm::Type **)(*(void *)this + 24);
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
  if ((_BYTE)v6)
  {
    uint64_t v5 = *(llvm::Type **)(*(void *)this + 24);
  }
  unint64_t v8 = (PrimitiveSizeInBits >> 3) * v4;
  HIDWORD(v9) = *((_DWORD *)v5 + 2) >> 8;
  LODWORD(v9) = HIDWORD(v9) - 8;
  switch((v9 >> 3))
  {
    case 1u:
      uint64_t result = *(unsigned __int16 *)(v3 + v8);
      break;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      __break(1u);
      JUMPOUT(0x261E1DC6CLL);
    case 3u:
      uint64_t result = *(unsigned int *)(v3 + v8);
      break;
    case 7u:
      uint64_t result = *(void *)(v3 + v8);
      break;
    default:
      uint64_t result = *(unsigned __int8 *)(v3 + v8);
      break;
  }
  return result;
}

void llvm::ConstantDataSequential::getElementAsAPFloat(llvm::ConstantDataSequential *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = a2;
  __int16 v7 = *(llvm::Type **)(*(void *)this + 24);
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v7);
  if ((_BYTE)v8)
  {
    __int16 v7 = *(llvm::Type **)(*(void *)this + 24);
  }
  unint64_t v10 = (PrimitiveSizeInBits >> 3) * v6;
  switch(*((unsigned char *)v7 + 8))
  {
    case 1:
      long long v14 = (const llvm::APInt *)*(unsigned __int16 *)(v5 + v10);
      int v16 = 16;
      uint64_t v15 = v14;
      llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v15);
      break;
    case 2:
      int v12 = (const llvm::APInt *)*(unsigned int *)(v5 + v10);
      int v16 = 32;
      uint64_t v15 = v12;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v15);
      break;
    case 3:
      long long v13 = *(const llvm::APInt **)(v5 + v10);
      int v16 = 64;
      uint64_t v15 = v13;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v15);
      break;
    default:
      int v11 = (const llvm::APInt *)*(unsigned __int16 *)(v5 + v10);
      int v16 = 16;
      uint64_t v15 = v11;
      llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)(a3 + 8), &v15);
      break;
  }
}

BOOL llvm::ConstantDataVector::isSplatData(llvm::ConstantDataVector *this)
{
  RawDataValues = (char *)llvm::ConstantDataSequential::getRawDataValues(this);
  uint64_t v3 = *(void *)this;
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(void *)this + 24));
  if ((_BYTE)v4)
  {
    uint64_t v3 = *(void *)this;
  }
  int v6 = *(_DWORD *)(v3 + 32);
  if (v6 == 1) {
    return 1;
  }
  unint64_t v8 = PrimitiveSizeInBits >> 3;
  size_t v9 = (PrimitiveSizeInBits >> 3);
  int v10 = v6 - 2;
  int v11 = v8;
  do
  {
    int v12 = memcmp(RawDataValues, &RawDataValues[v11], v9);
    BOOL result = v12 == 0;
    BOOL v14 = v10-- != 0;
    if (v12) {
      break;
    }
    v11 += v8;
  }
  while (v14);
  return result;
}

uint64_t llvm::ConstantDataVector::isSplat(llvm::ConstantDataVector *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 1) == 0)
  {
    *((unsigned char *)this + 40) = v1 | 1;
    if (llvm::ConstantDataVector::isSplatData(this)) {
      int v3 = 2;
    }
    else {
      int v3 = 0;
    }
    unsigned int v1 = *((unsigned char *)this + 40) & 0xFD | v3;
    *((unsigned char *)this + 40) = v1;
  }
  return (v1 >> 1) & 1;
}

void llvm::Constant::handleOperandChange(llvm::Constant *this, llvm::Value *a2, llvm::Value *a3, __n128 a4)
{
  switch(*((unsigned char *)this + 16))
  {
    case 5:
      uint64_t v5 = (llvm::Value *)llvm::ConstantExpr::handleOperandChangeImpl(this, a2, a3, a4);
      break;
    case 6:
      uint64_t v5 = llvm::DSOLocalEquivalent::handleOperandChangeImpl((llvm::Constant *****)this, a2, a3);
      break;
    case 7:
      uint64_t v5 = llvm::NoCFIValue::handleOperandChangeImpl((llvm::Constant *****)this, a2, a3);
      break;
    case 8:
      uint64_t v5 = (llvm::Value *)llvm::ConstantArray::handleOperandChangeImpl((uint64_t ***)this, a2, a3);
      break;
    case 9:
      uint64_t v5 = (llvm::Value *)llvm::ConstantStruct::handleOperandChangeImpl((uint64_t ***)this, a2, a3);
      break;
    case 0xA:
      uint64_t v5 = (llvm::Value *)llvm::ConstantVector::handleOperandChangeImpl((uint64_t ***)this, a2, a3);
      break;
    default:
      uint64_t v5 = (llvm::Value *)llvm::BlockAddress::handleOperandChangeImpl(this, a2, a3);
      break;
  }
  if (v5)
  {
    llvm::Value::doRAUW(this, v5);
    llvm::Constant::destroyConstant((int32x2_t ****)this, v6, v7, v8);
  }
}

uint64_t llvm::ConstantExpr::handleOperandChangeImpl(llvm::ConstantExpr *this, llvm::Value *a2, llvm::Value *a3, __n128 a4)
{
  v20[8] = *MEMORY[0x263EF8340];
  uint64_t v18 = v20;
  a4.n128_u64[0] = 0x800000000;
  uint64_t v19 = 0x800000000;
  int v7 = *((_DWORD *)this + 5);
  uint64_t v8 = v7 & 0x7FFFFFF;
  if ((v7 & 0x7FFFFFF) != 0)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    int v11 = 0;
    int v12 = this;
    do
    {
      if (*((llvm::Value **)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
      {
        ++v11;
        unsigned int v10 = v9;
        long long v13 = a3;
      }
      else
      {
        long long v13 = (llvm::Value *)*((void *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v18, (uint64_t)v13);
      ++v9;
      int v12 = (llvm::ConstantExpr *)((char *)v12 + 32);
    }
    while (v8 != v9);
    BOOL v14 = (llvm::ConstantExpr **)v18;
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v15 = 0;
    int v11 = 0;
    unsigned int v10 = 0;
    BOOL v14 = (llvm::ConstantExpr **)v20;
  }
  uint64_t v16 = llvm::ConstantExpr::getWithOperands((uint64_t)this, v14, v15, *(llvm::Constant ****)this, (llvm::Type *)1, 0, a4);
  if (!v16) {
    uint64_t v16 = llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(***(void ***)this + 1544, (uint64_t)v18, v19, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
  }
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

uint64_t llvm::ConstantArray::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  v50[8] = *MEMORY[0x263EF8340];
  unint64_t v48 = v50;
  uint64_t v49 = 0x800000000;
  int v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v6 & 0x7FFFFFF, 8);
    int v6 = *((_DWORD *)this + 5);
  }
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = (llvm::Value **)*(this - 1);
    uint64_t v7 = v6 & 0x7FFFFFF;
    if (v7) {
      goto LABEL_5;
    }
LABEL_13:
    unsigned int v10 = 0;
    int v11 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = v6 & 0x7FFFFFF;
  uint64_t v8 = (llvm::Value **)&this[-4 * v7];
  if (!v7) {
    goto LABEL_13;
  }
LABEL_5:
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  int v11 = 0;
  uint64_t v12 = 32 * v7;
  char v13 = 1;
  do
  {
    uint64_t v15 = *v8;
    v8 += 4;
    BOOL v14 = v15;
    if (v15 == a2)
    {
      ++v11;
      unsigned int v10 = v9;
      uint64_t v16 = a3;
    }
    else
    {
      uint64_t v16 = v14;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v48, (uint64_t)v16);
    v13 &= v16 == a3;
    ++v9;
    v12 -= 32;
  }
  while (v12);
  if (v13)
  {
LABEL_14:
    if (llvm::Constant::isNullValue(a3))
    {
      uint64_t v18 = llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*this, v17);
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 16) - 11 > 1) {
        goto LABEL_19;
      }
      uint64_t v18 = llvm::UndefValue::get((llvm::UndefValue *)*this, v17);
    }
    uint64_t Impl = v18;
    goto LABEL_45;
  }
LABEL_19:
  uint64_t Impl = llvm::ConstantArray::getImpl((llvm::PoisonValue *)*this, (llvm::Type *)v48, v49);
  if (!Impl)
  {
    uint64_t v23 = ***this;
    *(void *)&long long v44 = *this;
    *((void *)&v44 + 1) = v48;
    uint64_t v45 = v49;
    int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v44, v20, v21, v22);
    long long v42 = v44;
    uint64_t v43 = v45;
    v47[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v23 + 1280), (uint64_t)&HashValue, v47))BOOL v26 = v47[0] == (uint64_t *)(*(void *)(v23 + 1280) + 8 * *(unsigned int *)(v23 + 1296)); {
    else
    }
      BOOL v26 = 1;
    if (v26)
    {
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v23 + 1280), (uint64_t *)this, v24, v25);
      uint64_t v27 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      if (v11 == 1)
      {
        uint64_t v28 = &this[-4 * v27];
        uint64_t v29 = (char *)&v28[4 * v10];
        if (*(void *)v29)
        {
          **((void **)v29 + 2) = *((void *)v29 + 1);
          uint64_t v30 = *((void *)v29 + 1);
          if (v30) {
            *(void *)(v30 + 16) = *((void *)v29 + 2);
          }
        }
        *(void *)uint64_t v29 = a3;
        if (a3)
        {
          uint64_t v33 = *((void *)a3 + 1);
          char v32 = (char **)((char *)a3 + 8);
          uint64_t v31 = v33;
          uint64_t v34 = (char *)&v28[4 * v10];
          *((void *)v34 + 1) = v33;
          if (v33) {
            *(void *)(v31 + 16) = v34 + 8;
          }
          *((void *)v34 + 2) = v32;
          *char v32 = v29;
        }
      }
      else if (v27)
      {
        uint64_t v35 = (uint64_t *)((char *)a3 + 8);
        uint64_t v27 = v27;
        uint64_t v36 = (llvm::ConstantArray *)this;
        do
        {
          uint64_t v37 = (char *)v36 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          if (*(llvm::Value **)v37 == a2)
          {
            if (a2)
            {
              **((void **)v37 + 2) = *((void *)v37 + 1);
              uint64_t v38 = *((void *)v37 + 1);
              if (v38) {
                *(void *)(v38 + 16) = *((void *)v37 + 2);
              }
            }
            *(void *)uint64_t v37 = a3;
            if (a3)
            {
              uint64_t v39 = *v35;
              *((void *)v37 + 1) = *v35;
              if (v39) {
                *(void *)(v39 + 16) = v37 + 8;
              }
              *((void *)v37 + 2) = v35;
              uint64_t *v35 = (uint64_t)v37;
            }
          }
          uint64_t v36 = (llvm::ConstantArray *)((char *)v36 + 32);
          --v27;
        }
        while (v27);
      }
      uint64_t v46 = (llvm::ConstantArray *)this;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v23 + 1280, &v46, (uint64_t)&HashValue, (uint64_t)v47);
      uint64_t Impl = 0;
    }
    else
    {
      uint64_t Impl = *v47[0];
    }
  }
LABEL_45:
  if (v48 != v50) {
    free(v48);
  }
  return Impl;
}

uint64_t llvm::ConstantStruct::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  v49[8] = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = (llvm::Value **)*(this - 1);
    LODWORD(v7) = v6 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v7 = v6 & 0x7FFFFFF;
    uint64_t v8 = (llvm::Value **)&this[-4 * v7];
  }
  BOOL v47 = v49;
  uint64_t v48 = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if (!v7)
  {
    unsigned int v10 = 0;
    int v11 = 0;
    goto LABEL_15;
  }
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  int v11 = 0;
  uint64_t v12 = 32 * v7;
  char v13 = 1;
  do
  {
    uint64_t v15 = *v8;
    v8 += 4;
    BOOL v14 = v15;
    if (v15 == a2)
    {
      ++v11;
      unsigned int v10 = v9;
      uint64_t v16 = a3;
    }
    else
    {
      uint64_t v16 = v14;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v47, (uint64_t)v16);
    v13 &= v16 == a3;
    ++v9;
    v12 -= 32;
  }
  while (v12);
  if (v13)
  {
LABEL_15:
    if (llvm::Constant::isNullValue(a3))
    {
      uint64_t v20 = llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*this, v17);
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 16) - 11 > 1) {
        goto LABEL_20;
      }
      uint64_t v20 = llvm::UndefValue::get((llvm::UndefValue *)*this, v17);
    }
    uint64_t v21 = v20;
    goto LABEL_45;
  }
LABEL_20:
  uint64_t v22 = ***this;
  *(void *)&long long v43 = *this;
  *((void *)&v43 + 1) = v47;
  uint64_t v44 = v48;
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v43, (uint64_t)v17, v18, v19);
  long long v41 = v43;
  uint64_t v42 = v44;
  v46[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v22 + 1304), (uint64_t)&HashValue, v46))BOOL v25 = v46[0] == (uint64_t *)(*(void *)(v22 + 1304) + 8 * *(unsigned int *)(v22 + 1320)); {
  else
  }
    BOOL v25 = 1;
  if (v25)
  {
    llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v22 + 1304), (uint64_t *)this, v23, v24);
    uint64_t v26 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v11 == 1)
    {
      uint64_t v27 = &this[-4 * v26];
      uint64_t v28 = (char *)&v27[4 * v10];
      if (*(void *)v28)
      {
        **((void **)v28 + 2) = *((void *)v28 + 1);
        uint64_t v29 = *((void *)v28 + 1);
        if (v29) {
          *(void *)(v29 + 16) = *((void *)v28 + 2);
        }
      }
      *(void *)uint64_t v28 = a3;
      if (a3)
      {
        uint64_t v32 = *((void *)a3 + 1);
        uint64_t v31 = (char **)((char *)a3 + 8);
        uint64_t v30 = v32;
        uint64_t v33 = (char *)&v27[4 * v10];
        *((void *)v33 + 1) = v32;
        if (v32) {
          *(void *)(v30 + 16) = v33 + 8;
        }
        *((void *)v33 + 2) = v31;
        llvm::ConstantAggregateZero *v31 = v28;
      }
    }
    else if (v26)
    {
      uint64_t v34 = (uint64_t *)((char *)a3 + 8);
      uint64_t v26 = v26;
      uint64_t v35 = (llvm::ConstantStruct *)this;
      do
      {
        uint64_t v36 = (char *)v35 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        if (*(llvm::Value **)v36 == a2)
        {
          if (a2)
          {
            **((void **)v36 + 2) = *((void *)v36 + 1);
            uint64_t v37 = *((void *)v36 + 1);
            if (v37) {
              *(void *)(v37 + 16) = *((void *)v36 + 2);
            }
          }
          *(void *)uint64_t v36 = a3;
          if (a3)
          {
            uint64_t v38 = *v34;
            *((void *)v36 + 1) = *v34;
            if (v38) {
              *(void *)(v38 + 16) = v36 + 8;
            }
            *((void *)v36 + 2) = v34;
            *uint64_t v34 = (uint64_t)v36;
          }
        }
        uint64_t v35 = (llvm::ConstantStruct *)((char *)v35 + 32);
        --v26;
      }
      while (v26);
    }
    uint64_t v45 = (llvm::ConstantStruct *)this;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v22 + 1304, &v45, (uint64_t)&HashValue, (uint64_t)v46);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = *v46[0];
  }
LABEL_45:
  if (v47 != v49) {
    free(v47);
  }
  return v21;
}

uint64_t llvm::ConstantVector::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  v46[8] = *MEMORY[0x263EF8340];
  uint64_t v44 = v46;
  uint64_t v45 = 0x800000000;
  int v6 = *((_DWORD *)this + 5);
  unint64_t v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    int v10 = 0;
    int v11 = (llvm::ConstantVector *)this;
    uint64_t v12 = v7;
    do
    {
      char v13 = (llvm::Value *)*((void *)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      if (v13 == a2)
      {
        ++v10;
        uint64_t v9 = v8;
      }
      else
      {
        uint64_t v9 = v9;
      }
      if (v13 == a2) {
        BOOL v14 = a3;
      }
      else {
        BOOL v14 = (llvm::Value *)*((void *)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v44, (uint64_t)v14);
      ++v8;
      int v11 = (llvm::ConstantVector *)((char *)v11 + 32);
    }
    while (v12 != v8);
  }
  else
  {
    int v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t Impl = llvm::ConstantVector::getImpl((uint64_t ****)v44, (llvm::Type *)v45);
  if (!Impl)
  {
    uint64_t v19 = ***this;
    *(void *)&long long v40 = *this;
    *((void *)&v40 + 1) = v44;
    uint64_t v41 = v45;
    int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v40, v15, v16, v17);
    long long v38 = v40;
    uint64_t v39 = v41;
    v43[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v19 + 1328), (uint64_t)&HashValue, v43))BOOL v22 = v43[0] == (uint64_t *)(*(void *)(v19 + 1328) + 8 * *(unsigned int *)(v19 + 1344)); {
    else
    }
      BOOL v22 = 1;
    if (v22)
    {
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v19 + 1328), (uint64_t *)this, v20, v21);
      uint64_t v23 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      if (v10 == 1)
      {
        uint64_t v24 = &this[-4 * v23];
        BOOL v25 = (char *)&v24[4 * v9];
        if (*(void *)v25)
        {
          **((void **)v25 + 2) = *((void *)v25 + 1);
          uint64_t v26 = *((void *)v25 + 1);
          if (v26) {
            *(void *)(v26 + 16) = *((void *)v25 + 2);
          }
        }
        *(void *)BOOL v25 = a3;
        if (a3)
        {
          uint64_t v29 = *((void *)a3 + 1);
          uint64_t v28 = (char **)((char *)a3 + 8);
          uint64_t v27 = v29;
          uint64_t v30 = (char *)&v24[4 * v9];
          *((void *)v30 + 1) = v29;
          if (v29) {
            *(void *)(v27 + 16) = v30 + 8;
          }
          *((void *)v30 + 2) = v28;
          char *v28 = v25;
        }
      }
      else if (v23)
      {
        uint64_t v31 = (uint64_t *)((char *)a3 + 8);
        uint64_t v23 = v23;
        uint64_t v32 = (llvm::ConstantVector *)this;
        do
        {
          uint64_t v33 = (char *)v32 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          if (*(llvm::Value **)v33 == a2)
          {
            if (a2)
            {
              **((void **)v33 + 2) = *((void *)v33 + 1);
              uint64_t v34 = *((void *)v33 + 1);
              if (v34) {
                *(void *)(v34 + 16) = *((void *)v33 + 2);
              }
            }
            *(void *)uint64_t v33 = a3;
            if (a3)
            {
              uint64_t v35 = *v31;
              *((void *)v33 + 1) = *v31;
              if (v35) {
                *(void *)(v35 + 16) = v33 + 8;
              }
              *((void *)v33 + 2) = v31;
              uint64_t *v31 = (uint64_t)v33;
            }
          }
          uint64_t v32 = (llvm::ConstantVector *)((char *)v32 + 32);
          --v23;
        }
        while (v23);
      }
      uint64_t v42 = (llvm::ConstantVector *)this;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v19 + 1328, &v42, (uint64_t)&HashValue, (uint64_t)v43);
      uint64_t Impl = 0;
    }
    else
    {
      uint64_t Impl = *v43[0];
    }
  }
  if (v44 != v46) {
    free(v44);
  }
  return Impl;
}

uint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v14 = *(unsigned __int16 *)(a4 + 18);
  char v15 = *(_WORD *)(a4 + 18);
  int v16 = *(unsigned __int8 *)(a4 + 17) >> 1;
  if ((v14 - 53) > 1)
  {
    if (v14 == 34)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      __int16 v20 = 0;
      uint64_t v19 = *(void *)(a4 + 24);
    }
    else if (v14 == 63)
    {
      __int16 v20 = 0;
      uint64_t v19 = 0;
      uint64_t v18 = *(void *)(a4 + 24);
      uint64_t v17 = *(unsigned int *)(a4 + 32);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      __int16 v20 = 0;
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    __int16 v20 = *(_WORD *)(a4 + 24);
  }
  *(void *)&long long v42 = *(void *)a4;
  BYTE8(v42) = v15;
  BYTE9(v42) = v16;
  WORD5(v42) = v20;
  *(void *)&long long v43 = a2;
  *((void *)&v43 + 1) = a3;
  *(void *)&long long v44 = v18;
  *((void *)&v44 + 1) = v17;
  uint64_t v45 = v19;
  int HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue((uint64_t *)&v42, a2, a3, (unint64_t *)a4);
  long long v38 = v42;
  long long v39 = v43;
  long long v40 = v44;
  uint64_t v41 = v45;
  v47[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v47)&& v47[0] != *(void *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return *(void *)v47[0];
  }
  llvm::ConstantUniqueMap<llvm::ConstantExpr>::remove((int32x2_t *)a1, a4, v21, v22);
  uint64_t v24 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  if (a7 == 1)
  {
    uint64_t v25 = a4 - 32 * v24;
    uint64_t v26 = v25 + 32 * a8;
    if (*(void *)v26)
    {
      **(void **)(v26 + 16) = *(void *)(v26 + 8);
      uint64_t v27 = *(void *)(v26 + 8);
      if (v27) {
        *(void *)(v27 + 16) = *(void *)(v26 + 16);
      }
    }
    *(void *)uint64_t v26 = a6;
    if (a6)
    {
      uint64_t v30 = *(void *)(a6 + 8);
      uint64_t v29 = (uint64_t *)(a6 + 8);
      uint64_t v28 = v30;
      uint64_t v31 = v25 + 32 * a8;
      *(void *)(v31 + 8) = v30;
      if (v30) {
        *(void *)(v28 + 16) = v31 + 8;
      }
      *(void *)(v31 + 16) = v29;
      *uint64_t v29 = v26;
    }
  }
  else if (v24)
  {
    uint64_t v32 = (uint64_t *)(a6 + 8);
    uint64_t v24 = v24;
    uint64_t v33 = a4;
    do
    {
      uint64_t v34 = v33 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
      if (*(void *)v34 == a5)
      {
        if (a5)
        {
          **(void **)(v34 + 16) = *(void *)(v34 + 8);
          uint64_t v35 = *(void *)(v34 + 8);
          if (v35) {
            *(void *)(v35 + 16) = *(void *)(v34 + 16);
          }
        }
        *(void *)uint64_t v34 = a6;
        if (a6)
        {
          uint64_t v36 = *v32;
          *(void *)(v34 + 8) = *v32;
          if (v36) {
            *(void *)(v36 + 16) = v34 + 8;
          }
          *(void *)(v34 + 16) = v32;
          *uint64_t v32 = v34;
        }
      }
      v33 += 32;
      --v24;
    }
    while (v24);
  }
  uint64_t v46 = a4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, &v46, (uint64_t)&HashValue, (uint64_t)v47);
  return 0;
}

BOOL llvm::function_ref<BOOL ()(llvm::Constant const*)>::callback_fn<llvm::Constant::containsPoisonElement(void)::$_0>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) == 12;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  unint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  uint64_t inserted = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t inserted = *a2;
    *((void *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        _DWORD *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      char v13 = (void *)(v4 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) <= 0xFFFFFFFD)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13 - 2, &v19);
          int v14 = v19;
          _DWORD *v19 = *((_DWORD *)v13 - 2);
          uint64_t v15 = *v13;
          *char v13 = 0;
          *((void *)v14 + 1) = v15;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v16 = *v13;
          *char v13 = 0;
          if (v16) {
            std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v13, v16);
          }
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    do
    {
      _DWORD *result = -1;
      result += 4;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

llvm::APInt *llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(uint64_t *a1, llvm::hashing::detail::hash_state **a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = 0;
  char v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(a1, a2, &v9, a4);
  int v7 = v9;
  if ((v6 & 1) == 0)
  {
    int v7 = (llvm::APInt *)llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>((uint64_t)a1, (uint64_t)a2, a2, (uint64_t)v9);
    llvm::APInt::operator=(v7, (const llvm::APInt *)a2);
    *((void *)v7 + 2) = 0;
  }
  return v7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(uint64_t *a1, llvm::hashing::detail::hash_state **this, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v22 = 0;
    uint64_t v21 = -1;
    int v20 = 0;
    uint64_t v19 = -2;
    unsigned int v8 = llvm::hash_value(this, (const llvm::APInt *)this, (uint64_t)a3, a4);
    uint64_t v18 = 0;
    int v9 = v5 - 1;
    uint64_t v10 = *((unsigned int *)this + 2);
    uint64_t v11 = *this;
    for (int i = 1; ; ++i)
    {
      unsigned int v13 = v8 & v9;
      uint64_t v14 = v7 + 24 * (v8 & v9);
      if (v10 == *(_DWORD *)(v14 + 8))
      {
        if (v10 > 0x40)
        {
          if (!memcmp(v11, *(const void **)v14, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_12:
            uint64_t result = 1;
            goto LABEL_13;
          }
        }
        else if (*(llvm::hashing::detail::hash_state **)v14 == v11)
        {
          goto LABEL_12;
        }
      }
      if (llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v7 + 24 * v13, (uint64_t)&v21)) {
        break;
      }
      BOOL isEqual = llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v7 + 24 * v13, (uint64_t)&v19);
      uint64_t v16 = v18;
      if (isEqual && v18 == 0) {
        uint64_t v16 = v7 + 24 * v13;
      }
      uint64_t v18 = v16;
      unsigned int v8 = v13 + i;
    }
    uint64_t result = 0;
    if (v18) {
      uint64_t v14 = v18;
    }
LABEL_13:
    *a3 = v14;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

BOOL llvm::DenseMapInfo<llvm::APInt,void>::isEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if (v2 > 0x40) {
    return memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    return *(void *)a1 == *(void *)a2;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>(uint64_t a1, uint64_t a2, llvm::hashing::detail::hash_state **a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(a1, v7);
    uint64_t v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, a3, &v10, v9);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 8) || *(void *)a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

char *llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = 24 * v11;
      unsigned int v13 = result + 8;
      do
      {
        *unsigned int v13 = 0;
        *((void *)v13 - 1) = -1;
        v13 += 6;
        v12 -= 24;
      }
      while (v12);
    }
    if (v3)
    {
      uint64_t v14 = (llvm::hashing::detail::hash_state **)(v4 + 16);
      uint64_t v15 = 24 * v3;
      do
      {
        uint64_t v16 = v14 - 2;
        if (*((_DWORD *)v14 - 2) || (unint64_t)*v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, v14 - 2, &v23, v10);
          uint64_t v17 = v23;
          llvm::APInt::operator=(v23, (uint64_t)(v14 - 2));
          uint64_t v18 = *v14;
          *uint64_t v14 = 0;
          *(void *)(v17 + 16) = v18;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v19 = (uint64_t)*v14;
          *uint64_t v14 = 0;
          if (v19) {
            std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v14, v19);
          }
          if (*((_DWORD *)v14 - 2) >= 0x41u && *v16) {
            MEMORY[0x263E50080](*v16, 0x1000C8000313F17);
          }
        }
        v14 += 3;
        v15 -= 24;
      }
      while (v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    uint64_t v21 = 24 * v20;
    int v22 = result + 8;
    do
    {
      *int v22 = 0;
      *((void *)v22 - 1) = -1;
      v22 += 6;
      v21 -= 24;
    }
    while (v21);
  }
  return result;
}

void std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
    {
      uint64_t v3 = *(void *)(a2 + 24);
      if (v3) {
        MEMORY[0x263E50080](v3, 0x1000C8000313F17);
      }
    }
    llvm::Value::~Value((llvm::Value *)a2);
    llvm::User::operator delete(v4);
  }
}

llvm::APFloat *llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(a1, (llvm *)a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>((uint64_t)a1, a2, (llvm *)a2, v7);
    llvm::APFloat::Storage::operator=((llvm::APFloat *)((char *)v5 + 8), (llvm::detail::DoubleAPFloat *)(a2 + 8));
    *((void *)v5 + 4) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(uint64_t *a1, llvm *a2, llvm::APFloat **a3)
{
  v22[3] = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 1;
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v22, (uint64_t)&llvm::semBogus, 1);
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v20, (uint64_t)&llvm::semBogus, 2);
    int v11 = v4 - 1;
    unsigned int v12 = v11 & llvm::hash_value(a2, v8, v9, v10);
    unsigned int v13 = (llvm::APFloat *)(v6 + 40 * v12);
    if ((llvm::APFloat::bitwiseIsEqual(a2, v13) & 1) == 0)
    {
      uint64_t v18 = 0;
      int v17 = 1;
      while (!llvm::APFloat::bitwiseIsEqual(v13, (const llvm::APFloat *)v21))
      {
        unsigned __int8 IsEqual = llvm::APFloat::bitwiseIsEqual(v13, (const llvm::APFloat *)v19);
        uint64_t v16 = v18;
        if ((IsEqual & (v18 == 0)) != 0) {
          uint64_t v16 = v13;
        }
        uint64_t v18 = v16;
        unsigned int v12 = (v12 + v17) & v11;
        unsigned int v13 = (llvm::APFloat *)(v6 + 40 * v12);
        uint64_t v7 = 1;
        ++v17;
        if (llvm::APFloat::bitwiseIsEqual(a2, v13)) {
          goto LABEL_3;
        }
      }
      uint64_t v7 = 0;
      if (v18) {
        unsigned int v13 = v18;
      }
    }
LABEL_3:
    *a3 = v13;
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v20);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v22);
  }
  else
  {
    uint64_t v7 = 0;
    *a3 = 0;
  }
  return v7;
}

llvm::APFloat *llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>(uint64_t a1, uint64_t a2, llvm *a3, llvm::APFloat *a4)
{
  _OWORD v11[3] = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v11, (uint64_t)&llvm::semBogus, 1);
  if ((llvm::APFloat::bitwiseIsEqual(a4, (const llvm::APFloat *)&v10) & 1) == 0) {
    --*(_DWORD *)(a1 + 12);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v11);
  return a4;
}

void llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(uint64_t a1, int a2)
{
  v17[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = operator new(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((uint64_t *)a1);
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v17, (uint64_t)&llvm::semBogus, 1);
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v15, (uint64_t)&llvm::semBogus, 2);
    if (v3)
    {
      uint64_t v9 = 40 * v3;
      uint64_t v10 = (uint64_t *)(v4 + 32);
      do
      {
        if ((llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(v10 - 4), (const llvm::APFloat *)v16) & 1) == 0
          && (llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(v10 - 4), (const llvm::APFloat *)v14) & 1) == 0)
        {
          unsigned int v13 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>((uint64_t *)a1, (llvm *)(v10 - 4), &v13);
          int v11 = v13;
          llvm::APFloat::Storage::operator=((llvm::APFloat *)((char *)v13 + 8), (void **)v10 - 3);
          uint64_t v12 = *v10;
          *uint64_t v10 = 0;
          *((void *)v11 + 4) = v12;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](v10, 0);
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v10 - 3));
        v10 += 5;
        v9 -= 40;
      }
      while (v9);
    }
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v15);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v17);
    JUMPOUT(0x263E500A0);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((uint64_t *)a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty(uint64_t *a1)
{
  v6[3] = *MEMORY[0x263EF8340];
  a1[1] = 0;
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v6, (uint64_t)&llvm::semBogus, 1);
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 40 * v2;
    unint64_t v5 = (llvm::APFloat::Storage *)(v3 + 8);
    do
    {
      unint64_t v5 = (llvm::detail::IEEEFloat *)((char *)llvm::APFloat::Storage::Storage(v5, (const llvm::APFloat::Storage *)v6)
                                     + 40);
      v4 -= 40;
    }
    while (v4);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v6);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t result = a3;
  unint64_t v5 = (void **)(a4 + 8);
  do
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5) {
        (*v5)[2] = v5[1];
      }
    }
    *unint64_t v6 = v7;
    if (v7)
    {
      uint64_t v10 = *(void **)(v7 + 8);
      unsigned int v8 = (void *)(v7 + 8);
      uint64_t v9 = v10;
      *unint64_t v5 = v10;
      if (v10) {
        void v9[2] = v5;
      }
      v5[1] = v8;
      void *v8 = v6;
    }
    ++a2;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v6 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 8), *(void *)(a1 + 8) + 8 * *(void *)(a1 + 16), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)a1, &v6);
}

void *llvm::ConstantUniqueMap<llvm::ConstantArray>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *uint64_t v10 = a2;
  v10[1] = 0;
  int v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 8;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  unsigned int v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6)
{
  unint64_t v12 = a2;
  uint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  uint64_t v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v5 = *a1;
    int v6 = (void *)(a2 + 8);
    int v7 = v4 - 1;
    unsigned int v8 = *(_DWORD *)a2 & (v4 - 1);
    uint64_t v9 = (uint64_t *)(*a1 + 8 * v8);
    if (llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual((void *)(a2 + 8), *v9))
    {
      uint64_t result = 1;
    }
    else
    {
      int v11 = 0;
      int v12 = 1;
      while (*v9 != -4096)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = *v9 == -8192;
        }
        if (v13) {
          int v11 = v9;
        }
        int v17 = v11;
        int v14 = v12 + 1;
        unsigned int v8 = (v8 + v12) & v7;
        uint64_t v9 = (uint64_t *)(v5 + 8 * v8);
        BOOL isEqual = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual(v6, *v9);
        int v11 = v17;
        BOOL v16 = isEqual;
        uint64_t result = 1;
        int v12 = v14;
        if (v16) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        uint64_t v9 = v11;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual(void *a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (*a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v2 = a1[2];
  if (v2 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) {
    return 0;
  }
  if (!a1[2]) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)a1[1];
  int v4 = (uint64_t *)(a2 - 32 * v2);
  uint64_t v5 = a1[2] - 1;
  do
  {
    uint64_t v7 = *v3++;
    uint64_t v6 = v7;
    uint64_t v9 = *v4;
    v4 += 4;
    uint64_t v8 = v9;
    BOOL v11 = v5-- != 0;
    BOOL result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, (uint64_t)a2, a3, v12);
    uint64_t v9 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if (v3)
    {
      uint64_t v15 = &v4[v3];
      BOOL v16 = v4;
      do
      {
        if (((unint64_t)*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *(uint64_t ***)a1;
          int v18 = *(_DWORD *)(a1 + 16);
          int HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(*v16, v10, v11, v12);
          int v20 = v18 - 1;
          uint64_t v21 = *v16;
          unsigned int v22 = HashValue & (v18 - 1);
          uint64_t v23 = &v17[v22];
          uint64_t v24 = *v23;
          if (*v16 != *v23)
          {
            uint64_t v25 = 0;
            int v26 = 1;
            while (v24 != (uint64_t *)-4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == (uint64_t *)-8192;
              }
              if (v27) {
                uint64_t v25 = v23;
              }
              unsigned int v28 = v22 + v26++;
              unsigned int v22 = v28 & v20;
              uint64_t v23 = &v17[v28 & v20];
              uint64_t v24 = *v23;
              if (v21 == *v23) {
                goto LABEL_12;
              }
            }
            if (v25) {
              uint64_t v23 = v25;
            }
          }
LABEL_12:
          *uint64_t v23 = v21;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v29 = *(unsigned int *)(a1 + 16);
  if (v29)
  {
    uint64_t v30 = 8 * v29;
    do
    {
      *result++ = -4096;
      v30 -= 8;
    }
    while (v30);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  v16[32] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  uint64_t v15 = 0x2000000000;
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 5);
  uint64_t v6 = v5 & 0x7FFFFFF;
  if ((v5 & 0x7FFFFFF) != 0)
  {
    unsigned int v8 = a1;
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, v8[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]);
      v8 += 4;
      --v6;
    }
    while (v6);
    uint64_t v9 = v14;
    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = v16;
  }
  v13[0] = v4;
  v13[1] = v9;
  v13[2] = v10;
  unint64_t HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)v13, a2, a3, a4);
  if (v14 != v16) {
    free(v14);
  }
  return HashValue;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>(uint64_t ****a1, uint64_t a2)
{
  v16[16] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  uint64_t v15 = (llvm::Type *)0x1000000000;
  if (a2)
  {
    uint64_t v3 = 8 * a2;
    uint64_t v4 = a1;
    do
    {
      if (*v4) {
        BOOL v5 = *((unsigned char *)*v4 + 16) == 17;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5)
      {
        uint64_t Impl = 0;
        goto LABEL_15;
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v12, (llvm::APFloat *)(*v4 + 3));
      __int16 LimitedValue = llvm::APInt::getLimitedValue(&v12, 0xFFFFFFFFFFFFFFFFLL);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, (uint64_t)LimitedValue);
      if (v13 >= 0x41 && v12) {
        MEMORY[0x263E50080](v12, 0x1000C8000313F17);
      }
      ++v4;
      v3 -= 8;
    }
    while (v3);
    int v7 = (uint64_t *)v14;
    unsigned int v8 = (llvm::Type *)v15;
  }
  else
  {
    unsigned int v8 = 0;
    int v7 = v16;
  }
  llvm::ArrayType::get(**a1, v8);
  uint64_t Impl = llvm::ConstantDataSequential::getImpl(v7, (uint64_t *)(8 * (void)v8), v9);
LABEL_15:
  if (v14 != v16) {
    free(v14);
  }
  return Impl;
}

void *llvm::ConstantUniqueMap<llvm::ConstantStruct>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *uint64_t v10 = a2;
  v10[1] = 0;
  int v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 9;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  unsigned int v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

void *llvm::ConstantUniqueMap<llvm::ConstantVector>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *uint64_t v10 = a2;
  v10[1] = 0;
  int v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 10;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  unsigned int v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>(uint64_t ****a1, uint64_t a2)
{
  v16[16] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  uint64_t v15 = (llvm::Type *)0x1000000000;
  if (a2)
  {
    uint64_t v3 = 8 * a2;
    uint64_t v4 = a1;
    do
    {
      if (*v4) {
        BOOL v5 = *((unsigned char *)*v4 + 16) == 17;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5)
      {
        uint64_t Impl = 0;
        goto LABEL_15;
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v12, (llvm::APFloat *)(*v4 + 3));
      __int16 LimitedValue = llvm::APInt::getLimitedValue(&v12, 0xFFFFFFFFFFFFFFFFLL);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, (uint64_t)LimitedValue);
      if (v13 >= 0x41 && v12) {
        MEMORY[0x263E50080](v12, 0x1000C8000313F17);
      }
      ++v4;
      v3 -= 8;
    }
    while (v3);
    int v7 = (uint64_t *)v14;
    unsigned int v8 = (llvm::Type *)v15;
  }
  else
  {
    unsigned int v8 = 0;
    int v7 = v16;
  }
  llvm::FixedVectorType::get(**a1, v8);
  uint64_t Impl = llvm::ConstantDataSequential::getImpl(v7, (uint64_t *)(8 * v8), v9);
LABEL_15:
  if (v14 != v16) {
    free(v14);
  }
  return Impl;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  BOOL v5 = v7;
  if ((v4 & 1) == 0)
  {
    BOOL v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucketImpl<llvm::Type *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *BOOL v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucketImpl<llvm::Type *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v12 = (uint64_t *)(v4 + 8);
      uint64_t v13 = 16 * v3;
      do
      {
        if ((*(v12 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v12 - 1, &v18);
          uint64_t v14 = v18;
          void *v18 = *(v12 - 1);
          uint64_t v15 = *v12;
          *int v12 = 0;
          v14[1] = v15;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v12, 0);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(a1, (uint64_t)a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = a2[1];
    void v5[2] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue((_DWORD *)a2);
    int v8 = v4 - 1;
    uint64_t v9 = *(void *)(a2 + 8);
    unsigned int v10 = HashValue & (v4 - 1);
    uint64_t v11 = (void *)(v6 + 24 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (*(void *)a2 == *v11 && v9 == v13)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v12 != -4096 || v13 != -4096)
      {
        if (v15) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v13 == -8192;
        }
        if (v18 && v12 == -8192) {
          uint64_t v15 = v11;
        }
        unsigned int v20 = v10 + v16++;
        unsigned int v10 = v20 & v8;
        uint64_t v11 = (void *)(v6 + 24 * (v20 & v8));
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        if (*(void *)a2 == *v11 && v9 == v13) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v15) {
        uint64_t v11 = v15;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a3 = v11;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        _OWORD *result = v12;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v13 = 24 * v3;
      uint64_t v14 = (void *)v4;
      do
      {
        uint64_t v15 = v14[1];
        if ((*v14 != -4096 || v15 != -4096) && (*v14 != -8192 || v15 != -8192))
        {
          unsigned int v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, (uint64_t)v14, &v20);
          int v16 = v20;
          *unsigned int v20 = *v14;
          v16[1] = v14[1];
          v16[2] = v14[2];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 3;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 24 * v17;
    int64x2_t v19 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      _OWORD *result = v19;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (void *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v13, &v17);
          uint64_t v14 = v17;
          *uint64_t v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 16 * v15;
    do
    {
      void *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int Hash = llvm::ConstantExprKeyType::getHash((llvm::ConstantExprKeyType *)(a1 + 1), a2, a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, a1, &Hash);
}

unint64_t llvm::ConstantExprKeyType::getHash(llvm::ConstantExprKeyType *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v5 = (char *)this + 1;
  unint64_t v6 = (__int16 *)((char *)this + 2);
  unint64_t v11 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*((llvm::hashing::detail::hash_state **)this + 1), *((void *)this + 1) + 8 * *((void *)this + 2), a3, a4);
  unint64_t v10 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*((llvm::hashing::detail::hash_state **)this + 3), *((void *)this + 3) + 4 * *((void *)this + 4), v7, v8);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>((llvm::hashing::detail::hash_combine_recursive_helper *)v12, 0, v12, v13, (char *)this, v5, v6, (uint64_t *)&v11, (uint64_t *)&v10, (uint64_t *)this + 5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, char *a6, __int16 *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  uint64_t v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  uint64_t v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _WORD *a3, char *a4, __int16 *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  uint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

_WORD *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>(uint64_t a1, uint64_t *a2, _WORD *__dst, unint64_t a4, __int16 a5)
{
  __int16 __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      uint64_t v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      long long v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(void *)(a1 + 112) = v15;
      uint64_t v11 = 64;
    }
    *a2 = v11;
    if (a1 + 2 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 2 - v8);
      a1 += 2 - v8;
    }
  }
  return (_WORD *)a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a1;
    uint64_t v9 = (unsigned __int8 *)(a2 + 16);
    unsigned int v8 = *(_DWORD *)a2;
    int v10 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v12 = v8 & v10;
      uint64_t v13 = (void **)(v7 + 8 * (v8 & v10));
      uint64_t v14 = *v13;
      if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(void *)(a2 + 8) == *v14)
      {
        if (llvm::ConstantExprKeyType::operator==(v9, (uint64_t)v14))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v14 = *v13;
      }
      if (v14 == (void *)-4096) {
        break;
      }
      if (v6) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == (void *)-8192;
      }
      if (v15) {
        unint64_t v6 = (void **)(v7 + 8 * v12);
      }
      unsigned int v8 = v12 + i;
    }
    uint64_t result = 0;
    if (v6) {
      uint64_t v13 = v6;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::ConstantExprKeyType::operator==(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 18);
  if (v2 != *a1) {
    return 0;
  }
  if (a1[1] != *(unsigned __int8 *)(a2 + 17) >> 1) {
    return 0;
  }
  uint64_t v5 = *((void *)a1 + 2);
  if (v5 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) {
    return 0;
  }
  int v6 = (v2 - 53) > 1 ? 0 : *(unsigned __int16 *)(a2 + 24);
  if (v6 != *((unsigned __int16 *)a1 + 1)) {
    return 0;
  }
  uint64_t v7 = *((void *)a1 + 2);
  if (*((void *)a1 + 2))
  {
    unsigned int v8 = (void *)*((void *)a1 + 1);
    uint64_t v9 = (void *)(a2 - 32 * v5);
    while (*v8 == *v9)
    {
      ++v8;
      v9 += 4;
      if (!--v7) {
        goto LABEL_12;
      }
    }
    return 0;
  }
LABEL_12:
  uint64_t v10 = *((void *)a1 + 4);
  if (v2 == 63)
  {
    uint64_t v11 = *(const void **)(a2 + 24);
    uint64_t v12 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  if (v10 != v12 || memcmp(*((const void **)a1 + 3), v11, 4 * v10)) {
    return 0;
  }
  if (v2 == 34) {
    uint64_t v14 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v14 = 0;
  }
  return *((void *)a1 + 5) == v14;
}

void *llvm::ConstantExprKeyType::create(llvm::ConstantExprKeyType *this, llvm::Type *a2)
{
  int v4 = *(unsigned __int8 *)this;
  switch(*(unsigned char *)this)
  {
    case '5':
      uint64_t v5 = (char *)operator new(0x60uLL);
      int v6 = v5 + 64;
      *((_DWORD *)v5 + 21) = *((_DWORD *)v5 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = v5 + 64;
      *((void *)v5 + 4) = 0;
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 6) = 0;
      *((void *)v5 + 7) = v5 + 64;
      __int16 v7 = *((_WORD *)this + 1);
      unsigned int v8 = (uint64_t *)*((void *)this + 1);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = (uint64_t)(v5 + 64);
      uint64_t v12 = a2;
      __int16 v13 = 53;
      goto LABEL_15;
    case '6':
      uint64_t v32 = (char *)operator new(0x60uLL);
      int v6 = v32 + 64;
      *((_DWORD *)v32 + 21) = *((_DWORD *)v32 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = 0;
      *((void *)v32 + 3) = v32 + 64;
      *((void *)v32 + 4) = 0;
      *((void *)v32 + 5) = 0;
      *((void *)v32 + 6) = 0;
      *((void *)v32 + 7) = v32 + 64;
      __int16 v7 = *((_WORD *)this + 1);
      uint64_t v33 = (uint64_t *)*((void *)this + 1);
      uint64_t v9 = *v33;
      uint64_t v10 = v33[1];
      uint64_t v11 = (uint64_t)(v32 + 64);
      uint64_t v12 = a2;
      __int16 v13 = 54;
LABEL_15:
      llvm::CompareConstantExpr::CompareConstantExpr(v11, (uint64_t)v12, v13, v7, v9, v10);
      return v6;
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_9;
    case '=':
      uint64_t v34 = (char *)operator new(0x58uLL);
      int v6 = v34 + 64;
      *((_DWORD *)v34 + 21) = *((_DWORD *)v34 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = 0;
      *((void *)v34 + 3) = v34 + 64;
      *((void *)v34 + 4) = 0;
      uint64_t v35 = v34 + 32;
      *((void *)v34 + 5) = 0;
      *((void *)v34 + 6) = 0;
      *((void *)v34 + 7) = v34 + 64;
      uint64_t v36 = *((void *)this + 1);
      long long v38 = *(void **)v36;
      uint64_t v37 = *(void *)(v36 + 8);
      *((void *)v34 + 8) = *(void *)(*v38 + 24);
      *((void *)v34 + 9) = 0;
      v34[80] = 5;
      v34[81] = 0;
      *((_DWORD *)v34 + 21) = 2;
      *((_WORD *)v34 + 41) = 61;
      *(void *)uint64_t v34 = v38;
      uint64_t v41 = v38[1];
      long long v39 = v38 + 1;
      uint64_t v40 = v41;
      *((void *)v34 + 1) = v41;
      if (v41) {
        *(void *)(v40 + 16) = v34 + 8;
      }
      *((void *)v34 + 2) = v39;
      void *v39 = v34;
      if (*((void *)v34 + 4))
      {
        **((void **)v34 + 6) = *((void *)v34 + 5);
        uint64_t v42 = *((void *)v34 + 5);
        if (v42) {
          *(void *)(v42 + 16) = *((void *)v34 + 6);
        }
      }
      void *v35 = v37;
      if (v37)
      {
        uint64_t v45 = *(void *)(v37 + 8);
        long long v43 = (void *)(v37 + 8);
        uint64_t v44 = v45;
        *((void *)v34 + 5) = v45;
        if (v45) {
          *(void *)(v44 + 16) = v34 + 40;
        }
        *((void *)v34 + 6) = v43;
        void *v43 = v35;
      }
      return v6;
    case '>':
      uint64_t v46 = (char *)operator new(0x78uLL);
      uint64_t v47 = 0;
      int v6 = v46 + 96;
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0x38000000 | 3;
      do
      {
        uint64_t v48 = &v46[v47];
        *(void *)uint64_t v48 = 0;
        *((void *)v48 + 1) = 0;
        *((void *)v48 + 2) = 0;
        *((void *)v48 + 3) = v6;
        v47 += 32;
      }
      while (v47 != 96);
      uint64_t v49 = *((void *)this + 1);
      uint64_t v51 = *(void **)v49;
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v52 = *(void *)(v49 + 16);
      *((void *)v46 + 12) = *v51;
      *((void *)v46 + 13) = 0;
      v46[112] = 5;
      v46[113] = 0;
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0xC0000000 | 3;
      *((_WORD *)v46 + 57) = 62;
      if (*(void *)v46)
      {
        **((void **)v46 + 2) = *((void *)v46 + 1);
        uint64_t v53 = *((void *)v46 + 1);
        if (v53) {
          *(void *)(v53 + 16) = *((void *)v46 + 2);
        }
      }
      *(void *)uint64_t v46 = v51;
      uint64_t v56 = v51[1];
      unint64_t v54 = v51 + 1;
      uint64_t v55 = v56;
      *((void *)v46 + 1) = v56;
      if (v56) {
        *(void *)(v55 + 16) = v46 + 8;
      }
      *((void *)v46 + 2) = v54;
      void *v54 = v46;
      BOOL v57 = v46 + 32;
      if (*((void *)v46 + 4))
      {
        **((void **)v46 + 6) = *((void *)v46 + 5);
        uint64_t v58 = *((void *)v46 + 5);
        if (v58) {
          *(void *)(v58 + 16) = *((void *)v46 + 6);
        }
      }
      void *v57 = v50;
      if (v50)
      {
        uint64_t v61 = *(void *)(v50 + 8);
        uint64_t v59 = (void *)(v50 + 8);
        uint64_t v60 = v61;
        *((void *)v46 + 5) = v61;
        if (v61) {
          *(void *)(v60 + 16) = v46 + 40;
        }
        *((void *)v46 + 6) = v59;
        *uint64_t v59 = v57;
      }
      char v62 = v46 + 64;
      if (*((void *)v46 + 8))
      {
        **((void **)v46 + 10) = *((void *)v46 + 9);
        uint64_t v63 = *((void *)v46 + 9);
        if (v63) {
          *(void *)(v63 + 16) = *((void *)v46 + 10);
        }
      }
      void *v62 = v52;
      if (v52)
      {
        uint64_t v66 = *(void *)(v52 + 8);
        int v64 = (void *)(v52 + 8);
        uint64_t v65 = v66;
        *((void *)v46 + 9) = v66;
        if (v66) {
          *(void *)(v65 + 16) = v46 + 72;
        }
        *((void *)v46 + 10) = v64;
        void *v64 = v62;
      }
      return v6;
    case '?':
      uint64_t v67 = (char *)operator new(0x80uLL);
      int v6 = v67 + 64;
      *((_DWORD *)v67 + 21) = *((_DWORD *)v67 + 21) & 0x38000000 | 2;
      *(void *)uint64_t v67 = 0;
      *((void *)v67 + 1) = 0;
      *((void *)v67 + 2) = 0;
      *((void *)v67 + 3) = v67 + 64;
      *((void *)v67 + 4) = 0;
      uint64_t v68 = v67 + 32;
      *((void *)v67 + 5) = 0;
      *((void *)v67 + 6) = 0;
      *((void *)v67 + 7) = v67 + 64;
      uint64_t v69 = (void *)*((void *)this + 1);
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      v73 = (int *)*((void *)this + 3);
      char v72 = (llvm::Type *)*((void *)this + 4);
      llvm::VectorType::get(*(uint64_t ***)(*(void *)*v69 + 24), (llvm::Type *)(v72 | ((unint64_t)(*(unsigned char *)(*(void *)*v69 + 8) == 19) << 32)));
      *((void *)v67 + 8) = v74;
      *((void *)v67 + 9) = 0;
      unsigned int v75 = *((_DWORD *)v67 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v67 + 20) = 4128773;
      *((_DWORD *)v67 + 21) = v75;
      *((void *)v67 + 11) = v67 + 104;
      *((void *)v67 + 12) = 0x400000000;
      if (*(void *)v67)
      {
        **((void **)v67 + 2) = *((void *)v67 + 1);
        uint64_t v76 = *((void *)v67 + 1);
        if (v76) {
          *(void *)(v76 + 16) = *((void *)v67 + 2);
        }
      }
      *(void *)uint64_t v67 = v71;
      uint64_t v79 = *(void *)(v71 + 8);
      int v78 = (void *)(v71 + 8);
      uint64_t v77 = v79;
      *((void *)v67 + 1) = v79;
      if (v79) {
        *(void *)(v77 + 16) = v67 + 8;
      }
      *((void *)v67 + 2) = v78;
      void *v78 = v67;
      if (*((void *)v67 + 4))
      {
        **((void **)v67 + 6) = *((void *)v67 + 5);
        uint64_t v80 = *((void *)v67 + 5);
        if (v80) {
          *(void *)(v80 + 16) = *((void *)v67 + 6);
        }
      }
      void *v68 = v70;
      if (v70)
      {
        uint64_t v83 = *(void *)(v70 + 8);
        v82 = (void *)(v70 + 8);
        uint64_t v81 = v83;
        *((void *)v67 + 5) = v83;
        if (v83) {
          *(void *)(v81 + 16) = v67 + 40;
        }
        *((void *)v67 + 6) = v82;
        void *v82 = v68;
      }
      *((_DWORD *)v67 + 24) = 0;
      llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)v67 + 22, v73, &v73[(void)v72]);
      *((void *)v67 + 15) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v73, v72, *((unsigned char **)v67 + 8), v84);
      return v6;
    default:
      if (v4 == 34)
      {
        uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)*((void *)this + 5);
        BOOL v15 = (void *)*((void *)this + 1);
        uint64_t v16 = *((void *)this + 2);
        unint64_t v17 = v15 + 1;
        uint64_t v18 = *v15;
        char v19 = *((unsigned char *)this + 1);
        int v6 = llvm::User::operator new((llvm::User *)0x28, v16);
        *int v6 = a2;
        v6[1] = 0;
        int v21 = *((_DWORD *)v6 + 5) & 0xC0000000 | v16 & 0x7FFFFFF;
        *((_DWORD *)v6 + 4) = 2228229;
        *((_DWORD *)v6 + 5) = v21;
        v6[3] = TypeAtIndex;
        if (v16 == 1)
        {
          unsigned int v25 = 1;
        }
        else
        {
          unsigned int v22 = (llvm::Type **)(v15 + 2);
          uint64_t v23 = 8 * v16 - 16;
          do
          {
            if (!v23) {
              break;
            }
            uint64_t v24 = *v22++;
            uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v24, v20);
            v23 -= 8;
          }
          while (TypeAtIndex);
          unsigned int v25 = *((_DWORD *)v6 + 5) & 0x7FFFFFF;
        }
        void v6[4] = TypeAtIndex;
        uint64_t v99 = -(uint64_t)v25;
        __n128 v100 = &v6[-4 * v25];
        if (*v100)
        {
          unint64_t v101 = &v6[4 * v99];
          unsigned int v103 = (void *)v101[2];
          unsigned int v102 = v101 + 2;
          void *v103 = *(v102 - 1);
          uint64_t v104 = *(v102 - 1);
          if (v104) {
            *(void *)(v104 + 16) = *v102;
          }
        }
        void *v100 = v18;
        if (v18)
        {
          uint64_t v107 = *(void *)(v18 + 8);
          unsigned int v106 = (void *)(v18 + 8);
          uint64_t v105 = v107;
          unint64_t v108 = &v6[4 * v99];
          v108[1] = v107;
          if (v107) {
            *(void *)(v105 + 16) = v108 + 1;
          }
          v108[2] = v106;
          *unsigned int v106 = v100;
        }
        int v109 = *((_DWORD *)v6 + 5);
        if ((v109 & 0x40000000) != 0)
        {
          v110 = (void *)*(v6 - 1);
          if (v16 == 1)
          {
LABEL_90:
            *((unsigned char *)v6 + 17) = *((unsigned char *)v6 + 17) & 1 | (2 * v19);
            return v6;
          }
        }
        else
        {
          v110 = &v6[-4 * (v109 & 0x7FFFFFF)];
          if (v16 == 1) {
            goto LABEL_90;
          }
        }
        uint64_t v111 = (v16 - 1);
        v112 = v110 + 4;
        do
        {
          uint64_t v113 = *v17;
          if (*v112)
          {
            *(void *)v112[2] = v112[1];
            uint64_t v114 = v112[1];
            if (v114) {
              *(void *)(v114 + 16) = v112[2];
            }
          }
          void *v112 = v113;
          if (v113)
          {
            uint64_t v117 = *(void *)(v113 + 8);
            int v115 = (void *)(v113 + 8);
            uint64_t v116 = v117;
            v112[1] = v117;
            if (v117) {
              *(void *)(v116 + 16) = v112 + 1;
            }
            v112[2] = v115;
            void *v115 = v112;
          }
          ++v17;
          v112 += 4;
          --v111;
        }
        while (v111);
        goto LABEL_90;
      }
LABEL_9:
      if ((v4 - 38) > 0xC)
      {
        v85 = (char *)operator new(0x58uLL);
        int v6 = v85 + 64;
        *((_DWORD *)v85 + 21) = *((_DWORD *)v85 + 21) & 0x38000000 | 2;
        *(void *)v85 = 0;
        *((void *)v85 + 1) = 0;
        *((void *)v85 + 2) = 0;
        *((void *)v85 + 3) = v85 + 64;
        *((void *)v85 + 4) = 0;
        v86 = v85 + 32;
        *((void *)v85 + 5) = 0;
        *((void *)v85 + 6) = 0;
        *((void *)v85 + 7) = v85 + 64;
        __int16 v87 = *(unsigned __int8 *)this;
        uint64_t v88 = *((void *)this + 1);
        uint64_t v90 = *(void **)v88;
        uint64_t v89 = *(void *)(v88 + 8);
        char v91 = *((unsigned char *)this + 1);
        *((void *)v85 + 8) = *v90;
        *((void *)v85 + 9) = 0;
        v85[80] = 5;
        v85[81] = 0;
        *((_DWORD *)v85 + 21) = 2;
        *((_WORD *)v85 + 41) = v87;
        *(void *)v85 = v90;
        uint64_t v94 = v90[1];
        uint64_t v92 = v90 + 1;
        uint64_t v93 = v94;
        *((void *)v85 + 1) = v94;
        if (v94) {
          *(void *)(v93 + 16) = v85 + 8;
        }
        *((void *)v85 + 2) = v92;
        *uint64_t v92 = v85;
        if (*((void *)v85 + 4))
        {
          **((void **)v85 + 6) = *((void *)v85 + 5);
          uint64_t v95 = *((void *)v85 + 5);
          if (v95) {
            *(void *)(v95 + 16) = *((void *)v85 + 6);
          }
        }
        void *v86 = v89;
        if (v89)
        {
          uint64_t v98 = *(void *)(v89 + 8);
          unsigned int v96 = (void *)(v89 + 8);
          uint64_t v97 = v98;
          *((void *)v85 + 5) = v98;
          if (v98) {
            *(void *)(v97 + 16) = v85 + 40;
          }
          *((void *)v85 + 6) = v96;
          *unsigned int v96 = v86;
        }
        v85[81] = v85[81] & 1 | (2 * v91);
      }
      else
      {
        int v26 = (char *)operator new(0x38uLL);
        int v6 = v26 + 32;
        *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
        *(void *)int v26 = 0;
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = 0;
        *((void *)v26 + 3) = v26 + 32;
        __int16 v27 = *(unsigned __int8 *)this;
        uint64_t v28 = **((void **)this + 1);
        *((void *)v26 + 4) = a2;
        *((void *)v26 + 5) = 0;
        v26[48] = 5;
        v26[49] = 0;
        *((_DWORD *)v26 + 13) = 1;
        *((_WORD *)v26 + 25) = v27;
        *(void *)int v26 = v28;
        if (v28)
        {
          uint64_t v31 = *(void *)(v28 + 8);
          uint64_t v29 = (void *)(v28 + 8);
          uint64_t v30 = v31;
          *((void *)v26 + 1) = v31;
          if (v31) {
            *(void *)(v30 + 16) = v26 + 8;
          }
          *((void *)v26 + 2) = v29;
          *uint64_t v29 = v26;
        }
      }
      return v6;
  }
}

uint64_t llvm::CompareConstantExpr::CompareConstantExpr(uint64_t result, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 5;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | 2;
  *(_WORD *)(result + 18) = a3;
  *(_WORD *)(result + 24) = a4;
  int v6 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v7 = *(void *)(result - 56);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(result - 48);
    }
  }
  *int v6 = a5;
  if (a5)
  {
    uint64_t v10 = *(void *)(a5 + 8);
    unsigned int v8 = (void *)(a5 + 8);
    uint64_t v9 = v10;
    *(void *)(result - 56) = v10;
    if (v10) {
      *(void *)(v9 + 16) = result - 56;
    }
    *(void *)(result - 48) = v8;
    void *v8 = v6;
  }
  uint64_t v11 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v12 = *(void *)(result - 24);
    if (v12) {
      *(void *)(v12 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v11 = a6;
  if (a6)
  {
    uint64_t v15 = *(void *)(a6 + 8);
    __int16 v13 = (void *)(a6 + 8);
    uint64_t v14 = v15;
    *(void *)(result - 24) = v15;
    if (v15) {
      *(void *)(v14 + 16) = result - 24;
    }
    *(void *)(result - 16) = v13;
    *__int16 v13 = v11;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, (uint64_t)a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if (v3)
    {
      uint64_t v15 = &v4[v3];
      uint64_t v16 = v4;
      do
      {
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v17 = *(uint64_t **)a1;
          int v18 = *(_DWORD *)(a1 + 16);
          int HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(*v16, v10, v11, v12);
          int v20 = v18 - 1;
          uint64_t v21 = *v16;
          unsigned int v22 = HashValue & (v18 - 1);
          uint64_t v23 = &v17[v22];
          uint64_t v24 = *v23;
          if (*v16 != *v23)
          {
            unsigned int v25 = 0;
            int v26 = 1;
            while (v24 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == -8192;
              }
              if (v27) {
                unsigned int v25 = v23;
              }
              unsigned int v28 = v22 + v26++;
              unsigned int v22 = v28 & v20;
              uint64_t v23 = &v17[v28 & v20];
              uint64_t v24 = *v23;
              if (v21 == *v23) {
                goto LABEL_12;
              }
            }
            if (v25) {
              uint64_t v23 = v25;
            }
          }
LABEL_12:
          *uint64_t v23 = v21;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v29 = *(unsigned int *)(a1 + 16);
  if (v29)
  {
    uint64_t v30 = 8 * v29;
    do
    {
      *result++ = -4096;
      v30 -= 8;
    }
    while (v30);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  v32[32] = *MEMORY[0x263EF8340];
  uint64_t v30 = v32;
  uint64_t v31 = 0x2000000000;
  int v5 = *(unsigned __int16 *)(a1 + 18);
  char v6 = *(_WORD *)(a1 + 18);
  if ((v5 - 53) > 1)
  {
    if (v5 == 34)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      __int16 v10 = 0;
      uint64_t v9 = *(void *)(a1 + 24);
    }
    else if (v5 == 63)
    {
      __int16 v10 = 0;
      uint64_t v9 = 0;
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = *(unsigned int *)(a1 + 32);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      __int16 v10 = 0;
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    __int16 v10 = *(_WORD *)(a1 + 24);
  }
  uint64_t v11 = *(void *)a1;
  int v12 = *(unsigned __int8 *)(a1 + 17) >> 1;
  int v13 = *(_DWORD *)(a1 + 20);
  uint64_t v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFF) != 0)
  {
    __int16 v15 = v10;
    uint64_t v16 = a1;
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, *(void *)(v16 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
      v16 += 32;
      --v14;
    }
    while (v14);
    unint64_t v17 = v30;
    uint64_t v18 = v31;
    __int16 v10 = v15;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v17 = v32;
  }
  uint64_t v21 = v11;
  char v22 = v6;
  char v23 = v12;
  __int16 v24 = v10;
  unsigned int v25 = v17;
  uint64_t v26 = v18;
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  uint64_t v29 = v9;
  unint64_t HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(&v21, a2, a3, a4);
  if (v30 != v32) {
    free(v30);
  }
  return HashValue;
}

unint64_t **llvm::StringMap<std::unique_ptr<llvm::ConstantDataSequential>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<llvm::ConstantDataSequential>>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  int i = (unint64_t **)(*(void *)a1 + 8 * v8);
  __int16 v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      uint64_t v11 = i[1];
      ++i;
      __int16 v10 = v11;
    }
    return i;
  }
  int v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  int v13 = v12;
  uint64_t v14 = (char *)(v12 + 2);
  if (a3) {
    memcpy(v12 + 2, a2, a3);
  }
  v14[a3] = 0;
  unint64_t v15 = *a4;
  *a4 = 0;
  *int v13 = a3;
  v13[1] = v15;
  llvm::Type *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (int i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

void *llvm::SmallVectorImpl<unsigned short>::assign(void *result, unint64_t a2, __int16 a3)
{
  int v5 = (_WORD **)result;
  if (result[2] >= a2)
  {
    uint64_t v9 = (_WORD *)*result;
    uint64_t v8 = result + 1;
    unint64_t v10 = result[1];
    if (v10 >= a2) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = result[1];
    }
    if (v11)
    {
      int v12 = (_WORD *)*result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v10 - a2;
    if (v10 < a2)
    {
      uint64_t v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[1] = 0;
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 2);
    char v6 = *v5;
    unint64_t v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    uint64_t v8 = (unint64_t *)(v5 + 1);
  }
  unint64_t *v8 = a2;
  return result;
}

char *LLVMCreateMemoryBufferWithMemoryRange(uint64_t a1, uint64_t a2, char *__s)
{
  if (__s) {
    size_t v6 = strlen(__s);
  }
  else {
    size_t v6 = 0;
  }
  __int16 v9 = 261;
  v8[0] = __s;
  v8[1] = v6;
  unint64_t v10 = v8;
  uint64_t result = operator new(24, (uint64_t *)&v10);
  *(void *)uint64_t result = &unk_270DBCE88;
  *((void *)result + 1) = a1;
  *((void *)result + 2) = a1 + a2;
  return result;
}

uint64_t LLVMDisposeMemoryBuffer(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

llvm::StructLayout *llvm::StructLayout::StructLayout(llvm::StructLayout *this, llvm::StructType *a2, const llvm::DataLayout *a3)
{
  *((unsigned char *)this + 8) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 9) &= ~1u;
  uint64_t v4 = *((_DWORD *)a2 + 3) & 0x7FFFFFFF;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0x80000000 | v4;
  if (v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v4;
    do
    {
      unint64_t v10 = *(llvm::Type **)(*((void *)a2 + 2) + v7);
      if ((*((unsigned char *)a2 + 9) & 2) != 0)
      {
        unsigned __int8 Alignment = 0;
      }
      else
      {
        unsigned __int8 Alignment = llvm::DataLayout::getAlignment(a3, *(llvm::Type **)(*((void *)a2 + 2) + v7), 1);
        uint64_t v8 = *(void *)this;
      }
      unsigned __int8 v12 = Alignment;
      if ((v8 & ~(-1 << Alignment)) != 0)
      {
        *((unsigned char *)this + 9) |= 1u;
        uint64_t v8 = (v8 + (1 << Alignment) - 1) & -(1 << Alignment);
        *(void *)this = v8;
      }
      if (Alignment <= *((unsigned __int8 *)this + 8)) {
        unsigned __int8 v12 = *((unsigned char *)this + 8);
      }
      *((unsigned char *)this + 8) = v12;
      *(void *)((char *)this + v7 + 16) = v8;
      uint64_t v8 = *(void *)this + llvm::DataLayout::getTypeAllocSize(a3, v10);
      *(void *)this = v8;
      v7 += 8;
    }
    while (v9 != v7);
    char v13 = *((unsigned char *)this + 8);
  }
  else
  {
    uint64_t v8 = 0;
    char v13 = 0;
  }
  if ((v8 & ~(-1 << v13)) != 0)
  {
    *((unsigned char *)this + 9) |= 1u;
    *(void *)this = (v8 + (1 << v13) - 1) & -(1 << v13);
  }
  return this;
}

void llvm::DataLayout::reset(uint64_t a1, void *a2, unint64_t a3)
{
  llvm::DataLayout::clear(a1);
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if (*(unsigned char *)(a1 + 9)) {
    *(unsigned char *)(a1 + 9) = 0;
  }
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(unsigned char *)(a1 + 21)) {
    *(unsigned char *)(a1 + 21) = 0;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  size_t v6 = &DefaultAlignments;
  *(_WORD *)(a1 + 212) = 768;
  do
  {
    llvm::DataLayout::setAlignment((unsigned char *)a1, *v6, *((unsigned char *)v6 + 8), *((unsigned char *)v6 + 9), v6[1], (const llvm::Twine *)&v11);
    if (v11)
    {
      uint64_t v10 = v11;
      uint64_t v11 = 0;
      uint64_t v7 = (void ***)&v10;
      goto LABEL_12;
    }
    v6 += 3;
  }
  while (v6 != (int *)&unk_26B41F2CC);
  llvm::DataLayout::setPointerAlignmentInBits((unsigned int *)a1, 0, 3u, 3u, 64, 64, (const llvm::Twine *)&v11);
  if (v11)
  {
    uint64_t v9 = v11;
    uint64_t v11 = 0;
    uint64_t v7 = (void ***)&v9;
    goto LABEL_12;
  }
  llvm::DataLayout::parseSpecifier((unsigned int *)a1, a2, a3, (const llvm::Twine *)&v11);
  if (v11)
  {
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    uint64_t v7 = (void ***)&v8;
LABEL_12:
    llvm::report_fatal_error(v7);
  }
}

uint64_t llvm::DataLayout::clear(uint64_t this)
{
  uint64_t v1 = this;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 168) = 0;
  *(_DWORD *)(this + 248) = 0;
  int v2 = *(uint64_t **)(this + 384);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*((_DWORD *)v2 + 2))
    {
      uint64_t v4 = *((unsigned int *)v2 + 4);
      uint64_t v5 = *v2;
      if (v4)
      {
        uint64_t v6 = 0;
        while ((*(void *)(v3 + v6) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 16;
          if (16 * v4 == v6) {
            goto LABEL_15;
          }
        }
        uint64_t v5 = v3 + v6;
      }
      uint64_t v7 = v3 + 16 * v4;
      if (v5 != v7)
      {
LABEL_10:
        free(*(void **)(v5 + 8));
        while (1)
        {
          v5 += 16;
          if (v5 == v7) {
            break;
          }
          if ((*(void *)v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v5 != v7) {
              goto LABEL_10;
            }
            break;
          }
        }
        uint64_t v3 = *v2;
      }
    }
LABEL_15:
    MEMORY[0x263E500A0](v3, 8);
    this = MEMORY[0x263E500B0](v2, 0x1020C405AF6BDC9);
  }
  *(void *)(v1 + 384) = 0;
  return this;
}

unsigned char *llvm::DataLayout::setAlignment@<X0>(unsigned char *result@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, unsigned int a5@<W4>, const llvm::Twine *a6@<X8>)
{
  if (HIBYTE(a5))
  {
    uint64_t v7 = "Invalid bit width, must be a 24-bit integer";
LABEL_5:
    char v23 = v7;
    __int16 v24 = 259;
    reportError(a6, (llvm::Twine *)&v23);
  }
  if (a4 < a3)
  {
    uint64_t v7 = "Preferred alignment cannot be less than the ABI alignment";
    goto LABEL_5;
  }
  if (a2 > 104)
  {
    uint64_t v9 = result + 160;
    if (a2 != 118) {
      uint64_t v9 = 0;
    }
    if (a2 == 105) {
      uint64_t v8 = (uint64_t)(result + 64);
    }
    else {
      uint64_t v8 = (uint64_t)v9;
    }
  }
  else
  {
    if (a2 == 97)
    {
      result[212] = a3;
      result[213] = a4;
      goto LABEL_34;
    }
    if (a2 == 102) {
      uint64_t v8 = (uint64_t)(result + 112);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  uint64_t v10 = *(unsigned char **)v8;
  uint64_t v11 = *(unsigned int *)(v8 + 8);
  if (!v11) {
    goto LABEL_25;
  }
  unsigned __int8 v12 = *(unsigned char **)v8;
  unint64_t v13 = *(unsigned int *)(v8 + 8);
  do
  {
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &v12[8 * (v13 >> 1)];
    unsigned int v16 = *v15;
    uint64_t result = v15 + 2;
    v13 += ~(v13 >> 1);
    if (v16 < a5) {
      unsigned __int8 v12 = result;
    }
    else {
      unint64_t v13 = v14;
    }
  }
  while (v13);
  if (v12 == &v10[8 * v11])
  {
LABEL_25:
    unint64_t v17 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | a5;
    if (v11 >= *(_DWORD *)(v8 + 12))
    {
      uint64_t result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v11 + 1, 8);
      uint64_t v11 = *(unsigned int *)(v8 + 8);
      uint64_t v10 = *(unsigned char **)v8;
    }
    *(void *)&v10[8 * v11] = v17;
    ++*(_DWORD *)(v8 + 8);
  }
  else if (*(_DWORD *)v12 == a5)
  {
    void v12[4] = a3;
    v12[5] = a4;
  }
  else
  {
    unint64_t v18 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | a5;
    uint64_t v19 = (v12 - v10) >> 3;
    if (v11 >= *(_DWORD *)(v8 + 12))
    {
      uint64_t result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v11 + 1, 8);
      uint64_t v10 = *(unsigned char **)v8;
      uint64_t v11 = *(unsigned int *)(v8 + 8);
    }
    int v20 = &v10[8 * v19];
    *(void *)&v10[8 * v11] = *(void *)&v10[8 * v11 - 8];
    uint64_t v21 = *(unsigned int *)(v8 + 8);
    uint64_t v22 = *(void *)v8 + 8 * v21;
    if ((_WORD *)(v22 - 8) != v20)
    {
      uint64_t result = memmove(v20 + 4, v20, v22 - 8 - (void)v20 - 2);
      LODWORD(v21) = *(_DWORD *)(v8 + 8);
    }
    *(_DWORD *)(v8 + 8) = v21 + 1;
    v20[2] = WORD2(v18);
    *(_DWORD *)int v20 = v18;
  }
LABEL_34:
  *(void *)a6 = 0;
  return result;
}

unsigned int *llvm::DataLayout::setPointerAlignmentInBits@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const llvm::Twine *a7@<X8>)
{
  if (a4 < a3)
  {
    uint64_t v28 = "Preferred alignment cannot be less than the ABI alignment";
    __int16 v29 = 259;
    reportError(a7, (llvm::Twine *)&v28);
  }
  uint64_t v11 = *((void *)a1 + 30);
  uint64_t result = a1 + 60;
  uint64_t v10 = v11;
  uint64_t v12 = result[2];
  uint64_t v13 = v11 + 16 * v12;
  if (v12)
  {
    uint64_t v14 = v10;
    unint64_t v15 = result[2];
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = v14 + 16 * (v15 >> 1);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
      uint64_t v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 < a2) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
    uint64_t v20 = v13;
    if (v14 != v13)
    {
      if (*(_DWORD *)(v14 + 8) == a2)
      {
        *(unsigned char *)uint64_t v14 = a3;
        *(unsigned char *)(v14 + 1) = a4;
        *(_DWORD *)(v14 + 4) = a5;
        *(_DWORD *)(v14 + 12) = a6;
        goto LABEL_23;
      }
      uint64_t v20 = v14;
    }
  }
  else
  {
    uint64_t v20 = v13;
  }
  unint64_t v21 = ((unint64_t)a4 << 8) | (a5 << 32) | a3;
  unint64_t v22 = a2 | (unint64_t)(a6 << 32);
  if (v13 == v20)
  {
    if (v12 >= a1[63])
    {
      uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, a1 + 64, v12 + 1, 16);
      uint64_t v12 = a1[62];
      uint64_t v10 = *((void *)a1 + 30);
    }
    uint64_t v27 = (unint64_t *)(v10 + 16 * v12);
    *uint64_t v27 = v21;
    v27[1] = v22;
    ++a1[62];
  }
  else
  {
    uint64_t v23 = (v20 - v10) >> 4;
    if (v12 >= a1[63])
    {
      uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, a1 + 64, v12 + 1, 16);
      uint64_t v10 = *((void *)a1 + 30);
      uint64_t v12 = a1[62];
    }
    __int16 v24 = (unint64_t *)(v10 + 16 * v23);
    *(_OWORD *)(v10 + 16 * v12) = *(_OWORD *)(v10 + 16 * v12 - 16);
    uint64_t v25 = a1[62];
    uint64_t v26 = *((void *)a1 + 30) + 16 * v25 - 16;
    if ((unint64_t *)v26 != v24)
    {
      uint64_t result = (unsigned int *)memmove(v24 + 2, v24, v26 - (void)v24);
      LODWORD(v25) = a1[62];
    }
    a1[62] = v25 + 1;
    unint64_t *v24 = v21;
    v24[1] = v22;
  }
LABEL_23:
  *(void *)a7 = 0;
  return result;
}

void llvm::DataLayout::parseSpecifier(unsigned int *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, const llvm::Twine *a4@<X8>)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = a3;
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v77 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v77) = a3;
  p_dst = &__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, v5);
  *((unsigned char *)p_dst + v5) = 0;
  uint64_t v11 = (void **)(a1 + 54);
  if (*((char *)a1 + 239) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = __dst;
  *((void *)a1 + 29) = v77;
  if (v5)
  {
    uint64_t v12 = a1 + 8;
    uint64_t v13 = (uint64_t)(a1 + 3);
    uint64_t v14 = (uint64_t)(a1 + 1);
    uint64_t v15 = (uint64_t)(a1 + 4);
    unint64_t v16 = a1 + 98;
    long long v17 = 0uLL;
    do
    {
      long long v79 = v17;
      long long v80 = v17;
      split(a4, a2, v5, 45, (uint64_t)&v79);
      if (*(void *)a4) {
        return;
      }
      size_t v5 = *((void *)&v80 + 1);
      a2 = (void *)v80;
      split(a4, (void *)v79, *((uint64_t *)&v79 + 1), 58, (uint64_t)&v79);
      if (*(void *)a4) {
        return;
      }
      uint64_t v18 = *((void *)&v79 + 1);
      if (*((void *)&v79 + 1) == 2)
      {
        uint64_t v19 = (const char *)v79;
        if (*(_WORD *)v79 == 26990)
        {
          uint64_t v20 = *((void *)&v80 + 1);
          while (1)
          {
            split(a4, (void *)v80, v20, 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            LODWORD(v73) = 0;
            getInt<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), &v73);
            if (*(void *)a4) {
              return;
            }
            if (!v73) {
              break;
            }
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v16, v73);
            uint64_t v20 = *((void *)&v80 + 1);
            if (!*((void *)&v80 + 1)) {
              goto LABEL_142;
            }
          }
          uint64_t v66 = "Address space 0 can never be non-integral";
LABEL_168:
          *(void *)&long long __dst = v66;
          __int16 v78 = 259;
          reportError(a4, (llvm::Twine *)&__dst);
        }
      }
      else
      {
        uint64_t v19 = (const char *)v79;
      }
      int v21 = *v19;
      uint64_t v22 = *((void *)&v79 + 1) != 0;
      if (*((void *)&v79 + 1)) {
        uint64_t v23 = v19 + 1;
      }
      else {
        uint64_t v23 = v19;
      }
      uint64_t v24 = *((void *)&v79 + 1) - v22;
      *(void *)&long long v79 = v23;
      *((void *)&v79 + 1) -= v22;
      if (v21 <= 96)
      {
        switch(v21)
        {
          case 'A':
            uint64_t v28 = a4;
            uint64_t v29 = v14;
            goto LABEL_111;
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_158;
          case 'E':
            *(unsigned char *)a1 = 1;
            break;
          case 'F':
            int v45 = *v23;
            if (v45 == 105)
            {
              int v46 = 0;
            }
            else
            {
              if (v45 != 110)
              {
                uint64_t v66 = "Unknown function pointer alignment type in datalayout string";
                goto LABEL_168;
              }
              int v46 = 1;
            }
            a1[6] = v46;
            BOOL v59 = v18 == v22;
            BOOL v60 = v18 != v22;
            if (!v59) {
              ++v23;
            }
            *(void *)&long long v79 = v23;
            *((void *)&v79 + 1) = v24 - v60;
            unint64_t v73 = 0;
            getIntInBytes<unsigned long long>(a4, v23, v24 - v60, &v73);
            if (*(void *)a4) {
              return;
            }
            __int16 v61 = v73;
            if (v73)
            {
              if ((v73 & (v73 - 1)) != 0)
              {
LABEL_156:
                uint64_t v66 = "Alignment is neither 0 nor a power of 2";
                goto LABEL_168;
              }
              __int16 v62 = __clz(v73) ^ 0x3F;
              __int16 v61 = 1;
            }
            else
            {
              __int16 v62 = 0;
            }
            *((_WORD *)a1 + 10) = v62 | (v61 << 8);
            break;
          case 'G':
            uint64_t v28 = a4;
            uint64_t v29 = v15;
            goto LABEL_111;
          default:
            if (v21 == 80)
            {
              uint64_t v28 = a4;
              uint64_t v29 = v13;
LABEL_111:
              getAddrSpace(v28, v23, v24, v29);
              if (*(void *)a4) {
                return;
              }
            }
            else
            {
              if (v21 != 83)
              {
LABEL_158:
                uint64_t v66 = "Unknown specifier in datalayout string";
                goto LABEL_168;
              }
              unint64_t v73 = 0;
              getIntInBytes<unsigned long long>(a4, v23, v24, &v73);
              if (*(void *)a4) {
                return;
              }
              __int16 v30 = v73;
              if (v73)
              {
                if ((v73 & (v73 - 1)) != 0) {
                  goto LABEL_156;
                }
                __int16 v31 = __clz(v73) ^ 0x3F;
                __int16 v30 = 1;
              }
              else
              {
                __int16 v31 = 0;
              }
              *((_WORD *)a1 + 4) = v31 | (v30 << 8);
            }
            break;
        }
      }
      else
      {
        switch(v21)
        {
          case 'a':
          case 'f':
          case 'i':
          case 'v':
            uint64_t v67 = a1;
            uint64_t v69 = v13;
            uint64_t v25 = v12;
            LODWORD(v73) = 0;
            if (v18 == v22)
            {
              unsigned int v26 = 0;
              BOOL v27 = v21 == 97;
            }
            else
            {
              getInt<unsigned int>(a4, v23, v24, &v73);
              if (*(void *)a4) {
                return;
              }
              unsigned int v26 = v73;
              BOOL v27 = v21 == 97;
              if (v21 == 97 && v73)
              {
                uint64_t v66 = "Sized aggregate specification in datalayout string";
                goto LABEL_168;
              }
            }
            if (!*((void *)&v80 + 1))
            {
              uint64_t v66 = "Missing alignment specification in datalayout string";
              goto LABEL_168;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            HIDWORD(v75) = 0;
            getIntInBytes<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v75 + 4));
            if (*(void *)a4) {
              return;
            }
            uint64_t v71 = v16;
            uint64_t v32 = v14;
            unint64_t v33 = HIDWORD(v75);
            if (HIDWORD(v75)) {
              char v34 = 1;
            }
            else {
              char v34 = v27;
            }
            if ((v34 & 1) == 0)
            {
              uint64_t v66 = "ABI alignment specification must be >0 for non-aggregate types";
              goto LABEL_168;
            }
            if (HIDWORD(v75) >= 0x10000)
            {
              uint64_t v66 = "Invalid ABI alignment, must be a 16bit integer";
              goto LABEL_168;
            }
            uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
            v35.i16[0] = vaddlv_u8(v35);
            unint64_t v36 = v35.u32[0];
            if (HIDWORD(v75) && v35.u32[0] >= 2uLL)
            {
              uint64_t v66 = "Invalid ABI alignment, must be a power of 2";
              goto LABEL_168;
            }
            unsigned int v37 = v26;
            if (v21 == 105 && v26 == 8 && HIDWORD(v75) != 1)
            {
              uint64_t v66 = "Invalid ABI alignment, i8 must be naturally aligned";
              goto LABEL_168;
            }
            LODWORD(v75) = HIDWORD(v75);
            int v38 = HIDWORD(v75);
            unint64_t v39 = HIDWORD(v75);
            a1 = v67;
            if (!*((void *)&v80 + 1)) {
              goto LABEL_66;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            getIntInBytes<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), &v75);
            if (*(void *)a4) {
              return;
            }
            int v38 = v75;
            if (WORD1(v75))
            {
              uint64_t v66 = "Invalid preferred alignment, must be a 16bit integer";
              goto LABEL_168;
            }
            uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
            v40.i16[0] = vaddlv_u8(v40);
            unint64_t v36 = v40.u32[0];
            unint64_t v39 = v75;
            unsigned int v37 = v26;
LABEL_66:
            if (v38 && v36 >= 2)
            {
              uint64_t v66 = "Invalid preferred alignment, must be a power of 2";
              goto LABEL_168;
            }
            unsigned __int8 v41 = 63 - __clz(v33);
            unsigned __int8 v42 = 63 - __clz(v39);
            if (v33) {
              unsigned __int8 v43 = v41;
            }
            else {
              unsigned __int8 v43 = 0;
            }
            if (v38) {
              unsigned __int8 v44 = v42;
            }
            else {
              unsigned __int8 v44 = 0;
            }
            llvm::DataLayout::setAlignment(v67, v21, v43, v44, v37, a4);
            if (*(void *)a4) {
              return;
            }
            uint64_t v12 = v25;
            uint64_t v13 = v69;
            uint64_t v14 = v32;
            unint64_t v16 = v71;
            break;
          case 'e':
            *(unsigned char *)a1 = 0;
            break;
          case 'm':
            if (v18 != v22)
            {
              uint64_t v66 = "Unexpected trailing characters after mangling specifier in datalayout string";
              goto LABEL_168;
            }
            if (*((void *)&v80 + 1) != 1)
            {
              if (*((void *)&v80 + 1)) {
                uint64_t v66 = "Unknown mangling specifier in datalayout string";
              }
              else {
                uint64_t v66 = "Expected mangling specifier in datalayout string";
              }
              goto LABEL_168;
            }
            int v47 = *(char *)v80;
            if (v47 <= 108)
            {
              switch(v47)
              {
                case 'a':
                  int v48 = 7;
                  break;
                case 'e':
                  int v48 = 1;
                  break;
                case 'l':
                  int v48 = 5;
                  break;
                default:
                  goto LABEL_167;
              }
            }
            else if (v47 > 118)
            {
              if (v47 == 119)
              {
                int v48 = 3;
              }
              else
              {
                if (v47 != 120)
                {
LABEL_167:
                  uint64_t v66 = "Unknown mangling in datalayout string";
                  goto LABEL_168;
                }
                int v48 = 4;
              }
            }
            else if (v47 == 109)
            {
              int v48 = 6;
            }
            else
            {
              if (v47 != 111) {
                goto LABEL_167;
              }
              int v48 = 2;
            }
            a1[7] = v48;
            break;
          case 'n':
LABEL_33:
            LODWORD(v73) = 0;
            getInt<unsigned int>(a4, v23, v24, &v73);
            if (*(void *)a4) {
              return;
            }
            if (!v73)
            {
              uint64_t v66 = "Zero width native integer type in datalayout string";
              goto LABEL_168;
            }
            llvm::SmallVectorTemplateBase<char,true>::push_back(v12, v73);
            if (!*((void *)&v80 + 1)) {
              break;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (!*(void *)a4)
            {
              uint64_t v24 = *((void *)&v79 + 1);
              uint64_t v23 = (const char *)v79;
              goto LABEL_33;
            }
            return;
          case 'p':
            uint64_t v49 = v13;
            uint64_t v70 = v14;
            unsigned int v50 = 0;
            LODWORD(v73) = 0;
            if (v18 == v22) {
              goto LABEL_92;
            }
            getInt<unsigned int>(a4, v23, v24, &v73);
            if (*(void *)a4) {
              return;
            }
            unsigned int v50 = v73;
            if (BYTE3(v73))
            {
              uint64_t v66 = "Invalid address space, must be a 24-bit integer";
              goto LABEL_168;
            }
LABEL_92:
            if (!*((void *)&v80 + 1))
            {
              uint64_t v66 = "Missing size specification for pointer in datalayout string";
              goto LABEL_168;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            uint64_t v72 = v15;
            HIDWORD(v75) = 0;
            getInt<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v75 + 4));
            if (*(void *)a4) {
              return;
            }
            uint64_t v51 = HIDWORD(v75);
            if (!HIDWORD(v75))
            {
              uint64_t v66 = "Invalid pointer size of 0 bytes";
              goto LABEL_168;
            }
            if (!*((void *)&v80 + 1))
            {
              uint64_t v66 = "Missing alignment specification for pointer in datalayout string";
              goto LABEL_168;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            LODWORD(v75) = 0;
            getIntInBytes<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), &v75);
            if (*(void *)a4) {
              return;
            }
            unint64_t v53 = v75;
            if (!v75
              || (v52.i32[0] = v75, uint8x8_t v54 = (uint8x8_t)vcnt_s8(v52), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] >= 2uLL))
            {
              uint64_t v66 = "Pointer ABI alignment must be a power of 2";
              goto LABEL_168;
            }
            uint64_t v68 = v12;
            uint64_t v55 = a1;
            unint64_t v74 = __PAIR64__(v51, v75);
            uint64_t v56 = v51;
            unsigned int v57 = v75;
            if (!*((void *)&v80 + 1)) {
              goto LABEL_132;
            }
            split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
            if (*(void *)a4) {
              return;
            }
            getIntInBytes<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), &v74);
            if (*(void *)a4) {
              return;
            }
            unsigned int v57 = v74;
            uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
            v58.i16[0] = vaddlv_u8(v58);
            if (v58.i32[0] != 1)
            {
              uint64_t v66 = "Pointer preferred alignment must be a power of 2";
              goto LABEL_168;
            }
            if (*((void *)&v80 + 1))
            {
              split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
              if (*(void *)a4) {
                return;
              }
              getInt<unsigned int>(a4, (const char *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v74 + 4));
              if (*(void *)a4) {
                return;
              }
              uint64_t v56 = HIDWORD(v74);
              if (!HIDWORD(v74))
              {
                uint64_t v66 = "Invalid index size of 0 bytes";
                goto LABEL_168;
              }
            }
            else
            {
              uint64_t v56 = v51;
            }
LABEL_132:
            unint64_t v63 = __clz(v53) ^ 0x3F;
            unsigned __int8 v64 = 63 - __clz(v57);
            if (v57) {
              unsigned __int8 v65 = v64;
            }
            else {
              unsigned __int8 v65 = 0;
            }
            llvm::DataLayout::setPointerAlignmentInBits(v55, v50, v63, v65, v51, v56, a4);
            if (*(void *)a4) {
              return;
            }
            uint64_t v13 = v49;
            uint64_t v15 = v72;
            a1 = v55;
            uint64_t v12 = v68;
            uint64_t v14 = v70;
            break;
          case 's':
            break;
          default:
            goto LABEL_158;
        }
      }
LABEL_142:
      long long v17 = 0uLL;
    }
    while (v5);
  }
  *(void *)a4 = 0;
}

void llvm::DataLayout::parse(void *a1@<X0>, unint64_t a2@<X1>, llvm::DataLayout *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  llvm::DataLayout::DataLayout((uint64_t)v8, &str_6_13, 0);
  llvm::DataLayout::parseSpecifier(v8, a1, a2, (const llvm::Twine *)&v7);
  uint64_t v6 = v7;
  if (v7)
  {
    *((unsigned char *)a3 + 440) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    *((unsigned char *)a3 + 440) &= ~1u;
    llvm::DataLayout::DataLayout(a3, (const llvm::DataLayout *)v8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v8);
}

void split(const llvm::Twine *a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  __s2 = a2;
  uint64_t v13 = a3;
  char v14 = a4;
  llvm::StringRef::split((uint64_t *)&__s2, &v14, 1uLL, (uint64_t)v10);
  long long v7 = v10[1];
  *(_OWORD *)a5 = v10[0];
  *(_OWORD *)(a5 + 16) = v7;
  if (*(void *)(a5 + 24))
  {
    if (*(void *)(a5 + 8)) {
      goto LABEL_3;
    }
    uint64_t v9 = "Expected token before separator in datalayout string";
LABEL_9:
    *(void *)&v10[0] = v9;
    __int16 v11 = 259;
    reportError(a1, (llvm::Twine *)v10);
  }
  size_t v8 = *(void *)(a5 + 8);
  if (v8 != v13 || v8 && memcmp(*(const void **)a5, __s2, v8))
  {
    uint64_t v9 = "Trailing separator in datalayout string";
    goto LABEL_9;
  }
LABEL_3:
  *(void *)a1 = 0;
}

uint64_t getInt<unsigned int>(const llvm::Twine *a1, const char *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v10 = 0;
  long long v7 = a2;
  uint64_t v8 = a3;
  uint64_t result = llvm::consumeUnsignedInteger((llvm *)&v7, (llvm::StringRef *)0xA, &v10, a4);
  if ((result & 1) != 0 || v8 || HIDWORD(v10))
  {
    long long v7 = "not a number, or does not fit in an unsigned int";
    __int16 v9 = 259;
    reportError(a1, (llvm::Twine *)&v7);
  }
  *(_DWORD *)a4 = v10;
  *(void *)a1 = 0;
  return result;
}

void reportError(const llvm::Twine *a1, llvm::Twine *a2)
{
  getErrorErrorCat();
  llvm::Twine::str(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = 3;
  long long v7 = &getErrorErrorCat(void)::ErrorErrorCat;
  size_t v5 = p_p;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>();
}

uint64_t getIntInBytes<unsigned int>(const llvm::Twine *a1, const char *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t result = getInt<unsigned int>(a1, a2, a3, a4);
  if (!*(void *)a1)
  {
    if ((*(_DWORD *)a4 & 7) != 0)
    {
      long long v7 = "number of bits must be a byte width multiple";
      __int16 v8 = 259;
      reportError(a1, (llvm::Twine *)&v7);
    }
    *(_DWORD *)a4 >>= 3;
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t getIntInBytes<unsigned long long>(const llvm::Twine *a1, const char *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v11 = 0;
  __int16 v8 = a2;
  uint64_t v9 = a3;
  uint64_t result = llvm::consumeUnsignedInteger((llvm *)&v8, (llvm::StringRef *)0xA, &v11, a4);
  if ((result & 1) != 0 || v9)
  {
    __int16 v8 = "not a number, or does not fit in an unsigned int";
    __int16 v10 = 259;
    reportError(a1, (llvm::Twine *)&v8);
  }
  unint64_t v7 = v11;
  *a4 = v11;
  *(void *)a1 = 0;
  if ((v7 & 7) != 0)
  {
    __int16 v8 = "number of bits must be a byte width multiple";
    __int16 v10 = 259;
    reportError(a1, (llvm::Twine *)&v8);
  }
  *a4 = v7 >> 3;
  *(void *)a1 = 0;
  return result;
}

uint64_t getAddrSpace(const llvm::Twine *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = getInt<unsigned int>(a1, a2, a3, (unint64_t *)a4);
  if (!*(void *)a1)
  {
    if (*(unsigned char *)(a4 + 3))
    {
      unint64_t v7 = "Invalid address space, must be a 24-bit integer";
      __int16 v8 = 259;
      reportError(a1, (llvm::Twine *)&v7);
    }
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 30);
  if (!a2) {
    return v2;
  }
  unint64_t v3 = *((unsigned int *)this + 62);
  if (!v3) {
    return v2;
  }
  uint64_t v4 = v2 + 16 * v3;
  uint64_t result = *((void *)this + 30);
  do
  {
    unint64_t v6 = v3 >> 1;
    uint64_t v7 = result + 16 * (v3 >> 1);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
    uint64_t v9 = v7 + 16;
    v3 += ~(v3 >> 1);
    if (v8 < a2) {
      uint64_t result = v9;
    }
    else {
      unint64_t v3 = v6;
    }
  }
  while (v3);
  if (result == v4 || *(_DWORD *)(result + 8) != a2) {
    return v2;
  }
  return result;
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  llvm::DataLayout::clear((uint64_t)this);
  uint64_t v2 = (char *)*((void *)this + 49);
  if (v2 != (char *)this + 408) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 30);
  if (v3 != (char *)this + 256) {
    free(v3);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  uint64_t v4 = (char *)*((void *)this + 20);
  if (v4 != (char *)this + 176) {
    free(v4);
  }
  size_t v5 = (char *)*((void *)this + 14);
  if (v5 != (char *)this + 128) {
    free(v5);
  }
  unint64_t v6 = (char *)*((void *)this + 8);
  if (v6 != (char *)this + 80) {
    free(v6);
  }
  uint64_t v7 = (char *)*((void *)this + 4);
  if (v7 != (char *)this + 56) {
    free(v7);
  }
}

llvm::StructLayout *llvm::DataLayout::getStructLayout(llvm::DataLayout *this, llvm::StructType *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 48);
  if (!v4) {
    operator new();
  }
  unsigned int v8 = a2;
  size_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v4, &v8);
  uint64_t result = (llvm::StructLayout *)v5[1];
  if (!result)
  {
    uint64_t v7 = (llvm::StructLayout *)malloc_type_malloc(8 * *((unsigned int *)a2 + 3) + 16, 0x4065EBACuLL);
    if (!v7) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v5[1] = v7;
    return llvm::StructLayout::StructLayout(v7, a2, this);
  }
  return result;
}

uint64_t llvm::DataLayout::getAlignment(llvm::DataLayout *this, llvm::Type *a2, int a3)
{
  while (2)
  {
    unsigned int v6 = *((_DWORD *)a2 + 2);
    switch((char)v6)
    {
      case 7:
      case 9:
      case 12:
      case 14:
      case 20:
        __break(1u);
        JUMPOUT(0x261E23AECLL);
      case 8:
        uint64_t v32 = (unsigned __int8 *)*((void *)this + 30);
        if (a3) {
          return *v32;
        }
        else {
          return v32[1];
        }
      case 10:
      case 18:
      case 19:
        unsigned int TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(this, a2);
        unint64_t v21 = *((unsigned int *)this + 42);
        if (v21)
        {
          __int16 v10 = (_DWORD *)*((void *)this + 20);
          uint64_t v22 = &v10[2 * v21];
          do
          {
            unint64_t v23 = v21 >> 1;
            uint64_t v24 = &v10[2 * (v21 >> 1)];
            unsigned int v26 = *v24;
            uint64_t v25 = v24 + 2;
            v21 += ~(v21 >> 1);
            if (v26 < TypeSizeInBits) {
              __int16 v10 = v25;
            }
            else {
              unint64_t v21 = v23;
            }
          }
          while (v21);
          if (v10 != v22 && *v10 == TypeSizeInBits) {
            goto LABEL_54;
          }
        }
        uint64_t v27 = llvm::DataLayout::getTypeSizeInBits(this, a2);
        if ((unint64_t)(v27 + 7) < 8)
        {
          unint64_t v16 = 0;
          return 63 - __clz(v16);
        }
        unint64_t v28 = (((unint64_t)(v27 + 7) >> 3) - 1) | ((((unint64_t)(v27 + 7) >> 3) - 1) >> 1);
        unint64_t v29 = v28 | (v28 >> 2) | ((v28 | (v28 >> 2)) >> 4);
        unint64_t v30 = v29 | (v29 >> 8) | ((v29 | (v29 >> 8)) >> 16);
        unint64_t v19 = v30 | HIDWORD(v30);
        goto LABEL_25;
      case 11:
        return 6;
      case 13:
        char v34 = (_DWORD *)*((void *)this + 8);
        unint64_t v35 = *((unsigned int *)this + 18);
        unint64_t v36 = &v34[2 * v35];
        if (v35)
        {
          unsigned int v37 = v6 >> 8;
          do
          {
            unint64_t v38 = v35 >> 1;
            unint64_t v39 = &v34[2 * (v35 >> 1)];
            unsigned int v41 = *v39;
            uint8x8_t v40 = v39 + 2;
            v35 += ~(v35 >> 1);
            if (v41 < v37) {
              char v34 = v40;
            }
            else {
              unint64_t v35 = v38;
            }
          }
          while (v35);
        }
        else
        {
          v34 += 2 * v35;
        }
        if (v34 == v36) {
          uint64_t v45 = -1;
        }
        else {
          uint64_t v45 = 0;
        }
        __int16 v10 = &v34[2 * v45];
        goto LABEL_54;
      case 15:
        PointerAlignElem = (unsigned __int8 *)llvm::DataLayout::getPointerAlignElem(this, v6 >> 8);
        if (a3) {
          return *PointerAlignElem;
        }
        else {
          return PointerAlignElem[1];
        }
      case 16:
        if (v6 & 0x200) != 0 && (a3) {
          return 0;
        }
        uint64_t StructLayout = llvm::DataLayout::getStructLayout(this, a2);
        uint64_t v43 = 212;
        if (!a3) {
          uint64_t v43 = 213;
        }
        unsigned int v44 = *((unsigned __int8 *)this + v43);
        if (v44 <= *(unsigned __int8 *)(StructLayout + 8)) {
          return *(unsigned __int8 *)(StructLayout + 8);
        }
        else {
          return v44;
        }
      case 17:
        a2 = (llvm::Type *)*((void *)a2 + 3);
        continue;
      case 21:
        getTargetTypeInfo((uint64_t *)a2);
        a2 = v7;
        continue;
      default:
        unsigned int v8 = llvm::DataLayout::getTypeSizeInBits(this, a2);
        unint64_t v9 = *((unsigned int *)this + 30);
        if (!v9) {
          goto LABEL_12;
        }
        __int16 v10 = (_DWORD *)*((void *)this + 14);
        unint64_t v11 = &v10[2 * v9];
        do
        {
          unint64_t v12 = v9 >> 1;
          uint64_t v13 = &v10[2 * (v9 >> 1)];
          unsigned int v15 = *v13;
          char v14 = v13 + 2;
          v9 += ~(v9 >> 1);
          if (v15 < v8) {
            __int16 v10 = v14;
          }
          else {
            unint64_t v9 = v12;
          }
        }
        while (v9);
        if (v10 != v11 && *v10 == v8)
        {
LABEL_54:
          uint64_t v46 = 4;
          if (!a3) {
            uint64_t v46 = 5;
          }
          return *((unsigned __int8 *)v10 + v46);
        }
        else
        {
LABEL_12:
          unint64_t v16 = v8 >> 3;
          if (v8 >> 3)
          {
            unint64_t v17 = (v16 - 1) | ((v16 - 1) >> 1) | (((v16 - 1) | ((v16 - 1) >> 1)) >> 2);
            unint64_t v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
            unint64_t v19 = v18 | (v18 >> 16);
LABEL_25:
            unint64_t v16 = v19 + 1;
          }
          return 63 - __clz(v16);
        }
    }
  }
}

double llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  uint64_t PointerAlignElem = llvm::DataLayout::getPointerAlignElem(this, v3 >> 8);
  size_t v5 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(PointerAlignElem + 4));
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    uint64_t v7 = (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32));
    return llvm::VectorType::get(v5, v7);
  }
  return result;
}

uint64_t llvm::DataLayout::getPreferredAlign(llvm::DataLayout *this, const llvm::GlobalVariable *a2)
{
  unsigned int v4 = *((_DWORD *)a2 + 8);
  int v5 = (v4 >> 17) & 0x3F;
  if (!v5)
  {
    __int16 v10 = (llvm::Type *)*((void *)a2 + 3);
    uint64_t Alignment = llvm::DataLayout::getAlignment(this, v10, 0);
    uint64_t v6 = Alignment;
    if (*((unsigned char *)a2 + 16))
    {
      char v12 = 0;
      if (*((unsigned char *)a2 + 16) != 3) {
        goto LABEL_16;
      }
      BOOL v13 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
    }
    else
    {
      if (*((const llvm::GlobalVariable **)a2 + 9) != (const llvm::GlobalVariable *)((char *)a2 + 72))
      {
        char v12 = 0;
        goto LABEL_16;
      }
      BOOL v13 = (*((unsigned char *)a2 + 35) & 1) == 0;
    }
    char v12 = v13;
LABEL_16:
    if ((v12 & 1) == 0 && Alignment <= 3u)
    {
      unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(this, v10);
      if ((_BYTE)v14) {
      if (TypeSizeInBits <= 0x80)
      }
        return v6;
      else {
        return 4;
      }
    }
    return v6;
  }
  uint64_t v6 = (v5 - 1);
  if ((v4 & 0x800000) != 0) {
    return v6;
  }
  uint64_t v7 = (llvm::Type *)*((void *)a2 + 3);
  unsigned int v8 = (v5 - 1);
  if (v8 >= llvm::DataLayout::getAlignment(this, v7, 0)) {
    return v6;
  }
  LOBYTE(result) = llvm::DataLayout::getAlignment(this, v7, 1);
  if (v8 <= result) {
    return result;
  }
  else {
    return v8;
  }
}

void _GLOBAL__sub_I_DataLayout_cpp()
{
  DefaultAlignments = 105;
  *(void *)algn_26B41F24C = 1;
  dword_26B41F254 = 105;
  qword_26B41F258 = 8;
  dword_26B41F260 = 105;
  unk_26B41F264 = 0x10100000010;
  dword_26B41F26C = 105;
  qword_26B41F270 = 0x20200000020;
  dword_26B41F278 = 105;
  unk_26B41F27C = 0x30200000040;
  dword_26B41F284 = 102;
  qword_26B41F288 = 0x10100000010;
  dword_26B41F290 = 102;
  unk_26B41F294 = 0x20200000020;
  dword_26B41F29C = 102;
  qword_26B41F2A0 = 0x30300000040;
  dword_26B41F2A8 = 102;
  unk_26B41F2AC = 0x40400000080;
  dword_26B41F2B4 = 118;
  qword_26B41F2B8 = 0x30300000040;
  dword_26B41F2C0 = 118;
  unk_26B41F2C4 = 0x40400000080;
}

BOOL llvm::stripDebugInfo(llvm *this, llvm::Function *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t Metadata = llvm::Value::getMetadata(this, 0);
  BOOL v4 = Metadata != 0;
  if (Metadata) {
    llvm::Value::setMetadata((uint64_t)this, 0, 0);
  }
  v48[0] = 0;
  v48[1] = 0;
  int v49 = 0;
  int v5 = (char *)*((void *)this + 10);
  unsigned int v44 = (char *)this + 72;
  if (v5 == (char *)this + 72)
  {
    uint64_t v42 = 0;
    goto LABEL_74;
  }
  uint64_t v6 = &v59;
  do
  {
    uint64_t v7 = v5 - 24;
    if (!v5) {
      uint64_t v7 = 0;
    }
    unsigned int v8 = v7 + 40;
    unint64_t v9 = (void *)*((void *)v7 + 6);
    while (v9 != v8)
    {
      uint64_t v10 = (uint64_t)(v9 - 3);
      BOOL v11 = v9 == 0;
      unint64_t v9 = (void *)v9[1];
      if (v11) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v10;
      }
      if (llvm::DbgInfoIntrinsic::classof(v12))
      {
        llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(void *)(v12 + 40) + 40, v12 + 24);
        BOOL v4 = 1;
        continue;
      }
      if (!*(void *)(v12 + 48))
      {
        uint64_t v46 = 0;
LABEL_20:
        if ((*(unsigned char *)(v12 + 23) & 0x20) == 0) {
          goto LABEL_53;
        }
        goto LABEL_21;
      }
      int v47 = 0;
      llvm::TrackingMDRef::operator=((uint64_t *)(v12 + 48), &v47);
      if (v47) {
        llvm::MetadataTracking::untrack((uint64_t)&v47, (uint64_t)v47);
      }
      uint64_t v13 = *(void *)(v12 + 48);
      uint64_t v46 = 0;
      BOOL v4 = 1;
      if (!v13) {
        goto LABEL_20;
      }
LABEL_21:
      char v14 = (__n128 *)llvm::Value::getMetadata((llvm::Value *)v12, 18);
      uint64_t v46 = v14;
      if (!v14) {
        goto LABEL_53;
      }
      BOOL v60 = v14;
      uint64_t v55 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v48, &v60, &v55))
      {
        uint64_t Impl = (__n128 *)v55[1];
        if (Impl) {
          goto LABEL_51;
        }
      }
      uint64_t Impl = v46;
      BOOL v60 = (__n128 *)v64;
      __int16 v61 = (__n128 *)v64;
      uint64_t v62 = 8;
      int v63 = 0;
      uint64_t v55 = v6;
      uint64_t v56 = v6;
      uint64_t v57 = 8;
      int v58 = 0;
      unsigned int v50 = v54;
      uint64_t v51 = v54;
      uint64_t v52 = 8;
      int v53 = 0;
      llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v60, v46, (uint64_t)&v66);
      if (!v68[0]) {
        goto LABEL_42;
      }
      unint64_t v17 = Impl - 1;
      unint64_t v16 = Impl[-1].n128_u64[0];
      if ((v16 & 2) != 0)
      {
        unint64_t v18 = (unint64_t *)Impl[-2].n128_u64[0];
        uint64_t v19 = Impl[-2].n128_u32[2];
      }
      else
      {
        unint64_t v18 = &v17->n128_u64[-((v16 >> 2) & 0xF)];
        uint64_t v19 = (v16 >> 6) & 0xF;
      }
      if (v19 == 1) {
        goto LABEL_42;
      }
      BOOL v45 = v4;
      uint64_t v20 = v5;
      unint64_t v21 = v6;
      uint64_t v22 = 0;
      unint64_t v23 = (unsigned char **)(v18 + 1);
      uint64_t v24 = 8 * v19 - 8;
      do
      {
        uint64_t v25 = *v23++;
        v22 += isDILocationReachable((llvm::SmallPtrSetImplBase *)&v60, (unsigned int *)&v55, v25);
        v24 -= 8;
      }
      while (v24);
      uint64_t v6 = v21;
      if (!v22)
      {
        int v5 = v20;
        BOOL v4 = v45;
        goto LABEL_42;
      }
      llvm::SmallPtrSetImplBase::clear((llvm::SmallPtrSetImplBase *)&v60);
      unint64_t v26 = v17->n128_u64[0];
      int v5 = v20;
      if ((v17->n128_u64[0] & 2) != 0)
      {
        uint64_t v27 = (unint64_t *)Impl[-2].n128_u64[0];
        uint64_t v28 = Impl[-2].n128_u32[2];
      }
      else
      {
        uint64_t v27 = &v17->n128_u64[-((v26 >> 2) & 0xF)];
        uint64_t v28 = (v26 >> 6) & 0xF;
      }
      BOOL v4 = v45;
      if (v28 == 1)
      {
        uint64_t Impl = 0;
        goto LABEL_42;
      }
      unint64_t v29 = (unsigned char **)(v27 + 1);
      uint64_t v30 = 8 * v28 - 8;
      while ((isAllDILocation((llvm::SmallPtrSetImplBase *)&v60, &v50, (unsigned int *)&v55, *v29) & 1) != 0)
      {
        ++v29;
        v30 -= 8;
        if (!v30)
        {
          uint64_t Impl = 0;
          goto LABEL_42;
        }
      }
      uint64_t __src = 0;
      uint64_t v66 = (llvm::hashing::detail::hash_state *)v68;
      uint64_t v67 = 0x400000000;
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v66, &__src, &v66);
      for (unint64_t i = 1; ; ++i)
      {
        unint64_t v34 = v17->n128_u64[0];
        if ((v17->n128_u64[0] & 2) != 0) {
          break;
        }
        if (i >= ((v34 >> 6) & 0xF)) {
          goto LABEL_67;
        }
        unint64_t v35 = &v17->n128_u64[-((v34 >> 2) & 0xF)];
LABEL_61:
        unint64_t v36 = (unsigned char *)v35[i];
        if (v36)
        {
          unsigned int v37 = stripLoopMDLoc(&v50, (unsigned int *)&v55, v36);
          if (!v37) {
            continue;
          }
          uint64_t v38 = (uint64_t)v37;
        }
        else
        {
          uint64_t v38 = 0;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v66, v38);
      }
      if (i < Impl[-2].n128_u32[2])
      {
        unint64_t v35 = (unint64_t *)Impl[-2].n128_u64[0];
        goto LABEL_61;
      }
LABEL_67:
      unint64_t v39 = Impl->n128_u64[1];
      uint8x8_t v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFF8);
      if ((v39 & 4) != 0) {
        uint8x8_t v40 = (void *)*v40;
      }
      uint64_t Impl = (__n128 *)llvm::MDTuple::getImpl(v40, v66, v67, (unint64_t *)1, 1);
      llvm::MDNode::replaceOperandWith(Impl, 0, Impl, v41);
      if (v66 != (llvm::hashing::detail::hash_state *)v68) {
        free(v66);
      }
LABEL_42:
      if (v51 != v50) {
        free(v51);
      }
      if (v56 != v55) {
        free(v56);
      }
      if (v61 != v60) {
        free(v61);
      }
      BOOL v60 = 0;
      char v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v48, &v46, &v60);
      n128_u64 = v60->n128_u64;
      if ((v31 & 1) == 0)
      {
        n128_u64 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>((uint64_t)v48, (uint64_t)&v46, &v46, v60);
        void *n128_u64 = v46;
        n128_u64[1] = 0;
      }
      n128_u64[1] = Impl;
LABEL_51:
      if (Impl != v46) {
        llvm::Instruction::setMetadata((uint64_t *)v12, 18, (llvm::MDNode *)Impl);
      }
LABEL_53:
      if ((*(unsigned char *)(v12 + 23) & 0x20) != 0)
      {
        llvm::Instruction::setMetadata((uint64_t *)v12, (uint64_t *)"heapallocsite", 0xDuLL, 0);
        llvm::Instruction::setMetadata((uint64_t *)v12, 38, 0);
      }
    }
    int v5 = (char *)*((void *)v5 + 1);
  }
  while (v5 != v44);
  uint64_t v42 = v48[0];
LABEL_74:
  MEMORY[0x263E500A0](v42, 8);
  return v4;
}

uint64_t llvm::StripDebugInfo(llvm *this, llvm::Module *a2)
{
  unsigned int v3 = (char *)this + 72;
  BOOL v4 = (char *)*((void *)this + 10);
  if (v4 == (char *)this + 72)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = (char *)*((void *)v4 + 2);
      uint64_t v7 = (char *)*((void *)v4 + 1);
      int v8 = v4[39];
      if (v8 >= 0) {
        uint64_t v6 = v4 + 16;
      }
      unint64_t v9 = *((void *)v4 + 3);
      if (v8 >= 0) {
        unint64_t v9 = v4[39];
      }
      if (v9 >= 9)
      {
        BOOL v10 = *(void *)v6 == 0x6762642E6D766C6CLL && v6[8] == 46;
        if (v10
          || v9 == 9
          && ((uint64_t v11 = *(void *)v6, v12 = v6[8], v11 == 0x6F63672E6D766C6CLL)
            ? (BOOL v13 = v12 == 118)
            : (BOOL v13 = 0),
              v13))
        {
          llvm::Module::eraseNamedMetadata(*((llvm::Module **)v4 + 5), (llvm::NamedMDNode *)v4);
          int v5 = 1;
        }
      }
      BOOL v4 = v7;
    }
    while (v7 != v3);
  }
  for (unint64_t i = (void *)*((void *)this + 4); i != (void *)((char *)this + 24); unint64_t i = (void *)i[1])
  {
    if (i) {
      unsigned int v15 = (llvm *)(i - 7);
    }
    else {
      unsigned int v15 = 0;
    }
    v5 |= llvm::stripDebugInfo(v15, (llvm::Function *)v4);
  }
  for (j = (void *)*((void *)this + 2); j != (void *)((char *)this + 8); j = (void *)j[1])
  {
    if (j) {
      unint64_t v17 = (llvm::Value *)(j - 7);
    }
    else {
      unint64_t v17 = 0;
    }
    v5 |= llvm::Value::eraseMetadata(v17, 0);
  }
  uint64_t v18 = *((void *)this + 19);
  if (v18) {
    (*(void (**)(uint64_t, char *))(*(void *)v18 + 40))(v18, v4);
  }
  return v5 & 1;
}

uint64_t llvm::getDebugMetadataVersionFromModule(llvm *this, const llvm::Module *a2)
{
  uint64_t result = llvm::Module::getModuleFlag(this, "Debug Info Version", 0x12uLL);
  if (result)
  {
    if (*(unsigned char *)result == 1 && (uint64_t v3 = *(void *)(result + 128), *(unsigned char *)(v3 + 16) == 16))
    {
      BOOL v4 = (unsigned int *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u) {
        BOOL v4 = *(unsigned int **)v4;
      }
      return *v4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::at::getAssignmentInsts(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (void *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = (void *)*v2;
  BOOL v4 = (uint64_t *)(*v2 + 2528);
  uint64_t v8 = a1;
  uint64_t v9 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v4, &v8, &v9);
  uint64_t result = 0;
  if (v5) {
    BOOL v7 = v9 == v3[316] + 32 * *((unsigned int *)v3 + 636);
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    return *(void *)(v9 + 8);
  }
  return result;
}

uint64_t isDILocationReachable(llvm::SmallPtrSetImplBase *a1, unsigned int *a2, unsigned char *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = llvm::MDNode::classof(a3);
  if (result)
  {
    if (*a3 != 5
      && ((BOOL v7 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3),
           uint64_t v8 = *((void *)a2 + 1),
           v8 != *(void *)a2)
        ? (uint64_t v9 = a2 + 4)
        : (uint64_t v9 = a2 + 5),
          v7 == (const void **)(v8 + 8 * *v9)))
    {
      llvm::SmallPtrSetImpl<llvm::Value *>::insert(a1, a3, (uint64_t)v17);
      if (v17[16])
      {
        unint64_t v10 = *((void *)a3 - 2);
        if ((v10 & 2) != 0)
        {
          uint64_t v11 = (void *)*((void *)a3 - 4);
          uint64_t v12 = *((unsigned int *)a3 - 6);
        }
        else
        {
          uint64_t v11 = &a3[-8 * ((v10 >> 2) & 0xF) - 16];
          uint64_t v12 = (v10 >> 6) & 0xF;
        }
        if (v12)
        {
          uint64_t v13 = 8 * v12;
          do
          {
            if (isDILocationReachable(a1, a2, *v11)) {
              llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)a2, a3, (uint64_t)v17);
            }
            ++v11;
            v13 -= 8;
          }
          while (v13);
        }
        imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3);
        uint64_t v15 = *((void *)a2 + 1);
        if (v15 == *(void *)a2) {
          unint64_t v16 = a2 + 5;
        }
        else {
          unint64_t v16 = a2 + 4;
        }
        return imp != (const void **)(v15 + 8 * *v16);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t isAllDILocation(llvm::SmallPtrSetImplBase *a1, void *a2, unsigned int *a3, unsigned char *a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t result = llvm::MDNode::classof(a4);
  if (result)
  {
    if (*a4 == 5) {
      return 1;
    }
    imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a4);
    uint64_t v10 = a2[1];
    uint64_t v11 = v10 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
    if (imp != (const void **)(v10 + 8 * *v11)) {
      return 1;
    }
    uint64_t v12 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a3, a4);
    uint64_t v13 = *((void *)a3 + 1);
    if (v13 == *(void *)a3) {
      char v14 = a3 + 5;
    }
    else {
      char v14 = a3 + 4;
    }
    if (v12 == (const void **)(v13 + 8 * *v14)) {
      return 0;
    }
    llvm::SmallPtrSetImpl<llvm::Value *>::insert(a1, a4, (uint64_t)v19);
    if (!v19[16]) {
      return 0;
    }
    unint64_t v15 = *((void *)a4 - 2);
    if ((v15 & 2) != 0)
    {
      unint64_t v16 = (void *)*((void *)a4 - 4);
      uint64_t v17 = *((unsigned int *)a4 - 6);
    }
    else
    {
      unint64_t v16 = &a4[-8 * ((v15 >> 2) & 0xF) - 16];
      uint64_t v17 = (v15 >> 6) & 0xF;
    }
    if (!v17)
    {
LABEL_25:
      llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)a2, a4, (uint64_t)v19);
      return 1;
    }
    uint64_t v18 = 8 * v17;
    while (1)
    {
      if ((unsigned char *)*v16 != a4)
      {
        uint64_t result = isAllDILocation(a1, a2, a3);
        if (!result) {
          break;
        }
      }
      ++v16;
      v18 -= 8;
      if (!v18) {
        goto LABEL_25;
      }
    }
  }
  return result;
}

llvm::MDNode *stripLoopMDLoc(void *a1, unsigned int *a2, unsigned char *a3)
{
  v30[4] = *MEMORY[0x263EF8340];
  if (*a3 == 5) {
    return 0;
  }
  imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a1, a3);
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 == *a1 ? (unsigned int *)((char *)a1 + 20) : (unsigned int *)(a1 + 2);
  if (imp != (const void **)(v7 + 8 * *v8)) {
    return 0;
  }
  uint64_t v11 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3);
  uint64_t v12 = *((void *)a2 + 1);
  if (v12 == *(void *)a2) {
    uint64_t v13 = a2 + 5;
  }
  else {
    uint64_t v13 = a2 + 4;
  }
  if (v11 == (const void **)(v12 + 8 * *v13) || !llvm::MDNode::classof(a3)) {
    return (llvm::MDNode *)a3;
  }
  unint64_t v14 = 0;
  char v15 = 0;
  uint64_t v28 = (llvm::hashing::detail::hash_state *)v30;
  uint64_t v29 = 0x400000000;
  unint64_t v16 = (unint64_t *)(a3 - 16);
  while (1)
  {
    unint64_t v17 = *v16;
    if ((*v16 & 2) != 0) {
      break;
    }
    if (v14 >= ((v17 >> 6) & 0xF)) {
      goto LABEL_28;
    }
    uint64_t v18 = &v16[-((v17 >> 2) & 0xF)];
LABEL_19:
    uint64_t v19 = (unsigned char *)v18[v14];
    if (!v19)
    {
      uint64_t v21 = 0;
LABEL_24:
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, v21);
      goto LABEL_26;
    }
    if (v19 != a3)
    {
      uint64_t v20 = stripLoopMDLoc(a1, a2);
      if (!v20) {
        goto LABEL_26;
      }
      uint64_t v21 = v20;
      goto LABEL_24;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, 0);
    char v15 = 1;
LABEL_26:
    ++v14;
  }
  if (v14 < *((unsigned int *)a3 - 6))
  {
    uint64_t v18 = (unint64_t *)*((void *)a3 - 4);
    goto LABEL_19;
  }
LABEL_28:
  uint64_t v9 = 0;
  if (v29 && (v15 & (v29 == 1)) == 0)
  {
    uint64_t v22 = *((void *)a3 + 1);
    unint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((a3[1] & 0x7F) == 1)
    {
      if ((v22 & 4) != 0) {
        unint64_t v23 = (void *)*v23;
      }
      uint64_t v24 = v28;
      uint64_t v25 = 1;
    }
    else
    {
      if ((v22 & 4) != 0) {
        unint64_t v23 = (void *)*v23;
      }
      uint64_t v24 = v28;
      uint64_t v25 = 0;
    }
    uint64_t Impl = llvm::MDTuple::getImpl(v23, v24, v29, (unint64_t *)v25, 1);
    uint64_t v9 = Impl;
    if (v15) {
      llvm::MDNode::replaceOperandWith((__n128 *)Impl, 0, (__n128 *)Impl, v27);
    }
  }
  if (v28 != (llvm::hashing::detail::hash_state *)v30) {
    free(v28);
  }
  return v9;
}

llvm::MDNode *llvm::DILocation::getImpl(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (HIWORD(a3)) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = a3;
  }
  if (a7) {
    goto LABEL_12;
  }
  uint64_t v16 = *a1;
  unint64_t v17 = (uint64_t *)(*a1 + 504);
  uint64_t v25 = (void *)__PAIR64__(v14, a2);
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  char v28 = a6;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(v17, (int *)&v25, (uint64_t **)&v24))BOOL v19 = v24 == (llvm::MDNode **)(*(void *)(v16 + 504) + 8 * *(unsigned int *)(v16 + 520)); {
  else
  }
    BOOL v19 = 1;
  if (!v19) {
    uint64_t v18 = *v24;
  }
  if (!v18 && a8)
  {
LABEL_12:
    uint64_t v25 = &v27;
    uint64_t v26 = 0x200000000;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v25, a4);
    if (a5) {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v25, a5);
    }
    uint64_t v20 = llvm::MDNode::operator new(16, v26, a7);
    uint64_t v21 = llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 5, a7, (uint64_t)v25, v26, 0, 0);
    *(_DWORD *)(v21 + 4) = a2;
    *(_WORD *)(v21 + 2) = v14;
    if (a6) {
      char v22 = 0x80;
    }
    else {
      char v22 = 0;
    }
    *(unsigned char *)(v21 + 1) = v22 & 0x80 | *(unsigned char *)(v21 + 1) & 0x7F;
    uint64_t v18 = llvm::MDNode::storeImpl<llvm::DILocation,llvm::DenseSet<llvm::DILocation*,llvm::MDNodeInfo<llvm::DILocation>>>((llvm::MDNode *)v21, a7, *a1 + 504);
    if (v25 != &v27) {
      free(v25);
    }
  }
  return v18;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILocation,llvm::DenseSet<llvm::DILocation*,llvm::MDNodeInfo<llvm::DILocation>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unsigned char *llvm::DILocalScope::getSubprogram(unsigned char *this)
{
  while ((*this & 0xFE) == 0x12)
  {
    unint64_t v1 = *((void *)this - 2);
    if ((v1 & 2) != 0) {
      uint64_t v2 = *((void *)this - 4);
    }
    else {
      uint64_t v2 = (uint64_t)&this[-8 * ((v1 >> 2) & 0xF) - 16];
    }
    this = *(unsigned char **)(v2 + 8);
  }
  return this;
}

const char *llvm::DINode::getFlagString(int a1)
{
  if (a1 < 0x2000)
  {
    if (a1 > 35)
    {
      if (a1 > 511)
      {
        if (a1 <= 2047)
        {
          if (a1 == 512) {
            return "DIFlagObjcClassComplete";
          }
          if (a1 == 1024) {
            return "DIFlagObjectPointer";
          }
          return (const char *)&str_36_4;
        }
        if (a1 != 2048)
        {
          if (a1 == 4096) {
            return "DIFlagStaticMember";
          }
          return (const char *)&str_36_4;
        }
        return "DIFlagVector";
      }
      else
      {
        if (a1 <= 127)
        {
          if (a1 == 36) {
            return "DIFlagIndirectVirtualBase";
          }
          if (a1 == 64) {
            return "DIFlagArtificial";
          }
          return (const char *)&str_36_4;
        }
        if (a1 != 128)
        {
          if (a1 == 256) {
            return "DIFlagPrototyped";
          }
          return (const char *)&str_36_4;
        }
        return "DIFlagExplicit";
      }
    }
    else
    {
      uint64_t result = "DIFlagZero";
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "DIFlagPrivate";
          break;
        case 2:
          uint64_t result = "DIFlagProtected";
          break;
        case 3:
          uint64_t result = "DIFlagPublic";
          break;
        case 4:
          uint64_t result = "DIFlagFwdDecl";
          break;
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          return (const char *)&str_36_4;
        case 8:
          uint64_t result = "DIFlagAppleBlock";
          break;
        case 16:
          uint64_t result = "DIFlagReservedBit4";
          break;
        default:
          if (a1 != 32) {
            return (const char *)&str_36_4;
          }
          uint64_t result = "DIFlagVirtual";
          break;
      }
    }
  }
  else if (a1 < 0x100000)
  {
    if (a1 >= 0x20000)
    {
      if (a1 < 0x40000)
      {
        if (a1 == 0x20000) {
          return "DIFlagMultipleInheritance";
        }
        if (a1 == 196608) {
          return "DIFlagVirtualInheritance";
        }
        return (const char *)&str_36_4;
      }
      if (a1 != 0x40000)
      {
        if (a1 == 0x80000) {
          return "DIFlagBitField";
        }
        return (const char *)&str_36_4;
      }
      return "DIFlagIntroducedVirtual";
    }
    else if (a1 >= 0x8000)
    {
      if (a1 != 0x8000)
      {
        if (a1 == 0x10000) {
          return "DIFlagSingleInheritance";
        }
        return (const char *)&str_36_4;
      }
      return "DIFlagExportSymbols";
    }
    else
    {
      if (a1 != 0x2000)
      {
        if (a1 == 0x4000) {
          return "DIFlagRValueReference";
        }
        return (const char *)&str_36_4;
      }
      return "DIFlagLValueReference";
    }
  }
  else if (a1 <= 0x1FFFFFF)
  {
    if (a1 < 0x800000)
    {
      if (a1 == 0x100000) {
        return "DIFlagNoReturn";
      }
      if (a1 == 0x400000) {
        return "DIFlagTypePassByValue";
      }
      return (const char *)&str_36_4;
    }
    if (a1 != 0x800000)
    {
      if (a1 == 0x1000000) {
        return "DIFlagEnumClass";
      }
      return (const char *)&str_36_4;
    }
    return "DIFlagTypePassByReference";
  }
  else
  {
    if (a1 <= 0x7FFFFFF)
    {
      if (a1 == 0x2000000) {
        return "DIFlagThunk";
      }
      if (a1 == 0x4000000) {
        return "DIFlagNonTrivial";
      }
      return (const char *)&str_36_4;
    }
    switch(a1)
    {
      case 0x8000000:
        return "DIFlagBigEndian";
      case 0x10000000:
        return "DIFlagLittleEndian";
      case 0x20000000:
        return "DIFlagAllCallsDescribed";
      default:
        return (const char *)&str_36_4;
    }
  }
  return result;
}

uint64_t llvm::DINode::splitFlags(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  int v4 = a1 & 3;
  if ((a1 & 3) != 0)
  {
    if (v4 == 1)
    {
      int v5 = 1;
    }
    else if (v4 == 2)
    {
      int v5 = 2;
    }
    else
    {
      int v5 = 3;
    }
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v5);
    uint64_t v3 = (v4 ^ 0x3FFFFFFF) & v3;
  }
  int v6 = v3 & 0x30000;
  if ((v3 & 0x30000) != 0)
  {
    if (v6 == 0x10000)
    {
      int v7 = 0x10000;
    }
    else if (v6 == 0x20000)
    {
      int v7 = 0x20000;
    }
    else
    {
      int v7 = 196608;
    }
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v7);
    uint64_t v3 = (v6 ^ 0x3FFFFFFF) & v3;
  }
  if ((~v3 & 0x24) != 0)
  {
    if ((v3 & 1) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    v3 &= 0x3FFFFFDBu;
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 36);
    if ((v3 & 1) == 0)
    {
LABEL_17:
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 1);
  v3 &= 0x3FFFFFFEu;
  if ((v3 & 2) != 0)
  {
LABEL_18:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 2);
    uint64_t v3 = (v3 & 2 ^ 0x3FFFFFFF) & v3;
  }
LABEL_19:
  if ((v3 & 3) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 3);
    uint64_t v3 = (v3 & 3 ^ 0x3FFFFFFF) & v3;
  }
  if ((v3 & 4) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 4);
    uint64_t v3 = (v3 & 4 ^ 0x3FFFFFFF) & v3;
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_60;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 8);
  uint64_t v3 = (v3 & 8 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10);
  uint64_t v3 = (v3 & 0x10 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20);
  uint64_t v3 = (v3 & 0x20 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40);
  uint64_t v3 = (v3 & 0x40 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_27:
    if ((v3 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80);
  uint64_t v3 = (v3 & 0x80 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_28:
    if ((v3 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100);
  uint64_t v3 = (v3 & 0x100 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_29:
    if ((v3 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x200);
  uint64_t v3 = (v3 & 0x200 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x400);
  uint64_t v3 = (v3 & 0x400 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800);
  uint64_t v3 = (v3 & 0x800 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000) == 0)
  {
LABEL_32:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000);
  uint64_t v3 = (v3 & 0x1000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000) == 0)
  {
LABEL_33:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x2000);
  uint64_t v3 = (v3 & 0x2000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000) == 0)
  {
LABEL_34:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x4000);
  uint64_t v3 = (v3 & 0x4000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000) == 0)
  {
LABEL_35:
    if ((v3 & 0x10000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x8000);
  uint64_t v3 = (v3 & 0x8000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000) == 0)
  {
LABEL_36:
    if ((v3 & 0x20000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_72:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10000);
  uint64_t v3 = (v3 & 0x10000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000) != 0)
  {
LABEL_37:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20000);
    uint64_t v3 = (v3 & 0x20000 ^ 0x3FFFFFFF) & v3;
  }
LABEL_38:
  if ((v3 & 0x30000) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x30000);
    uint64_t v3 = (v3 & 0x30000 ^ 0x3FFFFFFF) & v3;
  }
  if ((v3 & 0x40000) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40000);
    uint64_t v3 = (v3 & 0x40000 ^ 0x3FFFFFFF) & v3;
    if ((v3 & 0x80000) == 0)
    {
LABEL_42:
      if ((v3 & 0x100000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_76;
    }
  }
  else if ((v3 & 0x80000) == 0)
  {
    goto LABEL_42;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80000);
  uint64_t v3 = (v3 & 0x80000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100000) == 0)
  {
LABEL_43:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_77;
  }
LABEL_76:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100000);
  uint64_t v3 = (v3 & 0x100000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400000) == 0)
  {
LABEL_44:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_78;
  }
LABEL_77:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x400000);
  uint64_t v3 = (v3 & 0x400000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800000) == 0)
  {
LABEL_45:
    if ((v3 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_79;
  }
LABEL_78:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800000);
  uint64_t v3 = (v3 & 0x800000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v3 & 0x2000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_80;
  }
LABEL_79:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000000);
  uint64_t v3 = (v3 & 0x1000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000000) == 0)
  {
LABEL_47:
    if ((v3 & 0x4000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_81;
  }
LABEL_80:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x2000000);
  uint64_t v3 = (v3 & 0x2000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000000) == 0)
  {
LABEL_48:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_82;
  }
LABEL_81:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x4000000);
  uint64_t v3 = (v3 & 0x4000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000000) == 0)
  {
LABEL_49:
    if ((v3 & 0x10000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_83;
  }
LABEL_82:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x8000000);
  uint64_t v3 = (v3 & 0x8000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000000) == 0)
  {
LABEL_50:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_83:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10000000);
  uint64_t v3 = (v3 & 0x10000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000000) != 0)
  {
LABEL_51:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20000000);
    uint64_t v3 = (v3 & 0x20000000 ^ 0x3FFFFFFF) & v3;
  }
LABEL_52:
  if ((v3 & 0x24) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x24);
    return (v3 & 0x24 ^ 0x3FFFFFFF) & v3;
  }
  return v3;
}

llvm::MDNode *llvm::GenericDINode::getImpl(void *a1, int a2, uint64_t a3, llvm::hashing::detail::hash_state *this, uint64_t a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a6)
  {
    int v13 = 0;
LABEL_9:
    v22[0] = a3;
    BOOL v19 = llvm::MDNode::operator new(16, a5 + 1, a6);
    uint64_t v20 = llvm::MDNode::MDNode((uint64_t)v19, (uint64_t)a1, 8, a6, (uint64_t)v22, 1, (uint64_t *)this, a5);
    *(_WORD *)(v20 + 2) = a2;
    *(_DWORD *)(v20 + 4) = v13;
    return llvm::MDNode::storeImpl<llvm::GenericDINode,llvm::DenseSet<llvm::GenericDINode*,llvm::MDNodeInfo<llvm::GenericDINode>>>((llvm::MDNode *)v20, a6, *a1 + 576);
  }
  v22[0] = this;
  v22[1] = a5;
  v22[2] = 0;
  v22[3] = 0;
  int v23 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(this, (uint64_t)this + 8 * a5, a3, (unint64_t *)this);
  int v24 = a2;
  uint64_t v25 = a3;
  uint64_t v15 = *a1;
  uint64_t v16 = (uint64_t *)(*a1 + 576);
  uint64_t v21 = 0;
  int v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::GenericDINode>>(v16, (uint64_t)v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v17 && v21 != (llvm::MDNode **)(*(void *)(v15 + 576) + 8 * *(unsigned int *)(v15 + 592))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
    int v13 = v23;
    goto LABEL_9;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::GenericDINode,llvm::DenseSet<llvm::GenericDINode*,llvm::MDNodeInfo<llvm::GenericDINode>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DISubrange::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a2);
  uint64_t v11 = llvm::ValueAsMetadata::get(v9, v10);
  uint64_t v12 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a3);
  uint64_t v14 = llvm::ValueAsMetadata::get(v12, v13);
  return llvm::DISubrange::getImpl(a1, v11, v14, 0, 0, a4, a5);
}

{
  llvm::ValueAsMetadata *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a3);
  uint64_t v11 = llvm::ValueAsMetadata::get(v9, v10);
  return llvm::DISubrange::getImpl(a1, a2, v11, 0, 0, a4, a5);
}

llvm::MDNode *llvm::DISubrange::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t *)(*a1 + 600);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(v15, &v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 600) + 8 * *(unsigned int *)(v14 + 616))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    BOOL v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 16), 4uLL, a6);
    uint64_t v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 24), (uint64_t)a1, 9, a6, (uint64_t)&v22, 4, 0, 0);
    v19[25] = 33;
    return llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(v20, a6, *a1 + 600);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  unint64_t v1 = *((void *)this - 2);
  if ((v1 & 2) != 0) {
    uint64_t v2 = (unint64_t *)*((void *)this - 4);
  }
  else {
    uint64_t v2 = (unint64_t *)((char *)this - 8 * ((v1 >> 2) & 0xF) - 16);
  }
  unint64_t v3 = *v2;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)v3;
  if (v4 == 1) {
    return *(void *)(v3 + 128) & 0xFFFFFFFFFFFFFFF9;
  }
  if ((v4 & 0xFE) == 0x18) {
    return v3 & 0xFFFFFFFFFFFFFFF9 | 2;
  }
  if (v4 == 6) {
    return v3 & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  else {
    return 0;
  }
}

llvm::MDNode *llvm::DIGenericSubrange::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = (uint64_t *)(*a1 + 1176);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(v15, &v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1176) + 8 * *(unsigned int *)(v14 + 1192))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    BOOL v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 16), 4uLL, a6);
    uint64_t v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 24), (uint64_t)a1, 35, a6, (uint64_t)&v22, 4, 0, 0);
    v19[25] = 69;
    return llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(v20, a6, *a1 + 1176);
  }
  return result;
}

uint64_t llvm::DIEnumerator::DIEnumerator(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = llvm::MDNode::MDNode(a1, a2, 10, a3, a6, a7, 0, 0);
  *(_WORD *)(v10 + 2) = 40;
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v10 + 24) = v11;
  if (v11 > 0x40) {
    operator new[]();
  }
  *(void *)(a1 + 16) = *(void *)a4;
  *(_DWORD *)(a1 + 4) = a5;
  return a1;
}

llvm::MDNode *llvm::DIEnumerator::getImpl(void *a1, uint64_t a2, int a3, llvm::hashing::detail::hash_state *a4, int a5, int a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a5)
  {
    unint64_t v11 = 2;
LABEL_15:
    uint64_t v24 = a4;
    if (v11 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v11;
    }
    BOOL v19 = (char *)operator new(8 * v18 + 48) + 8 * v18;
    uint64_t v20 = (uint64_t)(v19 + 16);
    llvm::MDNode::Header::Header((uint64_t)v19, 1uLL, a5);
    uint64_t v21 = (llvm::MDNode *)llvm::DIEnumerator::DIEnumerator(v20, (uint64_t)a1, a5, a2, a3, (uint64_t)&v24, 1);
    return llvm::MDNode::storeImpl<llvm::DIEnumerator,llvm::DenseSet<llvm::DIEnumerator*,llvm::MDNodeInfo<llvm::DIEnumerator>>>(v21, a5, *a1 + 624);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = (uint64_t *)(*a1 + 624);
  if (*(_DWORD *)(a2 + 8) > 0x40u) {
    operator new[]();
  }
  uint64_t v15 = *(llvm::hashing::detail::hash_state **)a2;
  unsigned int v25 = *(_DWORD *)(a2 + 8);
  uint64_t v23 = 0;
  uint64_t v24 = v15;
  uint64_t v26 = a4;
  char v27 = a3;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(v14, &v24, &v23);
  uint64_t v17 = 0;
  if (v16 && v23 != (uint64_t *)(*(void *)(v13 + 624) + 8 * *(unsigned int *)(v13 + 640))) {
    uint64_t v17 = *v23;
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x263E50080](v24, 0x1000C8000313F17);
  }
  if (!v17 && a6)
  {
    unint64_t v11 = 0;
    goto LABEL_15;
  }
  return (llvm::MDNode *)v17;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIEnumerator,llvm::DenseSet<llvm::DIEnumerator*,llvm::MDNodeInfo<llvm::DIEnumerator>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIBasicType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  __int16 v15 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a8) {
    goto LABEL_7;
  }
  uint64_t v17 = *a1;
  uint64_t v18 = (uint64_t *)(*a1 + 648);
  LODWORD(v24) = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  int v27 = a5;
  int v28 = a6;
  int v29 = a7;
  uint64_t v23 = 0;
  int v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(v18, &v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v19 && v23 != (llvm::MDNode **)(*(void *)(v17 + 648) + 8 * *(unsigned int *)(v17 + 664))) {
    uint64_t result = *v23;
  }
  if (!result && a9)
  {
LABEL_7:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = a3;
    uint64_t v21 = operator new(0x58uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 12), 3uLL, a8);
    uint64_t v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 20), (uint64_t)a1, 11, a8, (uint64_t)&v24, 3, 0, 0);
    v21[21] = v15;
    *((_DWORD *)v21 + 14) = 0;
    *((_DWORD *)v21 + 15) = a7;
    *((void *)v21 + 8) = a4;
    *((void *)v21 + 9) = 0;
    *((_DWORD *)v21 + 20) = a5;
    *((_DWORD *)v21 + 21) = a6;
    return llvm::MDNode::storeImpl<llvm::DIBasicType,llvm::DenseSet<llvm::DIBasicType*,llvm::MDNodeInfo<llvm::DIBasicType>>>(v22, a8, *a1 + 648);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIBasicType,llvm::DenseSet<llvm::DIBasicType*,llvm::MDNodeInfo<llvm::DIBasicType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIStringType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, char a11)
{
  int v11 = a8;
  __int16 v17 = a2;
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a10) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t *)(*a1 + 1152);
  LODWORD(v27) = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  int v33 = a8;
  int v34 = a9;
  uint64_t v26 = 0;
  int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(v20, (int *)&v27, (uint64_t **)&v26);
  uint64_t result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(void *)(v19 + 1152) + 8 * *(unsigned int *)(v19 + 1168))) {
    uint64_t result = *v26;
  }
  int v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = a3;
      uint64_t v30 = a4;
      uint64_t v31 = a5;
      uint64_t v32 = a6;
      uint64_t v23 = operator new(0x70uLL);
      llvm::MDNode::Header::Header((uint64_t)(v23 + 24), 6uLL, a10);
      uint64_t v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 32), (uint64_t)a1, 34, a10, (uint64_t)&v27, 6, 0, 0);
      v23[33] = v17;
      *((void *)v23 + 10) = 0;
      *((void *)v23 + 11) = a7;
      *((void *)v23 + 12) = 0;
      *((_DWORD *)v23 + 26) = v11;
      *((_DWORD *)v23 + 27) = a9;
      return llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>(v24, a10, *a1 + 1152);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

uint64_t llvm::DIDerivedType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v22 = a13;
  uint64_t v23 = a12;
  int v24 = a9;
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a16) {
    goto LABEL_7;
  }
  uint64_t v25 = *a1;
  uint64_t v26 = (uint64_t *)(*a1 + 672);
  __int16 v36 = a2;
  int v37 = a5;
  LODWORD(v41) = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  LODWORD(v44) = a5;
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v47 = a8;
  uint64_t v48 = a10;
  int v49 = a9;
  uint64_t v50 = a11;
  uint64_t v51 = a12;
  int v52 = a13;
  uint64_t v53 = a14;
  uint64_t v54 = a15;
  v40[0] = 0;
  uint64_t v27 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(v26, (uint64_t)&v41, v40)&& v40[0] != (uint64_t *)(*(void *)(v25 + 672) + 8 * *(unsigned int *)(v25 + 688)))
  {
    uint64_t v27 = (llvm::MDNode *)*v40[0];
  }
  uint64_t v23 = a12;
  LOWORD(a2) = v36;
  a5 = v37;
  int v24 = a9;
  int v22 = a13;
  if (!v27)
  {
    if (a17)
    {
LABEL_7:
      uint64_t v41 = a4;
      uint64_t v42 = a6;
      uint64_t v43 = a3;
      uint64_t v44 = a7;
      uint64_t v45 = a14;
      uint64_t v46 = a15;
      uint64_t v28 = v23;
      int v29 = a5;
      __int16 v30 = a2;
      int v31 = v22;
      int v32 = v24;
      int v33 = (char *)operator new(0x78uLL);
      uint64_t v27 = (llvm::MDNode *)(v33 + 64);
      llvm::MDNode::Header::Header((uint64_t)(v33 + 48), 6uLL, a16);
      llvm::MDNode::MDNode((uint64_t)(v33 + 64), (uint64_t)a1, 12, a16, (uint64_t)&v41, 6, 0, 0);
      *((_WORD *)v33 + 33) = v30;
      *((_DWORD *)v33 + 20) = v29;
      *((_DWORD *)v33 + 21) = v31;
      *((_DWORD *)v33 + 26) = v32;
      *((void *)v33 + 11) = a8;
      *((void *)v33 + 12) = a10;
      *(void *)(v33 + 108) = a11;
      if ((v28 & 0xFF00000000) != 0) {
        *((_DWORD *)v33 + 17) = v28;
      }
      uint64_t v34 = *a1;
      unint64_t v39 = v33 + 64;
      if (a16 == 1)
      {
        llvm::MDNode::storeDistinctInContext(v27);
      }
      else if (!a16)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v34 + 672, (uint64_t *)&v39, (uint64_t)v40);
        return (uint64_t)v39;
      }
    }
  }
  return (uint64_t)v27;
}

uint64_t llvm::DICompositeType::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  uint64_t v27 = a21;
  uint64_t v26 = a22;
  uint64_t v29 = a19;
  uint64_t v28 = a20;
  uint64_t v30 = a18;
  unsigned int v31 = a11;
  uint64_t v32 = a10;
  unsigned int v33 = a9;
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (a23) {
    goto LABEL_7;
  }
  uint64_t v51 = a1;
  uint64_t v52 = a8;
  uint64_t v34 = *a1;
  uint64_t v35 = (uint64_t *)(*a1 + 696);
  __int16 v49 = a2;
  int v50 = a5;
  LODWORD(v55) = a2;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  LODWORD(v58) = a5;
  uint64_t v47 = a6;
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  uint64_t v48 = a7;
  uint64_t v61 = a8;
  uint64_t v62 = a10;
  unint64_t v63 = __PAIR64__(a11, a9);
  uint64_t v64 = a12;
  LODWORD(v65) = a13;
  uint64_t v66 = a14;
  uint64_t v67 = a15;
  uint64_t v68 = a16;
  unint64_t v69 = a17;
  uint64_t v70 = a18;
  uint64_t v71 = a19;
  uint64_t v72 = a20;
  uint64_t v73 = a21;
  uint64_t v74 = a22;
  v54[0] = 0;
  __int16 v36 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(v35, (uint64_t)&v55, v54)&& v54[0] != (uint64_t *)(*(void *)(v34 + 696) + 8 * *(unsigned int *)(v34 + 712)))
  {
    __int16 v36 = (llvm::MDNode *)*v54[0];
  }
  a1 = v51;
  a8 = v52;
  LOWORD(a2) = v49;
  a5 = v50;
  uint64_t v32 = a10;
  unsigned int v31 = a11;
  unsigned int v33 = a9;
  a7 = v48;
  uint64_t v26 = a22;
  uint64_t v28 = a20;
  uint64_t v27 = a21;
  uint64_t v29 = a19;
  a6 = v47;
  uint64_t v30 = a18;
  if (!v36)
  {
    if (a24)
    {
LABEL_7:
      uint64_t v55 = a4;
      uint64_t v56 = a6;
      uint64_t v57 = a3;
      uint64_t v58 = a7;
      uint64_t v59 = a12;
      uint64_t v60 = a14;
      uint64_t v61 = a15;
      uint64_t v62 = a16;
      unint64_t v63 = a17;
      uint64_t v64 = v30;
      uint64_t v65 = v29;
      uint64_t v66 = v28;
      uint64_t v67 = v27;
      uint64_t v68 = v26;
      int v37 = a1;
      int v38 = a5;
      __int16 v39 = a2;
      uint64_t v40 = v32;
      unsigned int v41 = v33;
      unsigned int v42 = v31;
      uint64_t v43 = a8;
      uint64_t v44 = operator new(0xB0uLL);
      __int16 v36 = (llvm::MDNode *)(v44 + 64);
      llvm::MDNode::Header::Header((uint64_t)(v44 + 56), 0xEuLL, a23);
      llvm::MDNode::MDNode((uint64_t)(v44 + 64), (uint64_t)v37, 13, a23, (uint64_t)&v55, 14, 0, 0);
      v44[65] = v39;
      *((_DWORD *)v44 + 36) = v38;
      *((_DWORD *)v44 + 37) = v42;
      *((void *)v44 + 19) = v43;
      *((void *)v44 + 20) = v40;
      *((_DWORD *)v44 + 42) = v41;
      *((_DWORD *)v44 + 43) = a13;
      uint64_t v45 = *v37;
      uint64_t v53 = v44 + 64;
      if (a23 == 1)
      {
        llvm::MDNode::storeDistinctInContext(v36);
      }
      else if (!a23)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v45 + 696, (uint64_t *)&v53, (uint64_t)v54);
        return (uint64_t)v53;
      }
    }
  }
  return (uint64_t)v36;
}

uint64_t llvm::DICompositeType::buildODRType(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  v45[14] = *MEMORY[0x263EF8340];
  uint64_t v22 = *a1;
  if (!*(unsigned char *)(*a1 + 1224)) {
    return 0;
  }
  v45[0] = 0;
  char v30 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(v22 + 1200), *(_DWORD *)(v22 + 1216), a2, v45);
  unsigned int v31 = (uint64_t *)v45[0];
  if ((v30 & 1) == 0)
  {
    int v36 = *(_DWORD *)(v22 + 1208);
    unsigned int v37 = *(_DWORD *)(v22 + 1216);
    if (4 * v36 + 4 >= 3 * v37)
    {
      v37 *= 2;
    }
    else if (v37 + ~v36 - *(_DWORD *)(v22 + 1212) > v37 >> 3)
    {
LABEL_12:
      ++*(_DWORD *)(v22 + 1208);
      if (*v31 != -4096) {
        --*(_DWORD *)(v22 + 1212);
      }
      uint64_t *v31 = a2;
      v31[1] = 0;
      uint64_t v33 = (uint64_t)(v31 + 1);
      goto LABEL_15;
    }
    llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(v22 + 1200, v37);
    v45[0] = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(v22 + 1200), *(_DWORD *)(v22 + 1216), a2, v45);
    unsigned int v31 = (uint64_t *)v45[0];
    goto LABEL_12;
  }
  uint64_t v33 = v45[0] + 8;
  uint64_t result = *(void *)(v45[0] + 8);
  if (!result)
  {
LABEL_15:
    uint64_t result = llvm::DICompositeType::getImpl(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a2, a17, a18, a19,
               a20,
               a21,
               a22,
               1,
               1);
    *(void *)uint64_t v33 = result;
    return result;
  }
  if (*(unsigned __int16 *)(result + 2) != a3) {
    return 0;
  }
  if ((a12 & 4) == 0 && (*(_DWORD *)(result + 20) & 4) != 0)
  {
    *(_WORD *)(result + 2) = a3;
    *(_DWORD *)(result + 16) = a6;
    *(_DWORD *)(result + 20) = a12;
    *(_DWORD *)(result + 40) = a10;
    *(_DWORD *)(result + 44) = a14;
    *(void *)(result + 24) = a9;
    *(void *)(result + 32) = a11;
    v45[0] = a5;
    v45[1] = a7;
    v45[2] = a4;
    v45[3] = a8;
    v45[4] = a13;
    v45[5] = a15;
    v45[6] = a16;
    v45[7] = a2;
    v45[8] = a17;
    v45[9] = a18;
    v45[10] = a19;
    v45[11] = a20;
    v45[12] = a21;
    v45[13] = a22;
    uint64_t v34 = *(void *)(result - 16);
    unsigned int v35 = (v34 & 2) != 0 ? *(_DWORD *)(result - 24) : (v34 >> 6) & 0xF;
    if (v35)
    {
      uint64_t v38 = 0;
      uint64_t v39 = v35;
      do
      {
        uint64_t v40 = *(void *)v33;
        unint64_t v41 = *(void *)(*(void *)v33 - 16);
        if ((v41 & 2) != 0) {
          uint64_t v42 = *(void *)(v40 - 32);
        }
        else {
          uint64_t v42 = *(void *)v33 - 16 - 8 * ((v41 >> 2) & 0xF);
        }
        uint64_t v43 = v45[v38];
        if (v43 != *(void *)(v42 + 8 * v38)) {
          llvm::MDNode::setOperand(v40, v38, v43);
        }
        ++v38;
      }
      while (v39 != v38);
      return *(void *)v33;
    }
  }
  return result;
}

llvm::MDNode *llvm::DISubroutineType::getImpl(void *a1, int a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 720);
  LODWORD(v20) = a2;
  BYTE4(v20) = a3;
  uint64_t v21 = a4;
  uint64_t v19 = 0;
  int v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubroutineType>>(v13, (int *)&v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 720) + 8 * *(unsigned int *)(v12 + 736))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = a4;
    __int16 v17 = operator new(0x60uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 16), 4uLL, a5);
    uint64_t v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 24), (uint64_t)a1, 14, a5, (uint64_t)&v20, 4, 0, 0);
    v17[25] = 21;
    *((_DWORD *)v17 + 16) = 0;
    *((_DWORD *)v17 + 17) = a2;
    *((void *)v17 + 9) = 0;
    *((void *)v17 + 10) = 0;
    *((_DWORD *)v17 + 22) = 0;
    *((unsigned char *)v17 + 92) = a3;
    return llvm::MDNode::storeImpl<llvm::DISubroutineType,llvm::DenseSet<llvm::DISubroutineType*,llvm::MDNodeInfo<llvm::DISubroutineType>>>(v18, a5, *a1 + 720);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DISubroutineType,llvm::DenseSet<llvm::DISubroutineType*,llvm::MDNodeInfo<llvm::DISubroutineType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

__n128 *llvm::DIFile::getImpl(void *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_7;
  }
  uint64_t v14 = *a1;
  __int16 v15 = (uint64_t *)(*a1 + 744);
  long long v27 = *a4;
  uint64_t v16 = *((void *)a4 + 2);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v28 = v16;
  uint64_t v29 = a5;
  uint64_t v24 = 0;
  int v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(v15, &v25, (uint64_t **)&v24);
  uint64_t result = 0;
  if (v17 && v24 != (__n128 **)(*(void *)(v14 + 744) + 8 * *(unsigned int *)(v14 + 760))) {
    uint64_t result = *v24;
  }
  if (!result && a7)
  {
LABEL_7:
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    if (*((unsigned char *)a4 + 16)) {
      uint64_t v19 = *((void *)a4 + 1);
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v27 = v19;
    *((void *)&v27 + 1) = a5;
    uint64_t v20 = operator new(0x60uLL);
    llvm::MDNode::Header::Header((uint64_t)(v20 + 16), 4uLL, a6);
    long long v22 = *a4;
    uint64_t v23 = *((void *)a4 + 2);
    uint64_t v21 = (__n128 *)llvm::MDNode::MDNode((uint64_t)(v20 + 24), (uint64_t)a1, 15, a6, (uint64_t)&v25, 4, 0, 0);
    v20[25] = 41;
    *((_OWORD *)v20 + 4) = v22;
    *((void *)v20 + 10) = v23;
    *((void *)v20 + 11) = a5;
    return llvm::MDNode::storeImpl<llvm::DIFile,llvm::DenseSet<llvm::DIFile*,llvm::MDNodeInfo<llvm::DIFile>>>(v21, a6, *a1 + 744);
  }
  return result;
}

__n128 *llvm::MDNode::storeImpl<llvm::DIFile,llvm::DenseSet<llvm::DIFile*,llvm::MDNodeInfo<llvm::DIFile>>>(__n128 *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

char *llvm::DICompileUnit::getImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, int a9, long long a10, long long a11, uint64_t a12, uint64_t a13, char a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a6;
  v26[3] = a8;
  long long v27 = a10;
  long long v28 = a11;
  uint64_t v29 = a12;
  uint64_t v30 = a18;
  uint64_t v31 = a19;
  uint64_t v23 = operator new(0xA0uLL);
  llvm::MDNode::Header::Header((uint64_t)(v23 + 44), 0xBuLL, a20);
  llvm::MDNode::MDNode((uint64_t)(v23 + 52), a1, 16, a20, (uint64_t)v26, 11, 0, 0);
  v23[53] = 17;
  *((_DWORD *)v23 + 30) = a2;
  *((unsigned char *)v23 + 124) = a5;
  *((_DWORD *)v23 + 32) = a7;
  *((_DWORD *)v23 + 33) = a9;
  *((void *)v23 + 17) = a13;
  *((unsigned char *)v23 + 144) = a14;
  *((unsigned char *)v23 + 145) = a15;
  *((_DWORD *)v23 + 37) = a16;
  *((unsigned char *)v23 + 152) = a17;
  if (a20 == 1) {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)(v23 + 52));
  }
  return (char *)(v23 + 52);
}

const char *llvm::DISubprogram::getFlagString(int a1)
{
  uint64_t result = (const char *)&str_36_4;
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 0:
        uint64_t result = "DISPFlagZero";
        break;
      case 1:
        uint64_t result = "DISPFlagVirtual";
        break;
      case 2:
        uint64_t result = "DISPFlagPureVirtual";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        uint64_t result = "DISPFlagLocalToUnit";
        break;
      case 8:
        uint64_t result = "DISPFlagDefinition";
        break;
      default:
        if (a1 == 16) {
          uint64_t result = "DISPFlagOptimized";
        }
        break;
    }
  }
  else if (a1 <= 255)
  {
    int v7 = "DISPFlagElemental";
    uint64_t v8 = "DISPFlagRecursive";
    if (a1 != 128) {
      uint64_t v8 = (const char *)&str_36_4;
    }
    if (a1 != 64) {
      int v7 = v8;
    }
    if (a1 == 32) {
      return "DISPFlagPure";
    }
    else {
      return v7;
    }
  }
  else
  {
    unint64_t v3 = "DISPFlagObjCDirect";
    int v4 = "DISPFlagIsTransparentStepping";
    if (a1 != 4096) {
      int v4 = (const char *)&str_36_4;
    }
    if (a1 != 2048) {
      unint64_t v3 = v4;
    }
    int v5 = "DISPFlagMainSubprogram";
    int v6 = "DISPFlagDeleted";
    if (a1 != 512) {
      int v6 = (const char *)&str_36_4;
    }
    if (a1 != 256) {
      int v5 = v6;
    }
    if (a1 <= 2047) {
      return v5;
    }
    else {
      return v3;
    }
  }
  return result;
}

uint64_t llvm::DISubprogram::splitFlags(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 1);
    v3 &= 0x1FFEu;
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 2);
  uint64_t v3 = (v3 & 2 ^ 0x1FFF) & v3;
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 4);
  uint64_t v3 = (v3 & 4 ^ 0x1FFF) & v3;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 8);
  uint64_t v3 = (v3 & 8 ^ 0x1FFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10);
  uint64_t v3 = (v3 & 0x10 ^ 0x1FFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20);
  uint64_t v3 = (v3 & 0x20 ^ 0x1FFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40);
  uint64_t v3 = (v3 & 0x40 ^ 0x1FFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_9:
    if ((v3 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80);
  uint64_t v3 = (v3 & 0x80 ^ 0x1FFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_10:
    if ((v3 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100);
  uint64_t v3 = (v3 & 0x100 ^ 0x1FFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_11:
    if ((v3 & 0x800) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800);
    uint64_t v3 = (v3 & 0x800 ^ 0x1FFF) & v3;
    if ((v3 & 0x1000) == 0) {
      return v3;
    }
    goto LABEL_13;
  }
LABEL_24:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x200);
  uint64_t v3 = (v3 & 0x200 ^ 0x1FFF) & v3;
  if ((v3 & 0x800) != 0) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v3 & 0x1000) != 0)
  {
LABEL_13:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000);
    return (v3 & 0x1000 ^ 0x1FFF) & v3;
  }
  return v3;
}

char *llvm::DISubprogram::getImpl(void *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, uint64_t *a7, int a8, uint64_t *a9, int a10, int a11, int a12, int a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,int a21,char a22)
{
  int v22 = a8;
  uint64_t v26 = a19;
  long long v27 = a18;
  long long v28 = a15;
  uint64_t v29 = a9;
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (a21) {
    goto LABEL_7;
  }
  uint64_t v30 = *a1;
  uint64_t v31 = (uint64_t *)(*a1 + 768);
  __int16 v49 = a2;
  uint64_t v50 = (uint64_t)a3;
  uint64_t v42 = a4;
  uint64_t v43 = a7;
  v51[0] = a4;
  v51[1] = a5;
  int v52 = a6;
  uint64_t v53 = a7;
  int v54 = a8;
  uint64_t v55 = a9;
  int v56 = a10;
  int v57 = a11;
  int v58 = a12;
  int v59 = a13;
  uint64_t v60 = a14;
  uint64_t v61 = a15;
  uint64_t v62 = a16;
  unint64_t v63 = a17;
  uint64_t v64 = a18;
  uint64_t v65 = a19;
  uint64_t v66 = a20;
  __src[0] = 0;
  uint64_t v32 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubprogram>>(v31, (uint64_t)&v49, __src)&& __src[0] != (uint64_t *)(*(void *)(v30 + 768) + 8 * *(unsigned int *)(v30 + 784)))
  {
    uint64_t v32 = (char *)*__src[0];
  }
  int v22 = a8;
  long long v28 = a15;
  uint64_t v29 = a9;
  uint64_t v26 = a19;
  long long v27 = a18;
  a4 = v42;
  a7 = v43;
  if (!v32)
  {
    if (a22)
    {
LABEL_7:
      __src[0] = a5;
      __src[1] = (uint64_t *)a2;
      __src[2] = a3;
      __src[3] = a4;
      __src[4] = a7;
      __src[5] = a14;
      __src[6] = a16;
      __src[7] = a17;
      uint64_t v33 = v29;
      __src[8] = v29;
      __src[9] = v28;
      uint64_t v34 = v28;
      unsigned int v35 = v27;
      __src[10] = v27;
      __src[11] = v26;
      __src[12] = a20;
      __int16 v49 = v51;
      uint64_t v50 = 0xD00000000;
      int v36 = v26;
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v49, __src, &v49);
      int v37 = v50;
      unsigned int v38 = v50;
      if (!a20)
      {
        unsigned int v38 = v50 - 1;
        LODWORD(v50) = v50 - 1;
        if (!v36)
        {
          unsigned int v38 = v37 - 2;
          LODWORD(v50) = v37 - 2;
          if (!v35)
          {
            unsigned int v38 = v37 - 3;
            LODWORD(v50) = v37 - 3;
            if (!v34)
            {
              unsigned int v38 = v37 - 4;
              LODWORD(v50) = v37 - 4;
              if (!v33)
              {
                unsigned int v38 = v37 - 5;
                LODWORD(v50) = v37 - 5;
              }
            }
          }
        }
      }
      uint64_t v32 = llvm::MDNode::operator new(40, v38, a21);
      uint64_t v39 = llvm::MDNode::MDNode((uint64_t)v32, (uint64_t)a1, 17, a21, (uint64_t)v49, v50, 0, 0);
      *(_WORD *)(v39 + 2) = 46;
      *(_DWORD *)(v39 + 16) = a6;
      *(_DWORD *)(v39 + 20) = v22;
      *(_DWORD *)(v39 + 24) = a10;
      *(_DWORD *)(v39 + 28) = a11;
      *(_DWORD *)(v39 + 32) = a12;
      *(_DWORD *)(v39 + 36) = a13;
      uint64_t v40 = *a1;
      uint64_t v47 = (char *)v39;
      if (a21 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v32);
      }
      else if (!a21)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v40 + 768, (uint64_t *)&v47, (uint64_t)__src);
        uint64_t v32 = v47;
      }
      if (v49 != v51) {
        free(v49);
      }
    }
  }
  return v32;
}

llvm::MDNode *llvm::DILexicalBlock::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (HIWORD(a5)) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = a5;
  }
  if (a6) {
    goto LABEL_12;
  }
  uint64_t v14 = *a1;
  __int16 v15 = (uint64_t *)(*a1 + 792);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  int v24 = a4;
  unsigned int v25 = v12;
  uint64_t v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(v15, &v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 792) + 8 * *(unsigned int *)(v14 + 808))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_12:
    uint64_t v22 = a3;
    uint64_t v23 = a2;
    uint64_t v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    uint64_t v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 18, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = 11;
    *((_DWORD *)v19 + 12) = a4;
    v19[26] = v12;
    return llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>(v20, a6, *a1 + 792);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILexicalBlockFile::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 816);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  int v22 = a4;
  uint64_t v19 = 0;
  int v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(v13, &v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 816) + 8 * *(unsigned int *)(v12 + 832))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = a3;
    uint64_t v21 = a2;
    int v17 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 8), 2uLL, a5);
    uint64_t v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 16), (uint64_t)a1, 19, a5, (uint64_t)&v20, 2, 0, 0);
    v17[17] = 11;
    *((_DWORD *)v17 + 12) = a4;
    return llvm::MDNode::storeImpl<llvm::DILexicalBlockFile,llvm::DenseSet<llvm::DILexicalBlockFile*,llvm::MDNodeInfo<llvm::DILexicalBlockFile>>>(v18, a5, *a1 + 816);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILexicalBlockFile,llvm::DenseSet<llvm::DILexicalBlockFile*,llvm::MDNodeInfo<llvm::DILexicalBlockFile>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DINamespace::getImpl(void *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 840);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  LOBYTE(v22) = a4;
  uint64_t v19 = 0;
  int v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(v13, &v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 840) + 8 * *(unsigned int *)(v12 + 856))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = 0;
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    int v17 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 12), 3uLL, a5);
    uint64_t v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 20), (uint64_t)a1, 20, a5, (uint64_t)&v20, 3, 0, 0);
    v17[21] = 57;
    *((unsigned char *)v17 + 56) = v17[28] & 0xFE | a4;
    return llvm::MDNode::storeImpl<llvm::DINamespace,llvm::DenseSet<llvm::DINamespace*,llvm::MDNodeInfo<llvm::DINamespace>>>(v18, a5, *a1 + 840);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DINamespace,llvm::DenseSet<llvm::DINamespace*,llvm::MDNodeInfo<llvm::DINamespace>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DICommonBlock::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a7) {
    goto LABEL_9;
  }
  uint64_t v16 = *a1;
  int v17 = (uint64_t *)(*a1 + 1104);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  int v28 = a6;
  uint64_t v23 = 0;
  int v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(v17, &v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(void *)(v16 + 1104) + 8 * *(unsigned int *)(v16 + 1120))) {
    uint64_t result = *v23;
  }
  if (!result && a8)
  {
LABEL_9:
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a5;
    uint64_t v21 = operator new(0x48uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 16), 4uLL, a7);
    uint64_t v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 24), (uint64_t)a1, 32, a7, (uint64_t)&v24, 4, 0, 0);
    v21[25] = 26;
    *((_DWORD *)v21 + 16) = a6;
    return llvm::MDNode::storeImpl<llvm::DICommonBlock,llvm::DenseSet<llvm::DICommonBlock*,llvm::MDNodeInfo<llvm::DICommonBlock>>>(v22, a7, *a1 + 1104);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DICommonBlock,llvm::DenseSet<llvm::DICommonBlock*,llvm::MDNodeInfo<llvm::DICommonBlock>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIModule::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, int a10, char a11)
{
  int v11 = a8;
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a10) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t *)(*a1 + 864);
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  int v33 = a8;
  char v34 = a9;
  uint64_t v26 = 0;
  int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIModule>>(v20, &v27, (uint64_t **)&v26);
  uint64_t result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(void *)(v19 + 864) + 8 * *(unsigned int *)(v19 + 880))) {
    uint64_t result = *v26;
  }
  int v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = a4;
      uint64_t v30 = a5;
      uint64_t v31 = a6;
      uint64_t v32 = a7;
      uint64_t v23 = operator new(0x58uLL);
      llvm::MDNode::Header::Header((uint64_t)(v23 + 24), 6uLL, a10);
      uint64_t v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 32), (uint64_t)a1, 21, a10, (uint64_t)&v27, 6, 0, 0);
      v23[33] = 30;
      *((_DWORD *)v23 + 20) = v11;
      *((unsigned char *)v23 + 84) = a9;
      return llvm::MDNode::storeImpl<llvm::DIModule,llvm::DenseSet<llvm::DIModule*,llvm::MDNodeInfo<llvm::DIModule>>>(v24, a10, *a1 + 864);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIModule,llvm::DenseSet<llvm::DIModule*,llvm::MDNodeInfo<llvm::DIModule>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DITemplateTypeParameter::getImpl(void *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a5) {
    goto LABEL_9;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t *)(*a1 + 888);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  char v22 = a4;
  uint64_t v19 = 0;
  int v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>>(v13, &v20, (uint64_t **)&v19);
  uint64_t result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(void *)(v12 + 888) + 8 * *(unsigned int *)(v12 + 904))) {
    uint64_t result = *v19;
  }
  if (!result && a6)
  {
LABEL_9:
    uint64_t v20 = a2;
    uint64_t v21 = a3;
    int v17 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 8), 2uLL, a5);
    int v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 16), (uint64_t)a1, 22, a5, (uint64_t)&v20, 2, 0, 0);
    v17[17] = 47;
    *((unsigned char *)v17 + 48) = a4;
    return llvm::MDNode::storeImpl<llvm::DITemplateTypeParameter,llvm::DenseSet<llvm::DITemplateTypeParameter*,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>>>(v18, a5, *a1 + 888);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DITemplateTypeParameter,llvm::DenseSet<llvm::DITemplateTypeParameter*,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DITemplateValueParameter::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8)
{
  __int16 v13 = a2;
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a7) {
    goto LABEL_9;
  }
  uint64_t v16 = *a1;
  int v17 = (uint64_t *)(*a1 + 912);
  LODWORD(v24) = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  char v27 = a5;
  uint64_t v28 = a6;
  uint64_t v23 = 0;
  int v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(v17, (int *)&v24, (uint64_t **)&v23);
  uint64_t result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(void *)(v16 + 912) + 8 * *(unsigned int *)(v16 + 928))) {
    uint64_t result = *v23;
  }
  if (!result && a8)
  {
LABEL_9:
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a6;
    uint64_t v21 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 12), 3uLL, a7);
    char v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 20), (uint64_t)a1, 23, a7, (uint64_t)&v24, 3, 0, 0);
    v21[21] = v13;
    *((unsigned char *)v21 + 56) = a5;
    return llvm::MDNode::storeImpl<llvm::DITemplateValueParameter,llvm::DenseSet<llvm::DITemplateValueParameter*,llvm::MDNodeInfo<llvm::DITemplateValueParameter>>>(v22, a7, *a1 + 912);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DITemplateValueParameter,llvm::DenseSet<llvm::DITemplateValueParameter*,llvm::MDNodeInfo<llvm::DITemplateValueParameter>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIGlobalVariable::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, char a15)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a14) {
    goto LABEL_7;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = (uint64_t *)(*a1 + 936);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  LODWORD(v34) = a6;
  uint64_t v26 = a7;
  uint64_t v35 = a7;
  LOBYTE(v36) = a8;
  BYTE1(v36) = a9;
  uint64_t v37 = a10;
  uint64_t v38 = a11;
  int v39 = a12;
  uint64_t v40 = a13;
  uint64_t v29 = 0;
  int v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>>(v21, &v30, (uint64_t **)&v29);
  uint64_t result = 0;
  if (v22 && v29 != (llvm::MDNode **)(*(void *)(v20 + 936) + 8 * *(unsigned int *)(v20 + 952))) {
    uint64_t result = *v29;
  }
  a7 = v26;
  if (!result)
  {
    if (a15)
    {
LABEL_7:
      uint64_t v30 = a2;
      uint64_t v31 = a3;
      uint64_t v32 = a5;
      uint64_t v33 = a7;
      uint64_t v34 = a3;
      uint64_t v35 = a4;
      uint64_t v36 = a10;
      uint64_t v37 = a11;
      uint64_t v38 = a13;
      uint64_t v24 = operator new(0x78uLL);
      llvm::MDNode::Header::Header((uint64_t)(v24 + 36), 9uLL, a14);
      uint64_t v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v24 + 44), (uint64_t)a1, 24, a14, (uint64_t)&v30, 9, 0, 0);
      v24[45] = 52;
      *((_DWORD *)v24 + 26) = a6;
      *((_DWORD *)v24 + 27) = a12;
      *((unsigned char *)v24 + 112) = a8;
      *((unsigned char *)v24 + 113) = a9;
      return llvm::MDNode::storeImpl<llvm::DIGlobalVariable,llvm::DenseSet<llvm::DIGlobalVariable*,llvm::MDNodeInfo<llvm::DIGlobalVariable>>>(v25, a14, *a1 + 936);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIGlobalVariable,llvm::DenseSet<llvm::DIGlobalVariable*,llvm::MDNodeInfo<llvm::DIGlobalVariable>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILocalVariable::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, char a12)
{
  int v12 = a8;
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a11) {
    goto LABEL_7;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = (uint64_t *)(*a1 + 960);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  LODWORD(v32) = a5;
  uint64_t v33 = a6;
  __int16 v26 = a7;
  int v34 = a7;
  int v35 = a8;
  int v36 = a9;
  uint64_t v37 = a10;
  uint64_t v28 = 0;
  int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(v20, &v29, (uint64_t **)&v28);
  uint64_t result = 0;
  if (v21 && v28 != (llvm::MDNode **)(*(void *)(v19 + 960) + 8 * *(unsigned int *)(v19 + 976))) {
    uint64_t result = *v28;
  }
  LOWORD(a7) = v26;
  int v12 = a8;
  if (!result)
  {
    if (a12)
    {
LABEL_7:
      uint64_t v29 = a2;
      uint64_t v30 = a3;
      uint64_t v31 = a4;
      uint64_t v32 = a6;
      uint64_t v33 = a10;
      __int16 v23 = a7;
      uint64_t v24 = operator new(0x58uLL);
      llvm::MDNode::Header::Header((uint64_t)(v24 + 20), 5uLL, a11);
      uint64_t v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v24 + 28), (uint64_t)a1, 25, a11, (uint64_t)&v29, 5, 0, 0);
      v24[29] = 52;
      *((_DWORD *)v24 + 18) = a5;
      *((_DWORD *)v24 + 19) = a9;
      v24[40] = v23;
      *((_DWORD *)v24 + 21) = v12;
      return llvm::MDNode::storeImpl<llvm::DILocalVariable,llvm::DenseSet<llvm::DILocalVariable*,llvm::MDNodeInfo<llvm::DILocalVariable>>>(v25, a11, *a1 + 960);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILocalVariable,llvm::DenseSet<llvm::DILocalVariable*,llvm::MDNodeInfo<llvm::DILocalVariable>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  uint64_t v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::DIVariable::getSizeInBits(llvm::DIVariable *this)
{
  unint64_t v1 = *((void *)this - 2);
  if ((v1 & 2) != 0) {
    uint64_t v2 = (char *)*((void *)this - 4);
  }
  else {
    uint64_t v2 = (char *)this - 8 * ((v1 >> 2) & 0xF) - 16;
  }
  while (1)
  {
    unint64_t v3 = *((void *)v2 + 3);
    if (!v3) {
      goto LABEL_13;
    }
    int v4 = *(unsigned __int8 *)v3;
    if ((v4 - 11) >= 4 && v4 != 34)
    {
LABEL_12:
      unint64_t v3 = 0;
LABEL_13:
      uint64_t v7 = 0;
      return v7 | v3;
    }
    uint64_t v5 = *(void *)(v3 + 24);
    if (v5) {
      break;
    }
    if (v4 != 12) {
      goto LABEL_12;
    }
    unint64_t v6 = *(void *)(v3 - 16);
    if ((v6 & 2) != 0) {
      uint64_t v2 = *(char **)(v3 - 32);
    }
    else {
      uint64_t v2 = (char *)(v3 - 16 - 8 * ((v6 >> 2) & 0xF));
    }
  }
  unint64_t v3 = v5 & 0xFFFFFFFFFFFFFF00;
  uint64_t v7 = v5;
  return v7 | v3;
}

llvm::MDNode *llvm::DILabel::getImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  __int16 v15 = (uint64_t *)(*a1 + 984);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  int v25 = a5;
  int v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(v15, &v22, (uint64_t **)&v21);
  uint64_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 984) + 8 * *(unsigned int *)(v14 + 1000))) {
    uint64_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 12), 3uLL, a6);
    uint64_t v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 20), (uint64_t)a1, 26, a6, (uint64_t)&v22, 3, 0, 0);
    v19[21] = 10;
    *((_DWORD *)v19 + 14) = a5;
    return llvm::MDNode::storeImpl<llvm::DILabel,llvm::DenseSet<llvm::DILabel*,llvm::MDNodeInfo<llvm::DILabel>>>(v20, a6, *a1 + 984);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILabel,llvm::DenseSet<llvm::DILabel*,llvm::MDNodeInfo<llvm::DILabel>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  unint64_t v3 = this;
  uint64_t v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIExpression::getImpl(void *a1, const void *a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5 = (int)a4;
  if (a4)
  {
    uint64_t v9 = 2;
LABEL_11:
    int v16 = (char *)operator new(8 * v9 + 56) + 8 * v9;
    int v17 = (llvm::MDNode *)(v16 + 16);
    *((_DWORD *)v16 + 2) = 0;
    *(void *)int v16 = *(void *)v16 & 0xFFFFFFFFFFFFFC00 | (v5 != 0) | (unint64_t)(4 * v9);
    if (v5) {
      bzero(v16 - 16, 8 * v9);
    }
    int v18 = llvm::DIExpression::DIExpression(v17, (uint64_t)a1, v5, a2, a3);
    return llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>(v18, v5, *a1 + 528, v19);
  }
  uint64_t v11 = *a1;
  int v12 = (uint64_t *)(*a1 + 528);
  v20[0] = a2;
  v20[1] = a3;
  int v21 = 0;
  int v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIExpression>>(v12, (uint64_t)v20, (uint64_t **)&v21, a4);
  uint64_t result = 0;
  if (v13) {
    BOOL v15 = v21 == (llvm::MDNode **)(*(void *)(v11 + 528) + 8 * *(unsigned int *)(v11 + 544));
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    uint64_t result = *v21;
  }
  if (!result && a5)
  {
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>(llvm::MDNode *this, int a2, uint64_t a3, unint64_t *a4)
{
  int v4 = this;
  unint64_t v6 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v6, a4, (uint64_t)v7);
    return v6;
  }
  return v4;
}

uint64_t llvm::DIAssignID::getImpl(uint64_t a1, int a2)
{
  BOOL v4 = a2 != 0;
  int v5 = (char *)operator new((16 * v4) | 0x20) + 16 * v4;
  uint64_t v6 = (uint64_t)(v5 + 16);
  *((_DWORD *)v5 + 2) = 0;
  *(void *)int v5 = *(void *)v5 & 0xFFFFFFFFFFFFFC00 | (v4 || 8 * v4);
  if (a2) {
    bzero(v5 - 16, 16 * v4);
  }
  *(unsigned char *)uint64_t v6 = 29;
  *(_WORD *)(v6 + 2) = 0;
  *(_DWORD *)(v6 + 4) = 0;
  *(void *)(v6 + 8) = a1;
  *(unsigned char *)(v6 + 1) = a2 & 0x7F;
  if ((a2 & 0x7F) == 0) {
    llvm::MDNode::countUnresolvedOperands(v6);
  }
  if (a2 == 1) {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v6);
  }
  return v6;
}

uint64_t llvm::DIExpression::ExprOperand::getSize(uint64_t **this)
{
  uint64_t v1 = **this;
  if ((unint64_t)(v1 - 112) < 0x20) {
    return 2;
  }
  uint64_t result = 3;
  if (v1 <= 147)
  {
    BOOL v3 = (unint64_t)v1 > 0x23 || ((1 << v1) & 0x800030000) == 0;
    if (!v3 || v1 == 144) {
      return 2;
    }
    if (v1 != 146) {
      return 1;
    }
  }
  else
  {
    if ((unint64_t)(v1 - 4096) > 5) {
      goto LABEL_6;
    }
    if (((1 << v1) & 0x2C) != 0) {
      return 2;
    }
    if (((1 << v1) & 3) == 0)
    {
LABEL_6:
      if (v1 != 148) {
        return 1;
      }
      return 2;
    }
  }
  return result;
}

BOOL llvm::DIExpression::isValid(llvm::DIExpression *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  uint64_t v11 = v1;
  if (v2 == v1) {
    return 1;
  }
  BOOL v3 = v1;
  BOOL v4 = v1;
  while (1)
  {
    int v5 = &v4[llvm::DIExpression::ExprOperand::getSize(&v11)];
    if (v5 > v2) {
      return 0;
    }
    unint64_t v6 = *v4;
    if ((unint64_t)(*v4 - 80) < 0x40) {
      return 1;
    }
    if (v6 <= 0x30)
    {
      if (((1 << v6) & 0x100FF7D170040) != 0) {
        goto LABEL_7;
      }
      if (v6 == 22)
      {
        if ((((char *)v2 - (char *)v1) & 0x7FFFFFFF8) == 8) {
          return 0;
        }
        goto LABEL_7;
      }
    }
    if (v6 - 144 > 0xF) {
      break;
    }
    if (((1 << (v6 + 112)) & 0x95) != 0) {
      goto LABEL_7;
    }
    if (v6 != 159) {
      break;
    }
    if (v5 != v2)
    {
      uint64_t v10 = v3;
      if (v3[llvm::DIExpression::ExprOperand::getSize(&v10)] != 4096) {
        return 0;
      }
    }
LABEL_7:
    uint64_t v11 = v5;
    BOOL v3 = v5;
    BOOL v4 = v5;
    if (v5 == v2) {
      return 1;
    }
  }
  unint64_t v7 = v6 - 4096;
  if (v7 > 5) {
    return 0;
  }
  if (((1 << v7) & 0x36) != 0) {
    goto LABEL_7;
  }
  if (v7)
  {
    uint64_t v10 = v1;
    if (*v1 == 4101 && !v1[1]) {
      v1 += llvm::DIExpression::ExprOperand::getSize(&v10);
    }
    if (v4 != v1) {
      return 0;
    }
    return v4[1] == 1;
  }
  else
  {
    return v5 == v2;
  }
}

int8x16_t llvm::DIExpression::getFragmentInfo@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  unint64_t v7 = a1;
  if (a1 == a2)
  {
LABEL_5:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    int v5 = a1;
    while (*v5 != 4096)
    {
      v5 += llvm::DIExpression::ExprOperand::getSize(&v7);
      unint64_t v7 = v5;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
    int8x16_t result = vextq_s8(*(int8x16_t *)(v5 + 1), *(int8x16_t *)(v5 + 1), 8uLL);
    *a3 = result;
    a3[1].i8[0] = 1;
  }
  return result;
}

llvm::MDNode *llvm::DIExpression::append(void *a1, unsigned char *__src, uint64_t a3)
{
  v18[16] = *MEMORY[0x263EF8340];
  uint64_t v17 = 0x1000000000;
  unint64_t v6 = (uint64_t *)a1[2];
  unint64_t v7 = (uint64_t *)a1[3];
  BOOL v15 = v6;
  for (i = v18; v6 != v7; BOOL v15 = v6)
  {
    uint64_t v14 = v6;
    if (*v6 == 4096 || *v6 == 159)
    {
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, __src, &__src[8 * a3]);
      uint64_t __src = 0;
      a3 = 0;
      unint64_t v6 = v14;
    }
    int Size = llvm::DIExpression::ExprOperand::getSize(&v14);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, v6, &v6[Size]);
    uint64_t v9 = v15;
    unint64_t v6 = &v9[llvm::DIExpression::ExprOperand::getSize(&v15)];
  }
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, __src, &__src[8 * a3]);
  uint64_t v10 = a1[1];
  uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0) {
    uint64_t v11 = (void *)*v11;
  }
  uint64_t Impl = llvm::DIExpression::getImpl(v11, i, v17, 0, 1);
  if (i != v18) {
    free(i);
  }
  return Impl;
}

uint64_t llvm::DIExpression::isConstant(llvm::DIExpression *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  uint64_t v2 = (*((void *)this + 3) - (void)v1) >> 3;
  if (v2 != 2)
  {
    if (v2 != 6 && v2 != 3) {
      goto LABEL_19;
    }
    uint64_t v4 = *v1;
    if ((*v1 & 0xFFFFFFFFFFFFFFFELL) != 0x10) {
      goto LABEL_19;
    }
    if (v2 == 6)
    {
      if (v1[2] != 159 || v1[3] != 4096) {
        goto LABEL_19;
      }
    }
    else if (v2 == 3 && v1[2] != 159)
    {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v4 = *v1;
  if (*v1 == 16)
  {
LABEL_17:
    BOOL v5 = v4 == 16;
    goto LABEL_18;
  }
  if (v4 != 17)
  {
LABEL_19:
    uint64_t v6 = 0;
    BOOL v5 = 0;
    return v5 | v6;
  }
  BOOL v5 = 0;
LABEL_18:
  uint64_t v6 = 0x100000000;
  return v5 | v6;
}

llvm::MDNode *llvm::DIGlobalVariableExpression::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a4) {
    goto LABEL_9;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t *)(*a1 + 552);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v18 = 0;
  int v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(v11, &v19, (uint64_t **)&v18);
  int8x16_t result = 0;
  if (v12 && v18 != (llvm::MDNode **)(*(void *)(v10 + 552) + 8 * *(unsigned int *)(v10 + 568))) {
    int8x16_t result = *v18;
  }
  if (!result && a5)
  {
LABEL_9:
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    BOOL v15 = operator new(0x30uLL);
    uint64_t v16 = (uint64_t)v15 + 32;
    llvm::MDNode::Header::Header((uint64_t)v15 + 16, 2uLL, a4);
    uint64_t v17 = (llvm::MDNode *)llvm::MDNode::MDNode(v16, (uint64_t)a1, 7, a4, (uint64_t)&v19, 2, 0, 0);
    return llvm::MDNode::storeImpl<llvm::DIGlobalVariableExpression,llvm::DenseSet<llvm::DIGlobalVariableExpression*,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>>>(v17, a4, *a1 + 552);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIGlobalVariableExpression,llvm::DenseSet<llvm::DIGlobalVariableExpression*,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  BOOL v3 = this;
  BOOL v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIObjCProperty::getImpl(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a9) {
    goto LABEL_7;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = (uint64_t *)(*a1 + 1008);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  LODWORD(v27) = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  int v30 = a7;
  uint64_t v31 = a8;
  uint64_t v24 = 0;
  int v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(v19, &v25, (uint64_t **)&v24);
  int8x16_t result = 0;
  if (v20 && v24 != (llvm::MDNode **)(*(void *)(v18 + 1008) + 8 * *(unsigned int *)(v18 + 1024))) {
    int8x16_t result = *v24;
  }
  if (!result && a10)
  {
LABEL_7:
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a5;
    uint64_t v28 = a6;
    uint64_t v29 = a8;
    uint64_t v22 = operator new(0x50uLL);
    llvm::MDNode::Header::Header((uint64_t)(v22 + 20), 5uLL, a9);
    uint64_t v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v22 + 28), (uint64_t)a1, 27, a9, (uint64_t)&v25, 5, 0, 0);
    v22[29] = 16896;
    *((_DWORD *)v22 + 18) = a4;
    *((_DWORD *)v22 + 19) = a7;
    return llvm::MDNode::storeImpl<llvm::DIObjCProperty,llvm::DenseSet<llvm::DIObjCProperty*,llvm::MDNodeInfo<llvm::DIObjCProperty>>>(v23, a9, *a1 + 1008);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIObjCProperty,llvm::DenseSet<llvm::DIObjCProperty*,llvm::MDNodeInfo<llvm::DIObjCProperty>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  BOOL v3 = this;
  BOOL v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIImportedEntity::getImpl(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  __int16 v16 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a9) {
    goto LABEL_7;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = (uint64_t *)(*a1 + 1032);
  LODWORD(v25) = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  LODWORD(v29) = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v24 = 0;
  int v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(v19, (int *)&v25, (uint64_t **)&v24);
  int8x16_t result = 0;
  if (v20 && v24 != (llvm::MDNode **)(*(void *)(v18 + 1032) + 8 * *(unsigned int *)(v18 + 1048))) {
    int8x16_t result = *v24;
  }
  if (!result && a10)
  {
LABEL_7:
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a7;
    uint64_t v28 = a5;
    uint64_t v29 = a8;
    uint64_t v22 = operator new(0x50uLL);
    llvm::MDNode::Header::Header((uint64_t)(v22 + 20), 5uLL, a9);
    uint64_t v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v22 + 28), (uint64_t)a1, 28, a9, (uint64_t)&v25, 5, 0, 0);
    v22[29] = v16;
    *((_DWORD *)v22 + 18) = a6;
    return llvm::MDNode::storeImpl<llvm::DIImportedEntity,llvm::DenseSet<llvm::DIImportedEntity*,llvm::MDNodeInfo<llvm::DIImportedEntity>>>(v23, a9, *a1 + 1032);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIImportedEntity,llvm::DenseSet<llvm::DIImportedEntity*,llvm::MDNodeInfo<llvm::DIImportedEntity>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  BOOL v3 = this;
  BOOL v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIMacro::getImpl(void *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11 = a2;
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  BOOL v15 = (uint64_t *)(*a1 + 1056);
  unint64_t v22 = __PAIR64__(a3, a2);
  unint64_t v23 = a4;
  unint64_t v24 = a5;
  uint64_t v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (int *)&v22, (uint64_t **)&v21);
  int8x16_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1056) + 8 * *(unsigned int *)(v14 + 1072))) {
    int8x16_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    unint64_t v22 = a4;
    unint64_t v23 = a5;
    uint64_t v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    int v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 30, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = v11;
    *((_DWORD *)v19 + 12) = a3;
    return llvm::MDNode::storeImpl<llvm::DIMacro,llvm::DenseSet<llvm::DIMacro*,llvm::MDNodeInfo<llvm::DIMacro>>>(v20, a6, *a1 + 1056);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIMacro,llvm::DenseSet<llvm::DIMacro*,llvm::MDNodeInfo<llvm::DIMacro>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  BOOL v3 = this;
  BOOL v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIMacroFile::getImpl(void *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11 = a2;
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a6) {
    goto LABEL_9;
  }
  uint64_t v14 = *a1;
  BOOL v15 = (uint64_t *)(*a1 + 1080);
  unint64_t v22 = __PAIR64__(a3, a2);
  unint64_t v23 = a4;
  unint64_t v24 = a5;
  uint64_t v21 = 0;
  int v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (int *)&v22, (uint64_t **)&v21);
  int8x16_t result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(void *)(v14 + 1080) + 8 * *(unsigned int *)(v14 + 1096))) {
    int8x16_t result = *v21;
  }
  if (!result && a7)
  {
LABEL_9:
    unint64_t v22 = a4;
    unint64_t v23 = a5;
    uint64_t v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    int v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 31, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = v11;
    *((_DWORD *)v19 + 12) = a3;
    return llvm::MDNode::storeImpl<llvm::DIMacroFile,llvm::DenseSet<llvm::DIMacroFile*,llvm::MDNodeInfo<llvm::DIMacroFile>>>(v20, a6, *a1 + 1080);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIMacroFile,llvm::DenseSet<llvm::DIMacroFile*,llvm::MDNodeInfo<llvm::DIMacroFile>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  BOOL v3 = this;
  BOOL v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIArgList::getImpl(void *a1, unsigned char *a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5 = (int)a4;
  if (a4)
  {
    uint64_t v9 = 2;
LABEL_11:
    int v16 = (char *)operator new(8 * v9 + 80) + 8 * v9;
    uint64_t v17 = (llvm::MDNode *)(v16 + 16);
    *((_DWORD *)v16 + 2) = 0;
    *(void *)int v16 = *(void *)v16 & 0xFFFFFFFFFFFFFC00 | (v5 != 0) | (unint64_t)(4 * v9);
    if (v5) {
      bzero(v16 - 16, 8 * v9);
    }
    uint64_t v18 = llvm::DIArgList::DIArgList(v17, (uint64_t)a1, v5, a2, a3);
    return llvm::MDNode::storeImpl<llvm::DIArgList,llvm::DenseSet<llvm::DIArgList*,llvm::MDNodeInfo<llvm::DIArgList>>>(v18, v5, *a1 + 1128, v19);
  }
  uint64_t v11 = *a1;
  int v12 = (uint64_t *)(*a1 + 1128);
  v20[0] = a2;
  v20[1] = a3;
  uint64_t v21 = 0;
  int v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIArgList>>(v12, (uint64_t)v20, (uint64_t **)&v21, a4);
  int8x16_t result = 0;
  if (v13) {
    BOOL v15 = v21 == (llvm::MDNode **)(*(void *)(v11 + 1128) + 8 * *(unsigned int *)(v11 + 1144));
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    int8x16_t result = *v21;
  }
  if (!result && a5)
  {
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIArgList,llvm::DenseSet<llvm::DIArgList*,llvm::MDNodeInfo<llvm::DIArgList>>>(llvm::MDNode *this, int a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = this;
  uint64_t v6 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v6, a4, (uint64_t)v7);
    return v6;
  }
  return v4;
}

uint64_t llvm::DIArgList::handleChangedOperand(__n128 *a1, uint64_t a2, uint64_t a3)
{
  llvm::DIArgList::untrack((unint64_t)a1);
  int v9 = a1->n128_u8[1] & 0x7F;
  if ((a1->n128_u8[1] & 0x7F) == 0) {
    llvm::MDNode::eraseFromStore(a1, (uint64_t)v6, v7, v8);
  }
  uint64_t v10 = a1[1].n128_u32[2];
  if (v10)
  {
    unint64_t v11 = a1[1].n128_u64[0];
    uint64_t v12 = 8 * v10;
    do
    {
      if (v11 == a2)
      {
        uint64_t v13 = a3;
        if (!a3)
        {
          uint64_t v14 = (llvm::ValueAsMetadata *)llvm::UndefValue::get(**(llvm::UndefValue ***)(*(void *)a2 + 128), v6);
          uint64_t v13 = llvm::ValueAsMetadata::get(v14, v15);
        }
        *(void *)a2 = v13;
      }
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  if (!v9 && llvm::MDNode::uniquify(a1, (uint64_t)v6, v7, v8) != a1) {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)a1);
  }
  return llvm::DIArgList::track((uint64_t)a1);
}

unint64_t llvm::DIArgList::untrack(unint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      if (*v2) {
        this = llvm::MetadataTracking::untrack((uint64_t)v2, *v2);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::DIArgList::track(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = this | 2;
    uint64_t v4 = 8 * v1;
    do
    {
      if (*v2) {
        this = llvm::MetadataTracking::track((uint64_t)v2, *v2, v3);
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

llvm::MDNode *llvm::DIExpression::DIExpression(llvm::MDNode *this, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  *(unsigned char *)this = 6;
  *((_WORD *)this + 1) = 0;
  *((_DWORD *)this + 1) = 0;
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 1) = a3 & 0x7F;
  if ((a3 & 0x7F) == 0) {
    llvm::MDNode::countUnresolvedOperands((uint64_t)this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (a5)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100]((void *)this + 2, (8 * a5) >> 3);
    uint64_t v8 = (char *)*((void *)this + 3);
    memmove(v8, a4, 8 * a5);
    *((void *)this + 3) = &v8[8 * a5];
  }
  return this;
}

llvm::MDNode *llvm::DIArgList::DIArgList(llvm::MDNode *this, uint64_t a2, char a3, unsigned char *__src, uint64_t a5)
{
  *(unsigned char *)this = 33;
  *((_WORD *)this + 1) = 0;
  *((_DWORD *)this + 1) = 0;
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 1) = a3 & 0x7F;
  if ((a3 & 0x7F) == 0) {
    llvm::MDNode::countUnresolvedOperands((uint64_t)this);
  }
  *((void *)this + 2) = (char *)this + 32;
  *((void *)this + 3) = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)this + 4, __src, &__src[8 * a5]);
  llvm::DIArgList::track((uint64_t)this);
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILocation>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(int *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (uint64_t *)(a1 + 2);
  int v4 = (uint64_t *)(a1 + 4);
  int v5 = (char *)(a1 + 6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, a1, v2, v3, v4, v5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, uint64_t *a8, char *a9)
{
  unint64_t v17 = a2;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, a3, (unint64_t)a4, *a5);
  unint64_t v18 = v17;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, v14, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>(a1, v18, v15, a4, a7, a8, a9);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, char *a7)
{
  unint64_t v14 = a2;
  unsigned int v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v14, a3, (unint64_t)a4, *a5);
  unint64_t v15 = v14;
  uint64_t v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, v11, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>(a1, v15, v12, a4, a7);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILocation>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)(a2 + 4) || *(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(a2 + 2)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    int v4 = *(void **)(a2 - 32);
    if (v2 == *v4)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (*(_DWORD *)(a2 - 24) == 2) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
    return 0;
  }
  int v4 = (void *)(a2 - 16 - 8 * ((v3 >> 2) & 0xF));
  if (v2 != *v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if ((*(void *)(a2 - 16) & 0x3C0) == 0x80)
  {
LABEL_6:
    uint64_t v6 = v4[1];
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v6 = 0;
LABEL_10:
  if (v5 != v6) {
    return 0;
  }
  return *(unsigned char *)(a1 + 24) == *(unsigned __int8 *)(a2 + 1) >> 7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILocation>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILocation>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)uint64_t result = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 4) = v2;
  unint64_t v3 = (void *)(a2 - 16);
  unint64_t v4 = *(void *)(a2 - 16);
  if ((v4 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v3[-((v4 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = *v5;
  if ((*v3 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) == 2)
    {
      uint64_t v6 = *(void **)(a2 - 32);
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  if ((*v3 & 0x3C0) != 0x80) {
    goto LABEL_10;
  }
  uint64_t v6 = &v3[-((*v3 >> 2) & 0xFLL)];
LABEL_9:
  uint64_t v7 = v6[1];
LABEL_11:
  *(void *)(result + 16) = v7;
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 1) >> 7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::GenericDINode>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf(a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v1 = *(_DWORD *)(a1 + 32);
  int v2 = (int *)(a1 + 36);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v5);
  int v5 = v1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v5, 0, v6, v7, v2, v3);
}

uint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 36) == *(unsigned __int16 *)(a2 + 2)
    && ((unint64_t v2 = *(void *)(a2 - 16), (v2 & 2) != 0)
      ? (uint64_t v3 = *(void **)(a2 - 32))
      : (uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(void *)(a1 + 40) == *v3))
  {
    return llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(a1, a2, 1u);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(uint64_t **)(a1 + 16);
  }
  return llvm::MDNodeOpsKey::compareOps<llvm::MDOperand>(v6, v5, a2, a3);
}

uint64_t llvm::MDNodeOpsKey::compareOps<llvm::MDOperand>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = *(void *)(a3 - 16);
  if ((v4 & 2) == 0)
  {
    if (a2 == ((v4 >> 6) & 0xF) - a4)
    {
      uint64_t v5 = a3 - 16 - 8 * ((v4 >> 2) & 0xF);
      if (a2) {
        goto LABEL_4;
      }
      return 1;
    }
    return 0;
  }
  if (a2 != *(_DWORD *)(a3 - 24) - a4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a3 - 32);
  if (!a2) {
    return 1;
  }
LABEL_4:
  uint64_t v6 = (uint64_t *)(v5 + 8 * a4);
  uint64_t v7 = 8 * a2 - 8;
  do
  {
    uint64_t v9 = *a1++;
    uint64_t v8 = v9;
    uint64_t v10 = *v6++;
    BOOL v12 = v8 == v10;
    BOOL v11 = v8 == v10;
    BOOL v12 = !v12 || v7 == 0;
    v7 -= 8;
  }
  while (!v12);
  return v11;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::GenericDINode>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue((uint64_t)v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 - 32);
    uint64_t v5 = *(unsigned int *)(a2 - 24);
  }
  else
  {
    uint64_t v4 = v2 - 8 * ((v3 >> 2) & 0xF);
    uint64_t v5 = (v3 >> 6) & 0xF;
  }
  *(void *)(result + 16) = v4 + 8;
  *(void *)(result + 24) = (8 * v5 - 8) >> 3;
  int v6 = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 36) = v6;
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = (void *)(v2 - 8 * ((v7 >> 2) & 0xF));
  }
  *(void *)(result + 40) = *v8;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      BOOL v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      BOOL v12 = v8;
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(uint64_t *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (*a1 && *(unsigned char *)v2 == 1)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    if (v4 > 0x40) {
      uint64_t v5 = **(void **)(v3 + 24);
    }
    else {
      uint64_t v5 = (uint64_t)(*(void *)(v3 + 24) << -(char)v4) >> -(char)v4;
    }
    uint64_t v7 = v5;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, &v7, a1 + 1, a1 + 2, a1 + 3);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, a1, a1 + 1, a1 + 2, a1 + 3);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = a2 - 16;
  unint64_t v4 = *(void *)(a2 - 16);
  if ((v4 & 2) != 0) {
    uint64_t v5 = *(uint64_t **)(a2 - 32);
  }
  else {
    uint64_t v5 = (uint64_t *)(v3 - 8 * ((v4 >> 2) & 0xF));
  }
  uint64_t v6 = *v5;
  if (v2 != (unsigned char *)v6)
  {
    if (v2)
    {
      if (*v2 == 1) {
        uint64_t v7 = *(unsigned char **)a1;
      }
      else {
        uint64_t v7 = 0;
      }
      if (!v6) {
        return 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (!v6) {
        return 0;
      }
    }
    uint64_t v8 = 0;
    if (!v7 || *(unsigned char *)v6 != 1) {
      return v8;
    }
    uint64_t v9 = *((void *)v7 + 16);
    uint64_t v10 = *(void *)(v6 + 128);
    unsigned int v11 = *(_DWORD *)(v9 + 32);
    if (v11 > 0x40) {
      uint64_t v12 = **(void **)(v9 + 24);
    }
    else {
      uint64_t v12 = (uint64_t)(*(void *)(v9 + 24) << -(char)v11) >> -(char)v11;
    }
    unsigned int v13 = *(_DWORD *)(v10 + 32);
    if (v13 > 0x40) {
      uint64_t v14 = **(void **)(v10 + 24);
    }
    else {
      uint64_t v14 = (uint64_t)(*(void *)(v10 + 24) << -(char)v13) >> -(char)v13;
    }
    if (v12 != v14) {
      return 0;
    }
  }
  BOOL v15 = *(unsigned char **)(a1 + 8);
  if ((v4 & 2) != 0) {
    uint64_t v16 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v16 = v3 - 8 * ((v4 >> 2) & 0xF);
  }
  uint64_t v17 = *(void *)(v16 + 8);
  if (v15 != (unsigned char *)v17)
  {
    if (v15)
    {
      if (*v15 == 1) {
        uint64_t v18 = *(void *)(a1 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
      if (!v17) {
        return 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
      if (!v17) {
        return 0;
      }
    }
    uint64_t v8 = 0;
    if (!v18 || *(unsigned char *)v17 != 1) {
      return v8;
    }
    uint64_t v19 = *(void *)(v18 + 128);
    uint64_t v20 = *(void *)(v17 + 128);
    unsigned int v21 = *(_DWORD *)(v19 + 32);
    if (v21 > 0x40) {
      uint64_t v22 = **(void **)(v19 + 24);
    }
    else {
      uint64_t v22 = (uint64_t)(*(void *)(v19 + 24) << -(char)v21) >> -(char)v21;
    }
    unsigned int v23 = *(_DWORD *)(v20 + 32);
    if (v23 > 0x40) {
      uint64_t v24 = **(void **)(v20 + 24);
    }
    else {
      uint64_t v24 = (uint64_t)(*(void *)(v20 + 24) << -(char)v23) >> -(char)v23;
    }
    if (v22 != v24) {
      return 0;
    }
  }
  uint64_t v25 = *(unsigned char **)(a1 + 16);
  if ((v4 & 2) != 0) {
    uint64_t v26 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v26 = v3 - 8 * ((v4 >> 2) & 0xF);
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v25 == (unsigned char *)v27)
  {
LABEL_61:
    int v35 = *(unsigned char **)(a1 + 24);
    if ((v4 & 2) != 0) {
      uint64_t v36 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v36 = v3 - 8 * ((v4 >> 2) & 0xF);
    }
    uint64_t v37 = *(void *)(v36 + 24);
    if (v35 == (unsigned char *)v37) {
      return 1;
    }
    if (v35)
    {
      if (*v35 == 1) {
        uint64_t v38 = *(void *)(a1 + 24);
      }
      else {
        uint64_t v38 = 0;
      }
      if (!v37) {
        return 0;
      }
    }
    else
    {
      uint64_t v38 = 0;
      if (!v37) {
        return 0;
      }
    }
    if (v38 && *(unsigned char *)v37 == 1)
    {
      uint64_t v39 = *(void *)(v38 + 128);
      uint64_t v40 = *(void *)(v37 + 128);
      unsigned int v41 = *(_DWORD *)(v39 + 32);
      uint64_t v42 = v41 > 0x40 ? **(void **)(v39 + 24) : (uint64_t)(*(void *)(v39 + 24) << -(char)v41) >> -(char)v41;
      unsigned int v43 = *(_DWORD *)(v40 + 32);
      uint64_t v44 = v43 > 0x40 ? **(void **)(v40 + 24) : (uint64_t)(*(void *)(v40 + 24) << -(char)v43) >> -(char)v43;
      if (v42 == v44) {
        return 1;
      }
    }
    return 0;
  }
  if (v25)
  {
    if (*v25 == 1) {
      uint64_t v28 = *(void *)(a1 + 16);
    }
    else {
      uint64_t v28 = 0;
    }
    if (!v27) {
      return 0;
    }
  }
  else
  {
    uint64_t v28 = 0;
    if (!v27) {
      return 0;
    }
  }
  uint64_t v8 = 0;
  if (v28 && *(unsigned char *)v27 == 1)
  {
    uint64_t v29 = *(void *)(v28 + 128);
    uint64_t v30 = *(void *)(v27 + 128);
    unsigned int v31 = *(_DWORD *)(v29 + 32);
    if (v31 > 0x40) {
      uint64_t v32 = **(void **)(v29 + 24);
    }
    else {
      uint64_t v32 = (uint64_t)(*(void *)(v29 + 24) << -(char)v31) >> -(char)v31;
    }
    unsigned int v33 = *(_DWORD *)(v30 + 32);
    if (v33 > 0x40) {
      uint64_t v34 = **(void **)(v30 + 24);
    }
    else {
      uint64_t v34 = (uint64_t)(*(void *)(v30 + 24) << -(char)v33) >> -(char)v33;
    }
    if (v32 != v34) {
      return 0;
    }
    goto LABEL_61;
  }
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucketImpl<llvm::DISubrange *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          unsigned int v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

void *llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  void *result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  result[1] = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  result[2] = v6[2];
  if ((*v2 & 2) != 0) {
    uint64_t v7 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  result[3] = v7[3];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucketImpl<llvm::DISubrange *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>::isKeyOf(a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>::isKeyOf(void *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  return *a1 == *v3 && a1[1] == v3[1] && a1[2] == v3[2] && a1[3] == v3[3];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(uint64_t *a1, llvm::hashing::detail::hash_state **a2, uint64_t **a3)
{
  unsigned char v19[8] = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = (uint64_t *)(a2 + 2);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    int v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    int v9 = 0;
    int v10 = v4 - 1;
    unsigned int v11 = v10 & v8;
    for (int i = 1; ; ++i)
    {
      uint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIEnumerator>::isKeyOf((uint64_t)a2, v14))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v14 = *v13;
      }
      if (v14 == -4096) {
        break;
      }
      if (v9) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == -8192;
      }
      if (v15) {
        int v9 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v16 = v11 + i;
      unsigned int v11 = v16 & v10;
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v13 = v9;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, const llvm::APInt *a2, void *a3, unint64_t *a4, llvm::hashing::detail::hash_state **this, uint64_t *a6)
{
  unint64_t v14 = (unint64_t)a2;
  unint64_t v10 = llvm::hash_value(this, a2, (uint64_t)a3, a4);
  unsigned int v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v14, a3, (unint64_t)a4, v10);
  unint64_t v15 = v14;
  uint64_t v12 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, v11, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v15, v12, (char *)a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIEnumerator>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  if (v2 > 0x40)
  {
    if (memcmp(*(const void **)a1, *(const void **)(a2 + 16), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)) {
      return 0;
    }
  }
  else if (*(void *)a1 != *(void *)(a2 + 16))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24) != (*(_DWORD *)(a2 + 4) != 0)) {
    return 0;
  }
  unint64_t v5 = *(void *)(a2 - 16);
  if ((v5 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = (void *)(a2 - 16 - 8 * ((v5 >> 2) & 0xF));
  }
  return *(void *)(a1 + 16) == *v6;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::MDNodeInfo<llvm::DIEnumerator>::getHashValue(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    unint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        unint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        unint64_t v10 = v13;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DIEnumerator>::getHashValue(uint64_t a1)
{
  void v7[8] = *MEMORY[0x263EF8340];
  llvm::MDNodeKeyImpl<llvm::DIEnumerator>::MDNodeKeyImpl((uint64_t)&v3, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  unint64_t v1 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, &v3, &v5);
  if (v4 >= 0x41 && v3) {
    MEMORY[0x263E50080](v3, 0x1000C8000313F17);
  }
  return v1;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIEnumerator>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)uint64_t result = *(void *)(a2 + 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    unsigned int v4 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v4 = (void *)(a2 - 16 - 8 * ((v3 >> 2) & 0xF));
  }
  *(void *)(result + 16) = *v4;
  *(unsigned char *)(result + 24) = *(_DWORD *)(a2 + 4) != 0;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(uint64_t *a1, _DWORD *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIBasicType>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(_DWORD *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v2 = (uint64_t *)(a1 + 2);
  uint64_t v3 = (uint64_t *)(a1 + 4);
  int v4 = a1 + 6;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  int v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, a1 + 7);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, int *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIBasicType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((unint64_t v2 = *(void *)(a2 - 16), (v2 & 2) != 0)
      ? (uint64_t v3 = *(void *)(a2 - 32))
      : (uint64_t v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF)),
        *(void *)(a1 + 8) == *(void *)(v3 + 16)
     && *(void *)(a1 + 16) == *(void *)(a2 + 24)
     && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 40)
     && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 44)))
  {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 20);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucketImpl<llvm::DIBasicType *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a2;
    int v21 = *(unsigned __int16 *)(*a2 + 2);
    unint64_t v8 = *(void *)(v7 - 16);
    if ((v8 & 2) != 0) {
      uint64_t v9 = *(void *)(v7 - 32);
    }
    else {
      uint64_t v9 = v7 - 16 - 8 * ((v8 >> 2) & 0xF);
    }
    uint64_t v12 = *(void *)(v7 + 24);
    uint64_t v22 = *(void *)(v9 + 16);
    uint64_t v23 = v12;
    uint64_t v24 = *(void *)(v7 + 40);
    int v25 = *(_DWORD *)(v7 + 20);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(&v21);
    int v14 = v4 - 1;
    unsigned int v15 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v15);
    uint64_t v16 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v17 = 0;
      int v18 = 1;
      uint64_t result = 1;
      while (v16 != -4096)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -8192;
        }
        if (v19) {
          unint64_t v17 = v10;
        }
        unsigned int v20 = v15 + v18++;
        unsigned int v15 = v20 & v14;
        uint64_t v10 = (void *)(v6 + 8 * (v20 & v14));
        uint64_t v16 = *v10;
        if (*a2 == *v10) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v17) {
        uint64_t v10 = v17;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucketImpl<llvm::DIBasicType *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIStringType>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(int *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v2 = (uint64_t *)(a1 + 2);
  uint64_t v3 = (uint64_t *)(a1 + 4);
  int v4 = a1 + 13;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIStringType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((unint64_t v2 = *(void *)(a2 - 16), (v2 & 2) != 0)
      ? (uint64_t v3 = *(void **)(a2 - 32))
      : (uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(void *)(a1 + 8) == v3[2]
     && *(void *)(a1 + 16) == v3[3]
     && *(void *)(a1 + 24) == v3[4]
     && *(void *)(a1 + 32) == v3[5]
     && *(void *)(a1 + 40) == *(void *)(a2 + 24)
     && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 40)))
  {
    return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 44);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIStringType>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

double llvm::MDNodeKeyImpl<llvm::DIStringType>::MDNodeKeyImpl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(unsigned __int16 *)(a2 + 2);
  unint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)(a1 + 8) = v4[2];
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(a1 + 16) = v5[3];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(a1 + 24) = v6[4];
  if ((*v2 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7[5];
  *(void *)(a1 + 40) = v8;
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 48) = result;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      double result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = v4 - 1;
    unsigned int v8 = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(a2) & (v4 - 1);
    unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
    if (llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(a2, *v9))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 1;
      while (*v9 != -4096)
      {
        uint64_t v13 = v11;
        if (*v9 == -8192 && v11 == 0) {
          uint64_t v13 = v9;
        }
        int v14 = v12 + 1;
        unsigned int v8 = (v8 + v12) & v7;
        unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL isEqual = llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(a2, *v9);
        uint64_t v11 = v13;
        BOOL v16 = isEqual;
        uint64_t result = 1;
        int v12 = v14;
        if (v16) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        unsigned int v9 = v11;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(*(_DWORD *)a1, *(unsigned char **)(a1 + 32), *(void *)(a1 + 8), a2))
  {
    return 1;
  }
  return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, a2);
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 13
    && (unint64_t v2 = (uint64_t *)(a1 + 8), *(void *)(a1 + 8))
    && (v4 = (uint64_t *)(a1 + 32), (uint64_t v3 = *(unsigned char **)(a1 + 32)) != 0)
    && *v3 == 13
    && ((unint64_t v5 = *((void *)v3 - 2), (v5 & 2) != 0)
      ? (uint64_t v6 = *((void *)v3 - 4))
      : (uint64_t v6 = (uint64_t)&v3[-8 * ((v5 >> 2) & 0xF) - 16]),
        *(void *)(v6 + 56)))
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, v2, v4);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    LODWORD(v8[0]) = *(_DWORD *)a1;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, (void *)((char *)v8 + 4), v9, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (int *)(a1 + 24), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 40), (int *)(a1 + 84));
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, int *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  BOOL v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 2);
  if (*(_DWORD *)a1 != v2) {
    return 0;
  }
  uint64_t v3 = a2 - 16;
  unint64_t v4 = *(void *)(a2 - 16);
  uint64_t v5 = (v4 & 2) != 0 ? *(void *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(void *)(a1 + 8) != *(void *)(v5 + 16)) {
    return 0;
  }
  uint64_t v6 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v4 & 2) != 0) {
      int v7 = *(uint64_t **)(a2 - 32);
    }
    else {
      int v7 = (uint64_t *)(v3 - 8 * ((v4 >> 2) & 0xF));
    }
    uint64_t v6 = *v7;
  }
  if (*(void *)(a1 + 16) != v6 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v8 = (v4 & 2) != 0 ? *(void *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(void *)(a1 + 32) != *(void *)(v8 + 8)
    || *(void *)(a1 + 40) != *(void *)(v8 + 24)
    || *(void *)(a1 + 48) != *(void *)(a2 + 24)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 40)
    || *(void *)(a1 + 56) != *(void *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 44);
  uint64_t v10 = v9 & 0xFF00000000;
  if (*(unsigned char *)(a1 + 72) && v10)
  {
    if (*(_DWORD *)(a1 + 68) != v9) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 72) != 0) != (v10 != 0))
  {
    return 0;
  }
  if (v2 != 17152)
  {
    if (!*(unsigned char *)(a1 + 80)) {
      goto LABEL_31;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 80) || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
LABEL_31:
  if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  uint64_t v11 = (v4 & 2) != 0 ? *(void *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(void *)(a1 + 88) != *(void *)(v11 + 32)) {
    return 0;
  }
  return *(void *)(a1 + 96) == *(void *)(v11 + 40);
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(int a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  if (a2 && a1 == 13 && a3)
  {
    if (*a2 == 13
      && ((unint64_t v6 = *((void *)a2 - 2), (v6 & 2) != 0)
        ? (uint64_t v7 = *((void *)a2 - 4))
        : (uint64_t v7 = (uint64_t)&a2[-8 * ((v6 >> 2) & 0xF) - 16]),
          *(void *)(v7 + 56)
       && *(_WORD *)(a4 + 2) == 13
       && ((unint64_t v8 = *(void *)(a4 - 16), (v8 & 2) != 0)
         ? (uint64_t v9 = *(void *)(a4 - 32))
         : (uint64_t v9 = a4 - 16 - 8 * ((v8 >> 2) & 0xF)),
           *(void *)(v9 + 16) == a3)))
    {
      return *(void *)(v9 + 8) == (void)a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isSubsetEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 16;
  unint64_t v4 = *(void *)(a1 - 16);
  int v5 = *(unsigned __int16 *)(a1 + 2);
  if ((v4 & 2) != 0) {
    uint64_t v6 = *(void *)(a1 - 32);
  }
  else {
    uint64_t v6 = v3 - 8 * ((v4 >> 2) & 0xF);
  }
  return llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(v5, *(unsigned char **)(v6 + 8), *(void *)(v6 + 16), a2);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl((uint64_t)v22, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue((uint64_t)v22);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (uint64_t *)(v6 + 8 * v9);
    uint64_t v11 = *a2;
    uint64_t v12 = *v10;
    if (*a2 == *v10)
    {
LABEL_3:
      uint64_t v13 = 1;
    }
    else
    {
      BOOL v15 = 0;
      int v16 = 1;
      while (1)
      {
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v21 = v16;
          unsigned int v20 = v15;
          unsigned int v18 = v9;
          int v19 = v8;
          if (llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isSubsetEqual(v11, v12)) {
            goto LABEL_3;
          }
          uint64_t v12 = *v10;
          unsigned int v9 = v18;
          int v8 = v19;
          BOOL v15 = v20;
          int v16 = v21;
        }
        if (v12 == -4096) {
          break;
        }
        if (v12 == -8192 && v15 == 0) {
          BOOL v15 = v10;
        }
        unsigned int v17 = v9 + v16++;
        unsigned int v9 = v17 & v8;
        uint64_t v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
        uint64_t v11 = *a2;
        uint64_t v12 = *v10;
        uint64_t v13 = 1;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t v13 = 0;
      if (v15) {
        uint64_t v10 = v15;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v13 = 0;
  }
LABEL_5:
  *a3 = v10;
  return v13;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(unsigned __int16 *)(a2 + 2);
  int v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = v4[2];
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((*v2 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    }
    uint64_t v5 = *v6;
  }
  *(void *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v2[-((v7 >> 2) & 0xF)];
  }
  *(void *)(result + 32) = v8[1];
  if ((*v2 & 2) != 0) {
    unsigned int v9 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 40) = v9[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 68) = *(void *)(a2 + 44);
  if (*(_WORD *)(a2 + 2) == 17152) {
    uint64_t v10 = *(unsigned int *)(a2 + 4) | 0x100000000;
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)(result + 76) = v10;
  *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 20);
  unint64_t v11 = *(void *)(a2 - 16);
  if ((v11 & 2) != 0) {
    uint64_t v12 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v12 = &v2[-((v11 >> 2) & 0xF)];
  }
  *(void *)(result + 88) = v12[4];
  if ((*v2 & 2) != 0) {
    uint64_t v13 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v13 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 96) = v13[5];
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue(uint64_t a1)
{
  unint64_t v1 = (uint64_t *)(a1 + 8);
  int v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = (int *)(a1 + 24);
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = (uint64_t *)(a1 + 32);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  int v7 = (uint64_t *)(a1 + 96);
  uint64_t v8 = (uint64_t *)(a1 + 152);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, v1, v2, v3, v4, v5, v6, v7, v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  unint64_t v20 = a2;
  unsigned int v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  unint64_t v21 = v20;
  unsigned int v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  int v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2)) {
    return 0;
  }
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  uint64_t v4 = (v3 & 2) != 0 ? *(void *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(void *)(a1 + 8) != *(void *)(v4 + 16)) {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v3 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    }
    uint64_t v5 = *v6;
  }
  if (*(void *)(a1 + 16) == v5
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 16)
    && ((v3 & 2) != 0 ? (uint64_t v7 = *(void *)(a2 - 32)) : (uint64_t v7 = v2 - 8 * ((v3 >> 2) & 0xF)),
        *(void *)(a1 + 32) == *(void *)(v7 + 8)
     && *(void *)(a1 + 40) == *(void *)(v7 + 24)
     && *(void *)(a1 + 48) == *(void *)(a2 + 24)
     && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 40)
     && *(void *)(a1 + 56) == *(void *)(a2 + 32)
     && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 20)
     && ((v3 & 2) != 0 ? (uint64_t v8 = *(void *)(a2 - 32)) : (uint64_t v8 = v2 - 8 * ((v3 >> 2) & 0xF)),
         *(void *)(a1 + 72) == *(void *)(v8 + 32)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 44)
      && ((v3 & 2) != 0 ? (int v9 = *(void **)(a2 - 32)) : (int v9 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF))),
          *(void *)(a1 + 88) == v9[5]
       && *(void *)(a1 + 96) == v9[6]
       && *(void *)(a1 + 104) == v9[7]
       && *(void *)(a1 + 112) == v9[8]
       && *(void *)(a1 + 120) == v9[9]
       && *(void *)(a1 + 128) == v9[10]
       && *(void *)(a1 + 136) == v9[11]
       && *(void *)(a1 + 144) == v9[12]))))
  {
    return *(void *)(a1 + 152) == v9[13];
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::DICompositeType *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue((uint64_t)v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(unsigned __int16 *)(a2 + 2);
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = v4[2];
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((*v2 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    }
    uint64_t v5 = *v6;
  }
  *(void *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v2[-((v7 >> 2) & 0xF)];
  }
  *(void *)(result + 32) = v8[1];
  if ((*v2 & 2) != 0) {
    unsigned int v9 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 40) = v9[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 68) = v10;
  unint64_t v11 = *(void *)(a2 - 16);
  if ((v11 & 2) != 0) {
    uint64_t v12 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v12 = &v2[-((v11 >> 2) & 0xF)];
  }
  *(void *)(result + 72) = v12[4];
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 44);
  unint64_t v13 = *(void *)(a2 - 16);
  if ((v13 & 2) != 0) {
    int v14 = *(void **)(a2 - 32);
  }
  else {
    int v14 = &v2[-((v13 >> 2) & 0xF)];
  }
  *(void *)(result + 88) = v14[5];
  if ((*v2 & 2) != 0) {
    BOOL v15 = *(void **)(a2 - 32);
  }
  else {
    BOOL v15 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 96) = v15[6];
  if ((*v2 & 2) != 0) {
    unsigned int v16 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v16 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 104) = v16[7];
  if ((*v2 & 2) != 0) {
    unsigned int v17 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v17 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 112) = v17[8];
  if ((*v2 & 2) != 0) {
    unint64_t v18 = *(void **)(a2 - 32);
  }
  else {
    unint64_t v18 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 120) = v18[9];
  if ((*v2 & 2) != 0) {
    unint64_t v19 = *(void **)(a2 - 32);
  }
  else {
    unint64_t v19 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 128) = v19[10];
  if ((*v2 & 2) != 0) {
    unint64_t v20 = *(void **)(a2 - 32);
  }
  else {
    unint64_t v20 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 136) = v20[11];
  if ((*v2 & 2) != 0) {
    unint64_t v21 = *(void **)(a2 - 32);
  }
  else {
    unint64_t v21 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 144) = v21[12];
  if ((*v2 & 2) != 0) {
    uint64_t v22 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v22 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 152) = v22[13];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::DICompositeType *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubroutineType>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DISubroutineType>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(int *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)(a1 + 1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  int v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (uint64_t *)a1 + 1);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, uint64_t *a6)
{
  unint64_t v12 = a2;
  int v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  uint64_t v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DISubroutineType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)(a2 + 20) || *(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 44)) {
    return 0;
  }
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  }
  return *(void *)(a1 + 8) == *(void *)(v3 + 24);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucketImpl<llvm::DISubroutineType *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::MDNodeInfo<llvm::DISubroutineType>::getHashValue(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          unint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DISubroutineType>::getHashValue(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 - 16);
  int v4 = *(_DWORD *)(a1 + 20);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v1 & 2) != 0) {
    uint64_t v2 = *(void *)(a1 - 32);
  }
  else {
    uint64_t v2 = a1 - 16 - 8 * ((v1 >> 2) & 0xF);
  }
  uint64_t v6 = *(void *)(v2 + 24);
  return llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(&v4);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucketImpl<llvm::DISubroutineType *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      unint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIFile>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      unint64_t v12 = v8;
    }
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue(uint64_t *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)a1 + 32);
  if (*((unsigned char *)a1 + 32))
  {
    int v2 = *((_DWORD *)a1 + 4);
    uint64_t v3 = a1[3];
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v6 = v2;
  uint64_t v5 = v3;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v7);
  uint64_t v7 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v7, 0, v8, v9, a1 + 1, &v6, &v5, a1 + 5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIFile>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  if (*(void *)a1 != *v3 || *(void *)(a1 + 8) != v3[1]) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 32) && *(unsigned char *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
      return *(void *)(a1 + 40) == *(void *)(a2 + 40);
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 32) != 0) != (*(unsigned char *)(a1 + 32) != 0)) {
    return 0;
  }
  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, __n128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (__n128 **)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>(uint64_t *a1, __n128 **a2, __n128 ***a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIFile>::MDNodeKeyImpl(v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue((uint64_t *)v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (__n128 **)(v6 + 8 * v9);
    unsigned int v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != (__n128 *)-4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == (__n128 *)-8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (__n128 **)(v6 + 8 * (v16 & v8));
        unsigned int v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

__n128 llvm::MDNodeKeyImpl<llvm::DIFile>::MDNodeKeyImpl(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2 - 1;
  unint64_t v3 = a2[-1].n128_u64[0];
  if ((v3 & 2) != 0) {
    int v4 = (unint64_t *)a2[-2].n128_u64[0];
  }
  else {
    int v4 = &v2->n128_u64[-((v3 >> 2) & 0xF)];
  }
  a1->n128_u64[0] = *v4;
  if ((v2->n128_u64[0] & 2) != 0) {
    uint64_t v5 = (unint64_t *)a2[-2].n128_u64[0];
  }
  else {
    uint64_t v5 = &v2->n128_u64[-((v2->n128_u64[0] >> 2) & 0xF)];
  }
  a1->n128_u64[1] = v5[1];
  __n128 result = a2[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[1] = result;
  a1[2].n128_u64[1] = a2[2].n128_u64[1];
  return result;
}

__n128 **llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(uint64_t a1, uint64_t a2, __n128 **a3, __n128 **a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (__n128 *)-4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(__n128 ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::moveFromOldBuckets(uint64_t result, __n128 **a2, __n128 **a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      __n128 result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubprogram>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = v4 - 1;
    unsigned int v8 = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue(a2) & (v4 - 1);
    unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
    if (llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(a2, *v9))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 1;
      while (*v9 != -4096)
      {
        uint64_t v13 = v11;
        if (*v9 == -8192 && v11 == 0) {
          uint64_t v13 = v9;
        }
        int v14 = v12 + 1;
        unsigned int v8 = (v8 + v12) & v7;
        unsigned int v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL isEqual = llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(a2, *v9);
        uint64_t v11 = v13;
        BOOL v16 = isEqual;
        uint64_t result = 1;
        int v12 = v14;
        if (v16) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        unsigned int v9 = v11;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 76) >> 3) & 1, *(unsigned char **)a1, *(void *)(a1 + 16), *(void *)(a1 + 88), a2))
  {
    return 1;
  }
  return llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf(a1, a2);
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a1 + 76) & 8) == 0
    && *(void *)(a1 + 16)
    && (unint64_t v2 = *(unsigned char **)a1) != 0
    && *v2 == 13
    && ((unint64_t v3 = *((void *)v2 - 2), (v3 & 2) != 0)
      ? (uint64_t v4 = *((void *)v2 - 4))
      : (uint64_t v4 = (uint64_t)&v2[-8 * ((v3 >> 2) & 0xF) - 16]),
        *(void *)(v4 + 56)))
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, &v6, v8, (uint64_t *)(a1 + 16), (uint64_t *)a1);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
    uint64_t v6 = *(void *)(a1 + 8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  int v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 - 16;
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v4 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v4 = (void *)(v3 - 8 * ((v2 >> 2) & 0xF));
  }
  if (*(void *)a1 != v4[1] || *(void *)(a1 + 8) != v4[2] || *(void *)(a1 + 16) != v4[3]) {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v2 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = (uint64_t *)(v3 - 8 * ((v2 >> 2) & 0xF));
    }
    uint64_t v5 = *v6;
  }
  if (*(void *)(a1 + 24) != v5 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v7 = (v2 & 2) != 0 ? *(void *)(a2 - 32) : v3 - 8 * ((v2 >> 2) & 0xF);
  if (*(void *)(a1 + 40) != *(void *)(v7 + 32) || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      uint64_t v8 = *(void *)(a2 - 32);
      goto LABEL_24;
    }
LABEL_25:
    uint64_t v9 = 0;
    goto LABEL_26;
  }
  if ((*(void *)(a2 - 16) & 0x3C0uLL) <= 0x200) {
    goto LABEL_25;
  }
  uint64_t v8 = v3 - 8 * ((v2 >> 2) & 0xF);
LABEL_24:
  uint64_t v9 = *(void *)(v8 + 64);
LABEL_26:
  if (*(void *)(a1 + 56) != v9
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  if ((v2 & 2) != 0)
  {
    uint64_t v11 = *(void **)(a2 - 32);
    if (v10 != v11[5]) {
      return 0;
    }
    uint64_t v14 = *(void *)(a1 + 88);
    unsigned int v15 = *(_DWORD *)(a2 - 24);
    if (v15 <= 9)
    {
      if (v14) {
        return 0;
      }
    }
    else if (v14 != v11[9])
    {
      return 0;
    }
    if (*(void *)(a1 + 96) != v11[6] || *(void *)(a1 + 104) != v11[7]) {
      return 0;
    }
    uint64_t v18 = *(void *)(a1 + 112);
    if (v15 <= 0xA)
    {
      if (v18) {
        return 0;
      }
      uint64_t v19 = *(void *)(a1 + 120);
    }
    else
    {
      if (v18 != v11[10]) {
        return 0;
      }
      uint64_t v19 = *(void *)(a1 + 120);
      if (v15 > 0xB)
      {
        if (v19 == v11[11])
        {
          uint64_t v20 = *(void *)(a1 + 128);
          if (v15 >= 0xD)
          {
LABEL_66:
            uint64_t v21 = v11[12];
            return v20 == v21;
          }
          goto LABEL_55;
        }
        return 0;
      }
    }
    if (!v19)
    {
      uint64_t v21 = 0;
      uint64_t v20 = *(void *)(a1 + 128);
      return v20 == v21;
    }
    return 0;
  }
  uint64_t v11 = (void *)(v3 - 8 * ((v2 >> 2) & 0xF));
  if (v10 != v11[5]) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 88);
  if ((*(void *)(a2 - 16) & 0x380uLL) <= 0x240)
  {
    if (v12) {
      return 0;
    }
  }
  else if (v12 != v11[9])
  {
    return 0;
  }
  if (*(void *)(a1 + 96) != v11[6] || *(void *)(a1 + 104) != v11[7]) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 112);
  unint64_t v17 = *(void *)(a2 - 16) & 0x3C0;
  if (v17 <= 0x280)
  {
    if (v16) {
      return 0;
    }
  }
  else if (v16 != v11[10])
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 120);
  if ((~(_WORD)v2 & 0x300) != 0)
  {
    if (!v22) {
      goto LABEL_65;
    }
    return 0;
  }
  if (v22 != v11[11]) {
    return 0;
  }
LABEL_65:
  uint64_t v20 = *(void *)(a1 + 128);
  if (v17 > 0x300) {
    goto LABEL_66;
  }
LABEL_55:
  uint64_t v21 = 0;
  return v20 == v21;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (a2 && !a1 && a3)
  {
    if (*a2 != 13) {
      return 0;
    }
    unint64_t v6 = *((void *)a2 - 2);
    if ((v6 & 2) != 0) {
      uint64_t v7 = *((void *)a2 - 4);
    }
    else {
      uint64_t v7 = (uint64_t)&a2[-8 * ((v6 >> 2) & 0xF) - 16];
    }
    uint64_t v5 = *(void *)(v7 + 56);
    if (v5)
    {
      if (!((*(unsigned char *)(a5 + 36) & 8) >> 3))
      {
        unint64_t v8 = *(void *)(a5 - 16);
        if ((v8 & 2) != 0)
        {
          uint64_t v9 = *(void **)(a5 - 32);
          if ((unsigned char *)v9[1] == a2 && v9[3] == a3)
          {
            if (*(_DWORD *)(a5 - 24) >= 0xAu) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v9 = (void *)(a5 - 16 - 8 * ((v8 >> 2) & 0xF));
          if ((unsigned char *)v9[1] == a2 && v9[3] == a3)
          {
            if ((*(void *)(a5 - 16) & 0x380uLL) > 0x240)
            {
LABEL_14:
              uint64_t v10 = v9[9];
              return v10 == a4;
            }
LABEL_20:
            uint64_t v10 = 0;
            return v10 == a4;
          }
        }
      }
      return 0;
    }
  }
  return v5;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 - 16);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *(void **)(a1 - 32);
    uint64_t v5 = (unsigned char *)v4[1];
    uint64_t v6 = v4[3];
    if (*(_DWORD *)(a1 - 24) >= 0xAu) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    return llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 36) >> 3) & 1, v5, v6, v7, a2);
  }
  uint64_t v4 = (void *)(a1 - 16 - 8 * ((v3 >> 2) & 0xF));
  uint64_t v5 = (unsigned char *)v4[1];
  uint64_t v6 = v4[3];
  if ((*(void *)(a1 - 16) & 0x380uLL) <= 0x240) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = v4[9];
  return llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 36) >> 3) & 1, v5, v6, v7, a2);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl((uint64_t)v22, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue((uint64_t)v22);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (uint64_t *)(v6 + 8 * v9);
    uint64_t v11 = *a2;
    uint64_t v12 = *v10;
    if (*a2 == *v10)
    {
LABEL_3:
      uint64_t v13 = 1;
    }
    else
    {
      unsigned int v15 = 0;
      int v16 = 1;
      while (1)
      {
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v21 = v16;
          uint64_t v20 = v15;
          unsigned int v18 = v9;
          int v19 = v8;
          if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(v11, v12)) {
            goto LABEL_3;
          }
          uint64_t v12 = *v10;
          unsigned int v9 = v18;
          int v8 = v19;
          unsigned int v15 = v20;
          int v16 = v21;
        }
        if (v12 == -4096) {
          break;
        }
        if (v12 == -8192 && v15 == 0) {
          unsigned int v15 = v10;
        }
        unsigned int v17 = v9 + v16++;
        unsigned int v9 = v17 & v8;
        uint64_t v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
        uint64_t v11 = *a2;
        uint64_t v12 = *v10;
        uint64_t v13 = 1;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t v13 = 0;
      if (v15) {
        uint64_t v10 = v15;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v13 = 0;
  }
LABEL_5:
  *a3 = v10;
  return v13;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (unint64_t *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(unint64_t **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = v4[1];
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(unint64_t **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = v5[2];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(unint64_t **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xF)];
  }
  *(void *)(result + 16) = v6[3];
  uint64_t v7 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((*v2 & 2) != 0) {
      int v8 = *(uint64_t **)(a2 - 32);
    }
    else {
      int v8 = (uint64_t *)&v2[-((*v2 >> 2) & 0xF)];
    }
    uint64_t v7 = *v8;
  }
  *(void *)(result + 24) = v7;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 - 16);
  if ((v9 & 2) != 0) {
    uint64_t v10 = *(unint64_t **)(a2 - 32);
  }
  else {
    uint64_t v10 = &v2[-((v9 >> 2) & 0xF)];
  }
  *(void *)(result + 40) = v10[4];
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
  unint64_t v11 = *(void *)(a2 - 16);
  if ((v11 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      uint64_t v12 = *(unint64_t **)(a2 - 32);
      goto LABEL_23;
    }
  }
  else if ((*(void *)(a2 - 16) & 0x3C0uLL) > 0x200)
  {
    uint64_t v12 = &v2[-((v11 >> 2) & 0xF)];
LABEL_23:
    unint64_t v13 = v12[8];
    goto LABEL_25;
  }
  unint64_t v13 = 0;
LABEL_25:
  *(void *)(result + 56) = v13;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 24);
  unint64_t v14 = *(void *)(a2 - 16);
  if ((v14 & 2) != 0) {
    unsigned int v15 = *(unint64_t **)(a2 - 32);
  }
  else {
    unsigned int v15 = &v2[-((v14 >> 2) & 0xF)];
  }
  *(void *)(result + 80) = v15[5];
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xAu)
    {
      int v16 = *(unint64_t **)(a2 - 32);
      goto LABEL_33;
    }
  }
  else if ((*v2 & 0x380) > 0x240)
  {
    int v16 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_33:
    unint64_t v17 = v16[9];
    goto LABEL_35;
  }
  unint64_t v17 = 0;
LABEL_35:
  *(void *)(result + 88) = v17;
  if ((*v2 & 2) != 0) {
    unsigned int v18 = *(unint64_t **)(a2 - 32);
  }
  else {
    unsigned int v18 = &v2[-((*v2 >> 2) & 0xF)];
  }
  *(void *)(result + 96) = v18[6];
  if ((*v2 & 2) != 0) {
    int v19 = *(unint64_t **)(a2 - 32);
  }
  else {
    int v19 = &v2[-((*v2 >> 2) & 0xF)];
  }
  *(void *)(result + 104) = v19[7];
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xBu)
    {
      uint64_t v20 = *(unint64_t **)(a2 - 32);
      goto LABEL_46;
    }
  }
  else if ((*v2 & 0x3C0) > 0x280)
  {
    uint64_t v20 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_46:
    unint64_t v21 = v20[10];
    goto LABEL_48;
  }
  unint64_t v21 = 0;
LABEL_48:
  *(void *)(result + 112) = v21;
  unint64_t v22 = *v2;
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xCu)
    {
      uint64_t v23 = *(unint64_t **)(a2 - 32);
      goto LABEL_53;
    }
  }
  else if ((~(_WORD)v22 & 0x300) == 0)
  {
    uint64_t v23 = &v2[-((v22 >> 2) & 0xF)];
LABEL_53:
    unint64_t v24 = v23[11];
    goto LABEL_55;
  }
  unint64_t v24 = 0;
LABEL_55:
  *(void *)(result + 120) = v24;
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xDu)
    {
      int v25 = *(unint64_t **)(a2 - 32);
      goto LABEL_60;
    }
LABEL_61:
    unint64_t v26 = 0;
    goto LABEL_62;
  }
  if ((*v2 & 0x3C0) <= 0x300) {
    goto LABEL_61;
  }
  int v25 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_60:
  unint64_t v26 = v25[12];
LABEL_62:
  *(void *)(result + 128) = v26;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1 + 1;
  uint64_t v3 = (int *)(a1 + 2);
  int v4 = (int *)a1 + 5;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    uint64_t v4 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v4 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  if (*(void *)a1 != *(void *)(v4 + 8)) {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v3 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    }
    uint64_t v5 = *v6;
  }
  return *(void *)(a1 + 8) == v5
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = v4[1];
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((*v2 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    }
    uint64_t v5 = *v6;
  }
  *(void *)(result + 8) = v5;
  int v7 = *(unsigned __int16 *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  uint64_t v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (int *)a1 + 4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    uint64_t v4 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v4 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  if (*(void *)a1 != *(void *)(v4 + 8)) {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v3 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    }
    uint64_t v5 = *v6;
  }
  return *(void *)(a1 + 8) == v5 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucketImpl<llvm::DILexicalBlockFile *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = v4[1];
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((*v2 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    }
    uint64_t v5 = *v6;
  }
  *(void *)(result + 8) = v5;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucketImpl<llvm::DILexicalBlockFile *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = a2 + 1;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    int v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    unsigned int v9 = 0;
    int v10 = v4 - 1;
    unsigned int v11 = v10 & v8;
    for (int i = 1; ; ++i)
    {
      uint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DINamespace>::isKeyOf((uint64_t)a2, v14))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v14 = *v13;
      }
      if (v14 == -4096) {
        break;
      }
      if (v9) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == -8192;
      }
      if (v15) {
        unsigned int v9 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v16 = v11 + i;
      unsigned int v11 = v16 & v10;
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v13 = v9;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DINamespace>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  }
  return *(void *)a1 == *(void *)(v3 + 8)
      && *(void *)(a1 + 8) == *(void *)(v3 + 16)
      && *(unsigned char *)(a1 + 16) == (*(unsigned char *)(a2 + 16) & 1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::MDNodeInfo<llvm::DINamespace>::getHashValue(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    int v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        int v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        int v10 = v13;
      }
    }
  }
  else
  {
    int v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DINamespace>::getHashValue(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::MDNodeKeyImpl<llvm::DINamespace>::MDNodeKeyImpl((uint64_t)&v2, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v4, 0, v4, v5, &v2, &v3);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DINamespace>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = v4[1];
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[2];
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16) & 1;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DICommonBlock>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(uint64_t *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 2;
  int v4 = a1 + 3;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  uint64_t v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, (int *)a1 + 8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DICommonBlock>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  return *(void *)a1 == *v3
      && *(void *)(a1 + 8) == v3[1]
      && *(void *)(a1 + 16) == v3[2]
      && *(void *)(a1 + 24) == v3[3]
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucketImpl<llvm::DICommonBlock *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DICommonBlock>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DICommonBlock>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v6[2];
  if ((*v2 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 24) = v7[3];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucketImpl<llvm::DICommonBlock *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIModule>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIModule>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v1 = a1 + 1;
  unint64_t v2 = a1 + 2;
  uint64_t v3 = a1 + 3;
  int v4 = a1 + 4;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, v1, v2, v3, v4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIModule>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF));
  }
  if (*(void *)(a1 + 8) != v4[1]
    || *(void *)(a1 + 16) != v4[2]
    || *(void *)(a1 + 24) != v4[3]
    || *(void *)(a1 + 32) != v4[4]
    || *(void *)(a1 + 40) != v4[5])
  {
    return 0;
  }
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    if ((v3 & 2) != 0) {
      uint64_t v6 = *(uint64_t **)(a2 - 32);
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    }
    uint64_t v5 = *v6;
  }
  return *(void *)a1 == v5
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 20);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIModule>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIModule>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    unint64_t v3 = *(void *)(a2 - 16);
    if ((v3 & 2) != 0) {
      int v4 = *(uint64_t **)(a2 - 32);
    }
    else {
      int v4 = (uint64_t *)(a2 - 16 - 8 * ((v3 >> 2) & 0xF));
    }
    uint64_t v2 = *v4;
  }
  *(void *)uint64_t result = v2;
  uint64_t v5 = (void *)(a2 - 16);
  unint64_t v6 = *(void *)(a2 - 16);
  if ((v6 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v5[-((v6 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = v7[1];
  if ((*v5 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v5[-((*v5 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v8[2];
  if ((*v5 & 2) != 0) {
    unsigned int v9 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v9 = &v5[-((*v5 >> 2) & 0xFLL)];
  }
  *(void *)(result + 24) = v9[3];
  if ((*v5 & 2) != 0) {
    uint64_t v10 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v10 = &v5[-((*v5 >> 2) & 0xFLL)];
  }
  *(void *)(result + 32) = v10[4];
  if ((*v5 & 2) != 0) {
    uint64_t v11 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v11 = &v5[-((*v5 >> 2) & 0xFLL)];
  }
  *(void *)(result + 40) = v11[5];
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 20);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = a2 + 1;
    uint64_t v8 = (char *)(a2 + 2);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v19);
    int v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v19, 0, v19, v20, a2, v7, v8);
    uint64_t v10 = 0;
    int v11 = v4 - 1;
    unsigned int v12 = (v4 - 1) & v9;
    for (int i = 1; ; ++i)
    {
      int v14 = (uint64_t *)(v6 + 8 * v12);
      uint64_t v15 = *v14;
      if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::isKeyOf((uint64_t)a2, v15))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v15 = *v14;
      }
      if (v15 == -4096) {
        break;
      }
      if (v10) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v15 == -8192;
      }
      if (v16) {
        uint64_t v10 = (uint64_t *)(v6 + 8 * v12);
      }
      unsigned int v17 = v12 + i;
      unsigned int v12 = v17 & v11;
    }
    uint64_t result = 0;
    if (v10) {
      int v14 = v10;
    }
  }
  else
  {
    int v14 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v14;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  return *(void *)a1 == *v3
      && *(void *)(a1 + 8) == v3[1]
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucketImpl<llvm::DITemplateTypeParameter *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::MDNodeInfo<llvm::DITemplateTypeParameter>::getHashValue(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DITemplateTypeParameter>::getHashValue(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::MDNodeKeyImpl((uint64_t)&v2, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v5, 0, v5, v6, &v2, &v3, v4);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucketImpl<llvm::DITemplateTypeParameter *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      unsigned int v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      unsigned int v12 = v8;
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(int *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(a1 + 2);
  uint64_t v3 = (uint64_t *)(a1 + 4);
  int v4 = (char *)(a1 + 6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  int v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, (uint64_t *)a1 + 4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2)) {
    return 0;
  }
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  int v4 = (v3 & 2) != 0 ? *(void **)(a2 - 32) : (void *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(void *)(a1 + 8) != *v4
    || *(void *)(a1 + 16) != v4[1]
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 16))
  {
    return 0;
  }
  if ((v3 & 2) != 0) {
    uint64_t v5 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v5 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  return *(void *)(a1 + 32) == *(void *)(v5 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucketImpl<llvm::DITemplateValueParameter *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(unsigned __int16 *)(a2 + 2);
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v5[1];
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 - 16);
  if ((v6 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v2[-((v6 >> 2) & 0xF)];
  }
  *(void *)(result + 32) = v7[2];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucketImpl<llvm::DITemplateValueParameter *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      unsigned int v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      unsigned int v12 = v8;
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 2;
  int v4 = a1 + 3;
  uint64_t v5 = (int *)(a1 + 4);
  uint64_t v6 = a1 + 5;
  int v7 = (char *)(a1 + 6);
  uint64_t v8 = (char *)a1 + 49;
  int v9 = a1 + 7;
  uint64_t v10 = a1 + 10;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v12, 0, v12, v13, a1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10, char *a11, char *a12, uint64_t *a13, uint64_t *a14)
{
  unint64_t v22 = a2;
  int v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  unint64_t v23 = v22;
  uint64_t v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v23, v19, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v23, v20, a4, a7, a8, a9, a10, a11, a12, a13, a14);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, char *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  unint64_t v20 = a2;
  unint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  unint64_t v21 = v20;
  unsigned int v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  unsigned int v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, char *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v15 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v15, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v15, v13, a4, a6, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v13 = a2;
  unsigned int v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v13, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v13, v11, a4, a6, a7);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF));
  }
  if (*(void *)a1 != *v4
    || *(void *)(a1 + 8) != v4[1]
    || *(void *)(a1 + 16) != v4[5]
    || *(void *)(a1 + 24) != v4[2]
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  uint64_t v5 = (v3 & 2) != 0 ? *(void *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(void *)(a1 + 40) != *(void *)(v5 + 24)
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 25))
  {
    return 0;
  }
  uint64_t v6 = (v3 & 2) != 0 ? *(void *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(void *)(a1 + 56) != *(void *)(v6 + 48)
    || *(void *)(a1 + 64) != *(void *)(v6 + 56)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0) {
    uint64_t v7 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v7 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  return *(void *)(a1 + 80) == *(void *)(v7 + 64);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucketImpl<llvm::DIGlobalVariable *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          unint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v6[5];
  if ((*v2 & 2) != 0) {
    uint64_t v7 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 24) = v7[2];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  unint64_t v8 = *(void *)(a2 - 16);
  if ((v8 & 2) != 0) {
    unsigned int v9 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v9 = &v2[-((v8 >> 2) & 0xF)];
  }
  *(void *)(result + 40) = v9[3];
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 - 16);
  if ((v10 & 2) != 0) {
    uint64_t v11 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v11 = &v2[-((v10 >> 2) & 0xF)];
  }
  *(void *)(result + 56) = v11[6];
  if ((*v2 & 2) != 0) {
    unsigned int v12 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v12 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 64) = v12[7];
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 20);
  unint64_t v13 = *(void *)(a2 - 16);
  if ((v13 & 2) != 0) {
    int v14 = *(void **)(a2 - 32);
  }
  else {
    int v14 = &v2[-((v13 >> 2) & 0xF)];
  }
  *(void *)(result + 80) = v14[8];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucketImpl<llvm::DIGlobalVariable *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      unsigned int v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      unsigned int v12 = v8;
    }
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 2;
  int v4 = (int *)(a1 + 3);
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 4;
  uint64_t v6 = (int *)(a1 + 5);
  int v7 = (int *)a1 + 11;
  uint64_t v8 = a1 + 7;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, a1, v2, v3, v4, v5, v6, v7, v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, int *a10, int *a11, uint64_t *a12)
{
  unint64_t v20 = a2;
  unint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  unint64_t v21 = v20;
  unint64_t v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8, int *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  unsigned int v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF));
  }
  if (*(void *)a1 != *v4
    || *(void *)(a1 + 8) != v4[1]
    || *(void *)(a1 + 16) != v4[2]
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  uint64_t v5 = (v3 & 2) != 0 ? *(void *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(void *)(a1 + 32) != *(void *)(v5 + 24)
    || *(_DWORD *)(a1 + 40) != *(unsigned __int16 *)(a2 + 24)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0) {
    uint64_t v6 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v6 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  return *(void *)(a1 + 56) == *(void *)(v6 + 32);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucketImpl<llvm::DILocalVariable *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILocalVariable>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILocalVariable>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v6[2];
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v2[-((v7 >> 2) & 0xF)];
  }
  *(void *)(result + 32) = v8[3];
  int v9 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 40) = *(unsigned __int16 *)(a2 + 24);
  *(_DWORD *)(result + 44) = v9;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
  unint64_t v10 = *(void *)(a2 - 16);
  if ((v10 & 2) != 0) {
    uint64_t v11 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v11 = &v2[-((v10 >> 2) & 0xF)];
  }
  *(void *)(result + 56) = v11[4];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucketImpl<llvm::DILocalVariable *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILabel>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  uint64_t v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (int *)a1 + 6);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILabel>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  return *(void *)a1 == *v3
      && *(void *)(a1 + 8) == v3[1]
      && *(void *)(a1 + 16) == v3[2]
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucketImpl<llvm::DILabel *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILabel>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILabel>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v6[2];
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucketImpl<llvm::DILabel *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIExpression>>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = 0;
    int v9 = v5 - 1;
    unsigned int v10 = v9 & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8), (uint64_t)a3, a4);
    for (int i = 1; ; ++i)
    {
      uint64_t v12 = (uint64_t *)(v7 + 8 * v10);
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIExpression>::isKeyOf(a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v7 + 8 * v10);
      }
      unsigned int v15 = v10 + i;
      unsigned int v10 = v15 & v9;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIExpression>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(const void **)(a2 + 16);
  return v3 == (uint64_t)(*(void *)(a2 + 24) - (void)v4) >> 3 && memcmp(*(const void **)a1, v4, 8 * v3) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  uint64_t v8 = v11;
  if (result)
  {
    char v9 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucketImpl<llvm::DIExpression *>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    uint64_t v8 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v9 = 1;
  }
  uint64_t v10 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v10;
  *(unsigned char *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(*(void *)a2 + 16), *(void *)(*(void *)a2 + 24), (uint64_t)a3, a4);
    int v9 = v5 - 1;
    unsigned int v10 = (v5 - 1) & v8;
    uint64_t v11 = (void *)(v7 + 8 * v10);
    uint64_t v12 = *v11;
    if (*(void *)a2 == *v11)
    {
      uint64_t result = 1;
    }
    else
    {
      BOOL v14 = 0;
      int v15 = 1;
      uint64_t result = 1;
      while (v12 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16) {
          BOOL v14 = v11;
        }
        unsigned int v17 = v10 + v15++;
        unsigned int v10 = v17 & v9;
        uint64_t v11 = (void *)(v7 + 8 * (v17 & v9));
        uint64_t v12 = *v11;
        if (*(void *)a2 == *v11) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v14) {
        uint64_t v11 = v14;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v11;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucketImpl<llvm::DIExpression *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(a1, v7);
  unsigned int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    do
    {
      *result++ = -4096;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *(unsigned int *)(result + 16);
  if (v7)
  {
    unsigned int v8 = *(void **)result;
    uint64_t v9 = 8 * v7;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *unsigned int v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a2 + 1;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    int v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    uint64_t v9 = 0;
    int v10 = v4 - 1;
    unsigned int v11 = v10 & v8;
    for (int i = 1; ; ++i)
    {
      uint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>::isKeyOf(a2, v14))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v14 = *v13;
      }
      if (v14 == -4096) {
        break;
      }
      if (v9) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == -8192;
      }
      if (v15) {
        uint64_t v9 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int v16 = v11 + i;
      unsigned int v11 = v16 & v10;
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v13 = v9;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>::isKeyOf(void *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  return *a1 == *v3 && a1[1] == v3[1];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>::getHashValue(*a2);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    int v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        int v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        int v10 = v13;
      }
    }
  }
  else
  {
    int v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>::getHashValue(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v1 = *(void *)(a1 - 16);
  if ((v1 & 2) != 0) {
    unint64_t v2 = *(_OWORD **)(a1 - 32);
  }
  else {
    unint64_t v2 = (_OWORD *)(a1 - 16 - 8 * ((v1 >> 2) & 0xF));
  }
  *(_OWORD *)int v4 = *v2;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v5, 0, v5, v6, v4, &v4[1]);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(uint64_t *a1, void *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(void *a1)
{
  unint64_t v2 = a1 + 1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)(a1 + 2);
  int v4 = a1 + 3;
  uint64_t v5 = a1 + 4;
  uint64_t v6 = (int *)(a1 + 5);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v8);
  uint64_t v8 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v8, 0, v9, v10, v2, v3, v4, v5, v6, a1 + 6);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  unsigned int v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF));
  }
  if (*(void *)a1 != *v4 || *(void *)(a1 + 8) != v4[1] || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v5 = (v3 & 2) != 0 ? *(void *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(void *)(a1 + 24) != *(void *)(v5 + 16)
    || *(void *)(a1 + 32) != *(void *)(v5 + 24)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0) {
    uint64_t v6 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v6 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  return *(void *)(a1 + 48) == *(void *)(v6 + 32);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucketImpl<llvm::DIObjCProperty *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)uint64_t result = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 8) = v5[1];
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 - 16);
  if ((v6 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v2[-((v6 >> 2) & 0xF)];
  }
  *(void *)(result + 24) = v7[2];
  if ((*v2 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 32) = v8[3];
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 20);
  unint64_t v9 = *(void *)(a2 - 16);
  if ((v9 & 2) != 0) {
    uint64_t v10 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v10 = &v2[-((v9 >> 2) & 0xF)];
  }
  *(void *)(result + 48) = v10[4];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucketImpl<llvm::DIObjCProperty *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(int *a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 2);
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 4);
  int v4 = (uint64_t *)(a1 + 6);
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (uint64_t *)(a1 + 10);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v8);
  int v8 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v8, 0, v9, v10, v2, v3, v4, v5, v6, (uint64_t *)a1 + 6);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, uint64_t *a10)
{
  unint64_t v18 = a2;
  BOOL v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  unint64_t v19 = v18;
  unsigned int v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((v2 = a2 - 16, unint64_t v3 = *(void *)(a2 - 16), (v3 & 2) != 0)
      ? (int v4 = *(void **)(a2 - 32))
      : (int v4 = (void *)(v2 - 8 * ((v3 >> 2) & 0xF))),
        *(void *)(a1 + 8) == *v4
     && *(void *)(a1 + 16) == v4[1]
     && *(void *)(a1 + 24) == v4[3]
     && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 16)
     && ((v3 & 2) != 0 ? (uint64_t v5 = *(void *)(a2 - 32)) : (uint64_t v5 = v2 - 8 * ((v3 >> 2) & 0xF)),
         *(void *)(a1 + 40) == *(void *)(v5 + 16))))
  {
    return *(void *)(a1 + 48) == *(void *)(v5 + 32);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucketImpl<llvm::DIImportedEntity *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(unsigned __int16 *)(a2 + 2);
  uint64_t v2 = (void *)(a2 - 16);
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) != 0) {
    int v4 = *(void **)(a2 - 32);
  }
  else {
    int v4 = &v2[-((v3 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = *v4;
  if ((*v2 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v5[1];
  if ((*v2 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 24) = v6[3];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    int v8 = *(void **)(a2 - 32);
  }
  else {
    int v8 = &v2[-((v7 >> 2) & 0xF)];
  }
  *(void *)(result + 40) = v8[2];
  if ((*v2 & 2) != 0) {
    unsigned int v9 = *(void **)(a2 - 32);
  }
  else {
    unsigned int v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  }
  *(void *)(result + 48) = v9[4];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucketImpl<llvm::DIImportedEntity *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(a2);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIMacro>::isKeyOf((uint64_t)a2, v13))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 8 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(int *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (uint64_t *)(a1 + 2);
  int v4 = (uint64_t *)(a1 + 4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  BOOL v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIMacro>::isKeyOf(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 16)
    && ((unint64_t v2 = *(void *)(a2 - 16), (v2 & 2) != 0)
      ? (uint64_t v3 = *(void **)(a2 - 32))
      : (uint64_t v3 = (void *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(void *)(a1 + 8) == *v3))
  {
    return *(void *)(a1 + 16) == v3[1];
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucketImpl<llvm::DIMacro *>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl((uint64_t)v17, *a2);
    int HashValue = llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(v17);
    int v8 = v4 - 1;
    unsigned int v9 = HashValue & (v4 - 1);
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10;
    if (*a2 == *v10)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          uint64_t v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        uint64_t v10 = (void *)(v6 + 8 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a2 == *v10) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v13) {
        uint64_t v10 = v13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)uint64_t result = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)(result + 4) = v2;
  uint64_t v3 = (void *)(a2 - 16);
  unint64_t v4 = *(void *)(a2 - 16);
  if ((v4 & 2) != 0) {
    uint64_t v5 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v5 = &v3[-((v4 >> 2) & 0xF)];
  }
  *(void *)(result + 8) = *v5;
  if ((*v3 & 2) != 0) {
    uint64_t v6 = *(void **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v3[-((*v3 >> 2) & 0xFLL)];
  }
  *(void *)(result + 16) = v6[1];
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucketImpl<llvm::DIMacro *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::grow(a1, v7);
  unsigned int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)v5, a2, &v9);
      uint64_t *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIArgList>>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8), (uint64_t)a3, a4);
    uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::MDNodeInfo<llvm::DIArgList>::isEqual(a2, *v10))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*v10 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *v10 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unint64_t v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
        BOOL isEqual = llvm::MDNodeInfo<llvm::DIArgList>::isEqual(a2, *v10);
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DIArgList>::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  return v3 == *(_DWORD *)(a2 + 24) && memcmp(*(const void **)a1, *(const void **)(a2 + 16), 8 * v3) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  int v8 = v11;
  if (result)
  {
    char v9 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucketImpl<llvm::DIArgList *>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    int v8 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v9 = 1;
  }
  uint64_t v10 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v10;
  *(unsigned char *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(*(void *)a2 + 16), *(void *)(*(void *)a2 + 16) + 8 * *(unsigned int *)(*(void *)a2 + 24), (uint64_t)a3, a4);
    int v9 = v5 - 1;
    unsigned int v10 = (v5 - 1) & v8;
    uint64_t v11 = (void *)(v7 + 8 * v10);
    uint64_t v12 = *v11;
    if (*(void *)a2 == *v11)
    {
      uint64_t result = 1;
    }
    else
    {
      BOOL v14 = 0;
      int v15 = 1;
      uint64_t result = 1;
      while (v12 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -8192;
        }
        if (v16) {
          BOOL v14 = v11;
        }
        unsigned int v17 = v10 + v15++;
        unsigned int v10 = v17 & v9;
        uint64_t v11 = (void *)(v7 + 8 * (v17 & v9));
        uint64_t v12 = *v11;
        if (*(void *)a2 == *v11) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v14) {
        uint64_t v11 = v14;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v11;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucketImpl<llvm::DIArgList *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(a1, v7);
  unsigned int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    do
    {
      *result++ = -4096;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *(unsigned int *)(result + 16);
  if (v7)
  {
    unsigned int v8 = *(void **)result;
    uint64_t v9 = 8 * v7;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *unsigned int v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

double _GLOBAL__sub_I_DebugInfoMetadata_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&llvm::EnableFSDiscriminator, 0, 0);
  byte_26B41F590 = 0;
  qword_26B41F598 = (uint64_t)&unk_270DBC978;
  unk_26B41F5A0 = 0;
  llvm::EnableFSDiscriminator = (uint64_t)&unk_270DBC910;
  qword_26B41F5A8 = (uint64_t)&unk_270DBC658;
  qword_26B41F5B0 = (uint64_t)&unk_270DBC998;
  qword_26B41F5C8 = (uint64_t)&qword_26B41F5B0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-fs-discriminator", 0x17uLL);
  word_26B41F51A = word_26B41F51A & 0xFF9F | 0x20;
  qword_26B41F530 = (uint64_t)"Enable adding flow sensitive discriminators";
  unk_26B41F538 = 43;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableFSDiscriminator);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::EnableFSDiscriminator, &dword_261C2B000);
  double result = NAN;
  llvm::DebugVariable::DefaultFragment = xmmword_261E8A6B0;
  return result;
}

uint64_t llvm::DILocation::getInlinedAtScope(llvm::DILocation *this)
{
  do
  {
    while (1)
    {
      unint64_t v1 = (char *)this - 16;
      unint64_t v2 = *((void *)this - 2);
      if ((v2 & 2) == 0) {
        break;
      }
      unint64_t v4 = (char *)*((void *)this - 4);
      if (*((_DWORD *)this - 6) == 2)
      {
        this = (llvm::DILocation *)*((void *)v4 + 1);
        if (this) {
          continue;
        }
      }
      return *(void *)v4;
    }
    uint64_t v3 = -(uint64_t)((v2 >> 2) & 0xF);
    if ((*((void *)this - 2) & 0x3C0) != 0x80) {
      break;
    }
    this = *(llvm::DILocation **)&v1[8 * v3 + 8];
  }
  while (this);
  unint64_t v4 = &v1[8 * v3];
  return *(void *)v4;
}

void anonymous namespace'::PassRemarksOpt::~PassRemarksOpt(_anonymous_namespace_::PassRemarksOpt *this)
{
  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC2DA8;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)a1 + 19);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DC2DA8;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)a1 + 19);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *a5, size_t a6)
{
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v9 = llvm::cl::parser<std::string>::parse((int)a1 + 144, a1, a3, a4, a5, a6, (uint64_t)&__p);
  if ((v9 & 1) == 0)
  {
    if (v17 >= 0) {
      uint64_t v10 = HIBYTE(v17);
    }
    else {
      uint64_t v10 = v16;
    }
    if (v10)
    {
      uint64_t v11 = operator new(0x28uLL);
      v11[1] = 0;
      v11[2] = 0;
      *uint64_t v11 = &unk_270DC2E10;
      operator new();
    }
    *(_WORD *)(a1 + 12) = a2;
    uint64_t v12 = *(void *)(a1 + 176);
    if (!v12)
    {
      int v14 = std::__throw_bad_function_call[abi:nn180100]();
      unint64_t v24 = "Invalid regular expression '";
      __int16 v25 = 259;
      __int16 v23 = 260;
      p_p = &__p;
      llvm::operator+((uint64_t *)&v24, (uint64_t *)&p_p, (uint64_t)v26);
      uint64_t v20 = "' in -pass-remarks: ";
      __int16 v21 = 259;
      llvm::operator+(v26, (uint64_t *)&v20, (uint64_t)v27);
      __int16 v19 = 260;
      v18[0] = (uint64_t)&v29;
      llvm::operator+(v27, v18, (uint64_t)v28);
      llvm::report_fatal_error((llvm *)v28, 0);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 48))(v12, &__p);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return v9;
}

uint64_t llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 144, a1);
}

llvm::raw_ostream *llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionValue(llvm::cl::Option *a1, int a2, int a3)
{
  if (a3) {
    return llvm::cl::basic_parser_impl::printOptionNoValue((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
  }
  return result;
}

void llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 128);
  unint64_t v2 = (std::__shared_weak_count *)v1[1];
  *unint64_t v1 = 0;
  v1[1] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DC2E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DC2E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::Regex>::__on_zero_shared(uint64_t a1)
{
}

uint64_t llvm::cl::OptionValueBase<anonymous namespace'::PassRemarksOpt,true>::compare()
{
  return 0;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_270DC2E68;
  return result;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2E68;
}

uint64_t llvm::cl::apply<llvm::cl::opt<anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>,llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<anonymous namespace'::PassRemarksOpt>,llvm::cl::ValueExpected>(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, char a5, void *a6, _WORD *a7)
{
  uint64_t v8 = result;
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a3;
  *(_OWORD *)(result + 32) = *a4;
  __int16 v9 = *(_WORD *)(result + 10) & 0xFF9F | (32 * (a5 & 3));
  *(_WORD *)(result + 10) = v9;
  if (*(void *)(result + 128))
  {
    uint64_t v11 = "cl::location(x) specified more than once!";
    __int16 v12 = 259;
    uint64_t v10 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    double result = llvm::cl::Option::error(v8, (llvm::Twine *)&v11, 0, 0, v10);
    __int16 v9 = *(_WORD *)(v8 + 10);
  }
  else
  {
    *(void *)(result + 128) = *a6;
  }
  *(_WORD *)(v8 + 10) = (8 * (*a7 & 3)) | v9 & 0xFFE7;
  return result;
}

uint64_t _GLOBAL__sub_I_DiagnosticHandler_cpp()
{
  *(void *)&long long v4 = "Enable optimization remarks from passes whose name match the given regular expression";
  *((void *)&v4 + 1) = 85;
  uint64_t v3 = &_MergedGlobals_36;
  int v2 = 2;
  llvm::cl::Option::Option((uint64_t)&qword_26B41CB80, 0, 0);
  qword_26B41CC00 = 0;
  unk_26B41CC08 = &unk_270DC2E48;
  qword_26B41CB80 = (uint64_t)&unk_270DC2DA8;
  qword_26B41CC10 = (uint64_t)&unk_270DBC7A8;
  qword_26B41CC18 = (uint64_t)&unk_270DC2E68;
  qword_26B41CC30 = (uint64_t)&qword_26B41CC18;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41CB80, (uint64_t *)"pass-remarks", 0xCuLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41CB80);
  *(void *)&long long v4 = "Enable missed optimization remarks from passes whose name match the given regular expression";
  *((void *)&v4 + 1) = 92;
  uint64_t v3 = &unk_26B41CB60;
  int v2 = 2;
  llvm::cl::Option::Option((uint64_t)qword_26B41CC38, 0, 0);
  qword_26B41CCB8 = 0;
  unk_26B41CCC0 = &unk_270DC2E48;
  qword_26B41CC38[0] = (uint64_t)&unk_270DC2DA8;
  qword_26B41CCC8 = (uint64_t)&unk_270DBC7A8;
  qword_26B41CCD0 = (uint64_t)&unk_270DC2E68;
  qword_26B41CCE8 = (uint64_t)&qword_26B41CCD0;
  llvm::cl::Option::setArgStr((uint64_t)qword_26B41CC38, (uint64_t *)"pass-remarks-missed", 0x13uLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_26B41CC38);
  *(void *)&long long v4 = "Enable optimization analysis remarks from passes whose name match the given regular expression";
  *((void *)&v4 + 1) = 94;
  uint64_t v3 = &unk_26B41CB70;
  int v2 = 2;
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)qword_26B41CCF0, 0, 0);
  qword_26B41CD70 = 0;
  qword_26B41CD78 = (uint64_t)&unk_270DC2E48;
  qword_26B41CCF0[0] = (uint64_t)&unk_270DC2DA8;
  qword_26B41CD80 = (uint64_t)&unk_270DBC7A8;
  qword_26B41CD88 = (uint64_t)&unk_270DC2E68;
  qword_26B41CDA0 = (uint64_t)&qword_26B41CD88;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"pass-remarks-analysis", 0x15uLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_26B41CCF0);
}

uint64_t llvm::DiagnosticInfoDebugMetadataVersion::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 48))(a2, "ignoring debug info with an invalid version (");
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 104))(v3, *(unsigned int *)(a1 + 24));
  unint64_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 48))(v4, ") in ")+ 144);
  return v5();
}

uint64_t llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::print(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 48))(a2, "ignoring invalid debug info in ")+ 56);
  return v2();
}

void llvm::DiagnosticInfoDebugMetadataVersion::~DiagnosticInfoDebugMetadataVersion(llvm::DiagnosticInfoDebugMetadataVersion *this)
{
}

void llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::~DiagnosticInfoIgnoringInvalidDebugMetadata(llvm::DiagnosticInfoIgnoringInvalidDebugMetadata *this)
{
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char a2)
{
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v4 = (char *)*((void *)v3 + 4);
  if ((unint64_t)v4 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((void *)v3 + 4) = v4 + 1;
    *uint64_t v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v4 = (char *)*((void *)v3 + 4);
  if ((unint64_t)v4 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((void *)v3 + 4) = v4 + 1;
    *uint64_t v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v4 = (char *)*((void *)v3 + 4);
  if ((unint64_t)v4 >= *((void *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((void *)v3 + 4) = v4 + 1;
    *uint64_t v4 = a2;
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const void *a2, size_t a3)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char *a2)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  size_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    size_t v5 = v4;
  }
  llvm::raw_ostream::write(v3, a2, v5);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unint64_t a2)
{
  return a1;
}

{
  llvm::write_integer(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0);
  return a1;
}

{
  write_unsigned<unsigned long>(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0, 0);
  return a1;
}

{
  llvm::write_integer(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0);
  return a1;
}

{
  llvm::write_hex(*(llvm::raw_ostream **)(a1 + 8), a2, 3, 0, 0);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unsigned int a2)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, int a2)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, double a2)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Twine *this)
{
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t ***this)
{
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    ValueName = (size_t *)llvm::Value::getValueName(this);
    size_t v5 = ValueName + 2;
    size_t v4 = *ValueName;
  }
  else
  {
    size_t v4 = 0;
    size_t v5 = &str_3_24;
  }
  llvm::raw_ostream::operator<<(v3, v5, v4);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 160);
  uint64_t v4 = a2 + 160;
  uint64_t v5 = v6;
  size_t v7 = *(void *)(v4 + 8);
  if (*(char *)(v4 + 23) >= 0)
  {
    size_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else
  {
    uint64_t v4 = v5;
    size_t v8 = v7;
  }
  llvm::raw_ostream::write(v3, (const char *)v4, v8);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::SMDiagnostic *this)
{
  return a1;
}

void llvm::DiagnosticPrinterRawOStream::~DiagnosticPrinterRawOStream(llvm::DiagnosticPrinterRawOStream *this)
{
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a3 == a2) {
    return result;
  }
  uint64_t v5 = a3;
  if (!a3) {
    return result;
  }
  if (!a2) {
    return 0;
  }
  if (*(void *)(a3 + 8) == a2) {
    return 1;
  }
  if (*(void *)(a2 + 8) == a3) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= *(_DWORD *)(a3 + 16)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    unsigned int v8 = *(_DWORD *)(a1 + 68) + 1;
    *(_DWORD *)(a1 + 68) = v8;
    if (v8 <= 0x20)
    {
      do
      {
        uint64_t v9 = v5;
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 && *(_DWORD *)(v5 + 16) >= v7);
      return v9 == a2;
    }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
  }
  if (*(_DWORD *)(v5 + 72) < *(_DWORD *)(a2 + 72)) {
    return 0;
  }
  return *(_DWORD *)(v5 + 76) <= *(_DWORD *)(a2 + 76);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (a2 == a3) {
    return 1;
  }
  uint64_t v6 = a1 + 24;
  unsigned int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, a2);
  if (*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v7) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = *(void *)(v7 + 8);
  }
  uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(v6, a3);
  if (*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, v8, v11);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(uint64_t a1)
{
  char v11[64] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    uint64_t v9 = v11;
    uint64_t v10 = 0x2000000000;
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v9, *(void *)(a1 + 48), *(void *)(v2 + 24));
      *(_DWORD *)(v2 + 72) = 0;
      unsigned int v3 = v10;
      if (v10)
      {
        int v4 = 1;
        do
        {
          uint64_t v5 = (char *)v9 + 16 * v3;
          uint64_t v7 = *((void *)v5 - 2);
          uint64_t v6 = (uint64_t *)*((void *)v5 - 1);
          if (v6 == (uint64_t *)(*(void *)(v7 + 24) + 8 * *(unsigned int *)(v7 + 32)))
          {
            *(_DWORD *)(v7 + 76) = v4;
            LODWORD(v10) = --v3;
          }
          else
          {
            uint64_t v8 = *v6;
            *((void *)v5 - 1) = v6 + 1;
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v9, v8, *(void *)(v8 + 24));
            *(_DWORD *)(v8 + 72) = v4;
            unsigned int v3 = v10;
          }
          ++v4;
        }
        while (v3);
      }
      *(_DWORD *)(a1 + 68) = 0;
      *(unsigned char *)(a1 + 64) = 1;
      if (v9 != v11) {
        free(v9);
      }
    }
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch(uint64_t a1, uint64_t a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 56);
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::clear((unsigned int *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v4;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      if (v5 != v6)
      {
        llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(*(void *)(a2 + 8), *(int **)(a2 + 16));
        llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(v6 + 296, (int *)(v5 + 296));
      }
      *(unsigned char *)(v6 + 592) = *(unsigned char *)(v5 + 592);
      llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(v6 + 600, v5 + 600);
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v5 = a2;
    }
    uint64_t v7 = operator new(8uLL);
    std::string __p = v7;
    *uint64_t v7 = 0;
    int v14 = v7 + 1;
    int v15 = v7 + 1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = v5;
    uint64_t v20 = v22;
    uint64_t v21 = 0x100000000;
    uint64_t v8 = *(void *)(v4 + 80);
    if (v8) {
      uint64_t v9 = v8 - 24;
    }
    else {
      uint64_t v9 = 0;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v20, v9);
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, (uint64_t)&v20);
    if (v20 != v22) {
      free(v20);
    }
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t **)&__p, **(void ***)a1);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA((uint64_t *)&__p, a1, 0);
    *(unsigned char *)a2 = 1;
  }
  else
  {
    uint64_t v10 = operator new(8uLL);
    std::string __p = v10;
    *uint64_t v10 = 0;
    int v14 = v10 + 1;
    int v15 = v10 + 1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = v22;
    uint64_t v21 = 0x100000000;
    uint64_t v11 = *(void *)(v4 + 80);
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v20, v12);
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, (uint64_t)&v20);
    if (v20 != v22) {
      free(v20);
    }
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t **)&__p, **(void ***)a1);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA((uint64_t *)&__p, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(a1, **(void **)a1);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::destroyAll((uint64_t)&v16);
  MEMORY[0x263E500A0](v16, 8);
  if (__p)
  {
    int v14 = __p;
    operator delete(__p);
  }
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  BOOL result = 1;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    uint64_t v7 = (const llvm::BasicBlock *)*((void *)a3 + 5);
    uint64_t v8 = *((void *)a2 + 5);
    uint64_t v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, (uint64_t)v7);
    if (*((void *)this + 3) + 16 * *((unsigned int *)this + 10) == v9 || !*(void *)(v9 + 8))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, v8);
      if (*((void *)this + 3) + 16 * *((unsigned int *)this + 10) == v10)
      {
        return 0;
      }
      else
      {
        uint64_t v11 = v10;
        BOOL result = 0;
        if (a2 != a3 && *(void *)(v11 + 8))
        {
          int v12 = *((unsigned __int8 *)a2 + 16);
          if (v12 == 33 || v12 == 39 || *((unsigned char *)a3 + 16) == 83)
          {
            return llvm::DominatorTree::dominates(this, a2, v7);
          }
          else if ((const llvm::BasicBlock *)v8 == v7)
          {
            return llvm::Instruction::comesBefore((uint64_t)a2, (uint64_t)a3);
          }
          else
          {
            return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, v8, (uint64_t)v7);
          }
        }
      }
    }
  }
  return result;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  uint64_t v6 = (const llvm::BasicBlock *)*((void *)a2 + 5);
  uint64_t v7 = (char *)this + 24;
  uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, (uint64_t)a3);
  if (*((void *)this + 3) + 16 * *((unsigned int *)this + 10) == v8 || !*(void *)(v8 + 8)) {
    return 1;
  }
  uint64_t v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)v7, (uint64_t)v6);
  if (*((void *)this + 3) + 16 * *((unsigned int *)this + 10) == v9) {
    return 0;
  }
  if (!*(void *)(v9 + 8) || v6 == a3) {
    return 0;
  }
  if (*((unsigned char *)a2 + 16) == 33)
  {
    uint64_t v12 = *((void *)a2 - 12);
    v13[0] = (uint64_t)v6;
    v13[1] = v12;
    return llvm::DominatorTree::dominates((uint64_t)this, v13, (uint64_t)a3);
  }
  else
  {
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)v6, (uint64_t)a3);
  }
}

BOOL llvm::DominatorTree::dominates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (llvm::BasicBlock *)a2[1];
  BOOL result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, a3);
  if (!result) {
    return result;
  }
  if (llvm::BasicBlock::getSinglePredecessor(v4)) {
    return 1;
  }
  uint64_t v7 = *((void *)v4 + 1);
  if (!v7) {
    return 1;
  }
  while (1)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    BOOL v10 = v8 && v9 >= 0x1C;
    if (v10 && v9 - 29 <= 0xA) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
    if (!v7) {
      return 1;
    }
  }
  int v12 = 0;
LABEL_16:
  uint64_t v13 = *(void *)(v8 + 40);
  if (v13 == v5)
  {
    if (v12) {
      return 0;
    }
    int v12 = 1;
LABEL_21:
    while (1)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        return 1;
      }
      uint64_t v8 = *(void *)(v7 + 24);
      unsigned int v14 = *(unsigned __int8 *)(v8 + 16);
      if (v8) {
        BOOL v15 = v14 >= 0x1C;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15 && v14 - 29 < 0xB) {
        goto LABEL_16;
      }
    }
  }
  BOOL result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, v13);
  if (result) {
    goto LABEL_21;
  }
  return result;
}

uint64_t llvm::DominatorTree::dominates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v4 = (uint64_t *)(v3 + 40);
  if (!v3 || *(unsigned char *)(v3 + 16) != 83) {
    return llvm::DominatorTree::dominates(a1, a2, *v4);
  }
  int v5 = *(_DWORD *)(v3 + 20);
  if (*(void *)(v3 + 40) != a2[1]
    || ((v5 & 0x40000000) != 0 ? (uint64_t v6 = *(void *)(v3 - 8)) : (uint64_t v6 = v3 - 32 * (v5 & 0x7FFFFFF)),
        *(void *)(v6 + 32 * *(unsigned int *)(v3 + 60) + 8 * ((unint64_t)(a3 - v6) >> 5)) != *a2))
  {
    if ((v5 & 0x40000000) != 0) {
      uint64_t v7 = *(void *)(v3 - 8);
    }
    else {
      uint64_t v7 = v3 - 32 * (v5 & 0x7FFFFFF);
    }
    uint64_t v4 = (uint64_t *)(v7 + 32 * *(unsigned int *)(v3 + 60) + 8 * ((unint64_t)(a3 - v7) >> 5));
    return llvm::DominatorTree::dominates(a1, a2, *v4);
  }
  return 1;
}

uint64_t llvm::DominatorTree::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return result;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7 && *(unsigned char *)(v7 + 16) == 83)
  {
    int v8 = *(_DWORD *)(v7 + 20);
    if ((v8 & 0x40000000) != 0) {
      uint64_t v9 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v9 = v7 - 32 * (v8 & 0x7FFFFFF);
    }
    BOOL v10 = (uint64_t *)(v9 + 32 * *(unsigned int *)(v7 + 60) + 8 * ((unint64_t)(a3 - v9) >> 5));
  }
  else
  {
    BOOL v10 = (uint64_t *)(v7 + 40);
  }
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *v10;
  uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, *v10);
  if (*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v13 || !*(void *)(v13 + 8)) {
    return 1;
  }
  uint64_t v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, v11);
  if (*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v14 || !*(void *)(v14 + 8)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 16) == 33)
  {
    uint64_t v15 = *(void *)(a2 - 96);
    v16[0] = v11;
    v16[1] = v15;
    return llvm::DominatorTree::dominates(a1, v16, a3);
  }
  if (v11 != v12)
  {
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, v11, v12);
  }
  if (*(unsigned char *)(v7 + 16) == 83) {
    return 1;
  }
  return llvm::Instruction::comesBefore(a2, v7);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::destroyAll(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = *(void *)a1 + 56;
    do
    {
      if ((*(void *)(v3 - 56) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4) {
          free(v4);
        }
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  v44[32] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  if ((v5 >> 3) >= 2)
  {
    uint64_t v6 = 1;
    do
    {
      uint64_t v42 = *(void **)(v4 + 8 * v6);
      uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v42);
      uint64_t v4 = *a1;
      v7[4] = *(void *)(*a1 + 8 * *((unsigned int *)v7 + 3));
      ++v6;
    }
    while ((v5 >> 3) != v6);
  }
  uint64_t v42 = v44;
  uint64_t v43 = 0x2000000000;
  uint64_t v8 = (v5 >> 3) - 1;
  if (v8 >= 2)
  {
    unint64_t v34 = v5 >> 3;
    unint64_t v35 = v5;
    unint64_t v9 = v5 >> 3;
    do
    {
      uint64_t v36 = v8;
      uint64_t v40 = *(void *)(*a1 + 8 * v8);
      BOOL v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40);
      *((_DWORD *)v10 + 4) = *((_DWORD *)v10 + 3);
      uint64_t v11 = *((unsigned int *)v10 + 12);
      if (v11)
      {
        uint64_t v12 = v10;
        uint64_t v13 = (uint64_t *)v10[5];
        uint64_t v14 = &v13[v11];
        do
        {
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(a1[3], *((_DWORD *)a1 + 10), *v13, &v41))
          {
            uint64_t v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a2 + 24, *v13);
            if (*(void *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 40) == v15
              || (uint64_t v16 = *(void *)(v15 + 8)) == 0
              || *(_DWORD *)(v16 + 16) >= a3)
            {
              unsigned int v41 = (void *)*v13;
              uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v41);
              if (*((_DWORD *)v17 + 3) >= v9)
              {
                uint64_t v19 = v17 + 1;
                do
                {
                  uint64_t v20 = v43;
                  if (v43 >= (unint64_t)HIDWORD(v43))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, v43 + 1, 8);
                    uint64_t v20 = v43;
                  }
                  *((void *)v42 + v20) = v19;
                  LODWORD(v43) = v43 + 1;
                  uint64_t v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(*a1 + 8 * *((unsigned int *)v19 + 1)));
                  uint64_t v19 = v21 + 1;
                }
                while (*((_DWORD *)v21 + 3) >= v9);
                unint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), v21 + 3)+ 1;
                unsigned int v23 = v43;
                do
                {
                  uint64_t v24 = *((void *)v42 + v23 - 1);
                  LODWORD(v43) = v23 - 1;
                  *(_DWORD *)(v24 + 4) = *((_DWORD *)v19 + 1);
                  int v18 = (uint64_t *)(v24 + 16);
                  __int16 v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(v24 + 16));
                  if (*((_DWORD *)v22 + 2) >= *((_DWORD *)v25 + 4)) {
                    unint64_t v22 = v25 + 1;
                  }
                  else {
                    uint64_t *v18 = v19[2];
                  }
                  unsigned int v23 = v43;
                  uint64_t v19 = (void *)v24;
                }
                while (v43);
              }
              else
              {
                int v18 = v17 + 3;
              }
              uint64_t v26 = *v18;
              uint64_t v39 = v26;
              unsigned int v41 = 0;
              char v27 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(a1[3], *((_DWORD *)a1 + 10), v26, &v41);
              uint64_t v28 = v41;
              if ((v27 & 1) == 0)
              {
                uint64_t v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>((uint64_t)(a1 + 3), &v39, v41);
                void *v28 = v26;
                *(_OWORD *)(v28 + 5) = 0u;
                *(_OWORD *)(v28 + 1) = 0u;
                *(_OWORD *)(v28 + 3) = 0u;
                *(_OWORD *)(v28 + 7) = 0u;
                v28[5] = v28 + 7;
                *((_DWORD *)v28 + 13) = 2;
              }
              unsigned int v29 = *((_DWORD *)v28 + 4);
              if (v29 < *((_DWORD *)v12 + 4)) {
                *((_DWORD *)v12 + 4) = v29;
              }
            }
          }
          ++v13;
        }
        while (v13 != v14);
      }
      LODWORD(v9) = v36;
      uint64_t v8 = v36 - 1;
    }
    while (((v36 - 1) & 0xFFFFFFFELL) != 0);
    if (v34 >= 3)
    {
      uint64_t v30 = 2;
      do
      {
        unsigned int v41 = *(void **)(*a1 + 8 * v30);
        unsigned int v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v41);
        unsigned int v32 = *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(*a1 + 8 * *((unsigned int *)v31 + 4)))+ 2);
        for (uint64_t i = v31[4];
              ;
              uint64_t i = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40)[4])
        {
          uint64_t v40 = i;
          if (*((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40)+ 2) <= v32)break; {
        }
          }
        v31[4] = i;
        ++v30;
      }
      while (v30 != (v35 >> 3));
    }
  }
  if (v42 != v44) {
    free(v42);
  }
}

void *llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::attachNewSubtree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 24;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct(a1 + 24, (uint64_t *)(*(void *)a1 + 8));
  result[4] = a3;
  uint64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8 != 8)
  {
    uint64_t v9 = v8 >> 3;
    uint64_t v10 = 1;
    do
    {
      uint64_t v13 = 0;
      uint64_t v13 = *(void *)(*(void *)a1 + 8 * v10);
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct((uint64_t *)(a2 + 24), &v13);
      if (!result[1])
      {
        uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(v6, v13);
        if (*(void *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v11) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = *(void *)(v11 + 32);
        }
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(a1, v12, a2);
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a2, v13);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

void llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(uint64_t a1, int *a2)
{
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::destroyAll(a1);
  int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x263E500A0](*(void *)(a1 + 8), 8);
    int v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  int v5 = *a2;
  int v6 = 1;
  if ((*a2 & 1) == 0 && a2[4] >= 5)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v7 = 4;
    }
    else {
      uint64_t v7 = a2[4];
    }
    *(void *)(a1 + 8) = operator new(8 * (v7 + 8 * v7), (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v7;
    int v5 = *a2;
    int v6 = *(_DWORD *)a1 & 1;
  }
  unint64_t v8 = 0;
  unsigned int v9 = v6 | v5 & 0xFFFFFFFE;
  *(_DWORD *)a1 = v9;
  *(_DWORD *)(a1 + 4) = a2[1];
  uint64_t v10 = (uint64_t *)(a1 + 8);
  if (v9) {
    goto LABEL_12;
  }
  while (v8 < *(unsigned int *)(a1 + 16))
  {
    uint64_t v11 = *v10;
    while (1)
    {
      if (*a2) {
        uint64_t v12 = a2 + 2;
      }
      else {
        uint64_t v12 = (int *)*((void *)a2 + 1);
      }
      *(void *)(v11 + 72 * v8) = *(void *)&v12[18 * v8];
      int v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a1)
      {
        uint64_t v15 = v10[9 * v8] | 0x1000;
        uint64_t v14 = a1 + 8;
      }
      else
      {
        uint64_t v14 = *v10;
        uint64_t v15 = *(void *)(*v10 + 72 * v8) | 0x1000;
      }
      if (v15 != -4096)
      {
        char v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = v14 + 72 * v8 + 8;
        uint64_t v19 = (int *)*((void *)a2 + 1);
        if (*(unsigned char *)a2) {
          uint64_t v19 = a2 + 2;
        }
        uint64_t v20 = (uint64_t)&v19[18 * v8 + 2];
        do
        {
          char v21 = v16;
          unint64_t v22 = (void *)(v18 + 32 * v17);
          uint64_t v23 = v20 + 32 * v17;
          *unint64_t v22 = v22 + 2;
          v22[1] = 0x200000000;
          if (*(_DWORD *)(v23 + 8)) {
            llvm::SmallVectorImpl<llvm::BasicBlock *>::operator=((uint64_t)v22, v23);
          }
          char v16 = 1;
          uint64_t v17 = 1;
        }
        while ((v21 & 1) == 0);
        int v13 = *(_DWORD *)a1;
      }
      ++v8;
      if ((v13 & 1) == 0) {
        break;
      }
LABEL_12:
      uint64_t v11 = a1 + 8;
      if (v8 >= 4) {
        return;
      }
    }
  }
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(uint64_t **a1, void *a2)
{
  v36[64] = *MEMORY[0x263EF8340];
  unsigned int v29 = a2;
  uint64_t __src = a2;
  unint64_t v34 = v36;
  uint64_t v35 = 0x4000000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v34, &__src, &v32);
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>((uint64_t)a1[3], *((_DWORD *)a1 + 10), (uint64_t)a2, &__src))*((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v29)+ 3) = 0; {
  unsigned int v4 = v35;
  }
  if (v35)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = *((void *)v34 + v4 - 1);
      LODWORD(v35) = v4 - 1;
      uint64_t v28 = v6;
      uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v28);
      if (!*((_DWORD *)v7 + 2))
      {
        *((_DWORD *)v7 + 4) = ++v5;
        *((_DWORD *)v7 + 2) = v5;
        v7[3] = v6;
        unsigned int v9 = a1[1];
        unint64_t v8 = (unint64_t)a1[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = v9 - *a1;
          if ((unint64_t)(v11 + 1) >> 61) {
            abort();
          }
          uint64_t v12 = v8 - (void)*a1;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 2), v14);
          }
          else {
            uint64_t v15 = 0;
          }
          char v16 = (uint64_t *)&v15[8 * v11];
          uint64_t *v16 = v6;
          uint64_t v10 = (char *)(v16 + 1);
          uint64_t v18 = (char *)*a1;
          uint64_t v17 = (char *)a1[1];
          if (v17 != (char *)*a1)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *--char v16 = v19;
            }
            while (v17 != v18);
            uint64_t v17 = (char *)*a1;
          }
          *a1 = v16;
          a1[1] = (uint64_t *)v10;
          a1[2] = (uint64_t *)&v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          uint64_t *v9 = v6;
          uint64_t v10 = (char *)(v9 + 1);
        }
        a1[1] = (uint64_t *)v10;
        uint64_t v20 = v28;
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>((void **)&__src, v28, (uint64_t)a1[6]);
        char v21 = (uint64_t *)__src;
        if (v32)
        {
          uint64_t v22 = 8 * v32;
          while (1)
          {
            uint64_t v23 = *v21;
            uint64_t v27 = v23;
            uint64_t v30 = 0;
            int v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>((uint64_t)a1[3], *((_DWORD *)a1 + 10), v23, &v30);
            __int16 v25 = v30;
            if (v24) {
              BOOL v26 = v30 == (char *)&a1[3][9 * *((unsigned int *)a1 + 10)];
            }
            else {
              BOOL v26 = 1;
            }
            if (v26 || !*((_DWORD *)v30 + 2))
            {
              __int16 v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v27);
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v34, v23);
              *((_DWORD *)v25 + 3) = v5;
            }
            else if (v23 == v20)
            {
              goto LABEL_33;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v25 + 10, v20);
LABEL_33:
            ++v21;
            v22 -= 8;
            if (!v22)
            {
              char v21 = (uint64_t *)__src;
              break;
            }
          }
        }
        if (v21 != &v33) {
          free(v21);
        }
      }
      unsigned int v4 = v35;
    }
    while (v35);
  }
  if (v34 != v36) {
    free(v34);
  }
}

unsigned char *llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>(void **a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a3 + 8);
    return llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>(v4, a2, a1);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6 == a2 + 40)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v7 = v6 - 24;
      if (v6) {
        uint64_t v8 = v6 - 24;
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v7;
      }
    }
    uint64_t v10 = llvm::GraphTraits<llvm::BasicBlock *>::child_end(a2);
    *a1 = a1 + 2;
    a1[1] = (void *)0x800000000;
    v13[0] = v10;
    v13[1] = v11;
    uint64_t v13[2] = v10;
    void v13[3] = v11;
    v12[0] = v9;
    v12[1] = 0;
    v12[2] = v9;
    v12[3] = 0;
    llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>((unsigned int *)a1, (uint64_t)v13, (uint64_t)v12);
    v13[0] = 0;
    uint64_t result = std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(*a1, &(*a1)[*((unsigned int *)a1 + 2)]);
    *((_DWORD *)a1 + 2) = (unint64_t)(result - (unsigned char *)*a1) >> 3;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>(a1, a2, v7);
    *int v5 = *a2;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    v5[5] = v5 + 7;
    *((_DWORD *)v5 + 13) = 2;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 72 * v10;
      do
      {
        void *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4 + 40;
      uint64_t v13 = 72 * v3;
      do
      {
        uint64_t v14 = *(void *)(v12 - 40);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          uint64_t v15 = v22;
          char v16 = v22;
          *uint64_t v22 = *(void *)(v12 - 40);
          long long v17 = *(_OWORD *)(v12 - 32);
          long long v18 = *(_OWORD *)(v12 - 16);
          v15[5] = v16 + 7;
          uint64_t v19 = (uint64_t)(v15 + 5);
          *(_OWORD *)(v19 - 32) = v17;
          *(_OWORD *)(v19 - 16) = v18;
          *(void *)(v19 + 8) = 0x200000000;
          if (*(_DWORD *)(v12 + 8)) {
            llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v19, v12);
          }
          ++*(_DWORD *)(a1 + 8);
          if (v12 + 16 != *(void *)v12) {
            free(*(void **)v12);
          }
        }
        v12 += 72;
        v13 -= 72;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    uint64_t v21 = 72 * v20;
    do
    {
      void *result = -4096;
      result += 9;
      v21 -= 72;
    }
    while (v21);
  }
  return result;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a3 + 24, a2);
  if (*(void *)(a3 + 24) + 16 * *(unsigned int *)(a3 + 40) == v6 || (uint64_t result = *(void *)(v6 + 8)) == 0)
  {
    uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(a1 + 24, a2);
    if (*(void *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(void *)(v8 + 32);
    }
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(a1, v9, a3);
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a3, a2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

uint64_t _GLOBAL__sub_I_Dominators_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41CDB0, 0, 0);
  qword_26B41CE30 = 0;
  byte_26B41CE41 = 0;
  qword_26B41CE38 = (uint64_t)&unk_270DBC978;
  qword_26B41CDB0 = (uint64_t)&unk_270DBD0D8;
  qword_26B41CE48 = (uint64_t)&unk_270DBC658;
  qword_26B41CE50 = (uint64_t)&unk_270DBD140;
  qword_26B41CE68 = (uint64_t)&qword_26B41CE50;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-dom-info", 0xFuLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_26B41CE30, (uint64_t)&qword_26B41CDB0, _MergedGlobals_37);
  word_26B41CDBA = word_26B41CDBA & 0xFF9F | 0x20;
  qword_26B41CDD0 = (uint64_t)"Verify dominator info (time consuming)";
  unk_26B41CDD8 = 38;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41CDB0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_26B41CDB0, &dword_261C2B000);
}

uint64_t llvm::classifyEHPersonality(uint64_t this, const llvm::Value *a2)
{
  if (this)
  {
    uint64_t v2 = llvm::Value::stripPointerCasts((llvm::Value *)this);
    if (*((unsigned __int8 *)v2 + 16) <= 3u)
    {
      uint64_t v3 = *((void *)v2 + 3);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 8) == 14 && (*((unsigned char *)v2 + 23) & 0x10) != 0)
        {
          uint64_t ValueName = llvm::Value::getValueName((uint64_t ***)v2);
          switch(*(void *)ValueName)
          {
            case 0x10:
              if ((*(void *)(ValueName + 16) != 0x5F7470656378655FLL
                 || *(void *)(ValueName + 24) != 0x3372656C646E6168)
                && (*(void *)(ValueName + 16) != 0x5F7470656378655FLL
                 || *(void *)(ValueName + 24) != 0x3472656C646E6168))
              {
                return 0;
              }
              return 7;
            case 0x12:
              if (*(void *)(ValueName + 16) != 0x6172467878435F5FLL
                || *(void *)(ValueName + 24) != 0x656C646E6148656DLL
                || *(_WORD *)(ValueName + 32) != 13170)
              {
                return 0;
              }
              return 9;
            case 0x13:
              if (*(void *)(ValueName + 16) == 0x43737365636F7250
                && *(void *)(ValueName + 24) == 0x747065637845524CLL
                && *(void *)(ValueName + 27) == 0x6E6F697470656378)
              {
                return 10;
              }
              if (*(void *)(ValueName + 16) == 0x5F68655F74737572
                && *(void *)(ValueName + 24) == 0x6C616E6F73726570
                && *(void *)(ValueName + 27) == 0x7974696C616E6F73)
              {
                return 11;
              }
              return 0;
            case 0x14:
              if (*(void *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_DWORD *)(ValueName + 32) == 813064057)
              {
                return 4;
              }
              if (*(void *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_DWORD *)(ValueName + 32) == 813064057)
              {
                return 2;
              }
              if (*(void *)(ValueName + 16) != 0x636570735F435F5FLL
                || *(void *)(ValueName + 24) != 0x6E61685F63696669
                || *(_DWORD *)(ValueName + 32) != 1919249508)
              {
                return 0;
              }
              return 8;
            case 0x15:
              if (*(void *)(ValueName + 16) == 0x655F74616E675F5FLL
                && *(void *)(ValueName + 24) == 0x6E6F737265705F68
                && *(void *)(ValueName + 29) == 0x7974696C616E6F73)
              {
                return 1;
              }
              if (*(void *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(void *)(ValueName + 29) == 0x306A735F7974696CLL)
              {
                return 5;
              }
              if (*(void *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(void *)(ValueName + 29) == 0x306A735F7974696CLL)
              {
                return 3;
              }
              if (*(void *)(ValueName + 16) == 0x705F636A626F5F5FLL
                && *(void *)(ValueName + 24) == 0x696C616E6F737265
                && *(void *)(ValueName + 29) == 0x30765F7974696C61)
              {
                return 6;
              }
              return 0;
            case 0x16:
              if (*(void *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(void *)(ValueName + 30) == 0x306865735F797469)
              {
                return 4;
              }
              if (*(void *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(void *)(ValueName + 24) == 0x74696C616E6F7372
                && *(void *)(ValueName + 30) == 0x306865735F797469)
              {
                return 2;
              }
              if (*(void *)(ValueName + 16) == 0x5F7878636C785F5FLL
                && *(void *)(ValueName + 24) == 0x6C616E6F73726570
                && *(void *)(ValueName + 30) == 0x31765F7974696C61)
              {
                return 13;
              }
              break;
            case 0x19:
              if (*(void *)(ValueName + 16) != 0x61775F7878675F5FLL
                || *(void *)(ValueName + 24) != 0x6F737265705F6D73
                || *(void *)(ValueName + 32) != 0x765F7974696C616ELL
                || *(unsigned char *)(ValueName + 40) != 48)
              {
                return 0;
              }
              return 12;
            default:
              return 0;
          }
        }
      }
    }
    return 0;
  }
  return this;
}

void llvm::colorEHFunclets(llvm *this@<X0>, uint64_t a2@<X8>)
{
  v46[32] = *MEMORY[0x263EF8340];
  uint64_t v44 = v46;
  uint64_t v45 = 0x1000000000;
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    uint64_t v5 = v4 - 24;
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v44, v5, v5);
  unsigned int v6 = v45;
  if (v45)
  {
    while (1)
    {
      int v7 = (char *)v44 + 16 * v6;
      uint64_t v9 = *((void *)v7 - 2);
      uint64_t v8 = *((void *)v7 - 1);
      LODWORD(v45) = v6 - 1;
      for (uint64_t i = *(void *)(v9 + 48); ; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v11 = i - 24;
        if (!i) {
          uint64_t v11 = 0;
        }
        if (*(unsigned char *)(v11 + 16) != 83) {
          break;
        }
      }
      unsigned int v12 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v13 = v12 > 0x38;
      uint64_t v14 = (1 << v12) & 0x100060000000001;
      BOOL v15 = v13 || v14 == 0;
      uint64_t v16 = v15 ? v8 : v9;
      uint64_t v43 = 0;
      unsigned int v17 = *(_DWORD *)(a2 + 16);
      char v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a2, v17, v9, &v43);
      uint64_t v19 = v43;
      if ((v18 & 1) == 0) {
        break;
      }
      uint64_t v21 = v43 + 1;
      unint64_t v20 = v43[1];
      if ((v20 & 4) != 0)
      {
        int v22 = 0;
        uint64_t v23 = *(unint64_t **)(v20 & 0xFFFFFFFFFFFFFFF8);
        int v24 = &v23[*(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8)];
        goto LABEL_25;
      }
LABEL_24:
      int v24 = &v21[v20 > 7];
      int v22 = 1;
      uint64_t v23 = v21;
LABEL_25:
      if (v23 != v24)
      {
        while (*v23 != v16)
        {
          if (++v23 == v24)
          {
            uint64_t v23 = v24;
            break;
          }
        }
      }
      if (v22) {
        uint64_t v26 = (uint64_t)&v21[v20 > 7];
      }
      else {
        uint64_t v26 = *(void *)(v20 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v23 != (unint64_t *)v26) {
        goto LABEL_33;
      }
      if (v20 > 7)
      {
        if (v22) {
          operator new();
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8), v16);
      }
      else
      {
        *uint64_t v21 = v16 & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v27 = *(void *)(v9 + 40);
      if (v27 == v9 + 40) {
        goto LABEL_33;
      }
      uint64_t v28 = (llvm::Instruction *)(v27 - 24);
      if (v27) {
        uint64_t v29 = v27 - 24;
      }
      else {
        uint64_t v29 = 0;
      }
      int v30 = *(unsigned __int8 *)(v29 + 16);
      if ((v30 - 40) >= 0xFFFFFFF5) {
        unsigned int v31 = v28;
      }
      else {
        unsigned int v31 = 0;
      }
      if (*((unsigned char *)v31 + 16) == 37 && (v30 - 40) >= 0xFFFFFFF5)
      {
        uint64_t v33 = *(void *)(*((void *)v31 - 8) - 32);
        int v34 = *(_DWORD *)(v33 + 20);
        if ((v34 & 0x40000000) != 0) {
          uint64_t v35 = *(uint64_t **)(v33 - 8);
        }
        else {
          uint64_t v35 = (uint64_t *)(v33 - 32 * (v34 & 0x7FFFFFF));
        }
        uint64_t v36 = *v35;
        uint64_t v16 = v5;
        if (*(unsigned char *)(v36 + 16) != 20) {
          uint64_t v16 = *(void *)(v36 + 40);
        }
LABEL_58:
        int NumSuccessors = llvm::Instruction::getNumSuccessors(v28);
        if (NumSuccessors)
        {
          int v38 = NumSuccessors;
          for (unsigned int j = 0; j != v38; ++j)
          {
            uint64_t Successor = llvm::Instruction::getSuccessor(v28, j);
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v44, Successor, v16);
          }
        }
        goto LABEL_33;
      }
      if ((v30 - 29) <= 0xA) {
        goto LABEL_58;
      }
LABEL_33:
      unsigned int v6 = v45;
      if (!v45) {
        goto LABEL_65;
      }
    }
    int v25 = *(_DWORD *)(a2 + 8);
    if (4 * v25 + 4 >= 3 * v17)
    {
      int v41 = 2 * v17;
      uint64_t v42 = a2;
    }
    else
    {
      if (v17 + ~v25 - *(_DWORD *)(a2 + 12) > v17 >> 3)
      {
LABEL_21:
        ++*(_DWORD *)(a2 + 8);
        if (*v19 != -4096) {
          --*(_DWORD *)(a2 + 12);
        }
        unint64_t v20 = 0;
        uint64_t *v19 = v9;
        v19[1] = 0;
        uint64_t v21 = (unint64_t *)(v19 + 1);
        goto LABEL_24;
      }
      uint64_t v42 = a2;
      int v41 = v17;
    }
    llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::grow(v42, v41);
    uint64_t v43 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a2, *(_DWORD *)(a2 + 16), v9, &v43);
    uint64_t v19 = v43;
    goto LABEL_21;
  }
LABEL_65:
  if (v44 != v46) {
    free(v44);
  }
}

uint64_t *llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    uint64_t v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2) {
        free(*v3);
      }
      MEMORY[0x263E500B0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

void *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      unsigned int v12 = (uint64_t *)(v4 + 8);
      uint64_t v13 = 16 * v3;
      do
      {
        uint64_t v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          char v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          BOOL v15 = v18;
          void *v18 = *(v12 - 1);
          v15[1] = *v12;
          *unsigned int v12 = 0;
          ++*(_DWORD *)(a1 + 8);
          llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(v12);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::convertStrToRoundingMode(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 12:
      if (*a1 ^ 0x70752E646E756F72 | *((unsigned int *)a1 + 2) ^ 0x64726177) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 258;
      }
      break;
    case 13:
      uint64_t v4 = *a1;
      uint64_t v5 = *(uint64_t *)((char *)a1 + 5);
      if (v4 != 0x79642E646E756F72 || v5 != 0x63696D616E79642ELL) {
        goto LABEL_37;
      }
      uint64_t result = 263;
      break;
    case 14:
      uint64_t v7 = *a1;
      uint64_t v8 = *(uint64_t *)((char *)a1 + 6);
      if (v7 != 0x6F642E646E756F72 || v8 != 0x647261776E776F64) {
        goto LABEL_37;
      }
      uint64_t result = 259;
      break;
    case 15:
      uint64_t v10 = *a1;
      uint64_t v11 = *(uint64_t *)((char *)a1 + 7);
      if (v10 != 0x6F742E646E756F72 || v11 != 0x7473657261656E6FLL) {
        goto LABEL_37;
      }
      uint64_t result = 257;
      break;
    case 16:
      uint64_t v14 = *a1;
      uint64_t v13 = a1[1];
      int v16 = v14 == 0x6F742E646E756F72 && v13 == 0x6F72657A64726177;
      uint64_t result = (v16 << 8);
      break;
    case 19:
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      uint64_t v19 = *(uint64_t *)((char *)a1 + 11);
      if (v17 == 0x6F742E646E756F72 && v18 == 0x617473657261656ELL && v19 == 0x7961776174736572) {
        uint64_t result = 260;
      }
      else {
LABEL_37:
      }
        uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::convertRoundingModeToStr@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[16] = 0;
  switch((int)result)
  {
    case 0:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.towardzero");
      break;
    case 1:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.tonearest");
      break;
    case 2:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.upward");
      break;
    case 3:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.downward");
      break;
    case 4:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.tonearestaway");
      break;
    case 7:
      uint64_t result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.dynamic");
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>(uint64_t a1, char *__s)
{
  if (*(unsigned char *)(a1 + 16))
  {
    size_t v4 = strlen(__s);
    *(void *)a1 = __s;
    *(void *)(a1 + 8) = v4;
  }
  else
  {
    *(void *)a1 = __s;
    *(void *)(a1 + 8) = strlen(__s);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t llvm::convertStrToExceptionBehavior(void *a1, uint64_t a2)
{
  if (a2 == 16)
  {
    if (*a1 == 0x7470656378657066 && a1[1] == 0x7061727479616D2ELL) {
      return 257;
    }
    return 0;
  }
  if (a2 != 15) {
    return 0;
  }
  if (*a1 == 0x7470656378657066 && *(void *)((char *)a1 + 7) == 0x65726F6E67692E74) {
    return 256;
  }
  if (*a1 ^ 0x7470656378657066 | *(void *)((char *)a1 + 7) ^ 0x7463697274732E74) {
    return 0;
  }
  return 258;
}

uint64_t llvm::convertExceptionBehaviorToStr@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[16] = 0;
  if (result)
  {
    if (result == 1) {
      return std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "fpexcept.maytrap");
    }
    if (result != 2) {
      return result;
    }
    uint64_t v2 = "fpexcept.strict";
  }
  else
  {
    uint64_t v2 = "fpexcept.ignore";
  }
  return std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, v2);
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a1 - 72;
    uint64_t v7 = *(llvm::ValueSymbolTable **)(a1 + 32);
    uint64_t v8 = *(void *)(a2 + 32);
    if (v7 == (llvm::ValueSymbolTable *)v8)
    {
      while (a3 != a4)
      {
        uint64_t v12 = a3 - 24;
        if (!a3) {
          uint64_t v12 = 0;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((void *)(v12 + 40), (void *)(v12 + 56), v6);
        a3 = *(void *)(a3 + 8);
      }
    }
    else
    {
      while (a3 != a4)
      {
        if (a3) {
          uint64_t v9 = a3 - 24;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
        if (v8 && v10)
        {
          uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v9);
          llvm::StringMapImpl::RemoveKey(v8, (uint64_t *)((char *)ValueName + *(unsigned int *)(v8 + 20)), *ValueName);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((void *)(v9 + 40), (void *)(v9 + 56), v6);
        if (v7)
        {
          if (v10) {
            llvm::ValueSymbolTable::reinsertValue(v7, (uint64_t ***)v9);
          }
        }
        a3 = *(void *)(a3 + 8);
      }
    }
  }
}

uint64_t llvm::Argument::hasPassPointeeByValueCopyAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return 0;
  }
  uint64_t v1 = *(void *)(*((void *)this + 3) + 112);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8)) {
    return 0;
  }
  uint64_t v3 = v1 + 40;
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (!v4 || (*(unsigned char *)(v4 + 20) & 0x40) == 0)
  {
    uint64_t v5 = *(void *)(v3 + 8 * v2);
    if (!v5 || (*(unsigned char *)(v5 + 21) & 1) == 0)
    {
      uint64_t v6 = *(void *)(v3 + 8 * v2);
      if (v6) {
        return (*(unsigned __int8 *)(v6 + 21) >> 1) & 1;
      }
      return 0;
    }
  }
  return 1;
}

unint64_t llvm::Argument::getPassPointeeByValueCopySize(llvm::Argument *this, const llvm::DataLayout *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 3) + 112);
  if (v3 && (unsigned int v4 = *((_DWORD *)this + 8) + 2, v4 < *(_DWORD *)(v3 + 8))) {
    uint64_t v5 = *(void *)(v3 + 8 * v4 + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  MemoryParamAllocType = (llvm::Type *)getMemoryParamAllocType(v5);
  if (!MemoryParamAllocType) {
    return 0;
  }
  TypeAllocint Size = llvm::DataLayout::getTypeAllocSize(a2, MemoryParamAllocType);
  if ((_BYTE)v7) {
  return TypeAllocSize;
  }
}

uint64_t getMemoryParamAllocType(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
    if (!v3 || !EnumAttribute || (uint64_t result = *(void *)(EnumAttribute + 16)) == 0)
    {
      uint64_t v4 = llvm::AttributeSetNode::findEnumAttribute(v1, 69);
      if (!v5 || !v4 || (uint64_t result = *(void *)(v4 + 16)) == 0)
      {
        uint64_t v6 = llvm::AttributeSetNode::findEnumAttribute(v1, 73);
        if (!v7 || !v6 || (uint64_t result = *(void *)(v6 + 16)) == 0)
        {
          uint64_t v8 = llvm::AttributeSetNode::findEnumAttribute(v1, 72);
          if (!v9 || !v8 || (uint64_t result = *(void *)(v8 + 16)) == 0)
          {
            uint64_t v10 = llvm::AttributeSetNode::findEnumAttribute(v1, 74);
            uint64_t result = 0;
            if (v11)
            {
              if (v10) {
                return *(void *)(v10 + 16);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Argument::hasStructRetAttr(llvm::Argument *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15
    && (uint64_t v1 = *(void *)(*((void *)this + 3) + 112)) != 0
    && (unsigned int v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (uint64_t v3 = *(void *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v3 + 21) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    uint64_t v3 = (llvm::Value *)(a2 - 56);
  }
  else {
    uint64_t v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(a1, v3);
  uint64_t v4 = *((void *)v3 + 7);
  char v5 = (void *)*((void *)v3 + 8);
  *char v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  llvm::Function::~Function(v3);
  llvm::User::operator delete(v6);
  return v2;
}

uint64_t llvm::Function::Function(uint64_t a1, uint64_t a2, int a3, llvm::Type *a4, const llvm::Twine *a5, uint64_t a6)
{
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v11 = a1 - 32 * (v10 & 0x7FFFFFF);
  }
  if (a4 == -1)
  {
    if (a6) {
      a4 = (llvm::Type *)*(unsigned int *)(a6 + 268);
    }
    else {
      a4 = 0;
    }
  }
  llvm::GlobalValue::GlobalValue(a1, (llvm::PointerType **)a2, 0, v11, 0, a3, a5, a4);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  int v12 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  *(_DWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 72;
  *(void *)(a1 + 80) = a1 + 72;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = (*(_DWORD *)(a2 + 12) - 1);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 32) = v12;
  if (!*(unsigned char *)(***(void ***)a1 + 2720)) {
    operator new();
  }
  if (*(_DWORD *)(a2 + 12) != 1) {
    *(_WORD *)(a1 + 18) = 1;
  }
  if (a6) {
    llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(a6 + 24, (uint64_t *)(a6 + 24), a1);
  }
  if ((*(unsigned char *)(a1 + 23) & 0x10) != 0
    && (uint64_t ValueName = llvm::Value::getValueName((uint64_t ***)a1), *(void *)ValueName >= 5uLL))
  {
    unsigned int v15 = bswap32(*(_DWORD *)(ValueName + 16));
    if (v15 == 1819047533)
    {
      int v16 = *(unsigned __int8 *)(ValueName + 20) - 46;
    }
    else if (v15 < 0x6C6C766D)
    {
      int v16 = -1;
    }
    else
    {
      int v16 = 1;
    }
    int v14 = (v16 == 0) << 13;
  }
  else
  {
    int v14 = 0;
  }
  int v17 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFDFFF | v14;
  if (v17) {
    *(void *)(a1 + 112) = llvm::Intrinsic::getAttributes(**(uint64_t ***)a1, v17);
  }
  return a1;
}

uint64_t *llvm::Intrinsic::getAttributes(uint64_t *a1, int a2)
{
  uint64_t v3 = 0;
  uint64_t v473 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v4 = &v457[v3];
    *uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    v3 += 4;
  }
  while (v3 != 80);
  if (a2)
  {
    uint64_t result = 0;
    switch(a2)
    {
      case 2:
      case 18:
      case 19:
      case 61:
      case 65:
      case 78:
      case 124:
      case 131:
      case 132:
      case 133:
      case 134:
      case 153:
      case 175:
      case 251:
      case 254:
      case 282:
      case 297:
      case 301:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 344:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 364:
      case 365:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 416:
      case 419:
      case 420:
      case 421:
      case 422:
      case 423:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 470:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 667:
      case 671:
      case 672:
      case 685:
      case 686:
      case 687:
      case 688:
      case 956:
      case 957:
      case 958:
      case 959:
      case 960:
      case 961:
      case 962:
      case 963:
      case 964:
      case 965:
      case 966:
      case 967:
      case 968:
      case 969:
      case 970:
      case 971:
      case 972:
      case 973:
      case 974:
      case 975:
      case 976:
      case 977:
      case 978:
      case 979:
      case 980:
      case 981:
      case 983:
      case 984:
      case 985:
      case 986:
      case 987:
      case 988:
      case 990:
      case 992:
      case 994:
      case 995:
      case 996:
      case 997:
      case 998:
      case 999:
      case 1000:
      case 1001:
      case 1002:
      case 1003:
      case 1004:
      case 1005:
      case 1006:
      case 1007:
      case 1008:
      case 1012:
      case 1013:
      case 1014:
      case 1015:
      case 1016:
      case 1017:
      case 1020:
      case 1021:
      case 1022:
      case 1023:
      case 1024:
      case 1025:
      case 1026:
      case 1027:
      case 1028:
      case 1029:
      case 1030:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1041:
      case 1043:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
      case 1050:
      case 1051:
      case 1052:
      case 1053:
      case 1054:
      case 1055:
      case 1057:
      case 1058:
      case 1059:
      case 1060:
      case 1061:
      case 1062:
      case 1063:
      case 1064:
      case 1065:
      case 1066:
      case 1068:
      case 1069:
      case 1070:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
      case 1077:
      case 1078:
      case 1079:
      case 1080:
      case 1081:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1086:
      case 1087:
      case 1088:
      case 1089:
      case 1090:
      case 1091:
      case 1092:
      case 1093:
      case 1094:
      case 1095:
      case 1096:
      case 1097:
      case 1098:
      case 1099:
      case 1100:
      case 1101:
      case 1102:
      case 1103:
      case 1104:
      case 1105:
      case 1106:
      case 1107:
      case 1108:
      case 1109:
      case 1110:
      case 1111:
      case 1113:
      case 1114:
      case 1115:
      case 1116:
      case 1117:
      case 1118:
      case 1119:
      case 1120:
      case 1121:
      case 1122:
      case 1123:
      case 1124:
      case 1125:
      case 1126:
      case 1127:
      case 1128:
      case 1129:
      case 1130:
      case 1131:
      case 1132:
      case 1133:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1147:
      case 1148:
      case 1149:
      case 1151:
      case 1152:
      case 1154:
      case 1156:
      case 1158:
      case 1159:
      case 1161:
      case 1163:
      case 1164:
      case 1165:
      case 1167:
      case 1168:
      case 1169:
      case 1170:
      case 1171:
      case 1172:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1181:
      case 1182:
      case 1183:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1195:
      case 1196:
      case 1197:
      case 1198:
      case 1199:
      case 1200:
      case 1201:
      case 1203:
      case 1204:
      case 1205:
      case 1206:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1242:
      case 1243:
      case 1244:
      case 1245:
      case 1246:
      case 1248:
      case 1250:
      case 1251:
      case 1253:
      case 1254:
      case 1255:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1260:
      case 1261:
      case 1262:
      case 1263:
      case 1264:
      case 1265:
      case 1266:
      case 1267:
      case 1268:
      case 1269:
      case 1287:
      case 1288:
      case 1289:
      case 1290:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1344:
      case 1345:
      case 1347:
      case 1350:
      case 1351:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1373:
      case 1375:
      case 1377:
      case 1379:
      case 1380:
      case 1381:
      case 1382:
      case 1384:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1398:
      case 1407:
      case 1408:
      case 1409:
      case 1413:
      case 1415:
      case 1416:
      case 1418:
      case 1420:
      case 1421:
      case 1423:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1431:
      case 1441:
      case 1442:
      case 1443:
      case 1447:
      case 1450:
      case 1452:
      case 1454:
      case 1456:
      case 1469:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1517:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1536:
      case 1537:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1542:
      case 1543:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1550:
      case 1551:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1570:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1578:
      case 1579:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1595:
      case 1597:
      case 1599:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1606:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1622:
      case 1623:
      case 1624:
      case 1636:
      case 1637:
      case 1638:
      case 1642:
      case 1649:
      case 1652:
      case 1653:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1666:
      case 1668:
      case 1672:
      case 1673:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1680:
      case 1681:
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1745:
      case 2408:
      case 2580:
      case 2581:
      case 2586:
      case 2587:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2615:
      case 2616:
      case 2617:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2622:
      case 2623:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2628:
      case 2629:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 2662:
      case 2663:
      case 2664:
      case 2665:
      case 2666:
      case 2667:
      case 2668:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
      case 2680:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2685:
      case 2686:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2703:
      case 2704:
      case 2705:
      case 2706:
      case 2707:
      case 2708:
      case 2709:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
      case 2738:
      case 2739:
      case 2740:
      case 2741:
      case 2742:
      case 2743:
      case 2744:
      case 2745:
      case 2746:
      case 2747:
      case 2748:
      case 2749:
      case 2750:
      case 2751:
      case 2752:
      case 2753:
      case 2754:
      case 2755:
      case 2756:
      case 2757:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2766:
      case 2767:
      case 2768:
      case 2769:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2774:
      case 2775:
      case 2776:
      case 2777:
      case 2778:
      case 2779:
      case 2780:
      case 2781:
      case 2782:
      case 2783:
      case 2784:
      case 2785:
      case 2786:
      case 2787:
      case 2788:
      case 2789:
      case 2790:
      case 2791:
      case 2792:
      case 2793:
      case 2794:
      case 2795:
      case 2796:
      case 2797:
      case 2798:
      case 2799:
      case 2808:
      case 2809:
      case 2810:
      case 2811:
      case 2812:
      case 2813:
      case 2814:
      case 2815:
      case 2816:
      case 2817:
      case 2818:
      case 2819:
      case 2820:
      case 2821:
      case 2822:
      case 2823:
      case 2824:
      case 2825:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
      case 2836:
      case 2837:
      case 2838:
      case 2839:
      case 2840:
      case 2841:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
      case 2846:
      case 2847:
      case 2848:
      case 2849:
      case 2850:
      case 2851:
      case 2852:
      case 2853:
      case 2854:
      case 2855:
      case 2856:
      case 2857:
      case 2858:
      case 2859:
      case 2860:
      case 2874:
      case 2875:
      case 2876:
      case 2877:
      case 2878:
      case 2879:
      case 2880:
      case 2881:
      case 2882:
      case 2883:
      case 2884:
      case 2885:
      case 2886:
      case 2887:
      case 2888:
      case 2889:
      case 2890:
      case 2891:
      case 2892:
      case 2893:
      case 2894:
      case 2895:
      case 2896:
      case 2897:
      case 2898:
      case 2899:
      case 2900:
      case 2901:
      case 2902:
      case 2903:
      case 2904:
      case 2905:
      case 2906:
      case 2907:
      case 2908:
      case 2909:
      case 2910:
      case 2911:
      case 2912:
      case 2913:
      case 2914:
      case 2915:
      case 2916:
      case 2917:
      case 2918:
      case 2919:
      case 2920:
      case 2921:
      case 2922:
      case 2923:
      case 2924:
      case 2925:
      case 2926:
      case 2927:
      case 2928:
      case 2929:
      case 2930:
      case 2931:
      case 2932:
      case 2933:
      case 2944:
      case 2945:
      case 2946:
      case 2947:
      case 2948:
      case 2949:
      case 2950:
      case 2951:
      case 2952:
      case 2953:
      case 2954:
      case 2955:
      case 2956:
      case 2957:
      case 2958:
      case 2959:
      case 2965:
      case 2966:
      case 2967:
      case 2968:
      case 2969:
      case 2970:
      case 2971:
      case 2972:
      case 2973:
      case 2974:
      case 2975:
      case 2976:
      case 2977:
      case 2978:
      case 2979:
      case 2980:
      case 2981:
      case 2982:
      case 2983:
      case 2984:
      case 2985:
      case 2986:
      case 2987:
      case 2988:
      case 2989:
      case 2990:
      case 2991:
      case 2992:
      case 2993:
      case 2994:
      case 2996:
      case 2997:
      case 3009:
      case 3010:
      case 3014:
      case 3015:
      case 3016:
      case 3017:
      case 3018:
      case 3019:
      case 3021:
      case 3022:
      case 3023:
      case 3024:
      case 3025:
      case 3026:
      case 3027:
      case 3028:
      case 3029:
      case 3030:
      case 3034:
      case 3035:
      case 3036:
      case 3037:
      case 3053:
      case 3054:
      case 3055:
      case 3056:
      case 3057:
      case 3058:
      case 3059:
      case 3060:
      case 3061:
      case 3062:
      case 3063:
      case 3064:
      case 3065:
      case 3066:
      case 3067:
      case 3068:
      case 3070:
      case 3071:
      case 3072:
      case 3073:
      case 3074:
      case 3076:
      case 3077:
      case 3078:
      case 3079:
      case 3080:
      case 3081:
      case 3082:
      case 3084:
      case 3085:
      case 3086:
      case 3087:
      case 3088:
      case 3089:
      case 3090:
      case 3091:
      case 3092:
      case 3093:
      case 3094:
      case 3095:
      case 3096:
      case 3097:
      case 3098:
      case 3100:
      case 3101:
      case 3102:
      case 3103:
      case 3104:
      case 3105:
      case 3106:
      case 3107:
      case 3108:
      case 3109:
      case 3110:
      case 3111:
      case 3112:
      case 3113:
      case 3114:
      case 3115:
      case 3116:
      case 3117:
      case 3118:
      case 3119:
      case 3120:
      case 3122:
      case 3123:
      case 3124:
      case 3125:
      case 3126:
      case 3127:
      case 3128:
      case 3129:
      case 3130:
      case 3131:
      case 3132:
      case 3133:
      case 3134:
      case 3135:
      case 3136:
      case 3139:
      case 3142:
      case 3143:
      case 3144:
      case 3145:
      case 3146:
      case 3147:
      case 3148:
      case 3149:
      case 3150:
      case 3151:
      case 3152:
      case 3153:
      case 3154:
      case 3155:
      case 3156:
      case 3157:
      case 3158:
      case 3159:
      case 3160:
      case 3161:
      case 3162:
      case 3163:
      case 3164:
      case 3165:
      case 3166:
      case 3167:
      case 3168:
      case 3169:
      case 3170:
      case 3171:
      case 3172:
      case 3173:
      case 3174:
      case 3175:
      case 3176:
      case 3177:
      case 3178:
      case 3179:
      case 3180:
      case 3181:
      case 3182:
      case 3183:
      case 3184:
      case 3185:
      case 3186:
      case 3187:
      case 3188:
      case 3189:
      case 3190:
      case 3191:
      case 3192:
      case 3193:
      case 3194:
      case 3195:
      case 3196:
      case 3197:
      case 3198:
      case 3199:
      case 3200:
      case 3201:
      case 3202:
      case 3203:
      case 3204:
      case 3205:
      case 3206:
      case 3207:
      case 3208:
      case 3209:
      case 3210:
      case 3211:
      case 3213:
      case 3214:
      case 3216:
      case 3218:
      case 3220:
      case 3222:
      case 3224:
      case 3229:
      case 3230:
      case 3231:
      case 3232:
      case 3233:
      case 3235:
      case 3239:
      case 3240:
      case 3241:
      case 3242:
      case 3244:
      case 3253:
      case 3254:
      case 3255:
      case 3256:
      case 3257:
      case 3258:
      case 3259:
      case 3260:
      case 3261:
      case 3262:
      case 3265:
      case 3267:
      case 3268:
      case 3269:
      case 3270:
      case 3271:
      case 3273:
      case 3274:
      case 3276:
      case 3279:
      case 3281:
      case 3282:
      case 3284:
      case 3285:
      case 3286:
      case 3287:
      case 3288:
      case 3292:
      case 3293:
      case 3294:
      case 3295:
      case 3296:
      case 3297:
      case 3298:
      case 3299:
      case 3300:
      case 3301:
      case 3302:
      case 3303:
      case 3304:
      case 3305:
      case 3307:
      case 3309:
      case 3311:
      case 3312:
      case 3313:
      case 3315:
      case 3316:
      case 3317:
      case 3318:
      case 3319:
      case 3320:
      case 3321:
      case 3322:
      case 3323:
      case 3324:
      case 3325:
      case 3326:
      case 3327:
      case 3328:
      case 3329:
      case 3330:
      case 3331:
      case 3332:
      case 3333:
      case 3334:
      case 3335:
      case 3336:
      case 3337:
      case 3338:
      case 3339:
      case 3340:
      case 3341:
      case 3342:
      case 3343:
      case 3344:
      case 3345:
      case 3401:
      case 3403:
      case 3404:
      case 3405:
      case 3406:
      case 3407:
      case 3408:
      case 3409:
      case 3410:
      case 3411:
      case 3412:
      case 3413:
      case 3414:
      case 3415:
      case 3416:
      case 3417:
      case 3418:
      case 3419:
      case 3420:
      case 3421:
      case 3422:
      case 3423:
      case 3424:
      case 3425:
      case 3426:
      case 3427:
      case 3428:
      case 3429:
      case 3430:
      case 3431:
      case 3432:
      case 3433:
      case 3434:
      case 3437:
      case 3438:
      case 3439:
      case 3440:
      case 3441:
      case 3442:
      case 3443:
      case 3444:
      case 3445:
      case 3446:
      case 3447:
      case 3448:
      case 3449:
      case 3450:
      case 3451:
      case 3452:
      case 3453:
      case 3454:
      case 3455:
      case 3456:
      case 3457:
      case 3458:
      case 3459:
      case 3460:
      case 3461:
      case 3462:
      case 3463:
      case 3464:
      case 3465:
      case 3466:
      case 3467:
      case 3468:
      case 3469:
      case 3470:
      case 3471:
      case 3472:
      case 3473:
      case 3474:
      case 3475:
      case 3476:
      case 3477:
      case 3478:
      case 3479:
      case 3480:
      case 3481:
      case 3482:
      case 3483:
      case 3484:
      case 3485:
      case 3486:
      case 3487:
      case 3488:
      case 3489:
      case 3490:
      case 3491:
      case 3492:
      case 3493:
      case 3494:
      case 3495:
      case 3496:
      case 3497:
      case 3498:
      case 3499:
      case 3500:
      case 3501:
      case 3502:
      case 3503:
      case 3504:
      case 3505:
      case 3506:
      case 3507:
      case 3508:
      case 3509:
      case 3510:
      case 3511:
      case 3512:
      case 3513:
      case 3514:
      case 3515:
      case 3516:
      case 3517:
      case 3518:
      case 3519:
      case 3520:
      case 3521:
      case 3522:
      case 3523:
      case 3524:
      case 3525:
      case 3526:
      case 3527:
      case 3528:
      case 3529:
      case 3530:
      case 3531:
      case 3532:
      case 3533:
      case 3534:
      case 3535:
      case 3536:
      case 3537:
      case 3538:
      case 3539:
      case 3540:
      case 3541:
      case 3542:
      case 3543:
      case 3544:
      case 3545:
      case 3546:
      case 3547:
      case 3548:
      case 3549:
      case 3550:
      case 3551:
      case 3552:
      case 3553:
      case 3554:
      case 3555:
      case 3556:
      case 3557:
      case 3558:
      case 3559:
      case 3560:
      case 3561:
      case 3562:
      case 3563:
      case 3564:
      case 3565:
      case 3566:
      case 3567:
      case 3568:
      case 3569:
      case 3571:
      case 3572:
      case 3573:
      case 3574:
      case 3575:
      case 3576:
      case 3577:
      case 3578:
      case 3579:
      case 3580:
      case 3581:
      case 3582:
      case 3583:
      case 3584:
      case 3585:
      case 3586:
      case 3587:
      case 3588:
      case 3589:
      case 3590:
      case 3591:
      case 3592:
      case 3593:
      case 3594:
      case 3595:
      case 3596:
      case 3597:
      case 3598:
      case 3599:
      case 3600:
      case 3601:
      case 3602:
      case 3603:
      case 3604:
      case 3605:
      case 3606:
      case 3607:
      case 3608:
      case 3609:
      case 3610:
      case 3611:
      case 3612:
      case 3613:
      case 3614:
      case 3615:
      case 3616:
      case 3617:
      case 3618:
      case 3619:
      case 3620:
      case 3621:
      case 3622:
      case 3624:
      case 3625:
      case 3626:
      case 3627:
      case 3628:
      case 3629:
      case 3630:
      case 3631:
      case 3632:
      case 3633:
      case 3634:
      case 3635:
      case 3636:
      case 3637:
      case 3638:
      case 3639:
      case 3640:
      case 3641:
      case 3642:
      case 3643:
      case 3644:
      case 3645:
      case 3646:
      case 3647:
      case 3648:
      case 3649:
      case 3650:
      case 3651:
      case 3652:
      case 3653:
      case 3654:
      case 3655:
      case 3656:
      case 3657:
      case 3658:
      case 3659:
      case 3660:
      case 3661:
      case 3662:
      case 3663:
      case 3664:
      case 3665:
      case 3666:
      case 3667:
      case 3668:
      case 3669:
      case 3670:
      case 3671:
      case 3672:
      case 3673:
      case 3674:
      case 3675:
      case 3676:
      case 3677:
      case 3678:
      case 3679:
      case 3684:
      case 3685:
      case 3686:
      case 3687:
      case 3688:
      case 3689:
      case 3690:
      case 3691:
      case 3692:
      case 3693:
      case 3694:
      case 3695:
      case 3696:
      case 3697:
      case 3698:
      case 3699:
      case 3700:
      case 3701:
      case 3702:
      case 3703:
      case 3704:
      case 3705:
      case 3706:
      case 3707:
      case 3708:
      case 3709:
      case 3710:
      case 3711:
      case 3712:
      case 3713:
      case 3714:
      case 3715:
      case 3716:
      case 3717:
      case 3718:
      case 3719:
      case 3720:
      case 3721:
      case 3722:
      case 3723:
      case 3724:
      case 3725:
      case 3726:
      case 3727:
      case 3728:
      case 3729:
      case 3730:
      case 3731:
      case 3732:
      case 3733:
      case 3734:
      case 3735:
      case 3752:
      case 3753:
      case 3754:
      case 3755:
      case 3756:
      case 3757:
      case 3758:
      case 3759:
      case 3760:
      case 3761:
      case 3762:
      case 3763:
      case 3764:
      case 3765:
      case 3783:
      case 3784:
      case 3785:
      case 3786:
      case 3787:
      case 3788:
      case 3789:
      case 3790:
      case 3791:
      case 3792:
      case 3793:
      case 3794:
      case 3795:
      case 3796:
      case 3797:
      case 3798:
      case 3799:
      case 3800:
      case 3801:
      case 3802:
      case 3803:
      case 3804:
      case 3805:
      case 3806:
      case 3808:
      case 3809:
      case 3810:
      case 3811:
      case 3812:
      case 3813:
      case 3815:
      case 3817:
      case 3819:
      case 3821:
      case 3822:
      case 3823:
      case 3824:
      case 3825:
      case 3826:
      case 3827:
      case 3828:
      case 3829:
      case 3830:
      case 3831:
      case 3832:
      case 3833:
      case 3834:
      case 3835:
      case 3836:
      case 3851:
      case 3852:
      case 3853:
      case 3854:
      case 3855:
      case 3856:
      case 3857:
      case 3858:
      case 3859:
      case 3860:
      case 3861:
      case 3862:
      case 3863:
      case 3865:
      case 3866:
      case 3868:
      case 3869:
      case 3870:
      case 3871:
      case 3872:
      case 3889:
      case 3890:
      case 3896:
      case 3898:
      case 3900:
      case 3901:
      case 3902:
      case 3903:
      case 3904:
      case 3905:
      case 3906:
      case 3907:
      case 3908:
      case 3909:
      case 3910:
      case 3911:
      case 3912:
      case 3913:
      case 3914:
      case 3915:
      case 3917:
      case 3918:
      case 3919:
      case 3920:
      case 3921:
      case 3922:
      case 3923:
      case 3924:
      case 3925:
      case 3933:
      case 3935:
      case 3937:
      case 3940:
      case 3946:
      case 3953:
      case 3954:
      case 3955:
      case 3956:
      case 3957:
      case 3958:
      case 3961:
      case 3975:
      case 3976:
      case 3977:
      case 3978:
      case 3979:
      case 3980:
      case 3981:
      case 3982:
      case 3983:
      case 3984:
      case 3985:
      case 3986:
      case 3987:
      case 3988:
      case 3989:
      case 3990:
      case 3991:
      case 3992:
      case 3993:
      case 3994:
      case 3995:
      case 3996:
      case 3997:
      case 3998:
      case 3999:
      case 4000:
      case 4001:
      case 4002:
      case 4003:
      case 4004:
      case 4005:
      case 4006:
      case 4007:
      case 4008:
      case 4009:
      case 4010:
      case 4011:
      case 4088:
      case 4089:
      case 4090:
      case 4091:
      case 4092:
      case 4093:
      case 4094:
      case 4095:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4100:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
      case 4122:
      case 4123:
      case 4124:
      case 4125:
      case 4126:
      case 4127:
      case 4128:
      case 4129:
      case 4130:
      case 4131:
      case 4132:
      case 4133:
      case 4134:
      case 4135:
      case 4136:
      case 4137:
      case 4138:
      case 4139:
      case 4140:
      case 4141:
      case 4142:
      case 4143:
      case 4144:
      case 4145:
      case 4146:
      case 4147:
      case 4148:
      case 4149:
      case 4150:
      case 4151:
      case 4152:
      case 4153:
      case 4154:
      case 4155:
      case 4156:
      case 4157:
      case 4158:
      case 4159:
      case 4160:
      case 4161:
      case 4162:
      case 4163:
      case 4164:
      case 4165:
      case 4166:
      case 4167:
      case 4168:
      case 4169:
      case 4170:
      case 4171:
      case 4172:
      case 4173:
      case 4174:
      case 4175:
      case 4176:
      case 4177:
      case 4178:
      case 4179:
      case 4180:
      case 4181:
      case 4182:
      case 4183:
      case 4184:
      case 4185:
      case 4186:
      case 4187:
      case 4188:
      case 4189:
      case 4190:
      case 4191:
      case 4192:
      case 4193:
      case 4194:
      case 4195:
      case 4196:
      case 4197:
      case 4198:
      case 4199:
      case 4200:
      case 4201:
      case 4202:
      case 4203:
      case 4204:
      case 4205:
      case 4208:
      case 4209:
      case 4210:
      case 4211:
      case 4212:
      case 4213:
      case 4214:
      case 4215:
      case 4216:
      case 4217:
      case 4218:
      case 4219:
      case 4220:
      case 4221:
      case 4222:
      case 4223:
      case 4224:
      case 4225:
      case 4226:
      case 4227:
      case 4228:
      case 4229:
      case 4230:
      case 4231:
      case 4232:
      case 4233:
      case 4234:
      case 4235:
      case 4236:
      case 4237:
      case 4238:
      case 4239:
      case 4240:
      case 4241:
      case 4242:
      case 4243:
      case 4244:
      case 4245:
      case 4246:
      case 4247:
      case 4248:
      case 4249:
      case 4250:
      case 4251:
      case 4252:
      case 4253:
      case 4254:
      case 4255:
      case 4256:
      case 4257:
      case 4258:
      case 4259:
      case 4260:
      case 4261:
      case 4262:
      case 4263:
      case 4264:
      case 4265:
      case 4266:
      case 4267:
      case 4268:
      case 4269:
      case 4270:
      case 4271:
      case 4272:
      case 4273:
      case 4274:
      case 4275:
      case 4276:
      case 4277:
      case 4278:
      case 4279:
      case 4280:
      case 4281:
      case 4282:
      case 4283:
      case 4284:
      case 4285:
      case 4286:
      case 4287:
      case 4288:
      case 4289:
      case 4290:
      case 4291:
      case 4292:
      case 4293:
      case 4294:
      case 4295:
      case 4296:
      case 4297:
      case 4298:
      case 4299:
      case 4300:
      case 4301:
      case 4302:
      case 4303:
      case 4304:
      case 4305:
      case 4306:
      case 4307:
      case 4308:
      case 4309:
      case 4310:
      case 4311:
      case 4312:
      case 4313:
      case 4314:
      case 4315:
      case 4316:
      case 4317:
      case 4318:
      case 4319:
      case 4320:
      case 4321:
      case 4322:
      case 4323:
      case 4324:
      case 4325:
      case 4326:
      case 4327:
      case 4328:
      case 4329:
      case 4330:
      case 4331:
      case 4332:
      case 4333:
      case 4334:
      case 4335:
      case 4336:
      case 4337:
      case 4338:
      case 4339:
      case 4340:
      case 4341:
      case 4342:
      case 4343:
      case 4344:
      case 4345:
      case 4346:
      case 4347:
      case 4348:
      case 4349:
      case 4350:
      case 4351:
      case 4352:
      case 4353:
      case 4354:
      case 4355:
      case 4356:
      case 4357:
      case 4358:
      case 4359:
      case 4360:
      case 4361:
      case 4362:
      case 4363:
      case 4364:
      case 4365:
      case 4366:
      case 4367:
      case 4368:
      case 4369:
      case 4370:
      case 4371:
      case 4372:
      case 4373:
      case 4374:
      case 4375:
      case 4376:
      case 4377:
      case 4378:
      case 4379:
      case 4380:
      case 4381:
      case 4382:
      case 4383:
      case 4384:
      case 4385:
      case 4386:
      case 4387:
      case 4388:
      case 4389:
      case 4390:
      case 4391:
      case 4392:
      case 4393:
      case 4394:
      case 4395:
      case 4396:
      case 4397:
      case 4398:
      case 4399:
      case 4400:
      case 4401:
      case 4402:
      case 4403:
      case 4404:
      case 4405:
      case 4406:
      case 4407:
      case 4408:
      case 4409:
      case 4410:
      case 4411:
      case 4412:
      case 4413:
      case 4414:
      case 4415:
      case 4416:
      case 4417:
      case 4418:
      case 4419:
      case 4420:
      case 4421:
      case 4422:
      case 4423:
      case 4424:
      case 4425:
      case 4426:
      case 4427:
      case 4428:
      case 4429:
      case 4430:
      case 4431:
      case 4432:
      case 4433:
      case 4434:
      case 4435:
      case 4436:
      case 4437:
      case 4438:
      case 4439:
      case 4440:
      case 4441:
      case 4442:
      case 4443:
      case 4444:
      case 4445:
      case 4446:
      case 4447:
      case 4448:
      case 4449:
      case 4450:
      case 4451:
      case 4464:
      case 4465:
      case 4466:
      case 4467:
      case 4468:
      case 4469:
      case 4470:
      case 4471:
      case 4472:
      case 4473:
      case 4474:
      case 4475:
      case 4476:
      case 4477:
      case 4478:
      case 4479:
      case 4480:
      case 4481:
      case 4482:
      case 4483:
      case 4484:
      case 4485:
      case 4486:
      case 4487:
      case 4488:
      case 4489:
      case 4490:
      case 4491:
      case 4492:
      case 4493:
      case 4494:
      case 4495:
      case 4496:
      case 4497:
      case 4498:
      case 4499:
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
      case 4510:
      case 4511:
      case 4512:
      case 4513:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4518:
      case 4519:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4524:
      case 4525:
      case 4526:
      case 4527:
      case 4528:
      case 4529:
      case 4530:
      case 4531:
      case 4532:
      case 4533:
      case 4534:
      case 4535:
      case 4536:
      case 4537:
      case 4538:
      case 4539:
      case 4542:
      case 4543:
      case 4544:
      case 4545:
      case 4546:
      case 4547:
      case 4548:
      case 4549:
      case 4550:
      case 4551:
      case 4552:
      case 4553:
      case 4554:
      case 4555:
      case 4556:
      case 4557:
      case 4558:
      case 4559:
      case 4564:
      case 4565:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4582:
      case 4583:
      case 4584:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
      case 4589:
      case 4590:
      case 4591:
      case 4592:
      case 4593:
      case 4594:
      case 4595:
      case 4596:
      case 4597:
      case 4598:
      case 4599:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4604:
      case 4605:
      case 4606:
      case 4607:
      case 4608:
      case 4609:
      case 4610:
      case 4611:
      case 4612:
      case 4613:
      case 4614:
      case 4615:
      case 4616:
      case 4617:
      case 4618:
      case 4619:
      case 4620:
      case 4621:
      case 4622:
      case 4623:
      case 4624:
      case 4625:
      case 4626:
      case 4627:
      case 4628:
      case 4629:
      case 4630:
      case 4631:
      case 4632:
      case 4633:
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
      case 4640:
      case 4641:
      case 4642:
      case 4643:
      case 4644:
      case 4645:
      case 4646:
      case 4647:
      case 4648:
      case 4649:
      case 4650:
      case 4651:
      case 4652:
      case 4653:
      case 4654:
      case 4655:
      case 4656:
      case 4657:
      case 4658:
      case 4659:
      case 4660:
      case 4661:
      case 4662:
      case 4663:
      case 4664:
      case 4665:
      case 4666:
      case 4667:
      case 4668:
      case 4669:
      case 4670:
      case 4671:
      case 4672:
      case 4673:
      case 4674:
      case 4675:
      case 4676:
      case 4677:
      case 4678:
      case 4679:
      case 4680:
      case 4681:
      case 4682:
      case 4683:
      case 4684:
      case 4685:
      case 4686:
      case 4687:
      case 4688:
      case 4689:
      case 4690:
      case 4691:
      case 4692:
      case 4693:
      case 4694:
      case 4695:
      case 4696:
      case 4697:
      case 4698:
      case 4699:
      case 4700:
      case 4701:
      case 4702:
      case 4703:
      case 4704:
      case 4705:
      case 4706:
      case 4707:
      case 4708:
      case 4709:
      case 4710:
      case 4711:
      case 4712:
      case 4713:
      case 4714:
      case 4715:
      case 4716:
      case 4717:
      case 4718:
      case 4719:
      case 4720:
      case 4721:
      case 4722:
      case 4723:
      case 4724:
      case 4725:
      case 4726:
      case 4727:
      case 4728:
      case 4729:
      case 4730:
      case 4731:
      case 4732:
      case 4733:
      case 4734:
      case 4735:
      case 4736:
      case 4737:
      case 4738:
      case 4739:
      case 4740:
      case 4741:
      case 4742:
      case 4743:
      case 4744:
      case 4745:
      case 4746:
      case 4747:
      case 4748:
      case 4749:
      case 4750:
      case 4751:
      case 4752:
      case 4753:
      case 4754:
      case 4755:
      case 4756:
      case 4757:
      case 4758:
      case 4759:
      case 4760:
      case 4761:
      case 4762:
      case 4763:
      case 4764:
      case 4765:
      case 4766:
      case 4767:
      case 4768:
      case 4769:
      case 4770:
      case 4771:
      case 4772:
      case 4773:
      case 4774:
      case 4775:
      case 4776:
      case 4777:
      case 4778:
      case 4779:
      case 4780:
      case 4781:
      case 4782:
      case 4783:
      case 4784:
      case 4785:
      case 4786:
      case 4787:
      case 4788:
      case 4789:
      case 4790:
      case 4791:
      case 4792:
      case 4793:
      case 4794:
      case 4795:
      case 4796:
      case 4797:
      case 4798:
      case 4799:
      case 4800:
      case 4801:
      case 4802:
      case 4803:
      case 4804:
      case 4805:
      case 4806:
      case 4807:
      case 4808:
      case 4809:
      case 4810:
      case 4811:
      case 4812:
      case 4813:
      case 4814:
      case 4815:
      case 4816:
      case 4817:
      case 4818:
      case 4819:
      case 4820:
      case 4821:
      case 4822:
      case 4823:
      case 4824:
      case 4825:
      case 4830:
      case 4831:
      case 4832:
      case 4833:
      case 4834:
      case 4835:
      case 4836:
      case 4837:
      case 4838:
      case 4839:
      case 4840:
      case 4841:
      case 4842:
      case 4843:
      case 4844:
      case 4845:
      case 4850:
      case 4851:
      case 4852:
      case 4853:
      case 4854:
      case 4855:
      case 4856:
      case 4857:
      case 4858:
      case 4859:
      case 4860:
      case 4861:
      case 4862:
      case 4863:
      case 4864:
      case 4865:
      case 4866:
      case 4867:
      case 4868:
      case 4869:
      case 4874:
      case 4875:
      case 4876:
      case 4877:
      case 4878:
      case 4879:
      case 4880:
      case 4881:
      case 4882:
      case 4883:
      case 4902:
      case 4903:
      case 4904:
      case 4905:
      case 4906:
      case 4907:
      case 4908:
      case 4909:
      case 4910:
      case 4911:
      case 4912:
      case 4913:
      case 4914:
      case 4915:
      case 4916:
      case 4917:
      case 4918:
      case 4919:
      case 4920:
      case 4921:
      case 4922:
      case 4923:
      case 4924:
      case 4925:
      case 4926:
      case 4927:
      case 4928:
      case 4929:
      case 4930:
      case 4931:
      case 4932:
      case 4933:
      case 4934:
      case 4935:
      case 4936:
      case 4937:
      case 4938:
      case 4939:
      case 4940:
      case 4941:
      case 4942:
      case 4943:
      case 4944:
      case 4945:
      case 4946:
      case 4947:
      case 4948:
      case 4949:
      case 4950:
      case 4951:
      case 4952:
      case 4953:
      case 4954:
      case 4955:
      case 4956:
      case 4957:
      case 4958:
      case 4959:
      case 4960:
      case 4961:
      case 4962:
      case 4963:
      case 4964:
      case 4965:
      case 4966:
      case 4967:
      case 4968:
      case 4969:
      case 4970:
      case 4971:
      case 4972:
      case 4973:
      case 4974:
      case 4975:
      case 4976:
      case 4977:
      case 4978:
      case 4979:
      case 4980:
      case 4981:
      case 4982:
      case 4983:
      case 4984:
      case 4985:
      case 4986:
      case 4987:
      case 4988:
      case 4989:
      case 4990:
      case 4991:
      case 4992:
      case 4993:
      case 4994:
      case 4995:
      case 4996:
      case 4997:
      case 4998:
      case 4999:
      case 5000:
      case 5001:
      case 5002:
      case 5003:
      case 5004:
      case 5005:
      case 5006:
      case 5007:
      case 5008:
      case 5009:
      case 5010:
      case 5011:
      case 5012:
      case 5013:
      case 5014:
      case 5015:
      case 5016:
      case 5017:
      case 5018:
      case 5019:
      case 5020:
      case 5021:
      case 5022:
      case 5023:
      case 5024:
      case 5025:
      case 5026:
      case 5027:
      case 5028:
      case 5029:
      case 5030:
      case 5031:
      case 5032:
      case 5033:
      case 5783:
      case 5784:
      case 5840:
      case 5841:
      case 5879:
      case 5880:
      case 5881:
      case 5882:
      case 5883:
      case 5884:
      case 5885:
      case 5886:
      case 5887:
      case 5888:
      case 5889:
      case 5890:
      case 5891:
      case 5892:
      case 5893:
      case 5894:
      case 5895:
      case 5896:
      case 5897:
      case 6045:
      case 6073:
      case 6074:
      case 6075:
      case 6208:
      case 6209:
      case 6220:
      case 6221:
      case 6222:
      case 6223:
      case 6224:
      case 6225:
      case 6226:
      case 6227:
      case 6228:
      case 6229:
      case 6230:
      case 6231:
      case 6232:
      case 6233:
      case 6315:
      case 6316:
      case 6317:
      case 6318:
      case 6319:
      case 6355:
      case 6356:
      case 6357:
      case 6358:
      case 6359:
      case 6360:
      case 6361:
      case 6362:
      case 6363:
      case 6364:
      case 6365:
      case 6366:
      case 6367:
      case 6368:
      case 6369:
      case 6370:
      case 6371:
      case 7374:
      case 7375:
      case 7376:
      case 7377:
      case 7378:
      case 7379:
      case 7380:
      case 7381:
      case 7382:
      case 7383:
      case 7384:
      case 7385:
      case 7397:
      case 7398:
      case 7403:
      case 7404:
      case 7405:
      case 7406:
      case 7407:
      case 7413:
      case 7414:
      case 7415:
      case 7416:
      case 7417:
      case 7418:
      case 7419:
      case 7420:
      case 7421:
      case 7422:
      case 7423:
      case 7424:
      case 7425:
      case 7426:
      case 7427:
      case 7428:
      case 7429:
      case 7430:
      case 7431:
      case 7432:
      case 7433:
      case 7435:
      case 7437:
      case 7438:
      case 7439:
      case 7440:
      case 7441:
      case 7442:
      case 7443:
      case 7444:
      case 7445:
      case 7446:
      case 7447:
      case 7448:
      case 7449:
      case 7450:
      case 7451:
      case 7452:
      case 7453:
      case 7454:
      case 7455:
      case 7456:
      case 7457:
      case 7458:
      case 7459:
      case 7460:
      case 7461:
      case 7462:
      case 7463:
      case 7464:
      case 7465:
      case 7466:
      case 7467:
      case 7468:
      case 7469:
      case 7470:
      case 7471:
      case 7472:
      case 7473:
      case 7474:
      case 7475:
      case 7476:
      case 7477:
      case 7478:
      case 7479:
      case 7480:
      case 7481:
      case 7482:
      case 7483:
      case 7484:
      case 7485:
      case 7486:
      case 7487:
      case 7488:
      case 7489:
      case 7490:
      case 7497:
      case 7498:
      case 7499:
      case 7500:
      case 7501:
      case 7502:
      case 7503:
      case 7504:
      case 7505:
      case 7506:
      case 7507:
      case 7508:
      case 7509:
      case 7510:
      case 7511:
      case 7512:
      case 7513:
      case 7514:
      case 7515:
      case 7516:
      case 7517:
      case 7518:
      case 7519:
      case 7520:
      case 7521:
      case 7522:
      case 7523:
      case 7524:
      case 7525:
      case 7526:
      case 7527:
      case 7528:
      case 7529:
      case 7530:
      case 7532:
      case 7533:
      case 7534:
      case 7535:
      case 7537:
      case 7538:
      case 7539:
      case 7540:
      case 7541:
      case 7542:
      case 7544:
      case 7545:
      case 7546:
      case 7547:
      case 7548:
      case 7549:
      case 7550:
      case 7551:
      case 7552:
      case 7553:
      case 7554:
      case 7555:
      case 7556:
      case 7557:
      case 7558:
      case 7561:
      case 7562:
      case 7563:
      case 7564:
      case 7565:
      case 7566:
      case 7567:
      case 7568:
      case 7569:
      case 7570:
      case 7571:
      case 7572:
      case 7573:
      case 7575:
      case 7576:
      case 7577:
      case 7579:
      case 7580:
      case 7581:
      case 7582:
      case 7583:
      case 7584:
      case 7585:
      case 7586:
      case 7587:
      case 7588:
      case 7589:
      case 7590:
      case 7591:
      case 7592:
      case 7593:
      case 7594:
      case 7595:
      case 7596:
      case 7597:
      case 7598:
      case 7599:
      case 7600:
      case 7601:
      case 7602:
      case 7603:
      case 7613:
      case 7614:
      case 7615:
      case 7616:
      case 7617:
      case 7618:
      case 7619:
      case 7620:
      case 7621:
      case 7622:
      case 7623:
      case 7624:
      case 7625:
      case 7626:
      case 7627:
      case 7628:
      case 7629:
      case 7630:
      case 7631:
      case 7632:
      case 7633:
      case 7634:
      case 7636:
      case 7637:
      case 7638:
      case 7639:
      case 7640:
      case 7641:
      case 7642:
      case 7643:
      case 7644:
      case 7646:
      case 7647:
      case 7648:
      case 7649:
      case 7650:
      case 7651:
      case 7652:
      case 7653:
      case 7654:
      case 7655:
      case 7656:
      case 7657:
      case 7658:
      case 7659:
      case 7660:
      case 7661:
      case 7662:
      case 7663:
      case 7664:
      case 7665:
      case 7666:
      case 7667:
      case 7673:
      case 7674:
      case 7675:
      case 7676:
      case 7677:
      case 7678:
      case 7679:
      case 7680:
      case 7694:
      case 7696:
      case 7697:
      case 7698:
      case 7701:
      case 7702:
      case 7703:
      case 7704:
      case 7705:
      case 7706:
      case 7707:
      case 7708:
      case 7728:
      case 7729:
      case 7730:
      case 7731:
      case 7732:
      case 7734:
      case 7735:
      case 7736:
      case 7737:
      case 7738:
      case 7739:
      case 7740:
      case 7741:
      case 7742:
      case 7743:
      case 7744:
      case 7745:
      case 7746:
      case 7747:
      case 7748:
      case 7749:
      case 7750:
      case 7751:
      case 7752:
      case 7753:
      case 7754:
      case 7755:
      case 7756:
      case 7757:
      case 7763:
      case 7772:
      case 7773:
      case 7774:
      case 7775:
      case 7776:
      case 7777:
      case 7778:
      case 7780:
      case 7781:
      case 7782:
      case 7783:
      case 7784:
      case 7785:
      case 7786:
      case 7787:
      case 7788:
      case 7789:
      case 7790:
      case 7791:
      case 7792:
      case 7793:
      case 7794:
      case 7795:
      case 7796:
      case 7797:
      case 7798:
      case 7799:
      case 7800:
      case 7801:
      case 7802:
      case 7803:
      case 7804:
      case 7805:
      case 7806:
      case 7807:
      case 7808:
      case 7809:
      case 7810:
      case 7811:
      case 7812:
      case 7813:
      case 7814:
      case 7815:
      case 7816:
      case 7817:
      case 7818:
      case 7819:
      case 7820:
      case 7821:
      case 7822:
      case 7823:
      case 7824:
      case 7825:
      case 7826:
      case 7827:
      case 7828:
      case 7829:
      case 7830:
      case 7831:
      case 7832:
      case 7833:
      case 7834:
      case 7835:
      case 7836:
      case 7837:
      case 7838:
      case 7839:
      case 7840:
      case 7841:
      case 7842:
      case 7843:
      case 7844:
      case 7845:
      case 7846:
      case 7853:
      case 7854:
      case 7855:
      case 7856:
      case 7857:
      case 7858:
      case 7859:
      case 7860:
      case 7861:
      case 7863:
      case 7864:
      case 7869:
      case 7872:
      case 7881:
      case 7899:
      case 7904:
      case 7905:
      case 7906:
      case 7921:
      case 7922:
      case 7923:
      case 7924:
      case 7925:
      case 7926:
      case 7927:
      case 7928:
      case 7929:
      case 7930:
      case 7931:
      case 7932:
      case 7933:
      case 7934:
      case 7935:
      case 7936:
      case 7937:
      case 7938:
      case 7939:
      case 7940:
      case 7941:
      case 7942:
      case 7943:
      case 7944:
      case 7945:
      case 7946:
      case 7947:
      case 7948:
      case 7949:
      case 7950:
      case 7951:
      case 7952:
      case 7953:
      case 7954:
      case 7955:
      case 7956:
      case 7957:
      case 7958:
      case 7959:
      case 7960:
      case 7961:
      case 7962:
      case 7963:
      case 7964:
      case 7965:
      case 7966:
      case 7967:
      case 7970:
      case 7971:
      case 7972:
      case 7973:
      case 7974:
      case 7975:
      case 7976:
      case 7977:
      case 7979:
      case 7980:
      case 7981:
      case 7982:
      case 7983:
      case 7984:
      case 7985:
      case 7988:
      case 7989:
      case 8014:
      case 8015:
      case 8016:
      case 8017:
      case 8018:
      case 8019:
      case 8020:
      case 8021:
      case 8103:
      case 8104:
      case 8106:
      case 8112:
      case 8113:
      case 8114:
      case 8115:
      case 8117:
      case 8119:
      case 8121:
      case 8123:
      case 8125:
      case 8127:
      case 8129:
      case 8131:
      case 8133:
      case 8135:
      case 8137:
      case 8138:
      case 8143:
      case 8145:
      case 8146:
      case 8152:
      case 8154:
      case 8155:
      case 8156:
      case 8157:
      case 8159:
      case 8161:
      case 8163:
      case 8165:
      case 8167:
      case 8169:
      case 8171:
      case 8181:
      case 8183:
      case 8185:
      case 8186:
      case 8187:
      case 8188:
      case 8189:
      case 8190:
      case 8191:
      case 8192:
      case 8193:
      case 8195:
      case 8197:
      case 8199:
      case 8201:
      case 8203:
      case 8205:
      case 8207:
      case 8209:
      case 8211:
      case 8213:
      case 8215:
      case 8217:
      case 8219:
      case 8221:
      case 8223:
      case 8225:
      case 8227:
      case 8233:
      case 8239:
      case 8240:
      case 8241:
      case 8242:
      case 8243:
      case 8245:
      case 8247:
      case 8249:
      case 8334:
      case 8335:
      case 8338:
      case 8339:
      case 8340:
      case 8342:
      case 8344:
      case 8345:
      case 8346:
      case 8347:
      case 8348:
      case 8349:
      case 8350:
      case 8351:
      case 8352:
      case 8353:
      case 8354:
      case 8355:
      case 8356:
      case 8357:
      case 8358:
      case 8360:
      case 8362:
      case 8363:
      case 8364:
      case 8365:
      case 8366:
      case 8367:
      case 8368:
      case 8369:
      case 8370:
      case 8371:
      case 8372:
      case 8373:
      case 8374:
      case 8375:
      case 8376:
      case 8377:
      case 8378:
      case 8379:
      case 8380:
      case 8381:
      case 8382:
      case 8383:
      case 8384:
      case 8385:
      case 8386:
      case 8387:
      case 8388:
      case 8389:
      case 8390:
      case 8391:
      case 8392:
      case 8393:
      case 8394:
      case 8395:
      case 8397:
      case 8399:
      case 8401:
      case 8403:
      case 8404:
      case 8405:
      case 8406:
      case 8407:
      case 8408:
      case 8417:
      case 8419:
      case 8421:
      case 8423:
      case 8424:
      case 8425:
      case 8426:
      case 8427:
      case 8428:
      case 8429:
      case 8430:
      case 8431:
      case 8432:
      case 8433:
      case 8434:
      case 8435:
      case 8436:
      case 8437:
      case 8438:
      case 8439:
      case 8441:
      case 8443:
      case 8445:
      case 8447:
      case 8449:
      case 8455:
      case 8460:
      case 8462:
      case 8464:
      case 8470:
      case 8491:
      case 8493:
      case 8533:
      case 8551:
      case 8553:
      case 8555:
      case 8557:
      case 8567:
      case 8569:
      case 8571:
      case 8573:
      case 8574:
      case 8575:
      case 8576:
      case 8577:
      case 8579:
      case 8581:
      case 8583:
      case 8585:
      case 8587:
      case 10119:
      case 10130:
      case 10131:
      case 10132:
      case 10133:
      case 10171:
      case 10172:
      case 10173:
      case 10174:
      case 10175:
      case 10176:
      case 10177:
      case 10178:
      case 10179:
      case 10180:
      case 10181:
      case 10182:
      case 10183:
      case 10184:
      case 10185:
      case 10186:
      case 10187:
      case 10188:
      case 10189:
      case 10190:
      case 10191:
      case 10192:
      case 10193:
      case 10194:
      case 10199:
      case 10200:
      case 10209:
      case 10210:
      case 10211:
      case 10212:
      case 10213:
      case 10214:
      case 10215:
      case 10216:
      case 10217:
      case 10218:
      case 10219:
      case 10220:
      case 10221:
      case 10236:
      case 10237:
      case 10238:
      case 10239:
      case 10242:
      case 10243:
      case 10244:
      case 10245:
      case 10246:
      case 10248:
      case 10249:
      case 10250:
      case 10251:
      case 10261:
      case 10262:
      case 10263:
      case 10264:
      case 10265:
      case 10266:
      case 10267:
      case 10268:
      case 10269:
      case 10270:
      case 10273:
      case 10274:
      case 10275:
      case 10276:
      case 10277:
      case 10278:
      case 10279:
      case 10280:
      case 10281:
      case 10282:
      case 10283:
      case 10284:
      case 10285:
      case 10286:
      case 10287:
      case 10288:
      case 10289:
      case 10317:
      case 10318:
      case 10319:
      case 10320:
      case 10321:
      case 10322:
      case 10323:
      case 10324:
      case 10325:
      case 10326:
      case 10327:
      case 10328:
      case 10329:
      case 10330:
      case 10331:
      case 10332:
      case 10333:
      case 10334:
      case 10335:
      case 10336:
      case 10337:
      case 10338:
      case 10339:
      case 10340:
      case 10341:
      case 10342:
      case 10343:
      case 10344:
      case 10345:
      case 10346:
      case 10347:
      case 10348:
      case 10349:
      case 10350:
      case 10351:
      case 10352:
      case 10353:
      case 10354:
      case 10355:
      case 10356:
      case 10357:
      case 10358:
      case 10359:
      case 10360:
      case 10361:
      case 10362:
      case 10363:
      case 10364:
      case 10365:
      case 10366:
      case 10367:
      case 10368:
      case 10369:
      case 10370:
      case 10371:
      case 10372:
      case 10373:
      case 10374:
      case 10375:
      case 10376:
      case 10377:
      case 10378:
      case 10379:
      case 10380:
      case 10383:
      case 10384:
      case 10385:
      case 10386:
      case 10387:
      case 10388:
      case 10389:
      case 10390:
      case 10391:
      case 10392:
      case 10393:
      case 10394:
      case 10450:
      case 10451:
      case 10452:
      case 10453:
      case 10454:
      case 10455:
      case 10456:
      case 10457:
      case 10458:
      case 10459:
      case 10460:
      case 10461:
      case 10472:
      case 10473:
      case 10475:
      case 10477:
      case 10478:
      case 10480:
      case 10481:
      case 10483:
      case 10484:
      case 10486:
      case 10487:
      case 10490:
      case 10491:
      case 10493:
      case 10494:
      case 10496:
      case 10497:
      case 10499:
      case 10502:
      case 10504:
      case 10505:
      case 10507:
      case 10508:
      case 10510:
      case 10511:
      case 10514:
      case 10515:
      case 10517:
      case 10518:
      case 10520:
      case 10521:
      case 10523:
      case 10526:
      case 10561:
      case 10562:
      case 10564:
      case 10565:
      case 10583:
      case 10584:
      case 10585:
      case 10589:
      case 10590:
      case 10591:
      case 10595:
      case 10596:
      case 10597:
      case 10601:
      case 10605:
      case 10606:
      case 10607:
      case 10611:
      case 10615:
      case 10616:
      case 10617:
      case 10621:
      case 10622:
      case 10623:
      case 10627:
      case 10628:
      case 10629:
      case 10633:
      case 10634:
      case 10635:
      case 10639:
      case 10640:
      case 10641:
      case 10645:
      case 10646:
      case 10647:
      case 10651:
      case 10652:
      case 10653:
      case 10657:
      case 10658:
      case 10659:
      case 10663:
      case 10664:
      case 10665:
      case 10669:
      case 10670:
      case 10671:
      case 10675:
      case 10676:
      case 10677:
      case 10681:
      case 10682:
      case 10683:
      case 10711:
      case 10712:
      case 10714:
      case 10715:
      case 10765:
      case 10766:
      case 10767:
      case 10768:
      case 10769:
      case 10770:
      case 10771:
      case 10772:
      case 10773:
      case 10774:
      case 10775:
      case 10776:
      case 10777:
      case 10778:
      case 10779:
      case 10780:
      case 10781:
      case 10782:
      case 10783:
      case 10784:
      case 10785:
      case 10786:
      case 10787:
      case 10788:
      case 10789:
      case 10790:
      case 10791:
      case 10792:
      case 10793:
      case 10794:
      case 10795:
      case 10796:
      case 10797:
      case 10798:
      case 10799:
      case 10800:
      case 10801:
      case 10802:
      case 10803:
      case 10804:
      case 10805:
      case 10806:
      case 10807:
      case 10808:
      case 10809:
      case 10810:
      case 10811:
      case 10812:
      case 10813:
      case 10814:
      case 10815:
      case 10816:
      case 10817:
      case 10818:
      case 10819:
      case 10820:
      case 10821:
      case 10822:
      case 10823:
      case 10824:
      case 10825:
      case 10826:
      case 10827:
      case 10828:
      case 10829:
      case 10830:
      case 10831:
      case 10838:
      case 10839:
      case 10840:
      case 10841:
      case 10842:
      case 10843:
      case 10844:
      case 10845:
      case 10850:
      case 10851:
      case 10852:
      case 10853:
      case 10854:
      case 10855:
      case 10856:
      case 10857:
      case 10912:
      case 10913:
      case 10914:
      case 10915:
      case 10916:
      case 10917:
      case 10918:
      case 10919:
      case 10920:
      case 10921:
      case 10922:
      case 10923:
      case 10924:
      case 10925:
      case 10926:
      case 10927:
      case 10928:
      case 10929:
      case 10930:
      case 10931:
      case 10932:
      case 10933:
      case 10934:
      case 10935:
      case 10936:
      case 10937:
      case 10938:
      case 10939:
      case 10940:
      case 10941:
      case 10942:
      case 10943:
      case 10944:
      case 10945:
      case 10946:
      case 10947:
      case 10948:
      case 10949:
      case 10950:
      case 10951:
      case 10952:
      case 10953:
      case 10954:
      case 10955:
      case 10956:
      case 10957:
      case 10958:
      case 10959:
      case 10960:
      case 10961:
      case 10962:
      case 10963:
      case 10964:
      case 10965:
      case 10966:
      case 10967:
      case 10980:
      case 10981:
      case 10991:
      case 10992:
      case 10993:
      case 10994:
      case 11003:
      case 11004:
      case 11005:
      case 11006:
      case 11007:
      case 11008:
      case 11013:
      case 11014:
      case 11015:
      case 11017:
      case 11018:
      case 11020:
      case 11021:
      case 11023:
      case 11024:
      case 11026:
      case 11027:
      case 11029:
      case 11030:
      case 11032:
      case 11033:
      case 11035:
      case 11036:
      case 11038:
      case 11039:
      case 11041:
      case 11042:
      case 11044:
      case 11045:
      case 11050:
      case 11051:
      case 11053:
      case 11054:
      case 11056:
      case 11057:
      case 11059:
      case 11060:
      case 11062:
      case 11063:
      case 11065:
      case 11066:
      case 11068:
      case 11069:
      case 11070:
      case 11071:
      case 11072:
      case 11075:
      case 11076:
      case 11079:
      case 11080:
      case 11083:
      case 11084:
      case 11087:
      case 11088:
      case 11091:
      case 11092:
      case 11095:
      case 11096:
      case 11098:
      case 11099:
      case 11119:
      case 11120:
      case 11124:
      case 11125:
      case 11126:
      case 11127:
      case 11128:
      case 11129:
      case 11130:
      case 11131:
      case 11132:
      case 11133:
      case 11152:
      case 11153:
      case 11154:
      case 11155:
      case 11176:
      case 11177:
      case 11178:
      case 11179:
      case 11180:
      case 11181:
      case 11182:
      case 11183:
      case 11184:
      case 11185:
      case 11186:
      case 11188:
      case 11189:
      case 11190:
      case 11191:
      case 11192:
      case 11193:
      case 11194:
      case 11195:
      case 11196:
      case 11197:
      case 11200:
      case 11201:
      case 11202:
      case 11203:
      case 11204:
      case 11205:
      case 11206:
      case 11207:
      case 11208:
      case 11209:
      case 11210:
      case 11211:
      case 11212:
      case 11213:
      case 11214:
      case 11215:
      case 11216:
      case 11217:
      case 11218:
      case 11219:
      case 11220:
      case 11221:
      case 11222:
      case 11223:
      case 11224:
      case 11225:
      case 11226:
      case 11227:
      case 11228:
      case 11229:
      case 11230:
      case 11231:
      case 11232:
      case 11233:
      case 11234:
      case 11235:
      case 11236:
      case 11237:
      case 11238:
      case 11239:
      case 11240:
      case 11241:
      case 11242:
      case 11277:
      case 11278:
      case 11279:
      case 11281:
      case 11282:
      case 11283:
      case 11287:
      case 11288:
      case 11289:
      case 11290:
      case 11291:
      case 11292:
      case 11293:
      case 11294:
      case 11295:
      case 11296:
      case 11297:
      case 11298:
      case 11299:
      case 11300:
      case 11301:
      case 11302:
      case 11304:
      case 11305:
      case 11306:
      case 11307:
      case 11308:
      case 11310:
      case 11311:
      case 11312:
      case 11313:
      case 11316:
      case 11317:
      case 11318:
      case 11319:
      case 11320:
      case 11321:
      case 11325:
      case 11326:
      case 11327:
      case 11328:
      case 11329:
      case 11330:
      case 11331:
      case 11332:
      case 11333:
      case 11334:
      case 11335:
      case 11336:
      case 11337:
      case 11338:
      case 11339:
      case 11340:
      case 11343:
      case 11344:
      case 11346:
      case 11347:
      case 11348:
      case 11349:
      case 11350:
      case 11351:
      case 11353:
      case 11354:
      case 11355:
      case 11356:
      case 11357:
      case 11358:
      case 11359:
      case 11360:
      case 11361:
      case 11362:
      case 11363:
      case 11364:
      case 11365:
      case 11366:
      case 11367:
      case 11368:
      case 11369:
      case 11370:
      case 11371:
      case 11372:
      case 11373:
      case 11374:
      case 11375:
      case 11376:
      case 11377:
      case 11378:
      case 11379:
      case 11380:
      case 11381:
      case 11382:
      case 11383:
      case 11384:
      case 11385:
      case 11386:
      case 11387:
      case 11391:
      case 11392:
      case 11397:
      case 11398:
      case 11399:
      case 11400:
      case 11401:
      case 11402:
      case 11407:
      case 11408:
      case 11409:
      case 11410:
      case 11425:
      case 11427:
      case 11429:
      case 11430:
      case 11431:
      case 11432:
      case 11433:
      case 11434:
      case 11435:
      case 11436:
      case 11437:
      case 11438:
      case 11439:
      case 11440:
      case 11441:
      case 11442:
      case 11443:
      case 11444:
      case 11445:
      case 11446:
      case 11447:
      case 11448:
      case 11449:
      case 11450:
      case 11451:
      case 11452:
      case 11453:
      case 11454:
      case 11455:
      case 11458:
      case 11459:
      case 11503:
      case 11504:
      case 11513:
      case 11514:
      case 11515:
      case 11531:
      case 11532:
      case 11533:
      case 11534:
      case 11535:
      case 11536:
      case 11541:
      case 11542:
      case 11543:
      case 11544:
      case 11545:
      case 11546:
      case 11547:
      case 11548:
      case 11549:
      case 11550:
      case 11551:
      case 11552:
      case 11553:
      case 11554:
      case 11555:
      case 11556:
      case 11557:
      case 11558:
      case 11559:
      case 11560:
      case 11561:
      case 11562:
      case 11563:
      case 11564:
      case 11565:
      case 11566:
      case 11567:
      case 11568:
      case 11569:
      case 11570:
      case 11571:
      case 11572:
      case 11573:
      case 11574:
      case 11575:
      case 11576:
        unint64_t v7 = 1;
        IntrinsicFnAttributeSet = getIntrinsicFnAttributeSet(a1, 1);
        v457[0] = -1;
        v458 = IntrinsicFnAttributeSet;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 3:
      case 174:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 1211:
      case 1212:
      case 1213:
      case 1215:
      case 1216:
      case 1217:
      case 1218:
      case 1219:
      case 1220:
      case 1221:
      case 1222:
      case 1223:
      case 1233:
      case 1234:
      case 1235:
      case 1237:
      case 2726:
      case 2727:
      case 2861:
      case 2862:
      case 2863:
      case 2864:
      case 2865:
      case 2866:
      case 2867:
      case 2868:
      case 2869:
      case 2870:
      case 2871:
      case 2872:
      case 2873:
      case 7394:
      case 7395:
      case 7396:
      case 7399:
      case 7400:
      case 7768:
      case 7769:
      case 7770:
      case 7907:
      case 7908:
      case 7909:
      case 7910:
      case 7911:
      case 7912:
      case 7913:
      case 10253:
      case 10254:
      case 10255:
      case 10256:
      case 10308:
      case 10309:
      case 10310:
      case 10311:
      case 11491:
      case 11492:
      case 11493:
      case 11494:
      case 11495:
      case 11496:
      case 11497:
      case 11498:
      case 11499:
      case 11500:
      case 11501:
      case 11502:
        char v9 = a1;
        int v10 = 2;
        goto LABEL_416;
      case 4:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 127:
      case 155:
      case 217:
      case 248:
      case 249:
      case 274:
      case 275:
      case 319:
      case 5058:
        char v9 = a1;
        int v10 = 3;
        goto LABEL_416;
      case 5:
      case 8:
      case 9:
      case 14:
      case 15:
      case 20:
      case 52:
      case 54:
      case 56:
      case 57:
      case 58:
      case 59:
      case 76:
      case 77:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 148:
      case 149:
      case 172:
      case 173:
      case 178:
      case 179:
      case 180:
      case 183:
      case 184:
      case 195:
      case 196:
      case 205:
      case 206:
      case 207:
      case 242:
      case 243:
      case 256:
      case 257:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 276:
      case 277:
      case 278:
      case 281:
      case 283:
      case 285:
      case 286:
      case 287:
      case 293:
      case 300:
      case 302:
      case 303:
      case 304:
      case 308:
      case 309:
      case 312:
      case 313:
      case 314:
      case 315:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 1746:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1790:
      case 1792:
      case 1793:
      case 1822:
      case 1824:
      case 1825:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1844:
      case 2332:
      case 2334:
      case 2346:
      case 2348:
      case 2350:
      case 2352:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2409:
      case 2434:
      case 2435:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2450:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2474:
      case 2475:
      case 2491:
      case 2521:
      case 2522:
      case 2529:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 5785:
      case 5786:
      case 5787:
      case 5788:
      case 5789:
      case 5790:
      case 5791:
      case 5792:
      case 5793:
      case 5794:
      case 5795:
      case 5796:
      case 5831:
      case 5832:
      case 5833:
      case 5834:
      case 5835:
      case 5836:
      case 5837:
      case 5853:
      case 5854:
      case 5855:
      case 5856:
      case 5857:
      case 5858:
      case 5859:
      case 5860:
      case 5861:
      case 5862:
      case 5863:
      case 5864:
      case 5865:
      case 5866:
      case 5867:
      case 5868:
      case 5869:
      case 5870:
      case 5871:
      case 5872:
      case 5873:
      case 5874:
      case 5875:
      case 5876:
      case 5877:
      case 5878:
      case 5902:
      case 5903:
      case 5904:
      case 5905:
      case 5906:
      case 5907:
      case 5908:
      case 5909:
      case 5910:
      case 5911:
      case 5912:
      case 5913:
      case 5914:
      case 5915:
      case 5916:
      case 5917:
      case 5918:
      case 5919:
      case 5921:
      case 5922:
      case 5923:
      case 5924:
      case 5925:
      case 5926:
      case 5927:
      case 5928:
      case 5929:
      case 5930:
      case 5931:
      case 5932:
      case 5933:
      case 5934:
      case 5935:
      case 5936:
      case 5937:
      case 5938:
      case 5939:
      case 5948:
      case 5949:
      case 5950:
      case 5951:
      case 5952:
      case 5953:
      case 5954:
      case 5955:
      case 5956:
      case 5957:
      case 5958:
      case 5959:
      case 5960:
      case 5961:
      case 5962:
      case 5963:
      case 5964:
      case 5965:
      case 5966:
      case 5967:
      case 5968:
      case 5969:
      case 5970:
      case 5971:
      case 5972:
      case 5973:
      case 5974:
      case 5975:
      case 5976:
      case 5977:
      case 5978:
      case 5979:
      case 5980:
      case 5981:
      case 5982:
      case 5983:
      case 5984:
      case 5985:
      case 5986:
      case 5987:
      case 5988:
      case 5989:
      case 5990:
      case 5991:
      case 5992:
      case 5993:
      case 5994:
      case 5995:
      case 5996:
      case 5997:
      case 5998:
      case 5999:
      case 6000:
      case 6001:
      case 6002:
      case 6003:
      case 6004:
      case 6005:
      case 6006:
      case 6007:
      case 6008:
      case 6009:
      case 6010:
      case 6011:
      case 6012:
      case 6013:
      case 6014:
      case 6015:
      case 6016:
      case 6017:
      case 6018:
      case 6019:
      case 6020:
      case 6021:
      case 6022:
      case 6023:
      case 6024:
      case 6025:
      case 6026:
      case 6027:
      case 6028:
      case 6029:
      case 6030:
      case 6031:
      case 6032:
      case 6033:
      case 6034:
      case 6035:
      case 6036:
      case 6037:
      case 6038:
      case 6039:
      case 6040:
      case 6041:
      case 6042:
      case 6043:
      case 6044:
      case 6046:
      case 6047:
      case 6048:
      case 6049:
      case 6050:
      case 6051:
      case 6052:
      case 6053:
      case 6076:
      case 6077:
      case 6078:
      case 6079:
      case 6080:
      case 6081:
      case 6082:
      case 6083:
      case 6084:
      case 6190:
      case 6191:
      case 6192:
      case 6193:
      case 6194:
      case 6195:
      case 6196:
      case 6197:
      case 6198:
      case 6199:
      case 6200:
      case 6201:
      case 6202:
      case 6203:
      case 6204:
      case 6205:
      case 6206:
      case 6207:
      case 6210:
      case 6211:
      case 6212:
      case 6213:
      case 6214:
      case 6216:
      case 6217:
      case 6218:
      case 6219:
      case 6309:
      case 6310:
      case 6311:
      case 6312:
      case 6313:
      case 6314:
      case 6320:
      case 6321:
      case 6322:
      case 6753:
      case 6924:
      case 6925:
      case 6926:
      case 6935:
      case 6936:
      case 6937:
      case 6938:
      case 6939:
      case 6940:
      case 6941:
      case 6942:
      case 6943:
      case 6944:
      case 6945:
      case 6946:
      case 6947:
      case 6948:
      case 6949:
      case 6950:
      case 7987:
      case 7990:
      case 7992:
      case 7995:
      case 7996:
      case 7997:
      case 7998:
      case 7999:
      case 8000:
      case 8001:
      case 8002:
      case 8003:
      case 8004:
      case 8005:
      case 8006:
      case 8007:
      case 8008:
      case 8009:
      case 8010:
      case 8011:
      case 8026:
      case 8027:
      case 8028:
      case 8029:
      case 8030:
      case 8032:
      case 8033:
      case 8034:
      case 8035:
      case 8036:
      case 8057:
      case 8072:
      case 8073:
      case 8074:
      case 8075:
      case 8076:
      case 8077:
      case 8078:
      case 8079:
      case 8080:
      case 8081:
      case 8082:
      case 8083:
      case 8084:
      case 8085:
      case 8086:
      case 8087:
      case 8098:
      case 8589:
      case 8590:
      case 8591:
      case 10107:
      case 10108:
      case 10109:
      case 10110:
      case 10111:
      case 10113:
      case 10114:
      case 10115:
      case 10125:
      case 10126:
      case 10127:
      case 10128:
      case 10129:
      case 10134:
      case 10135:
      case 10136:
      case 10137:
      case 10138:
      case 10139:
      case 10140:
      case 10141:
      case 10142:
      case 10143:
      case 10144:
      case 10145:
      case 10146:
      case 10147:
      case 10149:
      case 10150:
      case 10151:
      case 10152:
      case 10164:
      case 10166:
      case 10167:
      case 10168:
        char v9 = a1;
        int v10 = 0;
        goto LABEL_416;
      case 6:
      case 5078:
      case 5079:
      case 5092:
      case 5093:
      case 5780:
      case 10227:
      case 10229:
      case 10231:
        IntrinsicArgAttributeSet = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 2;
        goto LABEL_19;
      case 7:
      case 11647:
      case 11655:
        int v12 = getIntrinsicArgAttributeSet(a1, 1);
        v457[0] = 1;
        v458 = v12;
        uint64_t v13 = a1;
        int v14 = 3;
        goto LABEL_420;
      case 10:
      case 11:
      case 12:
      case 154:
      case 158:
      case 176:
      case 241:
      case 260:
      case 288:
      case 289:
      case 290:
      case 291:
      case 316:
      case 317:
      case 318:
      case 392:
      case 471:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 691:
      case 692:
      case 693:
      case 694:
      case 697:
      case 698:
      case 699:
      case 700:
      case 704:
      case 705:
      case 706:
      case 707:
      case 708:
      case 711:
      case 712:
      case 713:
      case 714:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 735:
      case 740:
      case 741:
      case 743:
      case 744:
      case 746:
      case 747:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 790:
      case 791:
      case 792:
      case 793:
      case 794:
      case 798:
      case 799:
      case 800:
      case 801:
      case 802:
      case 806:
      case 807:
      case 808:
      case 809:
      case 810:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 836:
      case 837:
      case 841:
      case 842:
      case 853:
      case 854:
      case 855:
      case 856:
      case 857:
      case 858:
      case 859:
      case 860:
      case 864:
      case 865:
      case 866:
      case 867:
      case 868:
      case 872:
      case 873:
      case 874:
      case 875:
      case 876:
      case 880:
      case 881:
      case 882:
      case 883:
      case 884:
      case 888:
      case 889:
      case 890:
      case 891:
      case 892:
      case 896:
      case 897:
      case 898:
      case 899:
      case 900:
      case 904:
      case 905:
      case 906:
      case 907:
      case 908:
      case 915:
      case 916:
      case 917:
      case 918:
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
      case 939:
      case 940:
      case 946:
      case 2595:
      case 2960:
      case 2961:
      case 2962:
      case 2964:
      case 2998:
      case 2999:
      case 3000:
      case 3011:
      case 3012:
      case 3013:
      case 3031:
      case 3032:
      case 3033:
      case 5034:
      case 5035:
      case 5036:
      case 5037:
      case 5038:
      case 5039:
      case 5040:
      case 5059:
      case 7993:
      case 7994:
      case 8012:
      case 10123:
      case 10153:
      case 10154:
      case 10155:
      case 10158:
      case 10159:
      case 11649:
      case 11657:
        char v9 = a1;
        int v10 = 5;
        goto LABEL_416;
      case 13:
      case 28:
      case 46:
      case 50:
        char v9 = a1;
        int v10 = 6;
        goto LABEL_416;
      case 16:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 33:
      case 34:
      case 38:
      case 39:
      case 40:
      case 49:
      case 51:
      case 60:
      case 62:
      case 66:
      case 67:
      case 69:
      case 72:
      case 73:
      case 75:
      case 151:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 294:
      case 418:
      case 475:
      case 947:
      case 948:
      case 949:
      case 2579:
      case 2592:
      case 2593:
      case 2594:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2605:
      case 2606:
      case 3005:
      case 3006:
      case 3007:
      case 3008:
      case 3020:
      case 3047:
      case 5062:
      case 5063:
      case 5067:
      case 5068:
      case 5069:
      case 5070:
      case 5071:
      case 5072:
      case 5073:
      case 5074:
      case 5075:
      case 5084:
      case 5085:
      case 5086:
      case 5087:
      case 5088:
      case 5089:
      case 5090:
      case 5091:
      case 5112:
      case 5113:
      case 5114:
      case 5121:
      case 5138:
      case 5139:
      case 5141:
      case 5153:
      case 5281:
      case 5282:
      case 5283:
      case 5284:
      case 5285:
      case 5286:
      case 5287:
      case 5288:
      case 5289:
      case 5290:
      case 5291:
      case 5292:
      case 5324:
      case 5325:
      case 5326:
      case 5327:
      case 5332:
      case 5333:
      case 5334:
      case 5335:
      case 5345:
      case 5346:
      case 5347:
      case 5348:
      case 5349:
      case 5350:
      case 5518:
      case 5519:
      case 5520:
      case 5521:
      case 5582:
      case 5583:
      case 5586:
      case 5587:
      case 5588:
      case 5589:
      case 5590:
      case 5591:
      case 5592:
      case 5593:
      case 5594:
      case 5598:
      case 5642:
      case 5647:
      case 5648:
      case 5666:
      case 5667:
      case 5668:
      case 5669:
      case 5741:
      case 5762:
      case 5764:
      case 5838:
      case 5839:
      case 5846:
      case 5851:
      case 6372:
      case 6373:
      case 6374:
      case 6375:
      case 6376:
      case 6377:
      case 6378:
      case 6379:
      case 6380:
      case 6381:
      case 6382:
      case 6383:
      case 6384:
      case 6385:
      case 6386:
      case 6387:
      case 6388:
      case 6389:
      case 6390:
      case 6391:
      case 6392:
      case 6393:
      case 6394:
      case 6395:
      case 6396:
      case 6397:
      case 6398:
      case 6399:
      case 6400:
      case 6401:
      case 6402:
      case 6403:
      case 6404:
      case 6405:
      case 6406:
      case 6407:
      case 6408:
      case 6409:
      case 6410:
      case 6411:
      case 6412:
      case 6413:
      case 6414:
      case 6415:
      case 6416:
      case 6417:
      case 6418:
      case 6419:
      case 6420:
      case 6421:
      case 6422:
      case 6423:
      case 6424:
      case 6425:
      case 6426:
      case 6427:
      case 6428:
      case 6429:
      case 6430:
      case 6431:
      case 6432:
      case 6433:
      case 6434:
      case 6435:
      case 6436:
      case 6437:
      case 6438:
      case 6439:
      case 6440:
      case 6441:
      case 6442:
      case 6443:
      case 6444:
      case 6445:
      case 6446:
      case 6447:
      case 6448:
      case 6449:
      case 6450:
      case 6451:
      case 6452:
      case 6453:
      case 6454:
      case 6455:
      case 6456:
      case 6457:
      case 6458:
      case 6459:
      case 6460:
      case 6461:
      case 6462:
      case 6463:
      case 6464:
      case 6465:
      case 6466:
      case 6467:
      case 6468:
      case 6469:
      case 6470:
      case 6471:
      case 6472:
      case 6473:
      case 6474:
      case 6475:
      case 6476:
      case 6477:
      case 6478:
      case 6479:
      case 6480:
      case 6481:
      case 6482:
      case 6483:
      case 6484:
      case 6485:
      case 6486:
      case 6487:
      case 6488:
      case 6489:
      case 6490:
      case 6491:
      case 6492:
      case 6493:
      case 6494:
      case 6495:
      case 6496:
      case 6497:
      case 6498:
      case 6499:
      case 6500:
      case 6501:
      case 6502:
      case 6503:
      case 6504:
      case 6505:
      case 6506:
      case 6507:
      case 6508:
      case 6509:
      case 6510:
      case 6511:
      case 6512:
      case 6513:
      case 6514:
      case 6515:
      case 6516:
      case 6517:
      case 6518:
      case 6519:
      case 6520:
      case 6521:
      case 6522:
      case 6523:
      case 6524:
      case 6525:
      case 6526:
      case 6527:
      case 6528:
      case 6529:
      case 6530:
      case 6531:
      case 6532:
      case 6533:
      case 6534:
      case 6535:
      case 6536:
      case 6543:
      case 6544:
      case 6545:
      case 6546:
      case 6547:
      case 6548:
      case 6549:
      case 6550:
      case 6551:
      case 6552:
      case 6553:
      case 6554:
      case 6555:
      case 6556:
      case 6557:
      case 6558:
      case 6559:
      case 6560:
      case 6561:
      case 6562:
      case 6563:
      case 6564:
      case 6565:
      case 6566:
      case 6567:
      case 6568:
      case 6569:
      case 6570:
      case 6571:
      case 6572:
      case 6573:
      case 6574:
      case 6575:
      case 6576:
      case 6577:
      case 6578:
      case 6579:
      case 6580:
      case 6581:
      case 6582:
      case 6583:
      case 6584:
      case 6585:
      case 6586:
      case 6587:
      case 6588:
      case 6589:
      case 6590:
      case 6591:
      case 6592:
      case 6593:
      case 6594:
      case 6595:
      case 6596:
      case 6597:
      case 6598:
      case 6599:
      case 6600:
      case 6601:
      case 6602:
      case 6603:
      case 6604:
      case 6605:
      case 6606:
      case 6607:
      case 6608:
      case 6609:
      case 6610:
      case 6611:
      case 6612:
      case 6613:
      case 6614:
      case 6615:
      case 6616:
      case 6617:
      case 6618:
      case 6619:
      case 6620:
      case 6621:
      case 6622:
      case 6623:
      case 6624:
      case 6625:
      case 6626:
      case 6627:
      case 6628:
      case 6629:
      case 6630:
      case 6631:
      case 6632:
      case 6633:
      case 6634:
      case 6635:
      case 6636:
      case 6637:
      case 6638:
      case 6639:
      case 6640:
      case 6641:
      case 6642:
      case 6643:
      case 6644:
      case 6645:
      case 6646:
      case 6647:
      case 6648:
      case 6649:
      case 6650:
      case 6651:
      case 6652:
      case 6653:
      case 6654:
      case 6655:
      case 6656:
      case 6657:
      case 6658:
      case 6659:
      case 6660:
      case 6661:
      case 6662:
      case 6663:
      case 6664:
      case 6665:
      case 6666:
      case 6667:
      case 6668:
      case 6669:
      case 6670:
      case 6671:
      case 6672:
      case 6673:
      case 6674:
      case 6675:
      case 6676:
      case 6677:
      case 6678:
      case 6679:
      case 6680:
      case 6681:
      case 6682:
      case 6683:
      case 6684:
      case 6685:
      case 6686:
      case 6687:
      case 6688:
      case 6689:
      case 6690:
      case 6691:
      case 6692:
      case 6693:
      case 6694:
      case 6695:
      case 6696:
      case 6697:
      case 6698:
      case 6699:
      case 6700:
      case 6701:
      case 6702:
      case 6703:
      case 6704:
      case 6705:
      case 6706:
      case 6707:
      case 6708:
      case 6709:
      case 6710:
      case 6711:
      case 6712:
      case 6713:
      case 6714:
      case 6715:
      case 6716:
      case 6717:
      case 6718:
      case 6719:
      case 6720:
      case 6721:
      case 6722:
      case 6723:
      case 6724:
      case 6725:
      case 6726:
      case 6727:
      case 6728:
      case 6729:
      case 6730:
      case 6731:
      case 6732:
      case 6733:
      case 6734:
      case 6735:
      case 6736:
      case 6737:
      case 6738:
      case 6739:
      case 6740:
      case 6741:
      case 6742:
      case 6743:
      case 6744:
      case 6745:
      case 6746:
      case 6747:
      case 6748:
      case 6749:
      case 6750:
      case 6751:
      case 6752:
      case 6754:
      case 6755:
      case 6756:
      case 6757:
      case 6758:
      case 6759:
      case 6760:
      case 6761:
      case 6762:
      case 6763:
      case 6764:
      case 6765:
      case 6766:
      case 6767:
      case 6768:
      case 6769:
      case 6770:
      case 6771:
      case 6772:
      case 6773:
      case 6774:
      case 6775:
      case 6776:
      case 6777:
      case 6778:
      case 6779:
      case 6780:
      case 6781:
      case 6782:
      case 6783:
      case 6784:
      case 6785:
      case 6786:
      case 6787:
      case 6788:
      case 6789:
      case 6790:
      case 6791:
      case 6792:
      case 6793:
      case 6794:
      case 6795:
      case 6796:
      case 6797:
      case 6798:
      case 6799:
      case 6800:
      case 6801:
      case 6802:
      case 6803:
      case 6804:
      case 6805:
      case 6806:
      case 6807:
      case 6808:
      case 6809:
      case 6810:
      case 6811:
      case 6812:
      case 6813:
      case 6814:
      case 6815:
      case 6816:
      case 6817:
      case 6818:
      case 6819:
      case 6820:
      case 6821:
      case 6822:
      case 6823:
      case 6824:
      case 6825:
      case 6826:
      case 6827:
      case 6828:
      case 6829:
      case 6830:
      case 6831:
      case 6832:
      case 6833:
      case 6834:
      case 6835:
      case 6836:
      case 6837:
      case 6838:
      case 6839:
      case 6840:
      case 6841:
      case 6842:
      case 6843:
      case 6844:
      case 6845:
      case 6846:
      case 6847:
      case 6848:
      case 6849:
      case 6850:
      case 6851:
      case 6852:
      case 6853:
      case 6854:
      case 6855:
      case 6856:
      case 6857:
      case 6858:
      case 6859:
      case 6860:
      case 6861:
      case 6862:
      case 6863:
      case 6864:
      case 6865:
      case 6866:
      case 6867:
      case 6868:
      case 6869:
      case 6870:
      case 6871:
      case 6872:
      case 6873:
      case 6874:
      case 6875:
      case 6876:
      case 6877:
      case 6878:
      case 6879:
      case 6880:
      case 6881:
      case 6882:
      case 6883:
      case 6884:
      case 6885:
      case 6886:
      case 6887:
      case 6888:
      case 6889:
      case 6890:
      case 6891:
      case 6892:
      case 6893:
      case 6894:
      case 6895:
      case 6896:
      case 6897:
      case 6900:
      case 6901:
      case 6902:
      case 6903:
      case 6904:
      case 6905:
      case 6906:
      case 6907:
      case 6908:
      case 6909:
      case 6910:
      case 6911:
      case 6912:
      case 6913:
      case 6914:
      case 6915:
      case 6916:
      case 6917:
      case 6918:
      case 6919:
      case 6920:
      case 6921:
      case 6922:
      case 6923:
      case 7388:
      case 7389:
      case 7390:
      case 7391:
      case 7392:
      case 7393:
      case 7695:
      case 7712:
      case 7717:
      case 7718:
      case 7726:
      case 7727:
      case 7733:
      case 7758:
      case 7759:
      case 7760:
      case 7761:
      case 7762:
      case 7764:
      case 7765:
      case 7766:
      case 7767:
      case 7771:
      case 7851:
      case 7865:
      case 7866:
      case 7867:
      case 7868:
      case 7882:
      case 7883:
      case 7884:
      case 7885:
      case 7886:
      case 7887:
      case 7889:
      case 7892:
      case 7894:
      case 7895:
      case 7896:
      case 7897:
      case 7898:
      case 7900:
      case 7901:
      case 7902:
      case 8592:
      case 8596:
      case 8597:
      case 8603:
      case 8825:
      case 8826:
      case 8827:
      case 8828:
      case 8829:
      case 8830:
      case 8831:
      case 8832:
      case 8834:
      case 8835:
      case 8836:
      case 8839:
      case 8840:
      case 8841:
      case 8842:
      case 8843:
      case 10201:
      case 10202:
      case 10203:
      case 10204:
      case 10205:
      case 10206:
      case 10207:
      case 10208:
      case 10228:
      case 10230:
      case 10232:
      case 11134:
      case 11135:
      case 11136:
      case 11137:
      case 11138:
      case 11139:
      case 11142:
      case 11143:
      case 11144:
      case 11145:
      case 11146:
      case 11147:
      case 11148:
      case 11149:
      case 11150:
      case 11151:
      case 11156:
      case 11157:
      case 11158:
      case 11159:
      case 11160:
      case 11161:
      case 11163:
      case 11164:
      case 11165:
      case 11166:
      case 11167:
      case 11172:
      case 11173:
      case 11174:
      case 11175:
      case 11243:
      case 11244:
      case 11245:
      case 11249:
      case 11250:
      case 11251:
      case 11252:
      case 11253:
      case 11254:
      case 11255:
      case 11256:
      case 11257:
      case 11258:
      case 11259:
      case 11260:
      case 11261:
      case 11262:
      case 11263:
      case 11264:
      case 11265:
      case 11266:
      case 11267:
      case 11268:
      case 11269:
      case 11270:
      case 11271:
      case 11272:
      case 11274:
      case 11275:
      case 11276:
      case 11284:
      case 11314:
      case 11322:
      case 11341:
      case 11342:
      case 11345:
      case 11352:
      case 11389:
      case 11390:
      case 11456:
      case 11457:
      case 11463:
      case 11465:
      case 11467:
      case 11469:
      case 11471:
      case 11473:
      case 11475:
      case 11477:
      case 11478:
      case 11480:
      case 11482:
      case 11483:
      case 11485:
      case 11487:
      case 11488:
      case 11489:
      case 11490:
      case 11516:
      case 11517:
      case 11518:
      case 11519:
      case 11520:
      case 11521:
      case 11522:
      case 11523:
      case 11524:
      case 11525:
      case 11526:
      case 11528:
      case 11529:
      case 11530:
      case 11577:
      case 11578:
      case 11579:
      case 11580:
      case 11581:
      case 11582:
      case 11583:
      case 11584:
      case 11585:
      case 11586:
      case 11587:
      case 11588:
      case 11589:
      case 11590:
      case 11591:
      case 11592:
      case 11594:
      case 11596:
      case 11598:
      case 11605:
      case 11606:
      case 11608:
      case 11609:
      case 11632:
      case 11636:
      case 11640:
        char v9 = a1;
        int v10 = 4;
        goto LABEL_416;
      case 17:
        char v9 = a1;
        int v10 = 7;
        goto LABEL_416;
      case 21:
      case 35:
      case 41:
      case 42:
      case 43:
      case 47:
      case 63:
      case 64:
      case 71:
      case 74:
      case 269:
      case 270:
      case 452:
      case 453:
      case 454:
      case 459:
      case 460:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 3038:
      case 3039:
      case 3043:
      case 3044:
      case 3046:
      case 5115:
      case 5116:
      case 5117:
      case 5118:
      case 5119:
      case 5120:
      case 5122:
      case 5123:
      case 5124:
      case 5125:
      case 5126:
      case 5127:
      case 5128:
      case 5129:
      case 5130:
      case 5131:
      case 5132:
      case 5133:
      case 5134:
      case 5135:
      case 5136:
      case 5137:
      case 5140:
      case 5142:
      case 5143:
      case 5144:
      case 5145:
      case 5146:
      case 5147:
      case 5148:
      case 5154:
      case 5157:
      case 5158:
      case 5159:
      case 5160:
      case 5161:
      case 5162:
      case 5163:
      case 5164:
      case 5165:
      case 5166:
      case 5167:
      case 5168:
      case 5169:
      case 5170:
      case 5171:
      case 5172:
      case 5173:
      case 5174:
      case 5175:
      case 5176:
      case 5177:
      case 5178:
      case 5179:
      case 5180:
      case 5182:
      case 5183:
      case 5184:
      case 5185:
      case 5190:
      case 5191:
      case 5192:
      case 5193:
      case 5198:
      case 5199:
      case 5200:
      case 5201:
      case 5206:
      case 5207:
      case 5209:
      case 5211:
      case 5212:
      case 5213:
      case 5214:
      case 5219:
      case 5220:
      case 5221:
      case 5222:
      case 5223:
      case 5225:
      case 5227:
      case 5228:
      case 5229:
      case 5230:
      case 5235:
      case 5236:
      case 5237:
      case 5238:
      case 5239:
      case 5240:
      case 5241:
      case 5242:
      case 5243:
      case 5249:
      case 5250:
      case 5251:
      case 5252:
      case 5253:
      case 5254:
      case 5255:
      case 5256:
      case 5265:
      case 5266:
      case 5267:
      case 5268:
      case 5269:
      case 5270:
      case 5271:
      case 5272:
      case 5293:
      case 5294:
      case 5295:
      case 5296:
      case 5297:
      case 5298:
      case 5299:
      case 5300:
      case 5302:
      case 5303:
      case 5304:
      case 5305:
      case 5306:
      case 5307:
      case 5308:
      case 5309:
      case 5310:
      case 5311:
      case 5312:
      case 5313:
      case 5314:
      case 5315:
      case 5316:
      case 5317:
      case 5318:
      case 5319:
      case 5320:
      case 5321:
      case 5322:
      case 5323:
      case 5328:
      case 5329:
      case 5330:
      case 5331:
      case 5336:
      case 5337:
      case 5338:
      case 5339:
      case 5340:
      case 5341:
      case 5342:
      case 5343:
      case 5344:
      case 5351:
      case 5352:
      case 5353:
      case 5354:
      case 5355:
      case 5356:
      case 5357:
      case 5358:
      case 5359:
      case 5360:
      case 5361:
      case 5362:
      case 5363:
      case 5364:
      case 5365:
      case 5366:
      case 5367:
      case 5368:
      case 5369:
      case 5370:
      case 5371:
      case 5372:
      case 5373:
      case 5374:
      case 5375:
      case 5376:
      case 5377:
      case 5378:
      case 5379:
      case 5380:
      case 5381:
      case 5382:
      case 5383:
      case 5384:
      case 5385:
      case 5386:
      case 5387:
      case 5388:
      case 5389:
      case 5390:
      case 5391:
      case 5392:
      case 5393:
      case 5394:
      case 5395:
      case 5396:
      case 5397:
      case 5398:
      case 5399:
      case 5400:
      case 5401:
      case 5402:
      case 5403:
      case 5404:
      case 5405:
      case 5406:
      case 5407:
      case 5408:
      case 5409:
      case 5410:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
      case 5415:
      case 5416:
      case 5417:
      case 5418:
      case 5419:
      case 5420:
      case 5421:
      case 5422:
      case 5423:
      case 5424:
      case 5425:
      case 5426:
      case 5427:
      case 5428:
      case 5429:
      case 5430:
      case 5431:
      case 5432:
      case 5433:
      case 5434:
      case 5435:
      case 5436:
      case 5437:
      case 5438:
      case 5439:
      case 5440:
      case 5441:
      case 5442:
      case 5443:
      case 5444:
      case 5445:
      case 5446:
      case 5447:
      case 5448:
      case 5449:
      case 5450:
      case 5451:
      case 5452:
      case 5453:
      case 5454:
      case 5455:
      case 5456:
      case 5457:
      case 5458:
      case 5459:
      case 5460:
      case 5461:
      case 5462:
      case 5463:
      case 5464:
      case 5465:
      case 5466:
      case 5467:
      case 5468:
      case 5469:
      case 5470:
      case 5471:
      case 5472:
      case 5473:
      case 5474:
      case 5475:
      case 5476:
      case 5477:
      case 5478:
      case 5479:
      case 5480:
      case 5481:
      case 5482:
      case 5483:
      case 5484:
      case 5485:
      case 5486:
      case 5487:
      case 5488:
      case 5506:
      case 5508:
      case 5509:
      case 5510:
      case 5511:
      case 5512:
      case 5513:
      case 5514:
      case 5515:
      case 5516:
      case 5517:
      case 5522:
      case 5523:
      case 5524:
      case 5525:
      case 5526:
      case 5527:
      case 5528:
      case 5529:
      case 5530:
      case 5531:
      case 5532:
      case 5533:
      case 5542:
      case 5543:
      case 5544:
      case 5545:
      case 5546:
      case 5547:
      case 5548:
      case 5549:
      case 5550:
      case 5551:
      case 5552:
      case 5553:
      case 5562:
      case 5563:
      case 5564:
      case 5565:
      case 5566:
      case 5567:
      case 5568:
      case 5569:
      case 5570:
      case 5571:
      case 5572:
      case 5573:
      case 5574:
      case 5575:
      case 5576:
      case 5577:
      case 5578:
      case 5579:
      case 5580:
      case 5581:
      case 5584:
      case 5585:
      case 5595:
      case 5596:
      case 5597:
      case 5599:
      case 5600:
      case 5601:
      case 5602:
      case 5603:
      case 5604:
      case 5605:
      case 5606:
      case 5607:
      case 5608:
      case 5609:
      case 5610:
      case 5611:
      case 5612:
      case 5613:
      case 5615:
      case 5617:
      case 5618:
      case 5619:
      case 5620:
      case 5621:
      case 5622:
      case 5623:
      case 5624:
      case 5625:
      case 5626:
      case 5627:
      case 5628:
      case 5629:
      case 5632:
      case 5633:
      case 5634:
      case 5635:
      case 5636:
      case 5637:
      case 5638:
      case 5639:
      case 5640:
      case 5641:
      case 5645:
      case 5646:
      case 5650:
      case 5652:
      case 5653:
      case 5665:
      case 5670:
      case 5671:
      case 5672:
      case 5673:
      case 5674:
      case 5675:
      case 5676:
      case 5677:
      case 5678:
      case 5679:
      case 5680:
      case 5685:
      case 5686:
      case 5687:
      case 5688:
      case 5693:
      case 5694:
      case 5695:
      case 5696:
      case 5701:
      case 5702:
      case 5703:
      case 5704:
      case 5709:
      case 5710:
      case 5711:
      case 5712:
      case 5717:
      case 5718:
      case 5719:
      case 5720:
      case 5725:
      case 5726:
      case 5727:
      case 5728:
      case 5739:
      case 5740:
      case 5742:
      case 5743:
      case 5744:
      case 5745:
      case 5746:
      case 5747:
      case 5748:
      case 5749:
      case 5750:
      case 5751:
      case 5752:
      case 5753:
      case 5754:
      case 5755:
      case 5756:
      case 5757:
      case 5758:
      case 5759:
      case 5760:
      case 5761:
      case 5763:
      case 5765:
      case 5766:
      case 5767:
      case 5768:
      case 5769:
      case 5770:
      case 5771:
      case 5776:
      case 5777:
      case 5778:
      case 5779:
      case 5781:
      case 5943:
      case 6058:
      case 6059:
      case 6060:
      case 6184:
      case 6185:
      case 6186:
      case 6187:
      case 6188:
      case 6308:
      case 6537:
      case 6538:
      case 6539:
      case 6540:
      case 6541:
      case 6542:
      case 6898:
      case 6899:
      case 6927:
      case 6928:
      case 6929:
      case 6930:
      case 6931:
      case 6932:
      case 6933:
      case 6934:
      case 8593:
      case 8602:
      case 8604:
      case 8605:
      case 8606:
      case 8607:
      case 8608:
      case 8609:
      case 8610:
      case 8611:
      case 8612:
      case 8613:
      case 8614:
      case 8615:
      case 8616:
      case 8617:
      case 8618:
      case 8619:
      case 8620:
      case 8621:
      case 8622:
      case 8623:
      case 8624:
      case 8626:
      case 8627:
      case 8628:
      case 8629:
      case 8630:
      case 8631:
      case 8632:
      case 8633:
      case 8634:
      case 8643:
      case 8644:
      case 8645:
      case 8646:
      case 8647:
      case 8648:
      case 8649:
      case 8650:
      case 8663:
      case 8664:
      case 8665:
      case 8666:
      case 8667:
      case 8668:
      case 8669:
      case 8670:
      case 8671:
      case 8672:
      case 8673:
      case 8674:
      case 8675:
      case 8676:
      case 8677:
      case 8678:
      case 8679:
      case 8680:
      case 8681:
      case 8682:
      case 8683:
      case 8684:
      case 8685:
      case 8686:
      case 8687:
      case 8688:
      case 8689:
      case 8690:
      case 8691:
      case 8692:
      case 8701:
      case 8702:
      case 8703:
      case 8704:
      case 8705:
      case 8706:
      case 8707:
      case 8708:
      case 8709:
      case 8710:
      case 8711:
      case 8712:
      case 8713:
      case 8714:
      case 8718:
      case 8719:
      case 8720:
      case 8721:
      case 8722:
      case 8723:
      case 8724:
      case 8725:
      case 8726:
      case 8727:
      case 8728:
      case 8729:
      case 8730:
      case 8731:
      case 8732:
      case 8733:
      case 8734:
      case 8735:
      case 8736:
      case 8737:
      case 8738:
      case 8739:
      case 8740:
      case 8741:
      case 8742:
      case 8743:
      case 8744:
      case 8745:
      case 8746:
      case 8747:
      case 8748:
      case 8749:
      case 8750:
      case 8751:
      case 8752:
      case 8753:
      case 8756:
      case 8757:
      case 8758:
      case 8759:
      case 8760:
      case 8761:
      case 8762:
      case 8763:
      case 8764:
      case 8765:
      case 8766:
      case 8767:
      case 8768:
      case 8769:
      case 8770:
      case 8771:
      case 8772:
      case 8773:
      case 8774:
      case 8775:
      case 8776:
      case 8777:
      case 8780:
      case 8781:
      case 8782:
      case 8784:
      case 8785:
      case 8800:
      case 8801:
      case 8802:
      case 8803:
      case 8804:
      case 8805:
      case 8806:
      case 8807:
      case 8808:
      case 8809:
      case 8810:
      case 8811:
      case 8812:
      case 8813:
      case 8814:
      case 8815:
      case 8816:
      case 8817:
      case 8818:
      case 8819:
      case 8820:
      case 8821:
      case 8822:
      case 8823:
      case 8824:
      case 8844:
      case 8845:
      case 8846:
      case 8847:
      case 8848:
      case 8849:
      case 8854:
      case 8855:
      case 8856:
      case 8857:
      case 8858:
      case 8859:
      case 8860:
      case 8861:
      case 8862:
      case 8863:
      case 8864:
      case 8865:
      case 8866:
      case 8867:
      case 8868:
      case 8869:
      case 8872:
      case 8875:
      case 8876:
      case 8877:
      case 8878:
      case 8879:
      case 8880:
      case 8881:
      case 8882:
      case 8883:
      case 8884:
      case 8885:
      case 8886:
      case 8887:
      case 8888:
      case 8889:
      case 8890:
      case 8891:
      case 8892:
      case 8893:
      case 8894:
      case 8895:
      case 8896:
      case 8897:
      case 8898:
      case 8899:
      case 8900:
      case 8901:
      case 8902:
      case 8903:
      case 8904:
      case 8905:
      case 8906:
      case 8907:
      case 8908:
      case 8909:
      case 8910:
      case 8911:
      case 8912:
      case 8913:
      case 8914:
      case 8915:
      case 8916:
      case 8917:
      case 8918:
      case 8919:
      case 8920:
      case 8921:
      case 8922:
      case 8923:
      case 8924:
      case 8925:
      case 8926:
      case 8927:
      case 8928:
      case 8929:
      case 8930:
      case 8931:
      case 8932:
      case 8933:
      case 8934:
      case 8935:
      case 8936:
      case 8937:
      case 8938:
      case 8939:
      case 8940:
      case 8941:
      case 8942:
      case 8943:
      case 8944:
      case 8945:
      case 8946:
      case 8947:
      case 8948:
      case 8949:
      case 8950:
      case 8951:
      case 8952:
      case 8953:
      case 8954:
      case 8955:
      case 8956:
      case 8957:
      case 8958:
      case 8959:
      case 8960:
      case 8961:
      case 8962:
      case 8963:
      case 8964:
      case 8965:
      case 8966:
      case 8967:
      case 8968:
      case 8969:
      case 8970:
      case 8971:
      case 8972:
      case 8973:
      case 8974:
      case 8975:
      case 8976:
      case 8977:
      case 8978:
      case 8979:
      case 8980:
      case 8981:
      case 8982:
      case 8983:
      case 8984:
      case 8985:
      case 8986:
      case 8987:
      case 8988:
      case 8989:
      case 8990:
      case 8991:
      case 8992:
      case 8993:
      case 8994:
      case 8995:
      case 8996:
      case 8997:
      case 8998:
      case 8999:
      case 9000:
      case 9001:
      case 9002:
      case 9003:
      case 9004:
      case 9005:
      case 9006:
      case 9007:
      case 9008:
      case 9009:
      case 9010:
      case 9011:
      case 9012:
      case 9013:
      case 9014:
      case 9015:
      case 9016:
      case 9017:
      case 9018:
      case 9019:
      case 9020:
      case 9021:
      case 9022:
      case 9023:
      case 9024:
      case 9025:
      case 9026:
      case 9027:
      case 9028:
      case 9029:
      case 9030:
      case 9031:
      case 9032:
      case 9033:
      case 9034:
      case 9035:
      case 9036:
      case 9037:
      case 9038:
      case 9039:
      case 9040:
      case 9041:
      case 9042:
      case 9043:
      case 9044:
      case 9045:
      case 9046:
      case 9047:
      case 9048:
      case 9049:
      case 9050:
      case 9051:
      case 9052:
      case 9053:
      case 9054:
      case 9055:
      case 9056:
      case 9057:
      case 9058:
      case 9059:
      case 9060:
      case 9061:
      case 9062:
      case 9063:
      case 9064:
      case 9065:
      case 9066:
      case 9067:
      case 9068:
      case 9069:
      case 9070:
      case 9071:
      case 9072:
      case 9073:
      case 9074:
      case 9075:
      case 9076:
      case 9077:
      case 9078:
      case 9079:
      case 9080:
      case 9081:
      case 9082:
      case 9083:
      case 9084:
      case 9085:
      case 9086:
      case 9087:
      case 9088:
      case 9089:
      case 9090:
      case 9091:
      case 9092:
      case 9093:
      case 9094:
      case 9095:
      case 9096:
      case 9097:
      case 9098:
      case 9099:
      case 9100:
      case 9101:
      case 9102:
      case 9103:
      case 9104:
      case 9105:
      case 9106:
      case 9107:
      case 9108:
      case 9109:
      case 9110:
      case 9111:
      case 9112:
      case 9113:
      case 9114:
      case 9115:
      case 9116:
      case 9117:
      case 9118:
      case 9119:
      case 9120:
      case 9121:
      case 9122:
      case 9123:
      case 9124:
      case 9125:
      case 9126:
      case 9127:
      case 9128:
      case 9129:
      case 9130:
      case 9131:
      case 9132:
      case 9133:
      case 9134:
      case 9135:
      case 9136:
      case 9137:
      case 9138:
      case 9139:
      case 9140:
      case 9141:
      case 9142:
      case 9143:
      case 9144:
      case 9145:
      case 9146:
      case 9147:
      case 9148:
      case 9149:
      case 9150:
      case 9151:
      case 9152:
      case 9153:
      case 9154:
      case 9155:
      case 9156:
      case 9157:
      case 9158:
      case 9159:
      case 9160:
      case 9161:
      case 9162:
      case 9163:
      case 9164:
      case 9165:
      case 9166:
      case 9167:
      case 9168:
      case 9169:
      case 9170:
      case 9171:
      case 9172:
      case 9173:
      case 9174:
      case 9175:
      case 9176:
      case 9177:
      case 9178:
      case 9179:
      case 9180:
      case 9181:
      case 9182:
      case 9183:
      case 9184:
      case 9185:
      case 9186:
      case 9187:
      case 9188:
      case 9189:
      case 9190:
      case 9191:
      case 9192:
      case 9193:
      case 9194:
      case 9195:
      case 9196:
      case 9197:
      case 9198:
      case 9199:
      case 9200:
      case 9201:
      case 9202:
      case 9203:
      case 9204:
      case 9205:
      case 9206:
      case 9207:
      case 9208:
      case 9209:
      case 9210:
      case 9211:
      case 9212:
      case 9213:
      case 9214:
      case 9215:
      case 9216:
      case 9217:
      case 9218:
      case 9219:
      case 9220:
      case 9221:
      case 9222:
      case 9223:
      case 9224:
      case 9225:
      case 9226:
      case 9227:
      case 9228:
      case 9229:
      case 9230:
      case 9231:
      case 9232:
      case 9233:
      case 9234:
      case 9235:
      case 9236:
      case 9237:
      case 9238:
      case 9239:
      case 9240:
      case 9241:
      case 9242:
      case 9243:
      case 9244:
      case 9245:
      case 9246:
      case 9247:
      case 9248:
      case 9249:
      case 9250:
      case 9251:
      case 9252:
      case 9253:
      case 9254:
      case 9255:
      case 9256:
      case 9257:
      case 9258:
      case 9259:
      case 9260:
      case 9261:
      case 9262:
      case 9264:
      case 9265:
      case 9267:
      case 9269:
      case 9270:
      case 9271:
      case 9272:
      case 9273:
      case 9274:
      case 9275:
      case 9276:
      case 9277:
      case 9278:
      case 9279:
      case 9280:
      case 9281:
      case 9282:
      case 9283:
      case 9284:
      case 9285:
      case 9286:
      case 9287:
      case 9288:
      case 9289:
      case 9290:
      case 9291:
      case 9292:
      case 9293:
      case 9294:
      case 9295:
      case 9296:
      case 9297:
      case 9298:
      case 9299:
      case 9300:
      case 9301:
      case 9302:
      case 9303:
      case 9304:
      case 9305:
      case 9306:
      case 9307:
      case 9308:
      case 9309:
      case 9310:
      case 9311:
      case 9312:
      case 9313:
      case 9314:
      case 9315:
      case 9316:
      case 9317:
      case 9318:
      case 9319:
      case 9320:
      case 9321:
      case 9322:
      case 9323:
      case 9324:
      case 9325:
      case 9326:
      case 9327:
      case 9328:
      case 9329:
      case 9330:
      case 9331:
      case 9332:
      case 9333:
      case 9334:
      case 9335:
      case 9336:
      case 9337:
      case 9338:
      case 9339:
      case 9340:
      case 9341:
      case 9342:
      case 9343:
      case 9344:
      case 9345:
      case 9346:
      case 9347:
      case 9348:
      case 9349:
      case 9350:
      case 9351:
      case 9352:
      case 9353:
      case 9354:
      case 9355:
      case 9356:
      case 9357:
      case 9358:
      case 9359:
      case 9360:
      case 9361:
      case 9362:
      case 9363:
      case 9364:
      case 9365:
      case 9366:
      case 9367:
      case 9368:
      case 9369:
      case 9370:
      case 9371:
      case 9372:
      case 9373:
      case 9374:
      case 9375:
      case 9376:
      case 9377:
      case 9378:
      case 9379:
      case 9380:
      case 9381:
      case 9382:
      case 9383:
      case 9384:
      case 9385:
      case 9386:
      case 9387:
      case 9388:
      case 9389:
      case 9390:
      case 9391:
      case 9392:
      case 9393:
      case 9394:
      case 9395:
      case 9396:
      case 9397:
      case 9398:
      case 9399:
      case 9400:
      case 9401:
      case 9402:
      case 9403:
      case 9404:
      case 9405:
      case 9406:
      case 9407:
      case 9408:
      case 9409:
      case 9410:
      case 9411:
      case 9412:
      case 9413:
      case 9414:
      case 9415:
      case 9416:
      case 9417:
      case 9418:
      case 9419:
      case 9420:
      case 9421:
      case 9422:
      case 9423:
      case 9424:
      case 9425:
      case 9426:
      case 9427:
      case 9428:
      case 9429:
      case 9430:
      case 9431:
      case 9432:
      case 9433:
      case 9434:
      case 9435:
      case 9436:
      case 9437:
      case 9438:
      case 9439:
      case 9440:
      case 9441:
      case 9442:
      case 9443:
      case 9444:
      case 9445:
      case 9446:
      case 9447:
      case 9448:
      case 9449:
      case 9450:
      case 9451:
      case 9452:
      case 9453:
      case 9454:
      case 9455:
      case 9456:
      case 9457:
      case 9458:
      case 9459:
      case 9460:
      case 9461:
      case 9462:
      case 9463:
      case 9464:
      case 9465:
      case 9466:
      case 9467:
      case 9468:
      case 9469:
      case 9470:
      case 9471:
      case 9472:
      case 9473:
      case 9474:
      case 9475:
      case 9476:
      case 9477:
      case 9478:
      case 9479:
      case 9480:
      case 9481:
      case 9482:
      case 9483:
      case 9484:
      case 9485:
      case 9486:
      case 9487:
      case 9488:
      case 9489:
      case 9490:
      case 9491:
      case 9492:
      case 9493:
      case 9494:
      case 9495:
      case 9496:
      case 9497:
      case 9498:
      case 9499:
      case 9500:
      case 9501:
      case 9502:
      case 9503:
      case 9504:
      case 9505:
      case 9506:
      case 9507:
      case 9508:
      case 9509:
      case 9510:
      case 9511:
      case 9512:
      case 9513:
      case 9514:
      case 9515:
      case 9516:
      case 9517:
      case 9518:
      case 9519:
      case 9520:
      case 9521:
      case 9522:
      case 9523:
      case 9524:
      case 9525:
      case 9526:
      case 9527:
      case 9528:
      case 9529:
      case 9530:
      case 9531:
      case 9532:
      case 9533:
      case 9534:
      case 9535:
      case 9536:
      case 9537:
      case 9538:
      case 9539:
      case 9540:
      case 9541:
      case 9542:
      case 9543:
      case 9544:
      case 9545:
      case 9546:
      case 9547:
      case 9548:
      case 9549:
      case 9550:
      case 9551:
      case 9552:
      case 9553:
      case 9554:
      case 9555:
      case 9556:
      case 9557:
      case 9558:
      case 9559:
      case 9560:
      case 9561:
      case 9562:
      case 9563:
      case 9564:
      case 9565:
      case 9566:
      case 9567:
      case 9568:
      case 9569:
      case 9570:
      case 9571:
      case 9572:
      case 9573:
      case 9574:
      case 9575:
      case 9576:
      case 9577:
      case 9578:
      case 9579:
      case 9580:
      case 9581:
      case 9582:
      case 9583:
      case 9584:
      case 9585:
      case 9586:
      case 9587:
      case 9588:
      case 9589:
      case 9590:
      case 9591:
      case 9592:
      case 9593:
      case 9594:
      case 9595:
      case 9596:
      case 9597:
      case 9598:
      case 9599:
      case 9600:
      case 9601:
      case 9602:
      case 9603:
      case 9604:
      case 9605:
      case 9606:
      case 9607:
      case 9608:
      case 9609:
      case 9610:
      case 9611:
      case 9612:
      case 9613:
      case 9614:
      case 9615:
      case 9616:
      case 9617:
      case 9618:
      case 9619:
      case 9620:
      case 9621:
      case 9622:
      case 9623:
      case 9624:
      case 9625:
      case 9626:
      case 9627:
      case 9628:
      case 9629:
      case 9630:
      case 9631:
      case 9632:
      case 9633:
      case 9634:
      case 9635:
      case 9636:
      case 9637:
      case 9638:
      case 9639:
      case 9640:
      case 9641:
      case 9642:
      case 9643:
      case 9644:
      case 9645:
      case 9646:
      case 9647:
      case 9648:
      case 9649:
      case 9650:
      case 9651:
      case 9652:
      case 9653:
      case 9654:
      case 9655:
      case 9656:
      case 9657:
      case 9658:
      case 9659:
      case 9660:
      case 9661:
      case 9662:
      case 9663:
      case 9664:
      case 9665:
      case 9666:
      case 9667:
      case 9668:
      case 9669:
      case 9670:
      case 9671:
      case 9672:
      case 9673:
      case 9674:
      case 9675:
      case 9676:
      case 9677:
      case 9678:
      case 9679:
      case 9680:
      case 9681:
      case 9682:
      case 9683:
      case 9684:
      case 9685:
      case 9686:
      case 9687:
      case 9688:
      case 9689:
      case 9690:
      case 9691:
      case 9692:
      case 9693:
      case 9694:
      case 9695:
      case 9696:
      case 9697:
      case 9698:
      case 9699:
      case 9700:
      case 9701:
      case 9702:
      case 9703:
      case 9704:
      case 9705:
      case 9706:
      case 9707:
      case 9708:
      case 9709:
      case 9710:
      case 9711:
      case 9712:
      case 9713:
      case 9714:
      case 9715:
      case 9716:
      case 9717:
      case 9718:
      case 9719:
      case 9720:
      case 9721:
      case 9722:
      case 9723:
      case 9724:
      case 9725:
      case 9726:
      case 9727:
      case 9728:
      case 9729:
      case 9730:
      case 9731:
      case 9732:
      case 9733:
      case 9734:
      case 9735:
      case 9736:
      case 9801:
      case 9802:
      case 9803:
      case 9804:
      case 9805:
      case 9806:
      case 9807:
      case 9808:
      case 9809:
      case 9810:
      case 9811:
      case 9812:
      case 9813:
      case 9814:
      case 9815:
      case 9816:
      case 9817:
      case 9818:
      case 9819:
      case 9820:
      case 9821:
      case 9822:
      case 9823:
      case 9824:
      case 9825:
      case 9826:
      case 9827:
      case 9828:
      case 9829:
      case 9830:
      case 9831:
      case 9832:
      case 9833:
      case 9834:
      case 9835:
      case 9836:
      case 9837:
      case 9838:
      case 9839:
      case 9840:
      case 9841:
      case 9842:
      case 9843:
      case 9844:
      case 9845:
      case 9846:
      case 9847:
      case 9848:
      case 9849:
      case 9850:
      case 9851:
      case 9852:
      case 9853:
      case 9854:
      case 9855:
      case 9856:
      case 9857:
      case 9858:
      case 9859:
      case 9860:
      case 9861:
      case 9862:
      case 9863:
      case 9864:
      case 9865:
      case 9866:
      case 9867:
      case 9868:
      case 9869:
      case 9870:
      case 9871:
      case 9872:
      case 9873:
      case 9874:
      case 9875:
      case 9876:
      case 9877:
      case 9878:
      case 9879:
      case 9880:
      case 9881:
      case 9882:
      case 9883:
      case 9884:
      case 9885:
      case 9886:
      case 9887:
      case 9888:
      case 9889:
      case 9890:
      case 9891:
      case 9892:
      case 9893:
      case 9894:
      case 9895:
      case 9896:
      case 9897:
      case 9898:
      case 9899:
      case 9900:
      case 9901:
      case 9902:
      case 9903:
      case 9904:
      case 9905:
      case 9906:
      case 9907:
      case 9908:
      case 9909:
      case 9910:
      case 9911:
      case 9912:
      case 9913:
      case 9914:
      case 9915:
      case 9916:
      case 9917:
      case 9918:
      case 9919:
      case 9920:
      case 9921:
      case 9922:
      case 9923:
      case 9924:
      case 9925:
      case 9926:
      case 9927:
      case 9928:
      case 9929:
      case 9930:
      case 9931:
      case 9932:
      case 9933:
      case 9934:
      case 9935:
      case 9960:
      case 9961:
      case 9962:
      case 9963:
      case 9964:
      case 9965:
      case 9966:
      case 9967:
      case 9968:
      case 9969:
      case 9970:
      case 9971:
      case 9972:
      case 9973:
      case 9974:
      case 9975:
      case 9976:
      case 9977:
      case 9978:
      case 9979:
      case 9980:
      case 9981:
      case 9982:
      case 9983:
      case 9984:
      case 9985:
      case 9986:
      case 9987:
      case 9988:
      case 9989:
      case 9990:
      case 9991:
      case 9992:
      case 9993:
      case 9994:
      case 9995:
      case 9996:
      case 9997:
      case 9998:
      case 9999:
      case 10000:
      case 10001:
      case 10002:
      case 10003:
      case 10004:
      case 10005:
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
      case 10012:
      case 10013:
      case 10014:
      case 10063:
      case 10064:
      case 10065:
      case 10066:
      case 10067:
      case 10068:
      case 10069:
      case 10070:
      case 10071:
      case 10072:
      case 10073:
      case 10074:
      case 10075:
      case 10076:
      case 10077:
      case 10078:
      case 10079:
      case 10080:
      case 10081:
      case 10082:
      case 10083:
      case 10084:
      case 10085:
      case 10086:
      case 10087:
      case 10088:
      case 10089:
      case 10090:
      case 10091:
      case 10092:
      case 10093:
      case 10094:
      case 10095:
      case 10096:
      case 10097:
      case 10098:
      case 10099:
      case 10100:
      case 10101:
      case 10102:
      case 10103:
      case 10104:
      case 10105:
      case 10106:
      case 10169:
      case 10170:
      case 11273:
      case 11593:
      case 11599:
      case 11600:
      case 11607:
      case 11639:
      case 11645:
        char v9 = a1;
        int v10 = 8;
        goto LABEL_416;
      case 30:
        unint64_t v7 = 2;
        IntrinsicArgAttributeSet = getIntrinsicArgAttributeSet(a1, 2);
LABEL_19:
        v457[0] = 2;
        v458 = IntrinsicArgAttributeSet;
        unsigned int v15 = a1;
        int v16 = 4;
        goto LABEL_387;
      case 31:
      case 45:
      case 120:
      case 128:
      case 129:
        return result;
      case 32:
        int v17 = a1;
        int v18 = 3;
        goto LABEL_244;
      case 36:
        uint64_t v19 = a1;
        int v20 = 3;
        goto LABEL_386;
      case 37:
        uint64_t v21 = getIntrinsicArgAttributeSet(a1, 4);
        v457[0] = 2;
        v458 = v21;
        unint64_t v7 = 3;
        int v22 = getIntrinsicArgAttributeSet(a1, 3);
        goto LABEL_248;
      case 44:
      case 6189:
        uint64_t v23 = a1;
        int v24 = 5;
        goto LABEL_26;
      case 48:
        int v25 = a1;
        int v26 = 3;
        goto LABEL_34;
      case 68:
      case 5499:
      case 5500:
      case 5501:
      case 5502:
        uint64_t v23 = a1;
        int v24 = 0;
LABEL_26:
        uint64_t v27 = getIntrinsicArgAttributeSet(v23, v24);
        int v28 = 1;
        goto LABEL_265;
      case 70:
        char v9 = a1;
        int v10 = 12;
        goto LABEL_416;
      case 79:
      case 135:
      case 136:
      case 177:
      case 267:
      case 268:
      case 306:
      case 307:
      case 461:
      case 982:
      case 1009:
      case 1056:
      case 1166:
      case 1202:
      case 1252:
      case 1309:
      case 1349:
      case 1352:
      case 1383:
      case 1385:
      case 1390:
      case 1424:
      case 1430:
      case 1432:
      case 1455:
      case 1457:
      case 1459:
      case 1462:
      case 1463:
      case 1465:
      case 1468:
      case 1470:
      case 1472:
      case 1474:
      case 1484:
      case 1490:
      case 1491:
      case 1494:
      case 1605:
      case 1607:
      case 1643:
      case 1645:
      case 1648:
      case 1651:
      case 1665:
      case 1667:
      case 1674:
      case 1725:
      case 1740:
      case 2443:
      case 3290:
      case 3402:
      case 3435:
      case 3436:
      case 3623:
      case 3681:
      case 3736:
      case 3738:
      case 3739:
      case 3740:
      case 3741:
      case 3742:
      case 3744:
      case 3745:
      case 3746:
      case 3747:
      case 3749:
      case 3767:
      case 3768:
      case 3769:
      case 3770:
      case 3774:
      case 3775:
      case 3776:
      case 3777:
      case 3838:
      case 3839:
      case 3840:
      case 3841:
      case 3842:
      case 3844:
      case 3845:
      case 3846:
      case 3847:
      case 3848:
      case 3899:
      case 3916:
      case 3926:
      case 3941:
      case 3942:
      case 3943:
      case 3951:
      case 3964:
      case 3965:
      case 3966:
      case 3967:
      case 3968:
      case 3970:
      case 3971:
      case 3972:
      case 3973:
      case 3974:
      case 4012:
      case 4013:
      case 4016:
      case 4017:
      case 4206:
      case 4207:
      case 4540:
      case 4541:
      case 4562:
      case 4563:
      case 4572:
      case 4573:
      case 4826:
      case 4827:
      case 4846:
      case 4847:
      case 4870:
      case 4871:
      case 7536:
      case 7543:
      case 7635:
      case 7645:
      case 7690:
      case 7692:
      case 10240:
      case 10241:
      case 10247:
      case 10316:
      case 10381:
      case 10382:
      case 10395:
      case 10396:
      case 10397:
      case 10406:
      case 10407:
      case 10408:
      case 10409:
      case 10410:
      case 10411:
      case 10412:
      case 10413:
      case 10464:
      case 10465:
      case 10467:
      case 10468:
      case 10687:
      case 10688:
      case 10690:
      case 10691:
      case 10759:
      case 10760:
      case 10761:
      case 10762:
      case 10763:
      case 10764:
      case 10893:
      case 10894:
      case 10968:
      case 10969:
      case 10974:
      case 10975:
      case 11097:
      case 11100:
      case 11101:
      case 11103:
      case 11109:
      case 11110:
      case 11115:
      case 11116:
      case 11187:
      case 11199:
      case 11246:
      case 11247:
      case 11248:
      case 11280:
      case 11285:
      case 11286:
      case 11323:
      case 11324:
      case 11393:
      case 11394:
      case 11395:
      case 11396:
      case 11405:
      case 11406:
      case 11418:
      case 11419:
      case 11420:
      case 11421:
      case 11422:
      case 11423:
      case 11424:
      case 11507:
      case 11508:
      case 11509:
      case 11510:
      case 11511:
      case 11512:
        uint64_t v29 = getIntrinsicArgAttributeSet(a1, 0);
        int v30 = 3;
        goto LABEL_315;
      case 121:
      case 122:
        unsigned int v31 = a1;
        int v32 = 6;
        goto LABEL_74;
      case 123:
      case 245:
      case 246:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1406:
      case 1410:
      case 1411:
      case 1412:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1440:
      case 1444:
      case 1445:
      case 1446:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1635:
      case 1639:
      case 1640:
      case 1641:
      case 3289:
      case 3814:
      case 3816:
      case 3934:
      case 3936:
      case 7386:
      case 7387:
      case 11426:
        uint64_t v33 = getIntrinsicArgAttributeSet(a1, 0);
        int v34 = 2;
        goto LABEL_221;
      case 125:
        uint64_t v35 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v35;
        uint64_t v36 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v36;
        uint64_t v37 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v37;
        int v38 = getIntrinsicArgAttributeSet(a1, 0);
        int v39 = 5;
        goto LABEL_208;
      case 126:
      case 130:
        char v9 = a1;
        int v10 = 13;
        goto LABEL_416;
      case 137:
      case 366:
        int v25 = a1;
        int v26 = 5;
LABEL_34:
        uint64_t v40 = getIntrinsicArgAttributeSet(v25, v26);
        v457[0] = 1;
        v458 = v40;
        unint64_t v7 = 2;
        goto LABEL_250;
      case 138:
      case 185:
      case 402:
      case 4048:
      case 4049:
      case 4054:
      case 4055:
      case 4060:
      case 4061:
      case 4068:
      case 4069:
      case 4076:
      case 4077:
      case 4084:
      case 4085:
        int v41 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v41;
        unsigned int v15 = a1;
        int v16 = 14;
        goto LABEL_387;
      case 139:
        uint64_t v42 = getIntrinsicArgAttributeSet(a1, 1);
        v457[0] = 0;
        v458 = v42;
        uint64_t v13 = a1;
        int v14 = 15;
        goto LABEL_420;
      case 147:
      case 261:
      case 1038:
      case 1039:
      case 1040:
      case 1042:
      case 1291:
      case 3121:
      case 3140:
      case 3141:
      case 3226:
      case 3683:
      case 3938:
      case 7691:
      case 7693:
      case 7699:
        unsigned int v31 = a1;
        int v32 = 0;
        goto LABEL_74;
      case 150:
      case 5494:
      case 5495:
      case 5496:
      case 5497:
      case 5498:
      case 5503:
      case 5504:
      case 5505:
      case 5507:
      case 8716:
      case 8717:
        char v9 = a1;
        int v10 = 11;
        goto LABEL_416;
      case 152:
        uint64_t v43 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v43;
        uint64_t v44 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 3;
        int v459 = 3;
        v460 = v44;
        uint64_t v45 = a1;
        int v46 = 10;
        goto LABEL_392;
      case 156:
      case 157:
      case 5080:
      case 5081:
      case 7890:
      case 7903:
      case 10225:
      case 10226:
      case 10233:
      case 10234:
      case 10235:
      case 11168:
      case 11169:
      case 11170:
      case 11171:
        uint64_t v47 = getIntrinsicArgAttributeSet(a1, 0);
        int v48 = 3;
        goto LABEL_419;
      case 159:
        __int16 v49 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v49;
        unint64_t v7 = 4;
        uint64_t v50 = getIntrinsicArgAttributeSet(a1, 4);
        int v459 = 2;
        v460 = v50;
        uint64_t v51 = getIntrinsicArgAttributeSet(a1, 4);
        int v461 = 3;
        v462 = v51;
        int v52 = a1;
        int v53 = 16;
        goto LABEL_234;
      case 165:
        int v54 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v54;
        uint64_t v55 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 3;
        int v459 = 3;
        goto LABEL_256;
      case 166:
      case 170:
      case 171:
        int v56 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v56;
        int v57 = getIntrinsicArgAttributeSet(a1, 5);
        int v459 = 2;
        v460 = v57;
        int v58 = a1;
        int v59 = 16;
        goto LABEL_411;
      case 167:
      case 2354:
      case 2355:
        char v9 = a1;
        int v10 = 17;
        goto LABEL_416;
      case 169:
        char v9 = a1;
        int v10 = 15;
        goto LABEL_416;
      case 181:
      case 182:
      case 273:
      case 292:
      case 295:
      case 296:
        char v9 = a1;
        int v10 = 18;
        goto LABEL_416;
      case 186:
      case 8058:
      case 8060:
      case 8062:
      case 8064:
      case 8066:
      case 8068:
      case 8070:
      case 8255:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 1;
        goto LABEL_338;
      case 187:
        uint64_t v62 = a1;
        int v63 = 0;
        goto LABEL_300;
      case 188:
        uint64_t v64 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v64;
        uint64_t v65 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v65;
        int v58 = a1;
        int v59 = 2;
        goto LABEL_411;
      case 189:
        uint64_t v66 = a1;
        int v67 = 0;
        goto LABEL_303;
      case 190:
      case 4044:
      case 4045:
      case 4046:
      case 4047:
      case 4050:
      case 4051:
      case 4052:
      case 4053:
      case 4056:
      case 4057:
      case 4058:
      case 4059:
      case 4064:
      case 4065:
      case 4066:
      case 4067:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4080:
      case 4081:
      case 4082:
      case 4083:
        uint64_t v68 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v68;
        unint64_t v69 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 3;
        int v459 = 3;
        v460 = v69;
        uint64_t v45 = a1;
        int v46 = 14;
        goto LABEL_392;
      case 191:
        unint64_t v7 = 5;
        uint64_t v70 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v70;
        uint64_t v71 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v71;
        uint64_t v72 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v72;
        uint64_t v73 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 5;
        v464 = v73;
        uint64_t v74 = a1;
        int v75 = 2;
        goto LABEL_214;
      case 192:
        uint64_t v76 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 2;
        v458 = v76;
        unint64_t v77 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v77;
        __int16 v78 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 5;
        int v461 = 5;
        v462 = v78;
        long long v79 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 6;
        v464 = v79;
        uint64_t v74 = a1;
        int v75 = 14;
        goto LABEL_214;
      case 193:
      case 2340:
        long long v80 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
        v458 = v80;
        uint64_t v81 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v81;
        v82 = getIntrinsicArgAttributeSet(a1, 0);
        int v83 = 5;
        goto LABEL_205;
      case 194:
      case 2337:
        BOOL v84 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v84;
        v85 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        goto LABEL_179;
      case 197:
        v86 = getIntrinsicArgAttributeSet(a1, 8);
        v457[0] = 1;
        v458 = v86;
        __int16 v87 = a1;
        int v88 = 9;
        goto LABEL_60;
      case 198:
      case 201:
        uint64_t v89 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v89;
        uint64_t v90 = getIntrinsicArgAttributeSet(a1, 3);
        int v459 = 2;
        v460 = v90;
        char v91 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 4;
        int v461 = 4;
        v462 = v91;
        int v52 = a1;
        int v53 = 22;
        goto LABEL_234;
      case 199:
        uint64_t v92 = getIntrinsicArgAttributeSet(a1, 8);
        v457[0] = 1;
        v458 = v92;
        uint64_t v93 = getIntrinsicArgAttributeSet(a1, 9);
        int v459 = 2;
        v460 = v93;
        uint64_t v94 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v94;
        uint64_t v95 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v95;
        unsigned int v96 = a1;
        int v97 = 21;
        goto LABEL_164;
      case 200:
        uint64_t v98 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v98;
        __int16 v87 = a1;
        int v88 = 3;
LABEL_60:
        uint64_t v99 = getIntrinsicArgAttributeSet(v87, v88);
        int v459 = 2;
        v460 = v99;
        __n128 v100 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 4;
        int v461 = 4;
        v462 = v100;
        int v52 = a1;
        int v53 = 21;
        goto LABEL_234;
      case 202:
        unint64_t v101 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v101;
        unsigned int v102 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v102;
        int v58 = a1;
        int v59 = 23;
        goto LABEL_411;
      case 203:
        unsigned int v103 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v103;
        uint64_t v104 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v104;
        int v58 = a1;
        int v59 = 24;
        goto LABEL_411;
      case 204:
        uint64_t v105 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v105;
        unsigned int v106 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v106;
        uint64_t v107 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 4;
        int v461 = 4;
        v462 = v107;
        int v52 = a1;
        int v53 = 23;
        goto LABEL_234;
      case 240:
      case 2338:
        unint64_t v108 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v108;
        int v109 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v109;
        v82 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        goto LABEL_206;
      case 244:
        v110 = getIntrinsicArgAttributeSet(a1, 3);
        v457[0] = 1;
        v458 = v110;
        uint64_t v111 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v111;
        v112 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v112;
        uint64_t v113 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v113;
        unsigned int v96 = a1;
        int v97 = 25;
        goto LABEL_164;
      case 247:
      case 253:
      case 255:
      case 343:
      case 345:
      case 1308:
      case 1348:
      case 1461:
      case 1467:
      case 1471:
      case 1473:
      case 1492:
      case 1493:
      case 1647:
      case 1650:
      case 1670:
      case 1671:
      case 1776:
      case 1777:
      case 1779:
      case 1780:
      case 3069:
      case 3075:
      case 3099:
      case 3137:
      case 3138:
      case 3212:
      case 3215:
      case 3217:
      case 3219:
      case 3221:
      case 3223:
      case 3225:
      case 3227:
      case 3228:
      case 3234:
      case 3236:
      case 3237:
      case 3238:
      case 3243:
      case 3245:
      case 3246:
      case 3247:
      case 3248:
      case 3249:
      case 3250:
      case 3251:
      case 3252:
      case 3263:
      case 3264:
      case 3266:
      case 3272:
      case 3275:
      case 3277:
      case 3278:
      case 3280:
      case 3283:
      case 3291:
      case 3306:
      case 3308:
      case 3310:
      case 3314:
      case 3570:
      case 3682:
      case 3737:
      case 3743:
      case 3748:
      case 3750:
      case 3751:
      case 3766:
      case 3771:
      case 3772:
      case 3773:
      case 3778:
      case 3779:
      case 3780:
      case 3781:
      case 3782:
      case 3807:
      case 3837:
      case 3843:
      case 3849:
      case 3850:
      case 3867:
      case 3895:
      case 3897:
      case 3931:
      case 3932:
      case 3939:
      case 3948:
      case 3959:
      case 3960:
      case 3962:
      case 3963:
      case 3969:
      case 7434:
      case 7436:
      case 7491:
      case 7492:
      case 7493:
      case 7494:
      case 7495:
      case 7496:
      case 7531:
      case 7893:
      case 7968:
      case 7969:
      case 10118:
      case 10222:
      case 10271:
      case 10272:
      case 10398:
      case 10399:
      case 10400:
      case 10401:
      case 10402:
      case 10403:
      case 10404:
      case 10405:
      case 10416:
      case 10417:
      case 10418:
      case 10419:
      case 10420:
      case 10421:
      case 10535:
      case 10536:
      case 10569:
      case 10570:
      case 10572:
      case 10573:
      case 10695:
      case 10696:
      case 10698:
      case 10699:
      case 10703:
      case 10704:
      case 10706:
      case 10707:
      case 10748:
      case 10749:
      case 10750:
      case 10890:
      case 10891:
      case 10892:
      case 10895:
      case 10898:
      case 10899:
      case 10900:
      case 10901:
      case 10902:
      case 10903:
      case 10904:
      case 10905:
      case 10970:
      case 10971:
      case 10972:
      case 10979:
      case 10984:
      case 10985:
      case 10995:
      case 10996:
      case 10999:
      case 11000:
      case 11102:
      case 11105:
      case 11106:
      case 11107:
      case 11108:
      case 11111:
      case 11112:
      case 11113:
      case 11114:
      case 11198:
      case 11309:
      case 11403:
      case 11404:
      case 11460:
      case 11461:
      case 11505:
      case 11506:
        uint64_t v29 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        goto LABEL_316;
      case 250:
      case 3045:
      case 5149:
      case 5150:
      case 5151:
      case 5152:
      case 5155:
      case 5186:
      case 5187:
      case 5188:
      case 5189:
      case 5215:
      case 5216:
      case 5217:
      case 5218:
      case 5231:
      case 5232:
      case 5233:
      case 5234:
      case 5244:
      case 5245:
      case 5246:
      case 5247:
      case 5257:
      case 5258:
      case 5259:
      case 5260:
      case 5261:
      case 5262:
      case 5263:
      case 5264:
      case 5273:
      case 5274:
      case 5275:
      case 5276:
      case 5277:
      case 5278:
      case 5279:
      case 5280:
      case 5490:
      case 5491:
      case 5492:
      case 5493:
      case 5534:
      case 5535:
      case 5536:
      case 5537:
      case 5538:
      case 5539:
      case 5540:
      case 5541:
      case 5554:
      case 5555:
      case 5556:
      case 5557:
      case 5558:
      case 5559:
      case 5560:
      case 5561:
      case 5614:
      case 5616:
      case 5654:
      case 5655:
      case 5656:
      case 5657:
      case 5658:
      case 5659:
      case 5660:
      case 5661:
      case 5662:
      case 5663:
      case 5664:
      case 5689:
      case 5690:
      case 5691:
      case 5692:
      case 5697:
      case 5698:
      case 5699:
      case 5700:
      case 5705:
      case 5706:
      case 5707:
      case 5708:
      case 5713:
      case 5714:
      case 5715:
      case 5716:
      case 5721:
      case 5722:
      case 5723:
      case 5724:
      case 5729:
      case 5730:
      case 5731:
      case 5732:
      case 5772:
      case 5773:
      case 5774:
      case 5775:
      case 5782:
      case 8594:
      case 8625:
      case 8635:
      case 8636:
      case 8637:
      case 8699:
      case 8700:
        uint64_t v114 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v114;
        unsigned int v15 = a1;
        int v16 = 8;
        goto LABEL_387;
      case 252:
        int v115 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v115;
        uint64_t v116 = getIntrinsicArgAttributeSet(a1, 0);
        int v117 = 4;
        goto LABEL_382;
      case 258:
      case 363:
      case 478:
      case 1214:
      case 1236:
      case 1969:
      case 2728:
      case 2729:
      case 2730:
      case 2731:
      case 2732:
      case 2733:
      case 2963:
      case 3381:
      case 3384:
      case 3387:
      case 3390:
      case 3393:
      case 3396:
      case 10124:
      case 10156:
      case 10157:
      case 10162:
      case 10165:
      case 10252:
      case 11388:
        char v9 = a1;
        int v10 = 19;
        goto LABEL_416;
      case 259:
      case 11303:
        char v9 = a1;
        int v10 = 26;
        goto LABEL_416;
      case 271:
      case 272:
        char v9 = a1;
        int v10 = 27;
        goto LABEL_416;
      case 279:
      case 280:
      case 310:
      case 311:
      case 321:
      case 1794:
      case 8022:
      case 8023:
      case 8024:
      case 8025:
      case 8088:
      case 8089:
        uint64_t v6 = getIntrinsicArgAttributeSet(a1, 0);
        int v118 = 3;
        goto LABEL_174;
      case 284:
        unsigned int v31 = a1;
        int v32 = 10;
LABEL_74:
        uint64_t v29 = getIntrinsicArgAttributeSet(v31, v32);
        int v30 = 1;
        goto LABEL_315;
      case 298:
        uint64_t v119 = getIntrinsicArgAttributeSet(a1, 11);
        v457[0] = 0;
        v458 = v119;
        v85 = getIntrinsicArgAttributeSet(a1, 11);
        int v120 = 1;
        goto LABEL_178;
      case 299:
        char v9 = a1;
        int v10 = 28;
        goto LABEL_416;
      case 305:
        unsigned int v121 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v121;
        uint64_t v13 = a1;
        int v14 = 28;
        goto LABEL_420;
      case 413:
      case 6104:
      case 6105:
      case 6106:
        char v9 = a1;
        int v10 = 29;
        goto LABEL_416;
      case 414:
        int v122 = getIntrinsicArgAttributeSet(a1, 3);
        v457[0] = 1;
        v458 = v122;
        uint64_t v13 = a1;
        int v14 = 30;
        goto LABEL_420;
      case 415:
        unint64_t v123 = getIntrinsicArgAttributeSet(a1, 3);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v123;
        unsigned int v15 = a1;
        int v16 = 30;
        goto LABEL_387;
      case 417:
        unint64_t v124 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v124;
        uint64_t v13 = a1;
        int v14 = 31;
        goto LABEL_420;
      case 455:
      case 456:
      case 457:
      case 458:
      case 8639:
      case 8640:
      case 8641:
      case 8642:
      case 8754:
      case 8787:
      case 8788:
      case 8789:
      case 8790:
      case 8791:
      case 8792:
      case 8793:
      case 8794:
      case 8795:
      case 8796:
      case 8797:
      case 8798:
        uint64_t v27 = getIntrinsicArgAttributeSet(a1, 0);
        int v28 = 4;
        goto LABEL_265;
      case 462:
      case 463:
      case 474:
      case 476:
      case 477:
      case 479:
      case 480:
      case 952:
      case 953:
      case 954:
      case 955:
        char v9 = a1;
        int v10 = 32;
        goto LABEL_416;
      case 469:
      case 472:
      case 473:
      case 665:
      case 666:
      case 668:
      case 724:
      case 762:
      case 943:
      case 944:
      case 1767:
      case 1768:
      case 1769:
      case 2444:
      case 2445:
      case 2454:
      case 7559:
      case 7560:
      case 7574:
      case 7578:
      case 7604:
      case 7605:
      case 7606:
      case 7607:
      case 7608:
      case 7609:
      case 7610:
      case 7611:
      case 7612:
      case 7668:
      case 7669:
      case 7670:
      case 7671:
      case 7672:
      case 8099:
      case 8101:
      case 8108:
      case 8110:
      case 8409:
      case 8411:
      case 8451:
      case 8453:
      case 8473:
      case 8511:
      case 8513:
      case 8529:
      case 8531:
        char v9 = a1;
        int v10 = 33;
        goto LABEL_416;
      case 481:
      case 669:
      case 670:
      case 951:
        uint64_t v125 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v125;
        uint64_t v13 = a1;
        int v14 = 14;
        goto LABEL_420;
      case 599:
      case 602:
      case 1501:
      case 1512:
      case 3383:
      case 3386:
      case 3389:
      case 3392:
      case 3395:
      case 3398:
        BOOL v126 = a1;
        int v127 = 5;
        goto LABEL_102;
      case 600:
      case 603:
      case 604:
      case 1509:
      case 3382:
      case 3385:
      case 3388:
      case 3391:
      case 3394:
      case 3397:
      case 3875:
      case 3878:
      case 3881:
      case 3884:
      case 3887:
        v128 = a1;
        int v129 = 5;
        goto LABEL_253;
      case 601:
      case 605:
      case 606:
      case 1510:
      case 3874:
      case 3877:
      case 3880:
      case 3883:
      case 3886:
        v130 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
        goto LABEL_260;
      case 607:
      case 1511:
        v130 = getIntrinsicArgAttributeSet(a1, 5);
        int v131 = 6;
        goto LABEL_259;
      case 664:
        v132 = getIntrinsicArgAttributeSet(a1, 12);
        v457[0] = 1;
        v458 = v132;
        v133 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v133;
        v134 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v134;
        v135 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v135;
        v136 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 5;
        v466 = v136;
        v137 = a1;
        int v138 = 34;
        goto LABEL_231;
      case 681:
      case 682:
      case 683:
      case 684:
      case 736:
      case 737:
      case 738:
      case 739:
      case 811:
      case 812:
      case 813:
      case 814:
      case 843:
      case 844:
      case 909:
      case 910:
      case 911:
      case 912:
      case 927:
      case 928:
      case 933:
      case 934:
      case 935:
      case 936:
      case 937:
      case 938:
      case 941:
      case 942:
      case 945:
      case 7779:
      case 7852:
        v139 = getIntrinsicArgAttributeSet(a1, 0);
        int v140 = 1;
        goto LABEL_375;
      case 689:
      case 695:
      case 702:
      case 709:
      case 716:
      case 723:
      case 750:
      case 752:
      case 764:
      case 772:
      case 780:
      case 788:
      case 796:
      case 804:
      case 834:
      case 839:
      case 846:
      case 849:
      case 851:
      case 862:
      case 870:
      case 878:
      case 886:
      case 894:
      case 902:
      case 913:
      case 920:
      case 930:
        v139 = getIntrinsicArgAttributeSet(a1, 0);
        int v140 = 5;
        goto LABEL_375;
      case 690:
      case 696:
      case 703:
      case 710:
      case 717:
      case 751:
      case 753:
      case 765:
      case 773:
      case 781:
      case 789:
      case 797:
      case 805:
      case 835:
      case 840:
      case 845:
      case 847:
      case 848:
      case 850:
      case 852:
      case 863:
      case 871:
      case 879:
      case 887:
      case 895:
      case 903:
      case 914:
      case 921:
      case 929:
      case 931:
      case 932:
        v141 = a1;
        int v142 = 0;
        goto LABEL_364;
      case 701:
      case 715:
      case 763:
      case 771:
      case 779:
      case 787:
      case 795:
      case 803:
      case 838:
      case 861:
      case 869:
      case 877:
      case 885:
      case 893:
      case 901:
      case 919:
        v143 = a1;
        int v144 = 0;
        goto LABEL_348;
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 742:
      case 745:
      case 748:
      case 749:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
        v145 = a1;
        int v146 = 0;
        goto LABEL_344;
      case 950:
      case 1504:
      case 1515:
      case 2802:
      case 2803:
      case 2804:
      case 2805:
      case 2806:
      case 2807:
      case 3873:
      case 3876:
      case 3879:
      case 3882:
      case 3885:
      case 4062:
      case 4063:
      case 4070:
      case 4071:
      case 4078:
      case 4079:
      case 4086:
      case 4087:
      case 4574:
      case 4575:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4581:
      case 4884:
      case 4885:
      case 4886:
      case 4887:
      case 4888:
      case 4889:
      case 4890:
      case 4891:
      case 4892:
      case 4893:
      case 4894:
      case 4895:
      case 4896:
      case 4897:
      case 4898:
      case 4899:
      case 4900:
      case 4901:
      case 7875:
      case 10160:
      case 10161:
        char v9 = a1;
        int v10 = 20;
        goto LABEL_416;
      case 989:
      case 991:
      case 993:
      case 1010:
      case 1019:
      case 1067:
      case 1112:
      case 1150:
      case 1153:
      case 1155:
      case 1157:
      case 1160:
      case 1162:
      case 1247:
      case 1249:
      case 1342:
      case 1343:
      case 1372:
      case 1374:
      case 1376:
      case 1378:
      case 1414:
      case 1417:
      case 1419:
      case 1422:
      case 1449:
      case 1451:
      case 1453:
      case 1522:
      case 1571:
      case 1572:
      case 1594:
      case 1596:
      case 1598:
      case 1600:
      case 1669:
      case 1778:
      case 1781:
      case 1788:
      case 1789:
      case 3952:
      case 4014:
      case 4015:
      case 4018:
      case 4019:
      case 4560:
      case 4561:
      case 4570:
      case 4571:
      case 4828:
      case 4829:
      case 4848:
      case 4849:
      case 4872:
      case 4873:
      case 7978:
      case 7986:
      case 8248:
      case 10414:
      case 10415:
      case 10474:
      case 10476:
      case 10479:
      case 10482:
      case 10485:
      case 10488:
      case 10489:
      case 10492:
      case 10495:
      case 10498:
      case 10503:
      case 10506:
      case 10509:
      case 10512:
      case 10513:
      case 10516:
      case 10519:
      case 10522:
      case 10527:
      case 10528:
      case 10530:
      case 10531:
      case 10563:
      case 10566:
      case 10747:
      case 10751:
      case 10752:
      case 10754:
      case 10755:
      case 10832:
      case 10833:
      case 10834:
      case 10835:
      case 10836:
      case 10837:
      case 10846:
      case 10847:
      case 10858:
      case 10859:
      case 10906:
      case 10907:
      case 10908:
      case 10909:
      case 10910:
      case 10911:
      case 10982:
      case 11016:
      case 11019:
      case 11022:
      case 11025:
      case 11028:
      case 11031:
      case 11034:
      case 11037:
      case 11040:
      case 11043:
      case 11052:
      case 11055:
      case 11058:
      case 11061:
      case 11064:
      case 11067:
      case 11117:
      case 11118:
      case 11121:
      case 11537:
      case 11538:
      case 11539:
      case 11540:
        uint64_t v29 = getIntrinsicArgAttributeSet(a1, 0);
        int v30 = 4;
        goto LABEL_315;
      case 1011:
      case 1018:
      case 1072:
      case 1448:
        v147 = getIntrinsicArgAttributeSet(a1, 0);
        int v148 = 4;
        goto LABEL_403;
      case 1071:
      case 1458:
      case 1460:
      case 1464:
      case 1466:
      case 1644:
      case 1646:
      case 8090:
      case 8092:
      case 8094:
      case 8096:
      case 8122:
      case 8124:
      case 8126:
      case 8128:
      case 8130:
      case 8132:
      case 8134:
      case 8139:
      case 8141:
      case 8148:
      case 8150:
      case 8158:
      case 8160:
      case 8162:
      case 8164:
      case 8166:
      case 8168:
      case 8170:
      case 8172:
      case 8173:
      case 8175:
      case 8177:
      case 8179:
      case 8184:
      case 8194:
      case 8208:
      case 8216:
      case 8218:
      case 8220:
      case 8222:
      case 8224:
      case 8226:
      case 8228:
      case 8229:
      case 8231:
      case 8235:
      case 8237:
      case 8250:
      case 8332:
      case 8336:
      case 8413:
      case 8415:
      case 8461:
      case 8466:
      case 8468:
      case 8559:
      case 8561:
      case 8563:
      case 8565:
      case 8588:
      case 10462:
      case 10463:
      case 10500:
      case 10501:
      case 10524:
      case 10525:
      case 10567:
      case 10568:
      case 10577:
      case 10578:
      case 10579:
      case 10580:
      case 10581:
      case 10582:
      case 10713:
      case 10716:
      case 10717:
      case 10718:
      case 10743:
      case 10744:
      case 10745:
      case 10746:
      case 10848:
      case 10849:
      case 10860:
      case 10861:
      case 10973:
      case 10978:
      case 10983:
      case 10988:
      case 10989:
      case 10990:
      case 11009:
      case 11010:
      case 11011:
      case 11012:
      case 11046:
      case 11047:
      case 11048:
      case 11049:
      case 11073:
      case 11074:
      case 11077:
      case 11078:
      case 11081:
      case 11082:
      case 11085:
      case 11086:
      case 11089:
      case 11090:
      case 11093:
      case 11094:
      case 11411:
      case 11412:
      case 11413:
      case 11414:
      case 11415:
      case 11416:
      case 11417:
        uint64_t v29 = getIntrinsicArgAttributeSet(a1, 0);
        int v30 = 5;
        goto LABEL_315;
      case 1224:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
        char v9 = a1;
        int v10 = 25;
        goto LABEL_416;
      case 1270:
        BOOL v126 = a1;
        int v127 = 0;
LABEL_102:
        v130 = getIntrinsicArgAttributeSet(v126, v127);
        int v131 = 3;
        goto LABEL_259;
      case 1271:
      case 1273:
      case 1274:
      case 1275:
      case 1277:
      case 1278:
      case 1279:
      case 1281:
      case 1282:
      case 1283:
      case 1285:
      case 1286:
        v149 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v149;
        v150 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v150;
        int v58 = a1;
        int v59 = 25;
        goto LABEL_411;
      case 1272:
      case 1276:
      case 1280:
      case 1284:
        v151 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 4;
        v458 = v151;
        uint64_t v13 = a1;
        int v14 = 25;
        goto LABEL_420;
      case 1298:
      case 1299:
      case 2351:
        char v9 = a1;
        int v10 = 35;
        goto LABEL_416;
      case 1346:
      case 1724:
        char v9 = a1;
        int v10 = 36;
        goto LABEL_416;
      case 1502:
      case 1503:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1513:
      case 1514:
      case 1516:
      case 2800:
      case 2801:
      case 7408:
      case 7409:
      case 7410:
      case 7411:
      case 7412:
        char v9 = a1;
        int v10 = 14;
        goto LABEL_416;
      case 1741:
        v152 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v152;
        uint64_t v13 = a1;
        int v14 = 37;
        goto LABEL_420;
      case 1742:
      case 1743:
      case 3048:
        char v9 = a1;
        int v10 = 37;
        goto LABEL_416;
      case 1744:
      case 2462:
        char v9 = a1;
        int v10 = 38;
        goto LABEL_416;
      case 1747:
      case 1748:
      case 1800:
      case 1802:
      case 1803:
        unint64_t v7 = 5;
        v153 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v153;
        v154 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v154;
        v155 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v155;
        v156 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 5;
        v464 = v156;
        uint64_t v74 = a1;
        int v75 = 21;
        goto LABEL_214;
      case 1749:
      case 1797:
      case 1812:
      case 1847:
      case 2341:
      case 2406:
      case 2436:
      case 2437:
      case 2473:
      case 2532:
      case 2533:
      case 2544:
      case 2545:
        char v9 = a1;
        int v10 = 39;
        goto LABEL_416;
      case 1750:
      case 1751:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 2411:
      case 2412:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2419:
      case 2420:
      case 2421:
      case 2422:
      case 2423:
      case 2424:
      case 2425:
      case 2426:
        v157 = getIntrinsicArgAttributeSet(a1, 0);
        int v158 = 5;
        goto LABEL_196;
      case 1752:
      case 2413:
      case 2494:
      case 2495:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
        v157 = getIntrinsicArgAttributeSet(a1, 0);
        int v158 = 6;
        goto LABEL_196;
      case 1763:
      case 1764:
      case 2432:
        v159 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 4;
        v458 = v159;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 5;
        goto LABEL_372;
      case 1765:
      case 1766:
      case 2433:
        v162 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 5;
        v458 = v162;
        v163 = getIntrinsicArgAttributeSet(a1, 0);
        int v164 = 6;
        goto LABEL_203;
      case 1791:
      case 2328:
      case 2329:
      case 2344:
      case 2410:
        v165 = a1;
        int v166 = 13;
        goto LABEL_281;
      case 1795:
      case 1813:
        v167 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v167;
        unsigned int v15 = a1;
        int v16 = 41;
        goto LABEL_387;
      case 1796:
      case 1799:
        v168 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v168;
        v169 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v169;
        int v58 = a1;
        int v59 = 42;
        goto LABEL_411;
      case 1798:
        v157 = getIntrinsicArgAttributeSet(a1, 0);
        int v158 = 4;
        goto LABEL_196;
      case 1801:
      case 2935:
      case 2936:
      case 2937:
        v170 = a1;
        int v171 = 5;
        goto LABEL_258;
      case 1804:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
        char v9 = a1;
        int v10 = 43;
        goto LABEL_416;
      case 1805:
        char v9 = a1;
        int v10 = 44;
        goto LABEL_416;
      case 1810:
      case 1811:
        v172 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v172;
        v173 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v173;
        v174 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v174;
        v175 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 5;
        v464 = v175;
        v176 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 6;
        v466 = v176;
        v177 = getIntrinsicArgAttributeSet(a1, 0);
        int v467 = 7;
        v468 = v177;
        v178 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 8;
        int v469 = 8;
        v470 = v178;
        v179 = getIntrinsicFnAttributeSet(a1, 40);
        int v471 = -1;
        v472 = v179;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 1814:
      case 2396:
        v180 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v180;
        unsigned int v15 = a1;
        int v16 = 39;
        goto LABEL_387;
      case 1815:
      case 1816:
      case 1846:
      case 2353:
        char v9 = a1;
        int v10 = 45;
        goto LABEL_416;
      case 1817:
        char v9 = a1;
        int v10 = 46;
        goto LABEL_416;
      case 1818:
        v181 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v181;
        v182 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v182;
        v183 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v183;
        v184 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 8;
        v464 = v184;
        unsigned int v96 = a1;
        int v97 = 36;
        goto LABEL_164;
      case 1819:
        v185 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v185;
        v186 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v186;
        v187 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 5;
        int v461 = 5;
        v462 = v187;
        v188 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 6;
        v464 = v188;
        uint64_t v74 = a1;
        int v75 = 36;
        goto LABEL_214;
      case 1820:
        v189 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v189;
        v190 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v190;
        v191 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v191;
        v192 = a1;
        int v193 = 36;
        goto LABEL_207;
      case 1821:
      case 1845:
        v194 = getIntrinsicArgAttributeSet(a1, 0);
        int v195 = 3;
        goto LABEL_216;
      case 1823:
      case 1826:
      case 2333:
      case 2335:
      case 2470:
      case 2471:
      case 2472:
      case 2523:
      case 2524:
      case 2525:
        uint64_t v6 = getIntrinsicArgAttributeSet(a1, 0);
        int v118 = 4;
        goto LABEL_174;
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
        v196 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v196;
        uint64_t v13 = a1;
        int v14 = 21;
        goto LABEL_420;
      case 1843:
        v197 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v197;
        v198 = getIntrinsicArgAttributeSet(a1, 5);
        int v459 = 2;
        v460 = v198;
        v199 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v199;
        v200 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v200;
        v201 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 5;
        v466 = v201;
        v137 = a1;
        int v138 = 40;
        goto LABEL_231;
      case 1848:
      case 2330:
      case 2468:
        v202 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v202;
        uint64_t v13 = a1;
        int v14 = 47;
        goto LABEL_420;
      case 1849:
      case 1857:
      case 1873:
      case 1881:
      case 1889:
      case 1897:
      case 1905:
      case 1913:
      case 1921:
      case 1929:
      case 1937:
      case 1945:
      case 1953:
      case 1961:
        v203 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 4;
        v458 = v203;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 5;
        goto LABEL_378;
      case 1850:
      case 1851:
      case 1858:
      case 1859:
      case 1865:
      case 1874:
      case 1875:
      case 1882:
      case 1883:
      case 1890:
      case 1891:
      case 1898:
      case 1899:
      case 1906:
      case 1907:
      case 1914:
      case 1915:
      case 1922:
      case 1923:
      case 1930:
      case 1931:
      case 1938:
      case 1939:
      case 1946:
      case 1947:
      case 1954:
      case 1955:
      case 1962:
      case 1963:
        v206 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 5;
        v458 = v206;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 6;
        goto LABEL_378;
      case 1852:
      case 1854:
      case 1855:
      case 1856:
      case 1860:
      case 1862:
      case 1863:
      case 1864:
      case 1866:
      case 1867:
      case 1876:
      case 1878:
      case 1879:
      case 1880:
      case 1884:
      case 1886:
      case 1887:
      case 1888:
      case 1892:
      case 1894:
      case 1895:
      case 1896:
      case 1900:
      case 1902:
      case 1903:
      case 1904:
      case 1908:
      case 1910:
      case 1911:
      case 1912:
      case 1916:
      case 1918:
      case 1919:
      case 1920:
      case 1924:
      case 1926:
      case 1927:
      case 1928:
      case 1932:
      case 1934:
      case 1935:
      case 1936:
      case 1940:
      case 1942:
      case 1943:
      case 1944:
      case 1948:
      case 1950:
      case 1951:
      case 1952:
      case 1956:
      case 1958:
      case 1959:
      case 1960:
      case 1964:
      case 1966:
      case 1967:
      case 1968:
        v207 = getIntrinsicArgAttributeSet(a1, 0);
        int v208 = 6;
        goto LABEL_350;
      case 1853:
      case 1861:
      case 1868:
      case 1870:
      case 1871:
      case 1872:
      case 1877:
      case 1885:
      case 1893:
      case 1901:
      case 1909:
      case 1917:
      case 1925:
      case 1933:
      case 1941:
      case 1949:
      case 1957:
      case 1965:
        v209 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 7;
        goto LABEL_355;
      case 1869:
        v210 = getIntrinsicArgAttributeSet(a1, 0);
        int v211 = 8;
        goto LABEL_360;
      case 1970:
      case 2033:
      case 2075:
      case 2076:
      case 2079:
      case 2103:
      case 2205:
      case 2247:
      case 2284:
      case 2297:
      case 2298:
      case 2302:
      case 2308:
        v212 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v212;
        v213 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v213;
        v214 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v214;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 8;
        goto LABEL_163;
      case 1971:
      case 1972:
      case 1984:
      case 2011:
      case 2020:
      case 2026:
      case 2027:
      case 2034:
      case 2035:
      case 2036:
      case 2039:
      case 2077:
      case 2078:
      case 2080:
      case 2081:
      case 2084:
      case 2097:
      case 2104:
      case 2105:
      case 2108:
      case 2156:
      case 2193:
      case 2206:
      case 2207:
      case 2211:
      case 2217:
      case 2223:
      case 2248:
      case 2249:
      case 2253:
      case 2259:
      case 2260:
      case 2285:
      case 2286:
      case 2290:
      case 2299:
      case 2300:
      case 2301:
      case 2303:
      case 2304:
      case 2309:
      case 2310:
        v217 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v217;
        v218 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 7;
        v460 = v218;
        v219 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 8;
        v462 = v219;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 9;
        goto LABEL_163;
      case 1973:
      case 1974:
      case 1980:
      case 1981:
      case 1985:
      case 1986:
      case 1998:
      case 2004:
      case 2005:
      case 2012:
      case 2013:
      case 2014:
      case 2017:
      case 2021:
      case 2022:
      case 2023:
      case 2028:
      case 2029:
      case 2030:
      case 2037:
      case 2038:
      case 2040:
      case 2041:
      case 2082:
      case 2083:
      case 2085:
      case 2086:
      case 2090:
      case 2096:
      case 2098:
      case 2099:
      case 2106:
      case 2107:
      case 2109:
      case 2110:
      case 2113:
      case 2126:
      case 2132:
      case 2157:
      case 2158:
      case 2162:
      case 2168:
      case 2169:
      case 2194:
      case 2195:
      case 2199:
      case 2208:
      case 2209:
      case 2210:
      case 2212:
      case 2213:
      case 2218:
      case 2219:
      case 2224:
      case 2228:
      case 2241:
      case 2250:
      case 2251:
      case 2252:
      case 2254:
      case 2255:
      case 2261:
      case 2265:
      case 2278:
      case 2287:
      case 2288:
      case 2289:
      case 2291:
      case 2292:
      case 2305:
      case 2306:
      case 2307:
      case 2311:
      case 2312:
      case 2313:
        v220 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v220;
        v221 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 8;
        v460 = v221;
        v222 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 9;
        v462 = v222;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 10;
        goto LABEL_163;
      case 1975:
      case 1976:
      case 1977:
      case 1982:
      case 1983:
      case 1987:
      case 1988:
      case 1994:
      case 1995:
      case 1999:
      case 2000:
      case 2001:
      case 2006:
      case 2007:
      case 2008:
      case 2015:
      case 2016:
      case 2018:
      case 2019:
      case 2024:
      case 2025:
      case 2031:
      case 2032:
      case 2087:
      case 2088:
      case 2089:
      case 2091:
      case 2092:
      case 2100:
      case 2101:
      case 2102:
      case 2111:
      case 2112:
      case 2114:
      case 2115:
      case 2119:
      case 2125:
      case 2127:
      case 2128:
      case 2133:
      case 2137:
      case 2150:
      case 2159:
      case 2160:
      case 2161:
      case 2163:
      case 2164:
      case 2170:
      case 2174:
      case 2187:
      case 2196:
      case 2197:
      case 2198:
      case 2200:
      case 2201:
      case 2214:
      case 2215:
      case 2216:
      case 2220:
      case 2221:
      case 2222:
      case 2229:
      case 2234:
      case 2242:
      case 2256:
      case 2257:
      case 2258:
      case 2266:
      case 2271:
      case 2279:
      case 2293:
      case 2294:
      case 2295:
        v223 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v223;
        v224 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 9;
        v460 = v224;
        v225 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 10;
        v462 = v225;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 11;
        goto LABEL_163;
      case 1978:
      case 1979:
      case 1989:
      case 1990:
      case 1991:
      case 1996:
      case 1997:
      case 2002:
      case 2003:
      case 2009:
      case 2010:
      case 2093:
      case 2094:
      case 2095:
      case 2116:
      case 2117:
      case 2118:
      case 2120:
      case 2121:
      case 2129:
      case 2130:
      case 2131:
      case 2138:
      case 2143:
      case 2151:
      case 2165:
      case 2166:
      case 2167:
      case 2175:
      case 2180:
      case 2188:
      case 2202:
      case 2203:
      case 2204:
      case 2225:
      case 2235:
      case 2262:
      case 2272:
        v226 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v226;
        v227 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 10;
        v460 = v227;
        v228 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 11;
        v462 = v228;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 12;
        goto LABEL_163;
      case 1992:
      case 1993:
      case 2122:
      case 2123:
      case 2124:
      case 2134:
      case 2144:
      case 2171:
      case 2181:
      case 2226:
      case 2230:
      case 2240:
      case 2243:
      case 2263:
      case 2267:
      case 2277:
      case 2280:
        v229 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v229;
        v230 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 11;
        v460 = v230;
        v231 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 12;
        v462 = v231;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 13;
        goto LABEL_163;
      case 2042:
        v232 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v232;
        v233 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        v460 = v233;
        v234 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 6;
        v462 = v234;
        v235 = getIntrinsicArgAttributeSet(a1, 0);
        int v236 = 7;
        goto LABEL_150;
      case 2043:
      case 2044:
        v237 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v237;
        v238 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v238;
        v239 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v239;
        v235 = getIntrinsicArgAttributeSet(a1, 0);
        int v236 = 8;
        goto LABEL_150;
      case 2045:
      case 2046:
      case 2047:
        v240 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v240;
        v241 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 7;
        v460 = v241;
        v242 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 8;
        v462 = v242;
        v235 = getIntrinsicArgAttributeSet(a1, 0);
        int v236 = 9;
LABEL_150:
        int v463 = v236;
        v464 = v235;
        unsigned int v96 = a1;
        int v97 = 1;
        goto LABEL_164;
      case 2048:
      case 2049:
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
        v243 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v243;
        v244 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v244;
        v245 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 5;
        v462 = v245;
        v192 = a1;
        int v193 = 1;
        goto LABEL_207;
      case 2056:
        v246 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v246;
        v247 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 4;
        int v459 = 4;
        v460 = v247;
        v248 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 5;
        v462 = v248;
        int v52 = a1;
        int v53 = 19;
        goto LABEL_234;
      case 2057:
      case 2058:
      case 2064:
        v249 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v249;
        v250 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        v460 = v250;
        v251 = getIntrinsicArgAttributeSet(a1, 0);
        int v252 = 6;
        goto LABEL_156;
      case 2059:
      case 2061:
      case 2062:
      case 2063:
      case 2065:
      case 2066:
      case 2071:
      case 2073:
        v253 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v253;
        v254 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v254;
        v251 = getIntrinsicArgAttributeSet(a1, 0);
        int v252 = 7;
        goto LABEL_156;
      case 2060:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2072:
        v255 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v255;
        v256 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 7;
        v460 = v256;
        v251 = getIntrinsicArgAttributeSet(a1, 0);
        int v252 = 8;
LABEL_156:
        int v461 = v252;
        v462 = v251;
        v192 = a1;
        int v193 = 19;
        goto LABEL_207;
      case 2074:
      case 2296:
        v257 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v257;
        v258 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 5;
        int v459 = 5;
        v460 = v258;
        v259 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 6;
        v462 = v259;
        v260 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 7;
        v464 = v260;
        uint64_t v74 = a1;
        int v75 = 19;
        goto LABEL_214;
      case 2135:
      case 2139:
      case 2149:
      case 2152:
      case 2172:
      case 2176:
      case 2186:
      case 2189:
      case 2231:
      case 2233:
      case 2236:
      case 2244:
      case 2246:
      case 2268:
      case 2270:
      case 2273:
      case 2281:
      case 2283:
        v261 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v261;
        v262 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 12;
        v460 = v262;
        v263 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 13;
        v462 = v263;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 14;
        goto LABEL_163;
      case 2136:
      case 2146:
      case 2148:
      case 2173:
      case 2183:
      case 2185:
      case 2232:
      case 2245:
      case 2269:
      case 2282:
        v264 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v264;
        v265 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 14;
        v460 = v265;
        v266 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 15;
        v462 = v266;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 16;
        goto LABEL_163;
      case 2140:
      case 2142:
      case 2145:
      case 2153:
      case 2155:
      case 2177:
      case 2179:
      case 2182:
      case 2190:
      case 2192:
      case 2227:
      case 2237:
      case 2239:
      case 2264:
      case 2274:
      case 2276:
        v267 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v267;
        v268 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 13;
        v460 = v268;
        v269 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 14;
        v462 = v269;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 15;
        goto LABEL_163;
      case 2141:
      case 2154:
      case 2178:
      case 2191:
      case 2238:
      case 2275:
        v270 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v270;
        v271 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 15;
        v460 = v271;
        v272 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 16;
        v462 = v272;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 17;
        goto LABEL_163;
      case 2147:
      case 2184:
        v273 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v273;
        v274 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 16;
        v460 = v274;
        v275 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 17;
        v462 = v275;
        v215 = getIntrinsicArgAttributeSet(a1, 0);
        int v216 = 18;
LABEL_163:
        int v463 = v216;
        v464 = v215;
        unsigned int v96 = a1;
        int v97 = 19;
LABEL_164:
        v276 = getIntrinsicFnAttributeSet(v96, v97);
        int v465 = -1;
        v466 = v276;
        unint64_t v7 = 5;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2314:
        v277 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v277;
        v278 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        v460 = v278;
        v279 = getIntrinsicArgAttributeSet(a1, 0);
        int v280 = 6;
        goto LABEL_169;
      case 2315:
      case 2316:
      case 2322:
        v281 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v281;
        v282 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v282;
        v279 = getIntrinsicArgAttributeSet(a1, 0);
        int v280 = 7;
        goto LABEL_169;
      case 2317:
      case 2319:
      case 2320:
      case 2321:
      case 2323:
      case 2324:
        v283 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v283;
        v284 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 7;
        v460 = v284;
        v279 = getIntrinsicArgAttributeSet(a1, 0);
        int v280 = 8;
        goto LABEL_169;
      case 2318:
      case 2325:
      case 2326:
      case 2327:
        v285 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v285;
        v286 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 8;
        v460 = v286;
        v279 = getIntrinsicArgAttributeSet(a1, 0);
        int v280 = 9;
LABEL_169:
        int v461 = v280;
        v462 = v279;
        v192 = a1;
        int v193 = 20;
        goto LABEL_207;
      case 2331:
        v287 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v287;
        unsigned int v15 = a1;
        int v16 = 47;
        goto LABEL_387;
      case 2336:
        v288 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v288;
        v289 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v289;
        v82 = getIntrinsicArgAttributeSet(a1, 0);
        int v83 = 3;
        goto LABEL_205;
      case 2339:
        v290 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
        v458 = v290;
        v85 = getIntrinsicArgAttributeSet(a1, 0);
        int v120 = 4;
        goto LABEL_178;
      case 2342:
      case 2343:
      case 6054:
      case 6055:
      case 6056:
      case 6057:
        uint64_t v6 = getIntrinsicArgAttributeSet(a1, 5);
        int v118 = 1;
LABEL_174:
        v457[0] = v118;
        goto LABEL_282;
      case 2345:
        char v9 = a1;
        int v10 = 48;
        goto LABEL_416;
      case 2347:
        char v9 = a1;
        int v10 = 49;
        goto LABEL_416;
      case 2349:
        v291 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v291;
        v85 = getIntrinsicArgAttributeSet(a1, 0);
        int v120 = 2;
LABEL_178:
        int v459 = v120;
LABEL_179:
        v460 = v85;
        int v58 = a1;
        int v59 = 0;
        goto LABEL_411;
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2374:
      case 2375:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
        v292 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 4;
        v458 = v292;
        v293 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        v460 = v293;
        v294 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 6;
        v462 = v294;
        v192 = a1;
        int v193 = 17;
        goto LABEL_207;
      case 2395:
        v295 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v295;
        v296 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v296;
        v297 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v297;
        v298 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 5;
        int v463 = 5;
        goto LABEL_213;
      case 2404:
      case 2490:
      case 2542:
        char v9 = a1;
        int v10 = 50;
        goto LABEL_416;
      case 2405:
      case 2407:
        v299 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 5;
        v458 = v299;
        v300 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v300;
        int v58 = a1;
        int v59 = 39;
        goto LABEL_411;
      case 2427:
      case 2428:
        v301 = a1;
        int v302 = 0;
        goto LABEL_327;
      case 2429:
        unint64_t v7 = 5;
        v303 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v303;
        v304 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v304;
        v305 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 6;
        v462 = v305;
        v306 = getIntrinsicArgAttributeSet(a1, 0);
        int v307 = 7;
        goto LABEL_199;
      case 2430:
      case 2431:
        v308 = getIntrinsicArgAttributeSet(a1, 0);
        int v309 = 5;
        goto LABEL_312;
      case 2442:
      case 2528:
        char v9 = a1;
        int v10 = 47;
        goto LABEL_416;
      case 2446:
      case 2447:
      case 2449:
      case 2453:
        char v9 = a1;
        int v10 = 51;
        goto LABEL_416;
      case 2448:
      case 2451:
      case 2452:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 7847:
      case 7848:
      case 7849:
        v310 = getIntrinsicArgAttributeSet(a1, 0);
        int v311 = 1;
        goto LABEL_318;
      case 2455:
      case 2456:
      case 2457:
        v312 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v312;
        uint64_t v13 = a1;
        int v14 = 52;
        goto LABEL_420;
      case 2463:
        v313 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v313;
        uint64_t v13 = a1;
        int v14 = 51;
        goto LABEL_420;
      case 2469:
        v314 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v314;
        v315 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v315;
        v316 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v316;
        v192 = a1;
        int v193 = 47;
        goto LABEL_207;
      case 2476:
      case 2477:
      case 2478:
      case 2479:
      case 2480:
      case 2481:
      case 2482:
      case 2483:
      case 2484:
      case 2485:
      case 2486:
      case 2487:
      case 2488:
      case 2489:
        v317 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 5;
        v458 = v317;
        v318 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v318;
        int v58 = a1;
        int v59 = 17;
        goto LABEL_411;
      case 2492:
      case 2493:
      case 2546:
        char v9 = a1;
        int v10 = 53;
        goto LABEL_416;
      case 2496:
        v157 = getIntrinsicArgAttributeSet(a1, 0);
        int v158 = 7;
LABEL_196:
        v457[0] = v158;
        v458 = v157;
        uint64_t v13 = a1;
        int v14 = 40;
        goto LABEL_420;
      case 2510:
      case 2511:
      case 10292:
      case 10293:
      case 10294:
      case 10295:
      case 10296:
      case 10297:
      case 10298:
      case 10299:
      case 10300:
      case 10301:
      case 10302:
      case 10303:
      case 10304:
      case 10305:
      case 10306:
      case 10307:
      case 10422:
      case 10423:
      case 10424:
      case 10425:
      case 10426:
      case 10427:
      case 10428:
      case 10429:
      case 10430:
      case 10431:
      case 10432:
      case 10433:
      case 10434:
      case 10435:
      case 10436:
      case 10437:
      case 10438:
      case 10439:
      case 10440:
      case 10441:
      case 10442:
      case 10443:
      case 10444:
      case 10445:
      case 10537:
      case 10538:
      case 10539:
      case 10540:
      case 10541:
      case 10542:
      case 10543:
      case 10544:
      case 10545:
      case 10546:
      case 10547:
      case 10548:
      case 10549:
      case 10550:
      case 10551:
      case 10552:
      case 10553:
      case 10554:
      case 10555:
      case 10556:
      case 10557:
      case 10558:
      case 10559:
      case 10560:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 0);
        int v61 = 5;
        goto LABEL_338;
      case 2512:
        unint64_t v7 = 5;
        v319 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v319;
        v320 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v320;
        v321 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v321;
        v306 = getIntrinsicArgAttributeSet(a1, 0);
        int v307 = 8;
LABEL_199:
        int v463 = v307;
        v464 = v306;
        uint64_t v74 = a1;
        int v75 = 40;
        goto LABEL_214;
      case 2513:
      case 2514:
        v322 = a1;
        int v323 = 0;
        goto LABEL_308;
      case 2515:
        v324 = getIntrinsicArgAttributeSet(a1, 0);
        int v325 = 5;
        goto LABEL_323;
      case 2516:
        v326 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 6;
        v458 = v326;
        v163 = getIntrinsicArgAttributeSet(a1, 0);
        int v164 = 7;
LABEL_203:
        int v459 = v164;
        v460 = v163;
        int v58 = a1;
        int v59 = 20;
        goto LABEL_411;
      case 2517:
      case 2518:
        v327 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v327;
        v328 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v328;
        v82 = getIntrinsicArgAttributeSet(a1, 0);
        int v83 = 6;
LABEL_205:
        int v461 = v83;
LABEL_206:
        v462 = v82;
        v192 = a1;
        int v193 = 0;
        goto LABEL_207;
      case 2519:
        v329 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 5;
        v458 = v329;
        v330 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 6;
        int v459 = 6;
        v460 = v330;
        v331 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 7;
        v462 = v331;
        v332 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 8;
        v464 = v332;
        v333 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 9;
        v466 = v333;
        v334 = a1;
        int v335 = 19;
        goto LABEL_228;
      case 2520:
        v336 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 6;
        v457[0] = 6;
        v458 = v336;
        v337 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 7;
        v460 = v337;
        v338 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 8;
        v462 = v338;
        v339 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 9;
        v464 = v339;
        v340 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 10;
        v466 = v340;
        v334 = a1;
        int v335 = 20;
        goto LABEL_228;
      case 2526:
        char v9 = a1;
        int v10 = 54;
        goto LABEL_416;
      case 2527:
        v341 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
        v458 = v341;
        v342 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
        v460 = v342;
        v343 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 5;
        int v461 = 5;
        v462 = v343;
        v298 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 6;
LABEL_213:
        v464 = v298;
        uint64_t v74 = a1;
        int v75 = 39;
LABEL_214:
        v344 = getIntrinsicFnAttributeSet(v74, v75);
        int v465 = -1;
        v466 = v344;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2530:
      case 2531:
        v194 = getIntrinsicArgAttributeSet(a1, 0);
        int v195 = 4;
LABEL_216:
        v457[0] = v195;
        v458 = v194;
        uint64_t v13 = a1;
        int v14 = 39;
        goto LABEL_420;
      case 2534:
      case 2535:
        v345 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v345;
        v346 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        v460 = v346;
        v347 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 6;
        v462 = v347;
        v192 = a1;
        int v193 = 39;
LABEL_207:
        int v38 = getIntrinsicFnAttributeSet(v192, v193);
        int v39 = -1;
LABEL_208:
        int v463 = v39;
        v464 = v38;
        unint64_t v7 = 4;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2543:
        char v9 = a1;
        int v10 = 55;
        goto LABEL_416;
      case 2547:
      case 2549:
      case 2559:
      case 2561:
      case 3083:
      case 3864:
        v348 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v348;
        v349 = getIntrinsicArgAttributeSet(a1, 0);
        int v350 = 2;
        goto LABEL_409;
      case 2548:
      case 2551:
      case 2553:
      case 2560:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2567:
      case 3680:
      case 3927:
      case 3928:
      case 3929:
      case 3930:
      case 3944:
      case 3945:
      case 3949:
      case 3950:
        uint64_t v33 = getIntrinsicArgAttributeSet(a1, 0);
        int v34 = 1;
LABEL_221:
        v457[0] = v34;
        v458 = v33;
        v349 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 3;
        goto LABEL_410;
      case 2550:
      case 2552:
      case 2555:
      case 2557:
      case 2566:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2573:
        v351 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        goto LABEL_246;
      case 2554:
      case 2556:
      case 2572:
      case 2574:
      case 2575:
      case 2576:
        v147 = getIntrinsicArgAttributeSet(a1, 0);
        int v148 = 1;
        goto LABEL_403;
      case 2558:
        v352 = getIntrinsicArgAttributeSet(a1, 0);
        int v353 = 1;
        goto LABEL_407;
      case 2577:
      case 2578:
        v354 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v354;
        v355 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v355;
        v356 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v356;
        v357 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v357;
        v358 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 5;
        v466 = v358;
        v359 = getIntrinsicArgAttributeSet(a1, 0);
        int v467 = 6;
        v468 = v359;
        v360 = getIntrinsicFnAttributeSet(a1, 4);
        int v469 = -1;
        v470 = v360;
        unint64_t v7 = 7;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 3001:
      case 3002:
      case 3003:
      case 3004:
        v361 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v361;
        v362 = a1;
        int v363 = 0;
        goto LABEL_423;
      case 2607:
      case 2608:
        v364 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v364;
        v365 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v365;
        v366 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 4;
        v462 = v366;
        v367 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 5;
        v464 = v367;
        v368 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 6;
        int v465 = 6;
        v466 = v368;
        v334 = a1;
        int v335 = 4;
LABEL_228:
        v369 = getIntrinsicFnAttributeSet(v334, v335);
        int v467 = -1;
        v468 = v369;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2609:
      case 2610:
        v370 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v370;
        v371 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v371;
        v372 = getIntrinsicArgAttributeSet(a1, 0);
        int v373 = 5;
        goto LABEL_233;
      case 2611:
      case 2612:
        v374 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v374;
        v375 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v375;
        v376 = getIntrinsicArgAttributeSet(a1, 0);
        int v461 = 3;
        v462 = v376;
        v377 = getIntrinsicArgAttributeSet(a1, 0);
        int v463 = 4;
        v464 = v377;
        v378 = getIntrinsicArgAttributeSet(a1, 0);
        int v465 = 5;
        v466 = v378;
        v137 = a1;
        int v138 = 4;
LABEL_231:
        v379 = getIntrinsicFnAttributeSet(v137, v138);
        int v467 = -1;
        v468 = v379;
        unint64_t v7 = 6;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2613:
      case 2614:
      case 11462:
      case 11464:
      case 11466:
      case 11468:
      case 11470:
      case 11472:
      case 11474:
      case 11476:
        v380 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v380;
        v381 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v381;
        v372 = getIntrinsicArgAttributeSet(a1, 0);
        int v373 = 3;
LABEL_233:
        int v461 = v373;
        v462 = v372;
        unint64_t v7 = 4;
        int v52 = a1;
        int v53 = 4;
LABEL_234:
        v382 = getIntrinsicFnAttributeSet(v52, v53);
        int v463 = -1;
        v464 = v382;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 2934:
      case 2938:
      case 2939:
      case 2940:
      case 2941:
      case 2942:
      case 2943:
      case 4452:
      case 4453:
      case 4454:
      case 4455:
      case 4456:
      case 4457:
      case 4458:
      case 4459:
      case 4460:
      case 4461:
      case 4462:
      case 4463:
      case 10586:
      case 10587:
      case 10588:
      case 10592:
      case 10593:
      case 10594:
      case 10598:
      case 10599:
      case 10600:
      case 10602:
      case 10603:
      case 10604:
      case 10608:
      case 10609:
      case 10610:
      case 10612:
      case 10613:
      case 10614:
      case 10618:
      case 10619:
      case 10620:
      case 10624:
      case 10625:
      case 10626:
      case 10630:
      case 10631:
      case 10632:
      case 10636:
      case 10637:
      case 10638:
      case 10642:
      case 10643:
      case 10644:
      case 10648:
      case 10649:
      case 10650:
      case 10654:
      case 10655:
      case 10656:
      case 10660:
      case 10661:
      case 10662:
      case 10666:
      case 10667:
      case 10668:
      case 10672:
      case 10673:
      case 10674:
      case 10678:
      case 10679:
      case 10680:
      case 10684:
      case 10685:
      case 10686:
        char v9 = a1;
        int v10 = 16;
        goto LABEL_416;
      case 2995:
      case 5064:
      case 5076:
      case 5077:
      case 5082:
      case 5083:
      case 5109:
      case 5110:
      case 5111:
      case 5248:
      case 5301:
      case 5852:
      case 7888:
      case 7891:
      case 8833:
      case 11162:
      case 11479:
      case 11481:
      case 11484:
      case 11486:
      case 11527:
        v383 = a1;
        int v384 = 0;
        goto LABEL_418;
      case 3040:
      case 3041:
      case 3042:
      case 5224:
      case 5489:
      case 5630:
      case 5631:
      case 8870:
      case 8871:
      case 9737:
      case 9738:
      case 9739:
      case 9740:
      case 9741:
      case 9742:
      case 9743:
      case 9744:
      case 9745:
      case 9746:
      case 9747:
      case 9748:
      case 9749:
      case 9750:
      case 9751:
      case 9752:
      case 9753:
      case 9754:
      case 9755:
      case 9756:
      case 9757:
      case 9758:
      case 9759:
      case 9760:
      case 9761:
      case 9762:
      case 9763:
      case 9764:
      case 9765:
      case 9766:
      case 9767:
      case 9768:
      case 9769:
      case 9770:
      case 9771:
      case 9772:
      case 9773:
      case 9774:
      case 9775:
      case 9776:
      case 9777:
      case 9778:
      case 9779:
      case 9780:
      case 9781:
      case 9782:
      case 9783:
      case 9784:
      case 9785:
      case 9786:
      case 9787:
      case 9788:
      case 9789:
      case 9790:
      case 9791:
      case 9792:
      case 9793:
      case 9794:
      case 9795:
      case 9796:
      case 9797:
      case 9798:
      case 9799:
      case 9800:
      case 11644:
        char v9 = a1;
        int v10 = 56;
        goto LABEL_416;
      case 3049:
      case 3050:
      case 3051:
      case 3052:
        char v9 = a1;
        int v10 = 57;
        goto LABEL_416;
      case 3346:
      case 3348:
      case 3349:
      case 3350:
      case 3351:
      case 3354:
      case 3355:
      case 3356:
      case 3357:
      case 3358:
      case 3359:
      case 3360:
      case 3361:
      case 3363:
      case 3364:
      case 3365:
      case 3366:
      case 3367:
      case 3368:
      case 3369:
      case 3370:
      case 3371:
      case 3372:
      case 3373:
      case 3374:
      case 3377:
      case 3378:
      case 3379:
      case 3380:
        char v9 = a1;
        int v10 = 58;
        goto LABEL_416;
      case 3347:
      case 3362:
        v385 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        goto LABEL_242;
      case 3352:
      case 3353:
      case 3375:
      case 3376:
        v385 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
LABEL_242:
        v458 = v385;
        uint64_t v13 = a1;
        int v14 = 58;
        goto LABEL_420;
      case 3399:
      case 3400:
      case 3888:
      case 3947:
      case 7683:
      case 7684:
      case 7685:
      case 7686:
      case 7687:
      case 7688:
      case 7689:
      case 7700:
      case 7720:
      case 7722:
      case 7724:
      case 7725:
        int v17 = a1;
        int v18 = 5;
LABEL_244:
        v386 = getIntrinsicArgAttributeSet(v17, v18);
        int v387 = 1;
        goto LABEL_414;
      case 3818:
      case 3820:
      case 3891:
      case 3892:
      case 3893:
      case 3894:
      case 10896:
      case 10897:
      case 11104:
      case 11428:
        v351 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
LABEL_246:
        v458 = v351;
        v349 = getIntrinsicArgAttributeSet(a1, 0);
        int v350 = 4;
        goto LABEL_409;
      case 4020:
      case 4021:
      case 4022:
      case 4023:
      case 4026:
      case 4027:
      case 4028:
      case 4029:
      case 4032:
      case 4033:
      case 4034:
      case 4035:
      case 4038:
      case 4039:
      case 4040:
      case 4041:
        v388 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v388;
        int v22 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 3;
LABEL_248:
        int v459 = 3;
        v460 = v22;
        uint64_t v45 = a1;
        int v46 = 2;
        goto LABEL_392;
      case 4024:
      case 4025:
      case 4030:
      case 4031:
      case 4036:
      case 4037:
      case 4042:
      case 4043:
        v389 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v389;
LABEL_250:
        unsigned int v15 = a1;
        int v16 = 2;
        goto LABEL_387;
      case 5041:
      case 5042:
      case 5043:
      case 5044:
      case 5045:
      case 5046:
        char v9 = a1;
        int v10 = 59;
        goto LABEL_416;
      case 5047:
      case 5048:
      case 5049:
      case 5050:
      case 5051:
      case 5052:
        v128 = a1;
        int v129 = 0;
LABEL_253:
        v130 = getIntrinsicArgAttributeSet(v128, v129);
        int v131 = 4;
        goto LABEL_259;
      case 5053:
      case 5054:
      case 5055:
      case 5056:
      case 5057:
        v390 = a1;
        int v391 = 0;
        goto LABEL_305;
      case 5060:
        v392 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v392;
        unint64_t v7 = 3;
        uint64_t v55 = getIntrinsicArgAttributeSet(a1, 3);
        int v459 = 2;
LABEL_256:
        v460 = v55;
        uint64_t v45 = a1;
        int v46 = 16;
        goto LABEL_392;
      case 5061:
        v170 = a1;
        int v171 = 7;
LABEL_258:
        v130 = getIntrinsicArgAttributeSet(v170, v171);
        int v131 = 1;
LABEL_259:
        v457[0] = v131;
LABEL_260:
        v458 = v130;
        uint64_t v13 = a1;
        int v14 = 16;
        goto LABEL_420;
      case 5065:
      case 5066:
        v393 = getIntrinsicArgAttributeSet(a1, 0);
        int v394 = 1;
        goto LABEL_389;
      case 5094:
      case 5095:
      case 5098:
      case 5099:
      case 5100:
      case 5101:
      case 5102:
      case 5103:
      case 5104:
      case 5105:
      case 5106:
      case 5107:
      case 8037:
      case 8038:
      case 8043:
      case 8044:
      case 8045:
      case 8046:
      case 8047:
      case 8048:
      case 8049:
      case 8050:
      case 8051:
      case 8052:
        v395 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v395;
        v396 = getIntrinsicArgAttributeSet(a1, 0);
        int v397 = 4;
        goto LABEL_290;
      case 5096:
      case 5097:
      case 5108:
      case 8039:
      case 8040:
      case 8041:
      case 8042:
      case 8053:
      case 8054:
        v398 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v398;
        v396 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        goto LABEL_291;
      case 5156:
      case 5181:
      case 5194:
      case 5195:
      case 5196:
      case 5197:
      case 5202:
      case 5203:
      case 5204:
      case 5205:
      case 5208:
      case 5210:
      case 5226:
      case 5643:
      case 5644:
      case 5649:
      case 5681:
      case 5682:
      case 5683:
      case 5684:
      case 8638:
      case 8651:
      case 8652:
      case 8653:
      case 8654:
      case 8655:
      case 8656:
      case 8657:
      case 8658:
      case 8659:
      case 8660:
      case 8661:
      case 8662:
      case 8695:
      case 8696:
      case 8697:
      case 8698:
      case 8755:
      case 8778:
      case 8779:
      case 8783:
        uint64_t v27 = getIntrinsicArgAttributeSet(a1, 0);
        int v28 = 3;
LABEL_265:
        v457[0] = v28;
        v458 = v27;
        uint64_t v13 = a1;
        int v14 = 8;
        goto LABEL_420;
      case 5651:
        v399 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v399;
        uint64_t v13 = a1;
        int v14 = 56;
        goto LABEL_420;
      case 5733:
      case 5734:
      case 5735:
      case 5736:
      case 5737:
      case 5738:
      case 7713:
      case 7714:
      case 7715:
      case 7716:
      case 7719:
      case 10195:
      case 10196:
      case 10197:
      case 10198:
      case 10223:
      case 10224:
      case 10257:
      case 10258:
      case 10259:
      case 10260:
      case 10312:
      case 10313:
      case 10314:
      case 10315:
      case 11122:
      case 11123:
        char v9 = a1;
        int v10 = 10;
        goto LABEL_416;
      case 5797:
      case 5798:
      case 5799:
      case 5800:
      case 5801:
      case 5802:
      case 5803:
      case 5804:
      case 5805:
      case 5806:
      case 5807:
      case 5808:
      case 5809:
      case 5810:
      case 5811:
      case 5812:
      case 5813:
      case 5814:
      case 5815:
      case 5816:
      case 5817:
      case 5818:
      case 5819:
      case 5820:
        v400 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v400;
        uint64_t v13 = a1;
        int v14 = 60;
        goto LABEL_420;
      case 5821:
      case 5822:
      case 5823:
      case 5824:
      case 5825:
      case 5826:
      case 5827:
      case 5828:
      case 5829:
      case 5830:
      case 5847:
      case 5848:
      case 5849:
      case 5850:
      case 6089:
      case 6090:
      case 6091:
      case 6092:
      case 6093:
      case 6094:
      case 6095:
      case 6096:
      case 6097:
      case 6098:
      case 6102:
      case 6103:
        char v9 = a1;
        int v10 = 61;
        goto LABEL_416;
      case 5842:
      case 5843:
      case 5844:
      case 5845:
        v401 = getIntrinsicArgAttributeSet(a1, 14);
        v457[0] = 1;
        v458 = v401;
        v402 = getIntrinsicArgAttributeSet(a1, 15);
        int v459 = 2;
        v460 = v402;
        int v58 = a1;
        int v59 = 60;
        goto LABEL_411;
      case 5898:
      case 5899:
      case 5900:
      case 5901:
      case 5920:
      case 5940:
      case 5941:
      case 5942:
      case 5944:
      case 5945:
      case 5946:
      case 5947:
      case 6107:
      case 6108:
      case 6109:
      case 6110:
      case 6111:
      case 6112:
      case 6113:
      case 6114:
      case 6115:
      case 6116:
      case 6117:
      case 6118:
      case 6119:
      case 6120:
      case 6121:
      case 6122:
      case 6123:
      case 6124:
      case 6125:
      case 6126:
      case 6127:
      case 6128:
      case 6129:
      case 6130:
      case 6131:
      case 6132:
      case 6133:
      case 6134:
      case 6135:
      case 6136:
      case 6137:
      case 6138:
      case 6139:
      case 6140:
      case 6141:
      case 6142:
      case 6143:
      case 6144:
      case 6145:
      case 6146:
      case 6147:
      case 6148:
      case 6149:
      case 6150:
      case 6151:
      case 6152:
      case 6153:
      case 6154:
      case 6155:
      case 6156:
      case 6157:
      case 6158:
      case 6159:
      case 6160:
      case 6161:
      case 6162:
      case 6163:
      case 6164:
      case 6165:
      case 6166:
      case 6167:
      case 6168:
      case 6169:
      case 6170:
      case 6171:
      case 6172:
      case 6173:
      case 6174:
      case 6175:
      case 6176:
      case 6177:
      case 6178:
      case 6179:
      case 6180:
      case 6181:
      case 6182:
      case 6183:
      case 7003:
      case 7004:
      case 7005:
      case 7006:
      case 7007:
      case 7008:
      case 7009:
      case 7010:
      case 7011:
      case 7012:
      case 7013:
      case 7014:
      case 7015:
      case 7016:
      case 7017:
      case 7018:
      case 7019:
      case 7020:
      case 7021:
      case 7022:
      case 7023:
      case 7024:
      case 7025:
      case 7026:
      case 7027:
      case 7028:
      case 7029:
      case 7030:
      case 7031:
      case 7032:
      case 7033:
      case 7034:
      case 7035:
      case 7036:
      case 7037:
      case 7038:
      case 7039:
      case 7040:
      case 7041:
      case 7042:
      case 7043:
      case 7044:
      case 7045:
      case 7046:
      case 7047:
      case 7048:
      case 7049:
      case 7050:
      case 7051:
      case 7052:
      case 7053:
      case 7054:
      case 7079:
      case 7080:
      case 7081:
      case 7082:
      case 7131:
      case 7132:
      case 7133:
      case 7134:
      case 7135:
      case 7136:
      case 7137:
      case 7138:
      case 7139:
      case 7140:
      case 7141:
      case 7142:
      case 7143:
      case 7144:
      case 7145:
      case 7146:
      case 7147:
      case 7148:
      case 7149:
      case 7150:
      case 7151:
      case 7152:
      case 7153:
      case 7154:
      case 7155:
      case 7156:
      case 7157:
      case 7158:
      case 7159:
      case 7160:
      case 7161:
      case 7162:
      case 7163:
      case 7164:
      case 7165:
      case 7166:
      case 7167:
      case 7168:
      case 7169:
      case 7170:
      case 7171:
      case 7172:
      case 7173:
      case 7174:
      case 7175:
      case 7176:
      case 7177:
      case 7178:
      case 7179:
      case 7180:
      case 7181:
      case 7182:
      case 7239:
      case 7240:
      case 7241:
      case 7242:
      case 7243:
      case 7244:
      case 7245:
      case 7246:
      case 7247:
      case 7248:
      case 7249:
      case 7250:
      case 7251:
      case 7252:
      case 7253:
      case 7254:
      case 7255:
      case 7256:
      case 7257:
      case 7258:
      case 7259:
      case 7260:
      case 7261:
      case 7262:
      case 7263:
      case 7264:
      case 7265:
      case 7266:
      case 7267:
      case 7268:
      case 7269:
      case 7270:
      case 7271:
      case 7272:
      case 7273:
      case 7274:
      case 7275:
      case 7276:
      case 7277:
      case 7278:
      case 7279:
      case 7280:
      case 7281:
      case 7282:
      case 7283:
      case 7284:
      case 7285:
      case 7286:
      case 7287:
      case 7288:
      case 7289:
      case 7290:
      case 7311:
      case 7312:
      case 7329:
      case 7330:
      case 7331:
      case 7332:
      case 7349:
      case 7350:
      case 7351:
      case 7352:
      case 7353:
      case 7354:
      case 7355:
      case 7356:
      case 7357:
      case 7358:
      case 7359:
      case 7360:
      case 7361:
      case 7362:
      case 7363:
      case 7364:
      case 7365:
      case 7366:
      case 7367:
      case 7368:
        char v9 = a1;
        int v10 = 62;
        goto LABEL_416;
      case 6061:
      case 6062:
      case 6063:
      case 6070:
      case 6071:
      case 6072:
        v403 = a1;
        int v404 = 5;
        goto LABEL_274;
      case 6064:
      case 6065:
      case 6066:
      case 6067:
      case 6068:
      case 6069:
      case 6959:
      case 6960:
      case 6961:
      case 6962:
      case 6963:
      case 6964:
      case 6965:
      case 6966:
      case 6967:
      case 6968:
      case 6969:
      case 6970:
      case 6971:
      case 6972:
      case 6973:
      case 6974:
      case 6975:
      case 6976:
      case 6977:
      case 6978:
      case 6979:
      case 6980:
      case 6981:
      case 6982:
      case 6983:
      case 6984:
      case 6985:
      case 6986:
      case 6987:
      case 6988:
      case 6989:
      case 6990:
      case 6991:
      case 6992:
      case 6993:
      case 6994:
      case 6995:
      case 6996:
      case 6997:
      case 6998:
      case 6999:
      case 7000:
      case 7001:
      case 7002:
      case 7067:
      case 7068:
      case 7069:
      case 7070:
      case 7071:
      case 7072:
      case 7073:
      case 7074:
      case 7075:
      case 7076:
      case 7077:
      case 7078:
      case 7087:
      case 7088:
      case 7089:
      case 7090:
      case 7091:
      case 7092:
      case 7093:
      case 7094:
      case 7095:
      case 7096:
      case 7097:
      case 7098:
      case 7099:
      case 7100:
      case 7101:
      case 7102:
      case 7103:
      case 7104:
      case 7105:
      case 7106:
      case 7107:
      case 7108:
      case 7109:
      case 7110:
      case 7111:
      case 7112:
      case 7113:
      case 7114:
      case 7115:
      case 7116:
      case 7117:
      case 7118:
      case 7119:
      case 7120:
      case 7121:
      case 7122:
      case 7123:
      case 7124:
      case 7125:
      case 7126:
      case 7127:
      case 7128:
      case 7129:
      case 7130:
      case 7195:
      case 7196:
      case 7197:
      case 7198:
      case 7199:
      case 7200:
      case 7201:
      case 7202:
      case 7203:
      case 7204:
      case 7205:
      case 7206:
      case 7207:
      case 7208:
      case 7209:
      case 7210:
      case 7211:
      case 7212:
      case 7213:
      case 7214:
      case 7215:
      case 7216:
      case 7217:
      case 7218:
      case 7219:
      case 7220:
      case 7221:
      case 7222:
      case 7223:
      case 7224:
      case 7225:
      case 7226:
      case 7227:
      case 7228:
      case 7229:
      case 7230:
      case 7231:
      case 7232:
      case 7233:
      case 7234:
      case 7235:
      case 7236:
      case 7237:
      case 7238:
      case 7303:
      case 7304:
      case 7305:
      case 7306:
      case 7307:
      case 7308:
      case 7309:
      case 7310:
      case 7317:
      case 7318:
      case 7319:
      case 7320:
      case 7321:
      case 7322:
      case 7323:
      case 7324:
      case 7325:
      case 7326:
      case 7327:
      case 7328:
      case 7337:
      case 7338:
      case 7339:
      case 7340:
      case 7341:
      case 7342:
      case 7343:
      case 7344:
      case 7345:
      case 7346:
      case 7347:
      case 7348:
        v403 = a1;
        int v404 = 3;
LABEL_274:
        v405 = getIntrinsicArgAttributeSet(v403, v404);
        v457[0] = 1;
        v458 = v405;
        uint64_t v13 = a1;
        int v14 = 63;
        goto LABEL_420;
      case 6085:
      case 6086:
      case 6087:
      case 6088:
      case 6300:
      case 6301:
      case 6302:
      case 6303:
      case 6304:
      case 6305:
      case 6306:
      case 6307:
      case 6323:
      case 6324:
      case 6325:
      case 6326:
      case 6327:
      case 6328:
      case 6329:
      case 6330:
      case 6331:
      case 6332:
      case 6333:
      case 6334:
      case 6335:
      case 6336:
      case 6337:
      case 6338:
      case 6339:
      case 6340:
      case 6341:
      case 6342:
      case 6343:
      case 6344:
      case 6345:
      case 6346:
      case 6347:
      case 6348:
      case 6349:
      case 6350:
      case 6351:
      case 6352:
      case 6353:
      case 6354:
      case 6951:
      case 6952:
      case 6953:
      case 6954:
      case 6955:
      case 6956:
      case 6957:
      case 6958:
        char v9 = a1;
        int v10 = 64;
        goto LABEL_416;
      case 6099:
      case 6100:
        v406 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v406;
        uint64_t v13 = a1;
        int v14 = 65;
        goto LABEL_420;
      case 6101:
        char v9 = a1;
        int v10 = 66;
        goto LABEL_416;
      case 6215:
        char v9 = a1;
        int v10 = 67;
        goto LABEL_416;
      case 6234:
      case 6235:
      case 6289:
      case 6290:
      case 6291:
      case 6292:
        v407 = getIntrinsicArgAttributeSet(a1, 1);
        v457[0] = 0;
        v458 = v407;
        uint64_t v13 = a1;
        int v14 = 68;
        goto LABEL_420;
      case 6236:
      case 6237:
      case 6238:
      case 6239:
      case 6240:
      case 6241:
      case 6242:
      case 6243:
      case 6244:
      case 6245:
      case 6246:
      case 6247:
      case 6248:
      case 6249:
      case 6250:
      case 6251:
      case 6252:
      case 6253:
      case 6254:
      case 6255:
      case 6256:
      case 6257:
      case 6258:
      case 6259:
      case 6260:
      case 6261:
      case 6262:
      case 6263:
      case 6264:
      case 6265:
      case 6266:
      case 6267:
      case 6268:
      case 6269:
      case 6270:
      case 6271:
      case 6272:
      case 6273:
      case 6274:
      case 6275:
      case 6276:
      case 6277:
      case 6278:
      case 6279:
      case 6280:
      case 6281:
      case 6282:
      case 6283:
      case 6284:
      case 6285:
      case 6286:
      case 6287:
      case 6288:
      case 6293:
      case 6294:
      case 6295:
      case 6296:
      case 6297:
      case 6298:
      case 6299:
        v165 = a1;
        int v166 = 1;
LABEL_281:
        uint64_t v6 = getIntrinsicArgAttributeSet(v165, v166);
        v457[0] = 0;
        goto LABEL_282;
      case 7055:
      case 7056:
      case 7057:
      case 7058:
      case 7059:
      case 7060:
      case 7061:
      case 7062:
      case 7063:
      case 7064:
      case 7065:
      case 7066:
      case 7083:
      case 7084:
      case 7085:
      case 7086:
      case 7183:
      case 7184:
      case 7185:
      case 7186:
      case 7187:
      case 7188:
      case 7189:
      case 7190:
      case 7191:
      case 7192:
      case 7193:
      case 7194:
      case 7291:
      case 7292:
      case 7293:
      case 7294:
      case 7295:
      case 7296:
      case 7297:
      case 7298:
      case 7299:
      case 7300:
      case 7301:
      case 7302:
      case 7313:
      case 7314:
      case 7315:
      case 7316:
      case 7333:
      case 7334:
      case 7335:
      case 7336:
      case 7369:
      case 7370:
      case 7371:
      case 7372:
        v408 = getIntrinsicArgAttributeSet(a1, 7);
        v457[0] = 1;
        v458 = v408;
        uint64_t v13 = a1;
        int v14 = 69;
        goto LABEL_420;
      case 7373:
        v310 = getIntrinsicArgAttributeSet(a1, 0);
        int v311 = 3;
        goto LABEL_318;
      case 7401:
      case 7402:
      case 8850:
      case 8851:
      case 8852:
      case 8853:
      case 9263:
      case 9266:
      case 9268:
      case 10290:
      case 10291:
        char v9 = a1;
        int v10 = 52;
        goto LABEL_416;
      case 7681:
        v409 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v409;
        uint64_t v13 = a1;
        int v14 = 11;
        goto LABEL_420;
      case 7682:
        v410 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 3;
        v458 = v410;
        uint64_t v13 = a1;
        int v14 = 70;
        goto LABEL_420;
      case 7709:
      case 7710:
      case 7711:
      case 7862:
        char v9 = a1;
        int v10 = 71;
        goto LABEL_416;
      case 7721:
      case 7723:
        v411 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v411;
        v396 = getIntrinsicArgAttributeSet(a1, 0);
        int v397 = 2;
LABEL_290:
        int v459 = v397;
LABEL_291:
        v460 = v396;
        int v58 = a1;
        int v59 = 10;
        goto LABEL_411;
      case 7850:
        v412 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v412;
        v413 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 2;
        v460 = v413;
        int v58 = a1;
        int v59 = 33;
        goto LABEL_411;
      case 7870:
      case 7871:
      case 10116:
      case 10117:
        char v9 = a1;
        int v10 = 72;
        goto LABEL_416;
      case 7873:
      case 7874:
      case 7876:
        char v9 = a1;
        int v10 = 73;
        goto LABEL_416;
      case 7877:
      case 7878:
      case 7879:
      case 9936:
      case 9937:
      case 9938:
      case 9939:
      case 9940:
      case 9941:
      case 9942:
      case 9943:
      case 9944:
      case 9945:
      case 9946:
      case 9947:
      case 9948:
      case 9949:
      case 9950:
      case 9951:
      case 9952:
      case 9953:
      case 9954:
      case 9955:
      case 9956:
      case 9957:
      case 9958:
      case 9959:
      case 10015:
      case 10016:
      case 10017:
      case 10018:
      case 10019:
      case 10020:
      case 10021:
      case 10022:
      case 10023:
      case 10024:
      case 10025:
      case 10026:
      case 10027:
      case 10028:
      case 10029:
      case 10030:
      case 10031:
      case 10032:
      case 10033:
      case 10034:
      case 10035:
      case 10036:
      case 10037:
      case 10038:
      case 10039:
      case 10040:
      case 10041:
      case 10042:
      case 10043:
      case 10044:
      case 10045:
      case 10046:
      case 10047:
      case 10048:
      case 10049:
      case 10050:
      case 10051:
      case 10052:
      case 10053:
      case 10054:
      case 10055:
      case 10056:
      case 10057:
      case 10058:
      case 10059:
      case 10060:
      case 10061:
      case 10062:
        char v9 = a1;
        int v10 = 30;
        goto LABEL_416;
      case 7880:
      case 7914:
      case 7915:
      case 7916:
      case 7917:
      case 7918:
      case 7919:
      case 7920:
      case 8595:
      case 8786:
      case 8799:
        char v9 = a1;
        int v10 = 70;
        goto LABEL_416;
      case 7991:
        char v9 = a1;
        int v10 = 74;
        goto LABEL_416;
      case 8013:
        char v9 = a1;
        int v10 = 40;
        goto LABEL_416;
      case 8055:
      case 8251:
      case 8256:
      case 8272:
      case 8316:
        uint64_t v62 = a1;
        int v63 = 5;
LABEL_300:
        v414 = getIntrinsicArgAttributeSet(v62, v63);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v414;
        unsigned int v15 = a1;
        int v16 = 19;
        goto LABEL_387;
      case 8056:
      case 8456:
      case 8457:
      case 8472:
      case 8475:
      case 8476:
      case 8495:
      case 8496:
      case 8535:
      case 8536:
        v415 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v415;
        unsigned int v15 = a1;
        int v16 = 20;
        goto LABEL_387;
      case 8059:
      case 8477:
      case 8478:
      case 8497:
      case 8498:
      case 8515:
      case 8516:
      case 8537:
      case 8538:
        uint64_t v66 = a1;
        int v67 = 5;
LABEL_303:
        v308 = getIntrinsicArgAttributeSet(v66, v67);
        int v309 = 3;
        goto LABEL_312;
      case 8061:
      case 8479:
      case 8480:
      case 8499:
      case 8500:
      case 8517:
      case 8518:
      case 8539:
      case 8540:
        v390 = a1;
        int v391 = 5;
LABEL_305:
        v308 = getIntrinsicArgAttributeSet(v390, v391);
        int v309 = 4;
        goto LABEL_312;
      case 8063:
      case 8481:
      case 8482:
      case 8501:
      case 8502:
      case 8519:
      case 8520:
      case 8541:
      case 8542:
        v308 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
        goto LABEL_313;
      case 8065:
      case 8483:
      case 8484:
      case 8503:
      case 8504:
      case 8521:
      case 8522:
      case 8543:
      case 8544:
        v322 = a1;
        int v323 = 5;
LABEL_308:
        v308 = getIntrinsicArgAttributeSet(v322, v323);
        int v309 = 6;
        goto LABEL_312;
      case 8067:
      case 8485:
      case 8486:
      case 8505:
      case 8506:
      case 8523:
      case 8524:
      case 8545:
      case 8546:
        v308 = getIntrinsicArgAttributeSet(a1, 5);
        int v309 = 7;
        goto LABEL_312;
      case 8069:
      case 8487:
      case 8488:
      case 8507:
      case 8508:
      case 8525:
      case 8526:
      case 8547:
      case 8548:
        v308 = getIntrinsicArgAttributeSet(a1, 5);
        int v309 = 8;
        goto LABEL_312;
      case 8071:
      case 8489:
      case 8490:
      case 8509:
      case 8510:
      case 8527:
      case 8528:
      case 8549:
      case 8550:
        v308 = getIntrinsicArgAttributeSet(a1, 5);
        int v309 = 9;
LABEL_312:
        v457[0] = v309;
LABEL_313:
        v458 = v308;
        uint64_t v13 = a1;
        int v14 = 20;
        goto LABEL_420;
      case 8091:
      case 8093:
      case 8095:
      case 8097:
      case 8105:
      case 8107:
      case 8116:
      case 8118:
      case 8120:
      case 8136:
      case 8140:
      case 8142:
      case 8144:
      case 8147:
      case 8149:
      case 8151:
      case 8153:
      case 8174:
      case 8176:
      case 8178:
      case 8180:
      case 8182:
      case 8196:
      case 8198:
      case 8200:
      case 8202:
      case 8204:
      case 8206:
      case 8210:
      case 8212:
      case 8214:
      case 8230:
      case 8232:
      case 8234:
      case 8236:
      case 8238:
      case 8244:
      case 8246:
      case 8333:
      case 8337:
      case 8341:
      case 8343:
      case 8359:
      case 8361:
      case 8396:
      case 8398:
      case 8400:
      case 8402:
      case 8414:
      case 8416:
      case 8418:
      case 8420:
      case 8422:
      case 8440:
      case 8442:
      case 8444:
      case 8446:
      case 8448:
      case 8450:
      case 8463:
      case 8465:
      case 8467:
      case 8469:
      case 8471:
      case 8492:
      case 8494:
      case 8534:
      case 8552:
      case 8554:
      case 8556:
      case 8558:
      case 8560:
      case 8562:
      case 8564:
      case 8566:
      case 8568:
      case 8570:
      case 8572:
      case 8578:
      case 8580:
      case 8582:
      case 8584:
      case 8586:
        uint64_t v29 = getIntrinsicArgAttributeSet(a1, 0);
        int v30 = 6;
LABEL_315:
        v457[0] = v30;
LABEL_316:
        v458 = v29;
        uint64_t v13 = a1;
        int v14 = 1;
        goto LABEL_420;
      case 8100:
      case 8102:
      case 8109:
      case 8111:
      case 8410:
      case 8412:
      case 8452:
      case 8454:
      case 8474:
      case 8512:
      case 8514:
      case 8530:
      case 8532:
        v310 = getIntrinsicArgAttributeSet(a1, 0);
        int v311 = 6;
LABEL_318:
        v457[0] = v311;
        v458 = v310;
        uint64_t v13 = a1;
        int v14 = 33;
        goto LABEL_420;
      case 8252:
        v416 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v416;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        goto LABEL_373;
      case 8253:
        v417 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v417;
        unsigned int v15 = a1;
        int v16 = 5;
        goto LABEL_387;
      case 8254:
        v418 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 2;
        v458 = v418;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 5;
        goto LABEL_379;
      case 8257:
      case 8273:
      case 8317:
        v324 = getIntrinsicArgAttributeSet(a1, 5);
        int v325 = 2;
LABEL_323:
        v457[0] = v325;
        v458 = v324;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 6;
        goto LABEL_372;
      case 8258:
      case 8274:
      case 8302:
      case 8318:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 3;
        goto LABEL_338;
      case 8259:
      case 8303:
      case 8319:
        v419 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 3;
        v457[0] = 3;
        v458 = v419;
        v420 = getIntrinsicArgAttributeSet(a1, 0);
        int v421 = 7;
        goto LABEL_342;
      case 8260:
      case 8278:
      case 8304:
      case 8320:
        v301 = a1;
        int v302 = 5;
LABEL_327:
        uint64_t v60 = getIntrinsicArgAttributeSet(v301, v302);
        int v61 = 4;
        goto LABEL_338;
      case 8261:
      case 8305:
      case 8321:
        v422 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 4;
        goto LABEL_352;
      case 8262:
      case 8282:
      case 8306:
      case 8322:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
        goto LABEL_339;
      case 8263:
      case 8307:
      case 8323:
        v423 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
        goto LABEL_357;
      case 8264:
      case 8286:
      case 8308:
      case 8324:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 6;
        goto LABEL_338;
      case 8265:
      case 8309:
      case 8325:
        v424 = getIntrinsicArgAttributeSet(a1, 5);
        int v425 = 6;
        goto LABEL_362;
      case 8266:
      case 8290:
      case 8310:
      case 8326:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 7;
        goto LABEL_338;
      case 8267:
      case 8311:
      case 8327:
        v426 = getIntrinsicArgAttributeSet(a1, 5);
        int v427 = 7;
        goto LABEL_367;
      case 8268:
      case 8294:
      case 8312:
      case 8328:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 8;
        goto LABEL_338;
      case 8269:
      case 8313:
      case 8329:
        v428 = getIntrinsicArgAttributeSet(a1, 5);
        int v429 = 8;
        goto LABEL_371;
      case 8270:
      case 8298:
      case 8314:
      case 8330:
        uint64_t v60 = getIntrinsicArgAttributeSet(a1, 5);
        int v61 = 9;
LABEL_338:
        v457[0] = v61;
LABEL_339:
        v458 = v60;
        uint64_t v13 = a1;
        int v14 = 19;
        goto LABEL_420;
      case 8271:
      case 8315:
      case 8331:
        v430 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 9;
        v458 = v430;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 13;
        goto LABEL_372;
      case 8275:
        v431 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 3;
        v457[0] = 3;
        v458 = v431;
        v420 = getIntrinsicArgAttributeSet(a1, 0);
        int v421 = 6;
LABEL_342:
        int v459 = v421;
        v460 = v420;
        uint64_t v45 = a1;
        int v46 = 19;
        goto LABEL_392;
      case 8276:
        v145 = a1;
        int v146 = 5;
LABEL_344:
        v139 = getIntrinsicArgAttributeSet(v145, v146);
        int v140 = 3;
        goto LABEL_375;
      case 8277:
        v432 = getIntrinsicArgAttributeSet(a1, 5);
        unint64_t v7 = 3;
        v457[0] = 3;
        v458 = v432;
        v433 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 6;
        v460 = v433;
        uint64_t v45 = a1;
        int v46 = 5;
        goto LABEL_392;
      case 8279:
        v434 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 4;
        v458 = v434;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 7;
        goto LABEL_372;
      case 8280:
        v143 = a1;
        int v144 = 5;
LABEL_348:
        v139 = getIntrinsicArgAttributeSet(v143, v144);
        int v140 = 4;
        goto LABEL_375;
      case 8281:
        v207 = getIntrinsicArgAttributeSet(a1, 5);
        int v208 = 4;
LABEL_350:
        v457[0] = v208;
        v458 = v207;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 7;
        goto LABEL_378;
      case 8283:
        v422 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
LABEL_352:
        v458 = v422;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 8;
        goto LABEL_372;
      case 8284:
        v139 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
        goto LABEL_376;
      case 8285:
        v209 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 5;
LABEL_355:
        v458 = v209;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 8;
        goto LABEL_378;
      case 8287:
        v423 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 6;
LABEL_357:
        v458 = v423;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 9;
        goto LABEL_372;
      case 8288:
        v139 = getIntrinsicArgAttributeSet(a1, 5);
        int v140 = 6;
        goto LABEL_375;
      case 8289:
        v210 = getIntrinsicArgAttributeSet(a1, 5);
        int v211 = 6;
LABEL_360:
        v457[0] = v211;
        v458 = v210;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 9;
        goto LABEL_378;
      case 8291:
        v424 = getIntrinsicArgAttributeSet(a1, 5);
        int v425 = 7;
LABEL_362:
        v457[0] = v425;
        v458 = v424;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 10;
        goto LABEL_372;
      case 8292:
        v141 = a1;
        int v142 = 5;
LABEL_364:
        v139 = getIntrinsicArgAttributeSet(v141, v142);
        int v140 = 7;
        goto LABEL_375;
      case 8293:
        v435 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 7;
        v458 = v435;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 10;
        goto LABEL_378;
      case 8295:
        v426 = getIntrinsicArgAttributeSet(a1, 5);
        int v427 = 8;
LABEL_367:
        v457[0] = v427;
        v458 = v426;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 11;
        goto LABEL_372;
      case 8296:
        v139 = getIntrinsicArgAttributeSet(a1, 5);
        int v140 = 8;
        goto LABEL_375;
      case 8297:
        v436 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 8;
        v458 = v436;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 11;
        goto LABEL_378;
      case 8299:
        v428 = getIntrinsicArgAttributeSet(a1, 5);
        int v429 = 9;
LABEL_371:
        v457[0] = v429;
        v458 = v428;
        v160 = getIntrinsicArgAttributeSet(a1, 0);
        int v161 = 12;
LABEL_372:
        int v459 = v161;
LABEL_373:
        v460 = v160;
        int v58 = a1;
        int v59 = 19;
        goto LABEL_411;
      case 8300:
        v139 = getIntrinsicArgAttributeSet(a1, 5);
        int v140 = 9;
LABEL_375:
        v457[0] = v140;
LABEL_376:
        v458 = v139;
        uint64_t v13 = a1;
        int v14 = 5;
        goto LABEL_420;
      case 8301:
        v437 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 9;
        v458 = v437;
        v204 = getIntrinsicArgAttributeSet(a1, 0);
        int v205 = 12;
LABEL_378:
        int v459 = v205;
LABEL_379:
        v460 = v204;
        int v58 = a1;
        int v59 = 5;
        goto LABEL_411;
      case 8458:
      case 8693:
      case 8694:
        v438 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
        v458 = v438;
        v439 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 3;
        int v459 = 3;
        v460 = v439;
        uint64_t v45 = a1;
        int v46 = 8;
        goto LABEL_392;
      case 8459:
        v440 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v440;
        uint64_t v116 = getIntrinsicArgAttributeSet(a1, 0);
        int v117 = 2;
LABEL_382:
        int v459 = v117;
        v460 = v116;
        int v58 = a1;
        int v59 = 8;
        goto LABEL_411;
      case 8598:
        char v9 = a1;
        int v10 = 75;
        goto LABEL_416;
      case 8599:
      case 8600:
      case 8601:
        char v9 = a1;
        int v10 = 76;
        goto LABEL_416;
      case 8715:
        uint64_t v19 = a1;
        int v20 = 0;
LABEL_386:
        v441 = getIntrinsicArgAttributeSet(v19, v20);
        unint64_t v7 = 2;
        v457[0] = 2;
        v458 = v441;
        unsigned int v15 = a1;
        int v16 = 11;
LABEL_387:
        v442 = getIntrinsicFnAttributeSet(v15, v16);
        int v459 = -1;
        v460 = v442;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 8837:
        v393 = getIntrinsicArgAttributeSet(a1, 0);
        int v394 = 2;
LABEL_389:
        v457[0] = v394;
        v458 = v393;
        v443 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 3;
        int v459 = 3;
        goto LABEL_391;
      case 8838:
        v444 = getIntrinsicArgAttributeSet(a1, 0);
        unint64_t v7 = 3;
        v457[0] = 3;
        v458 = v444;
        v443 = getIntrinsicArgAttributeSet(a1, 0);
        int v459 = 4;
LABEL_391:
        v460 = v443;
        uint64_t v45 = a1;
        int v46 = 4;
LABEL_392:
        v445 = getIntrinsicFnAttributeSet(v45, v46);
        int v461 = -1;
        v462 = v445;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 8873:
      case 8874:
        char v9 = a1;
        int v10 = 77;
        goto LABEL_416;
      case 10112:
        v446 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v446;
        uint64_t v13 = a1;
        int v14 = 72;
        goto LABEL_420;
      case 10120:
        v447 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v447;
        uint64_t v13 = a1;
        int v14 = 78;
        goto LABEL_420;
      case 10121:
      case 10122:
        v448 = getIntrinsicArgAttributeSet(a1, 3);
        v457[0] = 1;
        v458 = v448;
        uint64_t v13 = a1;
        int v14 = 79;
        goto LABEL_420;
      case 10148:
        char v9 = a1;
        int v10 = 80;
        goto LABEL_416;
      case 10163:
        v449 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 1;
        v458 = v449;
        uint64_t v13 = a1;
        int v14 = 80;
        goto LABEL_420;
      case 10446:
      case 10447:
      case 10448:
      case 10449:
      case 10878:
      case 10879:
      case 10880:
      case 10881:
        v450 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 4;
        v458 = v450;
        v451 = getIntrinsicArgAttributeSet(a1, 0);
        int v452 = 5;
        goto LABEL_424;
      case 10466:
      case 10469:
      case 10470:
      case 10471:
      case 10976:
      case 10977:
        v147 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
        goto LABEL_404;
      case 10529:
      case 10532:
      case 10533:
      case 10534:
      case 10753:
      case 10756:
      case 10757:
      case 10758:
        v352 = getIntrinsicArgAttributeSet(a1, 0);
        int v353 = 4;
        goto LABEL_407;
      case 10571:
      case 10574:
      case 10697:
      case 10700:
      case 10705:
      case 10708:
      case 10986:
      case 10997:
      case 11001:
        v147 = getIntrinsicArgAttributeSet(a1, 0);
        int v148 = 2;
LABEL_403:
        v457[0] = v148;
LABEL_404:
        v458 = v147;
        v349 = getIntrinsicArgAttributeSet(a1, 0);
        int v350 = 5;
        goto LABEL_409;
      case 10575:
      case 10576:
      case 10689:
      case 10692:
      case 10987:
        v352 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 3;
        goto LABEL_408;
      case 10693:
      case 10694:
      case 10701:
      case 10702:
      case 10709:
      case 10710:
      case 10998:
      case 11002:
        v352 = getIntrinsicArgAttributeSet(a1, 0);
        int v353 = 5;
LABEL_407:
        v457[0] = v353;
LABEL_408:
        v458 = v352;
        v349 = getIntrinsicArgAttributeSet(a1, 0);
        int v350 = 6;
LABEL_409:
        int v459 = v350;
LABEL_410:
        v460 = v349;
        int v58 = a1;
        int v59 = 1;
        goto LABEL_411;
      case 10719:
      case 10720:
      case 10721:
      case 10722:
      case 10723:
      case 10724:
      case 10725:
      case 10726:
      case 10727:
      case 10728:
      case 10729:
      case 10730:
      case 10731:
      case 10732:
      case 10733:
      case 10734:
      case 10735:
      case 10736:
      case 10737:
      case 10738:
      case 10739:
      case 10740:
      case 10741:
      case 10742:
      case 10862:
      case 10863:
      case 10864:
      case 10865:
      case 10866:
      case 10867:
      case 10868:
      case 10869:
      case 10870:
      case 10871:
      case 10872:
      case 10873:
      case 10874:
      case 10875:
      case 10876:
      case 10877:
      case 10882:
      case 10883:
      case 10884:
      case 10885:
      case 10886:
      case 10887:
      case 10888:
      case 10889:
        uint64_t v47 = getIntrinsicArgAttributeSet(a1, 0);
        int v48 = 5;
        goto LABEL_419;
      case 11140:
      case 11141:
        v386 = getIntrinsicArgAttributeSet(a1, 0);
        int v387 = 4;
LABEL_414:
        v457[0] = v387;
        v458 = v386;
        uint64_t v13 = a1;
        int v14 = 10;
        goto LABEL_420;
      case 11315:
        char v9 = a1;
        int v10 = 81;
LABEL_416:
        v454 = getIntrinsicFnAttributeSet(v9, v10);
        v457[0] = -1;
        v458 = v454;
        unint64_t v7 = 1;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      case 11595:
      case 11597:
      case 11601:
      case 11602:
      case 11603:
      case 11604:
      case 11610:
      case 11611:
      case 11612:
      case 11613:
      case 11614:
      case 11615:
      case 11616:
      case 11617:
      case 11618:
      case 11619:
      case 11620:
      case 11621:
      case 11622:
      case 11623:
      case 11624:
      case 11625:
      case 11626:
      case 11627:
      case 11628:
      case 11630:
      case 11631:
      case 11633:
      case 11634:
      case 11637:
      case 11638:
      case 11641:
      case 11642:
      case 11643:
        v383 = a1;
        int v384 = 5;
LABEL_418:
        uint64_t v47 = getIntrinsicArgAttributeSet(v383, v384);
        int v48 = 1;
LABEL_419:
        v457[0] = v48;
        v458 = v47;
        uint64_t v13 = a1;
        int v14 = 4;
        goto LABEL_420;
      case 11629:
      case 11635:
        v456 = getIntrinsicArgAttributeSet(a1, 5);
        v457[0] = 1;
        v458 = v456;
        v362 = a1;
        int v363 = 5;
LABEL_423:
        v451 = getIntrinsicArgAttributeSet(v362, v363);
        int v452 = 2;
LABEL_424:
        int v459 = v452;
        v460 = v451;
        int v58 = a1;
        int v59 = 4;
LABEL_411:
        v453 = getIntrinsicFnAttributeSet(v58, v59);
        int v461 = -1;
        v462 = v453;
        unint64_t v7 = 3;
        return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
      default:
        uint64_t v6 = getIntrinsicArgAttributeSet(a1, 0);
        v457[0] = 2;
LABEL_282:
        v458 = v6;
        uint64_t v13 = a1;
        int v14 = 0;
LABEL_420:
        v455 = getIntrinsicFnAttributeSet(v13, v14);
        int v459 = -1;
        v460 = v455;
        unint64_t v7 = 2;
        break;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  return llvm::AttributeList::get(a1, (uint64_t)v457, v7);
}

void llvm::Function::~Function(llvm::Function *this)
{
  llvm::Function::dropAllReferences(this);
  if (*((void *)this + 11)) {
    llvm::Function::clearArguments(this);
  }
  llvm::Function::clearGC((uint64_t)this);
  std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100]((uint64_t *)this + 13, 0);
  for (uint64_t i = (llvm::Function *)*((void *)this + 10);
        (llvm::Function *)((char *)this + 72) != i;
        uint64_t i = (llvm::Function *)llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase((uint64_t)this + 72, (uint64_t)i))
  {
    ;
  }
  llvm::GlobalObject::~GlobalObject(this);
}

uint64_t llvm::Function::dropAllReferences(llvm::Function *this)
{
  *((_DWORD *)this + 8) &= ~0x1000000u;
  uint64_t v2 = (void *)((char *)this + 72);
  for (uint64_t i = (void *)*((void *)this + 10); i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i - 3;
    if (!i) {
      uint64_t v4 = 0;
    }
    char v5 = v4 + 5;
    for (unsigned int j = (void *)v4[6]; j != v5; unsigned int j = (void *)j[1])
    {
      if (j) {
        uint64_t v7 = (uint64_t)(j - 3);
      }
      else {
        uint64_t v7 = 0;
      }
      llvm::User::dropAllReferences(v7);
    }
  }
  for (k = (void *)*v2; k != v2; k = (void *)*((void *)this + 9))
  {
    uint64_t v9 = *((void *)this + 10);
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(*(void *)(v10 + 56) + 72, v10 + 24);
  }
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0)
  {
    llvm::User::dropAllReferences((uint64_t)this);
    *((_DWORD *)this + 5) &= 0xF8000000;
    *((_WORD *)this + 9) &= 0xFFF1u;
  }
  return llvm::Value::clearMetadata((uint64_t)this);
}

void llvm::Function::clearArguments(llvm::Function *this)
{
  uint64_t v3 = (llvm::Value *)*((void *)this + 11);
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v4 = 40 * v2;
    do
    {
      __int16 v7 = 257;
      llvm::Value::setName(v3, (const llvm::Twine *)v6);
      llvm::Value::~Value(v3, v5);
      uint64_t v3 = (llvm::Value *)((char *)v3 + 40);
      v4 -= 40;
    }
    while (v4);
    uint64_t v3 = (llvm::Value *)*((void *)this + 11);
  }
  operator delete(v3);
  *((void *)this + 11) = 0;
}

uint64_t llvm::Function::clearGC(uint64_t this)
{
  if ((*(_WORD *)(this + 18) & 0x4000) != 0)
  {
    uint64_t v1 = this;
    uint64_t v2 = ***(void ***)this + 2696;
    uint64_t v3 = v1;
    this = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::erase(v2, &v3);
    *(_WORD *)(v1 + 18) &= ~0x4000u;
  }
  return this;
}

void llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  unint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    if (v2 >= 0x666666666666667) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v3 = *((void *)this + 3);
    *((void *)this + 11) = operator new(40 * v2);
    uint64_t v4 = v2;
    if (v2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 40 * v4;
      do
      {
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *(void *)(*(void *)(v3 + 16) + 8 * v6 + 8);
        uint64_t v10 = *((void *)this + 11) + v5;
        __int16 v12 = 257;
        *(void *)uint64_t v10 = v9;
        *(void *)(v10 + 8) = 0;
        LODWORD(v9) = *(_DWORD *)(v10 + 20) & 0xC0000000;
        *(_DWORD *)(v10 + 16) = 21;
        *(_DWORD *)(v10 + 20) = v9;
        *(void *)(v10 + 24) = this;
        *(_DWORD *)(v10 + 32) = v6;
        llvm::Value::setName((llvm::Value *)v10, (const llvm::Twine *)v11);
        v5 += 40;
        uint64_t v6 = v8;
      }
      while (v7 != v5);
    }
  }
  *((_WORD *)this + 9) &= ~1u;
}

void llvm::Function::setGC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xBFFF | ((v3 != 0) << 14);
  uint64_t v4 = **(uint64_t ***)a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  llvm::LLVMContext::setGC(v4, a1, (long long *)__p);
  if (SHIBYTE(v7) < 0)
  {
    uint64_t v5 = __p[0];
    operator delete(v5);
  }
}

unint64_t llvm::Function::lookupIntrinsicID(unsigned char *a1, unint64_t a2)
{
  uint64_t v4 = 5;
  if (a2 < 5) {
    uint64_t v4 = a2;
  }
  v16[0] = (uint64_t)&a1[v4];
  v16[1] = a2 - v4;
  char v18 = 46;
  llvm::StringRef::split(v16, &v18, 1uLL, (uint64_t)v17);
  long long v5 = v17[0];
  uint64_t v6 = (char **)&TargetInfos;
  unint64_t v7 = 19;
  do
  {
    uint64_t v8 = &v6[4 * (v7 >> 1)];
    long long v10 = *(_OWORD *)v8;
    uint64_t v9 = v8 + 4;
    v17[0] = v10;
    int v11 = llvm::StringRef::compare((uint64_t)v17, (const void *)v5, *((size_t *)&v5 + 1));
    if (v11 >= 0) {
      v7 >>= 1;
    }
    else {
      v7 += ~(v7 >> 1);
    }
    if (v11 < 0) {
      uint64_t v6 = v9;
    }
  }
  while (v7);
  if (v6 == off_2655AE228
    || v6[1] != *((char **)&v5 + 1)
    || *((void *)&v5 + 1) && memcmp(*v6, (const void *)v5, *((size_t *)&v5 + 1)))
  {
    uint64_t v6 = (char **)&TargetInfos;
  }
  __int16 v12 = (const char **)&IntrinsicNameTable[(void)v6[2] + 1];
  int v13 = llvm::Intrinsic::lookupLLVMIntrinsicByName(v12, (uint64_t)v6[3], a1, a2);
  if (v13 == -1) {
    return 0;
  }
  unint64_t v14 = v13 + ((unint64_t)((char *)v12 - (char *)IntrinsicNameTable) >> 3);
  if (a2 != strlen(v12[v13]) && ((llvm::Intrinsic::isOverloaded::OTable[v14 >> 3] >> (v14 & 7)) & 1) == 0) {
    return 0;
  }
  return v14;
}

unint64_t llvm::Function::recalculateIntrinsicID(llvm::Function *this)
{
  if ((*((unsigned char *)this + 23) & 0x10) != 0
    && (uint64_t ValueName = (void *)llvm::Value::getValueName((uint64_t ***)this),
        unint64_t v5 = *ValueName,
        uint64_t v3 = ValueName + 2,
        unint64_t v4 = v5,
        v5 >= 5)
    && (*(_DWORD *)v3 == 1836477548 ? (BOOL v6 = v3[4] == 46) : (BOOL v6 = 0), v6))
  {
    *((_DWORD *)this + 8) |= 0x2000u;
    unint64_t result = llvm::Function::lookupIntrinsicID(v3, v4);
  }
  else
  {
    unint64_t result = 0;
    *((_DWORD *)this + 8) &= ~0x2000u;
  }
  *((_DWORD *)this + 9) = result;
  return result;
}

double getIntrinsicNameImpl@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, unint64_t Type@<X4>, std::string *a6@<X8>)
{
  char v31 = 0;
  __int16 v12 = IntrinsicNameTable[a1];
  if (!v12)
  {
    std::string::size_type v14 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_11;
  }
  size_t v13 = strlen(IntrinsicNameTable[a1]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_10:
  }
    memmove(p_dst, v12, v14);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  if (a3)
  {
    uint64_t v18 = 8 * a3;
    uint64_t v19 = (BOOL **)a2;
    do
    {
      getMangledTypeStr(&v27, *v19, &v31);
      int v20 = std::string::insert(&v27, 0, ".");
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      uint64_t v29 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v29 >= 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      if (v29 >= 0) {
        std::string::size_type v23 = HIBYTE(v29);
      }
      else {
        std::string::size_type v23 = (std::string::size_type)__p[1];
      }
      std::string::append(&__dst, (const std::string::value_type *)v22, v23);
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
  if (v31)
  {
    if (!Type) {
      Type = llvm::Intrinsic::getType(*a4, a1, a2, a3);
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &__dst;
    }
    else {
      int v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    llvm::Module::getUniqueIntrinsicName((uint64_t)a4, (uint64_t *)v24, size, a1, Type, (uint64_t)a6);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    double result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a6 = __dst;
  }
  return result;
}

void llvm::Intrinsic::getIntrinsicInfoTableEntries(int a1, unsigned int *a2)
{
  v11[1] = *MEMORY[0x263EF8340];
  unsigned int v3 = IIT_Table[a1 - 1];
  uint64_t v9 = v11;
  long long v10 = xmmword_261E8A740;
  if ((v3 & 0x80000000) != 0)
  {
    int v5 = v3 & 0x7FFFFFFF;
    BOOL v6 = &IIT_LongEncodingTable;
    uint64_t v7 = 14307;
  }
  else
  {
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v9, v3 & 0xF);
      BOOL v4 = v3 > 0xF;
      v3 >>= 4;
    }
    while (v4);
    int v5 = 0;
    BOOL v6 = v9;
    uint64_t v7 = v10;
  }
  unsigned int v8 = v5;
  do
    DecodeIITType(&v8, (uint64_t)v6, v7, 0, a2);
  while (v7 != v8 && v6[v8]);
  if (v9 != v11) {
    free(v9);
  }
}

unsigned int *DecodeIITType(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int *a5)
{
  BOOL v9 = a4 == 43;
  while (2)
  {
    BOOL v10 = v9;
    uint64_t v11 = *a1;
    uint64_t v12 = (v11 + 1);
    *a1 = v12;
    uint64_t v13 = *(unsigned __int8 *)(a2 + v11);
    BOOL v9 = 1;
    unint64_t v14 = 12;
    int v15 = 0;
    switch(*(unsigned char *)(a2 + v11))
    {
      case 1:
        uint64_t v19 = 0x10000000ALL;
        goto LABEL_100;
      case 2:
        goto LABEL_82;
      case 3:
        uint64_t v19 = 0x100000000ALL;
        goto LABEL_100;
      case 4:
        uint64_t v19 = 0x200000000ALL;
        goto LABEL_100;
      case 5:
        uint64_t v19 = 0x400000000ALL;
        goto LABEL_100;
      case 6:
        uint64_t v19 = 5;
        goto LABEL_100;
      case 7:
        uint64_t v19 = 7;
        goto LABEL_100;
      case 8:
        uint64_t v19 = 8;
        goto LABEL_100;
      case 9:
        uint64_t v16 = 2;
        if (v10) {
          uint64_t v16 = 0x100000002;
        }
        goto LABEL_22;
      case 0xA:
        uint64_t v16 = 0x100000004;
        BOOL v17 = !v10;
        uint64_t v18 = 4;
        goto LABEL_19;
      case 0xB:
        uint64_t v16 = 0x100000008;
        BOOL v17 = !v10;
        uint64_t v18 = 8;
        goto LABEL_19;
      case 0xC:
        uint64_t v16 = 0x100000010;
        BOOL v17 = !v10;
        uint64_t v18 = 16;
        goto LABEL_19;
      case 0xD:
        uint64_t v16 = 0x100000020;
        BOOL v17 = !v10;
        uint64_t v18 = 32;
        goto LABEL_19;
      case 0xE:
        goto LABEL_23;
      case 0xF:
        if (a3 == v12)
        {
          uint64_t v19 = 14;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 14;
        goto LABEL_99;
      case 0x10:
        uint64_t v16 = 0x100000040;
        BOOL v17 = !v10;
        uint64_t v18 = 64;
        goto LABEL_19;
      case 0x11:
        uint64_t v19 = 2;
        goto LABEL_100;
      case 0x12:
        uint64_t v19 = 3;
        goto LABEL_100;
      case 0x13:
        uint64_t v19 = 4;
        goto LABEL_100;
      case 0x14:
        goto LABEL_80;
      case 0x15:
        uint64_t v20 = 2;
        goto LABEL_74;
      case 0x16:
        uint64_t v20 = 3;
        goto LABEL_74;
      case 0x17:
        uint64_t v20 = 4;
        goto LABEL_74;
      case 0x18:
        uint64_t v20 = 5;
        goto LABEL_74;
      case 0x19:
        if (a3 == v12)
        {
          uint64_t v19 = 15;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 15;
        goto LABEL_99;
      case 0x1A:
        if (a3 == v12)
        {
          uint64_t v19 = 16;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 16;
        goto LABEL_99;
      case 0x1B:
        int v15 = 0;
        *a1 = v11 + 2;
        unint64_t v14 = ((unint64_t)*(unsigned __int8 *)(a2 + v12) << 32) | 0xC;
        goto LABEL_23;
      case 0x1C:
        uint64_t v16 = 0x100000001;
        if (!v10) {
          uint64_t v16 = 1;
        }
        goto LABEL_22;
      case 0x1D:
        uint64_t v19 = 1;
        goto LABEL_100;
      case 0x1E:
        if (a3 == v12)
        {
          uint64_t v19 = 17;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 17;
        goto LABEL_99;
      case 0x1F:
        if (a3 == v12)
        {
          uint64_t v19 = 18;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 18;
        goto LABEL_99;
      case 0x20:
        if (a3 == v12)
        {
          uint64_t v19 = 19;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 19;
        goto LABEL_99;
      case 0x21:
        if (a3 == v12)
        {
          uint64_t v19 = 20;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 20;
        goto LABEL_99;
      case 0x22:
        if (a3 == v12)
        {
          unint64_t v21 = 0;
          uint64_t v22 = 21;
          goto LABEL_107;
        }
        uint64_t v26 = (v11 + 2);
        *a1 = v26;
        uint64_t v27 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v28 = 21;
        goto LABEL_104;
      case 0x23:
        uint64_t v19 = 0x800000000ALL;
        goto LABEL_100;
      case 0x24:
        uint64_t v16 = 0x100000200;
        BOOL v17 = !v10;
        uint64_t v18 = 512;
        goto LABEL_19;
      case 0x25:
        uint64_t v16 = 0x100000400;
        BOOL v17 = !v10;
        uint64_t v18 = 1024;
        goto LABEL_19;
      case 0x26:
        uint64_t v20 = 6;
        goto LABEL_74;
      case 0x27:
        uint64_t v20 = 7;
        goto LABEL_74;
      case 0x28:
        uint64_t v20 = 8;
        goto LABEL_74;
      case 0x29:
        uint64_t v19 = 9;
        goto LABEL_100;
      case 0x2A:
        if (a3 == v12)
        {
          uint64_t v19 = 22;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 22;
        goto LABEL_99;
      case 0x2B:
        continue;
      case 0x2C:
        if (a3 == v12)
        {
          uint64_t v19 = 23;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 23;
        goto LABEL_99;
      case 0x2D:
        if (a3 == v12)
        {
          uint64_t v19 = 24;
          goto LABEL_100;
        }
        *a1 = v11 + 2;
        uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
        uint64_t v25 = 24;
        goto LABEL_99;
      case 0x2E:
        if (a3 == v12)
        {
          uint64_t v19 = 25;
        }
        else
        {
          *a1 = v11 + 2;
          uint64_t v24 = *(unsigned __int8 *)(a2 + v12);
          uint64_t v25 = 25;
LABEL_99:
          uint64_t v19 = v25 | (v24 << 32);
        }
LABEL_100:
        return llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(a5, v19, 0);
      case 0x2F:
        uint64_t v16 = 0x100000080;
        BOOL v17 = !v10;
        uint64_t v18 = 128;
        goto LABEL_19;
      case 0x30:
        uint64_t v19 = 6;
        goto LABEL_100;
      case 0x31:
        uint64_t v20 = 9;
LABEL_74:
        llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(a5, (v20 << 32) | 0xD, 0);
        do
        {
          double result = (unsigned int *)DecodeIITType(a1, a2, a3, v13, a5);
          LODWORD(v20) = v20 - 1;
        }
        while (v20);
        return result;
      case 0x32:
        uint64_t v16 = 0x100000100;
        BOOL v17 = !v10;
        uint64_t v18 = 256;
LABEL_19:
        if (v17) {
          uint64_t v16 = v18;
        }
        goto LABEL_22;
      case 0x33:
        uint64_t v19 = 26;
        goto LABEL_100;
      case 0x34:
        uint64_t v19 = 27;
        goto LABEL_100;
      case 0x35:
        uint64_t v16 = 3;
        if (v10) {
          uint64_t v16 = 0x100000003;
        }
LABEL_22:
        LOBYTE(v29) = BYTE4(v16);
        unint64_t v14 = __PAIR64__(v16, 11);
        int v15 = v29;
LABEL_23:
        llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(a5, v14, v15);
        BOOL v9 = 0;
        continue;
      case 0x36:
        llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(a5, 0xA0000000CLL, 0);
LABEL_80:
        uint64_t v19 = 13;
        goto LABEL_100;
      case 0x37:
        llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(a5, 0x140000000CLL, 0);
LABEL_82:
        uint64_t v19 = 0x80000000ALL;
        goto LABEL_100;
      case 0x38:
        if (a3 == v12)
        {
          unint64_t v21 = 0;
          uint64_t v22 = 28;
        }
        else
        {
          uint64_t v26 = (v11 + 2);
          *a1 = v26;
          uint64_t v27 = *(unsigned __int8 *)(a2 + v12);
          uint64_t v28 = 28;
LABEL_104:
          uint64_t v22 = v28 | (v27 << 48);
          if (a3 == v26)
          {
            unint64_t v21 = 0;
          }
          else
          {
            *a1 = v11 + 3;
            unint64_t v21 = (unint64_t)*(unsigned __int8 *)(a2 + v26) << 32;
          }
        }
LABEL_107:
        uint64_t v19 = v21 | v22;
        goto LABEL_100;
      case 0x39:
        uint64_t v19 = 0x20000000ALL;
        goto LABEL_100;
      case 0x3A:
        uint64_t v19 = 0x40000000ALL;
        goto LABEL_100;
      default:
        uint64_t v19 = 0;
        goto LABEL_100;
    }
  }
}

unint64_t llvm::Intrinsic::getType(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v22[12] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2, (unsigned int *)&v20);
  int v15 = (unsigned int *)v20;
  uint64_t v16 = v21;
  DecodeFixedType(&v15, a3, a4, a1);
  unsigned int v8 = v7;
  BOOL v17 = v19;
  uint64_t v18 = 0x800000000;
  if (v16)
  {
    do
    {
      DecodeFixedType(&v15, a3, a4, a1);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v17, v9);
    }
    while (v16);
    uint64_t v10 = v18;
    uint64_t v11 = (uint64_t *)v17;
    if (v18)
    {
      if (*(unsigned char *)(*((void *)v17 + v18 - 1) + 8) == 7)
      {
        uint64_t v10 = (v18 - 1);
        LODWORD(v18) = v18 - 1;
        uint64_t v12 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = (uint64_t *)v19;
  }
LABEL_9:
  unint64_t v13 = llvm::FunctionType::get(v8, v11, v10, (unint64_t *)v12);
  if (v17 != v19) {
    free(v17);
  }
  if (v20 != v22) {
    free(v20);
  }
  return v13;
}

void DecodeFixedType(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned char v33[8] = *MEMORY[0x263EF8340];
  uint64_t v4 = **a1;
  int v5 = *(llvm::LLVMContext **)(*a1 + 1);
  uint64_t v6 = (uint64_t)a1[1] - 1;
  *a1 += 3;
  a1[1] = (unsigned int *)v6;
  switch(v4)
  {
    case 10:
      unint64_t v13 = (llvm::IntegerType *)a4;
      unint64_t v14 = v5;
      goto LABEL_28;
    case 11:
      int v15 = (uint64_t **)DecodeFixedType(a1, a2, a3, a4);
      uint64_t v16 = v5;
      goto LABEL_38;
    case 12:
      BOOL v17 = (llvm::PointerType **)DecodeFixedType(a1, a2, a3, a4);
      uint64_t v18 = v5;
      goto LABEL_46;
    case 13:
      char v31 = v33;
      uint64_t v32 = 0x800000000;
      if (v5)
      {
        do
        {
          uint64_t v19 = DecodeFixedType(a1, a2, a3, a4);
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v31, v19);
          LODWORD(v5) = v5 - 1;
        }
        while (v5);
        uint64_t v20 = v31;
        uint64_t v21 = v32;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = v33;
      }
      llvm::StructType::get(a4, (uint64_t)v20, v21, 0);
      if (v31 != v33) {
        free(v31);
      }
      return;
    case 15:
      uint64_t v22 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v22) {
        BOOL v23 = (*(_DWORD *)(v22 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v23 = 0;
      }
      if (!v23)
      {
        unint64_t v14 = (llvm::LLVMContext *)((*(_DWORD *)(v22 + 8) >> 7) & 0x1FFFFFE);
        goto LABEL_27;
      }
      llvm::VectorType::getExtendedElementVectorType(v22);
      break;
    case 16:
      uint64_t v24 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v24) {
        BOOL v25 = (*(_DWORD *)(v24 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        llvm::VectorType::getTruncatedElementVectorType((uint64_t **)v24);
      }
      else
      {
        unint64_t v14 = (llvm::LLVMContext *)(*(_DWORD *)(v24 + 8) >> 9);
LABEL_27:
        unint64_t v13 = (llvm::IntegerType *)a4;
LABEL_28:
        llvm::IntegerType::get(v13, v14);
      }
      break;
    case 17:
      uint64_t v26 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      int v15 = *(uint64_t ***)(v26 + 24);
      uint64_t v16 = (llvm::Type *)(((unint64_t)*(unsigned int *)(v26 + 32) >> 1) | ((unint64_t)(*(unsigned char *)(v26 + 8) == 19) << 32));
      goto LABEL_38;
    case 18:
      int v15 = (uint64_t **)DecodeFixedType(a1, a2, a3, a4);
      uint64_t v27 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if (v27) {
        BOOL v28 = (*(_DWORD *)(v27 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v28 = 0;
      }
      if (!v28) {
        return;
      }
      uint64_t v16 = (llvm::Type *)(*(unsigned int *)(v27 + 32) | ((unint64_t)(*(_DWORD *)(v27 + 8) == 19) << 32));
LABEL_38:
      llvm::VectorType::get(v15, v16);
      return;
    case 19:
      BOOL v17 = *(llvm::PointerType ***)(a2 + (v5 & 0xFFFFFFF8));
      goto LABEL_45;
    case 20:
      uint64_t v29 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      if ((*(_DWORD *)(v29 + 8) & 0xFE) != 0x12) {
        uint64_t v29 = 0;
      }
      BOOL v17 = *(llvm::PointerType ***)(v29 + 24);
LABEL_45:
      uint64_t v18 = 0;
LABEL_46:
      llvm::PointerType::get(v17, v18);
      return;
    case 23:
    case 24:
      if ((*(_DWORD *)(*(void *)(a2 + (v5 & 0xFFFFFFF8)) + 8) & 0xFE) == 0x12) {
        uint64_t v11 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      }
      else {
        uint64_t v11 = 0;
      }
      if (v4 == 23) {
        int v12 = 1;
      }
      else {
        int v12 = 2;
      }
      llvm::VectorType::getSubdividedVectorType(v11, v12);
      return;
    case 25:
      if ((*(_DWORD *)(*(void *)(a2 + (v5 & 0xFFFFFFF8)) + 8) & 0xFE) == 0x12) {
        uint64_t v30 = *(void *)(a2 + (v5 & 0xFFFFFFF8));
      }
      else {
        uint64_t v30 = 0;
      }
      llvm::VectorType::getInteger(v30);
      return;
    default:
      return;
  }
}

uint64_t *getIntrinsicFnAttributeSet(uint64_t *a1, int a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1;
  switch(a2)
  {
    case 1:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      BOOL v17 = v2;
      int v18 = 66;
      goto LABEL_55;
    case 2:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 1;
      goto LABEL_84;
    case 3:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      uint64_t v22 = v2;
      int v23 = 66;
      goto LABEL_48;
    case 4:
    case 26:
    case 52:
      int v3 = 36;
      goto LABEL_99;
    case 5:
    case 33:
    case 72:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      uint64_t v4 = v2;
      int v5 = 66;
      goto LABEL_65;
    case 6:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 27;
      goto LABEL_38;
    case 7:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v24 = v2;
      int v25 = 23;
      goto LABEL_26;
    case 8:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      goto LABEL_38;
    case 9:
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      return llvm::AttributeSetNode::get(a1, v26, v27);
    case 10:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 3;
      goto LABEL_96;
    case 11:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 1;
      goto LABEL_96;
    case 12:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 31;
      goto LABEL_38;
    case 13:
      unint64_t v53 = llvm::Attribute::get(a1, 20, 0);
      uint64_t v6 = v2;
      int v7 = 34;
      goto LABEL_23;
    case 14:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 2;
      goto LABEL_84;
    case 15:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v24 = v2;
      int v25 = 57;
LABEL_26:
      unint64_t v58 = llvm::Attribute::get(v24, v25, 0);
      uint64_t v30 = v2;
      uint64_t v31 = 12;
      goto LABEL_59;
    case 16:
    case 59:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unsigned int v8 = v2;
      int v9 = 66;
      goto LABEL_46;
    case 17:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v32 = v2;
      int v33 = 6;
      goto LABEL_58;
    case 18:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 23;
      goto LABEL_83;
    case 19:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 21;
      goto LABEL_84;
    case 20:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 42;
      goto LABEL_84;
    case 21:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v4 = v2;
      int v5 = 80;
      uint64_t v34 = 3;
      goto LABEL_66;
    case 22:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 66, 0);
      BOOL v28 = v2;
      int v29 = 80;
      uint64_t v35 = 3;
      goto LABEL_79;
    case 23:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v4 = v2;
      int v5 = 80;
      uint64_t v34 = 2;
      goto LABEL_66;
    case 24:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 34, 0);
      uint64_t v36 = v2;
      int v37 = 66;
      goto LABEL_74;
    case 25:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 15;
      goto LABEL_84;
    case 27:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v38 = v2;
      int v39 = 66;
      goto LABEL_94;
    case 28:
    case 31:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 31, 0);
      uint64_t v10 = v2;
      int v11 = 5;
      goto LABEL_89;
    case 29:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 20;
      goto LABEL_38;
    case 30:
      int v40 = 36;
      goto LABEL_92;
    case 32:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 24, 0);
      uint64_t v10 = v2;
      int v11 = 66;
      goto LABEL_89;
    case 34:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 15;
      goto LABEL_90;
    case 35:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 4;
      goto LABEL_84;
    case 36:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      uint64_t v42 = v2;
      int v43 = 66;
      goto LABEL_50;
    case 37:
    case 38:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 66;
LABEL_38:
      uint64_t v14 = 0;
      goto LABEL_96;
    case 39:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      BOOL v17 = v2;
      int v18 = 6;
      goto LABEL_55;
    case 40:
    case 41:
    case 51:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      uint64_t v6 = v2;
      int v7 = 20;
LABEL_23:
      unint64_t v54 = llvm::Attribute::get(v6, v7, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      BOOL v28 = v2;
      int v29 = 66;
      goto LABEL_78;
    case 42:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      unsigned int v8 = v2;
      int v9 = 6;
LABEL_46:
      unint64_t v57 = llvm::Attribute::get(v8, v9, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 3;
      goto LABEL_84;
    case 43:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v22 = v2;
      int v23 = 6;
LABEL_48:
      unint64_t v57 = llvm::Attribute::get(v22, v23, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 12;
      goto LABEL_84;
    case 44:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v42 = v2;
      int v43 = 6;
LABEL_50:
      unint64_t v57 = llvm::Attribute::get(v42, v43, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      uint64_t v21 = 8;
      goto LABEL_84;
    case 45:
    case 47:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v4 = v2;
      int v5 = 6;
      goto LABEL_65;
    case 46:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 31, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      uint64_t v4 = v2;
      int v5 = 5;
      goto LABEL_65;
    case 48:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      uint64_t v10 = v2;
      int v11 = 24;
      goto LABEL_89;
    case 49:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      unint64_t v58 = llvm::Attribute::get(v2, 57, 0);
      uint64_t v30 = v2;
      uint64_t v31 = 21;
      goto LABEL_59;
    case 50:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      BOOL v17 = v2;
      int v18 = 57;
LABEL_55:
      unint64_t v57 = llvm::Attribute::get(v17, v18, 0);
      uint64_t v19 = v2;
      int v20 = 80;
      goto LABEL_83;
    case 53:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      int v15 = v2;
      int v16 = 6;
      goto LABEL_57;
    case 54:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      BOOL v28 = v2;
      int v29 = 6;
      goto LABEL_78;
    case 55:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      BOOL v28 = v2;
      int v29 = 80;
      uint64_t v35 = 8;
      goto LABEL_79;
    case 56:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 21;
      goto LABEL_96;
    case 57:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      uint64_t v44 = v2;
      int v45 = 66;
      goto LABEL_70;
    case 58:
      unint64_t v53 = llvm::Attribute::get(a1, 20, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v4 = v2;
      int v5 = 80;
LABEL_65:
      uint64_t v34 = 0;
LABEL_66:
      unint64_t v57 = llvm::Attribute::get(v4, v5, v34);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 5;
      return llvm::AttributeSetNode::get(a1, v26, v27);
    case 60:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 3;
      goto LABEL_90;
    case 61:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v46 = v2;
      int v47 = 20;
      goto LABEL_88;
    case 62:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      uint64_t v44 = v2;
      int v45 = 20;
LABEL_70:
      unint64_t v54 = llvm::Attribute::get(v44, v45, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      goto LABEL_89;
    case 63:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 1;
      goto LABEL_90;
    case 64:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 6, 0);
      BOOL v28 = v2;
      int v29 = 80;
      uint64_t v35 = 12;
      goto LABEL_79;
    case 65:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      uint64_t v36 = v2;
      int v37 = 6;
LABEL_74:
      unint64_t v55 = llvm::Attribute::get(v36, v37, 0);
      BOOL v28 = v2;
      int v29 = 80;
      uint64_t v35 = 2;
      goto LABEL_79;
    case 66:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      int v48 = v2;
      int v49 = 6;
      goto LABEL_77;
    case 67:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      int v48 = v2;
      int v49 = 57;
LABEL_77:
      unint64_t v55 = llvm::Attribute::get(v48, v49, 0);
      BOOL v28 = v2;
      int v29 = 80;
LABEL_78:
      uint64_t v35 = 0;
LABEL_79:
      unint64_t v56 = llvm::Attribute::get(v28, v29, v35);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 4;
      return llvm::AttributeSetNode::get(a1, v26, v27);
    case 68:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 12;
      goto LABEL_90;
    case 69:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      uint64_t v50 = v2;
      int v51 = 20;
      goto LABEL_86;
    case 70:
    case 81:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 2;
      goto LABEL_96;
    case 71:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      unint64_t v57 = llvm::Attribute::get(v2, 66, 0);
      uint64_t v19 = v2;
      int v20 = 27;
LABEL_83:
      uint64_t v21 = 0;
LABEL_84:
      unint64_t v58 = llvm::Attribute::get(v19, v20, v21);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 6;
      return llvm::AttributeSetNode::get(a1, v26, v27);
    case 73:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      uint64_t v50 = v2;
      int v51 = 23;
LABEL_86:
      unint64_t v54 = llvm::Attribute::get(v50, v51, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 2;
      goto LABEL_90;
    case 74:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v46 = v2;
      int v47 = 66;
LABEL_88:
      unint64_t v54 = llvm::Attribute::get(v46, v47, 0);
      uint64_t v10 = v2;
      int v11 = 6;
LABEL_89:
      uint64_t v41 = 0;
      goto LABEL_90;
    case 75:
      int v40 = 31;
LABEL_92:
      unint64_t v53 = llvm::Attribute::get(a1, v40, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 42;
      goto LABEL_96;
    case 76:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v38 = v2;
      int v39 = 23;
LABEL_94:
      unint64_t v54 = llvm::Attribute::get(v38, v39, 0);
      uint64_t v10 = v2;
      int v11 = 80;
      uint64_t v41 = 42;
LABEL_90:
      unint64_t v55 = llvm::Attribute::get(v10, v11, v41);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 3;
      return llvm::AttributeSetNode::get(a1, v26, v27);
    case 77:
    case 79:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 15;
      goto LABEL_96;
    case 78:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      int v12 = v2;
      int v13 = 80;
      uint64_t v14 = 12;
LABEL_96:
      unint64_t v54 = llvm::Attribute::get(v12, v13, v14);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 2;
      break;
    case 80:
      int v3 = 31;
LABEL_99:
      unint64_t v53 = llvm::Attribute::get(a1, v3, 0);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 1;
      break;
    default:
      unint64_t v53 = llvm::Attribute::get(a1, 36, 0);
      unint64_t v54 = llvm::Attribute::get(v2, 20, 0);
      unint64_t v55 = llvm::Attribute::get(v2, 34, 0);
      unint64_t v56 = llvm::Attribute::get(v2, 24, 0);
      int v15 = v2;
      int v16 = 66;
LABEL_57:
      unint64_t v57 = llvm::Attribute::get(v15, v16, 0);
      uint64_t v32 = v2;
      int v33 = 57;
LABEL_58:
      unint64_t v58 = llvm::Attribute::get(v32, v33, 0);
      uint64_t v30 = v2;
      uint64_t v31 = 0;
LABEL_59:
      unint64_t v59 = llvm::Attribute::get(v30, 80, v31);
      uint64_t v26 = &v53;
      a1 = v2;
      uint64_t v27 = 7;
      break;
  }
  return llvm::AttributeSetNode::get(a1, v26, v27);
}

uint64_t *getIntrinsicArgAttributeSet(uint64_t *a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      int v3 = 35;
      goto LABEL_21;
    case 2:
      int v3 = 67;
      goto LABEL_21;
    case 3:
      int v7 = 21;
      goto LABEL_12;
    case 4:
      int v3 = 44;
      goto LABEL_21;
    case 5:
      int v3 = 21;
      goto LABEL_21;
    case 6:
      unint64_t v14 = llvm::Attribute::get(a1, 21, 0);
      unsigned int v8 = a1;
      int v9 = 44;
      goto LABEL_17;
    case 7:
      int v6 = 21;
      goto LABEL_16;
    case 8:
      unint64_t v14 = llvm::Attribute::get(a1, 21, 0);
      unint64_t v15 = llvm::Attribute::get(a1, 18, 0);
      uint64_t v4 = a1;
      int v5 = 67;
      goto LABEL_19;
    case 9:
      unint64_t v14 = llvm::Attribute::get(a1, 21, 0);
      unint64_t v15 = llvm::Attribute::get(a1, 18, 0);
      uint64_t v4 = a1;
      int v5 = 45;
LABEL_19:
      unint64_t v16 = llvm::Attribute::get(v4, v5, 0);
      uint64_t v10 = a1;
      uint64_t v11 = 3;
      return llvm::AttributeSetNode::get(v10, &v14, v11);
    case 10:
      int v3 = 46;
      goto LABEL_21;
    case 11:
      int v3 = 38;
      goto LABEL_21;
    case 12:
      int v3 = 45;
      goto LABEL_21;
    case 13:
      int v3 = 75;
      uint64_t v12 = 4;
      goto LABEL_22;
    case 14:
      int v6 = 18;
LABEL_16:
      unint64_t v14 = llvm::Attribute::get(a1, v6, 0);
      unsigned int v8 = a1;
      int v9 = 67;
      goto LABEL_17;
    case 15:
      int v7 = 18;
LABEL_12:
      unint64_t v14 = llvm::Attribute::get(a1, v7, 0);
      unsigned int v8 = a1;
      int v9 = 45;
LABEL_17:
      unint64_t v15 = llvm::Attribute::get(v8, v9, 0);
      uint64_t v10 = a1;
      uint64_t v11 = 2;
      break;
    default:
      int v3 = 10;
LABEL_21:
      uint64_t v12 = 0;
LABEL_22:
      unint64_t v14 = llvm::Attribute::get(a1, v3, v12);
      uint64_t v10 = a1;
      uint64_t v11 = 1;
      break;
  }
  return llvm::AttributeSetNode::get(v10, &v14, v11);
}

uint64_t llvm::Intrinsic::getDeclaration(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  Type = (llvm::PointerType **)llvm::Intrinsic::getType(*a1, a2, a3, a4);
  if (a4)
  {
    getIntrinsicNameImpl(a2, a3, a4, a1, (unint64_t)Type, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    llvm::Module::getOrInsertFunction((uint64_t)a1, (uint64_t *)p_p, size, Type, 0);
    uint64_t v12 = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v13 = (uint64_t *)IntrinsicNameTable[a2];
    if (v13) {
      size_t v14 = strlen(IntrinsicNameTable[a2]);
    }
    else {
      size_t v14 = 0;
    }
    llvm::Module::getOrInsertFunction((uint64_t)a1, v13, v14, Type, 0);
    return v15;
  }
  return v12;
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature(uint64_t a1, unsigned int **a2, unsigned int *a3)
{
  v18[6] = *MEMORY[0x263EF8340];
  unint64_t v16 = v18;
  uint64_t v17 = 0x200000000;
  if (matchIntrinsicType(**(void **)(a1 + 16), a2, a3, (uint64_t)&v16, 0))
  {
    uint64_t v6 = 1;
    goto LABEL_18;
  }
  unsigned int v7 = v17;
  uint64_t v8 = 8 * *(unsigned int *)(a1 + 12) - 8;
  if (8 * *(unsigned int *)(a1 + 12) != 8)
  {
    int v9 = (uint64_t *)(*(void *)(a1 + 16) + 8);
    uint64_t v10 = 8 * (v8 >> 3);
    do
    {
      if (matchIntrinsicType(*v9, a2, a3, (uint64_t)&v16, 0))
      {
        uint64_t v6 = 2;
        goto LABEL_18;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
    unsigned int v11 = v17;
    if (v17) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  unsigned int v11 = v17;
  if (!v17)
  {
LABEL_13:
    uint64_t v6 = 0;
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = v11;
  while ((matchIntrinsicType(*(void *)((char *)v16 + v12), (unsigned int **)((char *)v16 + v12 + 8), a3, (uint64_t)&v16, 1) & 1) == 0)
  {
    ++v13;
    v12 += 24;
    if (v14 == v13) {
      goto LABEL_13;
    }
  }
  if (v7 > v13) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 2;
  }
LABEL_18:
  if (v16 != v18) {
    free(v16);
  }
  return v6;
}

uint64_t matchIntrinsicType(uint64_t a1, unsigned int **a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v5 = a2[1];
  if (v5)
  {
    long long v63 = *(_OWORD *)a2;
    uint64_t v8 = (unsigned __int8 *)*a2;
    uint64_t v9 = **a2;
    unint64_t v10 = (*a2)[1];
    int v11 = *((unsigned __int8 *)*a2 + 8);
    uint64_t v12 = (char *)v5 - 1;
    uint64_t v13 = *a2 + 3;
    *a2 = v13;
    a2[1] = (unsigned int *)((char *)v5 - 1);
    uint64_t result = 1;
    switch(v9)
    {
      case 1:
        return result;
      case 2:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 10;
        return !v30;
      case 3:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 12;
        return !v30;
      case 4:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 9;
        return !v30;
      case 5:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 0;
        return !v30;
      case 6:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 1;
        return !v30;
      case 7:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 2;
        return !v30;
      case 8:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 3;
        return !v30;
      case 9:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 5;
        return !v30;
      case 10:
        BOOL v30 = *(_DWORD *)(a1 + 8) == 13 && v10 == *(_DWORD *)(a1 + 8) >> 8;
        return !v30;
      case 11:
        if (!a1 || (*(_DWORD *)(a1 + 8) & 0xFE) != 0x12) {
          return result;
        }
        if (*(_DWORD *)(a1 + 32) != v10 || v11 != (*(_DWORD *)(a1 + 8) == 19)) {
          return result;
        }
        uint64_t v32 = *(void *)(a1 + 24);
        return matchIntrinsicType(v32, a2, a3, a4, a5);
      case 12:
        if (!a1) {
          return result;
        }
        if (*(_DWORD *)(a1 + 8) != 15 || *(_DWORD *)(a1 + 8) >> 8 != v10) {
          return result;
        }
        unsigned int v34 = *v13;
        if (*(void *)(a1 + 24))
        {
          if (v34 != 13 || *((_DWORD *)v8 + 4))
          {
            uint64_t v32 = **(void **)(a1 + 16);
            return matchIntrinsicType(v32, a2, a3, a4, a5);
          }
          uint64_t result = 0;
          int v61 = (unsigned int *)((char *)v5 - 2);
        }
        else
        {
          if (v34 - 11 <= 1)
          {
            do
            {
              --v12;
              unsigned int v60 = *((_DWORD *)v8 + 6) - 11;
              v8 += 12;
            }
            while (v60 < 2);
          }
          uint64_t result = 0;
          int v61 = (unsigned int *)(v12 - 1);
        }
        *a2 = (unsigned int *)(v8 + 24);
        a2[1] = v61;
        return result;
      case 13:
        if (!a1 || (*(_DWORD *)(a1 + 8) & 0x6FF) != 0x410 || *(_DWORD *)(a1 + 12) != v10) {
          return result;
        }
        if (!v10) {
          return 0;
        }
        uint64_t v35 = 0;
        uint64_t v36 = 8 * v10 - 8;
        do
        {
          uint64_t result = matchIntrinsicType(*(void *)(*(void *)(a1 + 16) + v35), a2, a3, a4, a5);
          if (result) {
            break;
          }
          BOOL v19 = v36 == v35;
          v35 += 8;
        }
        while (!v19);
        return result;
      case 14:
        unsigned int v22 = a3[2];
        if (v22 <= (v10 >> 3))
        {
          int v57 = v10 & 7;
          if (v22 >= (v10 >> 3) && v57 != 7)
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, a1);
            uint64_t result = 0;
            switch(v57)
            {
              case 1:
                if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
                  int v59 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 8);
                }
                else {
                  int v59 = *(_DWORD *)(a1 + 8);
                }
                BOOL v30 = v59 == 13;
                return !v30;
              case 2:
                int v62 = *(_DWORD *)(a1 + 8);
                if ((v62 & 0xFE) == 0x12) {
                  int v62 = *(_DWORD *)(**(void **)(a1 + 16) + 8);
                }
                if v62 < 6u && ((0x2Fu >> v62)) {
                  return 0;
                }
                BOOL v30 = (v62 & 0xFD) == 4;
                return !v30;
              case 3:
                BOOL v30 = (*(_DWORD *)(a1 + 8) & 0xFE) == 18;
                return !v30;
              case 4:
                BOOL v30 = *(unsigned char *)(a1 + 8) == 15;
                return !v30;
              default:
                return result;
            }
          }
          goto LABEL_164;
        }
        uint64_t v23 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
LABEL_130:
        BOOL v30 = v23 == a1;
        return !v30;
      case 15:
        if (a3[2] <= (v10 >> 3)) {
          goto LABEL_164;
        }
        uint64_t v37 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        unsigned int v38 = *(_DWORD *)(v37 + 8);
        if (v37) {
          BOOL v39 = (*(_DWORD *)(v37 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v39 = 0;
        }
        if (v39)
        {
          llvm::VectorType::getExtendedElementVectorType(v37);
          goto LABEL_169;
        }
        if (v37) {
          BOOL v40 = *(_DWORD *)(v37 + 8) == 13;
        }
        else {
          BOOL v40 = 0;
        }
        if (v40)
        {
          BOOL v28 = *(uint64_t **)v37;
          int v29 = (llvm::LLVMContext *)((v38 >> 7) & 0x1FFFFFE);
          goto LABEL_77;
        }
        return 1;
      case 16:
        if (a3[2] <= (v10 >> 3)) {
          goto LABEL_164;
        }
        uint64_t v24 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        unsigned int v25 = *(_DWORD *)(v24 + 8);
        if (v24) {
          BOOL v26 = (*(_DWORD *)(v24 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          llvm::VectorType::getTruncatedElementVectorType((uint64_t **)v24);
        }
        else
        {
          if (v24) {
            BOOL v27 = *(_DWORD *)(v24 + 8) == 13;
          }
          else {
            BOOL v27 = 0;
          }
          if (!v27) {
            return 1;
          }
          BOOL v28 = *(uint64_t **)v24;
          int v29 = (llvm::LLVMContext *)(v25 >> 9);
LABEL_77:
          uint64_t v21 = llvm::IntegerType::get((llvm::IntegerType *)v28, v29);
        }
LABEL_169:
        BOOL v30 = v21 == (void *)a1;
        return !v30;
      case 17:
        if (a3[2] <= (v10 >> 3)) {
          goto LABEL_164;
        }
        uint64_t v41 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        if ((*(_DWORD *)(v41 + 8) & 0xFE) != 0x12) {
          return 1;
        }
        llvm::VectorType::getHalfElementsVectorType(v41);
        goto LABEL_169;
      case 18:
        if (a3[2] > (v10 >> 3))
        {
          if ((*(_DWORD *)(*(void *)(*(void *)a3 + 8 * (v10 >> 3)) + 8) & 0xFE) == 0x12) {
            uint64_t v42 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
          }
          else {
            uint64_t v42 = 0;
          }
          if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
            uint64_t v43 = a1;
          }
          else {
            uint64_t v43 = 0;
          }
          if ((v42 == 0) != (v43 != 0))
          {
            if (v43)
            {
              int v44 = *(_DWORD *)(v42 + 32);
              BOOL v45 = *(unsigned __int8 *)(v42 + 8) == 19;
              if (v44 != *(_DWORD *)(v43 + 32) || ((v45 ^ (*(unsigned char *)(v43 + 8) == 19)) & 1) != 0) {
                return result;
              }
              a1 = *(void *)(v43 + 24);
            }
            uint64_t v32 = a1;
            return matchIntrinsicType(v32, a2, a3, a4, a5);
          }
          return result;
        }
        *a2 = (unsigned int *)(v8 + 24);
        a2[1] = (unsigned int *)((char *)v5 - 2);
LABEL_164:
        if (a5) {
          return result;
        }
        goto LABEL_165;
      case 19:
        if (a3[2] <= (v10 >> 3)) {
          goto LABEL_164;
        }
        if (!a1 || *(unsigned char *)(a1 + 8) != 15) {
          return result;
        }
        uint64_t v46 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        uint64_t v47 = *(void *)(a1 + 24);
        goto LABEL_151;
      case 20:
        if (a3[2] <= (v10 >> 3)) {
          goto LABEL_164;
        }
        uint64_t v48 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        if ((*(_DWORD *)(v48 + 8) & 0xFE) != 0x12) {
          uint64_t v48 = 0;
        }
        if (*(unsigned char *)(a1 + 8) == 15) {
          uint64_t v49 = a1;
        }
        else {
          uint64_t v49 = 0;
        }
        if (!v49) {
          return result;
        }
        goto LABEL_149;
      case 21:
        if (a3[2] <= (unsigned __int16)v10) {
          goto LABEL_154;
        }
        uint64_t v50 = (unsigned __int16)v10;
        if ((a5 & 1) == 0) {
          llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, a1);
        }
        uint64_t v48 = *(void *)(*(void *)a3 + 8 * v50);
        if ((*(_DWORD *)(v48 + 8) & 0xFE) != 0x12) {
          uint64_t v48 = 0;
        }
        if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
          uint64_t v51 = a1;
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t result = 1;
        if (!v51) {
          return result;
        }
        if (!v48) {
          return result;
        }
        if (*(_DWORD *)(v48 + 32) != *(_DWORD *)(v51 + 32)) {
          return result;
        }
        if ((*(unsigned char *)(v48 + 8) == 19) != (*(unsigned char *)(v51 + 8) == 19)) {
          return result;
        }
        uint64_t v49 = *(void *)(v51 + 24);
        if (!v49 || *(unsigned char *)(v49 + 8) != 15) {
          return result;
        }
        goto LABEL_150;
      case 22:
        if (a3[2] <= v10 >> 3) {
          goto LABEL_164;
        }
        uint64_t v52 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        if (v52) {
          BOOL v53 = (*(_DWORD *)(v52 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v53 = 0;
        }
        if (!v53) {
          return result;
        }
        uint64_t v23 = *(void *)(v52 + 24);
        goto LABEL_130;
      case 23:
      case 24:
        if (a3[2] <= v10 >> 3) {
          goto LABEL_164;
        }
        uint64_t v18 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        if (v18) {
          BOOL v19 = (*(_DWORD *)(v18 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v19 = 0;
        }
        if (!v19) {
          return result;
        }
        if (v9 == 23) {
          int v20 = 1;
        }
        else {
          int v20 = 2;
        }
        llvm::VectorType::getSubdividedVectorType(v18, v20);
        goto LABEL_169;
      case 25:
        if (a3[2] <= v10 >> 3) {
          goto LABEL_164;
        }
        uint64_t v54 = *(void *)(*(void *)a3 + 8 * (v10 >> 3));
        if ((*(_DWORD *)(v54 + 8) & 0xFE) != 0x12) {
          uint64_t v54 = 0;
        }
        if ((*(_DWORD *)(a1 + 8) & 0xFE) != 0x12) {
          a1 = 0;
        }
        if (!a1 || !v54) {
          return result;
        }
        llvm::VectorType::getInteger(v54);
        BOOL v30 = a1 == v55;
        return !v30;
      case 26:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 11;
        return !v30;
      case 27:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 6;
        return !v30;
      case 28:
        if (a3[2] <= (unsigned __int16)v10)
        {
LABEL_154:
          if ((a5 & 1) == 0)
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, a1);
LABEL_165:
            llvm::SmallVectorImpl<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>>::emplace_back<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(a4, a1, &v63);
            return 0;
          }
        }
        else
        {
          uint64_t v56 = (unsigned __int16)v10;
          if ((a5 & 1) == 0) {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, a1);
          }
          uint64_t v48 = *(void *)(*(void *)a3 + 8 * v56);
          if ((*(_DWORD *)(v48 + 8) & 0xFE) != 0x12) {
            uint64_t v48 = 0;
          }
          if (*(unsigned char *)(a1 + 8) == 15) {
            uint64_t v49 = a1;
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t result = 1;
          if (v49)
          {
LABEL_149:
            if (v48)
            {
LABEL_150:
              uint64_t v46 = *(void *)(v48 + 24);
              uint64_t v47 = *(void *)(v49 + 24);
LABEL_151:
              if (v47) {
                BOOL v30 = v47 == v46;
              }
              else {
                BOOL v30 = 1;
              }
              return !v30;
            }
          }
        }
        return result;
      default:
        BOOL v30 = *(unsigned char *)(a1 + 8) == 7;
        return !v30;
    }
  }
  return 1;
}

llvm::Value *llvm::Intrinsic::remangleIntrinsicFunction(llvm::Intrinsic *this, llvm::Function *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v23 = v25;
  uint64_t v24 = 0x400000000;
  int v3 = *((_DWORD *)this + 9);
  if (!v3)
  {
LABEL_9:
    Declaration = 0;
    goto LABEL_44;
  }
  BOOL v26 = v28;
  uint64_t v27 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v3, (unsigned int *)&v26);
  std::string __p = v26;
  uint64_t v21 = v27;
  if (llvm::Intrinsic::matchIntrinsicSignature(*((void *)this + 3), (unsigned int **)&__p, (unsigned int *)&v23))goto LABEL_3; {
  unsigned int v8 = *(_DWORD *)(*((void *)this + 3) + 8);
  }
  if (v21)
  {
    if (v21 != 1) {
      goto LABEL_3;
    }
    if (v8 < 0x100 || *(_DWORD *)__p != 1) {
      goto LABEL_3;
    }
  }
  else if (v8 >= 0x100)
  {
LABEL_3:
    int v4 = 0;
    goto LABEL_4;
  }
  int v4 = 1;
LABEL_4:
  if (v26 != v28) {
    free(v26);
  }
  if (!v4) {
    goto LABEL_9;
  }
  int v5 = *((_DWORD *)this + 9);
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t ValueName = (llvm::Value **)llvm::Value::getValueName((uint64_t ***)this);
    unsigned int v7 = ValueName + 2;
    Declaration = *ValueName;
  }
  else
  {
    Declaration = 0;
    unsigned int v7 = &str_3_24;
  }
  int v11 = &v19;
  getIntrinsicNameImpl(v5, (uint64_t)v23, v24, *((uint64_t ***)this + 5), *((void *)this + 3), &v19);
  char v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
    int v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (Declaration != (llvm::Value *)size)
  {
LABEL_25:
    uint64_t v14 = llvm::ValueSymbolTable::lookup(*(void *)(*((void *)this + 5) + 112), (uint64_t *)v11, size);
    if (v14)
    {
      Declaration = (llvm::Value *)v14;
      if (!*(unsigned char *)(v14 + 16) && *(void *)(v14 + 24) == *((void *)this + 3))
      {
LABEL_42:
        *((_WORD *)Declaration + 9) = *((_WORD *)Declaration + 9) & 0xC00F | *((_WORD *)this + 9) & 0x3FF0;
        if ((*((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v15 = v19.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v15 + 8);
      if (v22 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v15)
      {
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &v19;
        }
        else {
          uint64_t v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, ".renamed");
      v28[8] = 260;
      BOOL v26 = &__p;
      llvm::Value::setName(Declaration, (const llvm::Twine *)&v26);
      if (v22 < 0) {
        operator delete(__p);
      }
    }
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*((uint64_t ***)this + 5), v5, (uint64_t)v23, v24);
    goto LABEL_42;
  }
  if (Declaration)
  {
    if (memcmp(v7, v11, (size_t)Declaration)) {
      goto LABEL_25;
    }
    Declaration = 0;
  }
  if (v12 < 0) {
LABEL_43:
  }
    operator delete(v19.__r_.__value_.__l.__data_);
LABEL_44:
  if (v23 != v25) {
    free(v23);
  }
  return Declaration;
}

uint64_t llvm::Function::hasAddressTaken(llvm::Function *this, const llvm::User **a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v6 + 24);
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 == 4) {
      goto LABEL_74;
    }
    if (a3)
    {
      llvm::AbstractCallSite::AbstractCallSite(&v38, v6);
      if (v38) {
        BOOL v13 = v40 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      int v14 = v13;
      if (v39 != &v41) {
        free(v39);
      }
      if (!v14) {
        goto LABEL_74;
      }
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    }
    if (v12 < 0x1C) {
      break;
    }
    if (v12 - 33 > 0x33 || ((1 << (v12 - 33)) & 0x8000000000041) == 0)
    {
      if (v12 - 77 > 1 || (a4 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_78;
    }
    BOOL v16 = v12 != 84 || a4 == 0;
    if ((v16
       || (uint64_t v17 = *(void *)(v11 - 32)) == 0
       || *(unsigned char *)(v17 + 16)
       || *(void *)(v17 + 24) != *(void *)(v11 + 72)
       || (*(_DWORD *)(v17 + 32) & 0x2000) == 0
       || (llvm::IntrinsicInst::isAssumeLikeIntrinsic((llvm::IntrinsicInst *)v11) & 1) == 0)
      && (v11 - 32 != v6 || *(void *)(v11 + 72) != *((void *)this + 3)))
    {
      if (!a6) {
        goto LABEL_87;
      }
      uint64_t v18 = *(void *)(v6 + 24);
      int v19 = *(_DWORD *)(v18 + 20);
      uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(v18 - 8) : v18 - 32 * (v19 & 0x7FFFFFF);
      if (!llvm::CallBase::isOperandBundleOfType((llvm::CallBase *)v11, 6, (unint64_t)(v6 - v20) >> 5)) {
        goto LABEL_87;
      }
    }
LABEL_74:
    uint64_t v6 = *(void *)(v6 + 8);
    if (!v6) {
      return 0;
    }
  }
  BOOL v21 = v12 != 5 || a4 == 0;
  if (v21 || *(unsigned __int16 *)(v11 + 18) - 49 > 1) {
    goto LABEL_38;
  }
LABEL_78:
  uint64_t v32 = *(void *)(v11 + 8);
  if (!v32) {
    goto LABEL_74;
  }
  while (1)
  {
    uint64_t v33 = *(void *)(v32 + 24);
    if (*(unsigned char *)(v33 + 16) != 84) {
      break;
    }
    uint64_t v34 = *(void *)(v33 - 32);
    if (!v34
      || *(unsigned char *)(v34 + 16)
      || *(void *)(v34 + 24) != *(void *)(v33 + 72)
      || (*(_DWORD *)(v34 + 32) & 0x2000) == 0
      || !llvm::IntrinsicInst::isAssumeLikeIntrinsic((llvm::IntrinsicInst *)v33))
    {
      break;
    }
    uint64_t v32 = *(void *)(v32 + 8);
    if (!v32) {
      goto LABEL_74;
    }
  }
LABEL_38:
  if (!a5) {
    goto LABEL_87;
  }
  uint64_t v22 = *(void *)(v11 + 8);
  if (!v22) {
    goto LABEL_87;
  }
  unsigned int v23 = *(unsigned __int8 *)(v11 + 16);
  if (v23 <= 0x1B)
  {
    if (v23 != 5 || *(unsigned __int16 *)(v11 + 18) - 49 > 1) {
      goto LABEL_49;
    }
  }
  else if (v23 - 77 >= 2)
  {
    goto LABEL_49;
  }
  if (!*(void *)(v22 + 8))
  {
    uint64_t v24 = *(void *)(v22 + 24);
    if (!*(void *)(v24 + 8)) {
      uint64_t v24 = v11;
    }
    uint64_t v22 = *(void *)(v24 + 8);
    if (!v22) {
      goto LABEL_74;
    }
  }
LABEL_49:
  while (1)
  {
    uint64_t v25 = *(void *)(v22 + 24);
    BOOL v26 = v25 && *(unsigned char *)(v25 + 16) == 3;
    if (!v26 || (*(unsigned char *)(v25 + 23) & 0x10) == 0) {
      break;
    }
    uint64_t ValueName = llvm::Value::getValueName(*(uint64_t ****)(v22 + 24));
    if (*(void *)ValueName != 18
      || (*(void *)(ValueName + 16) == 0x6D6F632E6D766C6CLL
        ? (BOOL v28 = *(void *)(ValueName + 24) == 0x73752E72656C6970)
        : (BOOL v28 = 0),
          v28 ? (BOOL v29 = *(unsigned __int16 *)(ValueName + 32) == 25701) : (BOOL v29 = 0),
          !v29))
    {
      if ((*(unsigned char *)(v25 + 23) & 0x10) == 0) {
        break;
      }
      uint64_t v30 = llvm::Value::getValueName((uint64_t ***)v25);
      if (*(void *)v30 != 9) {
        break;
      }
      if (*(void *)(v30 + 16) != 0x6573752E6D766C6CLL || *(unsigned char *)(v30 + 24) != 100) {
        break;
      }
    }
    uint64_t v22 = *(void *)(v22 + 8);
    if (!v22) {
      goto LABEL_74;
    }
  }
LABEL_87:
  if (a2) {
    *a2 = (const llvm::User *)v11;
  }
  return 1;
}

BOOL llvm::CallBase::isOperandBundleOfType(llvm::CallBase *this, int a2, unsigned int a3)
{
  int v3 = *((_DWORD *)this + 5);
  if (v3 < 0
    && (v5 = (char *)this - 32 * (v3 & 0x7FFFFFF), uint64_t v6 = *((void *)v5 - 1), (v6 & 0xFFFFFFFF0) != 0)
    && *(_DWORD *)&v5[-v6] <= a3
    && *((_DWORD *)v5 - 3) > a3)
  {
    return *(_DWORD *)(*(void *)llvm::CallBase::getBundleOpInfoForOperand((char *)this, a3) + 8) == a2;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Function::setHungoffOperand<0>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t result = llvm::Function::allocHungoffUselist(result);
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    }
    if (*(void *)v5)
    {
      **(void **)(v5 + 16) = *(void *)(v5 + 8);
      uint64_t v8 = *(void *)(v5 + 8);
      if (v8) {
        *(void *)(v8 + 16) = *(void *)(v5 + 16);
      }
    }
    *(void *)uint64_t v5 = a2;
    uint64_t v11 = *(void *)(a2 + 8);
    unint64_t v10 = (uint64_t *)(a2 + 8);
    uint64_t v9 = v11;
    *(void *)(v5 + 8) = v11;
    if (v11) {
      *(void *)(v9 + 16) = v5 + 8;
    }
    *(void *)(v5 + 16) = v10;
    *unint64_t v10 = v5;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(result - 8);
      }
      else {
        uint64_t v7 = result - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v12 = llvm::PointerType::get((llvm::PointerType **)(***(void ***)result + 1920), 0);
      uint64_t result = llvm::ConstantPointerNull::get(v12);
      if (*(void *)v7)
      {
        **(void **)(v7 + 16) = *(void *)(v7 + 8);
        uint64_t v13 = *(void *)(v7 + 8);
        if (v13) {
          *(void *)(v13 + 16) = *(void *)(v7 + 16);
        }
      }
      *(void *)uint64_t v7 = result;
      if (result)
      {
        uint64_t v15 = *(void *)(result + 8);
        result += 8;
        uint64_t v14 = v15;
        *(void *)(v7 + 8) = v15;
        if (v15) {
          *(void *)(v14 + 16) = v7 + 8;
        }
        *(void *)(v7 + 16) = result;
        *(void *)uint64_t result = v7;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<1>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t result = llvm::Function::allocHungoffUselist(result);
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    }
    if (*(void *)(v5 + 32))
    {
      **(void **)(v5 + 48) = *(void *)(v5 + 40);
      uint64_t v8 = *(void *)(v5 + 40);
      if (v8) {
        *(void *)(v8 + 16) = *(void *)(v5 + 48);
      }
    }
    *(void *)(v5 + 32) = a2;
    uint64_t v11 = *(void *)(a2 + 8);
    unint64_t v10 = (void *)(a2 + 8);
    uint64_t v9 = v11;
    *(void *)(v5 + 40) = v11;
    if (v11) {
      *(void *)(v9 + 16) = v5 + 40;
    }
    *(void *)(v5 + 48) = v10;
    *unint64_t v10 = v5 + 32;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(result - 8);
      }
      else {
        uint64_t v7 = result - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v12 = llvm::PointerType::get((llvm::PointerType **)(***(void ***)result + 1920), 0);
      uint64_t result = llvm::ConstantPointerNull::get(v12);
      uint64_t v13 = (uint64_t *)(v7 + 32);
      if (*(void *)(v7 + 32))
      {
        **(void **)(v7 + 48) = *(void *)(v7 + 40);
        uint64_t v14 = *(void *)(v7 + 40);
        if (v14) {
          *(void *)(v14 + 16) = *(void *)(v7 + 48);
        }
      }
      *uint64_t v13 = result;
      if (result)
      {
        uint64_t v16 = *(void *)(result + 8);
        result += 8;
        uint64_t v15 = v16;
        *(void *)(v7 + 40) = v16;
        if (v16) {
          *(void *)(v15 + 16) = v7 + 40;
        }
        *(void *)(v7 + 48) = result;
        *(void *)uint64_t result = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<2>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t result = llvm::Function::allocHungoffUselist(result);
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    }
    if (*(void *)(v5 + 64))
    {
      **(void **)(v5 + 80) = *(void *)(v5 + 72);
      uint64_t v8 = *(void *)(v5 + 72);
      if (v8) {
        *(void *)(v8 + 16) = *(void *)(v5 + 80);
      }
    }
    *(void *)(v5 + 64) = a2;
    uint64_t v11 = *(void *)(a2 + 8);
    unint64_t v10 = (void *)(a2 + 8);
    uint64_t v9 = v11;
    *(void *)(v5 + 72) = v11;
    if (v11) {
      *(void *)(v9 + 16) = v5 + 72;
    }
    *(void *)(v5 + 80) = v10;
    *unint64_t v10 = v5 + 64;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(result - 8);
      }
      else {
        uint64_t v7 = result - 32 * (v6 & 0x7FFFFFF);
      }
      uint64_t v12 = llvm::PointerType::get((llvm::PointerType **)(***(void ***)result + 1920), 0);
      uint64_t result = llvm::ConstantPointerNull::get(v12);
      uint64_t v13 = (uint64_t *)(v7 + 64);
      if (*(void *)(v7 + 64))
      {
        **(void **)(v7 + 80) = *(void *)(v7 + 72);
        uint64_t v14 = *(void *)(v7 + 72);
        if (v14) {
          *(void *)(v14 + 16) = *(void *)(v7 + 80);
        }
      }
      *uint64_t v13 = result;
      if (result)
      {
        uint64_t v16 = *(void *)(result + 8);
        result += 8;
        uint64_t v15 = v16;
        *(void *)(v7 + 72) = v16;
        if (v16) {
          *(void *)(v15 + 16) = v7 + 72;
        }
        *(void *)(v7 + 80) = result;
        *(void *)uint64_t result = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::allocHungoffUselist(uint64_t this)
{
  if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 0)
  {
    uint64_t v1 = (_DWORD *)this;
    uint64_t v2 = (char *)operator new(0x60uLL);
    uint64_t v3 = 0;
    *((void *)v1 - 1) = v2;
    do
    {
      int v4 = &v2[v3];
      *(void *)int v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *((void *)v4 + 3) = v1;
      v3 += 32;
    }
    while (v3 != 96);
    v1[5] = v1[5] & 0xF8000000 | 3;
    uint64_t v5 = llvm::PointerType::get((llvm::PointerType **)(***(void ***)v1 + 1920), 0);
    this = llvm::ConstantPointerNull::get(v5);
    int v6 = v1[5];
    if ((v6 & 0x40000000) != 0) {
      uint64_t v7 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v7 = &v1[-8 * (v6 & 0x7FFFFFF)];
    }
    if (*(void *)v7)
    {
      **((void **)v7 + 2) = *((void *)v7 + 1);
      uint64_t v8 = *((void *)v7 + 1);
      if (v8) {
        *(void *)(v8 + 16) = *((void *)v7 + 2);
      }
    }
    *(void *)uint64_t v7 = this;
    if (this)
    {
      uint64_t v9 = (void *)(this + 8);
      uint64_t v10 = *(void *)(this + 8);
      *((void *)v7 + 1) = v10;
      if (v10) {
        *(void *)(v10 + 16) = v7 + 2;
      }
      *((void *)v7 + 2) = v9;
      void *v9 = v7;
    }
    int v11 = v1[5];
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v12 = &v1[-8 * (v11 & 0x7FFFFFF)];
    }
    uint64_t v13 = v12 + 8;
    if (*((void *)v12 + 4))
    {
      **((void **)v12 + 6) = *((void *)v12 + 5);
      uint64_t v14 = *((void *)v12 + 5);
      if (v14) {
        *(void *)(v14 + 16) = *((void *)v12 + 6);
      }
    }
    *uint64_t v13 = this;
    if (this)
    {
      uint64_t v15 = (void *)(this + 8);
      uint64_t v16 = *(void *)(this + 8);
      *((void *)v12 + 5) = v16;
      if (v16) {
        *(void *)(v16 + 16) = v12 + 10;
      }
      *((void *)v12 + 6) = v15;
      *uint64_t v15 = v13;
    }
    int v17 = v1[5];
    if ((v17 & 0x40000000) != 0) {
      uint64_t v18 = (_DWORD *)*((void *)v1 - 1);
    }
    else {
      uint64_t v18 = &v1[-8 * (v17 & 0x7FFFFFF)];
    }
    int v19 = v18 + 16;
    if (*((void *)v18 + 8))
    {
      **((void **)v18 + 10) = *((void *)v18 + 9);
      uint64_t v20 = *((void *)v18 + 9);
      if (v20) {
        *(void *)(v20 + 16) = *((void *)v18 + 10);
      }
    }
    void *v19 = this;
    if (this)
    {
      uint64_t v22 = *(void *)(this + 8);
      this += 8;
      uint64_t v21 = v22;
      *((void *)v18 + 9) = v22;
      if (v22) {
        *(void *)(v21 + 16) = v18 + 18;
      }
      *((void *)v18 + 10) = this;
      *(void *)this = v19;
    }
  }
  return this;
}

uint64_t llvm::GlobalValue::GlobalValue(uint64_t a1, llvm::PointerType **a2, char a3, uint64_t a4, int a5, int a6, const llvm::Twine *a7, llvm::Type *a8)
{
  *(void *)a1 = llvm::PointerType::get(a2, a8);
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFE000F;
  *(void *)(a1 + 40) = 0;
  llvm::GlobalValue::setLinkage(a1, a6);
  llvm::Value::setName((llvm::Value *)a1, a7);
  return a1;
}

void getMangledTypeStr(std::string *a1, BOOL *a2, unsigned char *a3)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  unint64_t v6 = *((unsigned int *)a2 + 2);
  int v7 = *((_DWORD *)a2 + 2);
  if (a2 && v7 == 15)
  {
    if (v6 >= 0x100)
    {
      unint64_t v13 = v6 >> 8;
      uint64_t v8 = &v70.__r_.__value_.__s.__data_[21];
      do
      {
        *--uint64_t v8 = (v13 % 0xA) | 0x30;
        BOOL v11 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      uint64_t v8 = &v70.__r_.__value_.__s.__data_[20];
      v70.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v69, v8, &v70.__r_.__value_.__s.__data_[21], (char *)&v70.__r_.__value_.__r.__words[2] + 5 - v8);
    uint64_t v14 = std::string::insert(&v69, 0, "p");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v70;
    }
    else {
      uint64_t v16 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v70.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v16, size);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (*((void *)a2 + 3))
    {
      getMangledTypeStr((llvm::Type *)&v70, **((BOOL ***)a2 + 2));
      uint64_t v18 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v70
          : (std::string *)v70.__r_.__value_.__r.__words[0];
      std::string::size_type v19 = (v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v70.__r_.__value_.__r.__words[2])
          : v70.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v20 = (void *)v70.__r_.__value_.__r.__words[0];
LABEL_85:
        operator delete(v20);
        return;
      }
    }
    return;
  }
  if (a2 && v7 == 17)
  {
    unint64_t v9 = *((void *)a2 + 4);
    if (v9)
    {
      uint64_t v10 = &v70.__r_.__value_.__s.__data_[21];
      do
      {
        *--uint64_t v10 = (v9 % 0xA) | 0x30;
        BOOL v11 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      uint64_t v10 = &v70.__r_.__value_.__s.__data_[20];
      v70.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v68, v10, &v70.__r_.__value_.__s.__data_[21], (char *)&v70.__r_.__value_.__r.__words[2] + 5 - v10);
    BOOL v29 = "a";
    goto LABEL_65;
  }
  if (a2 && v7 == 16)
  {
    if ((v6 & 0x400) != 0)
    {
      std::string::append(a1, "sl_");
      uint64_t v40 = *((unsigned int *)a2 + 3);
      if (v40)
      {
        uint64_t v41 = (BOOL **)*((void *)a2 + 2);
        uint64_t v42 = 8 * v40;
        do
        {
          getMangledTypeStr((llvm::Type *)&v70, *v41);
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v43 = &v70;
          }
          else {
            uint64_t v43 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v44 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v44 = v70.__r_.__value_.__l.__size_;
          }
          std::string::append(a1, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          ++v41;
          v42 -= 8;
        }
        while (v42);
      }
    }
    else
    {
      std::string::append(a1, "s_");
      uint64_t v12 = *((void *)a2 + 3);
      if (v12) {
        std::string::append(a1, (const std::string::value_type *)(v12 + 16), *(void *)v12);
      }
      else {
        *a3 = 1;
      }
    }
    BOOL v28 = "s";
LABEL_141:
    std::string::append(a1, v28);
    return;
  }
  if (a2 && v7 == 14)
  {
    getMangledTypeStr((llvm::Type *)&v69, **((BOOL ***)a2 + 2));
    uint64_t v21 = std::string::insert(&v69, 0, "f_");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v23 = &v70;
    }
    else {
      unsigned int v23 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v70.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (*((_DWORD *)a2 + 3) != 1)
    {
      unint64_t v25 = 0;
      do
      {
        getMangledTypeStr((llvm::Type *)&v70, *(BOOL **)(*((void *)a2 + 2) + 8 * v25 + 8));
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v26 = &v70;
        }
        else {
          BOOL v26 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v70.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)v26, v27);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        ++v25;
      }
      while (v25 < (*((_DWORD *)a2 + 3) - 1));
    }
    if (*((_DWORD *)a2 + 2) > 0xFFu) {
      std::string::append(a1, "vararg");
    }
    BOOL v28 = "f";
    goto LABEL_141;
  }
  if (!a2 || (*((_DWORD *)a2 + 2) & 0xFE) != 0x12)
  {
    if (!a2 || v7 != 21)
    {
      switch(*((_DWORD *)a2 + 2))
      {
        case 1u:
          int v61 = "bf16";
          goto LABEL_167;
        case 2u:
          int v61 = "f32";
          goto LABEL_167;
        case 3u:
          int v61 = "f64";
          goto LABEL_167;
        case 4u:
          int v61 = "f80";
          goto LABEL_167;
        case 5u:
          int v61 = "f128";
          goto LABEL_167;
        case 6u:
          int v61 = "ppcf128";
          goto LABEL_167;
        case 7u:
          int v61 = "isVoid";
          goto LABEL_167;
        case 8u:
        case 0xCu:
          __break(1u);
          JUMPOUT(0x261E42428);
        case 9u:
          int v61 = "Metadata";
          goto LABEL_167;
        case 0xAu:
          int v61 = "x86mmx";
          goto LABEL_167;
        case 0xBu:
          int v61 = "x86amx";
          goto LABEL_167;
        case 0xDu:
          llvm::utostr((llvm *)(v6 >> 8), 0, &v69);
          int v62 = std::string::insert(&v69, 0, "i");
          std::string::size_type v63 = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v64 = &v70;
          }
          else {
            uint64_t v64 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v65 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v65 = v70.__r_.__value_.__l.__size_;
          }
          std::string::append(a1, (const std::string::value_type *)v64, v65);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
          uint64_t v20 = (void *)v69.__r_.__value_.__r.__words[0];
          goto LABEL_85;
        default:
          int v61 = "f16";
LABEL_167:
          std::string::append(a1, v61);
          return;
      }
    }
    std::string::append(a1, "t");
    std::string::append(a1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    uint64_t v45 = *((unsigned int *)a2 + 3);
    if (v45)
    {
      uint64_t v46 = (BOOL **)*((void *)a2 + 2);
      uint64_t v47 = 8 * v45;
      do
      {
        getMangledTypeStr((llvm::Type *)&v69, *v46);
        uint64_t v48 = std::string::insert(&v69, 0, "_");
        std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v50 = &v70;
        }
        else {
          uint64_t v50 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v51 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v51 = v70.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)v50, v51);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
    unint64_t v52 = *((unsigned int *)a2 + 2);
    if (v52 >= 0x100)
    {
      BOOL v53 = (unsigned int *)*((void *)a2 + 5);
      uint64_t v54 = (unsigned int *)((char *)v53 + ((v52 >> 6) & 0x3FFFFFC));
      do
      {
        unint64_t v55 = *v53;
        uint64_t v56 = &v70.__r_.__value_.__s.__data_[21];
        if (v55)
        {
          do
          {
            *--uint64_t v56 = (v55 % 0xA) | 0x30;
            BOOL v11 = v55 > 9;
            v55 /= 0xAuLL;
          }
          while (v11);
        }
        else
        {
          v70.__r_.__value_.__s.__data_[20] = 48;
          uint64_t v56 = &v70.__r_.__value_.__s.__data_[20];
        }
        std::string::__init_with_size[abi:nn180100]<char *,char *>(&v69, v56, &v70.__r_.__value_.__s.__data_[21], (char *)&v70.__r_.__value_.__r.__words[2] + 5 - v56);
        int v57 = std::string::insert(&v69, 0, "_");
        std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v59 = &v70;
        }
        else {
          int v59 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v60 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v60 = v70.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)v59, v60);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        ++v53;
      }
      while (v53 != v54);
    }
    BOOL v28 = "t";
    goto LABEL_141;
  }
  unint64_t v38 = *((unsigned int *)a2 + 8);
  if (v7 == 19) {
    std::string::append(a1, "nx");
  }
  if (v38)
  {
    BOOL v39 = &v70.__r_.__value_.__s.__data_[21];
    do
    {
      *--BOOL v39 = (v38 % 0xA) | 0x30;
      BOOL v11 = v38 > 9;
      v38 /= 0xAuLL;
    }
    while (v11);
  }
  else
  {
    BOOL v39 = &v70.__r_.__value_.__s.__data_[20];
    v70.__r_.__value_.__s.__data_[20] = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v68, v39, &v70.__r_.__value_.__s.__data_[21], (char *)&v70.__r_.__value_.__r.__words[2] + 5 - v39);
  BOOL v29 = "v";
LABEL_65:
  uint64_t v30 = std::string::insert(&v68, 0, v29);
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  getMangledTypeStr((llvm::Type *)__p, *((BOOL **)a2 + 3));
  if ((v67 & 0x80u) == 0) {
    uint64_t v32 = __p;
  }
  else {
    uint64_t v32 = (void **)__p[0];
  }
  if ((v67 & 0x80u) == 0) {
    std::string::size_type v33 = v67;
  }
  else {
    std::string::size_type v33 = (std::string::size_type)__p[1];
  }
  uint64_t v34 = std::string::append(&v69, (const std::string::value_type *)v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v70;
  }
  else {
    uint64_t v36 = (std::string *)v70.__r_.__value_.__r.__words[0];
  }
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v70.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if ((char)v67 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v20 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_85;
  }
}

unsigned int *llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(unsigned int *result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result[2];
  if (v6 >= result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + 1, 12);
    LODWORD(v6) = v5[2];
  }
  uint64_t v7 = *(void *)v5 + 12 * v6;
  *(void *)uint64_t v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++v5[2];
  return result;
}

double llvm::VectorType::getExtendedElementVectorType(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(llvm::IntegerType **)v2;
  if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = **(void **)(v2 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
  uint64_t v5 = (uint64_t **)llvm::IntegerType::get(v3, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
  uint64_t v6 = (llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(unsigned char *)(a1 + 8) == 19) << 32));
  return llvm::VectorType::get(v5, v6);
}

double llvm::VectorType::getTruncatedElementVectorType(uint64_t **a1)
{
  uint64_t v2 = (unsigned __int8 *)a1[3];
  unsigned int v3 = v2[8];
  BOOL v4 = v3 < 4 || v3 == 5;
  if (v4 || (v3 & 0xFFFFFFFD) == 4)
  {
    uint64_t v6 = **a1;
    BOOL v4 = v3 == 3;
    uint64_t v7 = (uint64_t **)(v6 + 1656);
    uint64_t v8 = (uint64_t **)(v6 + 1704);
    if (v4) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v7;
    }
  }
  else
  {
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
    unsigned int v14 = PrimitiveSizeInBits;
    if ((_BYTE)v13) {
    unint64_t v9 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*a1, (llvm::LLVMContext *)(v14 >> 1));
    }
  }
  uint64_t v10 = (llvm::Type *)(*((unsigned int *)a1 + 8) | ((unint64_t)(*((unsigned char *)a1 + 8) == 19) << 32));
  return llvm::VectorType::get(v9, v10);
}

void llvm::VectorType::getSubdividedVectorType(uint64_t a1, int a2)
{
  do
  {
    llvm::VectorType::get(*(uint64_t ***)(a1 + 24), (llvm::Type *)((2 * *(_DWORD *)(a1 + 32)) | ((unint64_t)(*(unsigned char *)(a1 + 8) == 19) << 32)));
    llvm::VectorType::getTruncatedElementVectorType(v3);
    --a2;
  }
  while (a2);
}

double llvm::VectorType::getHalfElementsVectorType(uint64_t a1)
{
  return llvm::VectorType::get(*(uint64_t ***)(a1 + 24), (llvm::Type *)(((unint64_t)*(unsigned int *)(a1 + 32) >> 1) | ((unint64_t)(*(unsigned char *)(a1 + 8) == 19) << 32)));
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>>::emplace_back<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(uint64_t a1, uint64_t a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>,true>::growAndEmplaceBack<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 24 * v3;
  *(void *)uint64_t v4 = a2;
  *(_OWORD *)(v4 + 8) = *a3;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>,true>::growAndEmplaceBack<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v13 = a2;
  long long v14 = *a3;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = (char *)&v13;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v4 + 1;
    BOOL v11 = v5 + 24 * v4 > (unint64_t)&v13;
    if (v5 <= (unint64_t)&v13 && v11)
    {
      uint64_t v12 = (char *)&v13 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      unint64_t v5 = *(void *)a1;
      uint64_t v6 = &v12[*(void *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      unint64_t v5 = *(void *)a1;
      uint64_t v6 = (char *)&v13;
    }
  }
  uint64_t v7 = v5 + 24 * *(unsigned int *)(a1 + 8);
  long long v8 = *(_OWORD *)v6;
  *(void *)(v7 + 16) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 24 * v7 - 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 88);
    if (v2)
    {
      uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v4 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20));
      unint64_t v5 = *ValueName;
      return llvm::StringMapImpl::RemoveKey(v2, v4, v5);
    }
  }
  return result;
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (a2 != a5)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, a3, (uint64_t)a4, (uint64_t)a5);
    if (a4 != a5)
    {
      uint64_t v8 = *a5;
      uint64_t v9 = *a4;
      *(void *)(v9 + 8) = a5;
      *a5 = v9;
      uint64_t v10 = *a2;
      *(void *)(v8 + 8) = a2;
      *a4 = v10;
      *(void *)(v10 + 8) = a4;
      *a2 = v8;
    }
  }
}

uint64_t std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a3 + 40) = a1 - 24;
  if ((*(unsigned char *)(a3 + 23) & 0x10) != 0)
  {
    unint64_t v5 = *(llvm::ValueSymbolTable **)(a1 + 88);
    if (v5) {
      llvm::ValueSymbolTable::reinsertValue(v5, (uint64_t ***)a3);
    }
  }
  uint64_t v6 = *a2;
  *(void *)(a3 + 56) = *a2;
  *(void *)(a3 + 64) = a2;
  uint64_t v7 = a3 + 56;
  *(void *)(v6 + 8) = v7;
  *a2 = v7;
  return v7;
}

uint64_t _GLOBAL__sub_I_Function_cpp()
{
  int v4 = 1;
  int v2 = 1024;
  unsigned int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum size for the name of non-global values.";
  v1.n128_u64[1] = 47;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&NonGlobalValueMaxNameSize, "non-global-value-max-name-size", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &NonGlobalValueMaxNameSize, &dword_261C2B000);
}

uint64_t llvm::getGCStrategy(void *a1, void *a2)
{
  v13[0] = a1;
  v13[1] = a2;
  int v2 = llvm::Registry<llvm::GCStrategy>::Head;
  if (!llvm::Registry<llvm::GCStrategy>::Head)
  {
    std::string::basic_string[abi:nn180100]<0>(&v11, "unsupported GC: ");
    llvm::StringRef::str(v13, &v10);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, (const std::string::value_type *)&v10, &v8);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v8, " (did you remember to link and initialize the library?)", &v12);
    std::string::~string(&v8);
    std::string::~string(&v10);
    std::string::~string(&v11);
LABEL_7:
    __int16 v9 = 260;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  while (1)
  {
    uint64_t v5 = v2[1];
    if (*(void **)(v5 + 8) == a2 && (!a2 || !memcmp(*(const void **)v5, a1, (size_t)a2))) {
      break;
    }
    int v2 = (void *)*v2;
    if (!v2)
    {
      std::string::basic_string[abi:nn180100]<0>(&v11, "unsupported GC: ");
      llvm::StringRef::str(v13, &v10);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, (const std::string::value_type *)&v10, &v12);
      goto LABEL_7;
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 32);
  return v6();
}

void **llvm::StringRef::str@<X0>(void **this@<X0>, void *a2@<X8>)
{
  if (*this) {
    return (void **)std::string::basic_string[abi:nn180100](a2, *this, (size_t)this[1]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return this;
}

BOOL llvm::GlobalPtrAuthInfo::tryAnalyze@<W0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v4 = **this;
  uint64_t v5 = llvm::Value::stripPointerCasts((llvm::Value *)this);
  if (!v5 || (uint64_t v6 = v5, *((unsigned char *)v5 + 16) != 3))
  {
    uint64_t v13 = "value isn't a global";
    goto LABEL_11;
  }
  if ((*((unsigned char *)v5 + 34) & 0x80) == 0
    || (uint64_t v7 = (uint64_t *)(***(void ***)v5 + 2552),
        v30[0] = v6,
        v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v7, v30), v8[2] != 12)|| ((v9 = (uint64_t *)v8[1], uint64_t v10 = *v9, v11 = *((_DWORD *)v9 + 2), v10 == 0x7274702E6D766C6CLL)? (v12 = v11 == 1752462689): (v12 = 0), !v12))
  {
    uint64_t v13 = "global isn't in section \"llvm.ptrauth\"";
    goto LABEL_11;
  }
  if (*((unsigned char *)v6 + 16))
  {
    if (*((unsigned char *)v6 + 16) == 3 && (*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_18:
      uint64_t v13 = "global doesn't have an initializer";
      goto LABEL_11;
    }
  }
  else if (*((llvm::Value **)v6 + 9) == (llvm::Value *)((char *)v6 + 72) && (*((unsigned char *)v6 + 35) & 1) == 0)
  {
    goto LABEL_18;
  }
  long long v14 = (uint64_t *)*((void *)v6 - 4);
  uint64_t v15 = *v14;
  if (!*v14 || *(unsigned char *)(v15 + 8) != 16)
  {
    uint64_t v13 = "global isn't a struct";
    goto LABEL_11;
  }
  uint64_t v16 = *v4 + 2016;
  uint64_t v17 = *v4 + 1992;
  v30[0] = llvm::PointerType::get((llvm::PointerType **)(*v4 + 1944), 0);
  v30[1] = v17;
  v30[2] = v16;
  v30[3] = v16;
  uint64_t v18 = (const void **)llvm::StructType::get(v4, (uint64_t)v30, 4, 0);
  BOOL result = llvm::StructType::isLayoutIdentical((const void **)v15, v18);
  if (!result)
  {
    uint64_t v13 = "global doesn't have type '{ i8*, i32, i64, i64 }'";
LABEL_11:
    v30[0] = v13;
    __int16 v31 = 259;
    getErrorErrorCat();
    operator new();
  }
  int v20 = *((_DWORD *)v14 + 5);
  if ((v20 & 0x40000000) != 0)
  {
    uint64_t v21 = (uint64_t *)*(v14 - 1);
    uint64_t v24 = v21[4];
    if (!v24 || *(unsigned char *)(v24 + 16) != 16)
    {
LABEL_39:
      BOOL v28 = "key isn't a constant integer";
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v21 = &v14[-4 * (v20 & 0x7FFFFFF)];
    uint64_t v22 = v21[4];
    if (v22) {
      BOOL v23 = *(unsigned char *)(v22 + 16) == 16;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23) {
      goto LABEL_39;
    }
  }
  int v25 = *(unsigned __int8 *)(v21[8] + 16);
  if (v25 != 5 && v25 != 16)
  {
    BOOL v28 = "address discriminator isn't a constant integer or expr";
    goto LABEL_45;
  }
  if ((v20 & 0x40000000) != 0) {
    std::string::size_type v27 = (uint64_t *)*(v14 - 1);
  }
  else {
    std::string::size_type v27 = &v14[-4 * (v20 & 0x7FFFFFF)];
  }
  uint64_t v29 = v27[12];
  if (!v29 || *(unsigned char *)(v29 + 16) != 16)
  {
    BOOL v28 = "discriminator isn't a constant integer";
LABEL_45:
    v30[0] = v28;
    __int16 v31 = 259;
    llvm::GlobalPtrAuthInfo::tryAnalyze(llvm::Value const*)::$_0::operator()();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = v6;
  return result;
}

void llvm::GlobalPtrAuthInfo::tryAnalyze(llvm::Value const*)::$_0::operator()()
{
}

void *llvm::GlobalValue::setPartition(void *result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = (unsigned char *)a2;
  uint64_t v5 = result;
  if ((*((unsigned char *)result + 33) & 0x80) != 0)
  {
    if (!a3)
    {
      uint64_t v7 = 0;
      goto LABEL_7;
    }
LABEL_5:
    int v4 = llvm::UniqueStringSaver::save((uint64_t *)(**(void **)*result + 2168), a2, a3, a4);
    uint64_t v7 = v6;
LABEL_7:
    std::string v8 = (uint64_t *)(***(void ***)v5 + 2576);
    __int16 v9 = v5;
    BOOL result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v8, &v9);
    result[1] = v4;
    result[2] = v7;
    void v5[8] = v5[8] & 0xFFFF7FFF | ((v7 != 0) << 15);
    return result;
  }
  if (a3) {
    goto LABEL_5;
  }
  return result;
}

void *llvm::GlobalValue::getPartition(llvm::GlobalValue *this)
{
  if ((*((unsigned char *)this + 33) & 0x80) == 0) {
    return &str_3_20;
  }
  int v2 = (uint64_t *)(***(void ***)this + 2576);
  unsigned int v3 = this;
  return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, &v3)[1];
}

void *llvm::GlobalValue::setSanitizerMetadata(_DWORD *a1, char a2)
{
  int v4 = (uint64_t *)(***(void ***)a1 + 2600);
  uint64_t v6 = a1;
  BOOL result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(v4, &v6);
  *((unsigned char *)result + 8) = a2;
  a1[8] |= 0x10000u;
  return result;
}

void llvm::GlobalObject::~GlobalObject(llvm::GlobalObject *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v2 + 16), this);
  }
  *((void *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v3);
}

const void **llvm::GlobalObject::setComdat(const void **result, uint64_t a2)
{
  unsigned int v3 = result;
  int v4 = (char *)result[6];
  if (v4) {
    BOOL result = (const void **)llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v4 + 16), result);
  }
  v3[6] = (const void *)a2;
  if (a2) {
    return llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(a2 + 16), v3, (uint64_t)v5);
  }
  return result;
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  if (*((unsigned char *)this + 16) == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v3 == 12 && *(void *)Section == 0x7274702E6D766C6CLL && Section[2] == 1752462689) {
      return 1;
    }
  }
  uint64_t result = 1;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x1EB) != 0)
  {
    uint64_t result = *((void *)this + 5);
    if (result)
    {
      uint64_t result = llvm::Module::getSemanticInterposition((llvm::Module *)result);
      if (result) {
        return (*((unsigned char *)this + 33) & 0x40) == 0;
      }
    }
  }
  return result;
}

void *llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  if (!this || *((unsigned char *)this + 16) != 1)
  {
    if ((*((unsigned char *)this + 34) & 0x80) != 0)
    {
      uint64_t v4 = ***(void ***)this + 2552;
      v5[0] = this;
      uint64_t v2 = (uint64_t *)v4;
      return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, v5)[1];
    }
    return 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  int v6 = 0;
  uint64_t v1 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*((void *)this - 4), (uint64_t)v5);
  MEMORY[0x263E500A0](v5[0], 8);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 34) & 0x80) != 0)
    {
      uint64_t v2 = (uint64_t *)(***(void ***)v1 + 2552);
      v5[0] = v1;
      return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, v5)[1];
    }
    return 0;
  }
  return &str_3_20;
}

BOOL llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    return (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*((unsigned char *)this + 16) || *((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72)) {
      return 0;
    }
    return (*((unsigned char *)this + 35) & 1) == 0;
  }
}

uint64_t llvm::GlobalValue::getComdat(llvm::GlobalValue *this)
{
  uint64_t v1 = this;
  int v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 1)
  {
    v4[0] = 0;
    v4[1] = 0;
    int v5 = 0;
    uint64_t v1 = (llvm::GlobalValue *)findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*((void *)this - 4), (uint64_t)v4);
    MEMORY[0x263E500A0](v4[0], 8);
    if (v1) {
      return *((void *)v1 + 6);
    }
  }
  else if (v2 != 2)
  {
    return *((void *)v1 + 6);
  }
  return 0;
}

void *llvm::GlobalObject::setSection(void *result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = (unsigned char *)a2;
  int v5 = result;
  if ((*((unsigned char *)result + 34) & 0x80) != 0)
  {
    if (!a3)
    {
      uint64_t v7 = 0;
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v4 = llvm::UniqueStringSaver::save((uint64_t *)(**(void **)*result + 2168), a2, a3, a4);
    uint64_t v7 = v6;
LABEL_7:
    std::string v8 = (uint64_t *)(***(void ***)v5 + 2552);
    __int16 v9 = v5;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v8, &v9);
    result[1] = v4;
    result[2] = v7;
    void v5[8] = v5[8] & 0xFF7FFFFF | ((v7 != 0) << 23);
    return result;
  }
  if (a3) {
    goto LABEL_5;
  }
  return result;
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  if (!this) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*((unsigned char *)this + 16) != 3) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  Section = llvm::GlobalValue::getSection(this);
  if (v4 != 12) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*(void *)Section != 0x7274702E6D766C6CLL || Section[2] != 1752462689) {
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 1;
    }
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) {
         && (*((_DWORD *)this + 8) & 0x1000000) == 0)
  }
  {
    return 1;
  }
  uint64_t v8 = *((void *)this - 4);
  int v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(const void ***)(v8 - 8);
  }
  else {
    uint64_t v10 = (const void **)(v8 - 32 * (v9 & 0x7FFFFFF));
  }
  int v11 = *v10;
  unsigned int v16 = 64;
  uint64_t v15 = 0;
  BOOL v12 = (llvm::DataLayout *)(*((void *)this + 5) + 256);
  uint64_t hasExternalWeakLinkage = 1;
  uint64_t v13 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets(v11, v12, (llvm::APInt *)&v15, 1, 0, 0, v3);
  if (v13) {
    BOOL v14 = v13[16] > 3u;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    uint64_t hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
  }
  if (v16 >= 0x41 && v15) {
    MEMORY[0x263E50080](v15, 0x1000C8000313F17);
  }
  return hasExternalWeakLinkage;
}

uint64_t findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
      if (v4 <= 3 && v4 != 1) {
        return a1;
      }
      uint64_t v6 = v4 == 1 ? a1 : 0;
      uint64_t v11 = v6;
      if (!v6) {
        break;
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v12, a2, &v11);
      if (!v12[16])
      {
        unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
        break;
      }
      a1 = *(void *)(v6 - 32);
    }
    if (v4 != 5) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v7 = *(unsigned __int16 *)(a1 + 18);
    if (v7 > 0x2E)
    {
      if (v7 - 47 >= 3) {
        return result;
      }
      goto LABEL_21;
    }
    if (v7 != 15) {
      break;
    }
    if (findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32), a2))
    {
      return 0;
    }
LABEL_21:
    a1 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  }
  if (v7 == 34) {
    goto LABEL_21;
  }
  if (v7 == 13)
  {
    uint64_t v9 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2);
    uint64_t result = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32), a2);
    if (result) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v9) {
      return v10;
    }
  }
  return result;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, llvm::PointerType **a2, char a3, int a4, uint64_t a5, const llvm::Twine *a6, char a7, llvm::Type *a8, char a9)
{
  BOOL v12 = (void *)(a1 - 32);
  uint64_t result = llvm::GlobalValue::GlobalValue(a1, a2, 3, a1 - 32, a5 != 0, a4, a6, a8);
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  int v14 = *(_DWORD *)(result + 32);
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  if (a9) {
    char v15 = 2;
  }
  else {
    char v15 = 0;
  }
  *(unsigned char *)(result + 80) = v15 | a3 | *(unsigned char *)(result + 80) & 0xFC;
  *(_DWORD *)(result + 32) = v14 & 0x1E3FF | ((a7 & 7) << 10);
  if (a5)
  {
    if (*v12)
    {
      **(void **)(result - 16) = *(void *)(result - 24);
      uint64_t v16 = *(void *)(result - 24);
      if (v16) {
        *(void *)(v16 + 16) = *(void *)(result - 16);
      }
    }
    *(void *)(result - 32) = a5;
    uint64_t v19 = *(void *)(a5 + 8);
    uint64_t v18 = (void *)(a5 + 8);
    uint64_t v17 = v19;
    *(void *)(result - 24) = v19;
    if (v19) {
      *(void *)(v17 + 16) = result - 24;
    }
    *(void *)(result - 16) = v18;
    void *v18 = v12;
  }
  return result;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, uint64_t a2, llvm::PointerType **a3, char a4, int a5, uint64_t a6, const llvm::Twine *a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
  uint64_t v16 = (void *)(a1 - 32);
  if ((a10 & 0xFF00000000) != 0) {
    unint64_t v17 = a10;
  }
  else {
    unint64_t v17 = *(unsigned int *)(a2 + 272);
  }
  uint64_t v18 = llvm::GlobalValue::GlobalValue(a1, a3, 3, a1 - 32, a6 != 0, a5, a7, (llvm::Type *)v17);
  *(void *)(v18 + 56) = 0;
  uint64_t v19 = v18 + 56;
  *(void *)(v18 + 48) = 0;
  int v20 = *(_DWORD *)(v18 + 32);
  *(void *)(v18 + 64) = 0;
  *(void *)(v18 + 72) = 0;
  if (a11) {
    char v21 = 2;
  }
  else {
    char v21 = 0;
  }
  *(unsigned char *)(v18 + 80) = v21 | a4 | *(unsigned char *)(v18 + 80) & 0xFC;
  *(_DWORD *)(v18 + 32) = v20 & 0x1E3FF | ((a9 & 7) << 10);
  if (a6)
  {
    if (*v16)
    {
      **(void **)(a1 - 16) = *(void *)(a1 - 24);
      uint64_t v22 = *(void *)(a1 - 24);
      if (v22) {
        *(void *)(v22 + 16) = *(void *)(a1 - 16);
      }
    }
    *(void *)(a1 - 32) = a6;
    uint64_t v25 = *(void *)(a6 + 8);
    uint64_t v24 = (void *)(a6 + 8);
    uint64_t v23 = v25;
    *(void *)(a1 - 24) = v25;
    if (v25) {
      *(void *)(v23 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v24;
    void *v24 = v16;
  }
  if (a8)
  {
    uint64_t v26 = *(void *)(a8 + 40);
    std::string::size_type v27 = (uint64_t *)(a8 + 56);
    uint64_t v28 = v26 + 8;
  }
  else
  {
    uint64_t v28 = a2 + 8;
    std::string::size_type v27 = (uint64_t *)(a2 + 8);
  }
  *(void *)(a1 + 40) = v28 - 8;
  if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
  {
    uint64_t v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
    if (v29) {
      llvm::ValueSymbolTable::reinsertValue(v29, (uint64_t ***)a1);
    }
  }
  uint64_t v30 = *v27;
  *(void *)(a1 + 56) = *v27;
  *(void *)(a1 + 64) = v27;
  *(void *)(v30 + 8) = v19;
  *std::string::size_type v27 = v19;
  return a1;
}

uint64_t llvm::GlobalVariable::setInitializer(uint64_t this, llvm::Constant *a2)
{
  if (this) {
    BOOL v2 = *(unsigned char *)(this + 16) == 3;
  }
  else {
    BOOL v2 = 0;
  }
  char v3 = !v2;
  if (a2)
  {
    if (v3)
    {
      if (*(unsigned char *)(this + 16) || *(void *)(this + 72) != this + 72 || (*(_DWORD *)(this + 32) & 0x1000000) != 0) {
        goto LABEL_19;
      }
    }
    else if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) != 0)
    {
      goto LABEL_19;
    }
    *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xF8000000 | 1;
LABEL_19:
    if (*(void *)(this - 32))
    {
      **(void **)(this - 16) = *(void *)(this - 24);
      uint64_t v5 = *(void *)(this - 24);
      if (v5) {
        *(void *)(v5 + 16) = *(void *)(this - 16);
      }
    }
    *(void *)(this - 32) = a2;
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v6 = (void *)((char *)a2 + 8);
    uint64_t v7 = v8;
    *(void *)(this - 24) = v8;
    if (v8) {
      *(void *)(v7 + 16) = this - 24;
    }
    *(void *)(this - 16) = v6;
    *uint64_t v6 = this - 32;
    return this;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = *(_DWORD *)(this + 20) & 0x7FFFFFF;
LABEL_27:
    if (!v4) {
      return this;
    }
    goto LABEL_28;
  }
  if (!*(unsigned char *)(this + 16) && *(void *)(this + 72) == this + 72)
  {
    int v4 = *(_DWORD *)(this + 32) & 0x1000000;
    goto LABEL_27;
  }
LABEL_28:
  if (*(void *)(this - 32))
  {
    **(void **)(this - 16) = *(void *)(this - 24);
    uint64_t v9 = *(void *)(this - 24);
    if (v9) {
      *(void *)(v9 + 16) = *(void *)(this - 16);
    }
  }
  *(void *)(this - 32) = 0;
  *(_DWORD *)(this + 20) &= 0xF8000000;
  return this;
}

uint64_t llvm::GlobalAlias::GlobalAlias(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, int a4, const llvm::Twine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = llvm::GlobalValue::GlobalValue(a1, a2, 1, a1 - 32, 1, a4, a5, a3);
  *(void *)(v10 + 48) = 0;
  uint64_t v11 = v10 + 48;
  *(void *)(v10 + 56) = 0;
  llvm::GlobalIFunc::setResolver(v10, a6);
  if (a7)
  {
    BOOL v12 = (uint64_t *)(a7 + 40);
    *(void *)(a1 + 40) = a7;
    if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(a7 + 112);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, (uint64_t ***)a1);
      }
    }
    uint64_t v14 = *v12;
    *(void *)(a1 + 48) = *v12;
    *(void *)(a1 + 56) = v12;
    *(void *)(v14 + 8) = v11;
    *BOOL v12 = v11;
  }
  return a1;
}

uint64_t llvm::GlobalAlias::create(llvm::PointerType **a1, llvm::Type *a2, int a3, const llvm::Twine *a4, uint64_t a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 8;
  uint64_t v11 = (uint64_t)(v10 + 8);
  return llvm::GlobalAlias::GlobalAlias(v11, a1, a2, a3, a4, 0, a5);
}

uint64_t llvm::GlobalIFunc::GlobalIFunc(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, int a4, const llvm::Twine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = llvm::GlobalValue::GlobalValue(a1, a2, 2, a1 - 32, 1, a4, a5, a3);
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  uint64_t v11 = v10 + 56;
  *(_DWORD *)(v10 + 32) &= 0x1FFFFu;
  *(void *)(v10 + 64) = 0;
  llvm::GlobalIFunc::setResolver(v10, a6);
  if (a7)
  {
    BOOL v12 = (uint64_t *)(a7 + 56);
    *(void *)(a1 + 40) = a7;
    if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(a7 + 112);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, (uint64_t ***)a1);
      }
    }
    uint64_t v14 = *v12;
    *(void *)(a1 + 56) = *v12;
    *(void *)(a1 + 64) = v12;
    *(void *)(v14 + 8) = v11;
    *BOOL v12 = v11;
  }
  return a1;
}

uint64_t llvm::GlobalIFunc::create(llvm::PointerType **a1, llvm::Type *a2, int a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  BOOL v12 = operator new(0x68uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  *(void *)BOOL v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 8;
  uint64_t v13 = (uint64_t)(v12 + 8);
  return llvm::GlobalIFunc::GlobalIFunc(v13, a1, a2, a3, a4, a5, a6);
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    char v3 = (llvm::Value *)(a2 - 56);
  }
  else {
    char v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(a1, v3);
  uint64_t v4 = *((void *)v3 + 7);
  uint64_t v5 = (void *)*((void *)v3 + 8);
  *uint64_t v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  llvm::ilist_alloc_traits<llvm::GlobalVariable>::deleteNode(v3);
  return v2;
}

void llvm::ilist_alloc_traits<llvm::GlobalVariable>::deleteNode(llvm::GlobalObject *a1)
{
  if (a1)
  {
    llvm::User::dropAllReferences((uint64_t)a1);
    llvm::Value::clearMetadata((uint64_t)a1);
    llvm::GlobalObject::~GlobalObject(a1);
    *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xF8000000 | 1;
    llvm::User::operator delete(v2);
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    char v3 = (llvm::Value *)(a2 - 48);
  }
  else {
    char v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(a1, v3);
  uint64_t v4 = *((void *)v3 + 6);
  uint64_t v5 = (void *)*((void *)v3 + 7);
  *uint64_t v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 6) = 0;
  *((void *)v3 + 7) = 0;
  llvm::ilist_alloc_traits<llvm::GlobalAlias>::deleteNode(v3);
  return v2;
}

void llvm::ilist_alloc_traits<llvm::GlobalAlias>::deleteNode(llvm::Value *a1)
{
  if (a1)
  {
    llvm::Constant::removeDeadConstantUsers((uint64_t)a1);
    llvm::Value::~Value(a1, v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (a2) {
    char v3 = (llvm::Value *)(a2 - 56);
  }
  else {
    char v3 = 0;
  }
  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(a1, v3);
  uint64_t v4 = *((void *)v3 + 7);
  uint64_t v5 = (void *)*((void *)v3 + 8);
  *uint64_t v5 = v4;
  *(void *)(v4 + 8) = v5;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  llvm::GlobalObject::~GlobalObject(v3);
  llvm::User::operator delete(v6);
  return v2;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
    void v5[2] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        void *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, (void *)v13, &v17);
          uint64_t v14 = v17;
          *unint64_t v17 = *(void *)v13;
          *(_OWORD *)(v14 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 24 * v15;
    do
    {
      void *result = -4096;
      result += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    *((unsigned char *)v5 + 8) &= 0xF0u;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, (void *)v13, &v17);
          uint64_t v14 = v17;
          *unint64_t v17 = *(void *)v13;
          *((_DWORD *)v14 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 16 * v15;
    do
    {
      void *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::createCallHelper(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a2;
  if (a2) {
    a2 = *(void *)(a2 + 24);
  }
  uint64_t result = llvm::IRBuilderBase::CreateCall(a1, a2, v12, a3, a4, a7, a8, a5, 0);
  if (a6) {
    *((unsigned char *)result + 17) = *(unsigned char *)(a6 + 17) & 0xFE | *((unsigned char *)result + 17) & 1;
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateIntrinsic(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, a3, a4);
  return llvm::IRBuilderBase::createCallHelper(a1, Declaration, a5, a6, a8, a7, 0, 0);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedLoad(uint64_t a1, llvm::PoisonValue *this, uint64_t *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  _OWORD v17[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = *a3;
  if (!a6) {
    uint64_t v8 = llvm::PoisonValue::get(this, this);
  }
  v17[0] = this;
  v17[1] = v14;
  v16[0] = (uint64_t)a3;
  v16[1] = llvm::ConstantInt::get(**(void **)(a1 + 64) + 1992, (1 << a4));
  uint64_t v16[2] = a5;
  v16[3] = v8;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic(a1, 188, v16, 4, (uint64_t)v17, 2, a7);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedIntrinsic(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, a5, a6);
  if (Declaration) {
    uint64_t v12 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v12 = 0;
  }
  return llvm::IRBuilderBase::CreateCall(a1, v12, Declaration, a3, a4, 0, 0, a7, 0);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedStore(uint64_t a1, void *a2, uint64_t *a3, char a4, uint64_t a5)
{
  void v11[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)a3;
  _OWORD v10[2] = llvm::ConstantInt::get(**(void **)(a1 + 64) + 1992, (1 << a4));
  v10[3] = a5;
  unsigned char v9[16] = 257;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic(a1, 190, v10, 4, (uint64_t)v11, 2, (uint64_t)v9);
}

uint64_t *llvm::IRBuilderBase::CreateConstrainedFPBinOp(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  v24[1] = *MEMORY[0x263EF8340];
  uint64_t ConstrainedFPRounding = llvm::IRBuilderBase::getConstrainedFPRounding(a1, a8);
  uint64_t ConstrainedFPExcept = llvm::IRBuilderBase::getConstrainedFPExcept(a1, a9);
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127) {
      LOBYTE(a5) = -1;
    }
    else {
      LOBYTE(a5) = *(unsigned char *)(a5 + 17) >> 1;
    }
  }
  else
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 96);
  }
  uint64_t v18 = *a3;
  v23[3] = ConstrainedFPExcept;
  v24[0] = v18;
  v23[0] = (uint64_t)a3;
  v23[1] = a4;
  v23[2] = ConstrainedFPRounding;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, (uint64_t)v24, 1);
  if (Declaration) {
    uint64_t v20 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v20 = 0;
  }
  char v21 = llvm::IRBuilderBase::CreateCall(a1, v20, Declaration, v23, 4, 0, 0, a6, 0);
  unsigned char v21[8] = (uint64_t)llvm::AttributeList::addAttributeAtIndex((uint64_t **)v21 + 8, *(uint64_t **)*v21, -1, 62);
  if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0) {
    llvm::Value::setMetadata((uint64_t)v21, 3, a7);
  }
  *((unsigned char *)v21 + 17) |= 2 * (_BYTE)a5;
  return v21;
}

uint64_t llvm::IRBuilderBase::getConstrainedFPRounding(uint64_t a1, __int16 a2)
{
  char v3 = *(unsigned char *)(a1 + 102);
  if ((a2 & 0xFF00) != 0) {
    char v3 = a2;
  }
  llvm::convertRoundingModeToStr(v3, v7);
  uint64_t v4 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(void **)(a1 + 64) + 312), v7[0], (unint64_t)v7[1]);
  if (v5) {
    *(void *)(v4 + 16) = v4;
  }
  return llvm::MetadataAsValue::get(*(void **)(a1 + 64), (unsigned char *)(v4 + 8));
}

uint64_t llvm::IRBuilderBase::getConstrainedFPExcept(uint64_t a1, __int16 a2)
{
  if ((a2 & 0xFF00) == 0) {
    LOBYTE(a2) = *(unsigned char *)(a1 + 101);
  }
  llvm::convertExceptionBehaviorToStr(a2, v6);
  uint64_t v3 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(void **)(a1 + 64) + 312), v6[0], (unint64_t)v6[1]);
  if (v4) {
    *(void *)(v3 + 16) = v3;
  }
  return llvm::MetadataAsValue::get(*(void **)(a1 + 64), (unsigned char *)(v3 + 8));
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t ConstrainedFPExcept = llvm::IRBuilderBase::getConstrainedFPExcept(a1, a9);
  uint64_t v18 = ConstrainedFPExcept;
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127) {
      LOBYTE(v19) = -1;
    }
    else {
      int v19 = *(unsigned __int8 *)(a5 + 17) >> 1;
    }
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 96);
  }
  if ((a2 - 81) <= 0x26 && ((1 << (a2 - 81)) & 0x5CF07BC74FLL) != 0)
  {
    uint64_t ConstrainedFPRounding = llvm::IRBuilderBase::getConstrainedFPRounding(a1, a8);
    uint64_t v21 = *a3;
    std::string::size_type v33 = (void *)a4;
    uint64_t v34 = v21;
    uint64_t v30 = a3;
    uint64_t v31 = ConstrainedFPRounding;
    uint64_t v32 = v18;
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, (uint64_t)&v33, 2);
    if (Declaration) {
      uint64_t v23 = *(void *)(Declaration + 24);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = llvm::IRBuilderBase::CreateCall(a1, v23, Declaration, (uint64_t *)&v30, 3, 0, 0, a6, 0);
  }
  else
  {
    uint64_t v27 = *a3;
    uint64_t v30 = (void *)a4;
    uint64_t v31 = v27;
    std::string::size_type v33 = a3;
    uint64_t v34 = ConstrainedFPExcept;
    uint64_t v28 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a1 + 48) + 56) + 40), a2, (uint64_t)&v30, 2);
    if (v28) {
      uint64_t v29 = *(void *)(v28 + 24);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v24 = llvm::IRBuilderBase::CreateCall(a1, v29, v28, (uint64_t *)&v33, 2, 0, 0, a6, 0);
  }
  uint64_t v25 = (uint64_t)v24;
  v24[8] = (uint64_t)llvm::AttributeList::addAttributeAtIndex((uint64_t **)v24 + 8, *(uint64_t **)*v24, -1, 62);
  if (llvm::FPMathOperator::classof(v25))
  {
    if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v25, 3, a7);
    }
    *(unsigned char *)(v25 + 17) |= 2 * (_BYTE)v19;
  }
  return v25;
}

uint64_t *llvm::IRBuilderBase::CreateSelect(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 9) + 72))(*((void *)this + 9));
  if (result) {
    return result;
  }
  __int16 v22 = 257;
  uint64_t v13 = operator new(0xA0uLL);
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t)(v13 + 24);
  v13[29] = v13[29] & 0x38000000 | 3;
  do
  {
    uint64_t v16 = &v13[v14];
    void *v16 = 0;
    v16[1] = 0;
    uint64_t v16[2] = 0;
    v16[3] = v15;
    v14 += 8;
  }
  while (v14 != 24);
  llvm::SelectInst::SelectInst((llvm::SelectInst *)(v13 + 24), a2, a3, a4, (const llvm::Twine *)v21, 0);
  if (a6)
  {
    if (*((void *)a6 + 6) || (*((unsigned char *)a6 + 23) & 0x20) != 0)
    {
      uint64_t Metadata = (llvm::MDNode *)llvm::Value::getMetadata(a6, 2);
      if (*((void *)a6 + 6) || (*((unsigned char *)a6 + 23) & 0x20) != 0)
      {
        uint64_t v18 = (llvm::MDNode *)llvm::Value::getMetadata(a6, 15);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t Metadata = 0;
    }
    uint64_t v18 = 0;
LABEL_12:
    uint64_t v15 = llvm::IRBuilderBase::addBranchMetadata<llvm::SelectInst>((uint64_t)this, v15, Metadata, v18);
  }
  if (llvm::FPMathOperator::classof(v15))
  {
    int v19 = *((_DWORD *)this + 24);
    uint64_t v20 = (llvm::MDNode *)*((void *)this + 11);
    if (v20) {
      llvm::Value::setMetadata(v15, 3, v20);
    }
    *(unsigned char *)(v15 + 17) |= 2 * (_BYTE)v19;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v15, (uint64_t)a5);
}

uint64_t llvm::IRBuilderBase::addBranchMetadata<llvm::SelectInst>(uint64_t a1, uint64_t a2, llvm::MDNode *a3, llvm::MDNode *a4)
{
  if (a3) {
    llvm::Value::setMetadata(a2, 2, a3);
  }
  if (a4) {
    llvm::Value::setMetadata(a2, 15, a4);
  }
  return a2;
}

uint64_t *llvm::IRBuilderBase::CreateVectorSplat(llvm::IRBuilderBase *a1, llvm::Type *a2, uint64_t ***a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  llvm::VectorType::get(*a3, a2);
  uint64_t v10 = (llvm::Value *)llvm::PoisonValue::get(v8, v9);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get(**((void **)a1 + 8) + 2016, 0);
  int v12 = *(unsigned __int8 *)(a4 + 32);
  if (v12 == 1)
  {
    uint64_t v29 = ".splatinsert";
    __int16 v13 = 259;
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a4 + 32))
  {
    __int16 v13 = 256;
LABEL_5:
    __int16 v32 = v13;
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  if (*(unsigned char *)(a4 + 33) == 1)
  {
    uint64_t v15 = *(void **)a4;
  }
  else
  {
    LOBYTE(v12) = 2;
    uint64_t v15 = (void *)a4;
  }
  uint64_t v29 = v15;
  uint64_t v30 = v14;
  v31[0] = ".splatinsert";
  LOBYTE(v32) = v12;
  HIBYTE(v32) = 3;
LABEL_10:
  Insertunsigned __int16 Element = llvm::IRBuilderBase::CreateInsertElement(a1, v10, (llvm::Value *)a3, v11, (const llvm::Twine *)&v29);
  uint64_t v29 = v31;
  uint64_t v30 = 0x1000000000;
  llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&v29, v7);
  uint64_t v18 = (int *)v29;
  int v19 = (llvm::Type *)v30;
  int v20 = *(unsigned __int8 *)(a4 + 32);
  if (v20 == 1)
  {
    v27[0] = ".splat";
    __int16 v21 = 259;
  }
  else
  {
    if (*(unsigned char *)(a4 + 32))
    {
      uint64_t v22 = *(void *)(a4 + 8);
      if (*(unsigned char *)(a4 + 33) == 1)
      {
        uint64_t v23 = *(void **)a4;
      }
      else
      {
        LOBYTE(v20) = 2;
        uint64_t v23 = (void *)a4;
      }
      v27[0] = v23;
      v27[1] = v22;
      v27[2] = ".splat";
      LOBYTE(v28) = v20;
      HIBYTE(v28) = 3;
      goto LABEL_19;
    }
    __int16 v21 = 256;
  }
  __int16 v28 = v21;
LABEL_19:
  uint64_t v24 = llvm::PoisonValue::get((llvm::PoisonValue *)*InsertElement, v17);
  ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, InsertElement, v24, v18, v19, (uint64_t)v27);
  if (v29 != v31) {
    free(v29);
  }
  return ShuffleVector;
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
}

void llvm::IRBuilderDefaultInserter::InsertHelper(uint64_t a1, llvm::Value *a2, const llvm::Twine *a3, uint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a4 + 40, (uint64_t)a2);
    uint64_t v8 = *a5;
    *((void *)a2 + 3) = *a5;
    *((void *)a2 + 4) = a5;
    *(void *)(v8 + 8) = (char *)a2 + 24;
    *a5 = (uint64_t)a2 + 24;
  }
  llvm::Value::setName(a2, a3);
}

void llvm::ConstantFolder::~ConstantFolder(llvm::ConstantFolder *this)
{
}

llvm::Constant *llvm::ConstantFolder::FoldBinOp(int a1, llvm::ConstantExpr *this, uint64_t a3, unsigned __int8 *a4, uint64_t a5, llvm::Type *a6)
{
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = (llvm::PoisonValue **)a3;
  }
  if (a4[16] >= 0x15u) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Constant *)a4;
  }
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  if (((1 << (char)this) & 0x1FD4000) != 0) {
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  }
  return llvm::ConstantExpr::get(this, v6, v7, 0, 0, a6);
}

llvm::Constant *llvm::ConstantFolder::FoldExactBinOp(int a1, llvm::ConstantExpr *this, uint64_t a3, unsigned __int8 *a4, llvm::Constant *a5, llvm::Type *a6)
{
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = (llvm::PoisonValue **)a3;
  }
  if (a4[16] >= 0x15u) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Constant *)a4;
  }
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  if (((1 << (char)this) & 0x1FD4000) != 0) {
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  }
  return llvm::ConstantExpr::get(this, v6, v7, a5, 0, a6);
}

llvm::Constant *llvm::ConstantFolder::FoldNoWrapBinOp(int a1, llvm::ConstantExpr *this, uint64_t a3, unsigned __int8 *a4, unsigned int a5, llvm::Type *a6)
{
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = (llvm::PoisonValue **)a3;
  }
  if (a4[16] >= 0x15u) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Constant *)a4;
  }
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  if (((1 << (char)this) & 0x1FD4000) != 0) {
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  }
  if (a6) {
    unint64_t v10 = a5 | 2;
  }
  else {
    unint64_t v10 = a5;
  }
  return llvm::ConstantExpr::get(this, v6, v7, (llvm::Constant *)v10, 0, a6);
}

llvm::ConstantExpr *llvm::ConstantFolder::FoldUnOpFMF(int a1, llvm *this, unsigned __int8 *a3)
{
  if (a3 && a3[16] <= 0x14u) {
    return llvm::ConstantFoldUnaryInstruction(this, a3, (llvm::Constant *)a3);
  }
  else {
    return 0;
  }
}

llvm::Constant *llvm::ConstantFolder::FoldICmp(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int8 *a4)
{
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    char v4 = 0;
  }
  else {
    char v4 = (uint64_t ***)a3;
  }
  if (a4[16] >= 0x15u) {
    char v5 = 0;
  }
  else {
    char v5 = (llvm::Constant *)a4;
  }
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, v4, v5, 0);
  }
}

uint64_t llvm::ConstantFolder::FoldGEP(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, uint64_t a5, int a6)
{
  int v6 = *(unsigned __int8 *)(a2 + 8);
  if (v6 == 19) {
    return 0;
  }
  if (v6 == 21)
  {
    getTargetTypeInfo((uint64_t *)a2);
    if (*(unsigned char *)(v12 + 8) == 19) {
      return 0;
    }
  }
  if (!a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u) {
    return 0;
  }
  if (a5)
  {
    uint64_t v13 = 8 * a5;
    uint64_t v14 = a4;
    while (*(unsigned __int8 *)(*(void *)v14 + 16) <= 0x14u)
    {
      uint64_t v14 = (llvm::Value *)((char *)v14 + 8);
      v13 -= 8;
      if (!v13) {
        goto LABEL_12;
      }
    }
    return 0;
  }
LABEL_12:
  return llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
}

llvm::Constant *llvm::ConstantFolder::FoldSelect(llvm::ConstantFolder *this, llvm::Value *a2, llvm::PoisonValue **a3, llvm::Value *a4)
{
  if (*((unsigned __int8 *)a2 + 16) >= 0x15u) {
    char v4 = 0;
  }
  else {
    char v4 = a2;
  }
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u) {
    char v5 = 0;
  }
  else {
    char v5 = a3;
  }
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u) {
    int v6 = 0;
  }
  else {
    int v6 = a4;
  }
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 0) {
    return 0;
  }
  else {
    return llvm::ConstantFoldSelectInstruction(v4, v5, v6, a4);
  }
}

llvm::Constant *llvm::ConstantFolder::FoldExtractValue(int a1, llvm::Constant *this, unsigned int *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    uint64_t v5 = a4;
    if (a4)
    {
      uint64_t result = this;
      do
      {
        uint64_t result = (llvm::Constant *)llvm::Constant::getAggregateElement(result, (llvm::Type *)*a3);
        if (!result) {
          break;
        }
        ++a3;
        --v5;
      }
      while (v5);
    }
    else
    {
      return this;
    }
  }
  return result;
}

void *llvm::ConstantFolder::FoldInsertValue(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  if (a2[16] >= 0x15u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (llvm::Constant *)a2;
  }
  if (a3[16] >= 0x15u) {
    int v6 = 0;
  }
  else {
    int v6 = a3;
  }
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return llvm::ConstantFoldInsertValueInstruction(v5, v6, a4, a5);
  }
}

void *llvm::ConstantFolder::FoldExtractElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Type *a4, __n128 a5)
{
  if (*((unsigned __int8 *)a2 + 16) >= 0x15u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a2;
  }
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u) {
    int v6 = 0;
  }
  else {
    int v6 = a3;
  }
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getExtractElement(v5, v6, 0, a4, a5);
  }
}

llvm::ConstantExpr *llvm::ConstantFolder::FoldInsertElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Type *a5)
{
  if (*((unsigned __int8 *)a2 + 16) >= 0x15u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a2;
  }
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u) {
    int v6 = 0;
  }
  else {
    int v6 = a3;
  }
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = a4;
  }
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || v7 == 0) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getInsertElement(v5, v6, v7, 0, a5);
  }
}

void *llvm::ConstantFolder::FoldShuffleVector(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4, BOOL a5)
{
  if (a2[16] >= 0x15u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (llvm::ConstantExpr *)a2;
  }
  if (a3[16] >= 0x15u) {
    int v6 = 0;
  }
  else {
    int v6 = (llvm::ConstantExpr *)a3;
  }
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  else {
    return llvm::ConstantExpr::getShuffleVector(v5, v6, a4, a5, 0);
  }
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateCast(int a1, llvm::ConstantExpr *this, llvm::ConstantExpr *a3, llvm::Constant ***a4, __n128 a5)
{
  return llvm::ConstantExpr::getCast(this, a3, a4, 0, a5);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreatePointerCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3, __n128 a4)
{
  return llvm::ConstantExpr::getPointerCast(a2, a3, a3, a4);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreatePointerBitCastOrAddrSpaceCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3, __n128 a4)
{
  return llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(a2, a3, a3, a4);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateIntCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getIntegerCast(a2, a3, a4);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateFPCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getFPCast(a2, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateBitCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Constant ****a3)
{
  if (*(llvm::Constant *****)a2 == a3) {
    return a2;
  }
  else {
    return getFoldedCast((llvm *)0x31, (void **)a2, a3, 0);
  }
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateIntToPtr(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Constant ****a3)
{
  return getFoldedCast((llvm *)0x30, (void **)a2, a3, 0);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreatePtrToInt(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Constant ****a3)
{
  return getFoldedCast((llvm *)0x2F, (void **)a2, a3, 0);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateZExtOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getZExtOrBitCast(a2, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateSExtOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getSExtOrBitCast(a2, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateTruncOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getTruncOrBitCast(a2, a3, (llvm::Type *)a3);
}

llvm::Constant *llvm::ConstantFolder::CreateFCmp(int a1, unsigned __int16 a2, uint64_t ***a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
}

uint64_t *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::MDNode *a9)
{
  __int16 v17 = 257;
  uint64_t v11 = llvm::CallInst::Create(a2, a3, a4, a5, a6, a7, (const llvm::Twine *)v16, 0);
  uint64_t v12 = (uint64_t)v11;
  if (*(unsigned char *)(a1 + 100)) {
    *((void *)v11 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)v11 + 8, **(uint64_t ***)v11, -1, 62);
  }
  if (llvm::FPMathOperator::classof(v12))
  {
    uint64_t v13 = a9;
    int v14 = *(_DWORD *)(a1 + 96);
    if (a9 || (uint64_t v13 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v12, 3, v13);
    }
    *(unsigned char *)(v12 + 17) |= 2 * (_BYTE)v14;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)v12, a8);
}

uint64_t llvm::InlineAsm::get(llvm::PointerType **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, char a9)
{
  uint64_t v17 = *(void *)*a1 + 1568;
  uint64_t v18 = llvm::PointerType::get(a1, 0);
  v20[0] = a2;
  v20[1] = a3;
  void v20[2] = a4;
  void v20[3] = a5;
  v20[4] = a1;
  char v21 = a6;
  char v22 = a7;
  int v23 = a8;
  char v24 = a9;
  return llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(v17, v18, (uint64_t)v20);
}

uint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&void v12[8] = *(_OWORD *)a3;
  *(_OWORD *)&unsigned char v12[24] = v4;
  *(_OWORD *)&v12[40] = *(_OWORD *)(a3 + 32);
  uint64_t v5 = *(void *)(a3 + 48);
  *(void *)uint64_t v12 = a2;
  *(void *)&v12[56] = v5;
  int HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue((uint64_t *)v12);
  long long v8 = *(_OWORD *)v12;
  long long v9 = *(_OWORD *)&v12[16];
  long long v10 = *(_OWORD *)&v12[32];
  long long v11 = *(_OWORD *)&v12[48];
  v13[0] = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v13)|| v13[0] == *(void *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    llvm::InlineAsmKeyType::create();
  }
  return *(void *)v13[0];
}

uint64_t llvm::InlineAsm::ConstraintInfo::Parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    *(unsigned char *)(a1 + 40) = 0;
    uint64_t v13 = (unsigned char *)(a1 + 40);
LABEL_23:
    uint64_t v35 = (uint64_t)(v13 - 24);
    goto LABEL_35;
  }
  int v8 = 0;
  long long v9 = a2;
  uint64_t v10 = a3;
  do
  {
    int v11 = *v9++;
    if (v11 == 124) {
      ++v8;
    }
    --v10;
  }
  while (v10);
  unint64_t v12 = (v8 + 1);
  *(unsigned char *)(a1 + 40) = v12 > 1;
  uint64_t v13 = (unsigned char *)(a1 + 40);
  if (v12 < 2) {
    goto LABEL_23;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  int v14 = *(void **)(a1 + 56);
  unint64_t v16 = ((uint64_t)v14 - v15) >> 5;
  if (v12 <= v16)
  {
    if (v12 < v16)
    {
      uint64_t v36 = (void *)(v15 + 32 * v12);
      if (v14 != v36)
      {
        do
        {
          std::string::size_type v37 = v14 - 4;
          v164.__first_ = (std::__split_buffer<std::string>::pointer)(v14 - 3);
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v164);
          int v14 = v37;
        }
        while (v37 != v36);
      }
      *(void *)(a1 + 56) = v36;
    }
  }
  else
  {
    uint64_t v17 = a1 + 64;
    uint64_t v18 = *(void *)(a1 + 64);
    if (v12 - v16 <= (v18 - (uint64_t)v14) >> 5)
    {
      unint64_t v38 = &v14[4 * (v12 - v16)];
      do
      {
        *int v14 = 0xFFFFFFFFLL;
        v14[1] = 0;
        v14[2] = 0;
        _OWORD v14[3] = 0;
        v14 += 4;
      }
      while (v14 != v38);
      *(void *)(a1 + 56) = v38;
    }
    else
    {
      unint64_t v19 = v18 - v15;
      unint64_t v20 = (v18 - v15) >> 4;
      if (v20 <= v12) {
        unint64_t v20 = v12;
      }
      if (v19 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      char v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v17, v21);
      char v24 = &v22[32 * v16];
      uint64_t v25 = &v22[32 * v12];
      uint64_t v26 = v24;
      do
      {
        *(void *)uint64_t v26 = 0xFFFFFFFFLL;
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = 0;
        *((void *)v26 + 3) = 0;
        v26 += 32;
      }
      while (v26 != v25);
      uint64_t v27 = &v22[32 * v23];
      __int16 v28 = *(char **)(a1 + 48);
      uint64_t v29 = *(char **)(a1 + 56);
      if (v29 == v28)
      {
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v25;
        *(void *)(a1 + 64) = v27;
      }
      else
      {
        uint64_t v30 = 0;
        do
        {
          uint64_t v31 = &v24[v30];
          __int16 v32 = &v29[v30];
          *((_DWORD *)v31 - 8) = *(_DWORD *)&v29[v30 - 32];
          *((void *)v31 - 2) = 0;
          *((void *)v31 - 1) = 0;
          *((void *)v31 - 3) = 0;
          *(_OWORD *)(v31 - 24) = *(_OWORD *)&v29[v30 - 24];
          *((void *)v31 - 1) = *(void *)&v29[v30 - 8];
          *((void *)v32 - 3) = 0;
          *((void *)v32 - 2) = 0;
          *((void *)v32 - 1) = 0;
          v30 -= 32;
        }
        while (&v29[v30] != v28);
        uint64_t v29 = *(char **)(a1 + 48);
        uint64_t v33 = *(char **)(a1 + 56);
        *(void *)(a1 + 48) = &v24[v30];
        *(void *)(a1 + 56) = v25;
        *(void *)(a1 + 64) = v27;
        if (v33 != v29)
        {
          do
          {
            uint64_t v34 = v33 - 32;
            v164.__first_ = (std::__split_buffer<std::string>::pointer)(v33 - 24);
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v164);
            uint64_t v33 = v34;
          }
          while (v34 != v29);
        }
      }
      if (v29) {
        operator delete(v29);
      }
    }
  }
  uint64_t v35 = *(void *)(a1 + 48) + 8;
LABEL_35:
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  int v39 = *a2;
  if (v39 == 33)
  {
    int v40 = 3;
LABEL_43:
    uint64_t v41 = a2 + 1;
    *(_DWORD *)a1 = v40;
    goto LABEL_44;
  }
  if (v39 == 61)
  {
    int v40 = 1;
    goto LABEL_43;
  }
  if (v39 != 126)
  {
    int v40 = 0;
    uint64_t v41 = a2;
LABEL_46:
    if (v39 == 42)
    {
      *(unsigned char *)(a1 + 13) = 1;
      ++v41;
    }
    goto LABEL_48;
  }
  int v40 = 2;
  *(_DWORD *)a1 = 2;
  uint64_t v41 = a2 + 1;
  if (a3 == 1)
  {
LABEL_44:
    int v39 = *v41;
    goto LABEL_46;
  }
  if (*v41 != 123) {
    return 1;
  }
  int v40 = 2;
LABEL_48:
  uint64_t v42 = &a2[a3];
  if (v41 != &a2[a3])
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v45 = v40;
    while (2)
    {
      uint64_t result = 1;
      switch(*v41)
      {
        case '#':
        case '*':
          return result;
        case '%':
          if (v45 == 2) {
            return result;
          }
          uint64_t v47 = (unsigned char *)(a1 + 12);
          uint64_t v48 = v43;
          uint64_t v49 = 1;
          if (v44) {
            return result;
          }
          goto LABEL_56;
        case '&':
          if (v40 != 1) {
            return result;
          }
          uint64_t v47 = (unsigned char *)(a1 + 4);
          uint64_t v48 = 1;
          uint64_t v49 = v44;
          int v45 = 1;
          if (v43) {
            return result;
          }
LABEL_56:
          unsigned char *v47 = 1;
          ++v41;
          uint64_t v43 = v48;
          uint64_t v44 = v49;
          if (v41 == v42) {
            return result;
          }
          continue;
        default:
          if (v41 == v42) {
            return 0;
          }
          int v161 = &a2[a3];
          LODWORD(v162) = 0;
          uint64_t v50 = MEMORY[0x263EF8318];
          v163 = a4;
          break;
      }
      break;
    }
    while (1)
    {
      uint64_t v51 = *v41;
      if (v51 == 123)
      {
        unint64_t v52 = (unsigned __int8 *)memchr(v41 + 1, 125, v42 - (v41 + 1));
        if (v52) {
          BOOL v53 = v52;
        }
        else {
          BOOL v53 = v42;
        }
        if (v53 == v42) {
          return 1;
        }
        uint64_t v54 = v53 + 1;
        size_t v55 = v53 + 1 - v41;
        if (v55 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_215;
        }
        if (v55 >= 0x17)
        {
          uint64_t v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17) {
            uint64_t v57 = v55 | 7;
          }
          uint64_t v58 = v57 + 1;
          p_dst = (long long *)operator new(v57 + 1);
          unint64_t v59 = v58 | 0x8000000000000000;
          a4 = v163;
          *((void *)&__dst + 1) = v55;
          unint64_t v166 = v59;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v166) = (_BYTE)v53 + 1 - (_BYTE)v41;
          p_dst = &__dst;
          if (v54 == v41) {
            goto LABEL_83;
          }
        }
        memmove(p_dst, v41, v55);
LABEL_83:
        *((unsigned char *)p_dst + v55) = 0;
        unint64_t v60 = *(void *)(v35 + 16);
        unint64_t v61 = *(void *)(v35 + 8);
        if (v61 >= v60)
        {
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *(void *)v35) >> 3);
          unint64_t v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_215;
          }
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *(void *)v35) >> 3);
          if (2 * v65 > v64) {
            unint64_t v64 = 2 * v65;
          }
          if (v65 >= 0x555555555555555) {
            unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v66 = v64;
          }
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v66) {
            unsigned __int8 v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v66);
          }
          else {
            unsigned __int8 v67 = 0;
          }
          uint64_t v81 = &v67[24 * v63];
          *((void *)v81 + 2) = v166;
          *(_OWORD *)uint64_t v81 = __dst;
          unint64_t v166 = 0;
          long long __dst = 0uLL;
          int v83 = *(std::string **)v35;
          v82 = *(std::string **)(v35 + 8);
          if (v82 == *(std::string **)v35)
          {
            v86 = *(std::string **)(v35 + 8);
            BOOL v84 = &v67[24 * v63];
          }
          else
          {
            BOOL v84 = &v67[24 * v63];
            do
            {
              long long v85 = *(_OWORD *)&v82[-1].__r_.__value_.__l.__data_;
              *((void *)v84 - 1) = *((void *)&v82[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v84 - 24) = v85;
              v84 -= 24;
              v82[-1].__r_.__value_.__l.__size_ = 0;
              v82[-1].__r_.__value_.__r.__words[2] = 0;
              v82[-1].__r_.__value_.__r.__words[0] = 0;
              --v82;
            }
            while (v82 != v83);
            v86 = *(std::string **)v35;
            v82 = *(std::string **)(v35 + 8);
          }
          int v62 = v81 + 24;
          *(void *)uint64_t v35 = v84;
          v164.__first_ = v86;
          v164.__begin_ = v86;
          *(void *)(v35 + 8) = v81 + 24;
          v164.__end_ = v82;
          __int16 v87 = *(std::string **)(v35 + 16);
          *(void *)(v35 + 16) = &v67[24 * v66];
          v164.__end_cap_.__value_ = v87;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(_OWORD *)unint64_t v61 = __dst;
          *(void *)(v61 + 16) = v166;
          unint64_t v166 = 0;
          long long __dst = 0uLL;
          int v62 = (char *)(v61 + 24);
        }
        *(void *)(v35 + 8) = v62;
        if (SHIBYTE(v166) < 0) {
          operator delete((void *)__dst);
        }
        goto LABEL_210;
      }
      if ((*(_DWORD *)(v50 + 4 * v51 + 60) & 0x400) != 0) {
        break;
      }
      if (v51 == 64)
      {
        size_t v88 = v41[1] - 48;
        if (v88 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_215;
        }
        uint64_t v89 = (char *)(v41 + 2);
        if (v88 >= 0x17)
        {
          uint64_t v117 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v88 | 7) != 0x17) {
            uint64_t v117 = v88 | 7;
          }
          uint64_t v118 = v117 + 1;
          uint64_t v90 = (long long *)operator new(v117 + 1);
          unint64_t v119 = v118 | 0x8000000000000000;
          a4 = v163;
          *((void *)&__dst + 1) = v88;
          unint64_t v166 = v119;
          *(void *)&long long __dst = v90;
        }
        else
        {
          HIBYTE(v166) = v88;
          uint64_t v90 = &__dst;
          if (!v88) {
            goto LABEL_157;
          }
        }
        memmove(v90, v89, v88);
LABEL_157:
        *((unsigned char *)v90 + v88) = 0;
        unint64_t v120 = *(void *)(v35 + 16);
        unint64_t v121 = *(void *)(v35 + 8);
        if (v121 >= v120)
        {
          unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - *(void *)v35) >> 3);
          unint64_t v134 = v133 + 1;
          if (v133 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_215;
          }
          unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *(void *)v35) >> 3);
          if (2 * v135 > v134) {
            unint64_t v134 = 2 * v135;
          }
          if (v135 >= 0x555555555555555) {
            unint64_t v136 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v136 = v134;
          }
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v136) {
            v137 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v136);
          }
          else {
            v137 = 0;
          }
          v152 = &v137[24 * v133];
          *((void *)v152 + 2) = v166;
          *(_OWORD *)v152 = __dst;
          unint64_t v166 = 0;
          long long __dst = 0uLL;
          v154 = *(std::string **)v35;
          v153 = *(std::string **)(v35 + 8);
          if (v153 == *(std::string **)v35)
          {
            v157 = *(std::string **)(v35 + 8);
            v155 = &v137[24 * v133];
          }
          else
          {
            v155 = &v137[24 * v133];
            do
            {
              long long v156 = *(_OWORD *)&v153[-1].__r_.__value_.__l.__data_;
              *((void *)v155 - 1) = *((void *)&v153[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v155 - 24) = v156;
              v155 -= 24;
              v153[-1].__r_.__value_.__l.__size_ = 0;
              v153[-1].__r_.__value_.__r.__words[2] = 0;
              v153[-1].__r_.__value_.__r.__words[0] = 0;
              --v153;
            }
            while (v153 != v154);
            v157 = *(std::string **)v35;
            v153 = *(std::string **)(v35 + 8);
          }
          int v122 = v152 + 24;
          *(void *)uint64_t v35 = v155;
          v164.__first_ = v157;
          v164.__begin_ = v157;
          *(void *)(v35 + 8) = v152 + 24;
          v164.__end_ = v153;
          v160 = *(std::string **)(v35 + 16);
          *(void *)(v35 + 16) = &v137[24 * v136];
          v164.__end_cap_.__value_ = v160;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(_OWORD *)unint64_t v121 = __dst;
          *(void *)(v121 + 16) = v166;
          unint64_t v166 = 0;
          long long __dst = 0uLL;
          int v122 = (char *)(v121 + 24);
        }
        *(void *)(v35 + 8) = v122;
        if (SHIBYTE(v166) < 0) {
          operator delete((void *)__dst);
        }
        uint64_t v54 = (unsigned __int8 *)&v89[v88];
        goto LABEL_210;
      }
      if (v51 == 94)
      {
        uint64_t v91 = *(unsigned __int16 *)(v41 + 1);
        unint64_t v92 = *(void *)(v35 + 16);
        unint64_t v93 = *(void *)(v35 + 8);
        if (v93 >= v92)
        {
          unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *(void *)v35) >> 3);
          unint64_t v124 = v123 + 1;
          if (v123 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_215;
          }
          unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - *(void *)v35) >> 3);
          if (2 * v125 > v124) {
            unint64_t v124 = 2 * v125;
          }
          if (v125 >= 0x555555555555555) {
            unint64_t v126 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v126 = v124;
          }
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v126) {
            int v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v126);
          }
          else {
            int v127 = 0;
          }
          int v138 = &v127[24 * v123];
          uint64_t v139 = __dst;
          *(void *)int v138 = v91;
          *((void *)v138 + 1) = v139;
          *(void *)(v138 + 15) = *(void *)((char *)&__dst + 7);
          v138[23] = 2;
          *(void *)((char *)&__dst + 7) = 0;
          *(void *)&long long __dst = 0;
          v141 = *(std::string **)v35;
          int v140 = *(std::string **)(v35 + 8);
          if (v140 == *(std::string **)v35)
          {
            int v144 = *(std::string **)(v35 + 8);
            int v142 = &v127[24 * v123];
          }
          else
          {
            int v142 = &v127[24 * v123];
            do
            {
              long long v143 = *(_OWORD *)&v140[-1].__r_.__value_.__l.__data_;
              *((void *)v142 - 1) = *((void *)&v140[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v142 - 24) = v143;
              v142 -= 24;
              v140[-1].__r_.__value_.__l.__size_ = 0;
              v140[-1].__r_.__value_.__r.__words[2] = 0;
              v140[-1].__r_.__value_.__r.__words[0] = 0;
              --v140;
            }
            while (v140 != v141);
            int v144 = *(std::string **)v35;
            int v140 = *(std::string **)(v35 + 8);
          }
          uint64_t v94 = v138 + 24;
          *(void *)uint64_t v35 = v142;
          v164.__first_ = v144;
          v164.__begin_ = v144;
          *(void *)(v35 + 8) = v138 + 24;
          v164.__end_ = v140;
          int v158 = *(std::string **)(v35 + 16);
          *(void *)(v35 + 16) = &v127[24 * v126];
          v164.__end_cap_.__value_ = v158;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(void *)unint64_t v93 = v91;
          *(unsigned char *)(v93 + 23) = 2;
          uint64_t v94 = (char *)(v93 + 24);
        }
        *(void *)(v35 + 8) = v94;
        uint64_t v54 = v41 + 3;
      }
      else
      {
        if (v51 == 124)
        {
          uint64_t v162 = (v162 + 1);
          uint64_t v35 = *(void *)(a1 + 48) + 32 * v162 + 8;
        }
        else
        {
          unint64_t v95 = *(void *)(v35 + 16);
          unint64_t v96 = *(void *)(v35 + 8);
          if (v96 >= v95)
          {
            unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - *(void *)v35) >> 3);
            unint64_t v129 = v128 + 1;
            if (v128 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_215;
            }
            unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - *(void *)v35) >> 3);
            if (2 * v130 > v129) {
              unint64_t v129 = 2 * v130;
            }
            if (v130 >= 0x555555555555555) {
              unint64_t v131 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v131 = v129;
            }
            v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
            if (v131) {
              v132 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v131);
            }
            else {
              v132 = 0;
            }
            v145 = &v132[24 * v128];
            uint64_t v146 = __dst;
            *(void *)v145 = v51;
            *((void *)v145 + 1) = v146;
            *(void *)(v145 + 15) = *(void *)((char *)&__dst + 7);
            v145[23] = 1;
            *(void *)((char *)&__dst + 7) = 0;
            *(void *)&long long __dst = 0;
            int v148 = *(std::string **)v35;
            v147 = *(std::string **)(v35 + 8);
            if (v147 == *(std::string **)v35)
            {
              v151 = *(std::string **)(v35 + 8);
              v149 = &v132[24 * v128];
            }
            else
            {
              v149 = &v132[24 * v128];
              do
              {
                long long v150 = *(_OWORD *)&v147[-1].__r_.__value_.__l.__data_;
                *((void *)v149 - 1) = *((void *)&v147[-1].__r_.__value_.__l + 2);
                *(_OWORD *)(v149 - 24) = v150;
                v149 -= 24;
                v147[-1].__r_.__value_.__l.__size_ = 0;
                v147[-1].__r_.__value_.__r.__words[2] = 0;
                v147[-1].__r_.__value_.__r.__words[0] = 0;
                --v147;
              }
              while (v147 != v148);
              v151 = *(std::string **)v35;
              v147 = *(std::string **)(v35 + 8);
            }
            int v97 = v145 + 24;
            *(void *)uint64_t v35 = v149;
            v164.__first_ = v151;
            v164.__begin_ = v151;
            *(void *)(v35 + 8) = v145 + 24;
            v164.__end_ = v147;
            v159 = *(std::string **)(v35 + 16);
            *(void *)(v35 + 16) = &v132[24 * v131];
            v164.__end_cap_.__value_ = v159;
            std::__split_buffer<std::string>::~__split_buffer(&v164);
          }
          else
          {
            *(void *)unint64_t v96 = v51;
            *(unsigned char *)(v96 + 23) = 1;
            int v97 = (char *)(v96 + 24);
          }
          *(void *)(v35 + 8) = v97;
        }
        uint64_t v54 = v41 + 1;
      }
LABEL_210:
      uint64_t result = 0;
      uint64_t v41 = v54;
      if (v54 == v42) {
        return result;
      }
    }
    if (v41 == v42)
    {
      uint64_t v54 = v42;
    }
    else
    {
      uint64_t v54 = v41;
      while ((*(_DWORD *)(v50 + 4 * *v54 + 60) & 0x400) != 0)
      {
        if (++v54 == v42)
        {
          uint64_t v54 = v161;
          break;
        }
      }
    }
    unint64_t v68 = v54 - v41;
    if ((unint64_t)(v54 - v41) > 0x7FFFFFFFFFFFFFF7) {
LABEL_215:
    }
      abort();
    if (v68 >= 0x17)
    {
      uint64_t v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v68 | 7) != 0x17) {
        uint64_t v70 = v68 | 7;
      }
      uint64_t v71 = v70 + 1;
      std::string v69 = (long long *)operator new(v70 + 1);
      unint64_t v72 = v71 | 0x8000000000000000;
      a4 = v163;
      *((void *)&__dst + 1) = v54 - v41;
      unint64_t v166 = v72;
      *(void *)&long long __dst = v69;
    }
    else
    {
      HIBYTE(v166) = (_BYTE)v54 - (_BYTE)v41;
      std::string v69 = &__dst;
      if (v54 == v41) {
        goto LABEL_102;
      }
    }
    memmove(v69, v41, v54 - v41);
LABEL_102:
    *((unsigned char *)v69 + v68) = 0;
    unint64_t v73 = *(void *)(v35 + 16);
    unint64_t v74 = *(void *)(v35 + 8);
    if (v74 >= v73)
    {
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(void *)v35) >> 3);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_215;
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *(void *)v35) >> 3);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
      if (v79) {
        long long v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v79);
      }
      else {
        long long v80 = 0;
      }
      uint64_t v98 = &v80[24 * v76];
      *((void *)v98 + 2) = v166;
      *(_OWORD *)uint64_t v98 = __dst;
      unint64_t v166 = 0;
      long long __dst = 0uLL;
      __n128 v100 = *(std::string **)v35;
      uint64_t v99 = *(std::string **)(v35 + 8);
      if (v99 == *(std::string **)v35)
      {
        unsigned int v103 = *(std::string **)(v35 + 8);
        unint64_t v101 = &v80[24 * v76];
      }
      else
      {
        unint64_t v101 = &v80[24 * v76];
        do
        {
          long long v102 = *(_OWORD *)&v99[-1].__r_.__value_.__l.__data_;
          *((void *)v101 - 1) = *((void *)&v99[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v101 - 24) = v102;
          v101 -= 24;
          v99[-1].__r_.__value_.__l.__size_ = 0;
          v99[-1].__r_.__value_.__r.__words[2] = 0;
          v99[-1].__r_.__value_.__r.__words[0] = 0;
          --v99;
        }
        while (v99 != v100);
        unsigned int v103 = *(std::string **)v35;
        uint64_t v99 = *(std::string **)(v35 + 8);
      }
      int v75 = v98 + 24;
      *(void *)uint64_t v35 = v101;
      v164.__first_ = v103;
      v164.__begin_ = v103;
      *(void *)(v35 + 8) = v98 + 24;
      v164.__end_ = v99;
      uint64_t v104 = *(std::string **)(v35 + 16);
      *(void *)(v35 + 16) = &v80[24 * v79];
      v164.__end_cap_.__value_ = v104;
      std::__split_buffer<std::string>::~__split_buffer(&v164);
    }
    else
    {
      *(_OWORD *)unint64_t v74 = __dst;
      *(void *)(v74 + 16) = v166;
      unint64_t v166 = 0;
      long long __dst = 0uLL;
      int v75 = (char *)(v74 + 24);
    }
    *(void *)(v35 + 8) = v75;
    if (SHIBYTE(v166) < 0) {
      operator delete((void *)__dst);
    }
    uint64_t v105 = *(void *)(v35 + 8);
    unsigned int v106 = (const char *)(v105 - 24);
    if (*(char *)(v105 - 1) < 0) {
      unsigned int v106 = *(const char **)v106;
    }
    unsigned int v107 = atoi(v106);
    uint64_t v108 = *a4;
    unint64_t v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 4);
    if (v109 <= v107 || *(_DWORD *)(v108 + 80 * v107) != 1 || *(_DWORD *)a1) {
      return 1;
    }
    if (*v13)
    {
      uint64_t v111 = (uint64_t *)(v108 + 80 * v107 + 48);
      uint64_t v110 = *v111;
      if (v162 >= (unint64_t)((v111[1] - *v111) >> 5)) {
        return 1;
      }
      v112 = (_DWORD *)(v110 + 32 * v162);
      if (*v112 != -1) {
        return 1;
      }
    }
    else
    {
      uint64_t v113 = v108 + 80 * v107;
      uint64_t v115 = *(int *)(v113 + 8);
      v112 = (_DWORD *)(v113 + 8);
      uint64_t v114 = v115;
      if (v115 != -1 && v109 != v114) {
        return 1;
      }
    }
    _DWORD *v112 = v109;
    goto LABEL_210;
  }
  return 1;
}

void llvm::InlineAsm::ParseConstraints(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a1;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = &a1[a2];
  while (v3 != v5)
  {
    LODWORD(v10) = 0;
    BYTE4(v10) = 0;
    int v11 = -1;
    __int16 v12 = 0;
    memset(v13, 0, 25);
    memset(v14, 0, sizeof(v14));
    int v15 = 0;
    int v6 = (char *)memchr(v3, 44, v5 - v3);
    if (v6) {
      BOOL v7 = v6;
    }
    else {
      BOOL v7 = v5;
    }
    if (v7 == v3
      || (llvm::InlineAsm::ConstraintInfo::Parse((uint64_t)&v10, (unsigned __int8 *)v3, v7 - v3, a3) & 1) != 0)
    {
      goto LABEL_11;
    }
    std::vector<llvm::InlineAsm::ConstraintInfo>::push_back[abi:nn180100](a3, &v10);
    if (v7 == v5)
    {
      char v9 = 1;
      uint64_t v3 = v5;
      goto LABEL_12;
    }
    int v8 = v7 + 1;
    uint64_t v3 = v5;
    if (v7 + 1 == v5)
    {
LABEL_11:
      std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a3, *a3);
      char v9 = 0;
    }
    else
    {
      char v9 = 1;
      uint64_t v3 = v8;
    }
LABEL_12:
    unint64_t v16 = (void **)v14;
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v16);
    unint64_t v16 = (void **)v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v16);
    if ((v9 & 1) == 0) {
      return;
    }
  }
}

uint64_t std::vector<llvm::InlineAsm::ConstraintInfo>::push_back[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v9 + 1 > 0x333333333333333) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v12 = 0x333333333333333;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = v13;
    int v15 = &v13[80 * v9];
    uint64_t v17 = &v13[80 * v12];
    std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(v5, (uint64_t)v15, a2);
    unint64_t v16 = v15 + 80;
    std::vector<llvm::InlineAsm::ConstraintInfo>::__swap_out_circular_buffer(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 80;
  }
  a1[1] = v8;
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int Hash = llvm::InlineAsmKeyType::getHash((llvm::InlineAsmKeyType *)(a1 + 1));
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v4, 0, v4, v5, a1, &Hash);
}

unint64_t llvm::InlineAsmKeyType::getHash(llvm::InlineAsmKeyType *this)
{
  uint64_t v2 = (char *)this + 16;
  uint64_t v3 = (char *)this + 40;
  void v10[8] = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)this + 41;
  uint64_t v5 = (int *)((char *)this + 44);
  uint64_t v6 = (uint64_t *)((char *)this + 32);
  BOOL v7 = (char *)this + 48;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>((uint64_t)v9, 0, v9, v10, (uint64_t)this, (uint64_t)v2, v3, v4, v5, v6, v7);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, int *a9, uint64_t *a10, char *a11)
{
  uint64_t v20 = a2;
  unint64_t v17 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(void *)a5 + *(void *)(a5 + 8), (uint64_t)a3, a4);
  uint64_t v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, &v20, a3, (unint64_t)a4, v17);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v20, v18, a4, a6, a7, a8, a9, a10, a11);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t a5, char *a6, char *a7, int *a8, uint64_t *a9, char *a10)
{
  uint64_t v19 = a2;
  unint64_t v16 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(void *)a5 + *(void *)(a5 + 8), (uint64_t)a3, a4);
  unint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, &v19, a3, (unint64_t)a4, v16);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v19, v17, (char *)a4, a6, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, char *a6, int *a7, uint64_t *a8, char *a9)
{
  uint64_t v16 = a2;
  int v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(a1, &v16, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v16, v14, a4, a6, a7, a8, a9);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6, uint64_t *a7, char *a8)
{
  unint64_t v28 = a2;
  uint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(a1, (uint64_t *)&v28, a3, (unint64_t)a4, *a5);
  unint64_t v14 = v28;
  int v15 = *a6;
  LODWORD(__src) = *a6;
  uint64_t v16 = v13 + 4;
  if (v13 + 4 <= a4)
  {
    *(_DWORD *)uint64_t v13 = v15;
  }
  else
  {
    uint64_t v17 = a4 - v13;
    memcpy(v13, &__src, a4 - v13);
    if (v14)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v18, v19);
      v14 += 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v18, v19, (llvm::hashing::detail::hash_state *)&v29);
      long long v20 = v30;
      *(_OWORD *)(a1 + 64) = v29;
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 96) = v31;
      *(void *)(a1 + 112) = v32;
      unint64_t v14 = 64;
    }
    uint64_t v16 = (char *)(a1 + 4 - v17);
    if (v16 > a4) {
      uint64_t v16 = (char *)a1;
    }
    else {
      memcpy((void *)a1, (char *)&__src + v17, 4 - v17);
    }
  }
  uint64_t v21 = *a7;
  uint64_t __src = *a7;
  char v22 = v16 + 8;
  if (v16 + 8 <= a4)
  {
    *(void *)uint64_t v16 = v21;
  }
  else
  {
    int64_t v23 = a4 - v16;
    memcpy(v16, &__src, a4 - v16);
    if (v14)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v24, v25);
      v14 += 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v24, v25, (llvm::hashing::detail::hash_state *)&v29);
      long long v26 = v30;
      *(_OWORD *)(a1 + 64) = v29;
      *(_OWORD *)(a1 + 80) = v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(void *)(a1 + 112) = v32;
      unint64_t v14 = 64;
    }
    char v22 = (char *)(a1 + 8 - v23);
    if (v22 > a4) {
      char v22 = (char *)a1;
    }
    else {
      memcpy((void *)a1, (char *)&__src + v23, 8 - v23);
    }
  }
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)a1, v14, v22, a4, a8);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    uint64_t v9 = a2 + 16;
    unsigned int v8 = *(_DWORD *)a2;
    int v10 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v12 = v8 & v10;
      uint64_t v13 = (void **)(v7 + 8 * (v8 & v10));
      unint64_t v14 = *v13;
      if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(void *)(a2 + 8) == *v14)
      {
        if (llvm::InlineAsmKeyType::operator==(v9, (uint64_t)v14))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        unint64_t v14 = *v13;
      }
      if (v14 == (void *)-4096) {
        break;
      }
      if (v6) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == (void *)-8192;
      }
      if (v15) {
        uint64_t v6 = (void **)(v7 + 8 * v12);
      }
      unsigned int v8 = v12 + i;
    }
    uint64_t result = 0;
    if (v6) {
      uint64_t v13 = v6;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::InlineAsmKeyType::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 81)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 84))
  {
    return 0;
  }
  size_t v4 = *(void *)(a1 + 8);
  int v5 = *(char *)(a2 + 47);
  if (v5 >= 0) {
    uint64_t v6 = (const void *)(a2 + 24);
  }
  else {
    uint64_t v6 = *(const void **)(a2 + 24);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  if (v4 != v7 || v4 && memcmp(*(const void **)a1, v6, v4)) {
    return 0;
  }
  size_t v8 = *(void *)(a1 + 24);
  int v9 = *(char *)(a2 + 71);
  if (v9 >= 0) {
    int v10 = (const void *)(a2 + 48);
  }
  else {
    int v10 = *(const void **)(a2 + 48);
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 71);
  }
  return v8 == v11
      && (!v8 || !memcmp(*(const void **)(a1 + 16), v10, v8))
      && *(void *)(a1 + 32) == *(void *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 88);
}

void llvm::InlineAsmKeyType::create()
{
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::insert_as<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, a3, &v12);
  int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(a1, (uint64_t)a2, a3, v12);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(uint64_t a1, int a2)
{
  v48[32] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  size_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      unsigned int v12 = &v4[v3];
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          BOOL v15 = *(uint64_t **)a1;
          int v16 = *(_DWORD *)(a1 + 16);
          uint64_t v46 = v48;
          uint64_t v47 = 0x2000000000;
          uint64_t v17 = *(void *)v14;
          int v18 = *(char *)(v14 + 47);
          uint64_t v19 = v14 + 24;
          BOOL v20 = v18 < 0;
          if (v18 < 0) {
            uint64_t v19 = *(void *)(v14 + 24);
          }
          uint64_t v21 = *(unsigned __int8 *)(v14 + 47);
          if (v20) {
            uint64_t v21 = *(void *)(v14 + 32);
          }
          int v22 = *(char *)(v14 + 71);
          uint64_t v23 = v14 + 48;
          BOOL v24 = v22 < 0;
          if (v22 < 0) {
            uint64_t v23 = *(void *)(v14 + 48);
          }
          uint64_t v25 = *(unsigned __int8 *)(v14 + 71);
          if (v24) {
            uint64_t v25 = *(void *)(v14 + 56);
          }
          uint64_t v26 = *(void *)(v14 + 72);
          __int16 v27 = *(_WORD *)(v14 + 80);
          int v28 = *(_DWORD *)(v14 + 84);
          char v29 = *(unsigned char *)(v14 + 88);
          v42[0] = v17;
          v42[1] = v19;
          v42[2] = v21;
          v42[3] = v23;
          v42[4] = v25;
          v42[5] = v26;
          __int16 v43 = v27;
          int v44 = v28;
          char v45 = v29;
          int HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue(v42);
          if (v46 != v48) {
            free(v46);
          }
          int v31 = v16 - 1;
          uint64_t v32 = *v13;
          unsigned int v33 = HashValue & (v16 - 1);
          uint64_t v34 = &v15[v33];
          uint64_t v35 = *v34;
          if (*v13 != *v34)
          {
            uint64_t v36 = 0;
            int v37 = 1;
            while (v35 != -4096)
            {
              if (v36) {
                BOOL v38 = 0;
              }
              else {
                BOOL v38 = v35 == -8192;
              }
              if (v38) {
                uint64_t v36 = v34;
              }
              unsigned int v39 = v33 + v37++;
              unsigned int v33 = v39 & v31;
              uint64_t v34 = &v15[v39 & v31];
              uint64_t v35 = *v34;
              if (v32 == *v34) {
                goto LABEL_22;
              }
            }
            if (v36) {
              uint64_t v34 = v36;
            }
          }
LABEL_22:
          *uint64_t v34 = v32;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v40 = *(unsigned int *)(a1 + 16);
  if (v40)
  {
    uint64_t v41 = 8 * v40;
    do
    {
      *result++ = -4096;
      v41 -= 8;
    }
    while (v41);
  }
  return result;
}

void *std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *a3;
  *(void *)(a2 + 6) = *(uint64_t *)((char *)a3 + 6);
  *(void *)a2 = v5;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a2 + 16), (long long *)a3[2], (long long *)a3[3], 0xAAAAAAAAAAAAAAABLL * ((a3[3] - a3[2]) >> 3));
  char v6 = *((unsigned char *)a3 + 40);
  *(void *)(v4 + 48) = 0;
  v4 += 48;
  *(unsigned char *)(v4 - 8) = v6;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>((void *)v4, a3[6], a3[7], (a3[7] - a3[6]) >> 5);
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a3 + 18);
  return result;
}

void *std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<llvm::json::Value>::__vallocate[abi:nn180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::InlineAsm::SubConstraintInfo>,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::InlineAsm::SubConstraintInfo>,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v6;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a4 + 8), *(long long **)(v6 + 8), *(long long **)(v6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3));
      a4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<llvm::InlineAsm::ConstraintInfo>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<llvm::InlineAsm::ConstraintInfo>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = *(void *)(a3 + v7 - 80);
      *(void *)(v8 - 74) = *(void *)(a3 + v7 - 74);
      *(void *)(v8 - 80) = v10;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 64) = 0;
      *(unsigned char *)(v8 - 40) = *(unsigned char *)(a3 + v7 - 40);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 32) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 80;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    uint64_t v5 = (void **)(i - 32);
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
    uint64_t v5 = (void **)(i - 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  }
}

uint64_t llvm::Instruction::Instruction(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3 + 28;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    uint64_t v8 = a6;
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a6[5] + 40, a1);
    uint64_t v9 = v8[3];
    v8 += 3;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
    *(void *)(v9 + 8) = v7;
    uint64_t *v8 = v7;
  }
  return a1;
}

void llvm::Instruction::~Instruction(llvm::UndefValue **this, llvm::Type *a2)
{
  if ((*((unsigned char *)this + 23) & 8) != 0)
  {
    uint64_t v3 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((llvm::ValueAsMetadata *)this, v3, v4);
  }
  llvm::Instruction::setMetadata((uint64_t *)this, 38, 0);
  uint64_t v5 = this[6];
  if (v5) {
    llvm::MetadataTracking::untrack((uint64_t)(this + 6), (uint64_t)v5);
  }
  llvm::Value::~Value((llvm::Value *)this, v5);
}

BOOL llvm::Instruction::comesBefore(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(__int16 *)(v2 + 18);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4 != v2 + 40)
    {
      int v5 = 0;
      do
      {
        uint64_t v6 = v4 - 24;
        if (!v4) {
          uint64_t v6 = 0;
        }
        *(_DWORD *)(v6 + 56) = v5++;
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while (v4 != v2 + 40);
    }
    *(_WORD *)(v2 + 18) = v3 | 0x8000;
  }
  return *(_DWORD *)(a1 + 56) < *(_DWORD *)(a2 + 56);
}

BOOL llvm::Instruction::copyIRFlags(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    HIDWORD(v6) = *(unsigned __int8 *)(a1 + 16) - 41;
    LODWORD(v6) = HIDWORD(v6);
    unsigned int v5 = v6 >> 1;
    BOOL v7 = v5 > 6;
    int v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
      if (v10 < 0x1C)
      {
        if (v10 != 5) {
          goto LABEL_15;
        }
        int v11 = *(unsigned __int16 *)(a2 + 18) - 13;
      }
      else
      {
        int v11 = v10 - 41;
      }
      HIDWORD(v13) = v11;
      LODWORD(v13) = v11;
      unsigned int v12 = v13 >> 1;
      BOOL v7 = v12 > 6;
      int v14 = (1 << v12) & 0x47;
      if (!v7 && v14 != 0)
      {
        int v16 = *(unsigned char *)(a1 + 17) & 0xFB | (4 * ((*(unsigned __int8 *)(a2 + 17) >> 2) & 1));
        *(unsigned char *)(a1 + 17) = v16;
        *(unsigned char *)(a1 + 17) = v16 & 0xFD | *(unsigned char *)(a2 + 17) & 2;
      }
    }
  }
LABEL_15:
  unsigned int v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 < 0x1C)
  {
    if (v17 != 5) {
      goto LABEL_30;
    }
    unsigned int v20 = *(unsigned __int16 *)(a2 + 18);
    BOOL v7 = v20 > 0x1B;
    int v21 = (1 << v20) & 0xC180000;
    if (v7 || v21 == 0) {
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v7 = v17 > 0x37;
    uint64_t v18 = (1 << v17) & 0xC1800000000000;
    if (v7 || v18 == 0) {
      goto LABEL_30;
    }
  }
  unsigned int v23 = *(unsigned __int8 *)(a1 + 16);
  if (v23 <= 0x37 && ((1 << v23) & 0xC1800000000000) != 0) {
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 17) & 0xFD | *(unsigned char *)(a2 + 17) & 2;
  }
LABEL_30:
  BOOL result = llvm::FPMathOperator::classof(a2);
  if (result)
  {
    BOOL result = llvm::FPMathOperator::classof(a1);
    if (result) {
      *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17) & 0xFE | *(unsigned char *)(a1 + 17) & 1;
    }
  }
  if (*(unsigned char *)(a2 + 16) == 62 && a1 && *(unsigned char *)(a1 + 16) == 62) {
    *(unsigned char *)(a1 + 17) |= *(unsigned char *)(a2 + 17) & 2;
  }
  return result;
}

const char *llvm::Instruction::getOpcodeName(llvm::Instruction *this)
{
  if ((this - 1) > 0x42) {
    return "<Invalid operator> ";
  }
  else {
    return off_2655AE228[(int)this - 1];
  }
}

BOOL llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if ((v1 - 63) < 3) {
    return 1;
  }
  if (v1 == 60 || v1 == 61) {
    return (*((_WORD *)this + 9) & 0x380) != 0;
  }
  return 0;
}

BOOL llvm::Instruction::isLaunderOrStripInvariantGroup(llvm::Instruction *this)
{
  if (*((unsigned char *)this + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *((void *)this - 4);
  if (!v1
    || *(unsigned char *)(v1 + 16)
    || *(void *)(v1 + 24) != *((void *)this + 9)
    || (*(_DWORD *)(v1 + 32) & 0x2000) == 0)
  {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 36);
  return v3 == 169 || v3 == 293;
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t result = 0;
  switch(v2)
  {
    case 30:
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 3) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 31:
      uint64_t result = (*((_DWORD *)this + 5) >> 1) & 0x3FFFFFF;
      break;
    case 32:
    case 38:
      uint64_t result = (*((_DWORD *)this + 5) & 0x7FFFFFFu) - 1;
      break;
    case 33:
      uint64_t result = 2;
      break;
    case 36:
      uint64_t result = *((_WORD *)this + 9) & 1;
      break;
    case 37:
      uint64_t result = 1;
      break;
    case 39:
      uint64_t result = (*((_DWORD *)this + 20) + 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this, unsigned int a2)
{
  switch(*((unsigned char *)this + 16))
  {
    case 0x1F:
      int v7 = *((_DWORD *)this + 5);
      if ((v7 & 0x40000000) != 0) {
        int v3 = (char *)*((void *)this - 1);
      }
      else {
        int v3 = (char *)this - 32 * (v7 & 0x7FFFFFF);
      }
      uint64_t v9 = (2 * a2) | 1;
      goto LABEL_20;
    case 0x20:
    case 0x26:
      int v2 = *((_DWORD *)this + 5);
      if ((v2 & 0x40000000) != 0) {
        int v3 = (char *)*((void *)this - 1);
      }
      else {
        int v3 = (char *)this - 32 * (v2 & 0x7FFFFFF);
      }
      uint64_t v9 = a2 + 1;
LABEL_20:
      unsigned int v5 = &v3[32 * v9];
      return *(void *)v5;
    case 0x21:
      uint64_t v4 = -64;
      if (!a2) {
        uint64_t v4 = -96;
      }
      unsigned int v5 = (char *)this + v4;
      return *(void *)v5;
    case 0x22:
    case 0x23:
      __break(1u);
      JUMPOUT(0x261E47958);
    case 0x24:
      if ((*((_WORD *)this + 9) & 1) == 0) {
        return 0;
      }
      unsigned int v5 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF) + 32;
      return *(void *)v5;
    case 0x25:
      unsigned int v5 = (char *)this - 32;
      return *(void *)v5;
    case 0x27:
      if (a2)
      {
        unint64_t v6 = (char *)this + 32 * a2 + -32 * *((unsigned int *)this + 20) - 32;
LABEL_10:
        unsigned int v5 = v6 - 32;
      }
      else
      {
        unsigned int v5 = (char *)this - 32 * *((unsigned int *)this + 20) - 64;
      }
      return *(void *)v5;
    default:
      unint64_t v6 = (char *)this - 32 * a2;
      goto LABEL_10;
  }
}

uint64_t llvm::Instruction::setSuccessor(llvm::Instruction *this, unsigned int a2, llvm::BasicBlock *a3)
{
  switch(*((unsigned char *)this + 16))
  {
    case 0x1F:
      uint64_t result = llvm::SwitchInst::setSuccessor((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 0x20:
    case 0x26:
      uint64_t result = llvm::IndirectBrInst::setSuccessor((uint64_t)this, a2, a3);
      break;
    case 0x21:
      if (a2) {
        uint64_t result = llvm::InvokeInst::setUnwindDest((uint64_t)this, (uint64_t)a3);
      }
      else {
        uint64_t result = llvm::InvokeInst::setNormalDest((uint64_t)this, (uint64_t)a3);
      }
      break;
    case 0x22:
    case 0x23:
      __break(1u);
      JUMPOUT(0x261E479E4);
    case 0x24:
      uint64_t result = llvm::CleanupReturnInst::setUnwindDest((uint64_t)this, (uint64_t)a3);
      break;
    case 0x25:
      uint64_t result = llvm::GlobalIFunc::setResolver((uint64_t)this, (uint64_t)a3);
      break;
    case 0x27:
      uint64_t result = llvm::CallBrInst::setSuccessor(this, a2, a3);
      break;
    default:
      uint64_t result = llvm::BranchInst::setSuccessor((uint64_t)this, a2, (uint64_t)a3);
      break;
  }
  return result;
}

uint64_t llvm::IndirectBrInst::setSuccessor(uint64_t this, int a2, llvm::BasicBlock *a3)
{
  uint64_t v3 = (a2 + 1);
  int v4 = *(_DWORD *)(this + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(this - 8);
  }
  else {
    uint64_t v5 = this - 32 * (v4 & 0x7FFFFFF);
  }
  uint64_t v6 = v5 + 32 * v3;
  if (*(void *)v6)
  {
    **(void **)(v6 + 16) = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
    }
  }
  *(void *)uint64_t v6 = a3;
  if (a3)
  {
    uint64_t v10 = *((void *)a3 + 1);
    int v8 = (void *)((char *)a3 + 8);
    uint64_t v9 = v10;
    uint64_t v11 = v5 + 32 * v3;
    *(void *)(v11 + 8) = v10;
    if (v10) {
      *(void *)(v9 + 16) = v11 + 8;
    }
    *(void *)(v11 + 16) = v8;
    void *v8 = v6;
  }
  return this;
}

uint64_t llvm::CallBrInst::setSuccessor(llvm::CallBrInst *this, int a2, llvm::BasicBlock *a3)
{
  if (a2) {
    return llvm::CallBrInst::setIndirectDest((uint64_t)this, a2 - 1, a3);
  }
  else {
    return llvm::CallBrInst::setDefaultDest((uint64_t)this, a3);
  }
}

llvm::BasicBlock *llvm::Instruction::replaceSuccessorWith(llvm::Instruction *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t result = (llvm::BasicBlock *)llvm::Instruction::getNumSuccessors(this);
  if (result)
  {
    int v7 = (int)result;
    for (unsigned int i = 0; i != v7; ++i)
    {
      uint64_t result = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(this, i);
      if (result == a2) {
        uint64_t result = (llvm::BasicBlock *)llvm::Instruction::setSuccessor(this, i, a3);
      }
    }
  }
  return result;
}

uint64_t llvm::Instruction::copyMetadata(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = (uint64_t *)result;
  v20[8] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 48) || (*(unsigned char *)(a2 + 23) & 0x20) != 0)
  {
    v15[0] = 0;
    v15[1] = 0;
    int v16 = 0;
    if (a4)
    {
      uint64_t v8 = 4 * a4;
      do
      {
        int v9 = *a3++;
        LODWORD(v17) = v9;
        llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v15, &v17, (uint64_t)&v18);
        v8 -= 4;
      }
      while (v8);
    }
    uint64_t v18 = v20;
    uint64_t v19 = 0x400000000;
    llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v18);
    if (v19)
    {
      uint64_t v10 = (llvm::MDNode **)v18;
      uint64_t v11 = 16 * v19;
      do
      {
        if (!a4
          || (uint64_t v17 = 0,
              llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(v15, v10, &v17)))
        {
          llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, v10[1]);
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (!a4
      || (int v14 = 0,
          uint64_t v17 = 0,
          (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(v15, &v14, &v17) & 1) != 0))
    {
      unsigned int v12 = *(unsigned __int8 **)(a2 + 48);
      unint64_t v13 = v12;
      if (v12) {
        llvm::MetadataTracking::track((uint64_t)&v13, (uint64_t)v12, 2);
      }
      llvm::TrackingMDRef::operator=(v7 + 6, &v13);
      if (v13) {
        llvm::MetadataTracking::untrack((uint64_t)&v13, (uint64_t)v13);
      }
    }
    if (v18 != v20) {
      free(v18);
    }
    return MEMORY[0x263E500A0](v15[0], 4);
  }
  return result;
}

uint64_t llvm::CallBrInst::setDefaultDest(uint64_t this, llvm::BasicBlock *a2)
{
  uint64_t v2 = this - 32 * *(unsigned int *)(this + 80);
  uint64_t v4 = *(void *)(v2 - 64);
  uint64_t v3 = v2 - 64;
  if (v4)
  {
    **(void **)(v3 + 16) = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(v3 + 16);
    }
  }
  *(void *)uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v6 = (void *)((char *)a2 + 8);
    uint64_t v7 = v8;
    *(void *)(v3 + 8) = v8;
    if (v8) {
      *(void *)(v7 + 16) = v3 + 8;
    }
    *(void *)(v3 + 16) = v6;
    *uint64_t v6 = v3;
  }
  return this;
}

uint64_t llvm::CallBrInst::setIndirectDest(uint64_t this, unsigned int a2, llvm::BasicBlock *a3)
{
  uint64_t v3 = this - 32 * *(unsigned int *)(this + 80) - 32;
  uint64_t v4 = (void *)(v3 + 32 * a2);
  uint64_t v5 = v4;
  if (*v4)
  {
    uint64_t v7 = (void *)v4[2];
    uint64_t v6 = v4 + 2;
    *uint64_t v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  *uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v11 = *((void *)a3 + 1);
    int v9 = (void *)((char *)a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 + 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    void *v9 = v5;
  }
  return this;
}

uint64_t llvm::AllocaInst::isArrayAllocation(llvm::AllocaInst *this)
{
  uint64_t v1 = *((void *)this - 4);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 16) == 16;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = (llvm::APInt *)(v1 + 24);
  unsigned int v5 = *(_DWORD *)(v1 + 32);
  if (v5 > 0x40) {
    BOOL v6 = llvm::APInt::countLeadingZerosSlowCase(v4) == v5 - 1;
  }
  else {
    BOOL v6 = *(void *)v4 == 1;
  }
  int v7 = v6;
  return v7 ^ 1u;
}

const char *llvm::SelectInst::areInvalidOperands(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2 != *a3) {
    return "both values to select must have same type";
  }
  int v5 = *(unsigned __int8 *)(v3 + 8);
  if (v5 == 12) {
    return "select values cannot have token type";
  }
  uint64_t v6 = *a1;
  if (!*a1 || (*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
  {
    if (v6 != **(void **)v6 + 1920) {
      return "select condition must be i1 or <n x i1>";
    }
    return 0;
  }
  if (*(void *)(v6 + 24) != **(void **)v6 + 1920) {
    return "vector select condition element type must be i1";
  }
  if ((v5 & 0xFE) == 0x12)
  {
    if (*(_DWORD *)(v3 + 32) != *(_DWORD *)(v6 + 32) || (v5 == 19) != (*(_DWORD *)(v6 + 8) == 19)) {
      return "vector select requires selected vectors to have the same vector length as select condition";
    }
    return 0;
  }
  return "selected values for vector select must be vectors";
}

void llvm::LandingPadInst::init(llvm::LandingPadInst *this, unsigned int a2, const llvm::Twine *a3)
{
  *((_DWORD *)this + 15) = a2;
  *((_DWORD *)this + 5) &= 0xF8000000;
  uint64_t v6 = operator new(32 * a2);
  *((void *)this - 1) = v6;
  if (a2)
  {
    int v7 = &v6[4 * a2];
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = this;
      v6 += 4;
    }
    while (v6 != v7);
  }
  llvm::Value::setName(this, a3);
  *((_WORD *)this + 9) &= ~1u;
}

char *llvm::LandingPadInst::Create(llvm::LandingPadInst *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  unsigned int v7 = a2;
  int v9 = operator new(0x48uLL);
  uint64_t v10 = (char *)(v9 + 2);
  void v9[7] = v9[7] & 0x38000000 | 0x40000000;
  *(void *)int v9 = 0;
  uint64_t v11 = (llvm::LandingPadInst *)llvm::Instruction::Instruction((uint64_t)(v9 + 2), (uint64_t)this, 66, 0, 0, (uint64_t *)a4);
  llvm::LandingPadInst::init(v11, v7, a3);
  return v10;
}

void llvm::LandingPadInst::growOperands(llvm::LandingPadInst *this, int a2)
{
  unsigned int v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < v2 + a2)
  {
    if (v2 <= 1) {
      unsigned int v2 = 1;
    }
    unsigned int v3 = (a2 + 2 * v2) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v3;
    llvm::User::growHungoffUses(this, v3, 0);
  }
}

void llvm::LandingPadInst::addClause(llvm::LandingPadInst *this, llvm::Constant *a2)
{
  uint64_t v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  llvm::LandingPadInst::growOperands(this, 1);
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v5 & 0xF8000000 | (v5 + 1) & 0x7FFFFFF;
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v6 = (char *)this - 32 * ((v5 + 1) & 0x7FFFFFF);
  }
  unsigned int v7 = &v6[32 * v4];
  if (*(void *)v7)
  {
    **((void **)v7 + 2) = *((void *)v7 + 1);
    uint64_t v8 = *((void *)v7 + 1);
    if (v8) {
      *(void *)(v8 + 16) = *((void *)v7 + 2);
    }
  }
  *(void *)unsigned int v7 = a2;
  if (a2)
  {
    uint64_t v11 = *((void *)a2 + 1);
    uint64_t v10 = (char **)((char *)a2 + 8);
    uint64_t v9 = v11;
    uint64_t v12 = &v6[32 * v4];
    *((void *)v12 + 1) = v11;
    if (v11) {
      *(void *)(v9 + 16) = v12 + 8;
    }
    *((void *)v12 + 2) = v10;
    *uint64_t v10 = v7;
  }
}

uint64_t llvm::CallBase::getArgOperandWithAttribute(uint64_t a1, int a2)
{
  int v7 = 0;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 && llvm::AttributeListImpl::hasAttrSomewhere(v4, a2, &v7)) {
    return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  }
  uint64_t v6 = *(void *)(a1 - 32);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  uint64_t result = *(void *)(v6 + 112);
  if (result)
  {
    if (llvm::AttributeListImpl::hasAttrSomewhere(result, a2, &v7)) {
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
    }
    return 0;
  }
  return result;
}

BOOL llvm::CallBase::paramHasAttr(llvm::CallBase *this, int a2, int a3)
{
  unsigned int v4 = a2 + 2;
  uint64_t v5 = *((void *)this + 8);
  if (v5)
  {
    if (v4 < *(_DWORD *)(v5 + 8))
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 40);
      if (v6)
      {
        if ((*(unsigned __int8 *)(v6 + a3 / 8 + 12) >> (a3 & 7))) {
          return 1;
        }
      }
    }
  }
  uint64_t v8 = *((void *)this - 4);
  if (!v8) {
    return 0;
  }
  if (*(unsigned char *)(v8 + 16)) {
    return 0;
  }
  if (*(void *)(v8 + 24) != *((void *)this + 9)) {
    return 0;
  }
  uint64_t v9 = *(void *)(v8 + 112);
  if (!v9) {
    return 0;
  }
  if (v4 >= *(_DWORD *)(v9 + 8)) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 8 * v4 + 40);
  if (!v10 || ((*(unsigned __int8 *)(v10 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0) {
    return 0;
  }
  if (a3 == 67)
  {
    BOOL hasReadingOperandBundles = llvm::CallBase::hasReadingOperandBundles(this);
    return !hasReadingOperandBundles;
  }
  if (a3 != 45)
  {
    if (a3 != 44) {
      return 1;
    }
    if (llvm::CallBase::hasReadingOperandBundles(this)) {
      return 0;
    }
  }
  BOOL hasReadingOperandBundles = llvm::CallBase::hasClobberingOperandBundles(this);
  return !hasReadingOperandBundles;
}

BOOL llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  v4[1] = *MEMORY[0x263EF8340];
  v4[0] = 0x800000007;
  BOOL result = llvm::CallBase::hasOperandBundlesOtherThan((uint64_t)this, (__int32 *)v4, 2uLL);
  if (result)
  {
    uint64_t v3 = *((void *)this - 4);
    return !v3 || *(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *((void *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

BOOL llvm::CallBase::hasClobberingOperandBundles(llvm::CallBase *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v4 = xmmword_261EA6D50;
  BOOL result = llvm::CallBase::hasOperandBundlesOtherThan((uint64_t)this, (__int32 *)&v4, 4uLL);
  if (result)
  {
    uint64_t v3 = *((void *)this - 4);
    return !v3 || *(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *((void *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 - 32);
  int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2) {
    BOOL v4 = v3 == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (*(_WORD *)(v2 + 18) != 49) {
      return 0;
    }
    uint64_t v2 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    int v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v2 + 112);
  if (!v6) {
    return 0;
  }
  return (*(unsigned __int8 *)(v6 + a2 / 8 + 12) >> (a2 & 7)) & 1;
}

uint64_t llvm::CallBase::populateBundleOperandInfos(uint64_t ***a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = a2;
  int v7 = *((_DWORD *)a1 + 5);
  uint64_t v8 = (uint64_t)&(&a1[4 * a4])[-4 * (v7 & 0x7FFFFFF)];
  if (a3)
  {
    uint64_t v9 = 48 * a3;
    uint64_t v10 = (uint64_t **)(a2 + 32);
    do
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v23, *(v10 - 1), *v10, v8);
      uint64_t v8 = v11;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
    int v7 = *((_DWORD *)a1 + 5);
  }
  if (v7 < 0)
  {
    uint64_t v12 = &a1[-4 * (v7 & 0x7FFFFFF)];
    uint64_t v15 = (uint64_t)*(v12 - 1);
    int v14 = v12 - 1;
    uint64_t v13 = v15;
    if (v15)
    {
      uint64_t v16 = ***a1;
      uint64_t v17 = (uint64_t)v14 - v13;
      do
      {
        int v18 = *(char *)(v5 + 23);
        if (v18 >= 0) {
          uint64_t v19 = (uint64_t *)v5;
        }
        else {
          uint64_t v19 = *(uint64_t **)v5;
        }
        if (v18 >= 0) {
          unint64_t v20 = *(unsigned __int8 *)(v5 + 23);
        }
        else {
          unint64_t v20 = *(void *)(v5 + 8);
        }
        int v21 = *(_DWORD *)(v16 + 2660);
        v23[0] = v19;
        v23[1] = v20;
        int v24 = v21;
        *(void *)uint64_t v17 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v16 + 2648), v19, v20, &v24);
        *(_DWORD *)(v17 + 8) = v4;
        v4 += (*(void *)(v5 + 32) - *(void *)(v5 + 24)) >> 3;
        *(_DWORD *)(v17 + 12) = v4;
        v5 += 48;
        v17 += 16;
      }
      while ((uint64_t ***)v17 != v14);
    }
  }
  return v8;
}

char *llvm::CallBase::getBundleOpInfoForOperand(char *this, unsigned int a2)
{
  int v2 = *((_DWORD *)this + 5);
  if (v2 < 0)
  {
    int v3 = &this[-32 * (v2 & 0x7FFFFFF)];
    uint64_t v6 = *((void *)v3 - 1);
    unsigned int v4 = v3 - 8;
    uint64_t v5 = v6;
    int v7 = &v4[-v6];
    if (v6 > 127)
    {
      if (v5)
      {
        do
        {
          if (&v7[16
                 * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                  / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10) / ((v4 - v7) >> 4)))] >= v4)
            this = v4 - 16;
          else {
            this = &v7[16
          }
                     * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                      / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10)
                                     / ((v4 - v7) >> 4)))];
          unsigned int v9 = *((_DWORD *)this + 3);
          if (*((_DWORD *)this + 2) <= a2 && v9 > a2) {
            break;
          }
          if (v9 > a2) {
            unsigned int v4 = this;
          }
          else {
            int v7 = this + 16;
          }
        }
        while (v7 != v4);
      }
      else
      {
        return v7;
      }
    }
    else if (v5)
    {
      do
      {
        while (1)
        {
          this = v7;
          if (*((_DWORD *)v7 + 2) <= a2) {
            break;
          }
          v7 += 16;
          if (this + 16 == v4) {
            return this;
          }
        }
        v7 += 16;
      }
      while (*((_DWORD *)this + 3) <= a2 && v7 != v4);
    }
  }
  return this;
}

uint64_t llvm::CallBase::getOperandBundle@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(this + 20);
  if (v3 < 0 && (v5 = v3 & 0x7FFFFFF, v6 = this - 32 * v5, unint64_t v7 = *(void *)(v6 - 8), (v7 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v8 = (v7 >> 4);
    unsigned int v9 = (unsigned int *)(this - (v7 + 32 * v5));
    while (1)
    {
      uint64_t v10 = *((void *)v9 - 1);
      if (*(_DWORD *)(v10 + 8) == a2) {
        break;
      }
      v9 += 4;
      if (!--v8) {
        goto LABEL_2;
      }
    }
    uint64_t v12 = v9;
    uint64_t v11 = *v9;
    uint64_t v13 = v12[1] - v11;
    *(void *)a3 = v6 + 32 * v11;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v10;
    char v4 = 1;
  }
  else
  {
LABEL_2:
    char v4 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v4;
  return this;
}

BOOL llvm::CallBase::hasOperandBundlesOtherThan(uint64_t a1, __int32 *__s, size_t __n)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x80000000) == 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a1 - 32 * (v3 & 0x7FFFFFF) - 8);
  if ((v6 & 0xFFFFFFFF0) == 0) {
    return 0;
  }
  unsigned int v9 = &__s[__n];
  uint64_t v10 = (v6 >> 4) - 1;
  uint64_t v11 = a1 - 8;
  do
  {
    uint64_t v12 = wmemchr(__s, *(_DWORD *)(*(void *)(v11- (*(void *)(a1 - 8 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))+ 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)))+ 8), __n);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v9;
    }
    uint64_t v14 = v13 - __s;
    BOOL result = v14 == __n;
    BOOL v15 = v14 == __n || v10-- == 0;
    v11 += 16;
  }
  while (!v15);
  return result;
}

uint64_t llvm::CallBase::getMemoryEffects(llvm::CallBase *this)
{
  uint64_t v8 = *((void *)this + 8);
  uint64_t MemoryEffects = llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v8);
  uint64_t v3 = *((void *)this - 4);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 16) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v8 = *(void *)(v3 + 112);
    int v5 = llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v8);
    int v6 = *((_DWORD *)this + 5);
    if (v6 < 0 && (*((void *)this - 4 * (v6 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0)
    {
      if (llvm::CallBase::hasReadingOperandBundles(this)) {
        v5 |= 0x15u;
      }
      if (llvm::CallBase::hasClobberingOperandBundles(this)) {
        v5 |= 0x2Au;
      }
    }
    return v5 & MemoryEffects;
  }
  return MemoryEffects;
}

void llvm::CallInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::Twine *a8)
{
  unsigned int v11 = a5;
  *(void *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v14, a4, &a4[a5], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a6, a7, v11);
  llvm::Value::setName((llvm::Value *)a1, a8);
}

void llvm::InvokeInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11)
{
  unsigned int v11 = a7;
  *(void *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v16, a6, &a6[a7], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  llvm::InvokeInst::setNormalDest(a1, a4);
  llvm::InvokeInst::setUnwindDest(a1, a5);
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a9, a10, v11);
  llvm::Value::setName((llvm::Value *)a1, a11);
}

void llvm::CallBrInst::init(uint64_t a1, uint64_t a2, uint64_t a3, llvm::BasicBlock *a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11)
{
  unsigned int v11 = a8;
  *(void *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v18, a7, &a7[a8], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  *(_DWORD *)(a1 + 80) = a6;
  llvm::CallBrInst::setDefaultDest(a1, a4);
  if (*(_DWORD *)(a1 + 80))
  {
    unsigned int v17 = 0;
    do
    {
      llvm::CallBrInst::setIndirectDest(a1, v17, *(llvm::BasicBlock **)(a5 + 8 * v17));
      ++v17;
    }
    while (v17 != *(_DWORD *)(a1 + 80));
  }
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a9, a10, v11);
  llvm::Value::setName((llvm::Value *)a1, a11);
}

unsigned int *llvm::CallBrInst::getIndirectDests@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x1000000000;
  uint64_t v3 = this[20];
  if (v3)
  {
    BOOL v4 = this;
    int v5 = this - 8;
    do
    {
      this = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)a2, *(void *)&v5[-8 * v4[20]]);
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::ReturnInst::ReturnInst(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a2 + 1608;
  if (a3) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = llvm::Instruction::Instruction(a1, v5, 1, a1 + 32 * v6, a3 != 0, a4);
  if (a3)
  {
    uint64_t v8 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    uint64_t v9 = -v8;
    uint64_t v10 = (void *)(result - 32 * v8);
    if (*v10)
    {
      uint64_t v11 = result + 32 * v9;
      uint64_t v13 = *(void **)(v11 + 16);
      uint64_t v12 = (void *)(v11 + 16);
      *uint64_t v13 = *(v12 - 1);
      uint64_t v14 = *(v12 - 1);
      if (v14) {
        *(void *)(v14 + 16) = *v12;
      }
    }
    *uint64_t v10 = a3;
    uint64_t v17 = *(void *)(a3 + 8);
    char v16 = (void *)(a3 + 8);
    uint64_t v15 = v17;
    uint64_t v18 = result + 32 * v9;
    *(void *)(v18 + 8) = v17;
    if (v17) {
      *(void *)(v15 + 16) = v18 + 8;
    }
    *(void *)(v18 + 16) = v16;
    void *v16 = v10;
  }
  return result;
}

uint64_t llvm::ResumeInst::ResumeInst(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  BOOL v4 = (char *)this - 32;
  uint64_t result = llvm::Instruction::Instruction((uint64_t)this, ***(void ***)a2 + 1608, 6, (uint64_t)this - 32, 1, (uint64_t *)a3);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v6 = *(void *)(result - 24);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(result - 16);
    }
  }
  *(void *)(result - 32) = a2;
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v8 = (void *)((char *)a2 + 8);
  uint64_t v7 = v9;
  *(void *)(result - 24) = v9;
  if (v9) {
    *(void *)(v7 + 16) = result - 24;
  }
  *(void *)(result - 16) = v8;
  void *v8 = v4;
  return result;
}

uint64_t llvm::CleanupReturnInst::init(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    *(_WORD *)(result + 18) |= 1u;
    uint64_t v3 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    uint64_t v4 = -v3;
    uint64_t v5 = (void *)(result - 32 * v3);
    if (*v5)
    {
      uint64_t v6 = result + 32 * v4;
      uint64_t v8 = *(void **)(v6 + 16);
      uint64_t v7 = (void *)(v6 + 16);
      void *v8 = *(v7 - 1);
      uint64_t v9 = *(v7 - 1);
      if (v9) {
        *(void *)(v9 + 16) = *v7;
      }
    }
    *uint64_t v5 = a2;
    if (a2)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v10 = (void *)(a2 + 8);
      uint64_t v11 = v12;
      uint64_t v13 = result + 32 * v4;
      *(void *)(v13 + 8) = v12;
      if (v12) {
        *(void *)(v11 + 16) = v13 + 8;
      }
      *(void *)(v13 + 16) = v10;
      *uint64_t v10 = v5;
    }
    uint64_t v14 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    if (*(void *)(v14 + 32))
    {
      **(void **)(v14 + 48) = *(void *)(v14 + 40);
      uint64_t v15 = *(void *)(v14 + 40);
      if (v15) {
        *(void *)(v15 + 16) = *(void *)(v14 + 48);
      }
    }
    *(void *)(v14 + 32) = a3;
    uint64_t v18 = *(void *)(a3 + 8);
    char v16 = (void *)(a3 + 8);
    uint64_t v17 = v18;
    *(void *)(v14 + 40) = v18;
    if (v18) {
      *(void *)(v17 + 16) = v14 + 40;
    }
    *(void *)(v14 + 48) = v16;
    void *v16 = v14 + 32;
  }
  else
  {
    uint64_t v19 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    uint64_t v20 = -v19;
    int v21 = (void *)(result - 32 * v19);
    if (*v21)
    {
      uint64_t v22 = result + 32 * v20;
      int v24 = *(void **)(v22 + 16);
      unsigned int v23 = (void *)(v22 + 16);
      void *v24 = *(v23 - 1);
      uint64_t v25 = *(v23 - 1);
      if (v25) {
        *(void *)(v25 + 16) = *v23;
      }
    }
    *int v21 = a2;
    if (a2)
    {
      uint64_t v28 = *(void *)(a2 + 8);
      uint64_t v26 = (void *)(a2 + 8);
      uint64_t v27 = v28;
      uint64_t v29 = result + 32 * v20;
      *(void *)(v29 + 8) = v28;
      if (v28) {
        *(void *)(v27 + 16) = v29 + 8;
      }
      *(void *)(v29 + 16) = v26;
      void *v26 = v21;
    }
  }
  return result;
}

uint64_t llvm::CatchReturnInst::init(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v4 = *(void *)(result - 56);
    if (v4) {
      *(void *)(v4 + 16) = *(void *)(result - 48);
    }
  }
  *uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v5 = (void *)(a2 + 8);
    uint64_t v6 = v7;
    *(void *)(result - 56) = v7;
    if (v7) {
      *(void *)(v6 + 16) = result - 56;
    }
    *(void *)(result - 48) = v5;
    *uint64_t v5 = v3;
  }
  uint64_t v8 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v9 = *(void *)(result - 24);
    if (v9) {
      *(void *)(v9 + 16) = *(void *)(result - 16);
    }
  }
  void *v8 = a3;
  if (a3)
  {
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v10 = (void *)(a3 + 8);
    uint64_t v11 = v12;
    *(void *)(result - 24) = v12;
    if (v12) {
      *(void *)(v11 + 16) = result - 24;
    }
    *(void *)(result - 16) = v10;
    *uint64_t v10 = v8;
  }
  return result;
}

llvm::CatchSwitchInst *llvm::CatchSwitchInst::CatchSwitchInst(llvm::CatchSwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11 = llvm::Instruction::Instruction((uint64_t)this, *(void *)a2, 10, 0, 0, (uint64_t *)a6);
  if (a3) {
    int v12 = a4 + 1;
  }
  else {
    int v12 = a4;
  }
  llvm::CatchSwitchInst::init(v11, (uint64_t)a2, (uint64_t)a3, v12 + 1);
  llvm::Value::setName(this, a5);
  return this;
}

void *llvm::CatchSwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 60) = a4;
  if (a3) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | v8;
  uint64_t result = operator new(32 * a4);
  *(void *)(a1 - 8) = result;
  if (a4)
  {
    uint64_t v10 = result;
    do
    {
      *uint64_t v10 = 0;
      v10[1] = 0;
      _OWORD v10[2] = 0;
      v10[3] = a1;
      v10 += 4;
    }
    while (v10 != &result[4 * a4]);
  }
  int v11 = *(_DWORD *)(a1 + 20);
  if ((v11 & 0x40000000) != 0) {
    int v12 = result;
  }
  else {
    int v12 = (void *)(a1 - 32 * (v11 & 0x7FFFFFF));
  }
  if (*v12)
  {
    *(void *)v12[2] = v12[1];
    uint64_t v13 = v12[1];
    if (v13) {
      *(void *)(v13 + 16) = v12[2];
    }
  }
  *int v12 = a2;
  if (a2)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v15 = (void *)(a2 + 8);
    uint64_t v14 = v16;
    v12[1] = v16;
    if (v16) {
      *(void *)(v14 + 16) = v12 + 1;
    }
    v12[2] = v15;
    *uint64_t v15 = v12;
  }
  if (a3)
  {
    *(_WORD *)(a1 + 18) |= 1u;
    return (void *)llvm::CatchSwitchInst::setUnwindDest(a1, a3);
  }
  return result;
}

void llvm::CatchSwitchInst::growOperands(llvm::CatchSwitchInst *this, int a2)
{
  int v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 + a2))
  {
    unsigned int v3 = (a2 + 2 * v2) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v3;
    llvm::User::growHungoffUses(this, v3, 0);
  }
}

void llvm::CatchSwitchInst::addHandler(llvm::CatchSwitchInst *this, llvm::BasicBlock *a2)
{
  uint64_t v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  llvm::CatchSwitchInst::growOperands(this, 1);
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v5 & 0xF8000000 | (v5 + 1) & 0x7FFFFFF;
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v6 = (char *)this - 32 * ((v5 + 1) & 0x7FFFFFF);
  }
  uint64_t v7 = &v6[32 * v4];
  if (*(void *)v7)
  {
    **((void **)v7 + 2) = *((void *)v7 + 1);
    uint64_t v8 = *((void *)v7 + 1);
    if (v8) {
      *(void *)(v8 + 16) = *((void *)v7 + 2);
    }
  }
  *(void *)uint64_t v7 = a2;
  if (a2)
  {
    uint64_t v11 = *((void *)a2 + 1);
    uint64_t v10 = (char **)((char *)a2 + 8);
    uint64_t v9 = v11;
    int v12 = &v6[32 * v4];
    *((void *)v12 + 1) = v11;
    if (v11) {
      *(void *)(v9 + 16) = v12 + 8;
    }
    *((void *)v12 + 2) = v10;
    *uint64_t v10 = v7;
  }
}

void llvm::FuncletPadInst::init(llvm::Value *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const llvm::Twine *a5)
{
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v8, a3, &a3[a4], (uint64_t)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
  llvm::GlobalIFunc::setResolver((uint64_t)a1, a2);
  llvm::Value::setName(a1, a5);
}

uint64_t llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  uint64_t v4 = (char *)this - 32;
  uint64_t result = llvm::Instruction::Instruction((uint64_t)this, ***(void ***)a2 + 1608, 2, (uint64_t)this - 32, 1, (uint64_t *)a3);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v6 = *(void *)(result - 24);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(result - 16);
    }
  }
  *(void *)(result - 32) = a2;
  uint64_t v9 = *((void *)a2 + 1);
  char v8 = (void *)((char *)a2 + 8);
  uint64_t v7 = v9;
  *(void *)(result - 24) = v9;
  if (v9) {
    *(void *)(v7 + 16) = result - 24;
  }
  *(void *)(result - 16) = v8;
  void *v8 = v4;
  return result;
}

uint64_t llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  char v8 = (void *)((char *)this - 96);
  uint64_t result = llvm::Instruction::Instruction((uint64_t)this, ***(void ***)a2 + 1608, 2, (uint64_t)this - 96, 3, (uint64_t *)a5);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v10 = *(void *)(result - 88);
    if (v10) {
      *(void *)(v10 + 16) = *(void *)(result - 80);
    }
  }
  void *v8 = a4;
  if (a4)
  {
    uint64_t v13 = *((void *)a4 + 1);
    int v12 = (void *)((char *)a4 + 8);
    uint64_t v11 = v13;
    *(void *)(result - 88) = v13;
    if (v13) {
      *(void *)(v11 + 16) = result - 88;
    }
    *(void *)(result - 80) = v12;
    *int v12 = v8;
  }
  uint64_t v14 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v15 = *(void *)(result - 56);
    if (v15) {
      *(void *)(v15 + 16) = *(void *)(result - 48);
    }
  }
  *uint64_t v14 = a3;
  if (a3)
  {
    uint64_t v18 = *((void *)a3 + 1);
    uint64_t v17 = (void *)((char *)a3 + 8);
    uint64_t v16 = v18;
    *(void *)(result - 56) = v18;
    if (v18) {
      *(void *)(v16 + 16) = result - 56;
    }
    *(void *)(result - 48) = v17;
    *uint64_t v17 = v14;
  }
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v19 = *(void *)(result - 24);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(result - 16);
    }
  }
  *(void *)(result - 32) = a2;
  uint64_t v22 = *((void *)a2 + 1);
  int v21 = (void *)((char *)a2 + 8);
  uint64_t v20 = v22;
  *(void *)(result - 24) = v22;
  if (v22) {
    *(void *)(v20 + 16) = result - 24;
  }
  *(void *)(result - 16) = v21;
  *int v21 = result - 32;
  return result;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  *(void *)this = ***(void ***)a2 + 1608;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 30;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  uint64_t v6 = (char *)a3 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v7 = (void *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a3 + 40, (uint64_t)this);
  uint64_t v8 = *((void *)this - 4);
  uint64_t v9 = *((void *)a3 + 5);
  *((void *)this + 4) = v6;
  *uint64_t v7 = v9;
  *(void *)(v9 + 8) = v7;
  *((void *)a3 + 5) = v7;
  if (v8)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v10 = *((void *)this - 3);
    if (v10) {
      *(void *)(v10 + 16) = *((void *)this - 2);
    }
  }
  *((void *)this - 4) = a2;
  uint64_t v13 = *((void *)a2 + 1);
  int v12 = (void *)((char *)a2 + 8);
  uint64_t v11 = v13;
  *((void *)this - 3) = v13;
  if (v13) {
    *(void *)(v11 + 16) = (char *)this - 24;
  }
  *((void *)this - 2) = v12;
  *int v12 = (char *)this - 32;
  return this;
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, llvm::Value *a4, unsigned __int8 a5, const llvm::Twine *a6, llvm::Instruction *a7)
{
  uint64_t v13 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  if (!a4) {
    a4 = (llvm::Value *)llvm::ConstantInt::get(*(void *)*a2 + 1992, 1);
  }
  uint64_t v14 = (llvm::Value *)llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)a1, v13, 31, a4, a7);
  *(void *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName(v14, a6);
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, char a3, llvm::Value *a4, llvm::BasicBlock *a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = a3 + 28;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  uint64_t v8 = (char *)a5 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v9 = (void *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)this);
  uint64_t v10 = (void *)((char *)this - 32);
  uint64_t v11 = *((void *)this - 4);
  uint64_t v12 = *((void *)a5 + 5);
  *((void *)this + 4) = v8;
  void *v9 = v12;
  *(void *)(v12 + 8) = v9;
  *((void *)a5 + 5) = v9;
  if (v11)
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v13 = *((void *)this - 3);
    if (v13) {
      *(void *)(v13 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v10 = a4;
  if (a4)
  {
    uint64_t v16 = *((void *)a4 + 1);
    uint64_t v15 = (void *)((char *)a4 + 8);
    uint64_t v14 = v16;
    *((void *)this - 3) = v16;
    if (v16) {
      *(void *)(v14 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v15;
    *uint64_t v15 = v10;
  }
  return this;
}

llvm::UnaryInstruction *llvm::LoadInst::LoadInst(llvm::UnaryInstruction *a1, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, __int16 a5, char a6, llvm::Instruction *a7)
{
  uint64_t v11 = llvm::UnaryInstruction::UnaryInstruction(a1, a2, 32, a3, a7);
  *(_WORD *)(v11 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(v11 + 18) & 0xFC00;
  *(unsigned char *)(v11 + 60) = 1;
  llvm::Value::setName((llvm::Value *)v11, a4);
  return a1;
}

llvm::UnaryInstruction *llvm::LoadInst::LoadInst(llvm::UnaryInstruction *a1, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, __int16 a5, char a6, __int16 a7, char a8, llvm::Instruction *a9)
{
  uint64_t v15 = llvm::UnaryInstruction::UnaryInstruction(a1, a2, 32, a3, a9);
  *(_WORD *)(v15 + 18) = *(_WORD *)(v15 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(unsigned char *)(v15 + 60) = a8;
  llvm::Value::setName((llvm::Value *)v15, a4);
  return a1;
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, uint64_t *a8)
{
  uint64_t v14 = a1 - 64;
  uint64_t result = llvm::Instruction::Instruction(a1, ***(void ***)a2 + 1608, 33, a1 - 64, 2, a8);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v16 = *(void *)(result - 56);
    if (v16) {
      *(void *)(v16 + 16) = *(void *)(result - 48);
    }
  }
  *(void *)(result - 64) = a2;
  uint64_t v19 = *(void *)(a2 + 8);
  uint64_t v18 = (uint64_t *)(a2 + 8);
  uint64_t v17 = v19;
  *(void *)(result - 56) = v19;
  if (v19) {
    *(void *)(v17 + 16) = result - 56;
  }
  *(void *)(result - 48) = v18;
  uint64_t *v18 = v14;
  uint64_t v20 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v21 = *(void *)(result - 24);
    if (v21) {
      *(void *)(v21 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v20 = a3;
  if (a3)
  {
    uint64_t v24 = *(void *)(a3 + 8);
    unsigned int v23 = (void *)(a3 + 8);
    uint64_t v22 = v24;
    *(void *)(result - 24) = v24;
    if (v24) {
      *(void *)(v22 + 16) = result - 24;
    }
    *(void *)(result - 16) = v23;
    *unsigned int v23 = v20;
  }
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *(unsigned char *)(result + 60) = a7;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  uint64_t v8 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v9 = *(void *)(result - 88);
    if (v9) {
      *(void *)(v9 + 16) = *(void *)(result - 80);
    }
  }
  void *v8 = a2;
  if (a2)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v10 = (void *)(a2 + 8);
    uint64_t v11 = v12;
    *(void *)(result - 88) = v12;
    if (v12) {
      *(void *)(v11 + 16) = result - 88;
    }
    *(void *)(result - 80) = v10;
    *uint64_t v10 = v8;
  }
  uint64_t v13 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v14 = *(void *)(result - 56);
    if (v14) {
      *(void *)(v14 + 16) = *(void *)(result - 48);
    }
  }
  *uint64_t v13 = a3;
  if (a3)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v15 = (void *)(a3 + 8);
    uint64_t v16 = v17;
    *(void *)(result - 56) = v17;
    if (v17) {
      *(void *)(v16 + 16) = result - 56;
    }
    *(void *)(result - 48) = v15;
    *uint64_t v15 = v13;
  }
  uint64_t v18 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v19 = *(void *)(result - 24);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(result - 16);
    }
  }
  void *v18 = a4;
  if (a4)
  {
    uint64_t v22 = *(void *)(a4 + 8);
    uint64_t v20 = (void *)(a4 + 8);
    uint64_t v21 = v22;
    *(void *)(result - 24) = v22;
    if (v22) {
      *(void *)(v21 + 16) = result - 24;
    }
    *(void *)(result - 16) = v20;
    *uint64_t v20 = v18;
  }
  __int16 v23 = *(_WORD *)(result + 18) & 0xC003;
  *(unsigned char *)(result + 60) = a8;
  *(_WORD *)(result + 18) = (4 * a6) & 0xC01F | (a5 << 8) | (32 * a7) & 0xC0FF | v23;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4, unsigned __int8 a5, __int16 a6, __int16 a7, char a8, uint64_t *a9)
{
  void v22[2] = *MEMORY[0x263EF8340];
  uint64_t v17 = **a3;
  uint64_t v18 = *v17 + 1920;
  v22[0] = *a3;
  v22[1] = v18;
  unint64_t v19 = llvm::StructType::get(v17, (uint64_t)v22, 2, 0);
  uint64_t v20 = llvm::Instruction::Instruction(a1, v19, 36, a1 - 96, 3, a9);
  llvm::AtomicCmpXchgInst::Init(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t llvm::AtomicRMWInst::Init(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, char a7)
{
  uint64_t v7 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v8 = *(void *)(result - 56);
    if (v8) {
      *(void *)(v8 + 16) = *(void *)(result - 48);
    }
  }
  *uint64_t v7 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    *(void *)(result - 56) = v11;
    if (v11) {
      *(void *)(v10 + 16) = result - 56;
    }
    *(void *)(result - 48) = v9;
    void *v9 = v7;
  }
  uint64_t v12 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v13 = *(void *)(result - 24);
    if (v13) {
      *(void *)(v13 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v12 = a4;
  if (a4)
  {
    uint64_t v16 = *(void *)(a4 + 8);
    uint64_t v14 = (void *)(a4 + 8);
    uint64_t v15 = v16;
    *(void *)(result - 24) = v16;
    if (v16) {
      *(void *)(v15 + 16) = result - 24;
    }
    *(void *)(result - 16) = v14;
    *uint64_t v14 = v12;
  }
  __int16 v17 = *(_WORD *)(result + 18) & 0x8001;
  *(unsigned char *)(result + 60) = a7;
  *(_WORD *)(result + 18) = ((2 * a6) | (16 * a2)) & 0x81FF | (a5 << 9) | v17;
  return result;
}

uint64_t llvm::AtomicRMWInst::AtomicRMWInst(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, __int16 a6, char a7, uint64_t *a8)
{
  __int16 v14 = a5;
  uint64_t v15 = llvm::Instruction::Instruction(a1, *a4, 37, a1 - 64, 2, a8);
  llvm::AtomicRMWInst::Init(v15, a2, a3, (uint64_t)a4, v14, a6, a7);
  return a1;
}

char *llvm::AtomicRMWInst::getOperationName(int a1)
{
  return off_2655AE440[a1];
}

void llvm::GetElementPtrInst::init(llvm::Value *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const llvm::Twine *a5)
{
  uint64_t v7 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  uint64_t v8 = -v7;
  uint64_t v9 = (void *)((char *)a1 - 32 * v7);
  if (*v9)
  {
    uint64_t v10 = (_DWORD *)((char *)a1 + 32 * v8);
    uint64_t v12 = (void *)*((void *)v10 + 2);
    uint64_t v11 = v10 + 4;
    *uint64_t v12 = *(v11 - 1);
    uint64_t v13 = *(v11 - 1);
    if (v13) {
      *(void *)(v13 + 16) = *v11;
    }
  }
  void *v9 = a2;
  if (a2)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    __int16 v14 = (void *)(a2 + 8);
    uint64_t v15 = v16;
    __int16 v17 = (_DWORD *)((char *)a1 + 32 * v8);
    *((void *)v17 + 1) = v16;
    if (v16) {
      *(void *)(v15 + 16) = v17 + 2;
    }
    *((void *)v17 + 2) = v14;
    *__int16 v14 = v9;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v18, a3, &a3[a4], (uint64_t)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 32);
  llvm::Value::setName(a1, a5);
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(llvm::GetElementPtrInst *this, llvm::Type *a2, llvm::Value *a3)
{
  int v5 = *((unsigned __int8 *)this + 8);
  if (this && v5 == 16)
  {
    if (llvm::StructType::indexValid(this, a2))
    {
      uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(a2);
      if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u) {
        uint64_t v7 = *(unsigned int **)UniqueInteger;
      }
      else {
        uint64_t v7 = (unsigned int *)UniqueInteger;
      }
      uint64_t v8 = (char *)(*((void *)this + 2) + 8 * *v7);
      return *(void *)v8;
    }
    return 0;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v9 = *(_DWORD *)(*(void *)a2 + 8);
  }
  if (v9 != 13) {
    return 0;
  }
  if (this && v5 == 17 || (uint64_t result = 0, this) && (v5 & 0xFE) == 0x12)
  {
    uint64_t v8 = (char *)this + 24;
    return *(void *)v8;
  }
  return result;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v9 = (char *)this - 64;
  if (*(void *)(llvm::Instruction::Instruction((uint64_t)this, *(void *)(*(void *)a2 + 24), 61, (uint64_t)this - 64, 2, (uint64_t *)a5)- 64))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v10 = *((void *)this - 7);
    if (v10) {
      *(void *)(v10 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v12 = (void *)((char *)a2 + 8);
  uint64_t v11 = v13;
  *((void *)this - 7) = v13;
  if (v13) {
    *(void *)(v11 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v12;
  *uint64_t v12 = v9;
  __int16 v14 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v15 = *((void *)this - 3);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)this - 2);
    }
  }
  *__int16 v14 = a3;
  if (a3)
  {
    uint64_t v18 = *((void *)a3 + 1);
    __int16 v17 = (void *)((char *)a3 + 8);
    uint64_t v16 = v18;
    *((void *)this - 3) = v18;
    if (v18) {
      *(void *)(v16 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v17;
    *__int16 v17 = v14;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  *(void *)this = *(void *)(*(void *)a2 + 24);
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 89;
  *((unsigned char *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  uint64_t v10 = (char *)a5 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v11 = (void *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)this);
  uint64_t v12 = *((void *)this - 8);
  uint64_t v13 = *((void *)a5 + 5);
  *((void *)this + 4) = v10;
  *uint64_t v11 = v13;
  *(void *)(v13 + 8) = v11;
  *((void *)a5 + 5) = v11;
  if (v12)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v14 = *((void *)this - 7);
    if (v14) {
      *(void *)(v14 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v17 = *((void *)a2 + 1);
  uint64_t v16 = (void *)((char *)a2 + 8);
  uint64_t v15 = v17;
  *((void *)this - 7) = v17;
  if (v17) {
    *(void *)(v15 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v16;
  void *v16 = (char *)this - 64;
  uint64_t v18 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v19 = *((void *)this - 3);
    if (v19) {
      *(void *)(v19 + 16) = *((void *)this - 2);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v22 = *((void *)a3 + 1);
    uint64_t v21 = (void *)((char *)a3 + 8);
    uint64_t v20 = v22;
    *((void *)this - 3) = v22;
    if (v22) {
      *(void *)(v20 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v21;
    *uint64_t v21 = v18;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11 = (char *)this - 96;
  if (*(void *)(llvm::Instruction::Instruction((uint64_t)this, *(void *)a2, 62, (uint64_t)this - 96, 3, (uint64_t *)a6)- 96))
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v12 = *((void *)this - 11);
    if (v12) {
      *(void *)(v12 + 16) = *((void *)this - 10);
    }
  }
  *((void *)this - 12) = a2;
  uint64_t v15 = *((void *)a2 + 1);
  uint64_t v14 = (void *)((char *)a2 + 8);
  uint64_t v13 = v15;
  *((void *)this - 11) = v15;
  if (v15) {
    *(void *)(v13 + 16) = (char *)this - 88;
  }
  *((void *)this - 10) = v14;
  *uint64_t v14 = v11;
  uint64_t v16 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v17 = *((void *)this - 7);
    if (v17) {
      *(void *)(v17 + 16) = *((void *)this - 6);
    }
  }
  void *v16 = a3;
  if (a3)
  {
    uint64_t v20 = *((void *)a3 + 1);
    uint64_t v19 = (void *)((char *)a3 + 8);
    uint64_t v18 = v20;
    *((void *)this - 7) = v20;
    if (v20) {
      *(void *)(v18 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v19;
    void *v19 = v16;
  }
  uint64_t v21 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v22 = *((void *)this - 3);
    if (v22) {
      *(void *)(v22 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v21 = a4;
  if (a4)
  {
    uint64_t v25 = *((void *)a4 + 1);
    uint64_t v24 = (void *)((char *)a4 + 8);
    uint64_t v23 = v25;
    *((void *)this - 3) = v25;
    if (v25) {
      *(void *)(v23 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v24;
    void *v24 = v21;
  }
  llvm::Value::setName(this, a5);
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  unsigned int v12 = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *((_DWORD *)this + 4) = 90;
  *((_DWORD *)this + 5) = v12;
  uint64_t v13 = (char *)a6 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v14 = (void *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a6 + 40, (uint64_t)this);
  uint64_t v15 = *((void *)this - 12);
  uint64_t v16 = *((void *)a6 + 5);
  *((void *)this + 4) = v13;
  *uint64_t v14 = v16;
  *(void *)(v16 + 8) = v14;
  *((void *)a6 + 5) = v14;
  if (v15)
  {
    **((void **)this - 10) = *((void *)this - 11);
    uint64_t v17 = *((void *)this - 11);
    if (v17) {
      *(void *)(v17 + 16) = *((void *)this - 10);
    }
  }
  *((void *)this - 12) = a2;
  uint64_t v20 = *((void *)a2 + 1);
  uint64_t v19 = (void *)((char *)a2 + 8);
  uint64_t v18 = v20;
  *((void *)this - 11) = v20;
  if (v20) {
    *(void *)(v18 + 16) = (char *)this - 88;
  }
  *((void *)this - 10) = v19;
  void *v19 = (char *)this - 96;
  uint64_t v21 = (void *)((char *)this - 64);
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v22 = *((void *)this - 7);
    if (v22) {
      *(void *)(v22 + 16) = *((void *)this - 6);
    }
  }
  *uint64_t v21 = a3;
  if (a3)
  {
    uint64_t v25 = *((void *)a3 + 1);
    uint64_t v24 = (void *)((char *)a3 + 8);
    uint64_t v23 = v25;
    *((void *)this - 7) = v25;
    if (v25) {
      *(void *)(v23 + 16) = (char *)this - 56;
    }
    *((void *)this - 6) = v24;
    void *v24 = v21;
  }
  uint64_t v26 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v27 = *((void *)this - 3);
    if (v27) {
      *(void *)(v27 + 16) = *((void *)this - 2);
    }
  }
  void *v26 = a4;
  if (a4)
  {
    uint64_t v30 = *((void *)a4 + 1);
    uint64_t v29 = (void *)((char *)a4 + 8);
    uint64_t v28 = v30;
    *((void *)this - 3) = v30;
    if (v30) {
      *(void *)(v28 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v29;
    *uint64_t v29 = v26;
  }
  llvm::Value::setName(this, a5);
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  v29[8] = *MEMORY[0x263EF8340];
  llvm::VectorType::get(*(uint64_t ***)(*(void *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(void *)a4 + 32) | ((unint64_t)(*(unsigned char *)(*(void *)a4 + 8) == 19) << 32)));
  llvm::Instruction::Instruction((uint64_t)this, v12, 63, (uint64_t)this - 64, 2, (uint64_t *)a6);
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x400000000;
  if (*((void *)this - 8))
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v13 = *((void *)this - 7);
    if (v13) {
      *(void *)(v13 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v16 = *((void *)a2 + 1);
  uint64_t v15 = (void *)((char *)a2 + 8);
  uint64_t v14 = v16;
  *((void *)this - 7) = v16;
  if (v16) {
    *(void *)(v14 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v15;
  *uint64_t v15 = (char *)this - 64;
  uint64_t v17 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v18 = *((void *)this - 3);
    if (v18) {
      *(void *)(v18 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v17 = a3;
  if (a3)
  {
    uint64_t v21 = *((void *)a3 + 1);
    uint64_t v20 = (void *)((char *)a3 + 8);
    uint64_t v19 = v21;
    *((void *)this - 3) = v21;
    if (v21) {
      *(void *)(v19 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v20;
    *uint64_t v20 = v17;
  }
  uint64_t __src = v29;
  uint64_t v28 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask((unsigned int *)a4, (unsigned int *)&__src);
  uint64_t v22 = (int *)__src;
  uint64_t v23 = (llvm::Type *)v28;
  uint64_t v24 = (char *)__src + 4 * v28;
  *((_DWORD *)this + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)this + 16, v22, v24);
  *((void *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v22, v23, *(unsigned char **)this, v25);
  llvm::Value::setName(this, a5);
  if (__src != v29) {
    free(__src);
  }
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  v32[8] = *MEMORY[0x263EF8340];
  llvm::VectorType::get(*(uint64_t ***)(*(void *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(void *)a4 + 32) | ((unint64_t)(*(unsigned char *)(*(void *)a4 + 8) == 19) << 32)));
  *(void *)this = v12;
  *((void *)this + 1) = 0;
  unsigned int v13 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 91;
  *((_DWORD *)this + 5) = v13;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a6 + 40, (uint64_t)this);
  uint64_t v14 = *((void *)this - 8);
  uint64_t v15 = *((void *)a6 + 5);
  *((void *)this + 4) = (char *)a6 + 40;
  *((void *)this + 3) = v15;
  *(void *)(v15 + 8) = (char *)this + 24;
  *((void *)a6 + 5) = (char *)this + 24;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x400000000;
  if (v14)
  {
    **((void **)this - 6) = *((void *)this - 7);
    uint64_t v16 = *((void *)this - 7);
    if (v16) {
      *(void *)(v16 + 16) = *((void *)this - 6);
    }
  }
  *((void *)this - 8) = a2;
  uint64_t v19 = *((void *)a2 + 1);
  uint64_t v18 = (void *)((char *)a2 + 8);
  uint64_t v17 = v19;
  *((void *)this - 7) = v19;
  if (v19) {
    *(void *)(v17 + 16) = (char *)this - 56;
  }
  *((void *)this - 6) = v18;
  void *v18 = (char *)this - 64;
  uint64_t v20 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v21 = *((void *)this - 3);
    if (v21) {
      *(void *)(v21 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v20 = a3;
  if (a3)
  {
    uint64_t v24 = *((void *)a3 + 1);
    uint64_t v23 = (void *)((char *)a3 + 8);
    uint64_t v22 = v24;
    *((void *)this - 3) = v24;
    if (v24) {
      *(void *)(v22 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v23;
    *uint64_t v23 = v20;
  }
  uint64_t __src = v32;
  uint64_t v31 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask((unsigned int *)a4, (unsigned int *)&__src);
  BOOL v25 = (int *)__src;
  uint64_t v26 = (llvm::Type *)v31;
  uint64_t v27 = (char *)__src + 4 * v31;
  *((_DWORD *)this + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)this + 16, v25, v27);
  *((void *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v25, v26, *(unsigned char **)this, v28);
  llvm::Value::setName(this, a5);
  if (__src != v32) {
    free(__src);
  }
  return this;
}

llvm::Value *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::Value *a1, void *a2, uint64_t a3, int *a4, llvm::Type *a5, const llvm::Twine *a6, uint64_t *a7)
{
  llvm::VectorType::get(*(uint64_t ***)(*a2 + 24), (llvm::Type *)(a5 | ((unint64_t)(*(unsigned char *)(*a2 + 8) == 19) << 32)));
  uint64_t v15 = llvm::Instruction::Instruction((uint64_t)a1, v14, 63, (uint64_t)a1 - 64, 2, a7);
  *(void *)(v15 + 64) = (char *)a1 + 80;
  uint64_t v16 = v15 + 64;
  *(void *)(v16 + 8) = 0x400000000;
  if (*((void *)a1 - 8))
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v17 = *((void *)a1 - 7);
    if (v17) {
      *(void *)(v17 + 16) = *((void *)a1 - 6);
    }
  }
  *((void *)a1 - 8) = a2;
  uint64_t v20 = a2[1];
  uint64_t v19 = a2 + 1;
  uint64_t v18 = v20;
  *((void *)a1 - 7) = v20;
  if (v20) {
    *(void *)(v18 + 16) = (char *)a1 - 56;
  }
  *((void *)a1 - 6) = v19;
  void *v19 = (char *)a1 - 64;
  uint64_t v21 = (void *)((char *)a1 - 32);
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v22 = *((void *)a1 - 3);
    if (v22) {
      *(void *)(v22 + 16) = *((void *)a1 - 2);
    }
  }
  *uint64_t v21 = a3;
  if (a3)
  {
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v24 = (void *)(a3 + 8);
    uint64_t v23 = v25;
    *((void *)a1 - 3) = v25;
    if (v25) {
      *(void *)(v23 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v24;
    void *v24 = v21;
  }
  *((_DWORD *)a1 + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)v16, a4, &a4[(void)a5]);
  *((void *)a1 + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(a4, a5, *(unsigned char **)a1, v26);
  llvm::Value::setName(a1, a6);
  return a1;
}

unsigned int *llvm::ShuffleVectorInst::getShuffleMask(unsigned int *this, unsigned int *a2)
{
  unint64_t v3 = *(unsigned int *)(*(void *)this + 32);
  if (*((unsigned char *)this + 16) == 13)
  {
    uint64_t v4 = a2[2];
    if (v4 != v3)
    {
      if (v4 <= v3)
      {
        return llvm::SmallVectorImpl<int>::append(a2, v3 - v4, 0);
      }
      else
      {
        a2[2] = v3;
      }
    }
  }
  else
  {
    int v5 = (unsigned __int8 *)this;
    int v6 = *(unsigned __int8 *)(*(void *)this + 8);
    if (a2[3] < v3) {
      this = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 4, v3, 4);
    }
    if (v6 == 19)
    {
      if (v5[16] - 11 >= 2) {
        int v7 = 0;
      }
      else {
        int v7 = -1;
      }
      for (int i = v7; v3; LODWORD(v3) = v3 - 1)
        this = (unsigned int *)llvm::SmallVectorImpl<int>::emplace_back<int &>(a2, &i);
    }
    else if ((v5[16] & 0xFE) == 0xE)
    {
      if (v3)
      {
        unsigned int v8 = 0;
        do
        {
          int ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v5, v8);
          this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, ElementAsInteger);
          ++v8;
        }
        while (v3 != v8);
      }
    }
    else if (v3)
    {
      uint64_t v10 = 0;
      do
      {
        Aggregateunsigned __int16 Element = llvm::Constant::getAggregateElement((llvm::Constant *)v5, v10);
        if (*(unsigned __int8 *)(AggregateElement + 16) - 11 >= 2)
        {
          unsigned int v13 = (void *)(AggregateElement + 24);
          if (*(_DWORD *)(AggregateElement + 32) >= 0x41u) {
            unsigned int v13 = (void *)*v13;
          }
          uint64_t v12 = (void *)*v13;
        }
        else
        {
          LODWORD(v12) = -1;
        }
        this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, (int)v12);
        uint64_t v10 = (llvm::Type *)(v10 + 1);
      }
      while (v3 != v10);
    }
  }
  return this;
}

BOOL llvm::ShuffleVectorInst::isValidOperands(uint64_t *a1, void *a2, int *__s2, uint64_t a4)
{
  uint64_t v4 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) != 0x12 || v4 != *a2) {
    return 0;
  }
  if (a4)
  {
    int v6 = 2 * *(_DWORD *)(v4 + 32);
    uint64_t v7 = 4 * a4;
    for (int i = __s2; *i == -1 || *i < v6; ++i)
    {
      v7 -= 4;
      if (!v7) {
        return *(_DWORD *)(*a1 + 8) != 19
      }
            || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
    }
    return 0;
  }
  return *(_DWORD *)(*a1 + 8) != 19
      || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
}

uint64_t llvm::SmallVectorImpl<int>::emplace_back<int &>(unsigned int *a1, int *a2)
{
  uint64_t v3 = a1[2];
  if (v3 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = a1[2];
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v3) = *a2;
    unsigned int v5 = a1[2] + 1;
    a1[2] = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(int *a1, llvm::Type *a2, unsigned char *a3, BOOL a4)
{
  v16[16] = *MEMORY[0x263EF8340];
  unsigned int v5 = (llvm::UndefValue *)(**(void **)a3 + 1992);
  if (a3[8] == 19)
  {
    llvm::VectorType::get((uint64_t **)(**(void **)a3 + 1992), (llvm::Type *)(a2 | 0x100000000));
    if (*a1)
    {
      return llvm::UndefValue::get(v6, v7);
    }
    else
    {
      return llvm::Constant::getNullValue(v6, v7);
    }
  }
  else
  {
    uint64_t v14 = v16;
    uint64_t v15 = 0x1000000000;
    if (a2)
    {
      uint64_t v9 = 4 * (void)a2;
      do
      {
        uint64_t v10 = (llvm::Type *)*a1;
        if (v10 == -1) {
          uint64_t v11 = llvm::UndefValue::get(v5, v10);
        }
        else {
          uint64_t v11 = llvm::ConstantInt::get(v5, v10, 0, a4);
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, v11);
        ++a1;
        v9 -= 4;
      }
      while (v9);
      uint64_t v12 = (uint64_t ****)v14;
      a2 = (llvm::Type *)v15;
    }
    else
    {
      uint64_t v12 = (uint64_t ****)v16;
    }
    unsigned int v13 = llvm::ConstantVector::get(v12, a2);
    if (v14 != v16) {
      free(v14);
    }
    return (uint64_t)v13;
  }
}

void llvm::InsertValueInst::init(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned char *__src, uint64_t a5, const llvm::Twine *a6)
{
  unsigned int v8 = a1 - 16;
  if (*((void *)a1 - 8))
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v9 = *((void *)a1 - 7);
    if (v9) {
      *(void *)(v9 + 16) = *((void *)a1 - 6);
    }
  }
  *(void *)unsigned int v8 = a2;
  if (a2)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v10 = (unsigned int **)(a2 + 8);
    uint64_t v11 = v12;
    *((void *)a1 - 7) = v12;
    if (v12) {
      *(void *)(v11 + 16) = a1 - 14;
    }
    *((void *)a1 - 6) = v10;
    *uint64_t v10 = v8;
  }
  unsigned int v13 = a1 - 8;
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v14 = *((void *)a1 - 3);
    if (v14) {
      *(void *)(v14 + 16) = *((void *)a1 - 2);
    }
  }
  *(void *)unsigned int v13 = a3;
  if (a3)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v15 = (unsigned int **)(a3 + 8);
    uint64_t v16 = v17;
    *((void *)a1 - 3) = v17;
    if (v17) {
      *(void *)(v16 + 16) = a1 - 6;
    }
    *((void *)a1 - 2) = v15;
    *uint64_t v15 = v13;
  }
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(a1 + 16, __src, &__src[4 * a5]);
  llvm::Value::setName((llvm::Value *)a1, a6);
}

uint64_t llvm::ExtractValueInst::getIndexedType(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 4 * a3;
    while (1)
    {
      unint64_t v4 = *a2;
      int v5 = *(unsigned __int8 *)(a1 + 8);
      if (a1 && v5 == 17)
      {
        if (*(void *)(a1 + 32) <= v4) {
          return 0;
        }
        int v6 = (uint64_t *)(a1 + 24);
      }
      else
      {
        uint64_t v7 = 0;
        if (!a1 || v5 != 16) {
          return v7;
        }
        if (v4 >= *(_DWORD *)(a1 + 12)) {
          return 0;
        }
        int v6 = (uint64_t *)(*(void *)(a1 + 16) + 8 * v4);
      }
      a1 = *v6;
      ++a2;
      uint64_t v7 = *v6;
      v3 -= 4;
      if (!v3) {
        return v7;
      }
    }
  }
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryOperator::UnaryOperator(llvm::UnaryInstruction *a1, char a2, llvm::Value *a3, llvm::Type *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v9 = (void *)(llvm::UnaryInstruction::UnaryInstruction(a1, a4, a2, a3, a6) - 32);
  if (*v9)
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v10 = *((void *)a1 - 3);
    if (v10) {
      *(void *)(v10 + 16) = *((void *)a1 - 2);
    }
  }
  void *v9 = a3;
  if (a3)
  {
    uint64_t v13 = *((void *)a3 + 1);
    uint64_t v12 = (void *)((char *)a3 + 8);
    uint64_t v11 = v13;
    *((void *)a1 - 3) = v13;
    if (v13) {
      *(void *)(v11 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v12;
    *uint64_t v12 = v9;
  }
  llvm::Value::setName(a1, a5);
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryOperator::Create(char a1, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  unsigned int v8 = operator new(0x60uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 8;
  uint64_t v9 = *(llvm::Type **)a2;
  uint64_t v10 = (llvm::UnaryInstruction *)(v8 + 8);
  return llvm::UnaryOperator::UnaryOperator(v10, a1, a2, v9, a3, a4);
}

char *llvm::UnaryOperator::Create(char a1, llvm::Value *a2, const llvm::Twine *a3, uint64_t a4)
{
  unsigned int v8 = operator new(0x60uLL);
  uint64_t v9 = (char *)(v8 + 8);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 8;
  llvm::UnaryOperator::UnaryOperator((llvm::UnaryInstruction *)(v8 + 8), a1, a2, *(llvm::Type **)a2, a3, 0);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a4 + 40, (uint64_t)(v8 + 8));
  uint64_t v10 = *(void *)(a4 + 40);
  *((void *)v8 + 7) = v10;
  *((void *)v8 + 8) = a4 + 40;
  v8 += 14;
  *(void *)(v10 + 8) = v8;
  *(void *)(a4 + 40) = v8;
  return v9;
}

llvm::Value *llvm::BinaryOperator::BinaryOperator(llvm::Value *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::Twine *a6, uint64_t *a7)
{
  uint64_t v11 = (void *)((char *)a1 - 64);
  if (*(void *)(llvm::Instruction::Instruction((uint64_t)a1, a5, a2, (uint64_t)a1 - 64, 2, a7) - 64))
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v12 = *((void *)a1 - 7);
    if (v12) {
      *(void *)(v12 + 16) = *((void *)a1 - 6);
    }
  }
  *uint64_t v11 = a3;
  if (a3)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v14 = (void *)(a3 + 8);
    uint64_t v13 = v15;
    *((void *)a1 - 7) = v15;
    if (v15) {
      *(void *)(v13 + 16) = (char *)a1 - 56;
    }
    *((void *)a1 - 6) = v14;
    *uint64_t v14 = v11;
  }
  uint64_t v16 = (void *)((char *)a1 - 32);
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v17 = *((void *)a1 - 3);
    if (v17) {
      *(void *)(v17 + 16) = *((void *)a1 - 2);
    }
  }
  void *v16 = a4;
  if (a4)
  {
    uint64_t v20 = *(void *)(a4 + 8);
    uint64_t v19 = (void *)(a4 + 8);
    uint64_t v18 = v20;
    *((void *)a1 - 3) = v20;
    if (v20) {
      *(void *)(v18 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v19;
    void *v19 = v16;
  }
  llvm::Value::setName(a1, a6);
  return a1;
}

llvm::Value *llvm::BinaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4, uint64_t *a5)
{
  uint64_t v10 = operator new(0x80uLL);
  v10[21] = v10[21] & 0x38000000 | 2;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 16;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 16;
  uint64_t v11 = *a2;
  uint64_t v12 = (llvm::Value *)(v10 + 16);
  return llvm::BinaryOperator::BinaryOperator(v12, a1, (uint64_t)a2, a3, v11, a4, a5);
}

char *llvm::BinaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4, uint64_t a5)
{
  uint64_t v10 = operator new(0x80uLL);
  v10[21] = v10[21] & 0x38000000 | 2;
  uint64_t v11 = (char *)(v10 + 16);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 16;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 16;
  llvm::BinaryOperator::BinaryOperator((llvm::Value *)(v10 + 16), a1, (uint64_t)a2, a3, *a2, a4, 0);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a5 + 40, (uint64_t)(v10 + 16));
  uint64_t v12 = *(void *)(a5 + 40);
  *((void *)v10 + 11) = v12;
  *((void *)v10 + 12) = a5 + 40;
  v10 += 22;
  *(void *)(v12 + 8) = v10;
  *(void *)(a5 + 40) = v10;
  return v11;
}

uint64_t llvm::CastInst::isEliminableCastPair(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *this, uint64_t a5, uint64_t a6, llvm::Type *a7, uint64_t a8)
{
  uint64_t v10 = a5;
  uint64_t v11 = a3;
  unsigned int v12 = a2;
  BOOL v14 = a1 == 49;
  if (a2 != 49) {
    BOOL v14 = 0;
  }
  if (a1 == 49 && ((*(_DWORD *)(a3 + 8) & 0xFE) == 18) != ((*((_DWORD *)this + 2) & 0xFE) == 18))
  {
    if (!v14) {
      return 0;
    }
  }
  else if (a2 == 49 && !(v14 | ((*((_DWORD *)this + 2) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18)))
  {
    return 0;
  }
  uint64_t v15 = (char *)&llvm::CastInst::isEliminableCastPair(llvm::Instruction::CastOps,llvm::Instruction::CastOps,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *)::CastResults
      + 13 * (int)a1
      + (int)a2
      - 532;
  uint64_t result = *v15;
  switch(*v15)
  {
    case 1:
    case 0xD:
    case 0xF:
      return a1;
    case 2:
    case 0x10:
      return a2;
    case 3:
      if ((*(_DWORD *)(a3 + 8) & 0xFE) != 0x12)
      {
        uint64_t result = a1;
        if (*(unsigned char *)(a5 + 8) == 13) {
          return result;
        }
      }
      return 0;
    case 4:
      unsigned int v25 = *(_DWORD *)(a5 + 8);
      if ((*(_DWORD *)(a5 + 8) & 0xFD) == 4) {
        unsigned int v26 = a1;
      }
      else {
        unsigned int v26 = 0;
      }
      if (v25 < 4 || v25 == 5) {
        return a1;
      }
      else {
        return v26;
      }
    case 5:
      if (*(unsigned char *)(a3 + 8) == 13) {
        return a2;
      }
      else {
        return 0;
      }
    case 6:
      unsigned int v22 = *(_DWORD *)(a3 + 8);
      if ((*(_DWORD *)(a3 + 8) & 0xFD) == 4) {
        unsigned int v23 = a2;
      }
      else {
        unsigned int v23 = 0;
      }
      if (v22 < 4 || v22 == 5) {
        return a2;
      }
      else {
        return v23;
      }
    case 7:
      if (byte_26B41DF08) {
        return 0;
      }
      unsigned int v30 = *(_DWORD *)(a3 + 8);
      if ((v30 & 0xFE) == 0x12) {
        unsigned int v30 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      int v31 = *(_DWORD *)(a5 + 8);
      if ((v31 & 0xFE) == 0x12) {
        int v31 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
      }
      if ((v31 ^ v30) > 0xFF) {
        return 0;
      }
      if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
        this = (llvm::Type *)**((void **)this + 2);
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
      if (PrimitiveSizeInBits == 64)
      {
LABEL_75:
        uint64_t result = 49;
      }
      else
      {
        uint64_t result = 0;
        if (a6 && a8 == a6)
        {
          if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
            a6 = **(void **)(a6 + 16);
          }
          if (PrimitiveSizeInBits >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a6)) {
            uint64_t result = 49;
          }
          else {
            uint64_t result = 0;
          }
        }
      }
      break;
    case 8:
      uint64_t v17 = (llvm::Type *)a3;
      if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
        uint64_t v17 = **(llvm::Type ***)(a3 + 16);
      }
      unsigned int v18 = llvm::Type::getPrimitiveSizeInBits(v17);
      uint64_t v19 = (llvm::Type *)v10;
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        uint64_t v19 = **(llvm::Type ***)(v10 + 16);
      }
      unsigned int v20 = llvm::Type::getPrimitiveSizeInBits(v19);
      if (v18 <= v20) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = v12;
      }
      if (v18 < v20) {
        unsigned int v21 = a1;
      }
      if (v11 == v10) {
        return 49;
      }
      else {
        return v21;
      }
    case 9:
      return 39;
    case 0xA:
      __break(1u);
      JUMPOUT(0x261E4B360);
    case 0xB:
      if (!a7) {
        return 0;
      }
      if ((*((_DWORD *)a7 + 2) & 0xFE) == 0x12) {
        a7 = (llvm::Type *)**((void **)a7 + 2);
      }
      unsigned int v28 = llvm::Type::getPrimitiveSizeInBits(a7);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
        uint64_t v11 = **(void **)(v11 + 16);
      }
      unsigned int v29 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
      if (v29 > v28) {
        return 0;
      }
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        uint64_t v10 = **(void **)(v10 + 16);
      }
      if (v29 != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10)) {
        return 0;
      }
      goto LABEL_75;
    case 0xC:
      unsigned int v33 = *(_DWORD *)(a3 + 8);
      if ((v33 & 0xFE) == 0x12) {
        unsigned int v33 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      int v34 = *(_DWORD *)(a5 + 8);
      if ((v34 & 0xFE) == 0x12) {
        int v34 = *(_DWORD *)(**(void **)(a5 + 16) + 8);
      }
      if ((v34 ^ v33) < 0x100) {
        return 49;
      }
      else {
        return 50;
      }
    case 0xE:
      if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
        uint64_t v11 = **(void **)(a3 + 16);
      }
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12) {
        uint64_t v10 = **(void **)(a5 + 16);
      }
      if (*(void *)(v11 + 24) == *(void *)(v10 + 24)) {
        return 50;
      }
      else {
        return 0;
      }
    case 0x11:
      return 43;
    default:
      return result;
  }
  return result;
}

llvm::Value *llvm::CastInst::Create(int a1, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  switch(a1)
  {
    case '\'':
      BOOL v14 = operator new(0x60uLL);
      v14[13] = v14[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v14 + 8);
      *(void *)BOOL v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = v14 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v14 + 8);
      unsigned int v12 = a3;
      char v13 = 39;
      break;
    case '(':
      uint64_t v15 = operator new(0x60uLL);
      v15[13] = v15[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v15 + 8);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = v15 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v15 + 8);
      unsigned int v12 = a3;
      char v13 = 40;
      break;
    case ')':
      uint64_t v16 = operator new(0x60uLL);
      v16[13] = v16[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v16 + 8);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = v16 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v16 + 8);
      unsigned int v12 = a3;
      char v13 = 41;
      break;
    case '*':
      uint64_t v17 = operator new(0x60uLL);
      v17[13] = v17[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v17 + 8);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = v17 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v17 + 8);
      unsigned int v12 = a3;
      char v13 = 42;
      break;
    case '+':
      unsigned int v18 = operator new(0x60uLL);
      v18[13] = v18[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v18 + 8);
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = v18 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v18 + 8);
      unsigned int v12 = a3;
      char v13 = 43;
      break;
    case ',':
      uint64_t v19 = operator new(0x60uLL);
      v19[13] = v19[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v19 + 8);
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = v19 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v19 + 8);
      unsigned int v12 = a3;
      char v13 = 44;
      break;
    case '-':
      unsigned int v20 = operator new(0x60uLL);
      v20[13] = v20[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v20 + 8);
      *(void *)unsigned int v20 = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = v20 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v20 + 8);
      unsigned int v12 = a3;
      char v13 = 45;
      break;
    case '.':
      unsigned int v21 = operator new(0x60uLL);
      v21[13] = v21[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v21 + 8);
      *(void *)unsigned int v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 3) = v21 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v21 + 8);
      unsigned int v12 = a3;
      char v13 = 46;
      break;
    case '/':
      unsigned int v22 = operator new(0x60uLL);
      void v22[13] = v22[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v22 + 8);
      *(void *)unsigned int v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = v22 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v22 + 8);
      unsigned int v12 = a3;
      char v13 = 47;
      break;
    case '0':
      unsigned int v23 = operator new(0x60uLL);
      v23[13] = v23[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v23 + 8);
      *(void *)unsigned int v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      *((void *)v23 + 3) = v23 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v23 + 8);
      unsigned int v12 = a3;
      char v13 = 48;
      break;
    case '1':
      uint64_t v24 = operator new(0x60uLL);
      v24[13] = v24[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v24 + 8);
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *((void *)v24 + 3) = v24 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v24 + 8);
      unsigned int v12 = a3;
      char v13 = 49;
      break;
    case '2':
      unsigned int v25 = operator new(0x60uLL);
      v25[13] = v25[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v25 + 8);
      *(void *)unsigned int v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 3) = v25 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v25 + 8);
      unsigned int v12 = a3;
      char v13 = 50;
      break;
    default:
      uint64_t v9 = operator new(0x60uLL);
      v9[13] = v9[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v9 + 8);
      unsigned int v12 = a3;
      char v13 = 38;
      break;
  }
  llvm::UnaryInstruction::UnaryInstruction(v11, v12, v13, a2, a5);
  llvm::Value::setName(v10, a4);
  return v10;
}

llvm::Value *llvm::CastInst::Create(int a1, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  switch(a1)
  {
    case '\'':
      BOOL v14 = operator new(0x60uLL);
      v14[13] = v14[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v14 + 8);
      *(void *)BOOL v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = v14 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v14 + 8);
      unsigned int v12 = a3;
      char v13 = 39;
      break;
    case '(':
      uint64_t v15 = operator new(0x60uLL);
      v15[13] = v15[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v15 + 8);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = v15 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v15 + 8);
      unsigned int v12 = a3;
      char v13 = 40;
      break;
    case ')':
      uint64_t v16 = operator new(0x60uLL);
      v16[13] = v16[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v16 + 8);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = v16 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v16 + 8);
      unsigned int v12 = a3;
      char v13 = 41;
      break;
    case '*':
      uint64_t v17 = operator new(0x60uLL);
      v17[13] = v17[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v17 + 8);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = v17 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v17 + 8);
      unsigned int v12 = a3;
      char v13 = 42;
      break;
    case '+':
      unsigned int v18 = operator new(0x60uLL);
      v18[13] = v18[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v18 + 8);
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *((void *)v18 + 3) = v18 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v18 + 8);
      unsigned int v12 = a3;
      char v13 = 43;
      break;
    case ',':
      uint64_t v19 = operator new(0x60uLL);
      v19[13] = v19[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v19 + 8);
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = v19 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v19 + 8);
      unsigned int v12 = a3;
      char v13 = 44;
      break;
    case '-':
      unsigned int v20 = operator new(0x60uLL);
      v20[13] = v20[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v20 + 8);
      *(void *)unsigned int v20 = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = v20 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v20 + 8);
      unsigned int v12 = a3;
      char v13 = 45;
      break;
    case '.':
      unsigned int v21 = operator new(0x60uLL);
      v21[13] = v21[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v21 + 8);
      *(void *)unsigned int v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 3) = v21 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v21 + 8);
      unsigned int v12 = a3;
      char v13 = 46;
      break;
    case '/':
      unsigned int v22 = operator new(0x60uLL);
      void v22[13] = v22[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v22 + 8);
      *(void *)unsigned int v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = v22 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v22 + 8);
      unsigned int v12 = a3;
      char v13 = 47;
      break;
    case '0':
      unsigned int v23 = operator new(0x60uLL);
      v23[13] = v23[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v23 + 8);
      *(void *)unsigned int v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      *((void *)v23 + 3) = v23 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v23 + 8);
      unsigned int v12 = a3;
      char v13 = 48;
      break;
    case '1':
      uint64_t v24 = operator new(0x60uLL);
      v24[13] = v24[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v24 + 8);
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *((void *)v24 + 3) = v24 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v24 + 8);
      unsigned int v12 = a3;
      char v13 = 49;
      break;
    case '2':
      unsigned int v25 = operator new(0x60uLL);
      v25[13] = v25[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v25 + 8);
      *(void *)unsigned int v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 3) = v25 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v25 + 8);
      unsigned int v12 = a3;
      char v13 = 50;
      break;
    default:
      uint64_t v9 = operator new(0x60uLL);
      v9[13] = v9[13] & 0x38000000 | 1;
      uint64_t v10 = (llvm::Value *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v9 + 8;
      uint64_t v11 = (llvm::UnaryInstruction *)(v9 + 8);
      unsigned int v12 = a3;
      char v13 = 38;
      break;
  }
  llvm::UnaryInstruction::UnaryInstruction(v11, v12, v13, a2, a5);
  llvm::Value::setName(v10, a4);
  return v10;
}

llvm::Value *llvm::CastInst::CreatePointerCast(llvm::CastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
    int v5 = *(unsigned __int8 *)(**((void **)a2 + 2) + 8);
  }
  else {
    int v5 = *((_DWORD *)a2 + 2);
  }
  if (v5 == 13) {
    return llvm::CastInst::Create(47, this, a2, a3, a4);
  }
  else {
    return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(this, a2, a3, a4, a4);
  }
}

llvm::Value *llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(llvm::CastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  unsigned int v9 = *(_DWORD *)(*(void *)this + 8);
  if ((v9 & 0xFE) == 0x12) {
    unsigned int v9 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  int v10 = *((_DWORD *)a2 + 2);
  if ((v10 & 0xFE) == 0x12) {
    int v10 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  if ((v10 ^ v9) < 0x100) {
    int v11 = 49;
  }
  else {
    int v11 = 50;
  }
  return llvm::CastInst::Create(v11, this, a2, a3, a4);
}

llvm::Value *llvm::CastInst::CreateIntegerCast(llvm::CastInst *this, llvm::Type ***a2, llvm::Type *a3, const llvm::Twine *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  int v8 = (int)a3;
  uint64_t v11 = *(void *)this;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
    uint64_t v11 = **(void **)(v11 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
  char v13 = (llvm::Type *)a2;
  if ((a2[1] & 0xFE) == 0x12) {
    char v13 = *a2[2];
  }
  unsigned int v14 = llvm::Type::getPrimitiveSizeInBits(v13);
  if (v8) {
    int v15 = 40;
  }
  else {
    int v15 = 39;
  }
  if (PrimitiveSizeInBits > v14) {
    int v15 = 38;
  }
  if (PrimitiveSizeInBits == v14) {
    int v16 = 49;
  }
  else {
    int v16 = v15;
  }
  return llvm::CastInst::Create(v16, this, (llvm::Type *)a2, a4, a5);
}

uint64_t llvm::CastInst::castIsValid(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  int v4 = v3;
  if (v3 == 7 || v3 == 14) {
    return 0;
  }
  int v7 = *(_DWORD *)(a3 + 8);
  int v8 = v7;
  if (v7 == 7 || v7 == 14) {
    return 0;
  }
  int v10 = v3 & 0xFE;
  if (v10 == 16) {
    return 0;
  }
  int v11 = v7 & 0xFE;
  if (v11 == 16) {
    return 0;
  }
  int v15 = (llvm::Type *)a2;
  if (v10 == 18) {
    int v15 = **(llvm::Type ***)(a2 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v15);
  uint64_t v17 = (llvm::Type *)a3;
  if (v11 == 18) {
    uint64_t v17 = **(llvm::Type ***)(a3 + 16);
  }
  unsigned int v18 = llvm::Type::getPrimitiveSizeInBits(v17);
  if (v10 == 18) {
    unint64_t v19 = *(unsigned int *)(a2 + 32) | ((unint64_t)(v3 == 19) << 32);
  }
  else {
    unint64_t v19 = 0;
  }
  if (v11 == 18) {
    unint64_t v20 = *(unsigned int *)(a3 + 32) | ((unint64_t)(v7 == 19) << 32);
  }
  else {
    unint64_t v20 = 0;
  }
  switch(a1)
  {
    case '&':
      if (v10 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v11 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 13) {
        return 0;
      }
      return v19 == v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits > v18;
    case '\'':
    case '(':
      if (v10 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v11 == 18) {
        LOBYTE(v7) = *(unsigned char *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 13) {
        return 0;
      }
      return v19 == v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits < v18;
    case ')':
    case '*':
      if (v10 == 18) {
        unsigned int v3 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4) {
        return 0;
      }
      if (v11 == 18) {
        int v8 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
      }
      BOOL v21 = v8 == 13 && v19 == v20;
      return v21 && HIDWORD(v19) == HIDWORD(v20);
    case '+':
    case ',':
      if (v10 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v11 == 18) {
        int v7 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 < 4u || v7 == 5)
      {
        if (v19 != v20) {
          return 0;
        }
        return HIDWORD(v19) == HIDWORD(v20);
      }
      uint64_t result = 0;
      if ((v7 & 0xFD) == 4 && v19 == v20) {
        return HIDWORD(v19) == HIDWORD(v20);
      }
      return result;
    case '-':
      if (v10 == 18) {
        unsigned int v3 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4) {
        return 0;
      }
      if (v11 == 18) {
        int v7 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4) {
        return 0;
      }
      return v19 == v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits > v18;
    case '.':
      if (v10 == 18) {
        unsigned int v3 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4) {
        return 0;
      }
      if (v11 == 18) {
        int v7 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4) {
        return 0;
      }
      return v19 == v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits < v18;
    case '/':
      uint64_t result = 0;
      if (v19 != v20) {
        return result;
      }
      if (v10 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 15) {
        return 0;
      }
      if (v11 == 18) {
        int v8 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
      }
      return v8 == 13;
    case '0':
      uint64_t result = 0;
      if (v19 != v20) {
        return result;
      }
      if (v10 == 18) {
        LOBYTE(v3) = *(unsigned char *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 13) {
        return 0;
      }
      if (v11 == 18) {
        int v8 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
      }
      return v8 == 15;
    case '1':
      uint64_t v27 = a2;
      if (v10 == 18)
      {
        uint64_t v27 = **(void **)(a2 + 16);
        int v4 = *(unsigned __int8 *)(v27 + 8);
      }
      if (v4 != 15) {
        uint64_t v27 = 0;
      }
      uint64_t v28 = a3;
      if (v11 == 18)
      {
        uint64_t v28 = **(void **)(a3 + 16);
        int v8 = *(unsigned __int8 *)(v28 + 8);
      }
      if (v8 != 15) {
        uint64_t v28 = 0;
      }
      if ((v27 == 0) == (v28 != 0)) {
        return 0;
      }
      if (v27)
      {
        if ((*(_DWORD *)(v28 + 8) ^ *(_DWORD *)(v27 + 8)) > 0xFF) {
          return 0;
        }
        if (v10 == 18 && v11 == 18)
        {
          BOOL v21 = v19 == v20;
          return v21 && HIDWORD(v19) == HIDWORD(v20);
        }
        else if (v10 == 18)
        {
          return v19 == 1 && HIDWORD(v19) == 0;
        }
        else
        {
          if (v11 != 18) {
            return 1;
          }
          return v20 == 1 && HIDWORD(v20) == 0;
        }
      }
      else
      {
        unint64_t v29 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a2);
        char v31 = v30;
        if (v29 != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3)) {
          return 0;
        }
        return v31 == v32;
      }
    case '2':
      if (v10 == 18) {
        unsigned int v3 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      if (v3 != 15) {
        return 0;
      }
      if (v11 == 18) {
        int v7 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
      }
      if (v7 != 15) {
        return 0;
      }
      BOOL v21 = (v7 ^ v3) > 0xFF && v19 == v20;
      return v21 && HIDWORD(v19) == HIDWORD(v20);
    default:
      return 0;
  }
}

_WORD *llvm::CmpInst::CmpInst(_WORD *a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t *a8, uint64_t a9)
{
  unsigned int v14 = a1 - 32;
  if (*(void *)(llvm::Instruction::Instruction((uint64_t)a1, a2, a3, (uint64_t)(a1 - 32), 2, a8) - 64))
  {
    **((void **)a1 - 6) = *((void *)a1 - 7);
    uint64_t v15 = *((void *)a1 - 7);
    if (v15) {
      *(void *)(v15 + 16) = *((void *)a1 - 6);
    }
  }
  *unsigned int v14 = a5;
  if (a5)
  {
    uint64_t v18 = *(void *)(a5 + 8);
    uint64_t v17 = (void *)(a5 + 8);
    uint64_t v16 = v18;
    *((void *)a1 - 7) = v18;
    if (v18) {
      *(void *)(v16 + 16) = a1 - 28;
    }
    *((void *)a1 - 6) = v17;
    *uint64_t v17 = v14;
  }
  unint64_t v19 = a1 - 16;
  if (*((void *)a1 - 4))
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v20 = *((void *)a1 - 3);
    if (v20) {
      *(void *)(v20 + 16) = *((void *)a1 - 2);
    }
  }
  void *v19 = a6;
  if (a6)
  {
    uint64_t v23 = *(void *)(a6 + 8);
    unsigned int v22 = (void *)(a6 + 8);
    uint64_t v21 = v23;
    *((void *)a1 - 3) = v23;
    if (v23) {
      *(void *)(v21 + 16) = a1 - 12;
    }
    *((void *)a1 - 2) = v22;
    *unsigned int v22 = v19;
  }
  a1[9] = a1[9] & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  if (a9) {
    llvm::Instruction::copyIRFlags((uint64_t)a1, a9, 1);
  }
  return a1;
}

uint64_t llvm::CmpInst::CmpInst(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3 + 28;
  *(unsigned char *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  uint64_t v14 = a8 + 40;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v15 = (void *)(a1 + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a8 + 40, a1);
  uint64_t v16 = (void *)(a1 - 64);
  uint64_t v17 = *(void *)(a1 - 64);
  uint64_t v18 = *(void *)(a8 + 40);
  *(void *)(a1 + 32) = v14;
  *uint64_t v15 = v18;
  *(void *)(v18 + 8) = v15;
  *(void *)(a8 + 40) = v15;
  if (v17)
  {
    **(void **)(a1 - 48) = *(void *)(a1 - 56);
    uint64_t v19 = *(void *)(a1 - 56);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(a1 - 48);
    }
  }
  void *v16 = a5;
  if (a5)
  {
    uint64_t v22 = *(void *)(a5 + 8);
    uint64_t v21 = (void *)(a5 + 8);
    uint64_t v20 = v22;
    *(void *)(a1 - 56) = v22;
    if (v22) {
      *(void *)(v20 + 16) = a1 - 56;
    }
    *(void *)(a1 - 48) = v21;
    *uint64_t v21 = v16;
  }
  uint64_t v23 = (void *)(a1 - 32);
  if (*(void *)(a1 - 32))
  {
    **(void **)(a1 - 16) = *(void *)(a1 - 24);
    uint64_t v24 = *(void *)(a1 - 24);
    if (v24) {
      *(void *)(v24 + 16) = *(void *)(a1 - 16);
    }
  }
  *uint64_t v23 = a6;
  if (a6)
  {
    uint64_t v27 = *(void *)(a6 + 8);
    unsigned int v26 = (void *)(a6 + 8);
    uint64_t v25 = v27;
    *(void *)(a1 - 24) = v27;
    if (v27) {
      *(void *)(v25 + 16) = a1 - 24;
    }
    *(void *)(a1 - 16) = v26;
    void *v26 = v23;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  return a1;
}

uint64_t llvm::CmpInst::Create(int a1, __int16 a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5, uint64_t a6)
{
  unsigned int v12 = operator new(0x80uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  uint64_t v13 = (uint64_t)(v12 + 16);
  *(void *)unsigned int v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 16;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = v12 + 16;
  llvm::CmpInst::makeCmpResultType(*a3, v14);
  if (a1 == 53) {
    char v16 = 53;
  }
  else {
    char v16 = 54;
  }
  return llvm::CmpInst::CmpInst(v13, v15, v16, a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t llvm::CmpInst::getInversePredicate(int a1)
{
  return dword_261EA6EA0[a1];
}

const char *llvm::CmpInst::getPredicateName(unsigned int a1)
{
  if (a1 > 0x29) {
    return "unknown";
  }
  else {
    return off_2655AE4D0[a1];
  }
}

uint64_t llvm::CmpInst::getSwappedPredicate(int a1)
{
  return dword_261EA7098[a1];
}

uint64_t llvm::ICmpInst::compare(uint64_t a1, const void **a2, int a3)
{
  switch(a3)
  {
    case '!':
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      if (v5 > 0x40) {
        BOOL v6 = memcmp(*(const void **)a1, *a2, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v6 = *(void *)a1 == (void)*a2;
      }
      int v12 = v6;
      return v12 ^ 1u;
    case '""':
      int v7 = llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
      return v7 > 0;
    case '#':
      int v8 = llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
      goto LABEL_10;
    case '$':
      unsigned int v9 = llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
      goto LABEL_17;
    case '%':
      int v11 = llvm::APInt::compare((llvm::APInt *)a1, (const llvm::APInt *)a2);
      goto LABEL_13;
    case '&':
      int v7 = llvm::APInt::compareSigned((llvm::APInt *)a1, (const llvm::APInt *)a2);
      return v7 > 0;
    case '\'':
      int v8 = llvm::APInt::compareSigned((llvm::APInt *)a1, (const llvm::APInt *)a2);
LABEL_10:
      uint64_t result = v8 >= 0;
      break;
    case '(':
      unsigned int v9 = llvm::APInt::compareSigned((llvm::APInt *)a1, (const llvm::APInt *)a2);
LABEL_17:
      uint64_t result = v9 >> 31;
      break;
    case ')':
      int v11 = llvm::APInt::compareSigned((llvm::APInt *)a1, (const llvm::APInt *)a2);
LABEL_13:
      uint64_t result = v11 < 1;
      break;
    default:
      uint64_t v3 = *(unsigned int *)(a1 + 8);
      if (v3 > 0x40) {
        BOOL v4 = memcmp(*(const void **)a1, *a2, ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v4 = *(void *)a1 == (void)*a2;
      }
      uint64_t result = v4;
      break;
  }
  return result;
}

uint64_t llvm::FCmpInst::compare(llvm::APFloat *a1, const llvm::APFloat *a2, int a3)
{
  unsigned int v4 = llvm::APFloat::compare(a1, a2);
  uint64_t result = 0;
  switch(a3)
  {
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
    case 3:
      return --v4 < 2;
    case 4:
      return v4 == 0;
    case 5:
      return v4 < 2;
    case 6:
      return (v4 & 0xFFFFFFFD) == 0;
    case 7:
      BOOL v7 = v4 == 3;
      goto LABEL_21;
    case 8:
      return v4 == 3;
    case 9:
      v4 &= ~2u;
      return v4 == 1;
    case 10:
      v4 &= ~1u;
      return v4 == 2;
    case 11:
      BOOL v7 = v4 == 0;
      goto LABEL_21;
    case 12:
      return v4 == 3 || v4 == 0;
    case 13:
      BOOL v7 = v4 == 2;
      goto LABEL_21;
    case 14:
      BOOL v7 = v4 == 1;
LABEL_21:
      uint64_t result = !v7;
      break;
    case 15:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void *llvm::SwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 60) = a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 2;
  uint64_t result = operator new(32 * a4);
  *(void *)(a1 - 8) = result;
  if (a4)
  {
    unsigned int v9 = result;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      void v9[2] = 0;
      v9[3] = a1;
      v9 += 4;
    }
    while (v9 != &result[4 * a4]);
  }
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0) {
    int v11 = result;
  }
  else {
    int v11 = (void *)(a1 - 32 * (v10 & 0x7FFFFFF));
  }
  if (*v11)
  {
    *(void *)void v11[2] = v11[1];
    uint64_t v12 = v11[1];
    if (v12) {
      *(void *)(v12 + 16) = v11[2];
    }
  }
  *int v11 = a2;
  if (a2)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v14 = (void *)(a2 + 8);
    uint64_t v13 = v15;
    v11[1] = v15;
    if (v15) {
      *(void *)(v13 + 16) = v11 + 1;
    }
    void v11[2] = v14;
    *uint64_t v14 = v11;
  }
  int v16 = *(_DWORD *)(a1 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v17 = a1 - 32 * (v16 & 0x7FFFFFF);
  }
  uint64_t v18 = (void *)(v17 + 32);
  if (*(void *)(v17 + 32))
  {
    **(void **)(v17 + 48) = *(void *)(v17 + 40);
    uint64_t v19 = *(void *)(v17 + 40);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(v17 + 48);
    }
  }
  void *v18 = a3;
  if (a3)
  {
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v21 = (void *)(a3 + 8);
    uint64_t v20 = v22;
    *(void *)(v17 + 40) = v22;
    if (v22) {
      *(void *)(v20 + 16) = v17 + 40;
    }
    *(void *)(v17 + 48) = v21;
    *uint64_t v21 = v18;
  }
  return result;
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::Instruction *a5)
{
  uint64_t v9 = llvm::Instruction::Instruction((uint64_t)this, ***(void ***)a2 + 1608, 3, 0, 0, (uint64_t *)a5);
  llvm::SwitchInst::init(v9, (uint64_t)a2, (uint64_t)a3, 2 * a4 + 2);
  return this;
}

uint64_t llvm::SwitchInst::addCase(llvm::User *this, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *((_DWORD *)this + 5);
  int v7 = v6 & 0x7FFFFFF;
  unsigned int v8 = (v6 & 0x7FFFFFF) + 2;
  unsigned int v9 = v6;
  if (v8 > *((_DWORD *)this + 15))
  {
    *((_DWORD *)this + 15) = 3 * v7;
    llvm::User::growHungoffUses(this, 3 * v7, 0);
    unsigned int v9 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v9 & 0xF8000000 | v8 & 0x7FFFFFF;
  uint64_t v12 = this;
  uint64_t v13 = ((v6 >> 1) & 0x3FFFFFF) - 1;
  llvm::SwitchInst::CaseHandle::setValue(&v12, a2);
  if (v13 == 4294967294) {
    int v10 = 0;
  }
  else {
    int v10 = v13 + 1;
  }
  return llvm::SwitchInst::setSuccessor((uint64_t)v12, v10, a3);
}

void *llvm::IndirectBrInst::init(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (a3 + 1);
  BOOL v6 = a3 == -1;
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 1;
  uint64_t result = operator new(32 * v5);
  *(void *)(a1 - 8) = result;
  if (!v6)
  {
    unsigned int v8 = result;
    do
    {
      void *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = a1;
      v8 += 4;
    }
    while (v8 != &result[4 * v5]);
  }
  int v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0) {
    int v10 = result;
  }
  else {
    int v10 = (void *)(a1 - 32 * (v9 & 0x7FFFFFF));
  }
  if (*v10)
  {
    *(void *)_OWORD v10[2] = v10[1];
    uint64_t v11 = v10[1];
    if (v11) {
      *(void *)(v11 + 16) = v10[2];
    }
  }
  *int v10 = a2;
  if (a2)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = (void *)(a2 + 8);
    uint64_t v12 = v14;
    v10[1] = v14;
    if (v14) {
      *(void *)(v12 + 16) = v10 + 1;
    }
    _OWORD v10[2] = v13;
    *uint64_t v13 = v10;
  }
  return result;
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::Instruction *a4)
{
  uint64_t v7 = llvm::Instruction::Instruction((uint64_t)this, ***(void ***)a2 + 1608, 4, 0, 0, (uint64_t *)a4);
  llvm::IndirectBrInst::init(v7, (uint64_t)a2, a3);
  return this;
}

void llvm::IndirectBrInst::addDestination(llvm::IndirectBrInst *this, llvm::BasicBlock *a2)
{
  int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = v4 & 0x7FFFFFF;
  int v6 = v4 + 1;
  if ((v4 & 0x7FFFFFFu) >= *((_DWORD *)this + 15))
  {
    unsigned int v7 = 2 * (v4 & 0x7FFFFFF);
    *((_DWORD *)this + 15) = v7;
    llvm::User::growHungoffUses(this, v7, 0);
    int v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | v6 & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0) {
    unsigned int v8 = (char *)*((void *)this - 1);
  }
  else {
    unsigned int v8 = (char *)this - 32 * (v6 & 0x7FFFFFF);
  }
  int v9 = &v8[32 * v5];
  if (*(void *)v9)
  {
    **((void **)v9 + 2) = *((void *)v9 + 1);
    uint64_t v10 = *((void *)v9 + 1);
    if (v10) {
      *(void *)(v10 + 16) = *((void *)v9 + 2);
    }
  }
  *(void *)int v9 = a2;
  if (a2)
  {
    uint64_t v13 = *((void *)a2 + 1);
    uint64_t v12 = (char **)((char *)a2 + 8);
    uint64_t v11 = v13;
    uint64_t v14 = &v8[32 * v5];
    *((void *)v14 + 1) = v13;
    if (v13) {
      *(void *)(v11 + 16) = v14 + 8;
    }
    *((void *)v14 + 2) = v12;
    *uint64_t v12 = v9;
  }
}

llvm::FreezeInst *llvm::FreezeInst::FreezeInst(llvm::FreezeInst *this, llvm::Type **a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  int v6 = (llvm::Value *)llvm::UnaryInstruction::UnaryInstruction(this, *a2, 67, (llvm::Value *)a2, a4);
  llvm::Value::setName(v6, a3);
  return this;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Use *,llvm::Use *,llvm::Use *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t result = a3;
  uint64_t v5 = (void **)(a4 + 8);
  do
  {
    int v6 = v5 - 1;
    uint64_t v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5) {
        (*v5)[2] = v5[1];
      }
    }
    *int v6 = v7;
    if (v7)
    {
      uint64_t v10 = *(void **)(v7 + 8);
      unsigned int v8 = (void *)(v7 + 8);
      int v9 = v10;
      *uint64_t v5 = v10;
      if (v10) {
        void v9[2] = v5;
      }
      v5[1] = v8;
      void *v8 = v6;
    }
    a2 += 4;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unsigned int *llvm::SmallVectorImpl<int>::append(unsigned int *result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + a2, 4);
    uint64_t v6 = v5[2];
    if (!a2) {
      goto LABEL_6;
    }
  }
  else if (!a2)
  {
    goto LABEL_6;
  }
  uint64_t v7 = (_DWORD *)(*(void *)v5 + 4 * v6);
  uint64_t v8 = a2;
  do
  {
    *v7++ = a3;
    --v8;
  }
  while (v8);
  LODWORD(v6) = v5[2];
LABEL_6:
  void v5[2] = v6 + a2;
  return result;
}

uint64_t _GLOBAL__sub_I_Instructions_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)DisableI2pP2iOpt, 0, 0);
  byte_26B41DF08 = 0;
  qword_26B41DF10 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41DF18 = 0;
  DisableI2pP2iOpt[0] = (uint64_t)&unk_270DBC910;
  qword_26B41DF20 = (uint64_t)&unk_270DBC658;
  qword_26B41DF28 = (uint64_t)&unk_270DBC998;
  qword_26B41DF40 = (uint64_t)&qword_26B41DF28;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-i2p-p2i-opt", 0x13uLL);
  byte_26B41DF08 = 0;
  word_26B41DF18 = 256;
  qword_26B41DEA8 = (uint64_t)"Disables inttoptr/ptrtoint roundtrip optimization";
  unk_26B41DEB0 = 49;
  llvm::cl::Option::addArgument((llvm::cl::Option *)DisableI2pP2iOpt);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, DisableI2pP2iOpt, &dword_261C2B000);
}

uint64_t llvm::DbgVariableIntrinsic::getVariableLocationOp(llvm::DbgVariableIntrinsic *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
  if (*(unsigned char *)v2 == 33)
  {
    uint64_t v2 = *(void *)(*(void *)(v2 + 16) + 8 * a2);
  }
  else if (llvm::MDNode::classof(*(unsigned char **)(*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24)))
  {
    return 0;
  }
  return *(void *)(v2 + 128);
}

uint64_t llvm::Intrinsic::lookupLLVMIntrinsicByName(const char **a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  size_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a1;
  uint64_t v7 = &a1[a2];
  unsigned int v33 = v7;
  if (a4 < 5)
  {
    uint64_t v36 = a1;
    goto LABEL_38;
  }
  unint64_t v8 = 8 * a2;
  uint64_t v36 = a1;
  if (8 * a2 < 1) {
    goto LABEL_38;
  }
  uint64_t v9 = 4;
  uint64_t v6 = a1;
  uint64_t v7 = &a1[a2];
  do
  {
    if (v4 <= v9 + 1 || (uint64_t v10 = memchr(&v5[v9 + 1], 46, v4 - (v9 + 1))) == 0 || (v11 = v10 - v5, v10 - v5 == -1)) {
      size_t v11 = v4;
    }
    uint64_t v36 = v6;
    unint64_t v37 = v11;
    if (v7 == v6)
    {
      uint64_t v6 = v7;
      goto LABEL_34;
    }
    unint64_t v12 = v8 >> 3;
    uint64_t v13 = &v5[v9];
    size_t v14 = v11 - v9;
    uint64_t v15 = v7;
    while (1)
    {
      unint64_t v16 = v12 >> 1;
      uint64_t v17 = &v6[v12 >> 1];
      uint64_t v18 = &(*v17)[v9];
      if ((strncmp(v18, &v5[v9], v14) & 0x80000000) == 0) {
        break;
      }
      uint64_t v6 = v17 + 1;
      unint64_t v16 = v12 + ~v16;
LABEL_14:
      unint64_t v12 = v16;
      uint64_t v7 = v6;
      if (!v16) {
        goto LABEL_34;
      }
    }
    if (strncmp(&v5[v9], v18, v14) < 0)
    {
      uint64_t v15 = &v6[v12 >> 1];
      goto LABEL_14;
    }
    uint64_t v19 = &v6[v12 >> 1];
    if (v12 >= 2)
    {
      uint64_t v19 = v6;
      do
      {
        uint64_t v20 = &v19[v16 >> 1];
        uint64_t v22 = *v20;
        uint64_t v21 = v20 + 1;
        int v23 = strncmp(&v22[v9], v13, v14);
        if (v23 >= 0) {
          v16 >>= 1;
        }
        else {
          v16 += ~(v16 >> 1);
        }
        if (v23 < 0) {
          uint64_t v19 = v21;
        }
      }
      while (v16);
    }
    uint64_t v7 = v17 + 1;
    if (v15 == v17 + 1)
    {
      uint64_t v6 = v19;
      uint64_t v7 = v15;
    }
    else
    {
      unint64_t v24 = v15 - (v17 + 1);
      do
      {
        uint64_t v25 = &v7[v24 >> 1];
        uint64_t v27 = *v25;
        unsigned int v26 = v25 + 1;
        if (strncmp(v13, &v27[v9], v14) < 0)
        {
          v24 >>= 1;
        }
        else
        {
          uint64_t v7 = v26;
          v24 += ~(v24 >> 1);
        }
      }
      while (v24);
      uint64_t v6 = v19;
    }
    uint64_t v5 = a3;
LABEL_34:
    size_t v4 = a4;
    uint64_t v9 = v37;
    if (v37 >= a4) {
      break;
    }
    unint64_t v8 = (char *)v7 - (char *)v6;
  }
  while ((char *)v7 - (char *)v6 > 0);
LABEL_38:
  if ((char *)v7 - (char *)v6 <= 0) {
    uint64_t v28 = v36;
  }
  else {
    uint64_t v28 = v6;
  }
  if (v28 != v33
    && ((unint64_t v29 = *v28) == 0 ? (v30 = 0) : (v30 = strlen(*v28)),
        v4 == v30 && (!v4 || !memcmp(v5, v29, v4)) || v4 >= v30 && (!v30 || !memcmp(v5, v29, v30)) && v5[v30] == 46))
  {
    return (unint64_t)((char *)v28 - (char *)a1) >> 3;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::ConstrainedFPIntrinsic::getRoundingMode(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2 = llvm::CallBase::arg_end(this);
  uint64_t v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  uint64_t v4 = *(void *)&v3[32 * ((unint64_t)(v2 - (void)v3) >> 5) - 64];
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 16) == 23;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6)
  {
    if (!*(unsigned char *)v6)
    {
      __int16 v7 = llvm::convertStrToRoundingMode((uint64_t *)(*(void *)(v6 + 8) + 24), **(void **)(v6 + 8));
      LODWORD(v6) = HIBYTE(v7);
      return v7 | (v6 << 8);
    }
    goto LABEL_8;
  }
LABEL_9:
  LOBYTE(v7) = 0;
  return v7 | (v6 << 8);
}

uint64_t llvm::ConstrainedFPIntrinsic::getExceptionBehavior(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2 = llvm::CallBase::arg_end(this);
  uint64_t v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  uint64_t v4 = *(void *)&v3[32 * ((unint64_t)(v2 - (void)v3) >> 5) - 32];
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 16) == 23;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6)
  {
    if (!*(unsigned char *)v6)
    {
      __int16 v7 = llvm::convertStrToExceptionBehavior((void *)(*(void *)(v6 + 8) + 24), **(void **)(v6 + 8));
      LODWORD(v6) = HIBYTE(v7);
      return v7 | (v6 << 8);
    }
    goto LABEL_8;
  }
LABEL_9:
  LOBYTE(v7) = 0;
  return v7 | (v6 << 8);
}

uint64_t getFPPredicateFromMD(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 16;
  }
  if (*(unsigned char *)v1) {
    return 16;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)v2 != 3) {
    return 16;
  }
  if (*(_WORD *)(v2 + 24) == 25967 && *(unsigned char *)(v2 + 26) == 113) {
    return 1;
  }
  if (*(_WORD *)(v2 + 24) == 26479 && *(unsigned char *)(v2 + 26) == 116) {
    return 2;
  }
  if (*(_WORD *)(v2 + 24) == 26479 && *(unsigned char *)(v2 + 26) == 101) {
    return 3;
  }
  if (*(_WORD *)(v2 + 24) == 27759 && *(unsigned char *)(v2 + 26) == 116) {
    return 4;
  }
  if (*(_WORD *)(v2 + 24) == 27759 && *(unsigned char *)(v2 + 26) == 101) {
    return 5;
  }
  if (*(_WORD *)(v2 + 24) == 28271 && *(unsigned char *)(v2 + 26) == 101) {
    return 6;
  }
  if (*(_WORD *)(v2 + 24) == 29295 && *(unsigned char *)(v2 + 26) == 100) {
    return 7;
  }
  if (*(_WORD *)(v2 + 24) == 28277 && *(unsigned char *)(v2 + 26) == 111) {
    return 8;
  }
  if (*(_WORD *)(v2 + 24) == 25973 && *(unsigned char *)(v2 + 26) == 113) {
    return 9;
  }
  if (*(_WORD *)(v2 + 24) == 26485 && *(unsigned char *)(v2 + 26) == 116) {
    return 10;
  }
  if (*(_WORD *)(v2 + 24) == 26485 && *(unsigned char *)(v2 + 26) == 101) {
    return 11;
  }
  if (*(_WORD *)(v2 + 24) == 27765 && *(unsigned char *)(v2 + 26) == 116) {
    return 12;
  }
  if (*(_WORD *)(v2 + 24) == 27765 && *(unsigned char *)(v2 + 26) == 101) {
    return 13;
  }
  int v16 = *(unsigned __int16 *)(v2 + 24);
  int v17 = *(unsigned __int8 *)(v2 + 26);
  if (v16 != 28277 || v17 != 101) {
    return 16;
  }
  return 14;
}

uint64_t llvm::VPCmpIntrinsic::getPredicate(llvm::VPCmpIntrinsic *this)
{
  int v1 = *(_DWORD *)(*((void *)this - 4) + 36);
  if (v1 != 364)
  {
    BOOL v6 = v1 == 348;
    uint64_t v2 = 2;
    if (!v6) {
      uint64_t v2 = 0;
    }
    return getFPPredicateFromMD(*((void *)this + 4 * v2 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
  }
  uint64_t v4 = *(void *)(((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8] + 24);
  if (!v4 || *(unsigned char *)v4) {
    return 42;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (*(void *)v5 != 3)
  {
    if (*(void *)v5 == 2)
    {
      if (*(_WORD *)(v5 + 24) == 29029) {
        return 32;
      }
      if (*(_WORD *)(v5 + 24) == 25966) {
        return 33;
      }
    }
    return 42;
  }
  BOOL v6 = *(_WORD *)(v5 + 24) == 26485 && *(unsigned char *)(v5 + 26) == 116;
  if (v6) {
    return 34;
  }
  if (*(_WORD *)(v5 + 24) == 26485 && *(unsigned char *)(v5 + 26) == 101) {
    return 35;
  }
  if (*(_WORD *)(v5 + 24) == 27765 && *(unsigned char *)(v5 + 26) == 116) {
    return 36;
  }
  if (*(_WORD *)(v5 + 24) == 27765 && *(unsigned char *)(v5 + 26) == 101) {
    return 37;
  }
  if (*(_WORD *)(v5 + 24) == 26483 && *(unsigned char *)(v5 + 26) == 116) {
    return 38;
  }
  if (*(_WORD *)(v5 + 24) == 26483 && *(unsigned char *)(v5 + 26) == 101) {
    return 39;
  }
  if (*(_WORD *)(v5 + 24) == 27763 && *(unsigned char *)(v5 + 26) == 116) {
    return 40;
  }
  if (*(unsigned __int16 *)(v5 + 24) ^ 0x6C73 | *(unsigned __int8 *)(v5 + 26) ^ 0x65) {
    return 42;
  }
  return 41;
}

uint64_t llvm::GCProjectionInst::getStatepoint(llvm::GCProjectionInst *this)
{
  uint64_t result = *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (*(unsigned char *)(result + 16) == 94)
  {
    uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(result + 40));
    uint64_t v3 = *(void *)(UniquePredecessor + 40);
    if (v3 == UniquePredecessor + 40)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = v3 - 24;
      if (v3) {
        uint64_t v5 = v3 - 24;
      }
      else {
        uint64_t v5 = 0;
      }
      if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
        return 0;
      }
      else {
        return v4;
      }
    }
  }
  return result;
}

llvm::Value *llvm::GCRelocateInst::getBasePtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  uint64_t v4 = Statepoint;
  if (*(unsigned __int8 *)(Statepoint + 16) - 11 > 1)
  {
    llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)v10);
    if (v11) {
      uint64_t v7 = v10[0];
    }
    else {
      uint64_t v7 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
    }
    uint64_t v8 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
    uint64_t v9 = (unsigned int *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = *(unsigned int **)v9;
    }
    return *(llvm::Value **)(v7 + 32 * *v9);
  }
  else
  {
    uint64_t v5 = *(llvm::UndefValue **)Statepoint;
    return llvm::UndefValue::get(v5, v3);
  }
}

llvm::Value *llvm::GCRelocateInst::getDerivedPtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  uint64_t v4 = Statepoint;
  if (*(unsigned __int8 *)(Statepoint + 16) - 11 > 1)
  {
    llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)v10);
    if (v11) {
      uint64_t v7 = v10[0];
    }
    else {
      uint64_t v7 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
    }
    uint64_t v8 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
    uint64_t v9 = (unsigned int *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = *(unsigned int **)v9;
    }
    return *(llvm::Value **)(v7 + 32 * *v9);
  }
  else
  {
    uint64_t v5 = *(llvm::UndefValue **)Statepoint;
    return llvm::UndefValue::get(v5, v3);
  }
}

uint64_t llvm::LLVMContext::diagnose(llvm::LLVMContext *this, const llvm::DiagnosticInfo *a2)
{
  uint64_t v4 = *(void *)this;
  if ((*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7)
  {
    uint64_t v5 = *(uint64_t **)(v4 + 120);
    if (v5)
    {
      llvm::LLVMRemarkStreamer::emit(v5, (uint64_t)a2);
      uint64_t v4 = *(void *)this;
    }
  }
  uint64_t v6 = *(void *)(v4 + 72);
  if (v6)
  {
    if (!*(unsigned char *)(v4 + 80)) {
      goto LABEL_8;
    }
    if (isDiagnosticEnabled(a2))
    {
      uint64_t v6 = *(void *)(*(void *)this + 72);
LABEL_8:
      uint64_t result = (*(uint64_t (**)(uint64_t, const llvm::DiagnosticInfo *))(*(void *)v6 + 16))(v6, a2);
      if (result) {
        return result;
      }
    }
  }
  uint64_t result = isDiagnosticEnabled(a2);
  if (result)
  {
    size_t v14 = &unk_270DC2F10;
    uint64_t v15 = (llvm *)llvm::errs((llvm *)result);
    uint64_t v8 = (llvm::raw_ostream *)llvm::errs(v15);
    size_t v9 = strlen(off_2655AE620[*((char *)a2 + 12)]);
    uint64_t v10 = llvm::raw_ostream::operator<<(v8, off_2655AE620[*((char *)a2 + 12)], v9);
    char v11 = (_WORD *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v11 > 1uLL)
    {
      *char v11 = 8250;
      *((void *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    unint64_t v12 = (llvm *)(*(uint64_t (**)(const llvm::DiagnosticInfo *, void **))(*(void *)a2 + 24))(a2, &v14);
    uint64_t result = (uint64_t)llvm::errs(v12);
    uint64_t v13 = *(unsigned char **)(result + 32);
    if (*(unsigned char **)(result + 24) == v13)
    {
      uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n", 1uLL);
    }
    else
    {
      *uint64_t v13 = 10;
      ++*(void *)(result + 32);
    }
    if (!*((unsigned char *)a2 + 12)) {
      exit(1);
    }
  }
  return result;
}

uint64_t isDiagnosticEnabled(const llvm::DiagnosticInfo *a1)
{
  if ((*((_DWORD *)a1 + 2) - 18) < 0xFFFFFFF7) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(void *)a1 + 32))(a1);
  if (result)
  {
    if (!*((unsigned char *)a1 + 352)) {
      return 1;
    }
    return *((unsigned char *)a1 + 72) != 0;
  }
  return result;
}

void llvm::LLVMContext::getMDKindNames(uint64_t a1, void *a2)
{
  llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)a2, *(unsigned int *)(*(void *)a1 + 2492));
  uint64_t v4 = *(unsigned int *)(*(void *)a1 + 2488);
  if (v4)
  {
    for (int i = *(uint64_t ***)(*(void *)a1 + 2480); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    int i = *(uint64_t ***)(*(void *)a1 + 2480);
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 2480) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    uint64_t v8 = *i;
    do
    {
      size_t v9 = v8 + 2;
      uint64_t v10 = (uint64_t *)*v8;
      char v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *char v11 = v9;
      v11[1] = v10;
      do
      {
        unint64_t v12 = i[1];
        ++i;
        uint64_t v8 = v12;
        if (v12) {
          BOOL v13 = v8 + 1 == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::LLVMContext::setGC(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (uint64_t *)(*a1 + 2696);
  v13[0] = a2;
  uint64_t v14 = 0;
  int v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v7, v13, &v14);
  uint64_t v9 = v14;
  if (!v8) {
    uint64_t v9 = *(void *)(v6 + 2696) + 32 * *(unsigned int *)(v6 + 2712);
  }
  if (v9 == *(void *)(*a1 + 2696) + 32 * *(unsigned int *)(*a1 + 2712))
  {
    uint64_t v12 = *a1 + 2696;
    uint64_t v14 = a2;
    *(_OWORD *)std::string __p = *a3;
    uint64_t v16 = *((void *)a3 + 2);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::try_emplace<std::string>(v12, &v14, (long long *)__p, (uint64_t)v13);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v10 = v9 + 8;
    if (*(char *)(v9 + 31) < 0) {
      operator delete(*(void **)v10);
    }
    long long v11 = *a3;
    *(void *)(v10 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v10 = v11;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::erase(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v6);
  if (v3)
  {
    uint64_t v4 = (void *)v6;
    if (*(char *)(v6 + 31) < 0) {
      operator delete(*(void **)(v6 + 8));
    }
    *uint64_t v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 16);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 16 * v2), 16 * a2 - 16 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::try_emplace<std::string>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v13);
  uint64_t v9 = v13;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>(a1, (uint64_t)a2, a2, v13);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    long long v11 = *a3;
    *(void *)(result + 24) = *((void *)a3 + 2);
    *(_OWORD *)(result + 8) = v11;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    char v10 = 1;
  }
  uint64_t v12 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        void *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (void *)v13, &v18);
          uint64_t v14 = v18;
          void *v18 = *(void *)v13;
          long long v15 = *(_OWORD *)(v13 + 8);
          _OWORD v14[3] = *(void *)(v13 + 24);
          *(_OWORD *)(v14 + 1) = v15;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 + 31) < 0) {
            operator delete(*(void **)(v13 + 8));
          }
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      void *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    *unint64_t v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

unint64_t llvm::MDNodeOpsKey::calculateHash(llvm::MDNodeOpsKey *this, llvm::MDNode *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4 = *((void *)this - 2);
  if ((v4 & 2) != 0)
  {
    unint64_t v5 = (char *)*((void *)this - 4);
    uint64_t v6 = (uint64_t)&v5[8 * a2];
    uint64_t v7 = *((unsigned int *)this - 6);
  }
  else
  {
    unint64_t v5 = (char *)this - 8 * ((v4 >> 2) & 0xF) - 16;
    uint64_t v6 = (uint64_t)&v5[8 * a2];
    uint64_t v7 = (v4 >> 6) & 0xF;
  }
  return llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(v6, (uint64_t)&v5[8 * v7], a3, a4);
}

void llvm::LLVMContextImpl::getSyncScopeNames(uint64_t a1, void *a2)
{
  llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)a2, *(unsigned int *)(a1 + 2684));
  uint64_t v4 = *(unsigned int *)(a1 + 2680);
  if (v4)
  {
    for (int i = *(uint64_t ***)(a1 + 2672); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    int i = *(uint64_t ***)(a1 + 2672);
  }
  uint64_t v7 = *(void *)(a1 + 2672) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    unsigned int v8 = *i;
    do
    {
      uint64_t v9 = v8 + 2;
      uint64_t v10 = (uint64_t *)*v8;
      uint64_t v11 = (uint64_t **)(*a2 + 16 * *((unsigned __int8 *)v8 + 8));
      *uint64_t v11 = v9;
      v11[1] = v10;
      do
      {
        uint64_t v12 = i[1];
        ++i;
        unsigned int v8 = v12;
        if (v12) {
          BOOL v13 = v8 + 1 == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses(llvm::ContextAndReplaceableUses *this)
{
  uint64_t v1 = *(void *)this;
  if ((*(void *)this & 4) != 0)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
        MEMORY[0x263E500A0](*(void *)(v2 + 24), 8);
      }
      MEMORY[0x263E500B0](v2, 0x1020C408B843D01);
    }
  }
}

void llvm::DIExpression::~DIExpression(llvm::DIExpression *this)
{
  unint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIExpression *)((char *)this + 8));
}

void llvm::DIEnumerator::~DIEnumerator(llvm::DIEnumerator *this)
{
  if (*((_DWORD *)this + 6) >= 0x41u)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x263E50080](v2, 0x1000C8000313F17);
    }
  }
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIEnumerator *)((char *)this + 8));
}

void llvm::DIArgList::~DIArgList(llvm::DIArgList *this)
{
  llvm::DIArgList::untrack((unint64_t)this);
  uint64_t v2 = (char *)*((void *)this + 2);
  if (v2 != (char *)this + 32) {
    free(v2);
  }
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIArgList *)((char *)this + 8));
}

char **llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)&v4[v5];
      if (v6) {
        llvm::MetadataTracking::untrack((uint64_t)&v4[v5], v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  {
    unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v19 = 0xFF51AFD7ED558CCDLL;
    }
    llvm::hashing::detail::get_execution_seed(void)::seed = v19;
  }
  uint64_t v6 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    unint64_t v8 = 0;
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)__src, v8, v6);
  }
  else
  {
    for (unint64_t i = 0; i <= 0x38; i += 8)
    {
      unint64_t v8 = i + 8;
      *(void *)&__src[i] = *(void *)(a1 + i);
      uint64_t v9 = a1 + i + 8;
      if (v9 == a2) {
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)__src, v8, v6);
      }
    }
    llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)__src, v6, v6, a4, (llvm::hashing::detail::hash_state *)v20);
    uint64_t v11 = a1 + i;
    unint64_t v12 = 64;
    if (v11 != a2)
    {
      do
      {
        unint64_t v13 = 0;
        do
        {
          unint64_t v14 = v13 + 8;
          uint64_t v15 = v11 + v13 + 8;
          *(void *)&__src[v13] = *(void *)(v11 + v13);
          if (v15 == a2) {
            break;
          }
          BOOL v16 = v13 >= 0x31;
          v13 += 8;
        }
        while (!v16);
        std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>(__src, &__src[v14], (char *)&v22);
        llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v20, (llvm::hashing::detail::hash_state *)__src, v17, v18);
        v12 += v14;
        v11 += v14;
      }
      while (v15 != a2);
    }
    return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_state *)v20, v12);
  }
}

uint64_t *llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  unint64_t v12 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  unint64_t v13 = v12;
  unint64_t v14 = v12 + 16;
  if (a3) {
    memcpy(v12 + 16, a2, a3);
  }
  v14[a3] = 0;
  *(void *)unint64_t v13 = a3;
  v13[8] = *a4;
  uint64_t *i = (uint64_t)v13;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t _GLOBAL__sub_I_LLVMContextImpl_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)OpaquePointersCL, 0, 0);
  byte_26B41F148 = 0;
  qword_26B41F150 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41F158 = 0;
  OpaquePointersCL[0] = (uint64_t)&unk_270DBC910;
  qword_26B41F160 = (uint64_t)&unk_270DBC658;
  qword_26B41F168 = (uint64_t)&unk_270DBC998;
  qword_26B41F180 = (uint64_t)&qword_26B41F168;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"opaque-pointers", 0xFuLL);
  qword_26B41F0E8 = (uint64_t)"Use opaque pointers";
  unk_26B41F0F0 = 19;
  byte_26B41F148 = 1;
  word_26B41F158 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)OpaquePointersCL);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, OpaquePointersCL, &dword_261C2B000);
}

uint64_t llvm::LLVMRemarkStreamer::toRemark@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v8 = 0;
  *(void *)(a2 + 104) = a2 + 120;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 112) = 0x500000000;
  int v9 = *(_DWORD *)(a1 + 8) - 9;
  if (v9 <= 8) {
    int v8 = dword_261EA7140[v9];
  }
  *(_DWORD *)a2 = v8;
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    size_t v11 = strlen(*(const char **)(a1 + 40));
  }
  else {
    size_t v11 = 0;
  }
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 48);
  uint64_t result = *(void *)(a1 + 16);
  if ((*(unsigned char *)(result + 23) & 0x10) != 0)
  {
    uint64_t result = llvm::Value::getValueName((uint64_t ***)result);
    unint64_t v14 = result + 16;
    unint64_t v13 = *(uint64_t ***)result;
    if (*(void *)result)
    {
      uint64_t v2 = *(unsigned __int8 *)v14;
      LODWORD(v3) = v13 - 1;
      if (v2 == 1)
      {
        unint64_t v13 = (uint64_t **)((char *)v13 - 1);
        unint64_t v14 = result + 17;
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
    unint64_t v14 = (unint64_t)&str_3_24;
  }
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v13;
  uint64_t v15 = *(void **)(a1 + 24);
  if (v15)
  {
    unint64_t v14 = *(void *)(a1 + 32);
    unint64_t v16 = *(v15 - 2);
    if ((v16 & 2) != 0) {
      uint64_t v17 = (void *)*(v15 - 4);
    }
    else {
      uint64_t v17 = &v15[-((v16 >> 2) & 0xF) - 2];
    }
    uint64_t v15 = (void *)*v17;
    if (v15)
    {
      unint64_t v19 = (uint64_t *)v15[1];
      uint64_t v20 = *v19;
      uint64_t v15 = v19 + 3;
      uint64_t v2 = v20;
    }
    else
    {
      uint64_t v2 = 0;
    }
    unint64_t v3 = HIDWORD(v14);
    char v18 = 1;
  }
  else
  {
    char v18 = 0;
  }
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v2;
  *(_DWORD *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 76) = v3;
  *(unsigned char *)(a2 + 80) = v18;
  uint64_t v21 = *(void *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 64);
  *(unsigned char *)(a2 + 96) = v21;
  uint64_t v22 = *(unsigned int *)(a1 + 88);
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 80);
    uint64_t v26 = v22 << 6;
    do
    {
      uint64_t v27 = v25 + v23;
      uint64_t result = llvm::SmallVectorImpl<llvm::remarks::Argument>::emplace_back<>(a2 + 104);
      uint64_t v28 = *(void *)(v25 + v23);
      uint64_t v29 = *(void *)(v25 + v23 + 8);
      if (*(char *)(v25 + v23 + 23) >= 0)
      {
        uint64_t v28 = v25 + v23;
        uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
      }
      uint64_t v30 = *(unsigned int *)(a2 + 112);
      uint64_t v31 = *(void *)(a2 + 104) + (v30 << 6);
      *(void *)(v31 - 64) = v28;
      *(void *)(v31 - 56) = v29;
      uint64_t v34 = *(void *)(v27 + 24);
      uint64_t v33 = v27 + 24;
      uint64_t v32 = v34;
      uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
      if ((v35 & 0x80u) != 0) {
        uint64_t v35 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v32 = v33;
      }
      uint64_t v36 = *(void *)(a2 + 104) + (v30 << 6);
      *(void *)(v36 - 48) = v32;
      *(void *)(v36 - 40) = v35;
      unint64_t v37 = *(void *)(v33 + 24);
      if (v37)
      {
        unint64_t v38 = *(void *)(v37 - 16);
        if ((v38 & 2) != 0) {
          unsigned int v39 = *(unint64_t **)(v37 - 32);
        }
        else {
          unsigned int v39 = (unint64_t *)(v37 - 16 - 8 * ((v38 >> 2) & 0xF));
        }
        unint64_t v37 = *v39;
        if (v37)
        {
          uint64_t v41 = *(uint64_t **)(v37 + 8);
          uint64_t v42 = *v41;
          unint64_t v37 = (unint64_t)(v41 + 3);
          uint64_t v4 = v42;
        }
        else
        {
          uint64_t v4 = 0;
        }
        uint64_t v5 = *(void *)(v25 + v23 + 56);
        unint64_t v24 = v37 >> 8;
        char v40 = 1;
      }
      else
      {
        char v40 = 0;
      }
      uint64_t v43 = *(void *)(a2 + 104) + (v30 << 6);
      *(void *)(v43 - 32) = v37 | (v24 << 8);
      *(void *)(v43 - 24) = v4;
      *(void *)(v43 - 16) = v5;
      *(unsigned char *)(v43 - 8) = v40;
      v23 += 64;
    }
    while (v26 != v23);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::remarks::Argument>::emplace_back<>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<llvm::remarks::Argument,true>::growAndEmplaceBack<>(a1);
  }
  uint64_t v2 = (_OWORD *)(*(void *)a1 + (v1 << 6));
  v2[2] = 0u;
  v2[3] = 0u;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  uint64_t v3 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v3;
  return *(void *)a1 + (v3 << 6) - 64;
}

void llvm::LLVMRemarkStreamer::emit(uint64_t *a1, uint64_t a2)
{
  v9[40] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = *(char **)(a2 + 40);
  if (v5) {
    size_t v6 = strlen(*(const char **)(a2 + 40));
  }
  else {
    size_t v6 = 0;
  }
  if (!*(unsigned char *)(v4 + 16) || llvm::Regex::match(v4, v5, v6, 0, 0))
  {
    llvm::LLVMRemarkStreamer::toRemark(a2, (uint64_t)v7);
    (*(void (**)(void, unsigned char *))(**(void **)(*a1 + 24) + 16))(*(void *)(*a1 + 24), v7);
    if (v8 != v9) {
      free(v8);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<llvm::remarks::Argument,true>::growAndEmplaceBack<>(uint64_t a1)
{
  memset(v9, 0, sizeof(v9));
  uint64_t v2 = (long long *)llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>(a1, (unint64_t)v9, 1);
  uint64_t v3 = (_OWORD *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  long long v4 = *v2;
  long long v5 = v2[1];
  long long v6 = v2[3];
  v3[2] = v2[2];
  v3[3] = v6;
  *uint64_t v3 = v4;
  v3[1] = v5;
  uint64_t v7 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + (v7 << 6) - 64;
}

void llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::~opt(llvm::cl::Option *this)
{
  *(void *)this = &unk_270DC30D8;
  uint64_t v2 = (char *)this + 568;
  uint64_t v3 = (char *)*((void *)this + 74);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 19) = &unk_270DC3140;
  long long v4 = (char *)*((void *)this + 21);
  if (v4 != (char *)this + 184) {
    free(v4);
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  char *v4;
  uint64_t vars8;

  *(void *)this = &unk_270DC30D8;
  uint64_t v2 = (char *)this + 568;
  uint64_t v3 = (char *)*((void *)this + 74);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 19) = &unk_270DC3140;
  long long v4 = (char *)*((void *)this + 21);
  if (v4 != (char *)this + 184) {
    free(v4);
  }
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x263E500B0);
}

void *llvm::cl::parser<anonymous namespace'::PassDebugLevel>::~parser(void *a1)
{
  *a1 = &unk_270DC3140;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    void v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    unint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
  }
}

uint64_t llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    long long v4 = &unk_270DC3190;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<anonymous namespace'::PassDebugLevel>::~parser(void *a1)
{
  *a1 = &unk_270DC3140;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<anonymous namespace'::PassDebugLevel>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<anonymous namespace'::PassDebugLevel>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<anonymous namespace'::PassDebugLevel>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<anonymous namespace'::PassDebugLevel>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<anonymous namespace'::PassDebugLevel>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1}>,void ()(anonymous namespace'::PassDebugLevel const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1}>,void ()(anonymous namespace'::PassDebugLevel const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC31D0;
  return result;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<anonymous namespace'::PassDebugLevel>>::{lambda(anonymous namespace'::PassDebugLevel const&)#1}>,void ()(anonymous namespace'::PassDebugLevel const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC31D0;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<anonymous namespace'::PassDebugLevel>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B41D9C0, &unk_26B41D9D0, a1, 48, &v9);
  uint64_t v2 = (_OWORD *)qword_26B41D9C0;
  if (qword_26B41D9C8)
  {
    uint64_t v3 = qword_26B41D9C0 + 48 * qword_26B41D9C8;
    long long v4 = v1 + 32;
    int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DC31B0;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DC3190;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    uint64_t v2 = (_OWORD *)qword_26B41D9C0;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B41D9D0) {
    free(v2);
  }
  qword_26B41D9C0 = (uint64_t)v1;
  HIDWORD(qword_26B41D9C8) = v8;
}

uint64_t _GLOBAL__sub_I_LegacyPassManager_cpp()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t __src = "Disabled";
  uint64_t v19 = 8;
  LODWORD(v20) = 0;
  *((void *)&v20 + 1) = "disable debug output";
  uint64_t v21 = 20;
  __int16 v22 = "Arguments";
  uint64_t v23 = 9;
  int v24 = 1;
  uint64_t v25 = "print pass arguments to pass to 'opt'";
  uint64_t v26 = 37;
  uint64_t v27 = "Structure";
  uint64_t v28 = 9;
  int v29 = 2;
  uint64_t v30 = "print pass structure before run()";
  uint64_t v31 = 33;
  uint64_t v32 = "Executions";
  uint64_t v33 = 10;
  int v34 = 3;
  uint64_t v35 = "print pass name before it is executed";
  uint64_t v36 = 37;
  unint64_t v37 = "Details";
  uint64_t v38 = 7;
  int v39 = 4;
  char v40 = "print pass details when it is executed";
  uint64_t v41 = 38;
  int v15 = v17;
  uint64_t v16 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v15, &__src, &v42);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&PassDebugging, 0, 0);
  dword_26B41D998 = 0;
  qword_26B41D9A0 = (uint64_t)&unk_270DC3190;
  unk_26B41D9A8 = 0;
  PassDebugging = (uint64_t)&unk_270DC30D8;
  qword_26B41D9B0 = (uint64_t)&unk_270DC3140;
  qword_26B41D9B8 = (uint64_t)&PassDebugging;
  qword_26B41D9C0 = (uint64_t)&unk_26B41D9D0;
  qword_26B41D9C8 = 0x800000000;
  qword_26B41DB50 = (uint64_t)&unk_270DC31D0;
  qword_26B41DB68 = (uint64_t)&qword_26B41DB50;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"debug-pass", 0xAuLL);
  word_26B41D922 = word_26B41D922 & 0xFF9F | 0x20;
  qword_26B41D938 = (uint64_t)"Print legacy PassManager debugging information";
  unk_26B41D940 = 46;
  if (v16)
  {
    int v1 = (char *)v15;
    uint64_t v2 = (char *)v15 + 40 * v16;
    do
    {
      uint64_t v3 = *(uint64_t **)v1;
      unint64_t v4 = *((void *)v1 + 1);
      long long v5 = *(_OWORD *)(v1 + 24);
      int v6 = *((_DWORD *)v1 + 4);
      uint64_t __src = *(const char **)v1;
      uint64_t v19 = v4;
      long long v20 = v5;
      uint64_t v21 = (uint64_t)&unk_270DC3190;
      BYTE4(v22) = 1;
      LODWORD(v22) = v6;
      uint64_t v7 = qword_26B41D9C0;
      if (qword_26B41D9C8 >= HIDWORD(qword_26B41D9C8))
      {
        unint64_t v12 = qword_26B41D9C8 + 1;
        if (qword_26B41D9C0 <= (unint64_t)&__src
          && qword_26B41D9C0 + 48 * (unint64_t)qword_26B41D9C8 > (unint64_t)&__src)
        {
          unint64_t v14 = (char *)&__src - qword_26B41D9C0;
          uint64_t v7 = qword_26B41D9C0;
          p_src = (const char **)&v14[qword_26B41D9C0];
          goto LABEL_5;
        }
        uint64_t v7 = qword_26B41D9C0;
      }
      p_src = &__src;
LABEL_5:
      uint64_t v9 = v7 + 48 * qword_26B41D9C8;
      long long v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(v9 + 32) = &unk_270DC31B0;
      int v11 = *((_DWORD *)p_src + 10);
      *(unsigned char *)(v9 + 44) = *((unsigned char *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(void *)(v9 + 32) = &unk_270DC3190;
      LODWORD(qword_26B41D9C8) = qword_26B41D9C8 + 1;
      llvm::cl::AddLiteralOption(qword_26B41D9B8, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PassDebugging);
  if (v15 != v17) {
    free(v15);
  }
}

void getNameWithPrefixImpl(llvm::raw_ostream *a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  unsigned char v21[32] = *MEMORY[0x263EF8340];
  uint64_t v19 = v21;
  long long v20 = xmmword_261E8A780;
  uint64_t v9 = llvm::Twine::toStringRef(a2, (uint64_t)&v19);
  int v11 = v9;
  size_t v12 = v10;
  int v13 = *(unsigned __int8 *)v9;
  if (v13 == 1)
  {
    if (v10) {
      int v11 = v9 + 1;
    }
    size_t v12 = v10 - (v10 != 0);
    goto LABEL_21;
  }
  uint64_t v14 = *(int *)(a4 + 28);
  if ((v14 - 3) < 2 && v13 == 63) {
    a5 = 0;
  }
  if (a3 == 2)
  {
    size_t v16 = v14 == 2;
    if (v14 == 2) {
      uint64_t v17 = "l";
    }
    else {
      uint64_t v17 = "";
    }
  }
  else
  {
    if (a3 != 1) {
      goto LABEL_17;
    }
    size_t v16 = qword_261EA7168[v14];
    uint64_t v17 = (const char *)*((void *)&off_2655AE640 + v14);
  }
  llvm::raw_ostream::operator<<(a1, v17, v16);
LABEL_17:
  if (a5)
  {
    int v18 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v18 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, a5);
    }
    else
    {
      *((void *)a1 + 4) = v18 + 1;
      char *v18 = a5;
    }
  }
LABEL_21:
  llvm::raw_ostream::operator<<(a1, v11, v12);
  if (v19 != v21) {
    free(v19);
  }
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, int a4)
{
  if (a4) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  if ((*((_DWORD *)a3 + 8) & 0xF) == 8) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *((void *)a3 + 5);
  uint64_t v9 = (const llvm::DataLayout *)(v8 + 256);
  if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
  {
    unint64_t v37 = 0;
    char v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)this, *((_DWORD *)this + 4), (uint64_t)a3, &v37);
    size_t v12 = (char *)v37;
    if (v11)
    {
      unsigned int v13 = *((_DWORD *)v37 + 2);
      if (v13)
      {
LABEL_26:
        unint64_t v37 = "__unnamed_";
        uint64_t v39 = v13;
        __int16 v40 = 2051;
        char v23 = 0x5F005F0000uLL >> (8 * *(_DWORD *)(v8 + 284));
LABEL_31:
        getNameWithPrefixImpl(a2, (uint64_t)&v37, v7, v8 + 256, v23);
        return;
      }
LABEL_25:
      unsigned int v13 = *((_DWORD *)this + 2);
      *((_DWORD *)v12 + 2) = v13;
      goto LABEL_26;
    }
    int v21 = *((_DWORD *)this + 2);
    unsigned int v22 = *((_DWORD *)this + 4);
    if (4 * v21 + 4 >= 3 * v22)
    {
      v22 *= 2;
    }
    else if (v22 + ~v21 - *((_DWORD *)this + 3) > v22 >> 3)
    {
LABEL_22:
      ++*((_DWORD *)this + 2);
      if (*(void *)v12 != -4096) {
        --*((_DWORD *)this + 3);
      }
      *(void *)size_t v12 = a3;
      *((_DWORD *)v12 + 2) = 0;
      goto LABEL_25;
    }
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow((uint64_t)this, v22);
    unint64_t v37 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)this, *((_DWORD *)this + 4), (uint64_t)a3, &v37);
    size_t v12 = (char *)v37;
    goto LABEL_22;
  }
  uint64_t ValueName = (void *)llvm::Value::getValueName((uint64_t ***)a3);
  int v15 = (const char *)(ValueName + 2);
  uint64_t v16 = *ValueName;
  unint64_t v17 = 0x5F005F0000uLL >> (8 * *(unsigned char *)(v8 + 284));
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  LODWORD(v39) = 0;
  uint64_t v18 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>((uint64_t)a3, (uint64_t)&v37);
  MEMORY[0x263E500A0](v37, 8);
  if (v18 && *(unsigned char *)(v18 + 16)) {
    uint64_t v18 = 0;
  }
  if (v16)
  {
    int v19 = *(unsigned __int8 *)v15;
    if (v19 == 1) {
      goto LABEL_30;
    }
    int v20 = *(_DWORD *)(v8 + 284);
    if ((v20 - 5) >= 0xFFFFFFFE && v19 == 63) {
      goto LABEL_30;
    }
    if (!v18) {
      goto LABEL_30;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(v8 + 284);
    if (!v18)
    {
LABEL_30:
      __int16 v40 = 261;
      unint64_t v37 = v15;
      uint64_t v38 = v16;
      char v23 = v17;
      goto LABEL_31;
    }
  }
  int v24 = (*(unsigned __int16 *)(v18 + 18) >> 4) & 0x3FF;
  if (v20 != 4 && v24 != 80) {
    goto LABEL_30;
  }
  if (v24 == 65)
  {
    LOBYTE(v17) = 64;
  }
  else if (v24 == 80)
  {
    LOBYTE(v17) = 0;
  }
  __int16 v40 = 261;
  unint64_t v37 = v15;
  uint64_t v38 = v16;
  getNameWithPrefixImpl(a2, (uint64_t)&v37, v7, v8 + 256, v17);
  if (v24 == 80)
  {
    uint64_t v25 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v25 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 64);
    }
    else
    {
      *((void *)a2 + 4) = v25 + 1;
      *uint64_t v25 = 64;
    }
  }
  else if ((v24 - 64) > 0x10 || ((1 << (v24 - 64)) & 0x10003) == 0)
  {
    return;
  }
  uint64_t v26 = *(void *)(v18 + 24);
  if (*(_DWORD *)(v26 + 8) < 0x100u
    || (int v27 = *(_DWORD *)(v26 + 12), v27 == 1)
    || v27 == 2 && llvm::Function::hasStructRetAttr((llvm::Function *)v18))
  {
    uint64_t v28 = *(unsigned int *)(*(void *)(v8 + 496) + 4);
    uint64_t v29 = llvm::Function::args((llvm::Function *)v18);
    if ((llvm::Argument *)v29 == v30)
    {
      unsigned int v33 = 0;
    }
    else
    {
      uint64_t v31 = (llvm::Argument *)v29;
      uint64_t v32 = v30;
      unsigned int v33 = 0;
      do
      {
        if ((llvm::Argument::hasStructRetAttr(v31) & 1) == 0)
        {
          if (llvm::Argument::hasPassPointeeByValueCopyAttr(v31))
          {
            PassPointeeByValueCopyint Size = llvm::Argument::getPassPointeeByValueCopySize(v31, v9);
          }
          else
          {
            PassPointeeByValueCopyint Size = llvm::DataLayout::getTypeAllocSize(v9, *(llvm::Type **)v31);
            if ((_BYTE)v35) {
          }
            }
          v33 += (((unint64_t)(v28 + 7) >> 3) - 1 + PassPointeeByValueCopySize)
               / ((unint64_t)(v28 + 7) >> 3)
               * ((unint64_t)(v28 + 7) >> 3);
        }
        uint64_t v31 = (llvm::Argument *)((char *)v31 + 40);
      }
      while (v31 != v32);
    }
    uint64_t v36 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v36 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 64);
    }
    else
    {
      *((void *)a2 + 4) = v36 + 1;
      *uint64_t v36 = 64;
    }
    write_unsigned<unsigned long>(a2, v33, 0, 0, 0);
  }
}

uint64_t llvm::Function::hasStructRetAttr(llvm::Function *this)
{
  uint64_t v1 = *((void *)this + 14);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(v1 + 8);
  if (v2 < 3) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 56);
  if (!v3 || (*(unsigned char *)(v3 + 21) & 4) == 0)
  {
    if (v2 >= 4)
    {
      uint64_t v4 = *(void *)(v1 + 64);
      if (v4) {
        return (*(unsigned __int8 *)(v4 + 21) >> 2) & 1;
      }
    }
    return 0;
  }
  return 1;
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *a1, uint64_t a2, const llvm::GlobalValue *a3, int a4)
{
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  int v14 = 1;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  int v7 = &unk_270DBD758;
  uint64_t v15 = a2;
  llvm::raw_ostream::SetUnbuffered(&v7);
  llvm::Mangler::getNameWithPrefix(a1, (llvm::raw_ostream *)&v7, a3, a4);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

uint64_t llvm::MetadataAsValue::MetadataAsValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(void *)(a1 + 24) = a3;
  uint64_t v5 = a1 + 24;
  if (a3) {
    llvm::MetadataTracking::track(v5, a3, a1);
  }
  return a1;
}

void llvm::MetadataAsValue::~MetadataAsValue(llvm::MetadataAsValue *this)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(***(void ***)this + 456, (void *)this + 3);
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    llvm::MetadataTracking::untrack((uint64_t)this + 24, v2);
  }
  llvm::Value::~Value(this);
}

uint64_t llvm::MetadataAsValue::get(void *a1, unsigned char *a2)
{
  unsigned int v4 = canonicalizeMetadataForValue(a1, a2);
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(*a1 + 456), &v4)[1];
  if (!result) {
    operator new();
  }
  return result;
}

llvm::MDNode *canonicalizeMetadataForValue(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1;
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v3 = a2;
  if (!llvm::MDNode::classof(a2)) {
    return (llvm::MDNode *)v3;
  }
  unint64_t v4 = *((void *)v3 - 2);
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)v3 - 6) == 1)
    {
      uint64_t v5 = (unsigned char **)*((void *)v3 - 4);
      goto LABEL_11;
    }
    return (llvm::MDNode *)v3;
  }
  if ((*((void *)v3 - 2) & 0x3C0) != 0x40) {
    return (llvm::MDNode *)v3;
  }
  uint64_t v5 = (unsigned char **)&v3[-8 * ((v4 >> 2) & 0xF) - 16];
LABEL_11:
  int v7 = *v5;
  if (v7)
  {
    if (*v7 == 1) {
      return (llvm::MDNode *)v7;
    }
    return (llvm::MDNode *)v3;
  }
  a1 = v2;
LABEL_6:
  return llvm::MDTuple::getImpl(a1, 0, 0, 0, 1);
}

uint64_t llvm::MetadataAsValue::getIfExists(void *a1, unsigned char *a2)
{
  uint64_t v3 = canonicalizeMetadataForValue(a1, a2);
  unint64_t v4 = (uint64_t *)(*a1 + 456);
  uint64_t v7 = 0;
  int v8 = v3;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v4, &v8, &v7);
  uint64_t result = 0;
  if (v5) {
    return *(void *)(v7 + 8);
  }
  return result;
}

uint64_t llvm::MetadataTracking::track(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v6 = llvm::ReplaceableMetadataImpl::getOrCreate((unsigned __int8 *)a2);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v11 = a1;
    *(void *)&long long v12 = a3;
    *((void *)&v12 + 1) = v8;
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>(v6 + 16, &v11, &v12, (uint64_t)v10);
    ++*(void *)(v7 + 8);
  }
  else
  {
    if (*(unsigned char *)a2 != 3) {
      return 0;
    }
    *(void *)(a2 + 8) = a1;
  }
  return 1;
}

unint64_t llvm::ReplaceableMetadataImpl::getOrCreate(unsigned __int8 *a1)
{
  if (llvm::MDNode::classof(a1))
  {
    if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 - 2))
    {
      return llvm::ContextAndReplaceableUses::getOrCreateReplaceableUses((llvm::ContextAndReplaceableUses *)(a1 + 8));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unsigned int v3 = *a1 - 3;
    BOOL v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE) {
      int v5 = a1;
    }
    else {
      int v5 = 0;
    }
    unint64_t v6 = v5 + 8;
    if (v4) {
      return (unint64_t)v6;
    }
    else {
      return 0;
    }
  }
}

unint64_t llvm::MetadataTracking::untrack(uint64_t a1, uint64_t a2)
{
  unint64_t result = llvm::ReplaceableMetadataImpl::getIfExists((unsigned __int8 *)a2);
  if (result)
  {
    uint64_t v5 = a1;
    return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase((_DWORD *)(result + 16), &v5);
  }
  else if (*(unsigned char *)a2 == 3)
  {
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

unint64_t llvm::ReplaceableMetadataImpl::getIfExists(unsigned __int8 *a1)
{
  if (llvm::MDNode::classof(a1))
  {
    if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 - 2)) {
      return *((void *)a1 + 1) & ((uint64_t)(*((void *)a1 + 1) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v3 = *a1 - 3;
    BOOL v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = v5 + 8;
    if (v4) {
      return (unint64_t)v6;
    }
    else {
      return 0;
    }
  }
}

BOOL llvm::MetadataTracking::retrack(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t IfExists = llvm::ReplaceableMetadataImpl::getIfExists(a2);
  unint64_t v6 = IfExists;
  if (IfExists) {
    llvm::ReplaceableMetadataImpl::moveRef(IfExists, a1, a3);
  }
  return v6 != 0;
}

uint64_t llvm::ReplaceableMetadataImpl::moveRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 16;
  uint64_t v6 = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::find(a1 + 16, a2);
  long long v7 = *(_OWORD *)(v6 + 8);
  *(void *)uint64_t v6 = -8192;
  int v8 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) -= 2;
  *(_DWORD *)(a1 + 20) = v8;
  uint64_t v11 = a3;
  v12[0] = v7;
  v12[1] = v7;
  return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>(v5, &v11, v12, (uint64_t)&v10);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(a1, &v4, &v5))return v5; {
  if (*(_DWORD *)a1)
  }
    return a1 + 104;
  return *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
}

void llvm::ReplaceableMetadataImpl::SalvageDebugInfo(uint64_t ***this, const llvm::Constant *a2)
{
  v37[24] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)this + 23) & 8) == 0) {
    return;
  }
  uint64_t v3 = ***this;
  int v34 = (llvm::ReplaceableMetadataImpl *)this;
  uint64_t v35 = 0;
  int v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v3 + 432), &v34, &v35);
  uint64_t v5 = v35;
  if (!v4) {
    uint64_t v5 = (void *)(*(void *)(v3 + 432) + 16 * *(unsigned int *)(v3 + 448));
  }
  uint64_t v6 = v5[1];
  unsigned int v7 = *(_DWORD *)(v6 + 24);
  if (v7 > 1)
  {
    uint64_t v11 = (void *)(v6 + 32);
    if (v7)
    {
      uint64_t v13 = (void *)(v6 + 128);
      uint64_t v9 = (void *)(v6 + 32);
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 32);
      unsigned int v12 = *(_DWORD *)(v6 + 40);
      uint64_t v13 = &v9[3 * v12];
      if (!v12)
      {
        unsigned int v14 = 0;
LABEL_20:
        uint64_t v15 = (void *)(*v11 + 24 * v14);
        goto LABEL_21;
      }
    }
    unsigned int v7 = *(_DWORD *)(v6 + 24) & 1;
    while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v9 += 3;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = v6 + 32;
      uint64_t v9 = (void *)(v6 + 128);
      unsigned int v10 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(v6 + 32);
      unsigned int v10 = *(_DWORD *)(v6 + 40);
      uint64_t v9 = (void *)(v8 + 24 * v10);
    }
    uint64_t v13 = (void *)(v8 + 24 * v10);
  }
  uint64_t v11 = (void *)(v6 + 32);
  if (!v7)
  {
    unsigned int v14 = *(_DWORD *)(v6 + 40);
    goto LABEL_20;
  }
  uint64_t v15 = (void *)(v6 + 128);
LABEL_21:
  uint64_t v35 = v37;
  uint64_t v36 = 0x800000000;
  llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v35, v9, v13, v15);
  uint64_t v16 = v35;
  if (v36)
  {
    uint64_t v17 = 24 * v36;
    uint64_t v18 = (uint64_t *)((char *)v35 + 8);
    do
    {
      uint64_t v19 = *v18;
      if ((unint64_t)*v18 >= 4 && (*v18 & 2) != 0)
      {
        int v21 = (__n128 *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        int v22 = llvm::MDNode::classof((unsigned char *)(v19 & 0xFFFFFFFFFFFFFFFCLL));
        if (v21 && v22 != 0)
        {
          unsigned int v25 = v21->n128_u8[0];
          if (v25 - 8 < 0x16
            || ((v31 = v25 > 0x23, v32 = (1 << v25) & 0xD00000000, !v31) ? (BOOL v33 = v32 == 0) : (BOOL v33 = 1), !v33))
          {
            uint64_t v26 = *(v18 - 1);
            int v27 = llvm::UndefValue::get((llvm::UndefValue *)*this, v23);
            uint64_t v29 = (__n128 *)llvm::ValueAsMetadata::get(v27, v28);
            llvm::MDNode::handleChangedOperand(v21, v26, v29, v30);
          }
        }
      }
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    uint64_t v16 = v35;
  }
  if (v16 != v37) {
    free(v16);
  }
}

void llvm::MDNode::handleChangedOperand(__n128 *this, uint64_t a2, __n128 *a3, unint64_t *a4)
{
  unsigned int v7 = this - 1;
  unint64_t v6 = this[-1].n128_u64[0];
  if ((v6 & 2) != 0) {
    uint64_t v8 = (unint64_t *)this[-2].n128_u64[0];
  }
  else {
    uint64_t v8 = &v7->n128_u64[-((v6 >> 2) & 0xF)];
  }
  uint64_t v9 = a2 - (void)v8;
  unint64_t v10 = (unint64_t)(a2 - (void)v8) >> 3;
  if ((this->n128_u8[1] & 0x7F) != 0)
  {
    llvm::MDNode::setOperand((uint64_t)this, v10, (uint64_t)a3);
    return;
  }
  llvm::MDNode::eraseFromStore(this, a2, (uint64_t)a3, a4);
  unint64_t v11 = this[-1].n128_u64[0];
  if ((v11 & 2) != 0) {
    unsigned int v12 = (unint64_t *)this[-2].n128_u64[0];
  }
  else {
    unsigned int v12 = &v7->n128_u64[-((v11 >> 2) & 0xF)];
  }
  uint64_t v13 = *(unsigned char **)((char *)v12 + (v9 & 0x7FFFFFFF8));
  llvm::MDNode::setOperand((uint64_t)this, v10, (uint64_t)a3);
  if (a3 == this || !a3 && v13 && *v13 == 1)
  {
    if ((this->n128_u8[1] & 0x7F) == 2 || this[-1].n128_u32[2])
    {
      this[-1].n128_u32[2] = 0;
      llvm::MDNode::dropReplaceableUses((llvm::MDNode *)this);
    }
    goto LABEL_18;
  }
  uint64_t v17 = (llvm::MDNode *)llvm::MDNode::uniquify(this, v14, v15, v16);
  int v18 = this->n128_u8[1] & 0x7F;
  if (v17 == (llvm::MDNode *)this)
  {
    if (v18 == 2 || this[-1].n128_u32[2])
    {
      if (v13 && llvm::MDNode::classof(v13) && ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 - 2)))
      {
        if ((!a3 || !llvm::MDNode::classof(a3) || (a3->n128_u8[1] & 0x7F) != 2 && !a3[-1].n128_u32[2])
          && (this->n128_u8[1] & 0x7F) != 2)
        {
          int v21 = this[-1].n128_u32[2] - 1;
          this[-1].n128_u32[2] = v21;
          if (!v21)
          {
            llvm::MDNode::dropReplaceableUses((llvm::MDNode *)this);
          }
        }
      }
      else if (a3 && llvm::MDNode::classof(a3) && ((a3->n128_u8[1] & 0x7F) == 2 || a3[-1].n128_u32[2]))
      {
        ++this[-1].n128_u32[2];
      }
    }
  }
  else
  {
    uint64_t v19 = v17;
    if (v18 != 2 && !this[-1].n128_u32[2])
    {
LABEL_18:
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
      return;
    }
    if ((v7->n128_u64[0] & 2) != 0) {
      unsigned int v20 = this[-2].n128_u32[2];
    }
    else {
      unsigned int v20 = (v7->n128_u64[0] >> 6) & 0xF;
    }
    if (v20)
    {
      for (unsigned int i = 0; i != v20; ++i)
        llvm::MDNode::setOperand((uint64_t)this, i, 0);
    }
    unint64_t v23 = this->n128_u64[1];
    if ((v23 & 4) != 0) {
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v23 & 0xFFFFFFFFFFFFFFF8, v19);
    }
    llvm::MDNode::deleteAsSubclass((llvm::MDNode *)this);
  }
}

uint64_t llvm::ValueAsMetadata::get(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  uint64_t v3 = this;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(void ***)this + 432), &v3)[1];
  if (!result)
  {
    *((_DWORD *)v3 + 5) |= 0x8000000u;
    operator new();
  }
  return result;
}

void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(uint64_t a1, __n128 *a2)
{
  v33[24] = *MEMORY[0x263EF8340];
  uint64_t v3 = (_DWORD *)(a1 + 16);
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 2) {
    return;
  }
  if (v2)
  {
    unsigned int v7 = (void *)(a1 + 120);
    uint64_t v5 = (void *)(a1 + 24);
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 24);
    unsigned int v6 = *(_DWORD *)(a1 + 32);
    unsigned int v7 = &v5[3 * v6];
    if (!v6)
    {
      unsigned int v8 = 0;
      uint64_t v9 = *(void **)(a1 + 24);
      goto LABEL_12;
    }
  }
  uint64_t v9 = v5;
  while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 += 3;
    if (v9 == v7)
    {
      uint64_t v9 = v7;
      break;
    }
  }
  if (v2)
  {
    unint64_t v10 = (void *)(a1 + 120);
    goto LABEL_14;
  }
  uint64_t v5 = *(void **)(a1 + 24);
  unsigned int v8 = *(_DWORD *)(a1 + 32);
LABEL_12:
  unint64_t v10 = &v5[3 * v8];
LABEL_14:
  BOOL v31 = v33;
  uint64_t v32 = 0x800000000;
  llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v31, v9, v7, v10);
  unint64_t v11 = 126 - 2 * __clz(v32);
  if (v32) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>((unint64_t)v31, (uint64_t *)v31 + 3 * v32, v12, 1);
  uint64_t v13 = (uint64_t *)v31;
  if (v32)
  {
    uint64_t v14 = 24 * v32;
    do
    {
      uint64_t v15 = (llvm::MDNode *)*v13;
      uint64_t v29 = 0;
      uint64_t v30 = v15;
      if (llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)v3, &v30, &v29))
      {
        unint64_t v17 = v13[1];
        if (v17 <= 3)
        {
          uint64_t v26 = *v13;
          *(void *)*uint64_t v13 = a2;
          if (a2) {
            llvm::MetadataTracking::track(v26, (uint64_t)a2, 2);
          }
          llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase(v3, v13);
        }
        else
        {
          int v18 = (__n128 *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v17 & 2) != 0)
          {
            if (v18->n128_u8[0] == 33) {
              llvm::DIArgList::handleChangedOperand(v18, *v13, (uint64_t)a2);
            }
            else {
              llvm::MDNode::handleChangedOperand(v18, *v13, a2, v16);
            }
          }
          else
          {
            uint64_t v19 = *(void **)v18->n128_u64[0];
            uint64_t v30 = canonicalizeMetadataForValue(v19, a2);
            unsigned int v20 = (uint64_t *)(*v19 + 456);
            int v21 = (llvm::MDNode **)&v18[1].n128_u64[1];
            llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase((uint64_t)v20, &v18[1].n128_u64[1]);
            uint64_t v22 = v18[1].n128_i64[1];
            if (v22) {
              llvm::MetadataTracking::untrack((uint64_t)&v18[1].n128_i64[1], v22);
            }
            *int v21 = 0;
            unint64_t v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v20, &v30);
            unsigned int v25 = (llvm::Value *)v23[1];
            if (v25)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v18, v25, (llvm::Value *)1, v24);
              llvm::MetadataAsValue::~MetadataAsValue((llvm::MetadataAsValue *)v18);
              MEMORY[0x263E500B0]();
            }
            else
            {
              int v27 = v23;
              uint64_t v28 = (uint64_t)v30;
              *int v21 = v30;
              if (v28) {
                llvm::MetadataTracking::track((uint64_t)&v18[1].n128_i64[1], v28, (uint64_t)v18);
              }
              v27[1] = v18;
            }
          }
        }
      }
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
    uint64_t v13 = (uint64_t *)v31;
  }
  if (v13 != v33) {
    free(v13);
  }
}

void llvm::ReplaceableMetadataImpl::resolveAllUses(llvm::ReplaceableMetadataImpl *this, char a2)
{
  v27[24] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)((char *)this + 16);
  unsigned int v2 = *((_DWORD *)this + 4);
  if (v2 < 2) {
    return;
  }
  if (a2)
  {
    if (v2)
    {
      unsigned int v6 = (char *)this + 120;
      int v4 = (char *)this + 24;
    }
    else
    {
      int v4 = (char *)*((void *)this + 3);
      int v5 = *((_DWORD *)this + 8);
      unsigned int v6 = &v4[24 * v5];
      if (!v5)
      {
        int v7 = 0;
        unsigned int v8 = (char *)*((void *)this + 3);
        goto LABEL_16;
      }
    }
    unsigned int v8 = v4;
    while ((*(void *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v8 += 24;
      if (v8 == v6)
      {
        unsigned int v8 = v6;
        break;
      }
    }
    if (v2)
    {
      unint64_t v10 = (char *)this + 120;
      goto LABEL_18;
    }
    int v4 = (char *)*((void *)this + 3);
    int v7 = *((_DWORD *)this + 8);
LABEL_16:
    unint64_t v10 = &v4[24 * v7];
LABEL_18:
    unsigned int v25 = v27;
    uint64_t v26 = 0x800000000;
    llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v25, v8, v6, v10);
    unint64_t v11 = 126 - 2 * __clz(v26);
    if (v26) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>((unint64_t)v25, (uint64_t *)v25 + 3 * v26, v12, 1);
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear(v3);
    uint64_t v13 = v25;
    if (v26)
    {
      uint64_t v14 = 24 * v26;
      uint64_t v15 = (unint64_t *)((char *)v25 + 8);
      do
      {
        unint64_t v17 = *v15;
        v15 += 3;
        unint64_t v16 = v17;
        unint64_t v18 = v17 & 2;
        if (v17 >= 4 && v18 != 0)
        {
          unsigned int v20 = (unsigned char *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
          int v21 = llvm::MDNode::classof((unsigned char *)(v16 & 0xFFFFFFFFFFFFFFFCLL));
          if (v20) {
            BOOL v22 = v21 == 0;
          }
          else {
            BOOL v22 = 1;
          }
          if (!v22 && (v20[1] & 0x7F) != 2)
          {
            int v23 = *((_DWORD *)v20 - 2);
            if (v23)
            {
              int v24 = v23 - 1;
              *((_DWORD *)v20 - 2) = v24;
              if (!v24) {
                llvm::MDNode::dropReplaceableUses((llvm::MDNode *)v20);
              }
            }
          }
        }
        v14 -= 24;
      }
      while (v14);
      uint64_t v13 = v25;
    }
    if (v13 != v27) {
      free(v13);
    }
    return;
  }
  uint64_t v9 = (void *)((char *)this + 16);
  llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear(v9);
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v3 = result + 1;
      int v4 = result + 13;
    }
    else
    {
      unsigned int v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::shrink_and_clear(result);
      }
      if (!v2)
      {
        int v5 = 0;
LABEL_12:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v3 = (void *)result[1];
      int v4 = &v3[3 * v2];
    }
    do
    {
      *uint64_t v3 = -4096;
      v3 += 3;
    }
    while (v3 != v4);
    int v5 = *(_DWORD *)result & 1;
    goto LABEL_12;
  }
  return result;
}

unint64_t llvm::ContextAndReplaceableUses::getOrCreateReplaceableUses(llvm::ContextAndReplaceableUses *this)
{
  if ((*(void *)this & 4) == 0) {
    operator new();
  }
  return *(void *)this & ((uint64_t)(*(void *)this << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

void llvm::ValueAsMetadata::handleDeletion(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  uint64_t v2 = ***(void ***)this;
  int v5 = this;
  unsigned int v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v2 + 432), &v5, &v6))BOOL v3 = v6 == (void *)(*(void *)(v2 + 432) + 16 * *(unsigned int *)(v2 + 448)); {
  else
  }
    BOOL v3 = 1;
  if (!v3)
  {
    uint64_t v4 = v6[1];
    *unsigned int v6 = -8192;
    *(int32x2_t *)(v2 + 440) = vadd_s32(*(int32x2_t *)(v2 + 440), (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v4 + 8, 0);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 24) & 1) == 0) {
        MEMORY[0x263E500A0](*(void *)(v4 + 32), 8);
      }
      MEMORY[0x263E500B0](v4, 0x1020C4072C728BCLL);
    }
  }
}

uint64_t llvm::ValueAsMetadata::handleRAUW(llvm::ValueAsMetadata *this, llvm::Value *a2, llvm::Value *a3)
{
  unint64_t v16 = a2;
  uint64_t v5 = ***(void ***)this;
  unint64_t v17 = this;
  unint64_t v18 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v5 + 432), &v17, &v18);
  unsigned int v8 = v18;
  if (result) {
    BOOL v9 = v18 == (void *)(*(void *)(v5 + 432) + 16 * *(unsigned int *)(v5 + 448));
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return result;
  }
  *((_DWORD *)this + 5) &= ~0x8000000u;
  uint64_t v10 = v8[1];
  void *v8 = -8192;
  *(int32x2_t *)(v5 + 440) = vadd_s32(*(int32x2_t *)(v5 + 440), (int32x2_t)0x1FFFFFFFFLL);
  unsigned int v11 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned char *)v10 == 2)
  {
    if (v11 <= 0x14)
    {
      uint64_t v14 = llvm::ValueAsMetadata::get(a2, v7);
LABEL_15:
      uint64_t v13 = v10 + 8;
      goto LABEL_16;
    }
    if (getLocalFunctionMetadata(this))
    {
      if (getLocalFunctionMetadata(a2))
      {
        LocalFunctionuint64_t Metadata = getLocalFunctionMetadata(this);
        if (LocalFunctionMetadata != getLocalFunctionMetadata(a2)) {
          goto LABEL_10;
        }
      }
    }
LABEL_12:
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v5 + 432), &v16);
    uint64_t v14 = *(void *)(result + 8);
    if (!v14)
    {
      uint64_t v15 = v16;
      *((_DWORD *)v16 + 5) |= 0x8000000u;
      *(void *)(v10 + 128) = v15;
      *(void *)(result + 8) = v10;
      return result;
    }
    goto LABEL_15;
  }
  if (v11 < 0x15) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v13 = v10 + 8;
  uint64_t v14 = 0;
LABEL_16:
  llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v13, v14);
  if ((*(unsigned char *)(v10 + 24) & 1) == 0) {
    MEMORY[0x263E500A0](*(void *)(v10 + 32), 8);
  }
  return MEMORY[0x263E500B0](v10, 0x1020C4072C728BCLL);
}

uint64_t getLocalFunctionMetadata(llvm::Value *a1)
{
  if (!a1 || *((unsigned char *)a1 + 16) != 21)
  {
    uint64_t v2 = *((void *)a1 + 5);
    if (!v2) {
      return 0;
    }
    int v1 = *(llvm::Value **)(v2 + 56);
    if (!v1) {
      return 0;
    }
    return llvm::Value::getMetadata(v1, 0);
  }
  int v1 = (llvm::Value *)*((void *)a1 + 3);
  if (v1) {
    return llvm::Value::getMetadata(v1, 0);
  }
  return 0;
}

uint64_t *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  unsigned int i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  unint64_t v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)a1 + 24, a3 + 25, 3);
  unsigned int v11 = (void *)v10;
  unint64_t v12 = v10 + 24;
  if (a3) {
    memcpy((void *)(v10 + 24), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  v11[1] = 0;
  void v11[2] = 0;
  *unsigned int v11 = a3;
  uint64_t *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (unsigned int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

char *llvm::MDNode::operator new(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = 2 * (a3 != 0);
  if (v5 <= a2) {
    LODWORD(v5) = a2;
  }
  uint64_t v6 = 8 * v5 + 16;
  if (a2 >= 0x10) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = (char *)operator new(v7 + a1) + v7;
  llvm::MDNode::Header::Header((uint64_t)(v8 - 16), a2, a3);
  return v8;
}

uint64_t llvm::MDNode::MDNode(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  *(unsigned char *)a1 = a3;
  *(unsigned char *)(a1 + 1) = a4 & 0x7F;
  *(_WORD *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = a2;
  if (!a6)
  {
    LODWORD(v12) = 0;
    if (!a8) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * a6;
  do
  {
    llvm::MDNode::setOperand(a1, v12, *(void *)(a5 + 8 * v12));
    ++v12;
    v13 -= 8;
  }
  while (v13);
  if (a8)
  {
LABEL_7:
    uint64_t v14 = 8 * a8;
    do
    {
      uint64_t v15 = *a7++;
      llvm::MDNode::setOperand(a1, v12, v15);
      LODWORD(v12) = v12 + 1;
      v14 -= 8;
    }
    while (v14);
  }
LABEL_9:
  if ((*(unsigned char *)(a1 + 1) & 0x7F) == 0) {
    llvm::MDNode::countUnresolvedOperands(a1);
  }
  return a1;
}

uint64_t *llvm::MDNode::setOperand(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 - 16);
  if ((v4 & 2) != 0) {
    uint64_t v5 = *(void *)(a1 - 32);
  }
  else {
    uint64_t v5 = a1 - 16 - 8 * ((v4 >> 2) & 0xF);
  }
  uint64_t v6 = (uint64_t *)(v5 + 8 * a2);
  if ((*(unsigned char *)(a1 + 1) & 0x7F) != 0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a1;
  }
  return llvm::MDOperand::reset(v6, a3, v7);
}

uint64_t llvm::MDNode::countUnresolvedOperands(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(void *)(this - 16);
  if ((v2 & 2) != 0)
  {
    BOOL v3 = *(unsigned char ***)(this - 32);
    uint64_t v4 = *(unsigned int *)(this - 24);
  }
  else
  {
    BOOL v3 = (unsigned char **)(this - 16 - 8 * ((v2 >> 2) & 0xF));
    uint64_t v4 = (v2 >> 6) & 0xF;
  }
  int v5 = 0;
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = (uint64_t)*v3;
      if (*v3 && (this = llvm::MDNode::classof(*v3), this)) {
        int v8 = (*(unsigned char *)(v7 + 1) & 0x7F) == 2 || *(_DWORD *)(v7 - 8) != 0;
      }
      else {
        int v8 = 0;
      }
      v5 += v8;
      ++v3;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v1 - 8) = v5;
  return this;
}

uint64_t llvm::MDNode::Header::Header(uint64_t a1, unint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v4 = 2 * (a3 != 0);
  if (v4 <= a2) {
    LOBYTE(v4) = a2;
  }
  uint64_t v5 = 4 * (v4 & 0xF);
  if (a2 >= 0x10) {
    uint64_t v5 = 8;
  }
  unint64_t v6 = (a3 != 0) | (2 * (a2 > 0xF)) | *(void *)a1 & 0xFFFFFFFFFFFFFFC0 | v5;
  if (a2 >= 0x10)
  {
    *(void *)(a1 - 8) = 0;
    *(void *)a1 = v6 & 0xFFFFFFFFFFFFFC3FLL;
    *(void *)(a1 - 16) = a1;
    llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>(a1 - 16, a2);
  }
  else
  {
    *(void *)a1 = (a3 != 0) | (unint64_t)((2 * (a2 > 0xF)) & 0x3F) | *(void *)a1 & 0xFFFFFFFFFFFFFC00 | v5 & 0xFFFFFFFFFFFFFC3FLL | ((a2 & 0xF) << 6);
    unint64_t v7 = v4 & 0xF;
    if (v7) {
      bzero((void *)(a1 - 8 * v7), 8 * v7);
    }
  }
  return a1;
}

void llvm::MDNode::Header::~Header(char **this)
{
  if ((*this & 2) != 0)
  {
    llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(this - 2);
  }
  else
  {
    uint64_t v1 = ((unint64_t)*this >> 2) & 0xF;
    if (v1)
    {
      uint64_t v2 = -8 * v1;
      BOOL v3 = (uint64_t *)(this - 1);
      do
      {
        if (*v3) {
          llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
        }
        --v3;
        v2 += 8;
      }
      while (v2);
    }
  }
}

uint64_t *llvm::MDOperand::reset(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*result) {
    uint64_t result = (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)result, *result);
  }
  *uint64_t v5 = a2;
  if (a2)
  {
    return (uint64_t *)llvm::MetadataTracking::track((uint64_t)v5, a2, a3 | 2);
  }
  return result;
}

void llvm::MDNode::dropReplaceableUses(llvm::MDNode *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((v1 & 4) != 0)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *((void *)this + 1) = *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v1 & 0xFFFFFFFFFFFFFFF8), 1);
    uint64_t v3 = 0;
    std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100]((uint64_t)&v3, v2);
  }
}

void llvm::MDNode::storeDistinctInContext(llvm::MDNode *this)
{
  *((unsigned char *)this + 1) = *((unsigned char *)this + 1) & 0x80 | 1;
  int v2 = *(unsigned __int8 *)this;
  if ((v2 - 9) >= 0x1B && (v2 - 5) >= 3) {
    *((_DWORD *)this + 1) = 0;
  }
  uint64_t v3 = *((void *)this + 1);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0) {
    unint64_t v4 = *(void *)v4;
  }
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void **)(*(void *)v4 + 1240);
  unint64_t v7 = *(void *)(*(void *)v4 + 1248);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = v5[154];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v7 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v5 + 156), v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    unint64_t v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = this;
    int v8 = v15 + 8;
    unint64_t v17 = (char *)v5[155];
    unint64_t v18 = (char *)v5[154];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)v5[154];
    }
    v5[154] = v15;
    v5[155] = v8;
    v5[156] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unint64_t v6 = this;
    int v8 = v6 + 1;
  }
  v5[155] = v8;
}

void llvm::MDNode::resolveCycles(llvm::MDNode *this)
{
  if ((*((unsigned char *)this + 1) & 0x7F) == 2 || *((_DWORD *)this - 2))
  {
    *((_DWORD *)this - 2) = 0;
    llvm::MDNode::dropReplaceableUses(this);
    unint64_t v2 = *((void *)this - 2);
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = (llvm::MDNode **)*((void *)this - 4);
      uint64_t v4 = *((unsigned int *)this - 6);
      if (!*((_DWORD *)this - 6)) {
        return;
      }
    }
    else
    {
      uint64_t v3 = (llvm::MDNode **)((char *)this - 8 * ((v2 >> 2) & 0xF) - 16);
      uint64_t v4 = (v2 >> 6) & 0xF;
      if (!v4) {
        return;
      }
    }
    uint64_t v5 = 8 * v4;
    do
    {
      unint64_t v6 = *v3;
      if (*v3 && llvm::MDNode::classof(*v3) && ((*((unsigned char *)v6 + 1) & 0x7F) == 2 || *((_DWORD *)v6 - 2))) {
        llvm::MDNode::resolveCycles(v6);
      }
      ++v3;
      v5 -= 8;
    }
    while (v5);
  }
}

__n128 *llvm::MDNode::uniquify(__n128 *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  switch(this->n128_u8[0])
  {
    case 5u:
      unint64_t v61 = this->n128_u64[1];
      int v62 = (void *)(v61 & 0xFFFFFFFFFFFFFFF8);
      if ((v61 & 4) != 0) {
        int v62 = (void *)*v62;
      }
      unint64_t v63 = (void *)*v62;
      unint64_t v64 = (uint64_t *)(*v62 + 504);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DILocation>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(v64, (int *)&v168, (uint64_t **)&v173))BOOL v65 = v173 == (__n128 *)(v63[63] + 8 * *((unsigned int *)v63 + 130)); {
      else
      }
        BOOL v65 = 1;
      if (!v65)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v64, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 6u:
      unint64_t v20 = this->n128_u64[1];
      int v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 4) != 0) {
        int v21 = (void *)*v21;
      }
      BOOL v22 = (void *)*v21;
      int v23 = (uint64_t *)(*v21 + 528);
      v172 = this;
      v173 = 0;
      uint64_t v24 = (uint64_t)(this[1].n128_u64[1] - this[1].n128_u64[0]) >> 3;
      v168.n128_u64[0] = this[1].n128_u64[0];
      v168.n128_u64[1] = v24;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIExpression>>(v23, (uint64_t)&v168, (uint64_t **)&v173, a4))BOOL v26 = v173 == (__n128 *)(v22[66] + 8 * *((unsigned int *)v22 + 136)); {
      else
      }
        BOOL v26 = 1;
      if (!v26)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v23, &v172, v25, (uint64_t)&v168);
      return v172;
    case 7u:
      unint64_t v66 = this->n128_u64[1];
      unsigned __int8 v67 = (void *)(v66 & 0xFFFFFFFFFFFFFFF8);
      if ((v66 & 4) != 0) {
        unsigned __int8 v67 = (void *)*v67;
      }
      unint64_t v68 = (void *)*v67;
      std::string v69 = (uint64_t *)(*v67 + 552);
      v172 = this;
      unint64_t v70 = this[-1].n128_u64[0];
      if ((v70 & 2) != 0) {
        uint64_t v71 = (__n128 *)this[-2].n128_u64[0];
      }
      else {
        uint64_t v71 = (__n128 *)((char *)this - 8 * ((v70 >> 2) & 0xF) - 16);
      }
      __n128 v168 = *v71;
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(v69, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v163 = v173 == (__n128 *)(v68[69] + 8 * *((unsigned int *)v68 + 142)); {
      else
      }
        BOOL v163 = 1;
      if (!v163)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v69, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 8u:
      this->n128_u32[1] = llvm::MDNodeOpsKey::calculateHash((llvm::MDNodeOpsKey *)this, (llvm::MDNode *)1, a3, a4);
      unint64_t v27 = this->n128_u64[1];
      uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 4) != 0) {
        uint64_t v28 = (void *)*v28;
      }
      uint64_t v29 = (void *)*v28;
      uint64_t v30 = (uint64_t *)(*v28 + 576);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::GenericDINode>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::GenericDINode>>(v30, (uint64_t)&v168, (uint64_t **)&v173))BOOL v31 = v173 == (__n128 *)(v29[72] + 8 * *((unsigned int *)v29 + 148)); {
      else
      }
        BOOL v31 = 1;
      if (!v31)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v30, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 9u:
      unint64_t v72 = this->n128_u64[1];
      unint64_t v73 = (void *)(v72 & 0xFFFFFFFFFFFFFFF8);
      if ((v72 & 4) != 0) {
        unint64_t v73 = (void *)*v73;
      }
      unint64_t v74 = (void *)*v73;
      int v75 = (uint64_t *)(*v73 + 600);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(v75, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v76 = v173 == (__n128 *)(v74[75] + 8 * *((unsigned int *)v74 + 154)); {
      else
      }
        BOOL v76 = 1;
      if (v76) {
        goto LABEL_97;
      }
      uint64_t v19 = v173->n128_u64[0];
      if (!v173->n128_u64[0]) {
        goto LABEL_97;
      }
      return (__n128 *)v19;
    case 0xAu:
      unint64_t v77 = this->n128_u64[1];
      unint64_t v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFF8);
      if ((v77 & 4) != 0) {
        unint64_t v78 = (void *)*v78;
      }
      unint64_t v79 = (void *)*v78;
      long long v80 = (uint64_t *)(*v78 + 624);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIEnumerator>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      uint64_t v19 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(v80, (llvm::hashing::detail::hash_state **)&v168, (uint64_t **)&v173))BOOL v81 = v173 == (__n128 *)(v79[78] + 8 * *((unsigned int *)v79 + 160)); {
      else
      }
        BOOL v81 = 1;
      if (!v81) {
        uint64_t v19 = v173->n128_u64[0];
      }
      if (v168.n128_u32[2] >= 0x41 && v168.n128_u64[0]) {
        MEMORY[0x263E50080](v168.n128_u64[0], 0x1000C8000313F17);
      }
      if (v19) {
        return (__n128 *)v19;
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v80, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0xBu:
      unint64_t v82 = this->n128_u64[1];
      int v83 = (void *)(v82 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 4) != 0) {
        int v83 = (void *)*v83;
      }
      BOOL v84 = (void *)*v83;
      long long v85 = (uint64_t *)(*v83 + 648);
      v172 = this;
      unint64_t v86 = this[-1].n128_u64[0];
      v168.n128_u32[0] = this->n128_u16[1];
      if ((v86 & 2) != 0) {
        __int16 v87 = (char *)this[-2].n128_u64[0];
      }
      else {
        __int16 v87 = (char *)&this[-1] - 8 * ((v86 >> 2) & 0xF);
      }
      unint64_t v164 = this[1].n128_u64[1];
      v168.n128_u64[1] = *((void *)v87 + 2);
      v169 = (char *)v164;
      uint64_t v170 = this[2].n128_i64[1];
      unsigned __int32 v171 = this[1].n128_u32[1];
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(v85, &v168, (uint64_t **)&v173))BOOL v165 = v173 == (__n128 *)(v84[81] + 8 * *((unsigned int *)v84 + 166)); {
      else
      }
        BOOL v165 = 1;
      if (!v165)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v85, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0xCu:
      unint64_t v88 = this->n128_u64[1];
      uint64_t v89 = (void *)(v88 & 0xFFFFFFFFFFFFFFF8);
      if ((v88 & 4) != 0) {
        uint64_t v89 = (void *)*v89;
      }
      uint64_t v90 = (void *)*v89;
      uint64_t v91 = (uint64_t *)(*v89 + 672);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(v91, (uint64_t)&v168, (uint64_t **)&v173))BOOL v92 = v173 == (__n128 *)(v90[84] + 8 * *((unsigned int *)v90 + 172)); {
      else
      }
        BOOL v92 = 1;
      if (!v92)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v91, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0xDu:
      unint64_t v32 = this->n128_u64[1];
      BOOL v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
      if ((v32 & 4) != 0) {
        BOOL v33 = (void *)*v33;
      }
      int v34 = (void *)*v33;
      uint64_t v35 = (uint64_t *)(*v33 + 696);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(v35, (uint64_t)&v168, (uint64_t **)&v173))BOOL v36 = v173 == (__n128 *)(v34[87] + 8 * *((unsigned int *)v34 + 178)); {
      else
      }
        BOOL v36 = 1;
      if (!v36)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v35, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0xEu:
      unint64_t v93 = this->n128_u64[1];
      uint64_t v94 = (void *)(v93 & 0xFFFFFFFFFFFFFFF8);
      if ((v93 & 4) != 0) {
        uint64_t v94 = (void *)*v94;
      }
      unint64_t v95 = (void *)*v94;
      unint64_t v96 = (uint64_t *)(*v94 + 720);
      v172 = this;
      unint64_t v97 = this[-1].n128_u64[0];
      v168.n128_u32[0] = this[1].n128_u32[1];
      v168.n128_u8[4] = this[2].n128_u8[12];
      if ((v97 & 2) != 0) {
        uint64_t v98 = (char *)this[-2].n128_u64[0];
      }
      else {
        uint64_t v98 = (char *)&this[-1] - 8 * ((v97 >> 2) & 0xF);
      }
      v168.n128_u64[1] = *((void *)v98 + 3);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubroutineType>>(v96, (int *)&v168, (uint64_t **)&v173))BOOL v166 = v173 == (__n128 *)(v95[90] + 8 * *((unsigned int *)v95 + 184)); {
      else
      }
        BOOL v166 = 1;
      if (!v166)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v96, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0xFu:
      unint64_t v37 = this->n128_u64[1];
      uint64_t v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 4) != 0) {
        uint64_t v38 = (void *)*v38;
      }
      uint64_t v39 = (void *)*v38;
      __int16 v40 = (uint64_t *)(*v38 + 744);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIFile>::MDNodeKeyImpl(&v168, this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(v40, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v41 = v173 == (__n128 *)(v39[93] + 8 * *((unsigned int *)v39 + 190)); {
      else
      }
        BOOL v41 = 1;
      if (!v41)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v40, &v172, (uint64_t)&v168);
      return v172;
    case 0x10u:
    case 0x1Du:
      __break(1u);
      JUMPOUT(0x261E525BCLL);
    case 0x11u:
      unint64_t v42 = this->n128_u64[1];
      uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFF8);
      if ((v42 & 4) != 0) {
        uint64_t v43 = (void *)*v43;
      }
      int v44 = (void *)*v43;
      char v45 = (uint64_t *)(*v43 + 768);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubprogram>>(v45, (uint64_t)&v168, (uint64_t **)&v173))BOOL v46 = v173 == (__n128 *)(v44[96] + 8 * *((unsigned int *)v44 + 196)); {
      else
      }
        BOOL v46 = 1;
      if (!v46)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v45, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x12u:
      unint64_t v99 = this->n128_u64[1];
      __n128 v100 = (void *)(v99 & 0xFFFFFFFFFFFFFFF8);
      if ((v99 & 4) != 0) {
        __n128 v100 = (void *)*v100;
      }
      unint64_t v101 = (void *)*v100;
      long long v102 = (uint64_t *)(*v100 + 792);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(v102, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v103 = v173 == (__n128 *)(v101[99] + 8 * *((unsigned int *)v101 + 202)); {
      else
      }
        BOOL v103 = 1;
      if (!v103)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v102, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x13u:
      unint64_t v124 = this->n128_u64[1];
      unint64_t v125 = (void *)(v124 & 0xFFFFFFFFFFFFFFF8);
      if ((v124 & 4) != 0) {
        unint64_t v125 = (void *)*v125;
      }
      unint64_t v126 = (void *)*v125;
      int v127 = (uint64_t *)(*v125 + 816);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(v127, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v128 = v173 == (__n128 *)(v126[102] + 8 * *((unsigned int *)v126 + 208)); {
      else
      }
        BOOL v128 = 1;
      if (!v128)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v127, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x14u:
      unint64_t v47 = this->n128_u64[1];
      uint64_t v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFF8);
      if ((v47 & 4) != 0) {
        uint64_t v48 = (void *)*v48;
      }
      uint64_t v49 = (void *)*v48;
      uint64_t v50 = (uint64_t *)(*v48 + 840);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DINamespace>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(v50, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v51 = v173 == (__n128 *)(v49[105] + 8 * *((unsigned int *)v49 + 214)); {
      else
      }
        BOOL v51 = 1;
      if (!v51)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v50, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x15u:
      unint64_t v129 = this->n128_u64[1];
      unint64_t v130 = (void *)(v129 & 0xFFFFFFFFFFFFFFF8);
      if ((v129 & 4) != 0) {
        unint64_t v130 = (void *)*v130;
      }
      unint64_t v131 = (void *)*v130;
      v132 = (uint64_t *)(*v130 + 864);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIModule>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIModule>>(v132, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v133 = v173 == (__n128 *)(v131[108] + 8 * *((unsigned int *)v131 + 220)); {
      else
      }
        BOOL v133 = 1;
      if (!v133)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v132, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x16u:
      unint64_t v104 = this->n128_u64[1];
      uint64_t v105 = (void *)(v104 & 0xFFFFFFFFFFFFFFF8);
      if ((v104 & 4) != 0) {
        uint64_t v105 = (void *)*v105;
      }
      unsigned int v106 = (void *)*v105;
      unsigned int v107 = (uint64_t *)(*v105 + 888);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>>(v107, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v108 = v173 == (__n128 *)(v106[111] + 8 * *((unsigned int *)v106 + 226)); {
      else
      }
        BOOL v108 = 1;
      if (!v108)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v107, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x17u:
      unint64_t v109 = this->n128_u64[1];
      uint64_t v110 = (void *)(v109 & 0xFFFFFFFFFFFFFFF8);
      if ((v109 & 4) != 0) {
        uint64_t v110 = (void *)*v110;
      }
      uint64_t v111 = (void *)*v110;
      v112 = (uint64_t *)(*v110 + 912);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(v112, (int *)&v168, (uint64_t **)&v173))BOOL v113 = v173 == (__n128 *)(v111[114] + 8 * *((unsigned int *)v111 + 232)); {
      else
      }
        BOOL v113 = 1;
      if (!v113)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v112, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x18u:
      unint64_t v134 = this->n128_u64[1];
      unint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFF8);
      if ((v134 & 4) != 0) {
        unint64_t v135 = (void *)*v135;
      }
      unint64_t v136 = (void *)*v135;
      v137 = (uint64_t *)(*v135 + 936);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>>(v137, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v138 = v173 == (__n128 *)(v136[117] + 8 * *((unsigned int *)v136 + 238)); {
      else
      }
        BOOL v138 = 1;
      if (!v138)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v137, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x19u:
      unint64_t v114 = this->n128_u64[1];
      uint64_t v115 = (void *)(v114 & 0xFFFFFFFFFFFFFFF8);
      if ((v114 & 4) != 0) {
        uint64_t v115 = (void *)*v115;
      }
      uint64_t v116 = (void *)*v115;
      uint64_t v117 = (uint64_t *)(*v115 + 960);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DILocalVariable>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(v117, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v118 = v173 == (__n128 *)(v116[120] + 8 * *((unsigned int *)v116 + 244)); {
      else
      }
        BOOL v118 = 1;
      if (!v118)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v117, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x1Au:
      unint64_t v119 = this->n128_u64[1];
      unint64_t v120 = (void *)(v119 & 0xFFFFFFFFFFFFFFF8);
      if ((v119 & 4) != 0) {
        unint64_t v120 = (void *)*v120;
      }
      unint64_t v121 = (void *)*v120;
      int v122 = (uint64_t *)(*v120 + 984);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DILabel>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(v122, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v123 = v173 == (__n128 *)(v121[123] + 8 * *((unsigned int *)v121 + 250)); {
      else
      }
        BOOL v123 = 1;
      if (!v123)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v122, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x1Bu:
      unint64_t v139 = this->n128_u64[1];
      int v140 = (void *)(v139 & 0xFFFFFFFFFFFFFFF8);
      if ((v139 & 4) != 0) {
        int v140 = (void *)*v140;
      }
      v141 = (void *)*v140;
      int v142 = (uint64_t *)(*v140 + 1008);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(v142, &v168, (uint64_t **)&v173))BOOL v143 = v173 == (__n128 *)(v141[126] + 8 * *((unsigned int *)v141 + 256)); {
      else
      }
        BOOL v143 = 1;
      if (!v143)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v142, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x1Cu:
      unint64_t v144 = this->n128_u64[1];
      v145 = (void *)(v144 & 0xFFFFFFFFFFFFFFF8);
      if ((v144 & 4) != 0) {
        v145 = (void *)*v145;
      }
      uint64_t v146 = (void *)*v145;
      v147 = (uint64_t *)(*v145 + 1032);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(v147, (int *)&v168, (uint64_t **)&v173))BOOL v148 = v173 == (__n128 *)(v146[129] + 8 * *((unsigned int *)v146 + 262)); {
      else
      }
        BOOL v148 = 1;
      if (!v148)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v147, (uint64_t *)&v172, (uint64_t)&v168);
      return v172;
    case 0x1Eu:
      unint64_t v52 = this->n128_u64[1];
      BOOL v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFF8);
      if ((v52 & 4) != 0) {
        BOOL v53 = (void *)*v53;
      }
      uint64_t v54 = (void *)*v53;
      size_t v55 = (uint64_t *)(*v53 + 1056);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v55, (int *)&v168, (uint64_t **)&v173))BOOL v56 = v173 == (__n128 *)(v54[132] + 8 * *((unsigned int *)v54 + 268)); {
      else
      }
        BOOL v56 = 1;
      if (v56) {
        goto LABEL_69;
      }
      uint64_t v19 = v173->n128_u64[0];
      if (!v173->n128_u64[0]) {
        goto LABEL_69;
      }
      return (__n128 *)v19;
    case 0x1Fu:
      unint64_t v57 = this->n128_u64[1];
      uint64_t v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((v57 & 4) != 0) {
        uint64_t v58 = (void *)*v58;
      }
      unint64_t v59 = (void *)*v58;
      size_t v55 = (uint64_t *)(*v58 + 1080);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v55, (int *)&v168, (uint64_t **)&v173))BOOL v60 = v173 == (__n128 *)(v59[135] + 8 * *((unsigned int *)v59 + 274)); {
      else
      }
        BOOL v60 = 1;
      if (!v60)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
LABEL_69:
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v55, (uint64_t *)&v172, (uint64_t)&v168);
      break;
    case 0x20u:
      unint64_t v154 = this->n128_u64[1];
      v155 = (void *)(v154 & 0xFFFFFFFFFFFFFFF8);
      if ((v154 & 4) != 0) {
        v155 = (void *)*v155;
      }
      long long v156 = (void *)*v155;
      v157 = (uint64_t *)(*v155 + 1104);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DICommonBlock>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(v157, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v158 = v173 == (__n128 *)(v156[138] + 8 * *((unsigned int *)v156 + 280)); {
      else
      }
        BOOL v158 = 1;
      if (!v158)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v157, (uint64_t *)&v172, (uint64_t)&v168);
      break;
    case 0x21u:
      unint64_t v12 = this->n128_u64[1];
      unint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 4) != 0) {
        unint64_t v13 = (void *)*v13;
      }
      uint64_t v14 = (void *)*v13;
      uint64_t v15 = (uint64_t *)(*v13 + 1128);
      v172 = this;
      v173 = 0;
      unint64_t v16 = this[1].n128_u32[2];
      v168.n128_u64[0] = this[1].n128_u64[0];
      v168.n128_u64[1] = v16;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIArgList>>(v15, (uint64_t)&v168, (uint64_t **)&v173, a4))BOOL v18 = v173 == (__n128 *)(v14[141] + 8 * *((unsigned int *)v14 + 286)); {
      else
      }
        BOOL v18 = 1;
      if (!v18)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v15, &v172, v17, (uint64_t)&v168);
      break;
    case 0x22u:
      unint64_t v149 = this->n128_u64[1];
      long long v150 = (void *)(v149 & 0xFFFFFFFFFFFFFFF8);
      if ((v149 & 4) != 0) {
        long long v150 = (void *)*v150;
      }
      v151 = (void *)*v150;
      v152 = (uint64_t *)(*v150 + 1152);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DIStringType>::MDNodeKeyImpl((uint64_t)&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(v152, (int *)&v168, (uint64_t **)&v173))BOOL v153 = v173 == (__n128 *)(v151[144] + 8 * *((unsigned int *)v151 + 292)); {
      else
      }
        BOOL v153 = 1;
      if (!v153)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v152, (uint64_t *)&v172, (uint64_t)&v168);
      break;
    case 0x23u:
      unint64_t v159 = this->n128_u64[1];
      v160 = (void *)(v159 & 0xFFFFFFFFFFFFFFF8);
      if ((v159 & 4) != 0) {
        v160 = (void *)*v160;
      }
      int v161 = (void *)*v160;
      int v75 = (uint64_t *)(*v160 + 1176);
      v172 = this;
      llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(&v168, (uint64_t)this);
      v173 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(v75, (uint64_t *)&v168, (uint64_t **)&v173))BOOL v162 = v173 == (__n128 *)(v161[147] + 8 * *((unsigned int *)v161 + 298)); {
      else
      }
        BOOL v162 = 1;
      if (!v162)
      {
        uint64_t v19 = v173->n128_u64[0];
        if (v173->n128_u64[0]) {
          return (__n128 *)v19;
        }
      }
LABEL_97:
      llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v75, (uint64_t *)&v172, (uint64_t)&v168);
      break;
    default:
      unsigned __int32 v5 = llvm::MDNodeOpsKey::calculateHash((llvm::MDNodeOpsKey *)this, 0, a3, a4);
      this->n128_u32[1] = v5;
      unint64_t v6 = this->n128_u64[1];
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0) {
        unint64_t v7 = (void *)*v7;
      }
      uint64_t v8 = *v7 + 480;
      v173 = this;
      __n128 v168 = 0uLL;
      unint64_t v9 = this[-1].n128_u64[0];
      if ((v9 & 2) != 0)
      {
        uint64_t v10 = (char *)this[-2].n128_u64[0];
        uint64_t v11 = this[-2].n128_u32[2];
      }
      else
      {
        uint64_t v10 = (char *)&this[-1] - 8 * ((v9 >> 2) & 0xF);
        uint64_t v11 = (v9 >> 6) & 0xF;
      }
      v169 = v10;
      uint64_t v170 = v11;
      unsigned __int32 v171 = v5;
      uint64_t v19 = llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(v8, (uint64_t)&v168);
      if (!v19)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v8, &v173, (uint64_t)&v168);
        return v173;
      }
      return (__n128 *)v19;
  }
  return v172;
}

void llvm::MDNode::deleteAsSubclass(llvm::MDNode *this)
{
  switch(*(unsigned char *)this)
  {
    case 6:
      llvm::DIExpression::~DIExpression(this);
      break;
    case 7:
    case 9:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
      goto LABEL_2;
    case 0xA:
      llvm::DIEnumerator::~DIEnumerator(this);
      break;
    case 0x21:
      llvm::DIArgList::~DIArgList(this);
      break;
    default:
      llvm::MDNode::dropAllReferences(this);
LABEL_2:
      llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::MDNode *)((char *)this + 8));
      break;
  }
  unint64_t v2 = (char **)((char *)this - 16);
  uint64_t v3 = (char *)this - ((2 * *((_DWORD *)this - 4)) & 0x78) - 16;
  llvm::MDNode::Header::~Header(v2);
  operator delete(v3);
}

void llvm::MDNode::dropAllReferences(llvm::MDNode *this)
{
  uint64_t v2 = *((void *)this - 2);
  if ((v2 & 2) != 0)
  {
    unsigned int v3 = *((_DWORD *)this - 6);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v3 = (v2 >> 6) & 0xF;
    if (!v3) {
      goto LABEL_7;
    }
  }
  for (unsigned int i = 0; i != v3; ++i)
    llvm::MDNode::setOperand((uint64_t)this, i, 0);
LABEL_7:
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 4) != 0)
  {
    unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u)
    {
      llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear((void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16));
      unint64_t v6 = (void *)(*((void *)this + 1) & ((uint64_t)(*((void *)this + 1) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
    }
    *((void *)this + 1) = *v6 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v7 = 0;
    std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100]((uint64_t)&v7, (uint64_t)v6);
  }
}

int32x2_t llvm::MDNode::eraseFromStore(__n128 *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  switch(this->n128_u8[0])
  {
    case 5u:
      unint64_t v45 = this->n128_u64[1];
      BOOL v46 = (int32x2_t **)(v45 & 0xFFFFFFFFFFFFFFF8);
      if ((v45 & 4) != 0) {
        BOOL v46 = (int32x2_t **)*v46;
      }
      unint64_t v47 = *v46;
      uint64_t v48 = (uint64_t *)&(*v46)[63];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>(v48, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v47[64], (int32x2_t)0x1FFFFFFFFLL);
        v47[64] = result;
      }
      break;
    case 6u:
      unint64_t v13 = this->n128_u64[1];
      uint64_t v14 = (int32x2_t **)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 4) != 0) {
        uint64_t v14 = (int32x2_t **)*v14;
      }
      uint64_t v15 = *v14;
      unint64_t v16 = (uint64_t *)&(*v14)[66];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>(v16, (uint64_t)&v125, &v126, a4))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v15[67], (int32x2_t)0x1FFFFFFFFLL);
        v15[67] = result;
      }
      break;
    case 7u:
      unint64_t v49 = this->n128_u64[1];
      uint64_t v50 = (int32x2_t **)(v49 & 0xFFFFFFFFFFFFFFF8);
      if ((v49 & 4) != 0) {
        uint64_t v50 = (int32x2_t **)*v50;
      }
      BOOL v51 = *v50;
      unint64_t v52 = (uint64_t *)&(*v50)[69];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>(v52, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v51[70], (int32x2_t)0x1FFFFFFFFLL);
        v51[70] = result;
      }
      break;
    case 8u:
      unint64_t v17 = this->n128_u64[1];
      BOOL v18 = (int32x2_t **)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0) {
        BOOL v18 = (int32x2_t **)*v18;
      }
      uint64_t v19 = *v18;
      unint64_t v20 = (uint64_t *)&(*v18)[72];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>(v20, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v19[73], (int32x2_t)0x1FFFFFFFFLL);
        v19[73] = result;
      }
      break;
    case 9u:
      unint64_t v53 = this->n128_u64[1];
      uint64_t v54 = (int32x2_t **)(v53 & 0xFFFFFFFFFFFFFFF8);
      if ((v53 & 4) != 0) {
        uint64_t v54 = (int32x2_t **)*v54;
      }
      size_t v55 = *v54;
      BOOL v56 = (uint64_t *)&(*v54)[75];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>(v56, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v55[76], (int32x2_t)0x1FFFFFFFFLL);
        v55[76] = result;
      }
      break;
    case 0xAu:
      unint64_t v57 = this->n128_u64[1];
      uint64_t v58 = (int32x2_t **)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((v57 & 4) != 0) {
        uint64_t v58 = (int32x2_t **)*v58;
      }
      unint64_t v59 = *v58;
      BOOL v60 = (uint64_t *)&(*v58)[78];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>(v60, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v59[79], (int32x2_t)0x1FFFFFFFFLL);
        v59[79] = result;
      }
      break;
    case 0xBu:
      unint64_t v61 = this->n128_u64[1];
      int v62 = (int32x2_t **)(v61 & 0xFFFFFFFFFFFFFFF8);
      if ((v61 & 4) != 0) {
        int v62 = (int32x2_t **)*v62;
      }
      unint64_t v63 = *v62;
      unint64_t v64 = (uint64_t *)&(*v62)[81];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>(v64, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v63[82], (int32x2_t)0x1FFFFFFFFLL);
        v63[82] = result;
      }
      break;
    case 0xCu:
      unint64_t v65 = this->n128_u64[1];
      unint64_t v66 = (int32x2_t **)(v65 & 0xFFFFFFFFFFFFFFF8);
      if ((v65 & 4) != 0) {
        unint64_t v66 = (int32x2_t **)*v66;
      }
      unsigned __int8 v67 = *v66;
      unint64_t v68 = (uint64_t *)&(*v66)[84];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>(v68, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v67[85], (int32x2_t)0x1FFFFFFFFLL);
        v67[85] = result;
      }
      break;
    case 0xDu:
      unint64_t v21 = this->n128_u64[1];
      BOOL v22 = (int32x2_t **)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 4) != 0) {
        BOOL v22 = (int32x2_t **)*v22;
      }
      int v23 = *v22;
      uint64_t v24 = (uint64_t *)&(*v22)[87];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>(v24, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v23[88], (int32x2_t)0x1FFFFFFFFLL);
        v23[88] = result;
      }
      break;
    case 0xEu:
      unint64_t v69 = this->n128_u64[1];
      unint64_t v70 = (int32x2_t **)(v69 & 0xFFFFFFFFFFFFFFF8);
      if ((v69 & 4) != 0) {
        unint64_t v70 = (int32x2_t **)*v70;
      }
      uint64_t v71 = *v70;
      unint64_t v72 = (uint64_t *)&(*v70)[90];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>(v72, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v71[91], (int32x2_t)0x1FFFFFFFFLL);
        v71[91] = result;
      }
      break;
    case 0xFu:
      unint64_t v25 = this->n128_u64[1];
      BOOL v26 = (int32x2_t **)(v25 & 0xFFFFFFFFFFFFFFF8);
      if ((v25 & 4) != 0) {
        BOOL v26 = (int32x2_t **)*v26;
      }
      unint64_t v27 = *v26;
      uint64_t v28 = (uint64_t *)&(*v26)[93];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>(v28, &v125, (__n128 ***)&v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v27[94], (int32x2_t)0x1FFFFFFFFLL);
        v27[94] = result;
      }
      break;
    case 0x10u:
    case 0x1Du:
      __break(1u);
      JUMPOUT(0x261E53244);
    case 0x11u:
      unint64_t v29 = this->n128_u64[1];
      uint64_t v30 = (int32x2_t **)(v29 & 0xFFFFFFFFFFFFFFF8);
      if ((v29 & 4) != 0) {
        uint64_t v30 = (int32x2_t **)*v30;
      }
      BOOL v31 = *v30;
      unint64_t v32 = (uint64_t *)&(*v30)[96];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>(v32, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v31[97], (int32x2_t)0x1FFFFFFFFLL);
        v31[97] = result;
      }
      break;
    case 0x12u:
      unint64_t v73 = this->n128_u64[1];
      unint64_t v74 = (int32x2_t **)(v73 & 0xFFFFFFFFFFFFFFF8);
      if ((v73 & 4) != 0) {
        unint64_t v74 = (int32x2_t **)*v74;
      }
      int v75 = *v74;
      BOOL v76 = (uint64_t *)&(*v74)[99];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>(v76, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v75[100], (int32x2_t)0x1FFFFFFFFLL);
        v75[100] = result;
      }
      break;
    case 0x13u:
      unint64_t v93 = this->n128_u64[1];
      uint64_t v94 = (int32x2_t **)(v93 & 0xFFFFFFFFFFFFFFF8);
      if ((v93 & 4) != 0) {
        uint64_t v94 = (int32x2_t **)*v94;
      }
      unint64_t v95 = *v94;
      unint64_t v96 = (uint64_t *)&(*v94)[102];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>(v96, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v95[103], (int32x2_t)0x1FFFFFFFFLL);
        v95[103] = result;
      }
      break;
    case 0x14u:
      unint64_t v33 = this->n128_u64[1];
      int v34 = (int32x2_t **)(v33 & 0xFFFFFFFFFFFFFFF8);
      if ((v33 & 4) != 0) {
        int v34 = (int32x2_t **)*v34;
      }
      uint64_t v35 = *v34;
      BOOL v36 = (uint64_t *)&(*v34)[105];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>(v36, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v35[106], (int32x2_t)0x1FFFFFFFFLL);
        v35[106] = result;
      }
      break;
    case 0x15u:
      unint64_t v97 = this->n128_u64[1];
      uint64_t v98 = (int32x2_t **)(v97 & 0xFFFFFFFFFFFFFFF8);
      if ((v97 & 4) != 0) {
        uint64_t v98 = (int32x2_t **)*v98;
      }
      unint64_t v99 = *v98;
      __n128 v100 = (uint64_t *)&(*v98)[108];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>(v100, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v99[109], (int32x2_t)0x1FFFFFFFFLL);
        v99[109] = result;
      }
      break;
    case 0x16u:
      unint64_t v77 = this->n128_u64[1];
      unint64_t v78 = (int32x2_t **)(v77 & 0xFFFFFFFFFFFFFFF8);
      if ((v77 & 4) != 0) {
        unint64_t v78 = (int32x2_t **)*v78;
      }
      unint64_t v79 = *v78;
      long long v80 = (uint64_t *)&(*v78)[111];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>(v80, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v79[112], (int32x2_t)0x1FFFFFFFFLL);
        v79[112] = result;
      }
      break;
    case 0x17u:
      unint64_t v81 = this->n128_u64[1];
      unint64_t v82 = (int32x2_t **)(v81 & 0xFFFFFFFFFFFFFFF8);
      if ((v81 & 4) != 0) {
        unint64_t v82 = (int32x2_t **)*v82;
      }
      int v83 = *v82;
      BOOL v84 = (uint64_t *)&(*v82)[114];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>(v84, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v83[115], (int32x2_t)0x1FFFFFFFFLL);
        v83[115] = result;
      }
      break;
    case 0x18u:
      unint64_t v101 = this->n128_u64[1];
      long long v102 = (int32x2_t **)(v101 & 0xFFFFFFFFFFFFFFF8);
      if ((v101 & 4) != 0) {
        long long v102 = (int32x2_t **)*v102;
      }
      BOOL v103 = *v102;
      unint64_t v104 = (uint64_t *)&(*v102)[117];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>(v104, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v103[118], (int32x2_t)0x1FFFFFFFFLL);
        v103[118] = result;
      }
      break;
    case 0x19u:
      unint64_t v85 = this->n128_u64[1];
      unint64_t v86 = (int32x2_t **)(v85 & 0xFFFFFFFFFFFFFFF8);
      if ((v85 & 4) != 0) {
        unint64_t v86 = (int32x2_t **)*v86;
      }
      __int16 v87 = *v86;
      unint64_t v88 = (uint64_t *)&(*v86)[120];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>(v88, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v87[121], (int32x2_t)0x1FFFFFFFFLL);
        v87[121] = result;
      }
      break;
    case 0x1Au:
      unint64_t v89 = this->n128_u64[1];
      uint64_t v90 = (int32x2_t **)(v89 & 0xFFFFFFFFFFFFFFF8);
      if ((v89 & 4) != 0) {
        uint64_t v90 = (int32x2_t **)*v90;
      }
      uint64_t v91 = *v90;
      BOOL v92 = (uint64_t *)&(*v90)[123];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>(v92, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v91[124], (int32x2_t)0x1FFFFFFFFLL);
        v91[124] = result;
      }
      break;
    case 0x1Bu:
      unint64_t v105 = this->n128_u64[1];
      unsigned int v106 = (int32x2_t **)(v105 & 0xFFFFFFFFFFFFFFF8);
      if ((v105 & 4) != 0) {
        unsigned int v106 = (int32x2_t **)*v106;
      }
      unsigned int v107 = *v106;
      BOOL v108 = (uint64_t *)&(*v106)[126];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>(v108, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v107[127], (int32x2_t)0x1FFFFFFFFLL);
        v107[127] = result;
      }
      break;
    case 0x1Cu:
      unint64_t v109 = this->n128_u64[1];
      uint64_t v110 = (int32x2_t **)(v109 & 0xFFFFFFFFFFFFFFF8);
      if ((v109 & 4) != 0) {
        uint64_t v110 = (int32x2_t **)*v110;
      }
      uint64_t v111 = *v110;
      v112 = (uint64_t *)&(*v110)[129];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>(v112, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v111[130], (int32x2_t)0x1FFFFFFFFLL);
        v111[130] = result;
      }
      break;
    case 0x1Eu:
      unint64_t v37 = this->n128_u64[1];
      uint64_t v38 = (int32x2_t **)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 4) != 0) {
        uint64_t v38 = (int32x2_t **)*v38;
      }
      uint64_t v39 = *v38;
      __int16 v40 = (uint64_t *)&(*v38)[132];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>(v40, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v39[133], (int32x2_t)0x1FFFFFFFFLL);
        v39[133] = result;
      }
      break;
    case 0x1Fu:
      unint64_t v41 = this->n128_u64[1];
      unint64_t v42 = (int32x2_t **)(v41 & 0xFFFFFFFFFFFFFFF8);
      if ((v41 & 4) != 0) {
        unint64_t v42 = (int32x2_t **)*v42;
      }
      uint64_t v43 = *v42;
      int v44 = (uint64_t *)&(*v42)[135];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>(v44, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v43[136], (int32x2_t)0x1FFFFFFFFLL);
        v43[136] = result;
      }
      break;
    case 0x20u:
      unint64_t v117 = this->n128_u64[1];
      BOOL v118 = (int32x2_t **)(v117 & 0xFFFFFFFFFFFFFFF8);
      if ((v117 & 4) != 0) {
        BOOL v118 = (int32x2_t **)*v118;
      }
      unint64_t v119 = *v118;
      unint64_t v120 = (uint64_t *)&(*v118)[138];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>(v120, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v119[139], (int32x2_t)0x1FFFFFFFFLL);
        v119[139] = result;
      }
      break;
    case 0x21u:
      unint64_t v9 = this->n128_u64[1];
      uint64_t v10 = (int32x2_t **)(v9 & 0xFFFFFFFFFFFFFFF8);
      if ((v9 & 4) != 0) {
        uint64_t v10 = (int32x2_t **)*v10;
      }
      uint64_t v11 = *v10;
      unint64_t v12 = (uint64_t *)&(*v10)[141];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>(v12, (uint64_t)&v125, &v126, a4))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v11[142], (int32x2_t)0x1FFFFFFFFLL);
        v11[142] = result;
      }
      break;
    case 0x22u:
      unint64_t v113 = this->n128_u64[1];
      unint64_t v114 = (int32x2_t **)(v113 & 0xFFFFFFFFFFFFFFF8);
      if ((v113 & 4) != 0) {
        unint64_t v114 = (int32x2_t **)*v114;
      }
      uint64_t v115 = *v114;
      uint64_t v116 = (uint64_t *)&(*v114)[144];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>(v116, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v115[145], (int32x2_t)0x1FFFFFFFFLL);
        v115[145] = result;
      }
      break;
    case 0x23u:
      unint64_t v121 = this->n128_u64[1];
      int v122 = (int32x2_t **)(v121 & 0xFFFFFFFFFFFFFFF8);
      if ((v121 & 4) != 0) {
        int v122 = (int32x2_t **)*v122;
      }
      BOOL v123 = *v122;
      unint64_t v124 = (uint64_t *)&(*v122)[147];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>(v124, (uint64_t *)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v123[148], (int32x2_t)0x1FFFFFFFFLL);
        v123[148] = result;
      }
      break;
    default:
      unint64_t v4 = this->n128_u64[1];
      uint64_t v5 = (int32x2_t **)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((v4 & 4) != 0) {
        uint64_t v5 = (int32x2_t **)*v5;
      }
      unint64_t v6 = *v5;
      uint64_t v7 = (uint64_t *)&(*v5)[60];
      unint64_t v125 = this;
      unint64_t v126 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>(v7, (uint64_t)&v125, &v126))
      {
        *unint64_t v126 = -8192;
        int32x2_t result = vadd_s32(v6[61], (int32x2_t)0x1FFFFFFFFLL);
        v6[61] = result;
      }
      break;
  }
  return result;
}

llvm::MDNode *llvm::MDTuple::getImpl(void *a1, llvm::hashing::detail::hash_state *this, unint64_t a3, unint64_t *a4, int a5)
{
  int v5 = (int)a4;
  if (a4)
  {
    int v9 = 0;
LABEL_8:
    unint64_t v13 = llvm::MDNode::operator new(16, a3, v5);
    uint64_t v14 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v13, (uint64_t)a1, 4, v5, (uint64_t)this, a3, 0, 0);
    *((_DWORD *)v14 + 1) = v9;
    return llvm::MDNode::storeImpl<llvm::MDTuple,llvm::DenseSet<llvm::MDTuple*,llvm::MDNodeInfo<llvm::MDTuple>>>(v14, v5, *a1 + 480);
  }
  v15[0] = this;
  v15[1] = a3;
  uint64_t v15[2] = 0;
  v15[3] = 0;
  int v16 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(this, (uint64_t)this + 8 * a3, a3, a4);
  int32x2_t result = (llvm::MDNode *)llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(*a1 + 480, (uint64_t)v15);
  if (result) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a5 == 0;
  }
  if (!v12)
  {
    int v9 = v16;
    goto LABEL_8;
  }
  return result;
}

uint64_t llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  int v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::MDTuple>>((uint64_t *)a1, a2, &v5);
  uint64_t result = 0;
  if (v3)
  {
    if (v5 != (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 16))) {
      return *v5;
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::MDTuple,llvm::DenseSet<llvm::MDTuple*,llvm::MDNodeInfo<llvm::MDTuple>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  int v3 = this;
  int v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

void llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 4) != 0) {
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v3 & 0xFFFFFFFFFFFFFFF8, 0);
  }
  llvm::MDNode::deleteAsSubclass(this);
}

void llvm::MDNode::replaceOperandWith(__n128 *a1, unsigned int a2, __n128 *a3, unint64_t *a4)
{
  unint64_t v4 = a1 - 1;
  unint64_t v5 = a1[-1].n128_u64[0];
  if ((v5 & 2) != 0) {
    unint64_t v6 = a1[-2].n128_u64[0];
  }
  else {
    unint64_t v6 = (unint64_t)&v4->n128_u64[-((v5 >> 2) & 0xF)];
  }
  if (*(__n128 **)(v6 + 8 * a2) != a3)
  {
    if ((a1->n128_u8[1] & 0x7F) != 0)
    {
      llvm::MDNode::setOperand((uint64_t)a1, a2, (uint64_t)a3);
    }
    else
    {
      if ((v5 & 2) != 0) {
        unint64_t v7 = a1[-2].n128_u64[0];
      }
      else {
        unint64_t v7 = (unint64_t)&v4->n128_u64[-((v5 >> 2) & 0xF)];
      }
      llvm::MDNode::handleChangedOperand(a1, v7 + 8 * a2, a3, a4);
    }
  }
}

void llvm::NamedMDNode::~NamedMDNode(llvm::NamedMDNode *this)
{
  llvm::SmallVectorImpl<llvm::TrackingMDRef>::clear(*((void *)this + 6));
  uint64_t v2 = llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(*((char ***)this + 6));
  MEMORY[0x263E500B0](v2, 0x1080C40ED926357);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::MDNode *&>(a1, a2);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    unint64_t v5 = (uint64_t *)(*(void *)a1 + 8 * v3);
    uint64_t v6 = *a2;
    *unint64_t v5 = v6;
    if (v6)
    {
      llvm::MetadataTracking::track((uint64_t)v5, v6, 2);
      LODWORD(v3) = *(_DWORD *)(a1 + 8);
      uint64_t v4 = *(void *)a1;
    }
    unsigned int v7 = v3 + 1;
    *(_DWORD *)(a1 + 8) = v7;
    return v4 + 8 * v7 - 8;
  }
}

unint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::clear(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    uint64_t v4 = *(void *)result - 8;
    do
    {
      uint64_t result = v4 + v3;
      uint64_t v5 = *(void *)(v4 + v3);
      if (v5) {
        uint64_t result = llvm::MetadataTracking::untrack(result, v5);
      }
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void llvm::MDAttachments::getAll(uint64_t *a1, unsigned int *a2, __n128 a3)
{
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a1 + 16 * v4;
    do
    {
      llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(a2, (_DWORD *)v5, (uint64_t *)(v5 + 8));
      v5 += 16;
    }
    while (v5 != v6);
  }
  if (a2[2] > 1)
  {
    llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>((uint64_t)a2, a3);
  }
}

void llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(__n128 **)a1;
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = (__n128 *)(*(void *)a1 + 16 * v3);
  if (v3)
  {
    uint64_t v5 = (__n128 *)std::get_temporary_buffer[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *>>(*(unsigned int *)(a1 + 8));
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v2, v4, (uint64_t)&v8, v3, v5, v6, v7);
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(*(__n128 **)a1, v4, (uint64_t)&v8, v3, 0, 0, a2);
  }
}

BOOL llvm::MDAttachments::erase(llvm::MDAttachments *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void *)this;
  if (v2 == 1 && *(_DWORD *)(v5 + 16 * v2 - 16) == a2)
  {
    *((_DWORD *)this + 2) = 0;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v6 = v5 + 8;
    uint64_t v7 = v8;
    if (v8) {
      llvm::MetadataTracking::untrack(v6, v7);
    }
    return 1;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 16 * v2;
    BOOL v12 = (_DWORD *)(v5 + 16 * v2);
    while (*(_DWORD *)(v5 + v10) != a2)
    {
      v10 += 16;
      if (v11 == v10) {
        goto LABEL_19;
      }
    }
    BOOL v12 = (_DWORD *)(v5 + v10);
    if (v11 == v10 || v11 - 16 == v10)
    {
LABEL_19:
      uint64_t v17 = v2;
      goto LABEL_20;
    }
    uint64_t v13 = v11 - v10 - 16;
    uint64_t v14 = (unsigned __int8 **)(v12 + 6);
    do
    {
      int v15 = *((_DWORD *)v14 - 2);
      if (v15 != a2)
      {
        int v16 = (uint64_t *)(v12 + 2);
        *BOOL v12 = v15;
        v12 += 4;
        llvm::TrackingMDRef::operator=(v16, v14);
      }
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
    uint64_t v5 = *(void *)this;
    uint64_t v17 = *((unsigned int *)this + 2);
LABEL_20:
    llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::erase((uint64_t *)this, v12, (_DWORD *)(v5 + 16 * v17));
    return v2 != *((_DWORD *)this + 2);
  }
}

uint64_t llvm::MDAttachments::insert(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  int v5 = a2;
  uint64_t v6 = a3;
  llvm::MetadataTracking::track((uint64_t)&v6, (uint64_t)a3, 2);
  uint64_t result = llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back((uint64_t)this, (unint64_t)&v5);
  if (v6) {
    return llvm::MetadataTracking::untrack((uint64_t)&v6, (uint64_t)v6);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result = llvm::SmallVectorTemplateCommon<llvm::MDAttachments::Attachment,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>>(a1, a2, 1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v4 + 16 * v5) = *(_DWORD *)result;
  uint64_t v6 = v4 + 16 * v5;
  uint64_t v7 = (void *)(result + 8);
  *(void *)(v6 + 8) = *(void *)(result + 8);
  uint64_t v8 = v6 + 8;
  int v9 = *(unsigned __int8 **)(result + 8);
  if (v9)
  {
    unint64_t result = llvm::MetadataTracking::retrack(result + 8, v9, v8);
    *uint64_t v7 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v5 + 1;
  return result;
}

uint64_t llvm::Value::getMetadata(llvm::Value *this, int a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  unint64_t v3 = (uint64_t *)(***(void ***)this + 2504);
  int v9 = this;
  uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v3, (uint64_t *)&v9);
  uint64_t v5 = *((unsigned int *)v4 + 4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4[1] + 8;
  uint64_t v7 = 16 * v5;
  while (*(_DWORD *)(v6 - 8) != a2)
  {
    v6 += 16;
    v7 -= 16;
    if (!v7) {
      return 0;
    }
  }
  return *(void *)v6;
}

void *llvm::Value::getMetadata(void *result, int a2, unsigned int *a3)
{
  if ((*((unsigned char *)result + 23) & 0x20) != 0)
  {
    uint64_t v5 = (uint64_t *)(**(void **)*result + 2504);
    int v9 = result;
    unint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v5, (uint64_t *)&v9);
    uint64_t v6 = *((unsigned int *)result + 4);
    if (v6)
    {
      uint64_t v7 = 16 * v6;
      uint64_t v8 = (uint64_t *)(result[1] + 8);
      do
      {
        if (*((_DWORD *)v8 - 2) == a2) {
          unint64_t result = llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, *v8);
        }
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  return result;
}

void llvm::Value::getAllMetadata(uint64_t ***a1, unsigned int *a2)
{
  if ((*((unsigned char *)a1 + 23) & 0x20) != 0)
  {
    uint64_t v3 = ***a1;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    int v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)(v3 + 2504), &v7, &v8);
    uint64_t v6 = v8;
    if (!v4) {
      uint64_t v6 = *(void *)(v3 + 2504) + 40 * *(unsigned int *)(v3 + 2520);
    }
    llvm::MDAttachments::getAll((uint64_t *)(v6 + 8), a2, v5);
  }
}

uint64_t llvm::Value::setMetadata(uint64_t this, int a2, llvm::MDNode *a3)
{
  uint64_t v4 = this;
  if (a3)
  {
    uint64_t v6 = (uint64_t *)(***(void ***)this + 2504);
    uint64_t v12 = v4;
    uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v6, &v12);
    uint64_t v8 = (llvm::MDAttachments *)(v7 + 1);
    if (!*((_DWORD *)v7 + 4)) {
      *(_DWORD *)(v4 + 20) |= 0x20000000u;
    }
    llvm::MDAttachments::erase((llvm::MDAttachments *)(v7 + 1), a2);
    return llvm::MDAttachments::insert(v8, a2, a3);
  }
  else if ((*(unsigned char *)(this + 23) & 0x20) != 0)
  {
    int v9 = (uint64_t *)(***(void ***)this + 2504);
    uint64_t v12 = v4;
    uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v9, &v12);
    this = llvm::MDAttachments::erase((llvm::MDAttachments *)(v10 + 1), a2);
    if (!*((_DWORD *)v10 + 4))
    {
      uint64_t v11 = ***(void ***)v4 + 2504;
      uint64_t v12 = v4;
      this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(v11, &v12);
      *(_DWORD *)(v4 + 20) &= ~0x20000000u;
    }
  }
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, a2, &v6);
  if (v3)
  {
    uint64_t v4 = (void *)v6;
    llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector((char **)(v6 + 8));
    *uint64_t v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t llvm::Value::addMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  int v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x20000000) == 0) {
    *((_DWORD *)this + 5) = v5 | 0x20000000;
  }
  uint64_t v6 = (uint64_t *)(***(void ***)this + 2504);
  int v9 = this;
  uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v6, (uint64_t *)&v9);
  return llvm::MDAttachments::insert((llvm::MDAttachments *)(v7 + 1), a2, a3);
}

BOOL llvm::Value::eraseMetadata(llvm::Value *this, int a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  int v5 = (uint64_t *)(***(void ***)this + 2504);
  uint64_t v8 = this;
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v5, (uint64_t *)&v8);
  BOOL v2 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v6 + 1), a2);
  if (!*((_DWORD *)v6 + 4)) {
    llvm::Value::clearMetadata((uint64_t)this);
  }
  return v2;
}

uint64_t llvm::Value::clearMetadata(uint64_t this)
{
  if ((*(unsigned char *)(this + 23) & 0x20) != 0)
  {
    uint64_t v1 = this;
    uint64_t v2 = ***(void ***)this + 2504;
    uint64_t v3 = v1;
    this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(v2, &v3);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return this;
}

uint64_t *llvm::Instruction::setMetadata(uint64_t *result, uint64_t *a2, unint64_t a3, llvm::MDNode *a4)
{
  int v5 = result;
  if (a4 || result[6] || (*((unsigned char *)result + 23) & 0x20) != 0)
  {
    uint64_t v6 = **(void **)*result;
    int v8 = *(_DWORD *)(v6 + 2492);
    int v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v6 + 2480), a2, a3, &v8)+ 8);
    return llvm::Instruction::setMetadata(v5, v7, a4);
  }
  return result;
}

uint64_t *llvm::Instruction::setMetadata(uint64_t *this, int a2, llvm::MDNode *a3)
{
  uint64_t v5 = (uint64_t)this;
  if (!a3 && !this[6] && (*((unsigned char *)this + 23) & 0x20) == 0) {
    return this;
  }
  if (a2 == 38)
  {
    llvm::Instruction::updateDIAssignIDMapping((uint64_t ***)this, (uint64_t)a3);
  }
  else if (!a2)
  {
    uint64_t v6 = (unsigned __int8 *)a3;
    if (a3) {
      llvm::MetadataTracking::track((uint64_t)&v6, (uint64_t)a3, 2);
    }
    this = llvm::TrackingMDRef::operator=((uint64_t *)(v5 + 48), &v6);
    if (v6) {
      return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v6, (uint64_t)v6);
    }
    return this;
  }
  return (uint64_t *)llvm::Value::setMetadata(v5, a2, a3);
}

void llvm::Instruction::updateDIAssignIDMapping(uint64_t ***this, uint64_t a2)
{
  uint64_t v4 = ***this;
  if (!this[6] && (*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_22;
  }
  uint64_t Metadata = llvm::Value::getMetadata((llvm::Value *)this, 38);
  if (!Metadata) {
    goto LABEL_22;
  }
  if (Metadata == a2) {
    return;
  }
  uint64_t v16 = Metadata;
  uint64_t v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(v4 + 2528), &v16, &v17))uint64_t v6 = v17; {
  else
  }
    uint64_t v6 = *(void *)(v4 + 2528) + 32 * *(unsigned int *)(v4 + 2544);
  int v7 = *(char **)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 16);
  int v9 = &v7[8 * v8];
  if (v8)
  {
    uint64_t v10 = 0;
    while (*(uint64_t ****)&v7[v10] != this)
    {
      v10 += 8;
      if (8 * v8 == v10)
      {
        uint64_t v11 = &v7[8 * v8];
        goto LABEL_15;
      }
    }
    uint64_t v11 = &v7[v10];
LABEL_15:
    if (v8 == 1)
    {
      if (v7 != (char *)(v6 + 24)) {
        free(v7);
      }
      *(void *)uint64_t v6 = -8192;
      *(int32x2_t *)(v4 + 2536) = vadd_s32(*(int32x2_t *)(v4 + 2536), (int32x2_t)0x1FFFFFFFFLL);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = *(char **)(v6 + 8);
  }
  if (v9 != v11 + 8)
  {
    memmove(v11, v11 + 8, v9 - (v11 + 8));
    LODWORD(v8) = *(_DWORD *)(v6 + 16);
  }
  *(_DWORD *)(v6 + 16) = v8 - 1;
LABEL_22:
  if (!a2) {
    return;
  }
  uint64_t v17 = 0;
  uint64_t v13 = v17;
  if ((v12 & 1) == 0)
  {
    int v14 = *(_DWORD *)(v4 + 2536);
    unsigned int v15 = *(_DWORD *)(v4 + 2544);
    if (4 * v14 + 4 >= 3 * v15)
    {
      v15 *= 2;
    }
    else if (v15 + ~v14 - *(_DWORD *)(v4 + 2540) > v15 >> 3)
    {
LABEL_26:
      ++*(_DWORD *)(v4 + 2536);
      if (*(void *)v13 != -4096) {
        --*(_DWORD *)(v4 + 2540);
      }
      *(void *)uint64_t v13 = a2;
      *(void *)(v13 + 8) = v13 + 24;
      *(void *)(v13 + 16) = 0x100000000;
      goto LABEL_29;
    }
    llvm::DenseMap<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>,llvm::DenseMapInfo<llvm::DIAssignID *,void>,llvm::detail::DenseMapPair<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>>>::grow(v4 + 2528, v15);
    uint64_t v17 = 0;
    uint64_t v13 = v17;
    goto LABEL_26;
  }
LABEL_29:
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v13 + 8), (uint64_t)this);
}

void llvm::Instruction::getAllMetadataImpl(uint64_t a1, unsigned int *a2)
{
  a2[2] = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, 0, v4);
  }
  llvm::Value::getAllMetadata((uint64_t ***)a1, a2);
}

uint64_t *llvm::ContextAndReplaceableUses::makeReplaceable(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *result;
  if ((*result & 4) != 0)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(unsigned char *)(v5 + 16) & 1) == 0) {
        MEMORY[0x263E500A0](*(void *)(v5 + 24), 8);
      }
      unint64_t result = (uint64_t *)MEMORY[0x263E500B0](v5, 0x1020C408B843D01);
    }
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  *uint64_t v3 = v6 | 4;
  return result;
}

void std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
      MEMORY[0x263E500A0](*(void *)(a2 + 24), 8);
    }
    JUMPOUT(0x263E500B0);
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 24 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 24 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::InsertIntoBucketImpl<void *>(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::grow((uint64_t)a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v9 = v10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 104);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[3 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)v5, (void *)a2, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(a1, a2, &v16);
  int v9 = v16;
  if (result)
  {
    uint64_t v10 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      unsigned int v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 16);
    }
    char v14 = 0;
    uint64_t v15 = v10 + 24 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::InsertIntoBucketImpl<void *>((_DWORD *)a1, (uint64_t)a2, a2, v16);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      unsigned int v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      unsigned int v13 = *(_DWORD *)(a1 + 16);
    }
    uint64_t v15 = v12 + 24 * v13;
    char v14 = 1;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v15;
  *(unsigned char *)(a4 + 16) = v14;
  return result;
}

unsigned int *llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>(unsigned int *result, void *a2, void *a3, void *a4)
{
  int v6 = a2;
  unsigned int v7 = result;
  if (a2 != a4)
  {
    uint64_t v8 = 0;
    int v9 = a2;
    while (1)
    {
      v9 += 3;
      if (v9 == a3)
      {
        int v9 = a3;
LABEL_7:
        ++v8;
        if (v9 == a4) {
          goto LABEL_10;
        }
      }
      else if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_10:
  uint64_t v10 = result[2];
  if (v8 + v10 > (unint64_t)result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8 + v10, 24);
    LODWORD(v10) = v7[2];
  }
  if (v6 != a4)
  {
    uint64_t v11 = *(void *)v7 + 24 * v10;
    do
    {
      long long v12 = *(_OWORD *)v6;
      *(void *)(v11 + 16) = v6[2];
      *(_OWORD *)uint64_t v11 = v12;
      while (1)
      {
        v6 += 3;
        if (v6 == a3) {
          break;
        }
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_19;
        }
      }
      int v6 = a3;
LABEL_19:
      v11 += 24;
    }
    while (v6 != a4);
    LODWORD(v10) = v7[2];
  }
  v7[2] = v10 + v8;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unsigned int i = (uint64_t *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)i;
    uint64_t v11 = (char *)a2 - (char *)i;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v56 = *(a2 - 2);
          unint64_t v57 = i[1];
          if (v56 < v57 || v57 >= v56 && *(a2 - 1) < (unint64_t)i[2])
          {
            uint64_t v58 = *i;
            uint64_t *i = *(a2 - 3);
            *(a2 - 3) = v58;
            uint64_t v59 = i[1];
            i[1] = *(a2 - 2);
            *(a2 - 2) = v59;
            uint64_t v60 = i[2];
            i[2] = *(a2 - 1);
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, a2 - 3);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, i + 6, a2 - 3);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, i + 6, i + 9, a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575) {
      break;
    }
    if (!a3)
    {
      if (i == a2) {
        return result;
      }
      int64_t v77 = (v12 - 2) >> 1;
      int64_t v78 = v77;
      while (1)
      {
        int64_t v79 = v78;
        if (v77 >= v78)
        {
          uint64_t v80 = (2 * v78) | 1;
          unint64_t v81 = &i[3 * v80];
          if (2 * v79 + 2 < (uint64_t)v12)
          {
            unint64_t v82 = i[3 * v80 + 1];
            unint64_t v83 = v81[4];
            if (v82 < v83 || v83 >= v82 && i[3 * v80 + 2] < (unint64_t)v81[5])
            {
              v81 += 3;
              uint64_t v80 = 2 * v79 + 2;
            }
          }
          BOOL v84 = &i[3 * v79];
          unint64_t v87 = v84[1];
          unint64_t v85 = v84 + 1;
          unint64_t v86 = v87;
          unint64_t v88 = v81[1];
          if (v88 >= v87)
          {
            unint64_t v89 = &i[3 * v79];
            if (v86 < v88)
            {
              unint64_t v90 = v89[2];
LABEL_149:
              uint64_t v91 = *v89;
              uint64_t *v89 = *v81;
              void *v85 = v81[1];
              v89[2] = v81[2];
              if (v77 >= v80)
              {
                while (1)
                {
                  uint64_t v93 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  BOOL v92 = &i[3 * v80];
                  uint64_t v94 = v93 + 2;
                  if (v94 < (uint64_t)v12)
                  {
                    unint64_t v95 = i[3 * v80 + 1];
                    unint64_t v96 = v92[4];
                    if (v95 < v96 || v96 >= v95 && i[3 * v80 + 2] < (unint64_t)v92[5])
                    {
                      v92 += 3;
                      uint64_t v80 = v94;
                    }
                  }
                  unint64_t v97 = v92[1];
                  if (v97 < v86 || v86 >= v97 && v92[2] < v90) {
                    break;
                  }
                  uint64_t *v81 = *v92;
                  v81[1] = v92[1];
                  v81[2] = v92[2];
                  unint64_t v81 = v92;
                  if (v77 < v80) {
                    goto LABEL_151;
                  }
                }
              }
              BOOL v92 = v81;
LABEL_151:
              *BOOL v92 = v91;
              v92[1] = v86;
              v92[2] = v90;
              goto LABEL_152;
            }
            unint64_t v90 = i[3 * v79 + 2];
            if (v81[2] >= v90) {
              goto LABEL_149;
            }
          }
        }
LABEL_152:
        int64_t v78 = v79 - 1;
        if (!v79)
        {
          int64_t v98 = v11 / 0x18uLL;
          while (1)
          {
            uint64_t v99 = 0;
            uint64_t v100 = *i;
            uint64_t v101 = i[1];
            uint64_t v102 = i[2];
            uint64_t v103 = v98 - 2;
            if (v98 < 2) {
              uint64_t v103 = v98 - 1;
            }
            uint64_t v104 = v103 >> 1;
            unint64_t v105 = i;
            do
            {
              uint64_t result = (unint64_t)v105;
              uint64_t v106 = v99 + 1;
              v105 += 3 * v99 + 3;
              uint64_t v107 = 2 * v99;
              uint64_t v99 = (2 * v99) | 1;
              int64_t v108 = v107 + 2;
              if (v108 < v98)
              {
                unint64_t v109 = *(void *)(result + 24 * v106 + 8);
                unint64_t v110 = v105[4];
                if (v109 < v110 || v110 >= v109 && *(void *)(result + 24 * v106 + 16) < (unint64_t)v105[5])
                {
                  v105 += 3;
                  uint64_t v99 = v108;
                }
              }
              *(void *)uint64_t result = *v105;
              *(void *)(result + 8) = v105[1];
              *(void *)(result + 16) = v105[2];
            }
            while (v99 <= v104);
            if (v105 == a2 - 3)
            {
              uint64_t *v105 = v100;
              v105[1] = v101;
              v105[2] = v102;
            }
            else
            {
              uint64_t *v105 = *(a2 - 3);
              v105[1] = *(a2 - 2);
              v105[2] = *(a2 - 1);
              *(a2 - 3) = v100;
              *(a2 - 2) = v101;
              *(a2 - 1) = v102;
              uint64_t v111 = (char *)v105 - (char *)i + 24;
              if (v111 >= 25)
              {
                unint64_t v112 = v111 / 0x18uLL - 2;
                unint64_t v113 = v112 >> 1;
                unint64_t v114 = &i[3 * (v112 >> 1)];
                unint64_t v115 = v114[1];
                unint64_t v116 = v105[1];
                if (v115 < v116)
                {
                  unint64_t v117 = v105[2];
LABEL_180:
                  uint64_t result = *v105;
                  uint64_t *v105 = *v114;
                  v105[1] = v114[1];
                  v105[2] = i[3 * v113 + 2];
                  if (v112 >= 2)
                  {
                    while (1)
                    {
                      unint64_t v119 = v113 - 1;
                      unint64_t v113 = (v113 - 1) >> 1;
                      BOOL v118 = &i[3 * v113];
                      unint64_t v120 = v118[1];
                      if (v120 >= v116 && (v116 < v120 || i[3 * v113 + 2] >= v117)) {
                        break;
                      }
                      *unint64_t v114 = *v118;
                      v114[1] = v120;
                      v114[2] = i[3 * v113 + 2];
                      unint64_t v114 = &i[3 * v113];
                      if (v119 <= 1) {
                        goto LABEL_186;
                      }
                    }
                  }
                  BOOL v118 = v114;
LABEL_186:
                  *BOOL v118 = result;
                  v118[1] = v116;
                  v118[2] = v117;
                  goto LABEL_187;
                }
                if (v116 >= v115)
                {
                  uint64_t result = i[3 * v113 + 2];
                  unint64_t v117 = v105[2];
                  if (result < v117) {
                    goto LABEL_180;
                  }
                }
              }
            }
LABEL_187:
            a2 -= 3;
            if (v98-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v13 = v12 >> 1;
    char v14 = &i[3 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0xC01)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)v9, (uint64_t *)(v9 + 24 * (v12 >> 1)), a2 - 3);
      unint64_t v15 = v9 + 24 * v13;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 24), (uint64_t *)(v15 - 24), a2 - 6);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 48), (uint64_t *)(v9 + 24 + 24 * v13), a2 - 9);
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v15 - 24), v14, (uint64_t *)(v9 + 24 + 24 * v13));
      uint64_t v16 = *(void *)v9;
      *(void *)unint64_t v9 = *v14;
      *char v14 = v16;
      long long v17 = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
      *(_OWORD *)(v15 + 8) = v17;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 24 * (v12 >> 1)), (uint64_t *)v9, a2 - 3);
    }
    --a3;
    if (a4)
    {
      unint64_t v18 = *(void *)(v9 + 8);
LABEL_15:
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)v9;
      unint64_t v23 = *(void *)(v9 + 16);
      while (1)
      {
        unint64_t v24 = *(void *)(v9 + v21 + 32);
        if (v18 <= v24 && (v18 < v24 || *(void *)(v9 + v21 + 40) >= v23)) {
          break;
        }
        v21 += 24;
      }
      unint64_t v25 = v9 + v21 + 24;
      if (v21)
      {
        unint64_t v26 = *(a2 - 2);
        unint64_t v27 = a2 - 3;
        if (v18 <= v26)
        {
          uint64_t v28 = a2 - 1;
          do
          {
            if (v26 <= v18 && *v28 < v23) {
              break;
            }
            unint64_t v26 = *(v28 - 4);
            v28 -= 3;
          }
          while (v18 <= v26);
          unint64_t v27 = v28 - 2;
        }
      }
      else
      {
        unint64_t v27 = a2;
        if (v25 < (unint64_t)a2)
        {
          unint64_t v29 = *(a2 - 2);
          unint64_t v27 = a2 - 3;
          if (v18 <= v29)
          {
            uint64_t v30 = a2 - 1;
            unint64_t v27 = a2 - 3;
            while (1)
            {
              BOOL v31 = v30 - 2;
              if (v29 <= v18)
              {
                if (*v30 < v23 || v25 >= (unint64_t)v31)
                {
                  unint64_t v27 = v30 - 2;
                  break;
                }
              }
              else if (v25 >= (unint64_t)v31)
              {
                break;
              }
              v27 -= 3;
              unint64_t v29 = *(v30 - 4);
              v30 -= 3;
              if (v18 > v29)
              {
                unint64_t v27 = v30 - 2;
                break;
              }
            }
          }
        }
      }
      unsigned int i = (uint64_t *)v25;
      if (v25 < (unint64_t)v27)
      {
        unint64_t v33 = v27;
        do
        {
          uint64_t v34 = *i;
          uint64_t *i = *v33;
          *unint64_t v33 = v34;
          uint64_t v35 = i[1];
          i[1] = v33[1];
          v33[1] = v35;
          uint64_t v36 = i[2];
          i[2] = v33[2];
          v33[2] = v36;
          do
          {
            do
            {
              i += 3;
              unint64_t v37 = i[1];
            }
            while (v18 > v37);
          }
          while (v18 >= v37 && i[2] < v23);
          unint64_t v38 = *(v33 - 2);
          if (v18 <= v38)
          {
            uint64_t v39 = (unint64_t *)(v33 - 1);
            do
            {
              if (v38 <= v18 && *v39 < v23) {
                break;
              }
              unint64_t v38 = *(v39 - 4);
              v39 -= 3;
            }
            while (v18 <= v38);
            unint64_t v33 = (uint64_t *)(v39 - 2);
          }
          else
          {
            v33 -= 3;
          }
        }
        while (i < v33);
      }
      if (i - 3 != (uint64_t *)v9)
      {
        *(void *)unint64_t v9 = *(i - 3);
        *(void *)(v9 + 8) = *(i - 2);
        *(void *)(v9 + 16) = *(i - 1);
      }
      *(i - 3) = v22;
      *(i - 2) = v18;
      *(i - 1) = v23;
      if (v25 < (unint64_t)v27)
      {
LABEL_59:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(v9, i - 3, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)v9, i - 3);
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, a2);
        if (result)
        {
          a2 = i - 3;
          if (v40) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v40) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v19 = *(void *)(v9 - 16);
      unint64_t v18 = *(void *)(v9 + 8);
      if (v19 < v18) {
        goto LABEL_15;
      }
      if (v18 < v19)
      {
        unint64_t v20 = *(void *)(v9 + 16);
      }
      else
      {
        unint64_t v20 = *(void *)(v9 + 16);
        if (*(void *)(v9 - 8) < v20) {
          goto LABEL_15;
        }
      }
      unint64_t v41 = *(a2 - 2);
      if (v18 >= v41 && (v41 < v18 || v20 >= *(a2 - 1)))
      {
        for (unsigned int i = (uint64_t *)(v9 + 24); i < a2; i += 3)
        {
          unint64_t v43 = i[1];
          if (v18 < v43 || v43 >= v18 && v20 < i[2]) {
            break;
          }
        }
      }
      else
      {
        unint64_t v42 = *(void *)(v9 + 32);
        if (v18 >= v42)
        {
          int v44 = (unint64_t *)(v9 + 56);
          do
          {
            if (v42 >= v18 && v20 < *(v44 - 2)) {
              break;
            }
            unint64_t v45 = *v44;
            v44 += 3;
            unint64_t v42 = v45;
          }
          while (v18 >= v45);
          unsigned int i = (uint64_t *)(v44 - 4);
        }
        else
        {
          unsigned int i = (uint64_t *)(v9 + 24);
        }
      }
      uint64_t v46 = *(void *)v9;
      unint64_t v47 = a2;
      if (i < a2)
      {
        for (unsigned int j = a2 - 1; v18 < v41 || v41 >= v18 && v20 < *j; j -= 3)
          unint64_t v41 = *(j - 4);
        unint64_t v47 = j - 2;
      }
      while (i < v47)
      {
        uint64_t v49 = *i;
        uint64_t *i = *v47;
        uint64_t *v47 = v49;
        uint64_t v50 = i[1];
        i[1] = v47[1];
        v47[1] = v50;
        uint64_t v51 = i[2];
        i[2] = v47[2];
        v47[2] = v51;
        unint64_t v52 = i[4];
        if (v18 >= v52)
        {
          unint64_t v53 = (unint64_t *)(i + 7);
          do
          {
            if (v52 >= v18 && v20 < *(v53 - 2)) {
              break;
            }
            unint64_t v54 = *v53;
            v53 += 3;
            unint64_t v52 = v54;
          }
          while (v18 >= v54);
          unsigned int i = (uint64_t *)(v53 - 4);
        }
        else
        {
          i += 3;
        }
        do
        {
          do
          {
            v47 -= 3;
            unint64_t v55 = v47[1];
          }
          while (v18 < v55);
        }
        while (v55 >= v18 && v20 < v47[2]);
      }
      BOOL v4 = (unint64_t)(i - 3) >= v9;
      BOOL v5 = i - 3 == (uint64_t *)v9;
      if (i - 3 != (uint64_t *)v9)
      {
        *(void *)unint64_t v9 = *(i - 3);
        *(void *)(v9 + 8) = *(i - 2);
        *(void *)(v9 + 16) = *(i - 1);
      }
      a4 = 0;
      *(i - 3) = v46;
      *(i - 2) = v18;
      *(i - 1) = v20;
    }
  }
  unint64_t v61 = i + 3;
  BOOL v63 = i == a2 || v61 == a2;
  if ((a4 & 1) == 0)
  {
    if (v63) {
      return result;
    }
    for (k = i + 2; ; k += 3)
    {
      BOOL v123 = (void *)v9;
      unint64_t v9 = (unint64_t)v61;
      unint64_t v124 = v123[4];
      unint64_t v125 = v123[1];
      if (v124 < v125) {
        break;
      }
      if (v125 >= v124)
      {
        unint64_t v126 = v123[5];
        if (v126 < v123[2]) {
          goto LABEL_199;
        }
      }
LABEL_205:
      unint64_t v61 = (uint64_t *)(v9 + 24);
      if ((uint64_t *)(v9 + 24) == a2) {
        return result;
      }
    }
    unint64_t v126 = v123[5];
LABEL_199:
    uint64_t v127 = *(void *)v9;
    for (m = k; ; m -= 3)
    {
      *(_OWORD *)(m + 1) = *((_OWORD *)m - 1);
      m[3] = *m;
      unint64_t v129 = *(m - 4);
      if (v124 >= v129 && (v129 < v124 || v126 >= *(m - 3))) {
        break;
      }
    }
    *(m - 2) = v127;
    *(m - 1) = v124;
    uint64_t *m = v126;
    goto LABEL_205;
  }
  if (v63) {
    return result;
  }
  uint64_t v64 = 0;
  unint64_t v65 = i;
  while (2)
  {
    unint64_t v66 = v65;
    unint64_t v65 = v61;
    unint64_t v67 = v66[4];
    unint64_t v68 = v66[1];
    if (v67 >= v68)
    {
      if (v68 < v67) {
        goto LABEL_135;
      }
      unint64_t v69 = v66[5];
      if (v69 >= v66[2]) {
        goto LABEL_135;
      }
    }
    else
    {
      unint64_t v69 = v66[5];
    }
    uint64_t v70 = v66[3];
    uint64_t v71 = v66[1];
    v66[3] = *v66;
    v65[1] = v71;
    v65[2] = v66[2];
    unint64_t v72 = i;
    if (v66 == i) {
      goto LABEL_134;
    }
    uint64_t v73 = v64;
    while (2)
    {
      unint64_t v74 = (char *)i + v73;
      unint64_t v75 = *(uint64_t *)((char *)i + v73 - 16);
      if (v67 < v75)
      {
        uint64_t result = *((void *)v74 - 1);
        goto LABEL_131;
      }
      if (v75 >= v67)
      {
        unint64_t v72 = (uint64_t *)((char *)i + v73);
        uint64_t result = *(uint64_t *)((char *)i + v73 - 8);
        if (v69 >= result) {
          goto LABEL_134;
        }
LABEL_131:
        v66 -= 3;
        BOOL v76 = (uint64_t *)((char *)i + v73);
        void *v76 = *((void *)v74 - 3);
        v76[1] = v75;
        v76[2] = result;
        v73 -= 24;
        if (!v73)
        {
          unint64_t v72 = i;
          goto LABEL_134;
        }
        continue;
      }
      break;
    }
    unint64_t v72 = v66;
LABEL_134:
    uint64_t *v72 = v70;
    v72[1] = v67;
    v72[2] = v69;
LABEL_135:
    unint64_t v61 = v65 + 3;
    v64 += 24;
    if (v65 + 3 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = result[1];
  if (v3 >= v4 && (v4 < v3 || a2[2] >= (unint64_t)result[2]))
  {
    unint64_t v9 = a3[1];
    if (v9 < v3 || v3 >= v9 && a3[2] < (unint64_t)a2[2])
    {
      uint64_t v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      unint64_t v13 = a2 + 2;
      uint64_t v12 = a2[2];
      a2[2] = a3[2];
      a3[2] = v12;
      unint64_t v14 = a2[1];
      unint64_t v15 = result[1];
      if (v14 < v15 || v15 >= v14 && *v13 < (unint64_t)result[2])
      {
        uint64_t v16 = *result;
        llvm::MDNode *result = *a2;
        *a2 = v16;
        uint64_t v17 = result[1];
        result[1] = a2[1];
        a2[1] = v17;
        uint64_t v8 = result + 2;
LABEL_18:
        uint64_t v25 = *v8;
        uint64_t *v8 = *v13;
        *unint64_t v13 = v25;
      }
    }
  }
  else
  {
    unint64_t v5 = a3[1];
    if (v5 < v3 || v3 >= v5 && a3[2] < (unint64_t)a2[2])
    {
      uint64_t v6 = *result;
      llvm::MDNode *result = *a3;
      *a3 = v6;
      uint64_t v7 = result[1];
      result[1] = a3[1];
      a3[1] = v7;
      uint64_t v8 = result + 2;
LABEL_17:
      unint64_t v13 = a3 + 2;
      goto LABEL_18;
    }
    uint64_t v18 = *result;
    llvm::MDNode *result = *a2;
    *a2 = v18;
    uint64_t v19 = result[1];
    result[1] = a2[1];
    a2[1] = v19;
    uint64_t v8 = a2 + 2;
    unint64_t v20 = result[2];
    result[2] = a2[2];
    a2[2] = v20;
    unint64_t v21 = a3[1];
    unint64_t v22 = a2[1];
    if (v21 < v22 || v22 >= v21 && a3[2] < v20)
    {
      uint64_t v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = a1[1];
      if (v6 < v7 || v7 >= v6 && *(a2 - 1) < (unint64_t)a1[2])
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v9;
        uint64_t v10 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      uint64_t v11 = a1 + 6;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6);
      uint64_t v12 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    unint64_t v15 = v12[1];
    unint64_t v16 = v11[1];
    if (v15 >= v16)
    {
      if (v16 < v15) {
        goto LABEL_23;
      }
      unint64_t v17 = v12[2];
      if (v17 >= v11[2]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v17 = v12[2];
    }
    uint64_t v18 = *v12;
    *uint64_t v12 = *v11;
    v12[1] = v11[1];
    _OWORD v12[2] = v11[2];
    uint64_t v19 = a1;
    if (v11 == a1) {
      goto LABEL_22;
    }
    uint64_t v20 = v13;
    while (1)
    {
      unint64_t v21 = (uint64_t *)((char *)a1 + v20);
      unint64_t v22 = *(uint64_t *)((char *)a1 + v20 + 32);
      if (v15 < v22)
      {
        unint64_t v23 = v21[5];
        goto LABEL_18;
      }
      if (v22 < v15)
      {
        uint64_t v19 = (uint64_t *)((char *)a1 + v20 + 48);
        goto LABEL_22;
      }
      unint64_t v23 = *(uint64_t *)((char *)a1 + v20 + 40);
      if (v17 >= v23) {
        break;
      }
LABEL_18:
      v11 -= 3;
      v21[6] = v21[3];
      uint64_t v24 = (char *)a1 + v20;
      *((void *)v24 + 7) = v22;
      *((void *)v24 + 8) = v23;
      v20 -= 24;
      if (v20 == -48)
      {
        uint64_t v19 = a1;
        goto LABEL_22;
      }
    }
    uint64_t v19 = v11;
LABEL_22:
    uint64_t *v19 = v18;
    v19[1] = v15;
    v19[2] = v17;
    if (++v14 == 8) {
      return v12 + 3 == a2;
    }
LABEL_23:
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 3;
  }
  while (v12 != a2);
  return 1;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3);
  unint64_t v9 = a4[1];
  unint64_t v10 = a3[1];
  if (v9 < v10 || v10 >= v9 && a4[2] < (unint64_t)a3[2])
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t v13 = a3[2];
    a3[2] = a4[2];
    a4[2] = v13;
    unint64_t v14 = a3[1];
    unint64_t v15 = a2[1];
    if (v14 < v15 || v15 >= v14 && a3[2] < (unint64_t)a2[2])
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = a2[1];
      a2[1] = a3[1];
      a3[1] = v17;
      uint64_t v18 = a2[2];
      a2[2] = a3[2];
      a3[2] = v18;
      unint64_t v19 = a2[1];
      unint64_t v20 = a1[1];
      if (v19 < v20 || v20 >= v19 && a2[2] < (unint64_t)a1[2])
      {
        uint64_t v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
        uint64_t v22 = a1[1];
        a1[1] = a2[1];
        a2[1] = v22;
        uint64_t v23 = a1[2];
        a1[2] = a2[2];
        a2[2] = v23;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3, a4);
  unint64_t v11 = a5[1];
  unint64_t v12 = a4[1];
  if (v11 < v12 || v12 >= v11 && a5[2] < (unint64_t)a4[2])
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    unint64_t v16 = a4[1];
    unint64_t v17 = a3[1];
    if (v16 < v17 || v17 >= v16 && a4[2] < (unint64_t)a3[2])
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = a3[1];
      a3[1] = a4[1];
      a4[1] = v19;
      uint64_t v20 = a3[2];
      a3[2] = a4[2];
      a4[2] = v20;
      unint64_t v21 = a3[1];
      unint64_t v22 = a2[1];
      if (v21 < v22 || v22 >= v21 && a3[2] < (unint64_t)a2[2])
      {
        uint64_t v23 = *a2;
        *a2 = *a3;
        *a3 = v23;
        uint64_t v24 = a2[1];
        a2[1] = a3[1];
        a3[1] = v24;
        uint64_t v25 = a2[2];
        a2[2] = a3[2];
        a3[2] = v25;
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        if (v26 < v27 || v27 >= v26 && a2[2] < (unint64_t)a1[2])
        {
          uint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
          uint64_t v29 = a1[1];
          a1[1] = a2[1];
          a2[1] = v29;
          uint64_t v30 = a1[2];
          a1[2] = a2[2];
          a2[2] = v30;
        }
      }
    }
  }
  return result;
}

void *llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::shrink_and_clear(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    unsigned int v4 = 1 << (33 - v3);
  }
  else {
    unsigned int v4 = 64;
  }
  if (v2 >= 2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    unint64_t v6 = result + 1;
    uint64_t *result = 1;
    unint64_t v7 = result + 13;
    do
    {
LABEL_10:
      *unint64_t v6 = -4096;
      v6 += 3;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      uint64_t *result = 0;
      if (!v5) {
        return result;
      }
      unint64_t v6 = (void *)result[1];
      unint64_t v7 = &v6[3 * v5];
      goto LABEL_10;
    }
    MEMORY[0x263E500A0](result[1], 8);
  }
  if (v5 <= 4)
  {
    *uint64_t v1 = 1;
  }
  else
  {
    *(_DWORD *)v1 &= ~1u;
    BOOL result = operator new(24 * v5, (std::align_val_t)8uLL);
    v1[1] = result;
    v1[2] = v5;
    int v8 = *(_DWORD *)v1;
    *uint64_t v1 = *(_DWORD *)v1 & 1;
    if ((v8 & 1) == 0)
    {
      unint64_t v9 = &result[3 * v5];
      goto LABEL_22;
    }
  }
  BOOL result = v1 + 1;
  unint64_t v9 = v1 + 13;
  do
  {
LABEL_22:
    uint64_t *result = -4096;
    result += 3;
  }
  while (result != v9);
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = (uint64_t *)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) < (unint64_t)v10[2])
                {
                  uint64_t v50 = *v10;
                  *unint64_t v10 = *(a2 - 3);
                  *(a2 - 3) = v50;
                  uint64_t v51 = v10[1];
                  v10[1] = *(a2 - 2);
                  *(a2 - 2) = v51;
                  uint64_t v52 = v10[2];
                  _OWORD v10[2] = *(a2 - 1);
                  *(a2 - 1) = v52;
                }
                break;
              case 3uLL:
                BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v10, v10 + 3, a2 - 3);
                break;
              case 4uLL:
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, a2 - 3);
                break;
              case 5uLL:
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, v10 + 9);
                if (*(a2 - 1) < (unint64_t)v10[11])
                {
                  uint64_t v53 = v10[9];
                  unint64_t v10[9] = *(a2 - 3);
                  *(a2 - 3) = v53;
                  uint64_t v54 = v10[10];
                  v10[10] = *(a2 - 2);
                  *(a2 - 2) = v54;
                  uint64_t v55 = v10[11];
                  v10[11] = *(a2 - 1);
                  *(a2 - 1) = v55;
                  unint64_t v56 = v10[11];
                  unint64_t v57 = v10[8];
                  if (v56 < v57)
                  {
                    uint64_t v59 = v10[6];
                    uint64_t v58 = v10[7];
                    uint64_t v60 = v10[9];
                    uint64_t v61 = v10[10];
                    unint64_t v62 = v10[5];
                    v10[6] = v60;
                    v10[7] = v61;
                    void v10[8] = v56;
                    unint64_t v10[9] = v59;
                    v10[10] = v58;
                    v10[11] = v57;
                    if (v56 < v62)
                    {
                      uint64_t v64 = v10[3];
                      uint64_t v63 = v10[4];
                      unint64_t v65 = v10[2];
                      uint64_t v10[3] = v60;
                      uint64_t v10[4] = v61;
                      v10[5] = v56;
                      v10[6] = v64;
                      v10[7] = v63;
                      void v10[8] = v62;
                      if (v56 < v65)
                      {
                        uint64_t v66 = *v10;
                        uint64_t v67 = v10[1];
                        *unint64_t v10 = v60;
                        v10[1] = v61;
                        _OWORD v10[2] = v56;
                        uint64_t v10[3] = v66;
                        uint64_t v10[4] = v67;
                        v10[5] = v65;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 575)
          {
            unint64_t v68 = v10 + 3;
            BOOL v70 = v10 == a2 || v68 == a2;
            if (a4)
            {
              if (!v70)
              {
                uint64_t v71 = 0;
                unint64_t v72 = v10;
                do
                {
                  uint64_t v73 = v68;
                  unint64_t v74 = v72[5];
                  if (v74 < v72[2])
                  {
                    uint64_t v75 = *v73;
                    uint64_t v76 = v72[4];
                    uint64_t v77 = v71;
                    while (1)
                    {
                      int64_t v78 = (char *)v10 + v77;
                      *(_OWORD *)(v78 + 24) = *(_OWORD *)((char *)v10 + v77);
                      *((void *)v78 + 5) = *(uint64_t *)((char *)v10 + v77 + 16);
                      if (!v77) {
                        break;
                      }
                      v77 -= 24;
                      if (v74 >= *((void *)v78 - 1))
                      {
                        int64_t v79 = (uint64_t *)((char *)v10 + v77 + 24);
                        goto LABEL_85;
                      }
                    }
                    int64_t v79 = v10;
LABEL_85:
                    uint64_t *v79 = v75;
                    v79[1] = v76;
                    v79[2] = v74;
                  }
                  unint64_t v68 = v73 + 3;
                  v71 += 24;
                  unint64_t v72 = v73;
                }
                while (v73 + 3 != a2);
              }
            }
            else if (!v70)
            {
              unint64_t v114 = v10 + 5;
              do
              {
                unint64_t v115 = v68;
                unint64_t v116 = *(void *)(v9 + 40);
                if (v116 < *(void *)(v9 + 16))
                {
                  uint64_t v117 = *v115;
                  uint64_t v118 = *(void *)(v9 + 32);
                  unint64_t v119 = v114;
                  do
                  {
                    unint64_t v120 = v119;
                    *((_OWORD *)v119 - 1) = *(_OWORD *)(v119 - 5);
                    uint64_t v121 = *(v119 - 3);
                    v119 -= 3;
                    *unint64_t v120 = v121;
                  }
                  while (v116 < *(v120 - 6));
                  *(v119 - 2) = v117;
                  *(v119 - 1) = v118;
                  *unint64_t v119 = v116;
                }
                unint64_t v68 = v115 + 3;
                v114 += 3;
                unint64_t v9 = (unint64_t)v115;
              }
              while (v115 + 3 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v80 = (v12 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  BOOL v84 = &v10[3 * v83];
                  if (2 * v82 + 2 < (uint64_t)v12)
                  {
                    unint64_t v85 = v10[3 * v83 + 2];
                    unint64_t v86 = v84[5];
                    v84 += 3 * (v85 < v86);
                    if (v85 < v86) {
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  unint64_t v87 = v10[3 * v82 + 2];
                  if (v84[2] >= v87)
                  {
                    unint64_t v88 = &v10[3 * v82];
                    uint64_t v90 = *v88;
                    uint64_t v89 = v88[1];
                    do
                    {
                      uint64_t v91 = v88;
                      unint64_t v88 = v84;
                      uint64_t *v91 = *v84;
                      v91[1] = v84[1];
                      v91[2] = v84[2];
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v92 = (2 * v83) | 1;
                      BOOL v84 = &v10[3 * v92];
                      uint64_t v93 = 2 * v83 + 2;
                      if (v93 < (uint64_t)v12)
                      {
                        unint64_t v94 = v10[3 * v92 + 2];
                        unint64_t v95 = v84[5];
                        v84 += 3 * (v94 < v95);
                        if (v94 < v95) {
                          uint64_t v92 = v93;
                        }
                      }
                      uint64_t v83 = v92;
                    }
                    while (v84[2] >= v87);
                    uint64_t *v88 = v90;
                    v88[1] = v89;
                    v88[2] = v87;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              int64_t v96 = v11 / 0x18uLL;
              do
              {
                BOOL result = 0;
                uint64_t v97 = *v10;
                uint64_t v98 = v10[1];
                uint64_t v99 = v10[2];
                uint64_t v100 = v10;
                do
                {
                  uint64_t v101 = (char *)(result + 1);
                  uint64_t v102 = &v100[3 * result + 3];
                  uint64_t v103 = (2 * result) | 1;
                  uint64_t v104 = 2 * result + 2;
                  if (v104 < v96)
                  {
                    unint64_t v105 = v100[3 * (void)v101 + 2];
                    unint64_t v106 = v102[5];
                    v102 += 3 * (v105 < v106);
                    if (v105 < v106) {
                      uint64_t v103 = v104;
                    }
                  }
                  uint64_t *v100 = *v102;
                  v100[1] = v102[1];
                  v100[2] = v102[2];
                  uint64_t v100 = v102;
                  BOOL result = v103;
                }
                while (v103 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
                if (v102 == a2 - 3)
                {
                  *uint64_t v102 = v97;
                  v102[1] = v98;
                  v102[2] = v99;
                }
                else
                {
                  *uint64_t v102 = *(a2 - 3);
                  v102[1] = *(a2 - 2);
                  v102[2] = *(a2 - 1);
                  *(a2 - 3) = v97;
                  *(a2 - 2) = v98;
                  *(a2 - 1) = v99;
                  uint64_t v107 = (char *)v102 - (char *)v10 + 24;
                  if (v107 >= 25)
                  {
                    unint64_t v108 = (v107 / 0x18uLL - 2) >> 1;
                    unint64_t v109 = v102[2];
                    if (v10[3 * v108 + 2] < v109)
                    {
                      uint64_t v110 = *v102;
                      uint64_t v111 = v102[1];
                      do
                      {
                        unint64_t v112 = v102;
                        uint64_t v102 = &v10[3 * v108];
                        uint64_t *v112 = *v102;
                        v112[1] = v102[1];
                        BOOL result = (unint64_t)(v102 + 2);
                        v112[2] = v102[2];
                        if (!v108) {
                          break;
                        }
                        unint64_t v108 = (v108 - 1) >> 1;
                      }
                      while (v10[3 * v108 + 2] < v109);
                      *uint64_t v102 = v110;
                      v102[1] = v111;
                      *(void *)BOOL result = v109;
                    }
                  }
                }
                a2 -= 3;
              }
              while (v96-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[3 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)v9, (uint64_t *)(v9 + 24 * (v12 >> 1)), a2 - 3);
            unint64_t v15 = v9 + 24 * v13;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 24), (uint64_t *)(v15 - 24), a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 48), (uint64_t *)(v9 + 24 + 24 * v13), a2 - 9);
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v15 - 24), v14, (uint64_t *)(v9 + 24 + 24 * v13));
            uint64_t v16 = *(void *)v9;
            *(void *)unint64_t v9 = *v14;
            *uint64_t v14 = v16;
            long long v17 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v15 + 8) = v17;
          }
          else
          {
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)(v9 + 24 * (v12 >> 1)), (uint64_t *)v9, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 16);
          if (*(void *)(v9 - 8) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(a2 - 1))
          {
            unint64_t v38 = (uint64_t *)(v9 + 24);
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              unint64_t v39 = v38[2];
              v38 += 3;
            }
            while (v18 >= v39);
          }
          else
          {
            unint64_t v36 = v9;
            do
            {
              unint64_t v10 = (uint64_t *)(v36 + 24);
              unint64_t v37 = *(void *)(v36 + 40);
              v36 += 24;
            }
            while (v18 >= v37);
          }
          BOOL v40 = a2;
          if (v10 < a2)
          {
            unint64_t v41 = a2;
            do
            {
              BOOL v40 = v41 - 3;
              unint64_t v42 = *(v41 - 1);
              v41 -= 3;
            }
            while (v18 < v42);
          }
          uint64_t v43 = *(void *)v9;
          uint64_t v44 = *(void *)(v9 + 8);
          while (v10 < v40)
          {
            uint64_t v45 = *v10;
            *unint64_t v10 = *v40;
            uint64_t *v40 = v45;
            uint64_t v46 = v10[1];
            v10[1] = v40[1];
            v40[1] = v46;
            uint64_t v47 = v10[2];
            _OWORD v10[2] = v40[2];
            v40[2] = v47;
            do
            {
              unint64_t v48 = v10[5];
              v10 += 3;
            }
            while (v18 >= v48);
            do
            {
              unint64_t v49 = *(v40 - 1);
              v40 -= 3;
            }
            while (v18 < v49);
          }
          BOOL v4 = (unint64_t)(v10 - 3) >= v9;
          BOOL v5 = v10 - 3 == (uint64_t *)v9;
          if (v10 - 3 != (uint64_t *)v9)
          {
            *(void *)unint64_t v9 = *(v10 - 3);
            *(void *)(v9 + 8) = *(v10 - 2);
            *(void *)(v9 + 16) = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 3) = v43;
          *(v10 - 2) = v44;
          *(v10 - 1) = v18;
        }
        unint64_t v18 = *(void *)(v9 + 16);
LABEL_13:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)v9;
        uint64_t v21 = *(void *)(v9 + 8);
        do
        {
          unint64_t v22 = *(void *)(v9 + v19 + 40);
          v19 += 24;
        }
        while (v22 < v18);
        uint64_t v23 = (uint64_t *)(v9 + v19);
        uint64_t v24 = a2;
        if (v19 == 24)
        {
          unint64_t v27 = a2;
          while (v23 < v27)
          {
            uint64_t v25 = v27 - 3;
            unint64_t v28 = *(v27 - 1);
            v27 -= 3;
            if (v28 < v18) {
              goto LABEL_23;
            }
          }
          uint64_t v25 = v27;
        }
        else
        {
          do
          {
            uint64_t v25 = v24 - 3;
            unint64_t v26 = *(v24 - 1);
            v24 -= 3;
          }
          while (v26 >= v18);
        }
LABEL_23:
        unint64_t v10 = v23;
        if (v23 < v25)
        {
          uint64_t v29 = v25;
          do
          {
            uint64_t v30 = *v10;
            *unint64_t v10 = *v29;
            *uint64_t v29 = v30;
            uint64_t v31 = v10[1];
            v10[1] = v29[1];
            v29[1] = v31;
            uint64_t v32 = v10[2];
            _OWORD v10[2] = v29[2];
            v29[2] = v32;
            do
            {
              unint64_t v33 = v10[5];
              v10 += 3;
            }
            while (v33 < v18);
            do
            {
              unint64_t v34 = *(v29 - 1);
              v29 -= 3;
            }
            while (v34 >= v18);
          }
          while (v10 < v29);
        }
        if (v10 - 3 != (uint64_t *)v9)
        {
          *(void *)unint64_t v9 = *(v10 - 3);
          *(void *)(v9 + 8) = *(v10 - 2);
          *(void *)(v9 + 16) = *(v10 - 1);
        }
        *(v10 - 3) = v20;
        *(v10 - 2) = v21;
        *(v10 - 1) = v18;
        if (v23 >= v25) {
          break;
        }
LABEL_34:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(v9, v10 - 3, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>((uint64_t *)v9, v10 - 3);
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 3;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3 = a2 + 2;
  unint64_t v4 = a2[2];
  BOOL v5 = result + 2;
  unint64_t v6 = a3[2];
  if (v4 < result[2])
  {
    uint64_t v7 = *result;
    if (v6 >= v4)
    {
      uint64_t *result = *a2;
      *a2 = v7;
      uint64_t v13 = result[1];
      result[1] = a2[1];
      a2[1] = v13;
      unint64_t v14 = result[2];
      result[2] = a2[2];
      a2[2] = v14;
      if (a3[2] >= v14) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      BOOL result = a2 + 1;
      int v8 = a3 + 1;
      BOOL v5 = a2 + 2;
    }
    else
    {
      uint64_t *result = *a3;
      *a3 = v7;
      ++result;
      int v8 = a3 + 1;
    }
    unsigned int v3 = a3 + 2;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    uint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    int v8 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    if (a2[2] < (unint64_t)*v5)
    {
      uint64_t v12 = *result;
      *result++ = *a2;
      *a2 = v12;
LABEL_10:
      uint64_t v16 = *result;
      uint64_t *result = *v8;
      uint64_t *v8 = v16;
      uint64_t v17 = *v5;
      *BOOL v5 = *v3;
      *unsigned int v3 = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        uint64_t v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        uint64_t v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        uint64_t v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        unint64_t v22 = a1[11];
        unint64_t v23 = a1[8];
        if (v22 < v23)
        {
          uint64_t v25 = a1[6];
          uint64_t v24 = a1[7];
          uint64_t v26 = a1[9];
          uint64_t v27 = a1[10];
          unint64_t v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            uint64_t v30 = a1[3];
            uint64_t v29 = a1[4];
            unint64_t v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              uint64_t v32 = *a1;
              uint64_t v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 6;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6);
      uint64_t v10 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = v10[2];
    if (v13 < v9[2])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((void *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *((void *)v17 + 5))
        {
          unint64_t v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      unint64_t v18 = a1;
LABEL_13:
      uint64_t *v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8) {
        return v10 + 3 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3);
  if (a4[2] < (unint64_t)a3[2])
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    if (a3[2] < (unint64_t)a2[2])
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      uint64_t v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      if (a2[2] < (unint64_t)a1[2])
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        uint64_t v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::grow(a1, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
    else
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(a1, a2);
    }
  }
}

void llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v6);
  llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(a1, v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::uninitialized_move<llvm::MDOperand*,llvm::MDOperand*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 8)), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = v4;
    uint64_t v7 = v5 - 1;
    do
    {
      uint64_t result = (uint64_t)&v7[v6];
      uint64_t v8 = (uint64_t)v7[v6];
      if (v8) {
        uint64_t result = llvm::MetadataTracking::untrack(result, v8);
      }
      --v6;
    }
    while (v6 * 8);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::uninitialized_move<llvm::MDOperand*,llvm::MDOperand*>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *a3 = 0;
      uint64_t v6 = *v5;
      *a3 = *v5;
      if (v6) {
        uint64_t result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a3);
      }
      *v5++ = 0;
      ++a3;
    }
    while (v5 != a2);
  }
  return result;
}

char **llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    int v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      if (v6) {
        llvm::MetadataTracking::untrack((uint64_t)&v5[v4], v6);
      }
      v4 -= 8;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, (uint64_t)a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::MDTuple *>(a1, (uint64_t)a2, (uint64_t)a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = *(_DWORD *)(*(void *)a2 + 4) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*(void *)a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*(void *)a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::MDTuple *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (void *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v16 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, (uint64_t)v13, &v16);
          void *v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::MDTuple>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a1;
    unsigned int v8 = *(_DWORD *)(a2 + 32);
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = v8 & v9;
      uint64_t v12 = (uint64_t *)(v7 + 8 * (v8 & v9));
      uint64_t v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(a2, v13, 0))
        {
          uint64_t result = 1;
          goto LABEL_18;
        }
        uint64_t v13 = *v12;
      }
      if (v13 == -4096) {
        break;
      }
      if (v6) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -8192;
      }
      if (v14) {
        unint64_t v6 = (uint64_t *)(v7 + 8 * v11);
      }
      unsigned int v8 = v11 + i;
    }
    uint64_t result = 0;
    if (v6) {
      uint64_t v12 = v6;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::MDNode *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  uint64_t v4 = a1 + 16;
  unint64_t v5 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v11);
  unint64_t v6 = (uint64_t *)&v5[*(unsigned int *)(a1 + 8)];
  uint64_t v7 = *a2;
  *unint64_t v6 = *a2;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)v6, v7, 2);
  }
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v5);
  int v8 = v11;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  unsigned int v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v8;
  return (uint64_t)&v5[v9 - 1];
}

void *std::get_temporary_buffer[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    int v8 = a1;
    if (a4 == 2)
    {
      unsigned __int32 v9 = a2[-1].n128_u32[0];
      unsigned __int32 v10 = a1->n128_u32[0];
      if (v9 < a1->n128_u32[0])
      {
        a1->n128_u32[0] = v9;
        a2[-1].n128_u32[0] = v10;
        unint64_t v11 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v19 = a1 + 1;
        if (&a1[1] != a2)
        {
          uint64_t v20 = 0;
          uint64_t v21 = a1;
          do
          {
            unint64_t v22 = v19;
            unsigned __int32 v23 = v21[1].n128_u32[0];
            unsigned __int32 v24 = v21->n128_u32[0];
            if (v23 < v21->n128_u32[0])
            {
              unint64_t v25 = v21[1].n128_u64[1];
              uint64_t v26 = v20;
              while (1)
              {
                uint64_t v27 = (char *)a1 + v26;
                *((_DWORD *)v27 + 4) = v24;
                *((void *)v27 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v26);
                if (!v26) {
                  break;
                }
                unsigned __int32 v24 = *((_DWORD *)v27 - 4);
                v26 -= 16;
                if (v23 >= v24)
                {
                  uint64_t v28 = (uint64_t)&a1[1] + v26;
                  goto LABEL_20;
                }
              }
              uint64_t v28 = (uint64_t)a1;
LABEL_20:
              *(_DWORD *)uint64_t v28 = v23;
              *(void *)(v28 + 8) = v25;
            }
            uint64_t v19 = v22 + 1;
            v20 += 16;
            uint64_t v21 = v22;
          }
          while (&v22[1] != a2);
        }
      }
    }
    else
    {
      BOOL v14 = (char *)a5;
      unint64_t v16 = a4 >> 1;
      uint64_t v17 = &a1[a4 >> 1];
      unint64_t v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v29 = std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v17, a3, v18, a5, a7);
        uint64_t v30 = (__n128 *)&v14[16 * v16];
        std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v30, v29);
        unint64_t v31 = &v14[16 * a4];
        uint64_t v32 = v30;
        while (v32 != (__n128 *)v31)
        {
          unsigned __int32 v33 = v32->n128_u32[0];
          if (v32->n128_u32[0] < *(_DWORD *)v14)
          {
            unint64_t v34 = v32;
          }
          else
          {
            unsigned __int32 v33 = *(_DWORD *)v14;
            unint64_t v34 = (__n128 *)v14;
          }
          unint64_t v35 = v34->n128_u64[1];
          if (v32->n128_u32[0] < *(_DWORD *)v14) {
            ++v32;
          }
          else {
            v14 += 16;
          }
          v8->n128_u32[0] = v33;
          v8->n128_u64[1] = v35;
          ++v8;
          if (v14 == (char *)v30)
          {
            if (v32 != (__n128 *)v31)
            {
              uint64_t v36 = 0;
              do
              {
                unint64_t v37 = &v32[v36];
                unint64_t v38 = &v8[v36];
                v38->n128_u32[0] = v32[v36].n128_u32[0];
                v38->n128_u64[1] = v32[v36++].n128_u64[1];
              }
              while (&v37[1] != (__n128 *)v31);
            }
            return;
          }
        }
        if (v14 != (char *)v30)
        {
          unint64_t v39 = 0;
          do
          {
            BOOL v40 = &v8[v39 / 0x10];
            unint64_t v41 = (__n128 *)&v14[v39];
            v40->n128_u32[0] = *(_DWORD *)&v14[v39];
            v40->n128_u64[1] = *(void *)&v14[v39 + 8];
            v39 += 16;
          }
          while (&v41[1] != v30);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v17, a3, v18, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v14, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>((char *)v8, (char *)&v8[a4 >> 1], (char *)a2, a4 >> 1, a4 - (a4 >> 1), v14, a6);
      }
    }
  }
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    unint64_t v6 = a5;
    unsigned __int32 v9 = a1;
    if (a4 == 2)
    {
      unsigned __int32 v10 = a2 - 1;
      if (a2[-1].n128_u32[0] >= a1->n128_u32[0])
      {
        *a5 = *a1;
        uint64_t result = *v10;
      }
      else
      {
        *a5 = *v10;
        uint64_t result = *a1;
      }
      a5[1] = result;
    }
    else if (a4 == 1)
    {
      uint64_t result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      uint64_t v21 = &a1[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v21, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v22 = &v9[a4 >> 1];
      while (v22 != a2)
      {
        if (v22->n128_u32[0] >= v9->n128_u32[0])
        {
          __n128 v24 = *v9++;
          uint64_t result = v24;
        }
        else
        {
          __n128 v23 = *v22++;
          uint64_t result = v23;
        }
        *v6++ = result;
        if (v9 == v21)
        {
          if (v22 != a2)
          {
            uint64_t v25 = 0;
            do
            {
              uint64_t result = v22[v25];
              v6[v25++] = result;
            }
            while (&v22[v25] != a2);
          }
          return result;
        }
      }
      if (v9 != v21)
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t result = v9[v26];
          v6[v26++] = result;
        }
        while (&v9[v26] != v21);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *a1;
      *a5 = *a1;
      unint64_t v11 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        BOOL v14 = a5;
        do
        {
          uint64_t v15 = v11;
          unsigned __int32 v16 = v14->n128_u32[0];
          ++v14;
          if (v9[1].n128_u32[0] >= v16)
          {
            uint64_t result = *v11;
            *BOOL v14 = *v11;
          }
          else
          {
            uint64_t result = *v13;
            *BOOL v14 = *v13;
            uint64_t v17 = a5;
            if (v13 != a5)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = (__n128 *)((char *)a5 + v18);
                unsigned __int32 v19 = *(unsigned __int32 *)((char *)a5[-1].n128_u32 + v18);
                if (v15->n128_u32[0] >= v19) {
                  break;
                }
                v17->n128_u32[0] = v19;
                v17->n128_u64[1] = v17[-1].n128_u64[1];
                v18 -= 16;
                if (!v18)
                {
                  uint64_t v17 = a5;
                  break;
                }
              }
            }
            v17->n128_u32[0] = v15->n128_u32[0];
            v17->n128_u64[1] = v9[1].n128_u64[1];
          }
          unint64_t v11 = v15 + 1;
          v12 += 16;
          uint64_t v13 = v14;
          unsigned __int32 v9 = v15;
        }
        while (&v15[1] != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      unsigned int v11 = *(_DWORD *)a2;
      uint64_t v12 = -a4;
      while (1)
      {
        unsigned int v13 = *(_DWORD *)&result[v10];
        if (v11 < v13) {
          break;
        }
        v10 += 16;
        BOOL v51 = __CFADD__(v12++, 1);
        if (v51) {
          return result;
        }
      }
      BOOL v14 = &result[v10];
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          uint64_t v60 = (unsigned int *)&result[v10];
          *uint64_t v60 = v11;
          *(_DWORD *)a2 = v13;
          uint64_t v61 = *(void *)&result[v10 + 8];
          *((void *)v60 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v61;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v25 = -v12;
        }
        else {
          uint64_t v25 = 1 - v12;
        }
        uint64_t v24 = v25 >> 1;
        uint64_t v18 = &result[16 * (v25 >> 1) + v10];
        uint64_t v17 = a3;
        if (a3 != a2)
        {
          unint64_t v26 = (a3 - a2) >> 4;
          uint64_t v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            uint64_t v28 = &v17[16 * (v26 >> 1)];
            unsigned int v30 = *(_DWORD *)v28;
            __n128 v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 < *(_DWORD *)v18) {
              uint64_t v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = (v17 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v15 = a5;
        }
        else {
          uint64_t v15 = a5 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[16 * (v15 >> 1)];
        uint64_t v18 = a2;
        if (v14 != a2)
        {
          unint64_t v19 = (a2 - result - v10) >> 4;
          uint64_t v18 = &result[v10];
          do
          {
            unint64_t v20 = v19 >> 1;
            uint64_t v21 = (unsigned int *)&v18[16 * (v19 >> 1)];
            unsigned int v23 = *v21;
            unint64_t v22 = (char *)(v21 + 4);
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v17 < v23) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = (v18 - result - v10) >> 4;
      }
      unint64_t v31 = v17;
      if (v18 != a2)
      {
        unint64_t v31 = v18;
        if (a2 != v17)
        {
          int v32 = *(_DWORD *)v18;
          *(_DWORD *)uint64_t v18 = v11;
          *(_DWORD *)a2 = v32;
          uint64_t v33 = *((void *)v18 + 1);
          *((void *)v18 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v33;
          unint64_t v31 = v18 + 16;
          for (int i = a2 + 16; i != v17; i += 16)
          {
            if (v31 == a2) {
              a2 = i;
            }
            int v35 = *(_DWORD *)v31;
            *(_DWORD *)unint64_t v31 = *(_DWORD *)i;
            *(_DWORD *)int i = v35;
            uint64_t v36 = *((void *)v31 + 1);
            *((void *)v31 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v36;
            v31 += 16;
          }
          if (v31 == a2)
          {
            unint64_t v31 = a2;
          }
          else
          {
            unint64_t v37 = v31;
            unint64_t v38 = a2;
            do
            {
              while (1)
              {
                int v39 = *(_DWORD *)v37;
                *(_DWORD *)unint64_t v37 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v39;
                uint64_t v40 = *((void *)v37 + 1);
                *((void *)v37 + 1) = *((void *)a2 + 1);
                *((void *)a2 + 1) = v40;
                v37 += 16;
                a2 += 16;
                if (a2 == v17) {
                  break;
                }
                if (v37 == v38) {
                  unint64_t v38 = a2;
                }
              }
              a2 = v38;
            }
            while (v37 != v38);
          }
        }
      }
      a4 = -(v24 + v12);
      uint64_t v41 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v12)
      {
        uint64_t v44 = v17;
        uint64_t v45 = v14;
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v31, v44, a3, a4, a5 - v16, a6, a7);
        uint64_t result = v45;
        uint64_t v17 = v18;
        uint64_t v41 = v16;
        a4 = v24;
        a3 = v31;
      }
      else
      {
        unint64_t v42 = v18;
        uint64_t v43 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v14, v42, v31, v24, v16, a6, a7);
        a3 = v43;
        uint64_t result = v31;
      }
      a5 = v41;
      a2 = v17;
      if (!v41) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v54 = 0;
        do
        {
          *(_OWORD *)&a6[v54] = *(_OWORD *)&result[v54];
          v54 += 16;
        }
        while (&result[v54] != a2);
        if (v54)
        {
          uint64_t v55 = &a6[v54];
          uint64_t v56 = (uint64_t)&a6[v54 - 16];
          while (a2 != a3)
          {
            unsigned int v57 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              uint64_t v58 = a2;
            }
            else
            {
              unsigned int v57 = *(_DWORD *)a6;
              uint64_t v58 = a6;
            }
            uint64_t v59 = *((void *)v58 + 1);
            if (*(_DWORD *)a2 < *(_DWORD *)a6) {
              a2 += 16;
            }
            else {
              a6 += 16;
            }
            *(_DWORD *)uint64_t result = v57;
            *((void *)result + 1) = v59;
            result += 16;
            if (v55 == a6) {
              return result;
            }
          }
          uint64_t v64 = 0;
          do
          {
            unint64_t v65 = &result[v64];
            uint64_t v66 = &a6[v64];
            *(_DWORD *)unint64_t v65 = *(_DWORD *)&a6[v64];
            *((void *)v65 + 1) = *(void *)&a6[v64 + 8];
            v64 += 16;
          }
          while ((char *)v56 != v66);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v46 = 0;
      do
      {
        *(_OWORD *)&a6[v46] = *(_OWORD *)&a2[v46];
        v46 += 16;
      }
      while (&a2[v46] != a3);
      if (v46)
      {
        uint64_t v47 = &a6[v46];
        unint64_t v48 = a3 - 8;
        while (a2 != result)
        {
          unsigned int v49 = *((_DWORD *)a2 - 4);
          unsigned int v50 = *((_DWORD *)v47 - 4);
          BOOL v51 = v50 >= v49;
          if (v50 < v49)
          {
            uint64_t v52 = a2;
          }
          else
          {
            unsigned int v49 = *((_DWORD *)v47 - 4);
            uint64_t v52 = v47;
          }
          if (!v51) {
            a2 -= 16;
          }
          uint64_t v53 = *((void *)v52 - 1);
          if (v51) {
            v47 -= 16;
          }
          *((_DWORD *)v48 - 2) = v49;
          *(void *)unint64_t v48 = v53;
          v48 -= 16;
          if (v47 == a6) {
            return result;
          }
        }
        unint64_t v62 = 0;
        do
        {
          uint64_t v63 = &v48[v62];
          *((_DWORD *)v63 - 2) = *(_DWORD *)&v47[v62 - 16];
          *(void *)uint64_t v63 = *(void *)&v47[v62 - 8];
          v62 -= 16;
        }
        while (&v47[v62] != a6);
      }
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MDAttachments::Attachment,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 16 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v6);
  llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 8)), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)a1 - 8;
    uint64_t v6 = 16 * v4;
    do
    {
      uint64_t result = v5 + v6;
      uint64_t v7 = *(void *)(v5 + v6);
      if (v7) {
        uint64_t result = llvm::MetadataTracking::untrack(result, v7);
      }
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(unsigned __int8 **result, unsigned __int8 **a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = (unsigned __int8 **)(a3 + 8);
    uint64_t v5 = result + 1;
    do
    {
      *((_DWORD *)v4 - 2) = *((_DWORD *)v5 - 2);
      *uint64_t v4 = *v5;
      if (*v5)
      {
        uint64_t result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)v4);
        *uint64_t v5 = 0;
      }
      v4 += 2;
      uint64_t v6 = v5 + 1;
      v5 += 2;
    }
    while (v6 != a2);
  }
  return result;
}

_DWORD *llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::erase(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,0>(a3, (_DWORD *)(*a1 + 16 * *((unsigned int *)a1 + 2)), a2);
  uint64_t v6 = v5;
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 16 * *((unsigned int *)a1 + 2);
  if ((uint64_t *)v8 != v5)
  {
    unint64_t v9 = (uint64_t *)(v8 - 8);
    do
    {
      if (*v9) {
        llvm::MetadataTracking::untrack((uint64_t)v9, *v9);
      }
      uint64_t v10 = v9 - 1;
      v9 -= 2;
    }
    while (v10 != v6);
    uint64_t v7 = *a1;
  }
  *((_DWORD *)a1 + 2) = ((unint64_t)v6 - v7) >> 4;
  return a2;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = (unsigned __int8 **)(v4 + 2);
    int v7 = *v4;
    v4 += 4;
    uint64_t v8 = (uint64_t *)(a3 + 2);
    *a3 = v7;
    a3 += 4;
    llvm::TrackingMDRef::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>(a1, a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucketImpl<llvm::Value const*>((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = *a2;
    v5[3] = 0;
    v5[4] = 0;
    *uint64_t v5 = v6;
    v5[1] = v5 + 3;
    void v5[2] = 0x100000000;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 40 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 40 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucketImpl<llvm::Value const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        void *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, (void *)v13, &v26);
          uint64_t v14 = v26;
          uint64_t v15 = *(void *)v13;
          uint64_t v16 = v26 + 24;
          uint64_t v17 = v26;
          *(void *)(v26 + 8) = v26 + 24;
          uint64_t v18 = (uint64_t *)(v17 + 8);
          *(void *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = 0x100000000;
          unint64_t v19 = *(unsigned int *)(v13 + 16);
          if (v13 != v14 && v19 != 0)
          {
            uint64_t v21 = *(unsigned __int8 ***)(v13 + 8);
            if ((unsigned __int8 **)(v13 + 24) == v21)
            {
              if (v19 < 2)
              {
                uint64_t v23 = *(unsigned int *)(v13 + 16);
              }
              else
              {
                llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear((unint64_t)v18);
                llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow((uint64_t)v18, v19);
                uint64_t v21 = *(unsigned __int8 ***)(v13 + 8);
                uint64_t v23 = *(unsigned int *)(v13 + 16);
                uint64_t v16 = *v18;
              }
              llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(v21, &v21[2 * v23], v16);
              *(_DWORD *)(v14 + 16) = v19;
              llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear(v13 + 8);
            }
            else
            {
              *(void *)(v14 + 8) = v21;
              int v22 = *(_DWORD *)(v13 + 20);
              *(_DWORD *)(v14 + 16) = v19;
              *(_DWORD *)(v14 + 20) = v22;
              *(void *)(v13 + 8) = v13 + 24;
              *(void *)(v13 + 16) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector((char **)(v13 + 8));
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    uint64_t v25 = 40 * v24;
    do
    {
      void *result = -4096;
      result += 5;
      v25 -= 40;
    }
    while (v25);
  }
  return result;
}

unint64_t llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)result - 8;
    uint64_t v4 = 16 * v2;
    do
    {
      uint64_t result = v3 + v4;
      uint64_t v5 = *(void *)(v3 + v4);
      if (v5) {
        uint64_t result = llvm::MetadataTracking::untrack(result, v5);
      }
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void *llvm::DenseMap<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>,llvm::DenseMapInfo<llvm::DIAssignID *,void>,llvm::detail::DenseMapPair<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        void *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = (void *)(v4 + 24);
      uint64_t v13 = 32 * v3;
      do
      {
        uint64_t v14 = *(v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v20 = 0;
          uint64_t v15 = v20;
          *unint64_t v20 = *(v12 - 3);
          uint64_t v15[2] = 0x100000000;
          v15[1] = v15 + 3;
          uint64_t v16 = (uint64_t)(v15 + 1);
          if (*((_DWORD *)v12 - 2)) {
            llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v16, (uint64_t)(v12 - 2));
          }
          ++*(_DWORD *)(a1 + 8);
          uint64_t v17 = (void *)*(v12 - 2);
          if (v12 != v17) {
            free(v17);
          }
        }
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 32 * v18;
    do
    {
      void *result = -4096;
      result += 4;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 104);
    if (v2)
    {
      uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v4 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20));
      unint64_t v5 = *ValueName;
      return llvm::StringMapImpl::RemoveKey(v2, v4, v5);
    }
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 72);
    if (v2)
    {
      uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v4 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20));
      unint64_t v5 = *ValueName;
      return llvm::StringMapImpl::RemoveKey(v2, v4, v5);
    }
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  *((void *)this + 5) = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 56);
    if (v2)
    {
      uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      uint64_t v4 = (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20));
      unint64_t v5 = *ValueName;
      return llvm::StringMapImpl::RemoveKey(v2, v4, v5);
    }
  }
  return result;
}

void llvm::Module::Module(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  a1[1] = a1 + 1;
  a1[2] = a1 + 1;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = a1 + 5;
  a1[6] = a1 + 5;
  a1[7] = a1 + 7;
  a1[8] = a1 + 7;
  a1[9] = a1 + 9;
  a1[10] = a1 + 9;
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  operator new();
}

void llvm::Module::~Module(llvm::Module *this)
{
  llvm::SmallPtrSetImplBase::erase_imp(**(llvm::SmallPtrSetImplBase ***)this, this);
  uint64_t v2 = (char *)this + 24;
  for (uint64_t i = *((void *)this + 4); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v4 = (llvm::Function *)(i - 56);
    }
    else {
      uint64_t v4 = 0;
    }
    llvm::Function::dropAllReferences(v4);
  }
  unint64_t v5 = (char *)this + 8;
  for (uint64_t j = *((void *)this + 2); (char *)j != v5; uint64_t j = *(void *)(j + 8))
  {
    if (j) {
      uint64_t v7 = j - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    llvm::User::dropAllReferences(v7);
    llvm::Value::clearMetadata(v7);
  }
  unsigned int v8 = (char *)this + 40;
  for (uint64_t k = *((void *)this + 6); (char *)k != v8; uint64_t k = *(void *)(k + 8))
  {
    if (k) {
      uint64_t v10 = k - 48;
    }
    else {
      uint64_t v10 = 0;
    }
    llvm::User::dropAllReferences(v10);
  }
  uint64_t v11 = (char *)this + 56;
  for (uint64_t m = *((void *)this + 8); (char *)m != v11; uint64_t m = *(void *)(m + 8))
  {
    if (m) {
      uint64_t v13 = m - 56;
    }
    else {
      uint64_t v13 = 0;
    }
    llvm::User::dropAllReferences(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  if ((char *)v14 != v5)
  {
    do
      uint64_t v14 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase((uint64_t)this + 8, v14);
    while (v5 != (char *)v14);
  }
  uint64_t v15 = *((void *)this + 4);
  if ((char *)v15 != v2)
  {
    do
      uint64_t v15 = llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase((uint64_t)this + 24, v15);
    while (v2 != (char *)v15);
  }
  uint64_t v16 = *((void *)this + 6);
  if ((char *)v16 != v8)
  {
    do
      uint64_t v16 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase((uint64_t)this + 40, v16);
    while (v8 != (char *)v16);
  }
  uint64_t v17 = *((void *)this + 8);
  if ((char *)v17 != v11)
  {
    do
      uint64_t v17 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase((uint64_t)this + 56, v17);
    while (v11 != (char *)v17);
  }
  MEMORY[0x263E500A0](*((void *)this + 90), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 696);
  llvm::DataLayout::~DataLayout((llvm::Module *)((char *)this + 256));
  if (*((_DWORD *)this + 61))
  {
    uint64_t v18 = *((unsigned int *)this + 60);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *(void *)(*((void *)this + 29) + v19);
        if (v21 != -8 && v21 != 0) {
          MEMORY[0x263E500A0]();
        }
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  free(*((void **)this + 29));
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  uint64_t v23 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  if (*((_DWORD *)this + 33))
  {
    uint64_t v25 = *((unsigned int *)this + 32);
    if (v25)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 8 * v25;
      do
      {
        uint64_t v28 = *(void *)(*((void *)this + 15) + v26);
        if (v28 != -8 && v28 != 0)
        {
          unsigned int v30 = *(void **)(v28 + 32);
          if (v30 != *(void **)(v28 + 24)) {
            free(v30);
          }
          MEMORY[0x263E500A0](v28, 8);
        }
        v26 += 8;
      }
      while (v27 != v26);
    }
  }
  free(*((void **)this + 15));
  std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100]((uint64_t *)this + 14, 0);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  unint64_t v31 = (llvm::Module *)*((void *)this + 10);
  if (v31 != (llvm::Module *)((char *)this + 72))
  {
    do
    {
      uint64_t v32 = *(void *)v31;
      uint64_t v33 = (llvm::Module *)*((void *)v31 + 1);
      *(void *)uint64_t v33 = *(void *)v31;
      *(void *)(v32 + 8) = v33;
      *(void *)unint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      llvm::NamedMDNode::~NamedMDNode(v31);
      MEMORY[0x263E500B0]();
      unint64_t v31 = v33;
    }
    while (v33 != (llvm::Module *)((char *)this + 72));
  }
  uint64_t v34 = *((void *)this + 8);
  if ((char *)v34 != v11)
  {
    do
      uint64_t v34 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase((uint64_t)this + 56, v34);
    while (v11 != (char *)v34);
  }
  uint64_t v35 = *((void *)this + 6);
  if ((char *)v35 != v8)
  {
    do
      uint64_t v35 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase((uint64_t)this + 40, v35);
    while (v8 != (char *)v35);
  }
  uint64_t v36 = *((void *)this + 4);
  if ((char *)v36 != v2)
  {
    do
      uint64_t v36 = llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase((uint64_t)this + 24, v36);
    while (v2 != (char *)v36);
  }
  uint64_t v37 = *((void *)this + 2);
  if ((char *)v37 != v5)
  {
    do
      uint64_t v37 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase((uint64_t)this + 8, v37);
    while (v5 != (char *)v37);
  }
}

uint64_t llvm::ValueSymbolTable::lookup(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((v4 & 0x80000000) == 0 && a3 > v4)
  {
    unint64_t v4 = v4 <= 1 ? 1 : v4;
    if (a3 >= v4) {
      a3 = v4;
    }
  }
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)a1 + 8 * Key) + 8);
  }
}

uint64_t llvm::Module::getMDKindID(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = **a1;
  int v5 = *(_DWORD *)(v3 + 2492);
  return *(unsigned int *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v3 + 2480), a2, a3, &v5)+ 8);
}

llvm::PointerType **llvm::Module::getOrInsertFunction(uint64_t a1, uint64_t *a2, unint64_t a3, llvm::PointerType **a4, uint64_t a5)
{
  uint64_t v10 = llvm::ValueSymbolTable::lookup(*(void *)(a1 + 112), a2, a3);
  if (v10)
  {
    uint64_t v11 = (llvm::Constant *****)v10;
    uint64_t v12 = (llvm::Constant ****)llvm::PointerType::get(a4, (llvm::Type *)(*(_DWORD *)(*(void *)v10 + 8) >> 8));
    if (*v11 != v12) {
      getFoldedCast((llvm *)0x31, v11, v12, 0);
    }
  }
  else
  {
    uint64_t v13 = (llvm::Type *)*(unsigned int *)(a1 + 268);
    __int16 v17 = 261;
    v16[0] = a2;
    v16[1] = a3;
    uint64_t v14 = operator new(0x80uLL);
    v14[7] = v14[7] & 0x38000000 | 0x40000000;
    *(void *)uint64_t v14 = 0;
    llvm::Function::Function((uint64_t)(v14 + 2), (uint64_t)a4, 0, v13, (const llvm::Twine *)v16, 0);
    if ((*((unsigned char *)v14 + 41) & 0x20) == 0) {
      *((void *)v14 + 15) = a5;
    }
    llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(a1 + 24, (uint64_t *)(a1 + 24), (uint64_t)(v14 + 2));
  }
  return a4;
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const llvm::Twine *a2)
{
  v10[32] = *MEMORY[0x263EF8340];
  unsigned int v8 = v10;
  long long v9 = xmmword_261E8A780;
  uint64_t v3 = (uint64_t *)llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v8);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 29, v3, v4);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 60)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 29) + 8 * Key) + 8);
  }
  if (v8 != v10) {
    free(v8);
  }
  return v6;
}

unint64_t llvm::Module::getOrInsertNamedMetadata(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t result = (*llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 232), a2, a3))[1];
  if (!result) {
    operator new();
  }
  return result;
}

void llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  uint64_t v3 = (char *)this + 232;
  int v4 = *((char *)a2 + 39);
  if (v4 >= 0) {
    int v5 = (uint64_t *)((char *)a2 + 16);
  }
  else {
    int v5 = (uint64_t *)*((void *)a2 + 2);
  }
  if (v4 >= 0) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *((void *)a2 + 3);
  }
  llvm::StringMap<llvm::NamedMDNode *,llvm::MallocAllocator>::erase((uint64_t)v3, v5, v6);
  uint64_t v8 = *(void *)a2;
  uint64_t v7 = (void *)*((void *)a2 + 1);
  *uint64_t v7 = *(void *)a2;
  *(void *)(v8 + 8) = v7;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  llvm::NamedMDNode::~NamedMDNode(a2);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::StringMap<llvm::NamedMDNode *,llvm::MallocAllocator>::erase(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8)) {
    return 0;
  }
  unint64_t v6 = *(unint64_t **)(*(void *)a1 + 8 * Key);
  llvm::StringMapImpl::RemoveKey(a1, (uint64_t *)((char *)v6 + *(unsigned int *)(a1 + 20)), *v6);
  MEMORY[0x263E500A0](v6, 8);
  return 1;
}

uint64_t llvm::Module::isValidModFlagBehavior(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    if (*(unsigned char *)result == 1
      && (uint64_t v2 = *(void *)(result + 128), *(unsigned char *)(v2 + 16) == 16)
      && (__int16 LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v2 + 24), 0xFFFFFFFFFFFFFFFFLL),
          (unint64_t)LimitedValue - 9 >= 0xFFFFFFFFFFFFFFF8))
    {
      *a2 = LimitedValue;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::Module::isValidModuleFlag(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  uint64_t v8 = (void *)(a1 - 16);
  unint64_t v7 = *(void *)(a1 - 16);
  if ((v7 & 2) == 0)
  {
    if ((*(void *)(a1 - 16) & 0x3C0uLL) >= 0xC0)
    {
      long long v9 = &v8[-((v7 >> 2) & 0xF)];
      goto LABEL_6;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 - 24) < 3u) {
    return 0;
  }
  long long v9 = *(uint64_t **)(a1 - 32);
LABEL_6:
  uint64_t result = llvm::Module::isValidModFlagBehavior(*v9, a2);
  if (!result) {
    return result;
  }
  if ((*v8 & 2) != 0) {
    uint64_t v11 = *(void **)(a1 - 32);
  }
  else {
    uint64_t v11 = &v8[-((*v8 >> 2) & 0xFLL)];
  }
  uint64_t v12 = (unsigned char *)v11[1];
  if (!v12 || *v12) {
    return 0;
  }
  *a3 = v12;
  if ((*v8 & 2) != 0) {
    uint64_t v13 = *(void **)(a1 - 32);
  }
  else {
    uint64_t v13 = &v8[-((*v8 >> 2) & 0xFLL)];
  }
  *a4 = v13[2];
  return 1;
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *a1, uint64_t a2)
{
  v14[0] = "llvm.module.flags";
  __int16 v15 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)v14);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(unsigned int *)(*(void *)(result + 48) + 8);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *(void *)(**(void **)(v4 + 48) + v6);
        int v13 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t result = llvm::Module::isValidModuleFlag(v8, &v13, &v12, &v11);
        if (result)
        {
          LODWORD(v14[0]) = v13;
          v14[1] = v12;
          v14[2] = v11;
          uint64_t result = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a2, (unint64_t)v14, 1);
          uint64_t v9 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
          long long v10 = *(_OWORD *)result;
          *(void *)(v9 + 16) = *(void *)(result + 16);
          *(_OWORD *)uint64_t v9 = v10;
          ++*(_DWORD *)(a2 + 8);
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t llvm::Module::getModuleFlag(llvm::Module *a1, const void *a2, size_t a3)
{
  unsigned char v15[24] = *MEMORY[0x263EF8340];
  int v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v13);
  uint64_t v5 = v13;
  if (v14)
  {
    uint64_t v6 = (uint64_t *)((char *)v13 + 16);
    uint64_t v7 = 24 * v14;
    while (1)
    {
      uint64_t v8 = *(uint64_t **)(*(v6 - 1) + 8);
      uint64_t v10 = *v8;
      uint64_t v9 = v8 + 3;
      if (a3 == v10 && (!a3 || !memcmp(a2, v9, a3))) {
        break;
      }
      v6 += 3;
      v7 -= 24;
      if (!v7) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = *v6;
  }
  else
  {
LABEL_7:
    uint64_t v11 = 0;
  }
  if (v5 != v15) {
    free(v5);
  }
  return v11;
}

uint64_t llvm::Module::addModuleFlag(void **a1, llvm::Type *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1992), (llvm::Type *)a2);
  v16[0] = llvm::ValueAsMetadata::get(v9, v10);
  uint64_t v11 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**a1 + 312), a3, a4);
  if (v12) {
    *(void *)(v11 + 16) = v11;
  }
  v16[1] = v11 + 8;
  uint64_t v16[2] = a5;
  unint64_t inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, (uint64_t *)"llvm.module.flags", 0x11uLL);
  uint64_t Impl = llvm::MDTuple::getImpl(*a1, (llvm::hashing::detail::hash_state *)v16, 3uLL, 0, 1);
  return llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(void *)(inserted + 48), (uint64_t *)&Impl);
}

uint64_t llvm::Module::addModuleFlag(void **a1, llvm::Type *a2, uint64_t *a3, unint64_t a4, llvm::Type *a5)
{
  uint64_t v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1992), (llvm::Type *)a5);
  uint64_t v11 = llvm::ValueAsMetadata::get(v9, v10);
  return llvm::Module::addModuleFlag(a1, a2, a3, a4, v11);
}

uint64_t llvm::Module::materializeAll@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 152);
  if (v2)
  {
    *(void *)(this + 152) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void llvm::Module::getUniqueIntrinsicName(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = a1 + 720;
  LODWORD(v29) = a4;
  uint64_t v30 = a5;
  LODWORD(v31) = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>((uint64_t)&v24, a1 + 720, (uint64_t)&v29, &v31);
  if (v24.__r_.__value_.__s.__data_[16])
  {
    int v23 = 0;
    int v22 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(a1 + 696), a2, a3, &v23);
    unsigned int v13 = *(_DWORD *)(*v22 + 8);
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    while (1)
    {
      uint64_t v25 = a2;
      unint64_t v26 = a3;
      uint64_t v27 = ".";
      __int16 v28 = 773;
      __n128 v29 = (uint64_t *)&v25;
      uint64_t v31 = v13;
      __int16 v32 = 2050;
      llvm::Twine::str((llvm::Twine *)&v29, &v24);
      if (*(char *)(a6 + 23) < 0) {
        operator delete(*(void **)a6);
      }
      *(std::string *)a6 = v24;
      int v14 = *(char *)(a6 + 23);
      __int16 v15 = v14 >= 0 ? (uint64_t *)a6 : *(uint64_t **)a6;
      unint64_t v16 = v14 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(void *)(a6 + 8);
      uint64_t v17 = llvm::ValueSymbolTable::lookup(*(void *)(a1 + 112), v15, v16);
      if (!v17) {
        break;
      }
      if (*(unsigned char *)(*(void *)(v17 + 24) + 8) == 14) {
        unint64_t v18 = *(void *)(v17 + 24);
      }
      else {
        unint64_t v18 = 0;
      }
      LODWORD(v25) = a4;
      unint64_t v26 = v18;
      LODWORD(v27) = v13;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>((uint64_t)&v29, v12, (uint64_t)&v25, &v27);
      if (v18 == a5)
      {
        *((_DWORD *)v29 + 4) = v13;
        goto LABEL_22;
      }
      ++v13;
    }
    LODWORD(v29) = a4;
    uint64_t v30 = a5;
    uint64_t v25 = 0;
    char v20 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(void *)(a1 + 720), *(_DWORD *)(a1 + 736), a4, a5, &v25);
    uint64_t v21 = (uint64_t)v25;
    if ((v20 & 1) == 0)
    {
      uint64_t v21 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(v12, (uint64_t)&v29, (uint64_t)v25);
      *(_DWORD *)uint64_t v21 = a4;
      *(void *)(v21 + 8) = a5;
      *(_DWORD *)(v21 + 16) = 0;
    }
    *(_DWORD *)(v21 + 16) = v13;
LABEL_22:
    *(_DWORD *)(*v22 + 8) = v13 + 1;
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(v24.__r_.__value_.__r.__words[0] + 16);
    uint64_t v25 = a2;
    unint64_t v26 = a3;
    uint64_t v27 = ".";
    __int16 v28 = 773;
    __n128 v29 = (uint64_t *)&v25;
    uint64_t v31 = v19;
    __int16 v32 = 2050;
    llvm::Twine::str((llvm::Twine *)&v29, (std::string *)a6);
  }
}

char *llvm::Module::getOrInsertComdat(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = v11;
  uint64_t v8 = v11;
  uint64_t v9 = 2;
  int v10 = 0;
  uint64_t v3 = *llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>((llvm::StringMapImpl *)(a1 + 120), a2, a3, &v5);
  if (v8 != v7) {
    free(v8);
  }
  uint64_t result = v3 + 8;
  *((void *)v3 + 1) = v3;
  return result;
}

uint64_t llvm::Module::getSemanticInterposition(llvm::Module *this)
{
  uint64_t result = llvm::Module::getModuleFlag(this, "SemanticInterposition", 0x15uLL);
  if (result)
  {
    uint64_t v2 = *(void *)(result + 128);
    uint64_t v3 = (void *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u) {
      uint64_t v3 = (void *)*v3;
    }
    return *v3 != 0;
  }
  return result;
}

unint64_t getSDKVersionMD(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)a1 != 1) {
    return 0;
  }
  unint64_t v1 = *(llvm::ConstantDataSequential **)(a1 + 128);
  if (!v1 || *((unsigned char *)v1 + 16) != 14 || !*(_DWORD *)(*(void *)v1 + 32)) {
    return 0;
  }
  uint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(*(llvm::ConstantDataSequential **)(a1 + 128), 0);
  if (*(_DWORD *)(*(void *)v1 + 32) >= 2u)
  {
    uint64_t v3 = ElementAsInteger | (llvm::ConstantDataSequential::getElementAsInteger(v1, 1u) << 32);
    if (*(_DWORD *)(*(void *)v1 + 32) >= 3u) {
      llvm::ConstantDataSequential::getElementAsInteger(v1, 2u);
    }
    return v3 | 0x8000000000000000;
  }
  return ElementAsInteger;
}

uint64_t llvm::Module::setPtrAuthABIVersion(void **a1, unint64_t a2)
{
  _OWORD v12[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(**a1 + 1992, (int)a2);
  uint64_t v7 = llvm::ValueAsMetadata::get(v5, v6);
  uint64_t v8 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v4 + 1920, HIDWORD(a2) & 1);
  v12[0] = v7;
  v12[1] = llvm::ValueAsMetadata::get(v8, v9);
  v12[0] = llvm::MDTuple::getImpl(v4, (llvm::hashing::detail::hash_state *)v12, 2uLL, 0, 1);
  uint64_t Impl = llvm::MDTuple::getImpl(v4, (llvm::hashing::detail::hash_state *)v12, 1uLL, 0, 1);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)6, (uint64_t *)"ptrauth.abi-version", 0x13uLL, (uint64_t)Impl);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(void *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, *(void *)(a3 + 8), &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(a2, a3, v12);
    uint64_t v9 = result;
    *(_DWORD *)uint64_t result = *(_DWORD *)a3;
    *(void *)(result + 8) = *(void *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    char v10 = (int *)(a1 + 24 * v9);
    int v11 = *v10;
    uint64_t v12 = *((void *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -1 || v12 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -2) {
          unint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        char v10 = (int *)(a1 + 24 * (v20 & v8));
        int v11 = *v10;
        uint64_t v12 = *((void *)v10 + 1);
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        char v10 = v16;
      }
    }
  }
  else
  {
    char v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(a1, v6);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(void *)(a2 + 8), &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a3 != -1 || *(void *)(a3 + 8) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261EA71B0;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4 + 8;
      do
      {
        int v14 = *(_DWORD *)(v13 - 8);
        uint64_t v15 = *(void *)v13;
        if ((v14 != -1 || v15 != -4096) && (v14 != -2 || v15 != -8192))
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v19);
          unint64_t v16 = v19;
          _DWORD *v19 = *(_DWORD *)(v13 - 8);
          *((void *)v16 + 1) = *(void *)v13;
          void v16[4] = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 24 * v17;
    do
    {
      _OWORD *result = xmmword_261EA71B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

char **llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (char **)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == (char *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (char *)-8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  char *i = llvm::StringMapEntry<llvm::Comdat>::create<llvm::MallocAllocator,llvm::Comdat>(a2, a3, (uint64_t)a1, a4);
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (char **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 8 == 0;
  return i;
}

char *llvm::StringMapEntry<llvm::Comdat>::create<llvm::MallocAllocator,llvm::Comdat>(const void *a1, size_t a2, uint64_t a3, uint64_t *a4)
{
  int v7 = (char *)operator new(a2 + 73, (std::align_val_t)8uLL);
  uint64_t v8 = v7;
  unsigned int v9 = v7 + 72;
  if (a2) {
    memcpy(v7 + 72, a1, a2);
  }
  v9[a2] = 0;
  uint64_t v10 = *a4;
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = v10;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a4 + 2);
  *((void *)v8 + 3) = v8 + 56;
  *((void *)v8 + 4) = v8 + 56;
  *((void *)v8 + 5) = 2;
  *((_DWORD *)v8 + 12) = 0;
  return v8;
}

uint64_t _GLOBAL__sub_I_ModuleSummaryIndex_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41CEF8, 0, 0);
  byte_26B41CF78 = 0;
  qword_26B41CF80 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41CF88 = 0;
  qword_26B41CEF8 = (uint64_t)&unk_270DBC910;
  qword_26B41CF90 = (uint64_t)&unk_270DBC658;
  qword_26B41CF98 = (uint64_t)&unk_270DBC998;
  qword_26B41CFB0 = (uint64_t)&qword_26B41CF98;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"propagate-attrs", 0xFuLL);
  byte_26B41CF78 = 1;
  word_26B41CF88 = 257;
  word_26B41CF02 = word_26B41CF02 & 0xFF9F | 0x20;
  qword_26B41CF18 = (uint64_t)"Propagate attributes in index";
  unk_26B41CF20 = 29;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41CEF8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41CEF8, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41CFB8, 0, 0);
  byte_26B41D038 = 0;
  qword_26B41D040 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41D048 = 0;
  qword_26B41CFB8 = (uint64_t)&unk_270DBC910;
  qword_26B41D050 = (uint64_t)&unk_270DBC658;
  qword_26B41D058 = (uint64_t)&unk_270DBC998;
  qword_26B41D070 = (uint64_t)&qword_26B41D058;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41CFB8, (uint64_t *)"import-constants-with-refs", 0x1AuLL);
  byte_26B41D038 = 1;
  word_26B41D048 = 257;
  word_26B41CFC2 = word_26B41CFC2 & 0xFF9F | 0x20;
  qword_26B41CFD8 = (uint64_t)"Import constant global variables with references";
  unk_26B41CFE0 = 48;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41CFB8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41CFB8, &dword_261C2B000);
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(v2, 0, sizeof(v2));
  llvm::FunctionSummary::FunctionSummary((uint64_t)&_MergedGlobals_38, 193, 0, 0, 0, &v19, (uint64_t)&v16, &v13, &v10, &__p, v6, v5, v4, v3, v2);
  uint64_t v21 = (void **)v2;
  std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](&v21);
  uint64_t v21 = (void **)v3;
  std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](&v21);
  uint64_t v21 = (void **)v4;
  std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](&v21);
  uint64_t v21 = (void **)v5;
  std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v21);
  uint64_t v21 = v6;
  std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v21);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v13)
  {
    int v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if ((void)v19)
  {
    *((void *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
  return __cxa_atexit((void (*)(void *))llvm::FunctionSummary::~FunctionSummary, &_MergedGlobals_38, &dword_261C2B000);
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5)
{
  v18[6] = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    uint64_t v12 = *(void *)(a1 - 8);
    uint64_t v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v11 = v10 & 0x7FFFFFF;
    uint64_t v12 = a1 - 32 * v11;
  }
  unint64_t v16 = v18;
  *(void *)uint64_t v17 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v16, (char *)(v12 + 32), (char *)(v12 + 32 * v11));
  uint64_t v13 = 24;
  if (*(unsigned char *)(a1 + 16) == 62) {
    uint64_t v13 = 64;
  }
  uint64_t v14 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a1 + v13), (llvm::Constant **)v16, v17[0], a2, a3, a4, a5);
  if (v16 != v18) {
    free(v16);
  }
  return v14;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::Constant **a2, uint64_t a3, llvm::DataLayout *this, uint64_t a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  char v51 = 0;
  v50[0] = a5;
  v50[1] = &v51;
  uint64_t v52 = a2;
  uint64_t v53 = a1 | 4;
  if (!a3) {
    return 1;
  }
  uint64_t v9 = &a2[a3];
  while (1)
  {
    int v10 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
    if ((v53 & 4) != 0 && v10)
    {
      uint64_t v11 = v53 & 4;
      unint64_t v12 = v53 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(*a2);
      uint64_t v14 = *(_DWORD *)(UniqueInteger + 8) >= 0x41u ? *(unsigned int **)UniqueInteger : (unsigned int *)UniqueInteger;
      unint64_t v12 = *(void *)(*((void *)v10 + 2) + 8 * *v14);
      a2 = v52;
      uint64_t v11 = v53 & 4;
      int v10 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
    }
    int v15 = *(unsigned __int8 *)(v12 + 8);
    unint64_t v16 = *a2;
    uint64_t v17 = v11 ? 0 : v10;
    if (!v16 || *((unsigned char *)v16 + 16) != 16) {
      break;
    }
    uint64_t v21 = (void *)((char *)v16 + 24);
    unsigned int v22 = *((_DWORD *)v16 + 8);
    if (v22 > 0x40) {
      BOOL v23 = llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)v16 + 24)) == v22;
    }
    else {
      BOOL v23 = *v21 == 0;
    }
    int v24 = v23;
    if (v24) {
      int v20 = 4;
    }
    else {
      int v20 = 1;
    }
    if ((v24 & 1) != 0 || v15 == 19) {
      goto LABEL_58;
    }
    if (v17)
    {
      if (v22 >= 0x41) {
        uint64_t v21 = (void *)*v21;
      }
      uint64_t v25 = *(unsigned int *)v21;
      uint64_t StructLayout = llvm::DataLayout::getStructLayout(this, v17);
      llvm::APInt::APInt((llvm::APInt *)&v48, *(_DWORD *)(a5 + 8), *((void *)StructLayout + v25 + 2));
      char v27 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v48, 1);
      if (v49 >= 0x41)
      {
        __int16 v28 = v48;
        if (v48) {
          goto LABEL_73;
        }
      }
    }
    else
    {
      unsigned int v47 = v22;
      if (v22 > 0x40) {
        operator new[]();
      }
      uint64_t v46 = (void *)*v21;
      if (!v10 || !v11)
      {
        uint64_t v35 = llvm::Constant::getUniqueInteger(*v52);
        if (*(_DWORD *)(v35 + 8) >= 0x41u) {
          uint64_t v36 = *(unsigned int **)v35;
        }
        else {
          uint64_t v36 = (unsigned int *)v35;
        }
        int v10 = *(llvm::Type **)(*((void *)v10 + 2) + 8 * *v36);
      }
      TypeAllocint Size = llvm::DataLayout::getTypeAllocSize(this, v10);
      if ((_BYTE)v37) {
      char v27 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v46, TypeAllocSize);
      }
      if (v47 >= 0x41)
      {
        __int16 v28 = v46;
        if (v46) {
LABEL_73:
        }
          MEMORY[0x263E50080](v28, 0x1000C8000313F17);
      }
    }
    if ((v27 & 1) == 0) {
      return 0;
    }
LABEL_75:
    llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(&v52);
    a2 = v52;
    if (v52 == v9) {
      return 1;
    }
  }
  if (a6)
  {
    if (!v17 && v15 != 19)
    {
      int v20 = 1;
      unsigned int v45 = 1;
      uint64_t __src = 0;
      if (a6(a7))
      {
        char v51 = 1;
        unsigned int v43 = v45;
        if (v45 > 0x40) {
          operator new[]();
        }
        unint64_t v42 = __src;
        __n128 v29 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v53 & 4) == 0 || !v29)
        {
          uint64_t v30 = llvm::Constant::getUniqueInteger(*v52);
          if (*(_DWORD *)(v30 + 8) >= 0x41u) {
            uint64_t v31 = *(unsigned int **)v30;
          }
          else {
            uint64_t v31 = (unsigned int *)v30;
          }
          __n128 v29 = *(llvm::Type **)(*((void *)v29 + 2) + 8 * *v31);
        }
        unint64_t v33 = llvm::DataLayout::getTypeAllocSize(this, v29);
        if ((_BYTE)v32) {
        int v34 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v42, v33);
        }
        if (v43 >= 0x41 && v42) {
          MEMORY[0x263E50080](v42, 0x1000C8000313F17);
        }
        int v20 = v34 ^ 1;
      }
      if (v45 >= 0x41)
      {
        if (__src) {
          MEMORY[0x263E50080](__src, 0x1000C8000313F17);
        }
      }
LABEL_58:
      if ((v20 | 4) != 4) {
        return 0;
      }
      goto LABEL_75;
    }
  }
  return 0;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()(uint64_t a1, llvm::APInt *this, uint64_t a3)
{
  llvm::APInt::sextOrTrunc(this, *(_DWORD *)(*(void *)a1 + 8), (llvm::APInt *)&v15);
  if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
    MEMORY[0x263E50080](*(void *)this, 0x1000C8000313F17);
  }
  *(void *)this = v15;
  *((_DWORD *)this + 2) = v16;
  llvm::APInt::APInt((llvm::APInt *)&v15, *(_DWORD *)(*(void *)a1 + 8), a3);
  if (!**(unsigned char **)(a1 + 8))
  {
    llvm::APInt::operator*((uint64_t)this, &v15, (llvm::APInt *)&v13);
    llvm::APInt::operator+=(*(void *)a1, &v13);
    if (v14 >= 0x41 && v13) {
      MEMORY[0x263E50080](v13, 0x1000C8000313F17);
    }
    goto LABEL_20;
  }
  BOOL v12 = 0;
  llvm::APInt::smul_ov(this, (const llvm::APInt *)&v15, &v12, (llvm::APInt *)&v13);
  if (!v12)
  {
    llvm::APInt::sadd_ov(*(llvm::APInt **)a1, (const llvm::APInt *)&v13, &v12, (uint64_t)&v10);
    uint64_t v6 = *(void *)a1;
    if (*(_DWORD *)(v6 + 8) >= 0x41u && *(void *)v6) {
      MEMORY[0x263E50080](*(void *)v6, 0x1000C8000313F17);
    }
    *(void *)uint64_t v6 = v10;
    *(_DWORD *)(v6 + 8) = v11;
    BOOL v7 = v12;
    if (v14 >= 0x41 && v13) {
      MEMORY[0x263E50080](v13, 0x1000C8000313F17);
    }
    if (v7) {
      goto LABEL_19;
    }
LABEL_20:
    uint64_t v8 = 1;
    goto LABEL_21;
  }
  if (v14 >= 0x41 && v13) {
    MEMORY[0x263E50080](v13, 0x1000C8000313F17);
  }
LABEL_19:
  uint64_t v8 = 0;
LABEL_21:
  if (v16 >= 0x41 && v15) {
    MEMORY[0x263E50080](v15, 0x1000C8000313F17);
  }
  return v8;
}

llvm::raw_ostream *llvm::FastMathFlags::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  int v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == -1)
  {
    unint64_t v5 = " fast";
    size_t v6 = 5;
LABEL_36:
    return llvm::raw_ostream::operator<<(a2, v5, v6);
  }
  uint64_t v4 = this;
  if (v3)
  {
    BOOL v7 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v7 > 7uLL)
    {
      *BOOL v7 = 0x636F737361657220;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " reassoc", 8uLL);
    }
    int v3 = *(_DWORD *)v4;
    if ((*(_DWORD *)v4 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t v8 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v8) > 4)
  {
    *(unsigned char *)(v8 + 4) = 110;
    *(_DWORD *)uint64_t v8 = 1634627104;
    *((void *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " nnan", 5uLL);
  }
  int v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v9) > 4)
  {
    *(unsigned char *)(v9 + 4) = 102;
    *(_DWORD *)uint64_t v9 = 1852403232;
    *((void *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " ninf", 5uLL);
  }
  int v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 8) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v10 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v10 > 3uLL)
  {
    *uint64_t v10 = 2054385184;
    *((void *)a2 + 4) += 4;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " nsz", 4uLL);
  }
  int v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_27:
  uint64_t v11 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v11) > 4)
  {
    *(unsigned char *)(v11 + 4) = 112;
    *(_DWORD *)uint64_t v11 = 1668440352;
    *((void *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " arcp", 5uLL);
  }
  int v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_31:
  uint64_t v12 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v12) > 8)
  {
    *(unsigned char *)(v12 + 8) = 116;
    *(void *)uint64_t v12 = *(void *)" contract";
    *((void *)a2 + 4) += 9;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " contract", 9uLL);
  }
  if ((*(_DWORD *)v4 & 0x40) != 0)
  {
LABEL_35:
    unint64_t v5 = " afn";
    size_t v6 = 4;
    goto LABEL_36;
  }
  return this;
}

BOOL llvm::OptBisect::shouldRunPass(llvm *a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *((int *)a1 + 3);
  unint64_t v11 = v10 + 1;
  *((_DWORD *)a1 + 3) = v10 + 1;
  BOOL v13 = v9 == -1 || (int)v10 < v9;
  if (v13) {
    size_t v14 = 0;
  }
  else {
    size_t v14 = 4;
  }
  uint64_t v15 = (llvm::raw_ostream *)llvm::errs(a1);
  unsigned int v16 = (void *)*((void *)v15 + 4);
  if (*((void *)v15 + 3) - (void)v16 > 7uLL)
  {
    void *v16 = 0x203A544345534942;
    *((void *)v15 + 4) += 8;
  }
  else
  {
    uint64_t v15 = llvm::raw_ostream::write(v15, "BISECT: ", 8uLL);
  }
  if (v13) {
    uint64_t v17 = "";
  }
  else {
    uint64_t v17 = "NOT ";
  }
  uint64_t v18 = llvm::raw_ostream::operator<<(v15, v17, v14);
  long long v19 = v18;
  int v20 = (void *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v20 > 0xCuLL)
  {
    qmemcpy(v20, "running pass ", 13);
    uint64_t v21 = (unsigned char *)(*((void *)v18 + 4) + 13);
    *((void *)v18 + 4) = v21;
  }
  else
  {
    llvm::raw_ostream::write(v18, "running pass ", 0xDuLL);
    uint64_t v21 = (unsigned char *)*((void *)v19 + 4);
  }
  if (*((unsigned char **)v19 + 3) == v21)
  {
    llvm::raw_ostream::write(v19, "(", 1uLL);
  }
  else
  {
    *uint64_t v21 = 40;
    ++*((void *)v19 + 4);
  }
  llvm::write_integer(v19, v11, 0, 0);
  unsigned int v22 = (_WORD *)*((void *)v19 + 4);
  if (*((void *)v19 + 3) - (void)v22 > 1uLL)
  {
    *unsigned int v22 = 8233;
    *((void *)v19 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v19, ") ", 2uLL);
  }
  BOOL v23 = llvm::raw_ostream::operator<<(v19, a2, a3);
  int v24 = (_DWORD *)*((void *)v23 + 4);
  if (*((void *)v23 + 3) - (void)v24 > 3uLL)
  {
    _DWORD *v24 = 544108320;
    *((void *)v23 + 4) += 4;
  }
  else
  {
    BOOL v23 = llvm::raw_ostream::write(v23, " on ", 4uLL);
  }
  uint64_t v25 = llvm::raw_ostream::operator<<(v23, a4, a5);
  unint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, "\n", 1uLL);
  }
  else
  {
    unsigned char *v26 = 10;
    ++*((void *)v25 + 4);
  }
  return v13;
}

void getOptBisector(void)
{
  {
    __cxa_atexit((void (*)(void *))llvm::OptBisect::~OptBisect, &getOptBisector(void)::OptBisector, &dword_261C2B000);
  }
}

void llvm::OptBisect::~OptBisect(llvm::OptBisect *this)
{
}

BOOL llvm::OptBisect::isEnabled(llvm::OptBisect *this)
{
  return *((_DWORD *)this + 2) != 0x7FFFFFFF;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::~__func()
{
}

void *std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC3248;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC3248;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  getOptBisector();
  dword_26BD24040 = v2;
  *(_DWORD *)algn_26BD24044 = 0;
}

void *std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(void *a1)
{
  *a1 = &unk_270DC3290;
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(void *a1)
{
  *a1 = &unk_270DC3290;
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x263E500B0);
}

void *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_270DC3290;
  std::__function::__value_func<void ()(int)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC3290;
  return std::__function::__value_func<void ()(int)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v5 = *a2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return _GLOBAL__sub_I_OptBisect_cpp(v4);
}

uint64_t _GLOBAL__sub_I_OptBisect_cpp()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v5[0] = &unk_270DC3248;
  void v5[3] = v5;
  std::__function::__value_func<void ()(int)>::__value_func[abi:nn180100]((uint64_t)v6, (uint64_t)v5);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&OptBisectLimit, 0, 0);
  dword_26B41DBF0 = 0;
  qword_26B41DBF8 = (uint64_t)&unk_270DBCA20;
  *(void *)&dword_26B41DC00 = 0;
  OptBisectLimit = (uint64_t)&unk_270DBC840;
  qword_26B41DC08 = (uint64_t)&unk_270DBC6B8;
  qword_26B41DC10[0] = (uint64_t)&unk_270DBFE60;
  qword_26B41DC28 = (uint64_t)qword_26B41DC10;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"opt-bisect-limit", 0x10uLL);
  dword_26B41DBF0 = 0x7FFFFFFF;
  byte_26B41DC04 = 1;
  dword_26B41DC00 = 0x7FFFFFFF;
  word_26B41DB7A = word_26B41DB7A & 0xFF98 | 0x20;
  std::__function::__value_func<void ()(int)>::__value_func[abi:nn180100]((uint64_t)v7, (uint64_t)v6);
  uint64_t v10 = 0;
  uint64_t v1 = v8;
  if (v8)
  {
    uint64_t v2 = operator new(0x28uLL);
    uint64_t v3 = v2;
    *uint64_t v2 = &unk_270DC3290;
    if (v1 == v7)
    {
      v2[4] = v2 + 1;
      (*(void (**)(void *))(v7[0] + 24))(v7);
    }
    else
    {
      v2[4] = v1;
      uint64_t v8 = 0;
    }
    uint64_t v10 = v3;
  }
  std::function<void ()(int const&)>::operator=(qword_26B41DC10, (uint64_t)v9);
  std::__function::__value_func<void ()(int const&)>::~__value_func[abi:nn180100](v9);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](v7);
  qword_26B41DB90 = (uint64_t)"Maximum optimization to perform";
  unk_26B41DB98 = 31;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&OptBisectLimit);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](v6);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:nn180100](v5);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &OptBisectLimit, &dword_261C2B000);
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC32D8;
  return result;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC32D8;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::operator()()
{
  _MergedGlobals_39 = 1;
}

uint64_t _GLOBAL__sub_I_PassTimingInfo_cpp()
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41D0B8, 0, 0);
  qword_26B41D138 = 0;
  byte_26B41D149 = 0;
  qword_26B41D140 = (uint64_t)&unk_270DBC978;
  qword_26B41D0B8 = (uint64_t)&unk_270DBD0D8;
  qword_26B41D150 = (uint64_t)&unk_270DBC658;
  qword_26B41D158 = (uint64_t)&unk_270DBD140;
  qword_26B41D170 = (uint64_t)&qword_26B41D158;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"time-passes", 0xBuLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_26B41D138, (uint64_t)&qword_26B41D0B8, _MergedGlobals_39);
  word_26B41D0C2 = word_26B41D0C2 & 0xFF9F | 0x20;
  qword_26B41D0D8 = (uint64_t)"Time each pass, printing elapsed time for each on exit";
  unk_26B41D0E0 = 54;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D0B8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_26B41D0B8, &dword_261C2B000);
  v4[0] = &unk_270DC32D8;
  void v4[3] = v4;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:nn180100]((uint64_t)v3, (uint64_t)v4);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100](v4);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B41D178, 0, 0);
  byte_26B41D209 = 0;
  qword_26B41D1F8 = 0;
  unk_26B41D200 = &unk_270DBC978;
  qword_26B41D178 = (uint64_t)&unk_270DBD0D8;
  qword_26B41D210 = (uint64_t)&unk_270DBC658;
  qword_26B41D218[0] = (uint64_t)&unk_270DBD140;
  qword_26B41D230 = (uint64_t)qword_26B41D218;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"time-passes-per-run", 0x13uLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_26B41D1F8, (uint64_t)&qword_26B41D178, byte_26B41D079);
  word_26B41D182 = word_26B41D182 & 0xFF9F | 0x20;
  qword_26B41D198 = (uint64_t)"Time each pass run, printing elapsed time for each run on exit";
  unk_26B41D1A0 = 62;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:nn180100]((uint64_t)v4, (uint64_t)v3);
  std::function<void ()(BOOL const&)>::operator=(qword_26B41D218, (uint64_t)v4);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100](v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D178);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100](v3);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_26B41D178, &dword_261C2B000);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  *(void *)a1 = &unk_270DC3320;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 216));
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)(a1 + 152);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v3 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
}

void llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC3388;
  std::__function::__value_func<void ()(llvm::ChangePrinter const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC33F0;
  uint64_t v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_270DC3388;
  std::__function::__value_func<void ()(llvm::ChangePrinter const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC33F0;
  uint64_t v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v29 = 0;
  uint64_t v12 = a1 + 128;
  if (*(unsigned char *)(a1 + 176))
  {
    *(void *)(a1 + 192) = *(void *)(a1 + 184);
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)(a1 + 128));
    *(unsigned char *)(a1 + 176) = 0;
  }
  uint64_t v13 = llvm::cl::parser<std::string>::parse((int)a1 + 208, a1, a3, a4, __src, __len, (uint64_t)__p);
  if ((v13 & 1) == 0)
  {
    llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(v12, (uint64_t)__p);
    unint64_t v14 = *(void *)(a1 + 200);
    *(_WORD *)(a1 + 12) = a2;
    uint64_t v15 = *(char **)(a1 + 192);
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = *(char **)(a1 + 184);
      uint64_t v18 = (v15 - v17) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        goto LABEL_26;
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unsigned int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(a1 + 200, v21);
        uint64_t v17 = *(char **)(a1 + 184);
        uint64_t v15 = *(char **)(a1 + 192);
      }
      else
      {
        unsigned int v22 = 0;
      }
      BOOL v23 = &v22[4 * v18];
      int v24 = &v22[4 * v21];
      *(_DWORD *)BOOL v23 = a2;
      unsigned int v16 = v23 + 4;
      while (v15 != v17)
      {
        int v25 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v25;
        v23 -= 4;
      }
      *(void *)(a1 + 184) = v23;
      *(void *)(a1 + 192) = v16;
      *(void *)(a1 + 200) = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v15 = a2;
      unsigned int v16 = v15 + 4;
    }
    *(void *)(a1 + 192) = v16;
    uint64_t v26 = *(void *)(a1 + 240);
    if (v26)
    {
      (*(void (**)(uint64_t, void **))(*(void *)v26 + 48))(v26, __p);
      goto LABEL_22;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
    abort();
  }
LABEL_22:
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  *(void *)a1 = &unk_270DC3320;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 216));
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 152);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v4);
  uint64_t v4 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
  return MEMORY[0x263E500B0]();
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 208, a1);
}

llvm::raw_ostream *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 208), a1, a2);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::setDefault(uint64_t *a1)
{
  a1[24] = a1[23];
  uint64_t v2 = (uint64_t)(a1 + 16);
  std::vector<std::string>::__clear[abi:nn180100](a1 + 16);
  uint64_t v4 = a1[19];
  uint64_t v3 = a1[20];
  while (v4 != v3)
  {
    llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(v2, v4 + 8);
    v4 += 40;
  }
}

std::string *llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)a1, (long long *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = (std::string *)(v3 + 24);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void *llvm::cl::parser<llvm::ChangePrinter>::~parser(void *a1)
{
  *a1 = &unk_270DC33F0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    void v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    long long v4 = &unk_270DC3440;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void *std::__function::__value_func<void ()(llvm::ChangePrinter const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::cl::parser<llvm::ChangePrinter>::~parser(void *a1)
{
  *a1 = &unk_270DC33F0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::ChangePrinter>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC3480;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC3480;
}

void std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC34C8;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC34C8;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B41D5E8, &unk_26B41D5F8, a1, 48, &v9);
  uint64_t v2 = (_OWORD *)qword_26B41D5E8;
  if (qword_26B41D5F0)
  {
    uint64_t v3 = qword_26B41D5E8 + 48 * qword_26B41D5F0;
    long long v4 = v1 + 32;
    int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DC3460;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DC3440;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    uint64_t v2 = (_OWORD *)qword_26B41D5E8;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B41D5F8) {
    free(v2);
  }
  qword_26B41D5E8 = (uint64_t)v1;
  HIDWORD(qword_26B41D5F0) = v8;
}

uint64_t _GLOBAL__sub_I_PrintPasses_cpp()
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&PrintBefore, 1, 0);
  byte_26B41EE40 = 0;
  xmmword_26B41EE20 = 0u;
  unk_26B41EE30 = 0u;
  xmmword_26B41EE10 = 0u;
  PrintBefore = (uint64_t)&unk_270DC3320;
  qword_26B41EE50 = 0;
  unk_26B41EE58 = 0;
  qword_26B41EE48 = 0;
  qword_26B41EE60 = (uint64_t)&unk_270DBC7A8;
  qword_26B41EE68 = (uint64_t)&unk_270DC3480;
  qword_26B41EE80 = (uint64_t)&qword_26B41EE68;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"print-before", 0xCuLL);
  qword_26B41EDB0 = (uint64_t)"Print IR before specified passes";
  unk_26B41EDB8 = 32;
  word_26B41ED9A = word_26B41ED9A & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintBefore);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &PrintBefore, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&PrintAfter, 1, 0);
  byte_26B41ED48 = 0;
  xmmword_26B41ED28 = 0u;
  unk_26B41ED38 = 0u;
  xmmword_26B41ED18 = 0u;
  PrintAfter = (uint64_t)&unk_270DC3320;
  qword_26B41ED58 = 0;
  unk_26B41ED60 = 0;
  qword_26B41ED50 = 0;
  qword_26B41ED68 = (uint64_t)&unk_270DBC7A8;
  qword_26B41ED70 = (uint64_t)&unk_270DC3480;
  qword_26B41ED88 = (uint64_t)&qword_26B41ED70;
  llvm::cl::Option::setArgStr((uint64_t)&PrintAfter, (uint64_t *)"print-after", 0xBuLL);
  qword_26B41ECB8 = (uint64_t)"Print IR after specified passes";
  unk_26B41ECC0 = 31;
  word_26B41ECA2 = word_26B41ECA2 & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintAfter);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &PrintAfter, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&PrintBeforeAll, 0, 0);
  byte_26B41F088 = 0;
  qword_26B41F090 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41F098 = 0;
  PrintBeforeAll = (uint64_t)&unk_270DBC910;
  qword_26B41F0A0 = (uint64_t)&unk_270DBC658;
  qword_26B41F0A8 = (uint64_t)&unk_270DBC998;
  qword_26B41F0C0 = (uint64_t)&qword_26B41F0A8;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"print-before-all", 0x10uLL);
  qword_26B41F028 = (uint64_t)"Print IR before each pass";
  unk_26B41F030 = 25;
  byte_26B41F088 = 0;
  word_26B41F098 = 256;
  word_26B41F012 = word_26B41F012 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintBeforeAll);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintBeforeAll, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&PrintAfterAll, 0, 0);
  byte_26B41EF08 = 0;
  qword_26B41EF10 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41EF18 = 0;
  PrintAfterAll = (uint64_t)&unk_270DBC910;
  qword_26B41EF20 = (uint64_t)&unk_270DBC658;
  qword_26B41EF28 = (uint64_t)&unk_270DBC998;
  qword_26B41EF40 = (uint64_t)&qword_26B41EF28;
  llvm::cl::Option::setArgStr((uint64_t)&PrintAfterAll, (uint64_t *)"print-after-all", 0xFuLL);
  qword_26B41EEA8 = (uint64_t)"Print IR after each pass";
  unk_26B41EEB0 = 24;
  byte_26B41EF08 = 0;
  word_26B41EF18 = 256;
  word_26B41EE92 = word_26B41EE92 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintAfterAll);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintAfterAll, &dword_261C2B000);
  *(void *)__str = "quiet";
  *(void *)&__str[8] = 5;
  *(_DWORD *)&__str[16] = 2;
  *(void *)&__str[24] = "Run in quiet mode";
  uint64_t v21 = 17;
  __int16 v22 = "diff";
  uint64_t v23 = 4;
  int v24 = 3;
  int v25 = "Display patch-like changes";
  uint64_t v26 = 26;
  char v27 = "diff-quiet";
  uint64_t v28 = 10;
  int v29 = 4;
  uint64_t v30 = "Display patch-like changes in quiet mode";
  uint64_t v31 = 40;
  __int16 v32 = "cdiff";
  uint64_t v33 = 5;
  int v34 = 5;
  uint64_t v35 = "Display patch-like changes with color";
  uint64_t v36 = 37;
  uint64_t v37 = "cdiff-quiet";
  uint64_t v38 = 11;
  int v39 = 6;
  uint64_t v40 = "Display patch-like changes in quiet mode with color";
  uint64_t v41 = 51;
  unint64_t v42 = "dot-cfg";
  uint64_t v43 = 7;
  int v44 = 7;
  unsigned int v45 = "Create a website with graphical changes";
  uint64_t v46 = 39;
  unsigned int v47 = "dot-cfg-quiet";
  uint64_t v48 = 13;
  int v49 = 8;
  unsigned int v50 = "Create a website with graphical changes in quiet mode";
  uint64_t v51 = 53;
  uint64_t v52 = "";
  uint64_t v53 = 0;
  int v54 = 1;
  uint64_t v55 = "";
  uint64_t v56 = 0;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v17, __str, &v57);
  uint64_t v2 = llvm::cl::Option::Option((uint64_t)&qword_26B41D540, 0, 0);
  dword_26B41D5C0 = 0;
  qword_26B41D5C8 = (uint64_t)&unk_270DC3440;
  *(void *)&dword_26B41D5D0 = 0;
  qword_26B41D540 = (uint64_t)&unk_270DC3388;
  qword_26B41D5D8 = (uint64_t)&unk_270DC33F0;
  qword_26B41D5E0 = (uint64_t)&qword_26B41D540;
  qword_26B41D5E8 = (uint64_t)&unk_26B41D5F8;
  qword_26B41D5F0 = 0x800000000;
  qword_26B41D778 = (uint64_t)&unk_270DC34C8;
  qword_26B41D790 = (uint64_t)&qword_26B41D778;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"print-changed", 0xDuLL);
  qword_26B41D560 = (uint64_t)"Print changed IRs";
  unk_26B41D568 = 17;
  word_26B41D54A = word_26B41D54A & 0xFF87 | 0x28;
  dword_26B41D5C0 = 0;
  byte_26B41D5D4 = 1;
  dword_26B41D5D0 = 0;
  if (v18)
  {
    uint64_t v3 = (char *)v17;
    long long v4 = (char *)v17 + 40 * v18;
    do
    {
      int v5 = *(uint64_t **)v3;
      unint64_t v6 = *((void *)v3 + 1);
      int v7 = *((_DWORD *)v3 + 4);
      long long v8 = *(_OWORD *)(v3 + 24);
      *(void *)__str = *(void *)v3;
      *(void *)&__str[8] = v6;
      *(_OWORD *)&__str[16] = v8;
      uint64_t v21 = (uint64_t)&unk_270DC3440;
      BYTE4(v22) = 1;
      LODWORD(v22) = v7;
      uint64_t v9 = qword_26B41D5E8;
      if (qword_26B41D5F0 >= HIDWORD(qword_26B41D5F0))
      {
        unint64_t v14 = qword_26B41D5F0 + 1;
        if (qword_26B41D5E8 <= (unint64_t)__str
          && qword_26B41D5E8 + 48 * (unint64_t)qword_26B41D5F0 > (unint64_t)__str)
        {
          uint64_t v16 = &__str[-qword_26B41D5E8];
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(v14);
          uint64_t v9 = qword_26B41D5E8;
          uint64_t v10 = &v16[qword_26B41D5E8];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(v14);
        uint64_t v9 = qword_26B41D5E8;
      }
      uint64_t v10 = __str;
LABEL_5:
      uint64_t v11 = v9 + 48 * qword_26B41D5F0;
      long long v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
      *(_OWORD *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = &unk_270DC3460;
      int v13 = *((_DWORD *)v10 + 10);
      *(unsigned char *)(v11 + 44) = v10[44];
      *(_DWORD *)(v11 + 40) = v13;
      *(void *)(v11 + 32) = &unk_270DC3440;
      LODWORD(qword_26B41D5F0) = qword_26B41D5F0 + 1;
      llvm::cl::AddLiteralOption(qword_26B41D5E0, v5, v6);
      v3 += 40;
    }
    while (v3 != v4);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D540);
  if (v17 != v19) {
    free(v17);
  }
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt, &qword_26B41D540, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41D268, 0, 0);
  qword_26B41D2F0 = 0;
  unk_26B41D2F8 = 0;
  qword_26B41D2E8 = 0;
  qword_26B41D310 = 0;
  unk_26B41D318 = 0;
  byte_26B41D320 = 0;
  qword_26B41D308 = 0;
  qword_26B41D300 = (uint64_t)&unk_270DBC638;
  qword_26B41D268 = (uint64_t)&unk_270DBC8A8;
  qword_26B41D328 = (uint64_t)&unk_270DBC7A8;
  qword_26B41D330 = (uint64_t)&unk_270DC0128;
  qword_26B41D348 = (uint64_t)&qword_26B41D330;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41D268, (uint64_t *)"print-changed-diff-path", 0x17uLL);
  word_26B41D272 = word_26B41D272 & 0xFF9F | 0x20;
  std::string::basic_string[abi:nn180100]<0>(__str, "diff");
  std::string::operator=((std::string *)&qword_26B41D2E8, (const std::string *)__str);
  byte_26B41D320 = 1;
  std::string::operator=((std::string *)&qword_26B41D308, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  qword_26B41D288 = (uint64_t)"system diff used by change reporters";
  unk_26B41D290 = 36;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D268);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &qword_26B41D268, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&PrintModuleScope, 0, 0);
  byte_26B41F208 = 0;
  qword_26B41F210 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41F218 = 0;
  PrintModuleScope = (uint64_t)&unk_270DBC910;
  qword_26B41F220 = (uint64_t)&unk_270DBC658;
  qword_26B41F228 = (uint64_t)&unk_270DBC998;
  qword_26B41F240 = (uint64_t)&qword_26B41F228;
  llvm::cl::Option::setArgStr((uint64_t)&PrintModuleScope, (uint64_t *)"print-module-scope", 0x12uLL);
  qword_26B41F1A8 = (uint64_t)"When printing IR for print-[before|after]{-all} always print a module IR";
  unk_26B41F1B0 = 72;
  byte_26B41F208 = 0;
  word_26B41F218 = 256;
  word_26B41F192 = word_26B41F192 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintModuleScope);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintModuleScope, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41D350, 1, 0);
  byte_26B41D400 = 0;
  xmmword_26B41D3E0 = 0u;
  unk_26B41D3F0 = 0u;
  xmmword_26B41D3D0 = 0u;
  qword_26B41D350 = (uint64_t)&unk_270DC3320;
  qword_26B41D410 = 0;
  unk_26B41D418 = 0;
  qword_26B41D408 = 0;
  qword_26B41D420 = (uint64_t)&unk_270DBC7A8;
  qword_26B41D428 = (uint64_t)&unk_270DC3480;
  qword_26B41D440 = (uint64_t)&qword_26B41D428;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41D350, (uint64_t *)"filter-passes", 0xDuLL);
  qword_26B41D380 = (uint64_t)"pass names";
  unk_26B41D388 = 10;
  qword_26B41D370 = (uint64_t)"Only consider IR changes for passes whose names match the specified value. No-op without -print-changed";
  unk_26B41D378 = 103;
  word_26B41D35A = word_26B41D35A & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D350);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &qword_26B41D350, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41D448, 1, 0);
  byte_26B41D4F8 = 0;
  xmmword_26B41D4D8 = 0u;
  unk_26B41D4E8 = 0u;
  xmmword_26B41D4C8 = 0u;
  qword_26B41D448 = (uint64_t)&unk_270DC3320;
  qword_26B41D500 = 0;
  qword_26B41D510 = 0;
  qword_26B41D508 = 0;
  qword_26B41D518 = (uint64_t)&unk_270DBC7A8;
  qword_26B41D520 = (uint64_t)&unk_270DC3480;
  qword_26B41D538 = (uint64_t)&qword_26B41D520;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41D448, (uint64_t *)"filter-print-funcs", 0x12uLL);
  qword_26B41D478 = (uint64_t)"function names";
  qword_26B41D480 = 14;
  qword_26B41D468 = (uint64_t)"Only print IR for functions whose name match this for all print-[before|after][-all] options";
  qword_26B41D470 = 92;
  word_26B41D452 = word_26B41D452 & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41D448);
  return __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &qword_26B41D448, &dword_261C2B000);
}

BOOL llvm::GCStatepointInst::classof(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 0x1C
    && ((v2 = v1 - 33, BOOL v3 = v2 > 0x33, v4 = (1 << v2) & 0x8000000000041, !v3) ? (v5 = v4 == 0) : (v5 = 1),
        !v5 && (uint64_t v6 = *(void *)(a1 - 32)) != 0 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *(void *)(a1 + 72)))
  {
    return *(_DWORD *)(v6 + 36) == 125;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_SafepointIRVerifier_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)PrintOnly, 0, 0);
  byte_26B41E9F8 = 0;
  qword_26B41EA00 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41EA08 = 0;
  PrintOnly[0] = (uint64_t)&unk_270DBC910;
  qword_26B41EA10 = (uint64_t)&unk_270DBC658;
  qword_26B41EA18 = (uint64_t)&unk_270DBC998;
  qword_26B41EA30 = (uint64_t)&qword_26B41EA18;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"safepoint-ir-verifier-print-only", 0x20uLL);
  byte_26B41E9F8 = 0;
  word_26B41EA08 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)PrintOnly);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, PrintOnly, &dword_261C2B000);
}

BOOL llvm::Type::canLosslesslyBitCastTo(llvm::Type *this, llvm::Type *a2)
{
  if (this == a2) {
    return 1;
  }
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 14) {
    return 0;
  }
  int v5 = *((_DWORD *)a2 + 2);
  if (v5 == 7 || v5 == 14) {
    return 0;
  }
  if ((v2 & 0xFE) != 0x12 || (v5 & 0xFE) != 18)
  {
    if (v2 == 10)
    {
      if (v5 != 18) {
        goto LABEL_33;
      }
      if (llvm::Type::getPrimitiveSizeInBits(a2) == 64) {
        return 1;
      }
    }
    else
    {
      if (v2 != 11)
      {
        if (v2 == 18)
        {
          if (v5 != 11)
          {
            if (v5 != 10 || llvm::Type::getPrimitiveSizeInBits(this) != 64) {
              goto LABEL_33;
            }
            return 1;
          }
          if (llvm::Type::getPrimitiveSizeInBits(this) == 0x2000) {
            return 1;
          }
        }
LABEL_33:
        BOOL v14 = (v5 ^ v2) < 0x100;
        if (v5 != 15) {
          BOOL v14 = 0;
        }
        BOOL v15 = v2 == 15;
        return v15 && v14;
      }
      if (v5 != 18) {
        goto LABEL_33;
      }
      if (llvm::Type::getPrimitiveSizeInBits(a2) == 0x2000) {
        return 1;
      }
    }
    return 0;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  char v11 = v10;
  unint64_t v12 = llvm::Type::getPrimitiveSizeInBits(a2);
  BOOL v14 = v11 == v13;
  BOOL v15 = PrimitiveSizeInBits == v12;
  return v15 && v14;
}

unint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  unint64_t v1 = *((unsigned int *)this + 2);
  int v2 = *((_DWORD *)this + 2);
  unint64_t result = 16;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t result = 32;
      break;
    case 3:
    case 10:
      unint64_t result = 64;
      break;
    case 4:
      unint64_t result = 80;
      break;
    case 5:
    case 6:
      unint64_t result = 128;
      break;
    case 11:
      unint64_t result = 0x2000;
      break;
    case 13:
      unint64_t result = v1 >> 8;
      break;
    case 18:
    case 19:
      uint64_t v5 = *((unsigned int *)this + 8);
      unint64_t result = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type **)this + 3)) * v5;
      break;
    default:
      unint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::isEmptyTy@<X0>(llvm::Type *this@<X0>, int a2@<W8>)
{
  int v2 = *((unsigned __int8 *)this + 8);
  if (this && v2 == 17)
  {
    while (1)
    {
      a2 = *((_DWORD *)this + 8);
      if (!a2) {
        return 1;
      }
      this = (llvm::Type *)*((void *)this + 3);
      int v2 = *((unsigned __int8 *)this + 8);
      if (this) {
        BOOL v3 = v2 == 17;
      }
      else {
        BOOL v3 = 0;
      }
      if (!v3) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v2 == 16)
    {
      unint64_t v4 = *((unsigned int *)this + 3);
      if (v4)
      {
        uint64_t v5 = (llvm::Type **)*((void *)this + 2);
        if (llvm::Type::isEmptyTy(*v5))
        {
          uint64_t v6 = 1;
          do
          {
            unint64_t v7 = v6;
            if (v4 == v6) {
              break;
            }
            char isEmptyTy = llvm::Type::isEmptyTy(v5[v6]);
            uint64_t v6 = v7 + 1;
          }
          while ((isEmptyTy & 1) != 0);
          LOBYTE(a2) = v7 >= v4;
        }
        else
        {
          LOBYTE(a2) = 0;
        }
      }
      else
      {
        LOBYTE(a2) = 1;
      }
    }
    return (v2 == 16) & a2;
  }
}

uint64_t llvm::Type::isSizedDerivedType(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v3 == 17 || a1 && (v3 & 0xFE) == 0x12)
  {
    uint64_t v4 = *(void *)(a1 + 24);
LABEL_6:
    return llvm::Type::isSized(v4, a2);
  }
  if (a1 && v3 == 21)
  {
    getTargetTypeInfo((uint64_t *)a1);
    goto LABEL_6;
  }
  return llvm::StructType::isSized(a1, a2);
}

uint64_t llvm::StructType::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x800) != 0) {
    return 1;
  }
  if ((v2 & 0x100) != 0)
  {
    if (!a2 || (llvm::SmallPtrSetImpl<llvm::Value *>::insert(a2, (const void *)a1, (uint64_t)v8), v8[16]))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 12);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 16);
        uint64_t v6 = 8 * v4;
        while (*(unsigned char *)(*(void *)v5 + 8) != 19 && (llvm::Type::isSized() & 1) != 0)
        {
          v5 += 8;
          v6 -= 8;
          if (!v6) {
            goto LABEL_10;
          }
        }
        return 0;
      }
LABEL_10:
      *(_DWORD *)(a1 + 8) |= 0x800u;
      return 1;
    }
  }
  return 0;
}

void *llvm::IntegerType::get(llvm::IntegerType *this, llvm::LLVMContext *a2)
{
  int v6 = (int)a2;
  if ((int)a2 > 31)
  {
    switch(a2)
    {
      case 0x20:
        return (void *)(*(void *)this + 1992);
      case 0x40:
        return (void *)(*(void *)this + 2016);
      case 0x80:
        return (void *)(*(void *)this + 2040);
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        return (void *)(*(void *)this + 1920);
      case 8:
        return (void *)(*(void *)this + 1944);
      case 0x10:
        return (void *)(*(void *)this + 1968);
    }
  }
  uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)(*(void *)this + 2200), &v6);
  unint64_t result = (void *)*((void *)v4 + 1);
  if (!result)
  {
    unint64_t result = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(void *)this + 2072, 24, 3);
    int v5 = v6;
    void *result = this;
    result[2] = 0;
    result[1] = (v5 << 8) | 0xDu;
    *((void *)v4 + 1) = result;
  }
  return result;
}

unint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  int v7 = (int)a2;
  uint64_t v3 = *(void *)this;
  if (a2) {
    uint64_t v4 = (unint64_t *)(llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)(v3 + 2384), &v7)+ 2);
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 + 2376);
  }
  unint64_t result = *v4;
  if (!*v4)
  {
    unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v3 + 2072, 32, 3);
    int v6 = v7;
    *(void *)unint64_t result = this;
    *(void *)(result + 20) = 0;
    *(void *)(result + 12) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(result + 8) = (v6 << 8) | 0xF;
    *uint64_t v4 = result;
  }
  return result;
}

unint64_t llvm::FunctionType::get(uint64_t **a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4 = (int)a4;
  int v6 = a2;
  uint64_t v8 = **a1;
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v15[2] = a3;
  char v16 = (char)a4;
  uint64_t v17 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::insert_as<llvm::FunctionTypeKeyInfo::KeyTy>(v8 + 2224, &v17, (uint64_t)v15, a4, (uint64_t)&v18);
  uint64_t v9 = v18;
  if (!v19) {
    return *v18;
  }
  unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8 + 2072, 8 * a3 + 32, 3);
  *(void *)unint64_t result = *a1;
  *(void *)(result + 24) = a1;
  *(void *)(result + 16) = 0;
  if (v4) {
    int v11 = 270;
  }
  else {
    int v11 = 14;
  }
  *(_DWORD *)(result + 8) = v11;
  if (a3)
  {
    uint64_t v12 = a3;
    char v13 = (void *)(result + 32);
    do
    {
      uint64_t v14 = *v6++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a3 + 1;
  unint64_t *v9 = result;
  return result;
}

unint64_t llvm::StructType::get(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = (int)a4;
  uint64_t v8 = *a1;
  v12[0] = a2;
  v12[1] = a3;
  char v13 = (char)a4;
  uint64_t v14 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::insert_as<llvm::AnonStructTypeKeyInfo::KeyTy>(v8 + 2248, &v14, (uint64_t)v12, a4, (uint64_t)&v15);
  uint64_t v9 = v15;
  if (!v16) {
    return *v15;
  }
  unint64_t v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 32, 3);
  *(void *)unint64_t v10 = a1;
  *(void *)(v10 + 20) = 0;
  *(void *)(v10 + 12) = 0;
  *(_DWORD *)(v10 + 28) = 0;
  *(_DWORD *)(v10 + 8) = 1040;
  llvm::StructType::setBody(v10, a2, a3, v4);
  unint64_t *v9 = v10;
  return v10;
}

unint64_t llvm::StructType::setBody(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v7[0] = a2;
  v7[1] = a3;
  if (a4) {
    int v5 = 768;
  }
  else {
    int v5 = 256;
  }
  *(_DWORD *)(a1 + 8) |= v5;
  *(_DWORD *)(a1 + 12) = a3;
  if (a3) {
    unint64_t result = llvm::ArrayRef<llvm::Type *>::copy<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>((uint64_t)v7, **(void **)a1 + 2072);
  }
  else {
    unint64_t result = 0;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t llvm::StructType::containsScalableVectorType(llvm::StructType *this)
{
  uint64_t v1 = *((unsigned int *)this + 3);
  if (!v1) {
    return 0;
  }
  int v2 = (llvm::StructType **)*((void *)this + 2);
  uint64_t v3 = 8 * v1;
  while (1)
  {
    int v4 = *((unsigned __int8 *)*v2 + 8);
    if (v4 == 16) {
      break;
    }
    if (v4 == 19) {
      return 1;
    }
LABEL_7:
    ++v2;
    v3 -= 8;
    if (!v3) {
      return 0;
    }
  }
  if ((llvm::StructType::containsScalableVectorType(*v2) & 1) == 0) {
    goto LABEL_7;
  }
  return 1;
}

unint64_t llvm::ArrayRef<llvm::Type *>::copy<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>(uint64_t a1, uint64_t a2)
{
  unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 8 * *(void *)(a1 + 8), 3);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v5 = *(uint64_t **)a1;
    uint64_t v6 = 8 * v4;
    int v7 = (void *)result;
    do
    {
      uint64_t v8 = *v5++;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::StructType::setName(uint64_t result, uint64_t *a2, unint64_t a3)
{
  int v5 = (uint64_t **)result;
  v37[8] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unint64_t **)(result + 24);
  if (v6)
  {
    int v7 = v6 + 2;
    unint64_t v8 = *v6;
  }
  else
  {
    int v7 = 0;
    unint64_t v8 = 0;
  }
  if (a3 != v8 || a3 && (unint64_t result = memcmp(a2, v7, a3), result))
  {
    if (v6) {
      llvm::StringMapImpl::RemoveKey(**v5 + 2272, (uint64_t *)((char *)v6 + *(unsigned int *)(**v5 + 2292)), *v6);
    }
    if (a3)
    {
      uint64_t v9 = (llvm::StringMapImpl *)(**v5 + 2272);
      __int16 v32 = a2;
      unint64_t v33 = a3;
      int v34 = v5;
      unint64_t v10 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(v9, a2, a3, (unint64_t *)&v34);
      if (v11)
      {
        uint64_t v12 = v10;
      }
      else
      {
        uint64_t v35 = v37;
        long long v36 = xmmword_261E8ACE0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, a2, (unsigned char *)a2 + a3);
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v35, 46);
        int v24 = 0;
        char v28 = 0;
        uint64_t v29 = 0;
        int v30 = 1;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v25 = 0;
        uint64_t v23 = &unk_270DBD758;
        uint64_t v31 = &v35;
        llvm::raw_ostream::SetUnbuffered(&v23);
        unint64_t v14 = (a3 + 1);
        do
        {
          llvm::SmallVectorImpl<char>::resizeImpl<false>(&v35, v14);
          uint64_t v15 = **v5;
          unint64_t v16 = *(unsigned int *)(v15 + 2296);
          *(_DWORD *)(v15 + 2296) = v16 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, v16, 0, 0, 0);
          uint64_t v17 = (llvm::StringMapImpl *)(**v5 + 2272);
          __int16 v20 = (uint64_t *)*v31;
          unint64_t v21 = (unint64_t)v31[1];
          __int16 v22 = v5;
          uint64_t v18 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(v17, v20, v21, (unint64_t *)&v22);
        }
        while (!v19);
        uint64_t v12 = v18;
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
        if (v35 != v37) {
          free(v35);
        }
      }
      unint64_t result = (uint64_t)v5[3];
      if (result) {
        unint64_t result = MEMORY[0x263E500A0](result, 8);
      }
      char v13 = *v12;
    }
    else
    {
      unint64_t result = (uint64_t)v5[3];
      if (!result) {
        return result;
      }
      unint64_t result = MEMORY[0x263E500A0](result, 8);
      char v13 = 0;
    }
    void v5[3] = (uint64_t *)v13;
  }
  return result;
}

unint64_t llvm::StructType::create(void *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 32, 3);
  unint64_t v7 = v6;
  *(void *)unint64_t v6 = a1;
  *(_DWORD *)(v6 + 8) = 16;
  *(void *)(v6 + 20) = 0;
  *(void *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  if (a3) {
    llvm::StructType::setName(v6, a2, a3);
  }
  return v7;
}

BOOL llvm::StructType::isLayoutIdentical(const void **this, const void **a2)
{
  if (this == a2) {
    return 1;
  }
  if (((*((unsigned __int8 *)this + 9) ^ *((unsigned __int8 *)a2 + 9)) & 2) != 0) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)this + 3);
  if (v2 != *((_DWORD *)a2 + 3)) {
    return 0;
  }
  return memcmp(this[2], a2[2], 8 * v2) == 0;
}

unsigned __int8 *llvm::StructType::indexValid(llvm::StructType *this, const llvm::Value *a2)
{
  int v3 = *(_DWORD *)(*(void *)a2 + 8);
  int v4 = v3 & 0xFE;
  int v5 = v3;
  if (v4 == 18) {
    int v5 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v3 == 19 || v5 != 8205) {
    return 0;
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + 16);
  if (v7 > 0x14) {
    return 0;
  }
  if (v4 == 18)
  {
    unint64_t result = (unsigned __int8 *)llvm::Constant::getSplatValue(a2, 0);
    if (!result) {
      return result;
    }
    a2 = (const llvm::Value *)result;
    unsigned int v7 = result[16];
  }
  if (v7 != 16) {
    return 0;
  }
  uint64_t v9 = (void *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u) {
    uint64_t v9 = (void *)*v9;
  }
  return (unsigned __int8 *)(*v9 < (unint64_t)*((unsigned int *)this + 3));
}

double llvm::ArrayType::get(uint64_t **this, llvm::Type *a2)
{
  uint64_t v4 = **this;
  v8[0] = this;
  v8[1] = a2;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::FindAndConstruct((uint64_t *)(v4 + 2328), v8);
  if (!v5[2])
  {
    unsigned int v7 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *unsigned int v7 = *this;
    void v7[3] = this;
    v7[4] = a2;
    void v7[2] = v7 + 3;
    *(void *)&double result = 0x100000011;
    v7[1] = 0x100000011;
    void v5[2] = v7;
  }
  return result;
}

double llvm::VectorType::get(uint64_t **this, llvm::Type *a2)
{
  if (((unint64_t)a2 & 0xFF00000000) != 0) {
    return llvm::ScalableVectorType::get(this, a2);
  }
  else {
    return llvm::FixedVectorType::get(this, a2);
  }
}

double llvm::ScalableVectorType::get(uint64_t **this, llvm::Type *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = **this;
  v8[0] = this;
  v8[1] = a2 | 0x100000000;
  uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct((uint64_t *)(v4 + 2352), (uint64_t)v8);
  if (!*(void *)(v5 + 16))
  {
    unint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *(void *)unint64_t v7 = *this;
    *(void *)(v7 + 24) = this;
    *(_DWORD *)(v7 + 32) = v2;
    *(void *)(v7 + 16) = v7 + 24;
    *(void *)&double result = 0x100000013;
    *(void *)(v7 + 8) = 0x100000013;
    *(void *)(v5 + 16) = v7;
  }
  return result;
}

double llvm::FixedVectorType::get(uint64_t **this, llvm::Type *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = **this;
  v8[0] = this;
  v8[1] = a2;
  uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct((uint64_t *)(v4 + 2352), (uint64_t)v8);
  if (!*(void *)(v5 + 16))
  {
    unint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *(void *)unint64_t v7 = *this;
    *(void *)(v7 + 24) = this;
    *(_DWORD *)(v7 + 32) = v2;
    *(void *)(v7 + 16) = v7 + 24;
    *(void *)&double result = 0x100000012;
    *(void *)(v7 + 8) = 0x100000012;
    *(void *)(v5 + 16) = v7;
  }
  return result;
}

uint64_t llvm::PointerType::get(llvm::PointerType **this, llvm::Type *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(void *)*this;
  if (*(unsigned char *)(v4 + 2737))
  {
    if (*(unsigned char *)(v4 + 2736))
    {
LABEL_3:
      uint64_t v5 = *this;
      return llvm::PointerType::get(v5, a2);
    }
  }
  else
  {
    int v7 = byte_26B41F148;
    *(unsigned char *)(v4 + 2737) = 1;
    *(unsigned char *)(v4 + 2736) = v7;
    if (v7) {
      goto LABEL_3;
    }
  }
  v9[0] = this;
  v9[1] = a2;
  uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::FindAndConstruct((uint64_t *)(v4 + 2408), v9);
  uint64_t result = *(void *)(v8 + 16);
  if (!result)
  {
    uint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 32, 3);
    *(void *)uint64_t result = *this;
    *(void *)(result + 24) = this;
    *(void *)(result + 16) = result + 24;
    *(_DWORD *)(result + 8) = (v2 << 8) | 0xF;
    *(_DWORD *)(result + 12) = 1;
    *(void *)(v8 + 16) = result;
  }
  return result;
}

uint64_t llvm::TargetExtType::TargetExtType(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t a6, int *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 21;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = llvm::UniqueStringSaver::save((uint64_t *)(*(void *)a2 + 2168), a3, (uint64_t)a4, a4);
  *(void *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 12) = a6;
  unint64_t v14 = (void *)(a1 + 48);
  *(void *)(a1 + 16) = a1 + 48;
  if (a6)
  {
    uint64_t v15 = 8 * a6;
    do
    {
      uint64_t v16 = *a5++;
      *v14++ = v16;
      v15 -= 8;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(a1 + 8) | (a8 << 8);
  *(void *)(a1 + 40) = v14;
  if (a8)
  {
    uint64_t v17 = 4 * a8;
    do
    {
      int v18 = *a7++;
      *(_DWORD *)unint64_t v14 = v18;
      unint64_t v14 = (void *)((char *)v14 + 4);
      v17 -= 4;
    }
    while (v17);
  }
  return a1;
}

uint64_t llvm::TargetExtType::get(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, int *a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  void v18[3] = a5;
  uint64_t v18[4] = a6;
  v18[5] = a7;
  uint64_t v14 = *a1 + 2304;
  uint64_t v19 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::insert_as<llvm::TargetExtTypeKeyInfo::KeyTy>(v14, &v19, (uint64_t)v18, a4, (uint64_t)&v20);
  uint64_t v15 = v20;
  if (!v21) {
    return *v20;
  }
  unint64_t v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 8 * a5 + 4 * a7 + 48, 3);
  uint64_t result = llvm::TargetExtType::TargetExtType(v16, (uint64_t)a1, a2, a3, (uint64_t *)a4, a5, a6, a7);
  *uint64_t v15 = result;
  return result;
}

double getTargetTypeInfo(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[4];
  if (v2 >= 6)
  {
    int v3 = (uint64_t *)a1[3];
    if (*(_DWORD *)v3 == 1919512691 && *((_WORD *)v3 + 2) == 11894)
    {
      llvm::PointerType::get((llvm::PointerType **)(*(void *)v1 + 1944), 0);
    }
    else if (v2 == 15)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = *(uint64_t *)((char *)v3 + 7);
      if (v5 == 0x2E34366863726161 && v6 == 0x746E756F6376732ELL) {
        return llvm::ScalableVectorType::get((uint64_t **)(*(void *)v1 + 1920), (llvm::Type *)0x10);
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::insert_as<llvm::FunctionTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  unint64_t v10 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    unint64_t v10 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(unsigned char *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = llvm::FunctionTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    unint64_t v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::FunctionTypeKeyInfo::isEqual(a2, *v10))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*v10 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *v10 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        int v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        unint64_t v10 = (uint64_t *)(v7 + 8 * v9);
        BOOL isEqual = llvm::FunctionTypeKeyInfo::isEqual(a2, *v10);
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        unint64_t v10 = v12;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::FunctionTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  int v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = (8 * *(unsigned int *)(a2 + 12) - 8) >> 3;
  v8[0] = *v5;
  v8[1] = v5 + 1;
  void v8[2] = v7;
  BOOL v9 = v6 > 0xFF;
  return llvm::FunctionTypeKeyInfo::KeyTy::operator==(a1, (uint64_t)v8);
}

unint64_t llvm::FunctionTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v6 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 8), *(void *)(a1 + 8) + 8 * *(void *)(a1 + 16), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)a1, (uint64_t *)&v6, (char *)(a1 + 24));
}

BOOL llvm::FunctionTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)a1 == *(void *)a2 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2 == *(void *)(a2 + 16) && !memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), 8 * v2)) {
      return 1;
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if (v3)
    {
      int v15 = &v4[v3];
      unint64_t v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v18 = *(uint64_t **)a1;
          uint64_t v19 = *(void **)(v17 + 16);
          int v20 = *(_DWORD *)(a1 + 16);
          uint64_t v21 = (8 * *(unsigned int *)(v17 + 12) - 8) >> 3;
          v34[0] = *v19;
          v34[1] = v19 + 1;
          v34[2] = v21;
          BOOL v35 = *(_DWORD *)(v17 + 8) > 0xFFu;
          int HashValue = llvm::FunctionTypeKeyInfo::getHashValue((uint64_t)v34, v10, v11, v12);
          int v23 = v20 - 1;
          uint64_t v24 = *v16;
          unsigned int v25 = HashValue & (v20 - 1);
          uint64_t v26 = &v18[v25];
          uint64_t v27 = *v26;
          if (*v16 != *v26)
          {
            char v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                char v28 = v26;
              }
              unsigned int v31 = v25 + v29++;
              unsigned int v25 = v31 & v23;
              uint64_t v26 = &v18[v31 & v23];
              uint64_t v27 = *v26;
              if (v24 == *v26) {
                goto LABEL_12;
              }
            }
            if (v28) {
              uint64_t v26 = v28;
            }
          }
LABEL_12:
          uint64_t *v26 = v24;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v32 = *(unsigned int *)(a1 + 16);
  if (v32)
  {
    uint64_t v33 = 8 * v32;
    do
    {
      *result++ = -4096;
      v33 -= 8;
    }
    while (v33);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::insert_as<llvm::AnonStructTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  uint64_t v10 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    uint64_t v10 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(unsigned char *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = llvm::AnonStructTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::AnonStructTypeKeyInfo::isEqual(a2, *v10))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*v10 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *v10 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        int v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
        BOOL isEqual = llvm::AnonStructTypeKeyInfo::isEqual(a2, *v10);
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::AnonStructTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  v7[0] = *(void *)(a2 + 16);
  v7[1] = v5;
  BOOL v8 = (v6 & 0x200) != 0;
  return llvm::AnonStructTypeKeyInfo::KeyTy::operator==(a1, (uint64_t)v7);
}

unint64_t llvm::AnonStructTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a1, *(void *)a1 + 8 * *(void *)(a1 + 8), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v7);
  unint64_t v7 = v5;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)&v7, 0, v8, v9, (char *)(a1 + 16));
}

BOOL llvm::AnonStructTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2 == *(void *)(a2 + 8) && !memcmp(*(const void **)a1, *(const void **)a2, 8 * v2)) {
      return 1;
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if (v3)
    {
      int v15 = &v4[v3];
      unint64_t v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v18 = *(uint64_t **)a1;
          int v19 = *(_DWORD *)(a1 + 16);
          uint64_t v20 = *(unsigned int *)(v17 + 12);
          v33[0] = *(void *)(v17 + 16);
          v33[1] = v20;
          BOOL v34 = (*(_DWORD *)(v17 + 8) & 0x200) != 0;
          int HashValue = llvm::AnonStructTypeKeyInfo::getHashValue((uint64_t)v33, v10, v11, v12);
          int v22 = v19 - 1;
          uint64_t v23 = *v16;
          unsigned int v24 = HashValue & (v19 - 1);
          unsigned int v25 = &v18[v24];
          uint64_t v26 = *v25;
          if (*v16 != *v25)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v25;
              }
              unsigned int v30 = v24 + v28++;
              unsigned int v24 = v30 & v22;
              unsigned int v25 = &v18[v30 & v22];
              uint64_t v26 = *v25;
              if (v23 == *v25) {
                goto LABEL_12;
              }
            }
            if (v27) {
              unsigned int v25 = v27;
            }
          }
LABEL_12:
          *unsigned int v25 = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v31 = *(unsigned int *)(a1 + 16);
  if (v31)
  {
    uint64_t v32 = 8 * v31;
    do
    {
      *result++ = -4096;
      v32 -= 8;
    }
    while (v32);
  }
  return result;
}

unint64_t **llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (unint64_t **)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  uint64_t v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = (char *)(v12 + 2);
  if (a3) {
    memcpy(v12 + 2, a2, a3);
  }
  v14[a3] = 0;
  unint64_t v15 = *a4;
  *uint64_t v13 = a3;
  v13[1] = v15;
  char *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

void *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>(a1, a2, &v8);
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = a2[1];
    *unint64_t v5 = *a2;
    v5[1] = v6;
    void v5[2] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a2[1];
    unint64_t v6 = (37 * v5)
       + ~((unint64_t)(37 * v5) << 32)
       + ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    uint64_t v12 = (void *)(*a1 + 24 * v11);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    if (*a2 == *v12 && v5 == v13)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v14 != -4096 || v13 != -1)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v13 == -2;
        }
        if (v19 && v14 == -8192) {
          unint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        uint64_t v12 = (void *)(v4 + 24 * (v21 & v10));
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        if (*a2 == *v12 && v5 == v13) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v12 = v16;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a3 = v12;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(a1, v7);
  int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261EA71C0;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = (void *)v4;
      do
      {
        uint64_t v14 = v13[1];
        if ((*v13 != -4096 || v14 != -1) && (*v13 != -8192 || v14 != -2))
        {
          unsigned int v21 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, v13, &v21);
          int v17 = v21;
          uint64_t v18 = v13[1];
          *unsigned int v21 = *v13;
          v17[1] = v18;
          int v17[2] = v13[2];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 24 * v19;
    do
    {
      _OWORD *result = xmmword_261EA71C0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v20 -= 24;
    }
    while (v20);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>(a1, a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t)a1, a2, a2, v8);
    *(void *)uint64_t v5 = *(void *)a2;
    int v6 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(v5 + 12) = *(unsigned char *)(a2 + 12);
    *(_DWORD *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    unint64_t v16 = 0;
    uint64_t result = 0;
    goto LABEL_28;
  }
  char v4 = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = (37 * v5 - *(char *)(a2 + 12));
  unint64_t v7 = (v6 | ((unint64_t)((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) << 32))
     + ~(v6 << 32);
  unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  unint64_t v10 = v9 + ~(v9 << 27);
  uint64_t v11 = *a1;
  unsigned int v12 = (v10 >> 31) ^ v10;
  int v13 = v3 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v12 & v13;
    unint64_t v16 = (uint64_t *)(v11 + 24 * (v12 & v13));
    uint64_t v17 = *v16;
    if (*(void *)a2 == *v16
      && v5 == *((_DWORD *)v16 + 2)
      && *(unsigned __int8 *)(a2 + 12) == *((unsigned __int8 *)v16 + 12))
    {
      uint64_t result = 1;
      goto LABEL_28;
    }
    if (v17 == -4096) {
      break;
    }
    if (v17 != -8192) {
      goto LABEL_22;
    }
    BOOL v21 = *((_DWORD *)v16 + 2) == -2 && *((unsigned char *)v16 + 12) == 0;
LABEL_23:
    if (v21 && v4 == 0) {
      char v4 = (uint64_t *)(v11 + 24 * v15);
    }
    unsigned int v12 = v15 + i;
  }
  if (*((_DWORD *)v16 + 2) != -1 || *((unsigned char *)v16 + 12) == 0)
  {
LABEL_22:
    BOOL v21 = 0;
    goto LABEL_23;
  }
  uint64_t result = 0;
  if (v4) {
    unint64_t v16 = v4;
  }
LABEL_28:
  *a3 = v16;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_12:
    llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(a1, v7);
    uint64_t v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -4096 || (*(_DWORD *)(a4 + 8) == -1 ? (BOOL v8 = *(unsigned char *)(a4 + 12) == 0) : (BOOL v8 = 1), v8)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261EA71D0;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (!v3)
    {
LABEL_23:
      JUMPOUT(0x263E500A0);
    }
    uint64_t v12 = 24 * v3;
    uint64_t v13 = v4;
    while (1)
    {
      if (*(void *)v13 == -8192)
      {
        if (*(_DWORD *)(v13 + 8) == -2 && *(unsigned char *)(v13 + 12) == 0) {
          goto LABEL_22;
        }
      }
      else if (*(void *)v13 == -4096 && *(_DWORD *)(v13 + 8) == -1 && *(unsigned char *)(v13 + 12) != 0)
      {
        goto LABEL_22;
      }
      uint64_t v20 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, v13, &v20);
      unint64_t v16 = v20;
      *uint64_t v20 = *(void *)v13;
      int v17 = *(_DWORD *)(v13 + 8);
      *((unsigned char *)v16 + 12) = *(unsigned char *)(v13 + 12);
      *((_DWORD *)v16 + 2) = v17;
      uint64_t v16[2] = *(void *)(v13 + 16);
      ++*(_DWORD *)(a1 + 8);
LABEL_22:
      v13 += 24;
      v12 -= 24;
      if (!v12) {
        goto LABEL_23;
      }
    }
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 24 * v18;
    do
    {
      _OWORD *result = xmmword_261EA71D0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(void *)uint64_t v5 = *(void *)a2;
    *(_DWORD *)(v5 + 8) = a2[2];
    *(void *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int HashValue = llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(a2);
    int v8 = v4 - 1;
    int v9 = a2[2];
    unsigned int v10 = HashValue & (v4 - 1);
    uint64_t v11 = (uint64_t *)(v6 + 24 * v10);
    uint64_t v12 = *v11;
    int v13 = *((_DWORD *)v11 + 2);
    if (*(void *)a2 == *v11 && v9 == v13)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v12 != -4096 || v13 != -1)
      {
        if (v15) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v13 == -2;
        }
        if (v18 && v12 == -8192) {
          unsigned int v15 = v11;
        }
        unsigned int v20 = v10 + v16++;
        unsigned int v10 = v20 & v8;
        uint64_t v11 = (uint64_t *)(v6 + 24 * (v20 & v8));
        uint64_t v12 = *v11;
        int v13 = *((_DWORD *)v11 + 2);
        if (*(void *)a2 == *v11 && v9 == v13) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v15) {
        uint64_t v11 = v15;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a3 = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261E8D730;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        int v14 = *(_DWORD *)(v13 + 8);
        if ((*(void *)v13 != -4096 || v14 != -1) && (*(void *)v13 != -8192 || v14 != -2))
        {
          unsigned int v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, (_DWORD *)v13, &v20);
          int v17 = v20;
          *unsigned int v20 = *(void *)v13;
          *((_DWORD *)v17 + 2) = *(_DWORD *)(v13 + 8);
          int v17[2] = *(void *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 24 * v18;
    do
    {
      _OWORD *result = xmmword_261E8D730;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::insert_as<llvm::TargetExtTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  uint64_t v10 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    uint64_t v10 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(unsigned char *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = llvm::TargetExtTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::TargetExtTypeKeyInfo::isEqual(a2, *v10))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*v10 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *v10 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        uint64_t v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        uint64_t v10 = (uint64_t *)(v7 + 8 * v9);
        BOOL isEqual = llvm::TargetExtTypeKeyInfo::isEqual(a2, *v10);
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::TargetExtTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  size_t v4 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 8) != v4) {
    return 0;
  }
  int v5 = *(const void **)(a2 + 16);
  unint64_t v6 = *(const void **)(a2 + 40);
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    int v9 = memcmp(*(const void **)a1, *(const void **)(a2 + 24), v4);
    BOOL result = 0;
    if (v9 || *(void *)(a1 + 24) != v8) {
      return result;
    }
    goto LABEL_9;
  }
  if (*(void *)(a1 + 24) != v8) {
    return 0;
  }
LABEL_9:
  int v10 = memcmp(*(const void **)(a1 + 16), v5, 8 * v8);
  BOOL result = 0;
  if (!v10 && *(void *)(a1 + 40) == v7 >> 8) {
    return memcmp(*(const void **)(a1 + 32), v6, 4 * (v7 >> 8)) == 0;
  }
  return result;
}

unint64_t llvm::TargetExtTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  v11[8] = *MEMORY[0x263EF8340];
  unint64_t v9 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 16), *(void *)(a1 + 16) + 8 * *(void *)(a1 + 24), a3, a4);
  unint64_t v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 32), *(void *)(a1 + 32) + 4 * *(void *)(a1 + 40), v5, v6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, a1, (uint64_t *)&v9, (uint64_t *)&v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v15 = a2;
  unint64_t v12 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(void *)a5 + *(void *)(a5 + 8), (uint64_t)a3, a4);
  int v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, a3, (unint64_t)a4, v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v15, v13, (char *)a4, a6, a7);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(a1, v7);
  int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  size_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if (v3)
    {
      unint64_t v15 = &v4[v3];
      int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = *(uint64_t **)a1;
          int v19 = *(_DWORD *)(a1 + 16);
          long long v35 = *(_OWORD *)(v17 + 24);
          uint64_t v20 = *(unsigned int *)(v17 + 12);
          uint64_t v36 = *(void *)(v17 + 16);
          uint64_t v37 = v20;
          uint64_t v21 = *(void *)(v17 + 40);
          unint64_t v22 = (unint64_t)*(unsigned int *)(v17 + 8) >> 8;
          uint64_t v38 = v21;
          unint64_t v39 = v22;
          int HashValue = llvm::TargetExtTypeKeyInfo::getHashValue((uint64_t)&v35, v10, v11, v12);
          int v24 = v19 - 1;
          uint64_t v25 = *v16;
          unsigned int v26 = HashValue & (v19 - 1);
          uint64_t v27 = &v18[v26];
          uint64_t v28 = *v27;
          if (*v16 != *v27)
          {
            BOOL v29 = 0;
            int v30 = 1;
            while (v28 != -4096)
            {
              if (v29) {
                BOOL v31 = 0;
              }
              else {
                BOOL v31 = v28 == -8192;
              }
              if (v31) {
                BOOL v29 = v27;
              }
              unsigned int v32 = v26 + v30++;
              unsigned int v26 = v32 & v24;
              uint64_t v27 = &v18[v32 & v24];
              uint64_t v28 = *v27;
              if (v25 == *v27) {
                goto LABEL_12;
              }
            }
            if (v29) {
              uint64_t v27 = v29;
            }
          }
LABEL_12:
          *uint64_t v27 = v25;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v33 = *(unsigned int *)(a1 + 16);
  if (v33)
  {
    uint64_t v34 = 8 * v33;
    do
    {
      *result++ = -4096;
      v34 -= 8;
    }
    while (v34);
  }
  return result;
}

void llvm::TypeFinder::run(llvm::TypeFinder *this, const llvm::Module *a2, char a3)
{
  v52[8] = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 120) = a3;
  unint64_t v5 = (char *)a2 + 8;
  for (uint64_t i = *((void *)a2 + 2); (char *)i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v7 = i - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v7 + 24));
    if (i && *(unsigned char *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(v7 + 16) || *(void *)(v7 + 72) != v7 + 72 || (*(unsigned char *)(v7 + 35) & 1) != 0)
    {
LABEL_13:
      llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v7 - 32));
      continue;
    }
  }
  for (uint64_t j = (void *)*((void *)a2 + 6); j != (void *)((char *)a2 + 40); uint64_t j = (void *)j[1])
  {
    if (j) {
      unint64_t v9 = j - 6;
    }
    else {
      unint64_t v9 = 0;
    }
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v9[3]);
    uint64_t v10 = (const llvm::Value *)*(v9 - 4);
    if (v10) {
      llvm::TypeFinder::incorporateValue(this, v10);
    }
  }
  for (uint64_t k = (void *)*((void *)a2 + 8); k != (void *)((char *)a2 + 56); uint64_t k = (void *)k[1])
  {
    unint64_t v12 = k - 7;
    if (!k) {
      unint64_t v12 = 0;
    }
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v12[3]);
  }
  unsigned int v50 = v52;
  uint64_t v51 = 0x400000000;
  unsigned int v47 = a2;
  uint64_t v48 = (const llvm::Module *)((char *)a2 + 24);
  uint64_t v13 = (const llvm::Module *)*((void *)a2 + 4);
  if (v13 != (const llvm::Module *)((char *)a2 + 24))
  {
    do
    {
      if (v13) {
        uint64_t v14 = (char *)v13 - 56;
      }
      else {
        uint64_t v14 = 0;
      }
      llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v14 + 3));
      llvm::TypeFinder::incorporateAttributes((uint64_t)this, *((void *)v14 + 14));
      int v15 = *((_DWORD *)v14 + 5);
      int v49 = v13;
      if ((v15 & 0x40000000) != 0)
      {
        uint64_t v17 = (const llvm::Value **)*((void *)v14 - 1);
        uint64_t v16 = v15 & 0x7FFFFFF;
        if (v16)
        {
LABEL_36:
          uint64_t v18 = 32 * v16;
          do
          {
            int v19 = *v17;
            v17 += 4;
            llvm::TypeFinder::incorporateValue(this, v19);
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        uint64_t v16 = v15 & 0x7FFFFFF;
        uint64_t v17 = (const llvm::Value **)&v14[-32 * v16];
        if (v16) {
          goto LABEL_36;
        }
      }
      uint64_t v20 = llvm::Function::args((llvm::Function *)v14);
      if ((const llvm::Value *)v20 != v21)
      {
        unint64_t v22 = (const llvm::Value *)v20;
        uint64_t v23 = v21;
        do
        {
          llvm::TypeFinder::incorporateValue(this, v22);
          unint64_t v22 = (const llvm::Value *)((char *)v22 + 40);
        }
        while (v22 != v23);
      }
      int v24 = v14 + 72;
      uint64_t v25 = *((void *)v14 + 10);
      while (2)
      {
        if ((char *)v25 != v24)
        {
          uint64_t v26 = v25 - 24;
          if (!v25) {
            uint64_t v26 = 0;
          }
          uint64_t v27 = v26 + 40;
          uint64_t v28 = *(void *)(v26 + 48);
LABEL_46:
          if (v28 == v27)
          {
            uint64_t v25 = *(void *)(v25 + 8);
            continue;
          }
          if (v28) {
            uint64_t v29 = v28 - 24;
          }
          else {
            uint64_t v29 = 0;
          }
          llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v29);
          int v30 = *(_DWORD *)(v29 + 20);
          if ((v30 & 0x40000000) != 0)
          {
            unsigned int v32 = *(unsigned __int8 ***)(v29 - 8);
            uint64_t v31 = v30 & 0x7FFFFFF;
            if (!v31) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v31 = v30 & 0x7FFFFFF;
            unsigned int v32 = (unsigned __int8 **)(v29 - 32 * v31);
            if (!v31)
            {
LABEL_59:
              int v35 = *(unsigned __int8 *)(v29 + 16);
              if (v28 && v35 == 62)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                int v35 = *(unsigned __int8 *)(v29 + 16);
              }
              if (v28 && v35 == 59)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                int v35 = *(unsigned __int8 *)(v29 + 16);
              }
              unsigned int v36 = v35 - 33;
              BOOL v37 = v36 > 0x33;
              uint64_t v38 = (1 << v36) & 0x8000000000041;
              if (!v37 && v38 != 0) {
                llvm::TypeFinder::incorporateAttributes((uint64_t)this, *(void *)(v29 + 64));
              }
              llvm::Value::getAllMetadata((uint64_t ***)v29, (unsigned int *)&v50);
              if (v51)
              {
                uint64_t v40 = 16 * v51;
                uint64_t v41 = (const llvm::MDNode **)((char *)v50 + 8);
                do
                {
                  unint64_t v42 = *v41;
                  v41 += 2;
                  llvm::TypeFinder::incorporateMDNode(this, v42);
                  v40 -= 16;
                }
                while (v40);
              }
              LODWORD(v51) = 0;
              uint64_t v28 = *(void *)(v28 + 8);
              goto LABEL_46;
            }
          }
          uint64_t v33 = 32 * v31;
          do
          {
            uint64_t v34 = *v32;
            if (*v32 && v34[16] <= 0x1Bu) {
              llvm::TypeFinder::incorporateValue(this, (const llvm::Value *)v34);
            }
            v32 += 4;
            v33 -= 32;
          }
          while (v33);
          goto LABEL_59;
        }
        break;
      }
      uint64_t v13 = (const llvm::Module *)*((void *)v49 + 1);
    }
    while (v13 != v48);
  }
  for (uint64_t m = (void *)*((void *)v47 + 10); m != (void *)((char *)v47 + 72); uint64_t m = (void *)m[1])
  {
    uint64_t v44 = *(unsigned int *)(m[6] + 8);
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 8 * v44;
      do
      {
        llvm::TypeFinder::incorporateMDNode(this, *(const llvm::MDNode **)(*(void *)m[6] + v45));
        v45 += 8;
      }
      while (v46 != v45);
    }
  }
  if (v50 != v52) {
    free(v50);
  }
}

void llvm::TypeFinder::incorporateType(llvm::TypeFinder *this, llvm::Type *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  size_t v4 = (char *)this + 72;
  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v28, (uint64_t)this + 72, (uint64_t *)&v26);
  if (v30[0])
  {
    uint64_t v28 = v30;
    uint64_t v29 = 0x400000000;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, (uint64_t)a2);
    unsigned int v5 = v29;
    do
    {
      uint64_t v6 = *((void *)v28 + v5 - 1);
      LODWORD(v29) = v5 - 1;
      uint64_t v26 = (llvm::Type *)v6;
      if (v6) {
        BOOL v7 = *(unsigned char *)(v6 + 8) == 16;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7 && (!*((unsigned char *)this + 120) || *(void *)(v6 + 24)))
      {
        unint64_t v9 = (uint64_t *)*((void *)this + 13);
        unint64_t v8 = *((void *)this + 14);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *((void *)this + 12);
          uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            abort();
          }
          uint64_t v13 = v8 - v11;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)this + 112, v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (uint64_t *)&v16[8 * v12];
          *uint64_t v17 = v6;
          uint64_t v10 = v17 + 1;
          int v19 = (char *)*((void *)this + 12);
          uint64_t v18 = (char *)*((void *)this + 13);
          if (v18 != v19)
          {
            do
            {
              uint64_t v20 = *((void *)v18 - 1);
              v18 -= 8;
              *--uint64_t v17 = v20;
            }
            while (v18 != v19);
            uint64_t v18 = (char *)*((void *)this + 12);
          }
          *((void *)this + 12) = v17;
          *((void *)this + 13) = v10;
          *((void *)this + 14) = &v16[8 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          uint64_t *v9 = v6;
          uint64_t v10 = v9 + 1;
        }
        *((void *)this + 13) = v10;
        uint64_t v6 = (uint64_t)v26;
      }
      uint64_t v21 = *(unsigned int *)(v6 + 12);
      if (v21)
      {
        uint64_t v22 = 8 * v21;
        uint64_t v23 = *(void *)(v6 + 16) - 8;
        do
        {
          uint64_t v24 = *(void *)(v23 + v22);
          uint64_t v25 = v24;
          llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v27, (uint64_t)v4, &v25);
          if (v27[16]) {
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, v24);
          }
          v22 -= 8;
        }
        while (v22);
      }
      unsigned int v5 = v29;
    }
    while (v29);
    if (v28 != v30) {
      free(v28);
    }
  }
}

void llvm::TypeFinder::incorporateValue(llvm::TypeFinder *this, const llvm::Value *a2)
{
  uint64_t v2 = a2;
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 23)
  {
    while (1)
    {
      unsigned int v5 = (const llvm::MDNode *)*((void *)v2 + 3);
      int v6 = llvm::MDNode::classof(v5);
      if (v5 && v6 != 0) {
        break;
      }
      unint64_t v8 = (unsigned __int8 *)*((void *)v2 + 3);
      if (*v8 - 3 < 0xFFFFFFFE) {
        return;
      }
      uint64_t v2 = (const llvm::Value *)*((void *)v8 + 16);
      int v4 = *((unsigned __int8 *)v2 + 16);
      if (v2) {
        BOOL v9 = v4 == 23;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_13;
      }
    }
    llvm::TypeFinder::incorporateMDNode(this, v5);
  }
  else
  {
LABEL_13:
    uint64_t v17 = v2;
    if ((v4 - 21) >= 0xFFFFFFEF)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this, &v17, (uint64_t)v18);
      if (v18[16])
      {
        llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v17);
        uint64_t v10 = v17;
        unsigned int v11 = *((unsigned __int8 *)v17 + 16);
        if (v11 <= 0x1B)
        {
          if (v11 == 5 && *((_WORD *)v17 + 9) == 34)
          {
            llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v17 + 3));
            uint64_t v10 = v17;
          }
          int v12 = *((_DWORD *)v10 + 5);
          if ((v12 & 0x40000000) != 0)
          {
            uint64_t v14 = (const llvm::Value **)*((void *)v10 - 1);
            uint64_t v13 = v12 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v13 = v12 & 0x7FFFFFF;
            uint64_t v14 = (const llvm::Value **)((char *)v10 - 32 * v13);
          }
          if (v13)
          {
            uint64_t v15 = 32 * v13;
            do
            {
              uint64_t v16 = *v14;
              v14 += 4;
              llvm::TypeFinder::incorporateValue(this, v16);
              v15 -= 32;
            }
            while (v15);
          }
        }
      }
    }
  }
}

void llvm::TypeFinder::incorporateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v5 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(v4, *(_DWORD *)(v5 + 16), a2, &v14))return; {
  unsigned int v6 = *(_DWORD *)(v5 + 16);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (4 * v7 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_26;
  }
  if (v6 + ~v7 - *(_DWORD *)(a1 + 60) <= v6 >> 3)
  {
LABEL_26:
    llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow(v5, v6);
    uint64_t v14 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), v2, &v14);
  }
  unint64_t v8 = v14;
  ++*(_DWORD *)(a1 + 56);
  if (*v8 != -4) {
    --*(_DWORD *)(a1 + 60);
  }
  uint64_t *v8 = v2;
  if (v2) {
    BOOL v9 = (void *)(v2 + 40);
  }
  else {
    BOOL v9 = 0;
  }
  if (v2) {
    v2 += 40 + 8 * *(unsigned int *)(v2 + 8);
  }
  while (v9 != (void *)v2)
  {
    uint64_t v10 = *v9;
    if (*v9) {
      unsigned int v11 = (uint64_t *)(*v9 + 48);
    }
    else {
      unsigned int v11 = 0;
    }
    if (v10) {
      uint64_t v12 = *v9 + 48 + 8 * *(unsigned int *)(v10 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    while (v11 != (uint64_t *)v12)
    {
      uint64_t v13 = *v11;
      if (*v11)
      {
        if (*(unsigned char *)(v13 + 8) == 3) {
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)a1, *(llvm::Type **)(v13 + 16));
        }
      }
      ++v11;
    }
    ++v9;
  }
}

uint64_t llvm::TypeFinder::incorporateMDNode(llvm::TypeFinder *this, const llvm::MDNode *a2)
{
  uint64_t v5 = (char *)this + 24;
  uint64_t v4 = *((void *)this + 3);
  int v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(v4, *((_DWORD *)v5 + 4), (uint64_t)a2, &v19);
  if (result) {
    return result;
  }
  unsigned int v7 = *((_DWORD *)v5 + 4);
  int v8 = *((_DWORD *)this + 8);
  if (4 * v8 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v8 - *((_DWORD *)this + 9) > v7 >> 3)
  {
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow((uint64_t)v5, v7);
  int v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*((void *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, &v19);
LABEL_4:
  BOOL v9 = v19;
  ++*((_DWORD *)this + 8);
  if (*v9 != -4096) {
    --*((_DWORD *)this + 9);
  }
  void *v9 = a2;
  if (*(unsigned char *)a2 == 33)
  {
    uint64_t v10 = *((unsigned int *)a2 + 6);
    if (v10)
    {
      unsigned int v11 = (uint64_t *)*((void *)a2 + 2);
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11++;
        uint64_t result = llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v13 + 128));
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    unint64_t v14 = *((void *)a2 - 2);
    if ((v14 & 2) != 0)
    {
      uint64_t v15 = (const llvm::Value ***)*((void *)a2 - 4);
      uint64_t v16 = *((unsigned int *)a2 - 6);
      if (!*((_DWORD *)a2 - 6)) {
        return result;
      }
    }
    else
    {
      uint64_t v15 = (const llvm::Value ***)((char *)a2 - 8 * ((v14 >> 2) & 0xF) - 16);
      uint64_t v16 = (v14 >> 6) & 0xF;
      if (!v16) {
        return result;
      }
    }
    uint64_t v17 = 8 * v16;
    do
    {
      uint64_t v18 = *v15;
      if (*v15)
      {
        uint64_t result = llvm::MDNode::classof(*v15);
        if (result)
        {
          uint64_t result = llvm::TypeFinder::incorporateMDNode(this, (const llvm::MDNode *)v18);
        }
        else if (*(unsigned char *)v18 == 1)
        {
          uint64_t result = llvm::TypeFinder::incorporateValue(this, v18[16]);
        }
      }
      ++v15;
      v17 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unsigned int v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unsigned int v6 = v10;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *uint64_t v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    do
    {
      *result++ = -4;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void llvm::Use::zap(void *__p, char *a2, int a3)
{
  if (a2 != __p)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v4 = *((void *)v3 - 4);
      v3 -= 32;
      if (v4)
      {
        **((void **)a2 - 2) = *((void *)a2 - 3);
        uint64_t v5 = *((void *)a2 - 3);
        if (v5) {
          *(void *)(v5 + 16) = *((void *)a2 - 2);
        }
      }
      a2 = v3;
    }
    while (v3 != __p);
  }
  if (a3) {
    operator delete(__p);
  }
}

void llvm::User::growHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  int v6 = *((_DWORD *)this + 5);
  uint64_t v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x40000000) != 0) {
    unsigned int v8 = (uint64_t *)*((void *)this - 1);
  }
  else {
    unsigned int v8 = (uint64_t *)((char *)this - 32 * v7);
  }
  uint64_t v9 = a2;
  if (a3) {
    size_t v10 = 40 * a2;
  }
  else {
    size_t v10 = 32 * a2;
  }
  uint64_t v11 = operator new(v10);
  *((void *)this - 1) = v11;
  if (a2)
  {
    uint64_t v12 = v11;
    do
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      void v12[3] = this;
      v12 += 4;
    }
    while (v12 != &v11[4 * a2]);
  }
  int v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x40000000) != 0) {
    uint64_t v14 = (char *)v11;
  }
  else {
    uint64_t v14 = (char *)this - 32 * (v13 & 0x7FFFFFF);
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Use *,llvm::Use *,llvm::Use *>((uint64_t)&v15, v8, &v8[4 * v7], (uint64_t)v14);
  if (v7 && a3) {
    memmove(&v14[32 * v9], &v8[4 * v7], 8 * v7);
  }
  llvm::Use::zap(v8, (char *)&v8[4 * v7], 1);
}

void *llvm::User::operator new(llvm::User *this, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = operator new((size_t)this + 32 * a2);
  uint64_t result = &v4[4 * v3];
  *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
  if (a2)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      void v4[3] = result;
      v4 += 4;
    }
    while (v4 != result);
  }
  return result;
}

char *llvm::User::operator new(llvm::User *this, unsigned int a2, unsigned int a3)
{
  int v5 = a3 != 0;
  if (a3) {
    uint64_t v6 = a3 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = a2;
  unsigned int v8 = (char *)operator new((size_t)this + 32 * a2 + v6);
  uint64_t v9 = &v8[v6];
  uint64_t v10 = (uint64_t)&v8[32 * v7 + v6];
  *(_DWORD *)(v10 + 20) = a2 & 0x7FFFFFF | (v5 << 31) | *(_DWORD *)(v10 + 20) & 0x38000000;
  if (a2)
  {
    do
    {
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = v10;
      v9 += 32;
    }
    while (v9 != (char *)v10);
  }
  if (a3) {
    *(void *)&v8[a3] = a3;
  }
  return &v8[32 * v7 + v6];
}

void llvm::User::operator delete(void **a1)
{
  int v2 = *((_DWORD *)a1 + 5);
  if ((v2 & 0x40000000) != 0)
  {
    llvm::Use::zap(*(a1 - 1), (char *)*(a1 - 1) + 32 * (v2 & 0x7FFFFFF), 1);
    uint64_t v4 = (char *)(a1 - 1);
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    uint64_t v4 = (char *)&a1[-4 * v3];
    if (v3)
    {
      int v5 = a1 - 2;
      uint64_t v6 = -32 * v3;
      do
      {
        if (*(v5 - 2))
        {
          *(void *)*int v5 = *(v5 - 1);
          uint64_t v7 = (uint64_t)*(v5 - 1);
          if (v7) {
            *(void *)(v7 + 16) = *v5;
          }
        }
        v5 -= 4;
        v6 += 32;
      }
      while (v6);
    }
    if (v2 < 0) {
      uint64_t v4 = &v4[-*((void *)v4 - 1) - 8];
    }
  }
  operator delete(v4);
}

void llvm::Value::~Value(llvm::Value *this, llvm::Value *a2)
{
  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  }
  int v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
  {
    llvm::ValueAsMetadata::handleDeletion(this, a2);
    int v3 = *((_DWORD *)this + 5);
  }
  if ((v3 & 0x20000000) != 0) {
    llvm::Value::clearMetadata((uint64_t)this);
  }
  llvm::Value::destroyValueName((uint64_t ***)this);
}

void llvm::ValueHandleBase::ValueIsDeleted(llvm::ValueHandleBase *this, llvm::Value *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  int v2 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(void ***)this + 2456), &v4)[1];
  llvm::ValueHandleBase::ValueHandleBase(&v5, 0, v2);
  do
  {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v5);
    uint64_t v6 = (uint64_t *)v2[1];
    v2[1] = (uint64_t)&v5;
    unint64_t v5 = v5 & 7 | (unint64_t)(v2 + 1);
    if (v6) {
      *uint64_t v6 = *v6 & 7 | (unint64_t)&v6;
    }
    int v3 = (*(_DWORD *)v2 >> 1) & 3;
    if ((v3 - 2) >= 2)
    {
      if (v3 == 1) {
        (*(void (**)(uint64_t *))(*(v2 - 1) + 8))(v2 - 1);
      }
    }
    else
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v2, 0);
    }
    int v2 = v6;
  }
  while (v6);
  if (v7 != -8192 && v7 != -4096)
  {
    if (v7) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v5);
    }
  }
}

void llvm::Value::destroyValueName(uint64_t ***this)
{
  uint64_t ValueName = llvm::Value::getValueName(this);
  if (ValueName) {
    MEMORY[0x263E500A0](ValueName, 8);
  }
  llvm::Value::setValueName((uint64_t)this, 0);
}

void llvm::Value::deleteValue(void (**this)(void), llvm::Value *a2)
{
  switch(*((unsigned char *)this + 16))
  {
    case 0x16:
      llvm::BasicBlock::~BasicBlock((llvm::BasicBlock *)this);
      goto LABEL_15;
    case 0x17:
      llvm::MetadataAsValue::~MetadataAsValue((llvm::MetadataAsValue *)this);
      goto LABEL_15;
    case 0x18:
      llvm::InlineAsm::~InlineAsm((void **)this, a2);
      goto LABEL_15;
    case 0x19:
    case 0x1A:
    case 0x1B:
      int v3 = this[3];
      v3();
      return;
    case 0x1C:
    case 0x56:
    case 0x57:
      __break(1u);
      JUMPOUT(0x261E60D38);
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5E:
    case 0x5F:
      llvm::Instruction::~Instruction((llvm::UndefValue **)this, a2);
      goto LABEL_3;
    case 0x5B:
    case 0x5C:
    case 0x5D:
      llvm::ShuffleVectorInst::~ShuffleVectorInst((llvm::ShuffleVectorInst *)this, a2);
LABEL_3:
      llvm::User::operator delete(v2);
      return;
    default:
      llvm::Value::~Value((llvm::Value *)this, a2);
LABEL_15:
      JUMPOUT(0x263E500B0);
  }
}

void llvm::InlineAsm::~InlineAsm(void **this, llvm::Value *a2)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  llvm::Value::~Value((llvm::Value *)this, a2);
}

void llvm::ShuffleVectorInst::~ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Type *a2)
{
  int v3 = (char *)*((void *)this + 8);
  if (v3 != (char *)this + 80) {
    free(v3);
  }
  llvm::Instruction::~Instruction((llvm::UndefValue **)this, a2);
}

uint64_t llvm::Value::getValueName(uint64_t ***this)
{
  if ((*((unsigned char *)this + 23) & 0x10) == 0) {
    return 0;
  }
  uint64_t v2 = ***this;
  unint64_t v5 = (llvm::Value *)this;
  uint64_t v6 = 0;
  int v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v2 + 144), &v5, &v6);
  uint64_t v4 = v6;
  if (!v3) {
    uint64_t v4 = *(void *)(v2 + 144) + 16 * *(unsigned int *)(v2 + 160);
  }
  return *(void *)(v4 + 8);
}

void llvm::Value::setValueName(uint64_t a1, uint64_t a2)
{
  int v3 = **(void ***)a1;
  int v4 = *(_DWORD *)(a1 + 20);
  if (a2)
  {
    *(_DWORD *)(a1 + 20) = v4 | 0x10000000;
    unint64_t v5 = (uint64_t *)(*v3 + 144);
    uint64_t v7 = a1;
    llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v5, &v7)[1] = a2;
  }
  else
  {
    if ((v4 & 0x10000000) != 0)
    {
      uint64_t v6 = *v3 + 144;
      uint64_t v7 = a1;
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v6, &v7);
      int v4 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 20) = v4 & 0xEFFFFFFF;
  }
}

void llvm::Value::setNameImpl(llvm::Value *this, const llvm::Twine *a2)
{
  unsigned char v21[32] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(***(void ***)this + 2720) && *((unsigned __int8 *)this + 16) >= 4u)
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      return;
    }
    int v3 = 0;
  }
  else
  {
    int v3 = 1;
  }
  if (*((unsigned __int8 *)a2 + 32) > 1u || (*((unsigned char *)this + 23) & 0x10) != 0)
  {
    int v19 = v21;
    long long v20 = xmmword_261E8A780;
    if (v3)
    {
      unint64_t v5 = (uint64_t *)llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v19);
      unint64_t v6 = v4;
      uint64_t v7 = (char *)this + 20;
      if ((*((unsigned char *)this + 23) & 0x10) == 0)
      {
        if (!v4)
        {
LABEL_24:
          if (v19 != v21) {
            free(v19);
          }
          return;
        }
LABEL_15:
        uint64_t v17 = 0;
        if ((getSymTab((uint64_t)this, &v17) & 1) == 0)
        {
          uint64_t v11 = v17;
          if (v17)
          {
            if ((v7[3] & 0x10) == 0
              || (uint64_t v12 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this),
                  llvm::StringMapImpl::RemoveKey((uint64_t)v11, (uint64_t *)((char *)v12 + v11[5]), *v12),
                  llvm::Value::destroyValueName((uint64_t ***)this),
                  v6))
            {
              uint64_t ValueName = llvm::ValueSymbolTable::createValueName(v11, v5, v6, (unint64_t)this);
              llvm::Value::setValueName((uint64_t)this, (uint64_t)ValueName);
            }
          }
          else
          {
            llvm::Value::destroyValueName((uint64_t ***)this);
            if (v6)
            {
              uint64_t v14 = operator new(v6 + 17, (std::align_val_t)8uLL);
              memcpy(v14 + 2, v5, v6);
              *((unsigned char *)v14 + v6 + 16) = 0;
              *uint64_t v14 = v6;
              v14[1] = 0;
              char v15 = **(void ***)this;
              *((_DWORD *)this + 5) |= 0x10000000u;
              uint64_t v16 = (uint64_t *)(*v15 + 144);
              uint64_t v18 = this;
              llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v16, &v18)[1] = v14;
              *(void *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
            }
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        goto LABEL_24;
      }
      unint64_t v6 = 0;
      uint64_t v7 = (char *)this + 20;
      unint64_t v5 = (uint64_t *)&str_3_24;
    }
    uint64_t v8 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
    uint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    if (v10 == v6 && (!v6 || !memcmp(v9, v5, v6))) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
}

uint64_t getSymTab(uint64_t a1, void *a2)
{
  *a2 = 0;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 >= 0x1C)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      return v3;
    }
    uint64_t v3 = *(void *)(v3 + 56);
    if (!v3) {
      return v3;
    }
    goto LABEL_17;
  }
  if (a1 && v2 == 22)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v3) {
      return v3;
    }
    goto LABEL_17;
  }
  if (a1 && v2 <= 3)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      return v3;
    }
    unint64_t v4 = (void *)(v3 + 112);
LABEL_18:
    uint64_t v3 = 0;
    *a2 = *v4;
    return v3;
  }
  uint64_t v3 = 1;
  if (a1)
  {
    if (v2 == 21)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
LABEL_17:
        unint64_t v4 = (void *)(v3 + 104);
        goto LABEL_18;
      }
    }
  }
  return v3;
}

void llvm::Value::setName(llvm::Value *this, const llvm::Twine *a2)
{
  llvm::Value::setNameImpl(this, a2);
  if (this && !*((unsigned char *)this + 16))
  {
    llvm::Function::recalculateIntrinsicID(this);
  }
}

void llvm::Value::takeName(llvm::Value *this, llvm::Value *a2)
{
  uint64_t v12 = 0;
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      return;
    }
LABEL_3:
    if (!getSymTab((uint64_t)this, &v12))
    {
      unint64_t v4 = v12;
      goto LABEL_12;
    }
LABEL_7:
    __int16 v11 = 257;
    llvm::Value::setName(a2, (const llvm::Twine *)v10);
    return;
  }
  if (getSymTab((uint64_t)this, &v12))
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      return;
    }
    goto LABEL_7;
  }
  unint64_t v4 = v12;
  if (v12)
  {
    uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
    llvm::StringMapImpl::RemoveKey((uint64_t)v4, (uint64_t *)((char *)ValueName + v4[5]), *ValueName);
  }
  llvm::Value::destroyValueName((uint64_t ***)this);
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    if (v4)
    {
LABEL_12:
      v10[0] = 0;
      getSymTab((uint64_t)a2, v10);
      uint64_t v6 = v10[0];
      if (v4 == (unsigned int *)v10[0])
      {
        uint64_t v9 = llvm::Value::getValueName((uint64_t ***)a2);
        llvm::Value::setValueName((uint64_t)this, v9);
        llvm::Value::setValueName((uint64_t)a2, 0);
        *(void *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
      }
      else
      {
        if (v10[0])
        {
          uint64_t v7 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)a2);
          llvm::StringMapImpl::RemoveKey(v6, (uint64_t *)((char *)v7 + *(unsigned int *)(v6 + 20)), *v7);
        }
        uint64_t v8 = llvm::Value::getValueName((uint64_t ***)a2);
        llvm::Value::setValueName((uint64_t)this, v8);
        llvm::Value::setValueName((uint64_t)a2, 0);
        *(void *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
        if (v4) {
          llvm::ValueSymbolTable::reinsertValue((llvm::ValueSymbolTable *)v4, (uint64_t ***)this);
        }
      }
      return;
    }
    goto LABEL_3;
  }
}

void llvm::Value::doRAUW(llvm::ValueAsMetadata *this, llvm::Value *a2, llvm::Value *a3, __n128 a4)
{
  int v4 = (int)a3;
  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsRAUWd(this, a2, a3);
  }
  if (v4 == 1 && (*((unsigned char *)this + 23) & 8) != 0) {
    llvm::ValueAsMetadata::handleRAUW(this, a2, a3);
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)((char *)a2 + 8);
    do
    {
      uint64_t v9 = *(unsigned __int8 **)(v7 + 24);
      if (v9) {
        BOOL v10 = v9[16] - 21 >= 0xFFFFFFEF;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        llvm::Constant::handleOperandChange((llvm::Constant *)v9, this, a2, a4);
      }
      else
      {
        if (*(void *)v7)
        {
          **(void **)(v7 + 16) = *(void *)(v7 + 8);
          uint64_t v11 = *(void *)(v7 + 8);
          if (v11) {
            *(void *)(v11 + 16) = *(void *)(v7 + 16);
          }
        }
        *(void *)uint64_t v7 = a2;
        if (a2)
        {
          uint64_t v12 = *v8;
          *(void *)(v7 + 8) = *v8;
          if (v12) {
            *(void *)(v12 + 16) = v7 + 8;
          }
          *(void *)(v7 + 16) = v8;
          uint64_t *v8 = v7;
        }
      }
      uint64_t v7 = *((void *)this + 1);
    }
    while (v7);
  }
  if (*((unsigned char *)this + 16) == 22)
  {
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
  }
}

void llvm::ValueHandleBase::ValueIsRAUWd(llvm::ValueHandleBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = this;
  int v4 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(void ***)this + 2456), &v6)[1];
  llvm::ValueHandleBase::ValueHandleBase(&v7, 0, v4);
  do
  {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v7);
    uint64_t v8 = (uint64_t *)v4[1];
    v4[1] = (uint64_t)&v7;
    unint64_t v7 = v7 & 7 | (unint64_t)(v4 + 1);
    if (v8) {
      uint64_t *v8 = *v8 & 7 | (unint64_t)&v8;
    }
    int v5 = (*(_DWORD *)v4 >> 1) & 3;
    if (v5 == 1)
    {
      (*(void (**)(uint64_t *, llvm::Value *))(*(v4 - 1) + 16))(v4 - 1, a2);
    }
    else if (v5 == 3)
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v4, (uint64_t)a2);
    }
    int v4 = v8;
  }
  while (v8);
  if (v9 != -8192 && v9 != -4096)
  {
    if (v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v7);
    }
  }
}

llvm::Value *llvm::Value::stripPointerCasts(llvm::Value *this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v1;
  }
  uint64_t v11 = v15;
  uint64_t v12 = v15;
  uint64_t v13 = 4;
  int v14 = 0;
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v11, this, (uint64_t)v10);
  while (1)
  {
    unsigned int v2 = *((unsigned __int8 *)v1 + 16);
    if (v2 > 0x1B) {
      break;
    }
    if (v2 != 5) {
      goto LABEL_29;
    }
    int v3 = *((unsigned __int16 *)v1 + 9);
    if (v3 == 34) {
      goto LABEL_13;
    }
    if (v3 == 49) {
      goto LABEL_22;
    }
    if (v3 != 50) {
      goto LABEL_29;
    }
LABEL_20:
    int v5 = *((_DWORD *)v1 + 5);
    if ((v5 & 0x40000000) != 0) {
      uint64_t v6 = (const void **)*((void *)v1 - 1);
    }
    else {
      uint64_t v6 = (const void **)((char *)v1 - 32 * (v5 & 0x7FFFFFF));
    }
    ArgOperandWithAttribute = (llvm::Value *)*v6;
LABEL_28:
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v11, ArgOperandWithAttribute, (uint64_t)v10);
    uint64_t v1 = ArgOperandWithAttribute;
    if (!v10[16]) {
      goto LABEL_29;
    }
  }
  if (*((unsigned __int8 *)v1 + 16) <= 0x4Cu)
  {
    if (v2 == 33 || v2 == 39) {
      goto LABEL_18;
    }
    if (v2 != 62) {
      goto LABEL_29;
    }
LABEL_13:
    if (!llvm::GEPOperator::hasAllZeroIndices(v1)) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (v2 != 77)
  {
    if (v2 != 78)
    {
      if (v2 != 84) {
        goto LABEL_29;
      }
LABEL_18:
      ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)v1, 46);
      if (!ArgOperandWithAttribute) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    goto LABEL_20;
  }
LABEL_22:
  int v7 = *((_DWORD *)v1 + 5);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = (llvm::Value **)*((void *)v1 - 1);
  }
  else {
    uint64_t v8 = (llvm::Value **)((char *)v1 - 32 * (v7 & 0x7FFFFFF));
  }
  ArgOperandWithAttribute = *v8;
  uint64_t v1 = *v8;
  if (*(unsigned char *)(*(void *)*v8 + 8) == 15) {
    goto LABEL_28;
  }
LABEL_29:
  if (v12 != v11) {
    free(v12);
  }
  return v1;
}

llvm::Value *llvm::Value::stripPointerCastsAndAliases(llvm::Value *this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v1;
  }
  uint64_t v11 = v15;
  uint64_t v12 = v15;
  uint64_t v13 = 4;
  int v14 = 0;
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v11, this, (uint64_t)v10);
  while (1)
  {
    unsigned int v2 = *((unsigned __int8 *)v1 + 16);
    if (v2 > 0x1B) {
      break;
    }
    if (v2 != 1)
    {
      if (v2 != 5) {
        goto LABEL_31;
      }
      int v3 = *((unsigned __int16 *)v1 + 9);
      if (v3 != 34)
      {
        if (v3 == 49) {
          goto LABEL_24;
        }
        if (v3 != 50) {
          goto LABEL_31;
        }
        goto LABEL_21;
      }
LABEL_14:
      if (!llvm::GEPOperator::hasAllZeroIndices(v1)) {
        goto LABEL_31;
      }
LABEL_21:
      int v5 = *((_DWORD *)v1 + 5);
      if ((v5 & 0x40000000) != 0) {
        uint64_t v6 = (const void **)*((void *)v1 - 1);
      }
      else {
        uint64_t v6 = (const void **)((char *)v1 - 32 * (v5 & 0x7FFFFFF));
      }
      goto LABEL_27;
    }
    uint64_t v6 = (const void **)((char *)v1 - 32);
LABEL_27:
    ArgOperandWithAttribute = (llvm::Value *)*v6;
LABEL_30:
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v11, ArgOperandWithAttribute, (uint64_t)v10);
    uint64_t v1 = ArgOperandWithAttribute;
    if (!v10[16]) {
      goto LABEL_31;
    }
  }
  if (*((unsigned __int8 *)v1 + 16) <= 0x4Cu)
  {
    if (v2 == 33 || v2 == 39) {
      goto LABEL_19;
    }
    if (v2 != 62) {
      goto LABEL_31;
    }
    goto LABEL_14;
  }
  if (v2 != 77)
  {
    if (v2 != 78)
    {
      if (v2 != 84) {
        goto LABEL_31;
      }
LABEL_19:
      ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)v1, 46);
      if (!ArgOperandWithAttribute) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    goto LABEL_21;
  }
LABEL_24:
  int v7 = *((_DWORD *)v1 + 5);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = (llvm::Value **)*((void *)v1 - 1);
  }
  else {
    uint64_t v8 = (llvm::Value **)((char *)v1 - 32 * (v7 & 0x7FFFFFF));
  }
  ArgOperandWithAttribute = *v8;
  uint64_t v1 = *v8;
  if (*(unsigned char *)(*(void *)*v8 + 8) == 15) {
    goto LABEL_30;
  }
LABEL_31:
  if (v12 != v11) {
    free(v12);
  }
  return v1;
}

const void **llvm::Value::stripAndAccumulateConstantOffsets(const void *a1, llvm::DataLayout *a2, llvm::APInt *a3, char a4, int a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v12 = (uint64_t)a1;
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
    int v13 = *(unsigned __int8 *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  else {
    int v13 = *(_DWORD *)(*(void *)a1 + 8);
  }
  if (v13 != 15) {
    return (const void **)a1;
  }
  unsigned int v31 = *((_DWORD *)a3 + 2);
  uint64_t v43 = v47;
  uint64_t v44 = v47;
  uint64_t v45 = 4;
  int v46 = 0;
  int v14 = llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v43, a1, (uint64_t)&v40);
  while (1)
  {
    char v15 = v14;
    unsigned int v16 = *(unsigned __int8 *)(v12 + 16);
    if (v16 > 0x1B) {
      break;
    }
    if (v16 == 1)
    {
      if (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v12)) {
        goto LABEL_40;
      }
      long long v20 = (uint64_t *)(v12 - 32);
      goto LABEL_26;
    }
    if (v16 == 5)
    {
      int v17 = *(unsigned __int16 *)(v12 + 18);
      if ((v17 - 49) < 2) {
        goto LABEL_15;
      }
      if (v17 != 34) {
        goto LABEL_40;
      }
      goto LABEL_29;
    }
LABEL_40:
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v43, (const void *)v12, (uint64_t)&v40);
    int v14 = v15;
    char v15 = (const void **)v12;
    if (!v42) {
      goto LABEL_66;
    }
  }
  uint64_t v18 = v16 - 33;
  if (v18 > 0x33) {
    goto LABEL_40;
  }
  if (((1 << v18) & 0x8000000000041) != 0)
  {
    uint64_t ArgOperandWithAttribute = llvm::CallBase::getArgOperandWithAttribute(v12, 46);
    if (ArgOperandWithAttribute) {
      uint64_t v22 = ArgOperandWithAttribute;
    }
    else {
      uint64_t v22 = v12;
    }
    if (!a5 || !llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)v12))
    {
      uint64_t v12 = v22;
      goto LABEL_40;
    }
    int v19 = *(_DWORD *)(v12 + 20);
LABEL_23:
    long long v20 = (uint64_t *)(v12 - 32 * (v19 & 0x7FFFFFF));
LABEL_26:
    uint64_t v12 = *v20;
    goto LABEL_40;
  }
  if (((1 << v18) & 0x300000000000) != 0)
  {
LABEL_15:
    int v19 = *(_DWORD *)(v12 + 20);
    if ((v19 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    long long v20 = *(uint64_t **)(v12 - 8);
    goto LABEL_26;
  }
  if (v18 != 29) {
    goto LABEL_40;
  }
LABEL_29:
  if ((a4 & 1) != 0 || (*(unsigned char *)(v12 + 17) & 2) != 0)
  {
    unsigned int v23 = *(_DWORD *)(*(void *)v12 + 8);
    if ((v23 & 0xFE) == 0x12) {
      unsigned int v23 = *(_DWORD *)(**(void **)(*(void *)v12 + 16) + 8);
    }
    uint64_t PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a2, v23 >> 8);
    llvm::APInt::APInt((llvm::APInt *)&v40, *(_DWORD *)(PointerAlignElem + 12), 0);
    if (!llvm::GEPOperator::accumulateConstantOffset(v12, a2, (uint64_t)&v40, a6, a7)
      || (unsigned int v25 = v41, v25 - llvm::APInt::getNumSignBits((llvm::APInt *)&v40) + 1 > v31))
    {
      int v26 = 1;
      char v15 = (const void **)v12;
      goto LABEL_36;
    }
    llvm::APInt::sextOrTrunc((llvm::APInt *)&v40, v31, (llvm::APInt *)&v38);
    if (a6)
    {
      BOOL v37 = 0;
      unsigned int v36 = *((_DWORD *)a3 + 2);
      if (v36 > 0x40) {
        operator new[]();
      }
      uint64_t v35 = *(void *)a3;
      llvm::APInt::sadd_ov(a3, (const llvm::APInt *)&v38, &v37, (uint64_t)&v33);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
        MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
      }
      *(void *)a3 = v33;
      *((_DWORD *)a3 + 2) = v34;
      BOOL v27 = v37;
      if (v37)
      {
        llvm::APInt::operator=(a3, (const llvm::APInt *)&v35);
        char v15 = (const void **)v12;
      }
      if (v36 >= 0x41 && v35) {
        MEMORY[0x263E50080](v35, 0x1000C8000313F17);
      }
      if (v27)
      {
        int v26 = 1;
        goto LABEL_61;
      }
    }
    else
    {
      llvm::APInt::operator+=((uint64_t)a3, &v38);
    }
    int v28 = *(_DWORD *)(v12 + 20);
    if ((v28 & 0x40000000) != 0) {
      uint64_t v29 = *(uint64_t **)(v12 - 8);
    }
    else {
      uint64_t v29 = (uint64_t *)(v12 - 32 * (v28 & 0x7FFFFFF));
    }
    int v26 = 0;
    uint64_t v12 = *v29;
LABEL_61:
    if (v39 >= 0x41 && v38) {
      MEMORY[0x263E50080](v38, 0x1000C8000313F17);
    }
LABEL_36:
    if (v41 >= 0x41 && v40) {
      MEMORY[0x263E50080](v40, 0x1000C8000313F17);
    }
    if (v26) {
      goto LABEL_66;
    }
    goto LABEL_40;
  }
  char v15 = (const void **)v12;
LABEL_66:
  if (v44 != v43) {
    free(v44);
  }
  return v15;
}

uint64_t llvm::Value::stripInBoundsOffsets(const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3 = (uint64_t)a1;
  if (*(unsigned char *)(*(void *)a1 + 8) != 15) {
    return v3;
  }
  char v15 = v19;
  unsigned int v16 = v19;
  uint64_t v17 = 4;
  int v18 = 0;
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v15, a1, (uint64_t)v14);
  while (1)
  {
    a2(a3, v3);
    unsigned int v6 = *(unsigned __int8 *)(v3 + 16);
    if (v6 > 0x1B) {
      break;
    }
    if (v6 != 5) {
      goto LABEL_29;
    }
    int v7 = *(unsigned __int16 *)(v3 + 18);
    if (v7 == 34) {
      goto LABEL_13;
    }
    if (v7 == 49) {
      goto LABEL_22;
    }
    if (v7 != 50) {
      goto LABEL_29;
    }
LABEL_20:
    int v9 = *(_DWORD *)(v3 + 20);
    if ((v9 & 0x40000000) != 0) {
      uint64_t v10 = *(const void ***)(v3 - 8);
    }
    else {
      uint64_t v10 = (const void **)(v3 - 32 * (v9 & 0x7FFFFFF));
    }
    uint64_t ArgOperandWithAttribute = *v10;
LABEL_28:
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v15, ArgOperandWithAttribute, (uint64_t)v14);
    uint64_t v3 = (uint64_t)ArgOperandWithAttribute;
    if (!v14[16]) {
      goto LABEL_29;
    }
  }
  if (*(unsigned __int8 *)(v3 + 16) <= 0x4Cu)
  {
    if (v6 == 33 || v6 == 39) {
      goto LABEL_18;
    }
    if (v6 != 62) {
      goto LABEL_29;
    }
LABEL_13:
    if ((*(unsigned char *)(v3 + 17) & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (v6 != 77)
  {
    if (v6 != 78)
    {
      if (v6 != 84) {
        goto LABEL_29;
      }
LABEL_18:
      uint64_t ArgOperandWithAttribute = (const void *)llvm::CallBase::getArgOperandWithAttribute(v3, 46);
      if (!ArgOperandWithAttribute) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    goto LABEL_20;
  }
LABEL_22:
  int v11 = *(_DWORD *)(v3 + 20);
  if ((v11 & 0x40000000) != 0) {
    uint64_t v12 = *(uint64_t **)(v3 - 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(v3 - 32 * (v11 & 0x7FFFFFF));
  }
  uint64_t ArgOperandWithAttribute = (const void *)*v12;
  uint64_t v3 = *v12;
  if (*(unsigned char *)(*(void *)*v12 + 8) == 15) {
    goto LABEL_28;
  }
LABEL_29:
  if (v16 != v15) {
    free(v16);
  }
  return v3;
}

uint64_t llvm::Value::getPointerAlignment(llvm::Value *this, const llvm::DataLayout *a2)
{
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0x14)
  {
    if (v4 == 21)
    {
      uint64_t result = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
      if ((unsigned __int16)result > 0xFFu) {
        return result;
      }
      uint64_t result = llvm::Argument::hasStructRetAttr(this);
      if (!result) {
        return result;
      }
      uint64_t ParamStructRetType = llvm::AttributeList::getParamStructRetType((llvm::AttributeList *)(*((void *)this + 3) + 112), *((_DWORD *)this + 8));
      uint64_t result = llvm::Type::isSized(ParamStructRetType, 0);
      if (!result) {
        return result;
      }
      uint64_t v10 = a2;
      int v11 = (llvm::Type *)ParamStructRetType;
LABEL_58:
      return llvm::DataLayout::getAlignment(v10, v11, 1);
    }
    if (v4 == 59) {
      return __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
    }
  }
  else
  {
    if (v4 - 2 < 2)
    {
      int v5 = (*((_DWORD *)this + 8) >> 17) & 0x3F;
      if (v5) {
        return (v5 - 1);
      }
      if (v4 == 3)
      {
        uint64_t v12 = *((void *)this + 3);
        uint64_t result = llvm::Type::isSized(v12, 0);
        if (!result) {
          return result;
        }
        if (llvm::GlobalValue::isStrongDefinitionForLinker(this))
        {
          return llvm::DataLayout::getPreferredAlign(a2, this);
        }
        uint64_t v10 = a2;
        int v11 = (llvm::Type *)v12;
        goto LABEL_58;
      }
      return 0;
    }
    if (!*((unsigned char *)this + 16))
    {
      if (*((unsigned __int16 *)a2 + 10) <= 0x100u) {
        uint64_t result = 256;
      }
      else {
        uint64_t result = *((unsigned __int16 *)a2 + 10);
      }
      if (*((_DWORD *)a2 + 6))
      {
        unsigned int v7 = *((_DWORD *)this + 8);
        if (((v7 >> 17) & 0x3F) != 0) {
          unsigned __int8 v8 = ((v7 >> 17) & 0x3F) - 1;
        }
        else {
          unsigned __int8 v8 = 0;
        }
        if (v8 <= result) {
          return result;
        }
        else {
          return v8;
        }
      }
      return result;
    }
  }
  if (v4 < 0x1C)
  {
    if (v4 <= 0x14)
    {
      unsigned int v13 = llvm::Value::stripPointerCasts(this);
      llvm::DataLayout::getIntPtrType(a2, *(llvm::Type **)this);
      uint64_t result = llvm::ConstantFoldCastInstruction((llvm *)0x2F, v13, v14, v15);
      if (!result) {
        return result;
      }
      if (*(unsigned char *)(result + 16) == 16)
      {
        unsigned int v16 = *(_DWORD *)(result + 32);
        if (v16 > 0x40)
        {
          unsigned int v18 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(result + 24));
        }
        else
        {
          unsigned int v17 = __clz(__rbit64(*(void *)(result + 24)));
          if (v16 >= v17) {
            unsigned int v18 = v17;
          }
          else {
            unsigned int v18 = *(_DWORD *)(result + 32);
          }
        }
        unsigned int v23 = __clz(1 << v18) ^ 0x3F;
        if (v18 >= 0x20) {
          return 32;
        }
        else {
          return v23;
        }
      }
    }
    return 0;
  }
  uint64_t result = 0;
  if ((int)v4 <= 59)
  {
    if (v4 != 33 && v4 != 39) {
      return result;
    }
LABEL_43:
    uint64_t result = llvm::AttributeList::getRetAlignment((llvm::Value *)((char *)this + 64));
    if ((unsigned __int16)result > 0xFFu) {
      return result;
    }
    uint64_t v19 = *((void *)this - 4);
    if (v19)
    {
      if (!*(unsigned char *)(v19 + 16) && *(void *)(v19 + 24) == *((void *)this + 9))
      {
        uint64_t v24 = *(void *)(v19 + 112);
        uint64_t result = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v24);
        if ((unsigned __int16)result > 0xFFu) {
          return result;
        }
      }
    }
    uint64_t v20 = *((void *)this - 4);
    if (v20)
    {
      if (!*(unsigned char *)(v20 + 16) && *(void *)(v20 + 24) == *((void *)this + 9))
      {
        uint64_t v24 = *(void *)(v20 + 112);
        uint64_t result = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v24);
        if ((unsigned __int16)result >= 0x100u) {
          return result;
        }
      }
    }
    return 0;
  }
  if (v4 != 60)
  {
    if (v4 != 84) {
      return result;
    }
    goto LABEL_43;
  }
  if (!*((void *)this + 6) && (*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t result = llvm::Value::getMetadata(this, 17);
  if (result)
  {
    unint64_t v21 = *(void *)(result - 16);
    if ((v21 & 2) != 0) {
      uint64_t v22 = *(void *)(result - 32);
    }
    else {
      uint64_t v22 = result - 16 - 8 * ((v21 >> 2) & 0xF);
    }
    return 63
         - __clz((unint64_t)llvm::APInt::getLimitedValue((uint64_t ***)(*(void *)(*(void *)v22 + 128) + 24), 0xFFFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  unsigned int v2 = (uint64_t ***)*((void *)this + 2);
  uint64_t v3 = ***v2;
  unsigned int v4 = (void *)(v3 + 2456);
  if (*((unsigned char *)v2 + 17))
  {
    uint64_t v20 = *((void *)this + 2);
    int v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v3 + 2456), &v20);
    uint64_t v15 = v14[1];
    uint64_t result = (uint64_t)(v14 + 1);
    *((void *)this + 1) = v15;
    *(void *)uint64_t result = this;
    *(void *)this = *(void *)this & 7 | result;
    unsigned int v16 = (unint64_t *)*((void *)this + 1);
    if (v16) {
      unint64_t *v16 = *v16 & 7 | ((unint64_t)this + 8);
    }
  }
  else
  {
    int v5 = (void *)*v4;
    uint64_t v20 = *((void *)this + 2);
    unsigned int v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v3 + 2456), &v20);
    uint64_t v8 = v6[1];
    uint64_t result = (uint64_t)(v6 + 1);
    *((void *)this + 1) = v8;
    *(void *)uint64_t result = this;
    *(void *)this = *(void *)this & 7 | result;
    int v9 = (unint64_t *)*((void *)this + 1);
    if (v9) {
      unint64_t *v9 = *v9 & 7 | ((unint64_t)this + 8);
    }
    *(unsigned char *)(*((void *)this + 2) + 17) |= 1u;
    uint64_t v10 = (void *)*v4;
    if ((*v4 > (unint64_t)v5 || &v10[2 * *(unsigned int *)(v3 + 2472)] <= v5) && *(_DWORD *)(v3 + 2464) >= 2u)
    {
      uint64_t v11 = *(unsigned int *)(v3 + 2472);
      if (v11)
      {
        uint64_t v12 = 16 * v11;
        for (uint64_t i = (void *)*v4; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
        {
          v12 -= 16;
          if (!v12) {
            return result;
          }
        }
      }
      else
      {
        uint64_t i = (void *)*v4;
      }
      unsigned int v17 = &v10[2 * v11];
LABEL_17:
      if (i != v17)
      {
        uint64_t v19 = (uint64_t *)i[1];
        unint64_t v18 = (unint64_t)(i + 1);
        uint64_t *v19 = *v19 & 7 | v18;
        for (uint64_t i = (void *)(v18 + 8); i != v17; i += 2)
        {
          if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_17;
          }
        }
      }
    }
  }
  return result;
}

void llvm::ValueHandleBase::RemoveFromUseList(llvm::ValueHandleBase *this)
{
  unint64_t v1 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v1 = *((void *)this + 1);
  unsigned int v2 = (unint64_t *)*((void *)this + 1);
  if (v2)
  {
    *unsigned int v2 = *v2 & 7 | v1;
  }
  else
  {
    uint64_t v4 = ****((void ****)this + 2);
    unint64_t v5 = *(void *)(v4 + 2456);
    if (v5 <= v1 && v5 + 16 * *(unsigned int *)(v4 + 2472) > v1)
    {
      uint64_t v6 = *((void *)this + 2);
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v4 + 2456, &v6);
      *(unsigned char *)(*((void *)this + 2) + 17) &= ~1u;
    }
  }
}

uint64_t _GLOBAL__sub_I_Value_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&UseDerefAtPointSemantics, 0, 0);
  dword_26B41E690 = 0;
  qword_26B41E698 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41E6A0 = 0;
  UseDerefAtPointSemantics = (uint64_t)&unk_270DBC7D8;
  qword_26B41E6A8 = (uint64_t)&unk_270DBC6E8;
  qword_26B41E6B0 = (uint64_t)&unk_270DBFE18;
  qword_26B41E6C8 = (uint64_t)&qword_26B41E6B0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"use-dereferenceable-at-point-semantics", 0x26uLL);
  word_26B41E61A = word_26B41E61A & 0xFF9F | 0x20;
  dword_26B41E690 = 0;
  byte_26B41E6A4 = 1;
  dword_26B41E6A0 = 0;
  qword_26B41E630 = (uint64_t)"Deref attributes and metadata infer facts at definition only";
  unk_26B41E638 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&UseDerefAtPointSemantics);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &UseDerefAtPointSemantics, &dword_261C2B000);
}

unint64_t *llvm::ValueSymbolTable::makeUniqueName(llvm::StringMapImpl *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v6 = *((unsigned int *)a3 + 2);
  while (1)
  {
    llvm::SmallVectorImpl<char>::resizeImpl<false>(a3, v6);
    int v22 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    int v28 = 1;
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    uint64_t v23 = 0;
    unint64_t v21 = &unk_270DBD758;
    uint64_t v29 = a3;
    llvm::raw_ostream::SetUnbuffered(&v21);
    if (a2 && *(unsigned __int8 *)(a2 + 16) <= 3u)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      if (!v7) {
        goto LABEL_8;
      }
      __int16 v18 = 260;
      v17[0] = v7 + 208;
      llvm::Triple::Triple(&__p, (const llvm::Twine *)v17);
      int v8 = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v8 - 41) >= 2)
      {
LABEL_8:
        if (v24 == v25) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v21, ".", 1uLL);
        }
        else {
          *v25++ = 46;
        }
      }
    }
    unint64_t v9 = (*((_DWORD *)a1 + 7) + 1);
    *((_DWORD *)a1 + 7) = v9;
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v21, v9, 0, 0, 0);
    int v14 = *a3;
    unint64_t v15 = (unint64_t)a3[1];
    unint64_t v16 = a2;
    uint64_t v10 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(a1, v14, v15, &v16);
    if (v11) {
      break;
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
  }
  uint64_t v12 = *v10;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
  return v12;
}

void llvm::ValueSymbolTable::reinsertValue(llvm::ValueSymbolTable *this, uint64_t ***a2)
{
  unsigned char v14[32] = *MEMORY[0x263EF8340];
  uint64_t ValueName = llvm::Value::getValueName(a2);
  if ((llvm::StringMap<llvm::Value *,llvm::MallocAllocator>::insert(this, ValueName) & 1) == 0)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
    {
      unint64_t v6 = (unsigned char *)(llvm::Value::getValueName(a2) + 16);
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
      {
        int v8 = (void *)llvm::Value::getValueName(a2);
        uint64_t v9 = *v8;
        uint64_t v7 = v8 + 2;
        uint64_t v5 = v9;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v7 = &str_3_24;
      }
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v6 = &str_3_24;
      uint64_t v7 = &str_3_24;
    }
    uint64_t v12 = v14;
    long long v13 = xmmword_261E8A780;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, v6, &v7[v5]);
    uint64_t v10 = llvm::Value::getValueName(a2);
    MEMORY[0x263E500A0](v10, 8);
    UniqueName = llvm::ValueSymbolTable::makeUniqueName(this, (unint64_t)a2, (uint64_t **)&v12);
    llvm::Value::setValueName((uint64_t)a2, (uint64_t)UniqueName);
    if (v12 != v14) {
      free(v12);
    }
  }
}

uint64_t llvm::StringMap<llvm::Value *,llvm::MallocAllocator>::insert(llvm::StringMapImpl *a1, uint64_t a2)
{
  unsigned int v4 = llvm::StringMapImpl::LookupBucketFor(a1, (uint64_t *)(a2 + 16), *(void *)a2);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 8 * v4);
  if (!v6) {
    goto LABEL_4;
  }
  if (v6 == -8)
  {
    --*((_DWORD *)a1 + 4);
LABEL_4:
    *(void *)(v5 + 8 * v4) = a2;
    ++*((_DWORD *)a1 + 3);
    llvm::StringMapImpl::RehashTable(a1, 0);
    return 1;
  }
  return 0;
}

unint64_t *llvm::ValueSymbolTable::createValueName(unsigned int *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  unsigned char v16[32] = *MEMORY[0x263EF8340];
  unint64_t v8 = a1[6];
  if ((v8 & 0x80000000) == 0 && a3 > v8)
  {
    unint64_t v8 = v8 <= 1 ? 1 : v8;
    if (a3 >= v8) {
      unint64_t v5 = v8;
    }
  }
  unint64_t v13 = a4;
  uint64_t v9 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>((llvm::StringMapImpl *)a1, a2, v5, &v13);
  if (v10) {
    return *v9;
  }
  int v14 = v16;
  long long v15 = xmmword_261E8A780;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v14, a2, (unsigned char *)a2 + v5);
  UniqueName = llvm::ValueSymbolTable::makeUniqueName((llvm::StringMapImpl *)a1, a4, (uint64_t **)&v14);
  if (v14 != v16) {
    free(v14);
  }
  return UniqueName;
}

_anonymous_namespace_::Verifier *anonymous namespace'::Verifier::Verifier(_anonymous_namespace_::Verifier *this, llvm::raw_ostream *a2, char a3, const llvm::Module *a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = &unk_270DC2B88;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 16) = 257;
  *((void *)this + 5) = a4;
  *((void *)this + 11) = 0;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + 3) = 0u;
  __int16 v9 = 260;
  unint64_t v8 = (char *)a4 + 208;
  llvm::Triple::Triple((std::string *)((char *)this + 128), (const llvm::Twine *)&v8);
  *((void *)this + 22) = (char *)a4 + 256;
  *((void *)this + 23) = *(void *)a4;
  *((_WORD *)this + 96) = 0;
  *((void *)this + 25) = (char *)this + 216;
  *((void *)this + 26) = 0x100000000;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 264) = 0;
  *((void *)this + 34) = (char *)this + 304;
  *((void *)this + 35) = (char *)this + 304;
  *((void *)this + 36) = 16;
  *((_DWORD *)this + 74) = 0;
  *((void *)this + 54) = (char *)this + 464;
  *((void *)this + 55) = (char *)this + 464;
  *((void *)this + 56) = 32;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 184) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((void *)this + 93) = (char *)this + 776;
  *((void *)this + 94) = (char *)this + 776;
  *((void *)this + 95) = 2;
  *((_DWORD *)this + 192) = 0;
  *((void *)this + 99) = 0;
  *((_WORD *)this + 400) = 0;
  *((_DWORD *)this + 201) = 0x8000;
  *((_DWORD *)this + 206) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_DWORD *)this + 212) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 908) = 0u;
  *((void *)this + 116) = (char *)this + 960;
  *((void *)this + 117) = (char *)this + 960;
  *((void *)this + 118) = 32;
  *((_DWORD *)this + 238) = 0;
  *((void *)this + 152) = (char *)this + 1232;
  *((void *)this + 153) = 0x400000000;
  *((void *)this + 158) = (char *)this + 1296;
  *((void *)this + 159) = (char *)this + 1296;
  *((void *)this + 160) = 32;
  *((_DWORD *)this + 322) = 0;
  *((void *)this + 194) = (char *)this + 1584;
  *((void *)this + 195) = (char *)this + 1584;
  *((void *)this + 196) = 32;
  *((_DWORD *)this + 394) = 0;
  *((void *)this + 230) = (char *)this + 1856;
  *((void *)this + 231) = 0x1000000000;
  *((void *)this + 248) = this;
  *((void *)this + 250) = 0;
  *((void *)this + 249) = 0;
  *((_DWORD *)this + 502) = 0;
  *((void *)this + 253) = 0;
  *((void *)this + 252) = 0;
  *((_DWORD *)this + 508) = 0;
  *((void *)this + 255) = (char *)this + 2056;
  *((void *)this + 256) = 0x400000000;
  *((unsigned char *)this + 194) = a3;
  return this;
}

BOOL anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this, const llvm::Function *a2)
{
  v254[8] = *MEMORY[0x263EF8340];
  unsigned int v4 = (void *)((char *)a2 + 72);
  if (*((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72))
  {
    *((void *)this + 32) = a2;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch((uint64_t)this + 200, 0);
  }
  for (uint64_t i = (void *)*((void *)a2 + 10); ; uint64_t i = (void *)i[1])
  {
    if (i == v4)
    {
      *((unsigned char *)this + 192) = 0;
      if (*((void *)this + 23) == **(void **)a2)
      {
        if ((*((_DWORD *)a2 + 8) & 0xF) == 0xA)
        {
          __int16 v9 = "Functions may not have common linkage";
        }
        else
        {
          uint64_t v20 = *((void *)a2 + 3);
          if (*(_DWORD *)(v20 + 12) - 1 != *((_DWORD *)a2 + 24))
          {
            v241 = "# formal arguments must match # of arguments for function type!";
            v245[0] = 259;
            llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v241);
            if (*(void *)this)
            {
              llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
              llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (llvm::Type *)v20);
            }
            goto LABEL_281;
          }
          if (*(unsigned char *)(**(void **)(v20 + 16) + 8) == 14)
          {
            __int16 v9 = "Functions cannot return aggregate values!";
          }
          else if (llvm::Function::hasStructRetAttr(a2) {
                 && *(unsigned char *)(**(void **)(*((void *)a2 + 3) + 16) + 8) != 7)
          }
          {
            __int16 v9 = "Invalid struct return type!";
          }
          else
          {
            uint64_t v21 = *((void *)a2 + 14);
            if (v21 && *(_DWORD *)(v21 + 8) > (*(_DWORD *)(v20 + 12) + 1))
            {
              __int16 v9 = "Attribute after last parameter!";
            }
            else
            {
              int v22 = *((_DWORD *)a2 + 8);
              if (v21)
              {
                if ((*(unsigned char *)(v21 + 12) & 0x10) != 0)
                {
                  __int16 v9 = "Attribute 'builtin' can only be applied to a callsite.";
                  goto LABEL_280;
                }
                if (*(char *)(v21 + 32) < 0)
                {
                  __int16 v9 = "Attribute 'elementtype' can only be applied to a callsite.";
                  goto LABEL_280;
                }
              }
              int v23 = (*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF;
              switch(v23)
              {
                case 'G':
                case 'H':
                case 'M':
                  goto LABEL_70;
                case 'I':
                case 'J':
                case 'K':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'T':
                case 'U':
                case 'V':
                case '\\':
                  goto LABEL_80;
                case 'L':
                case '[':
                  if (*(unsigned char *)(**(void **)(*((void *)a2 + 3) + 16) + 8) == 7) {
                    goto LABEL_46;
                  }
                  __int16 v9 = "Calling convention requires void return type";
                  goto LABEL_280;
                case 'S':
                  if (!*((void *)a2 + 12)) {
                    goto LABEL_80;
                  }
                  if (v21)
                  {
                    if (*(_DWORD *)(v21 + 8) >= 3u)
                    {
                      uint64_t v34 = *(void *)(v21 + 56);
                      if (v34)
                      {
                        if ((*(unsigned char *)(v34 + 20) & 0x40) != 0) {
                          goto LABEL_80;
                        }
                      }
                    }
                  }
                  __int16 v9 = "Calling convention parameter requires byval";
                  goto LABEL_280;
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case ']':
LABEL_46:
                  if (llvm::Function::hasStructRetAttr(a2))
                  {
                    __int16 v9 = "Calling convention does not allow sret";
                    goto LABEL_280;
                  }
                  if ((*((_WORD *)a2 + 9) & 0x3FF0) == 0x4C0) {
                    goto LABEL_70;
                  }
                  int v24 = *(_DWORD *)(*((void *)this + 22) + 4);
                  uint64_t v25 = llvm::Function::args(a2);
                  if (v25 == v26) {
                    goto LABEL_70;
                  }
                  uint64_t v27 = v21 + 40;
                  unsigned int v28 = 2;
                  break;
                default:
                  if ((v23 - 8) < 2) {
                    goto LABEL_70;
                  }
                  goto LABEL_80;
              }
              do
              {
                if (v21 && v28 < *(_DWORD *)(v21 + 8))
                {
                  uint64_t v29 = *(void *)(v27 + 8 * v28);
                  if (v29 && (*(unsigned char *)(v29 + 20) & 0x40) != 0)
                  {
                    __int16 v9 = "Calling convention disallows byval";
                    goto LABEL_280;
                  }
                  uint64_t v30 = *(void *)(v27 + 8 * v28);
                  if (v30 && (*(unsigned char *)(v30 + 21) & 2) != 0)
                  {
                    __int16 v9 = "Calling convention disallows preallocated";
                    goto LABEL_280;
                  }
                  uint64_t v31 = *(void *)(v27 + 8 * v28);
                  if (v31 && (*(unsigned char *)(v31 + 21) & 1) != 0)
                  {
                    __int16 v9 = "Calling convention disallows inalloca";
                    goto LABEL_280;
                  }
                  uint64_t v32 = *(void *)(v27 + 8 * v28);
                  if (v32 && (*(unsigned char *)(v32 + 20) & 0x20) != 0)
                  {
                    unsigned int v33 = *(_DWORD *)(*(void *)v25 + 8);
                    if ((v33 & 0xFE) == 0x12) {
                      unsigned int v33 = *(_DWORD *)(**(void **)(*(void *)v25 + 16) + 8);
                    }
                    if (v24 == v33 >> 8)
                    {
                      __int16 v9 = "Calling convention disallows stack byref";
                      goto LABEL_280;
                    }
                  }
                }
                v25 += 40;
                ++v28;
              }
              while (v25 != v26);
LABEL_70:
              if (*(_DWORD *)(*((void *)a2 + 3) + 8) < 0x100u)
              {
LABEL_80:
                uint64_t v35 = llvm::Function::args(a2);
                if ((llvm::Type **)v35 != v36)
                {
                  BOOL v37 = (llvm::Type **)v35;
                  uint64_t v38 = v36;
                  unsigned int v39 = 2;
                  do
                  {
                    uint64_t v40 = *(llvm::User **)(*(void *)(v20 + 16) + 8 * (v39 - 1));
                    if (*v37 != v40)
                    {
                      v241 = "Argument value does not match function argument type!";
                      v245[0] = 259;
                      v250 = v37;
                      v246 = v40;
                      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250, &v246);
                      goto LABEL_281;
                    }
                    int v41 = *((_DWORD *)*v37 + 2);
                    BOOL v42 = v41 == 14 || v41 == 7;
                    if (v42)
                    {
                      v241 = "Function arguments must have first-class types!";
                      v245[0] = 259;
                      v250 = v37;
                      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250);
                      goto LABEL_281;
                    }
                    if ((v22 & 0x2000) == 0)
                    {
                      switch(v41)
                      {
                        case 0xCu:
                          uint64_t v73 = "Function takes token but isn't an intrinsic";
LABEL_156:
                          v241 = v73;
                          v245[0] = 259;
                          v250 = v37;
                          v246 = a2;
                          llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250, (llvm::Type ***)&v246);
                          goto LABEL_281;
                        case 0xBu:
                          uint64_t v73 = "Function takes x86_amx but isn't an intrinsic";
                          goto LABEL_156;
                        case 9u:
                          uint64_t v73 = "Function takes metadata but isn't an intrinsic";
                          goto LABEL_156;
                      }
                    }
                    if (v21)
                    {
                      if (v39 < *(_DWORD *)(v21 + 8))
                      {
                        uint64_t v43 = *(void *)(v21 + 40 + 8 * v39);
                        if (v43)
                        {
                          if (*(unsigned char *)(v43 + 20)) {
                        }
                          }
                      }
                    }
                    v37 += 5;
                    ++v39;
                  }
                  while (v37 != v38);
                }
                if ((v22 & 0x2000) != 0) {
                  goto LABEL_101;
                }
                int v44 = *(unsigned __int8 *)(**(void **)(*((void *)a2 + 3) + 16) + 8);
                if (v44 == 11)
                {
                  __int16 v9 = "Function returns a x86_amx but isn't an intrinsic";
                  goto LABEL_280;
                }
                if (v44 != 12)
                {
LABEL_101:
                  v250 = (llvm::Type **)&v252;
                  uint64_t v251 = 0x400000000;
                  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v250);
                  if (!v251) {
                    goto LABEL_171;
                  }
                  uint64_t v45 = 16 * v251;
                  int v46 = v250 + 1;
                  while (1)
                  {
                    int v47 = *((_DWORD *)v46 - 2);
                    if (v47 == 36)
                    {
                      uint64_t v52 = *v46;
                      v246 = v52;
                      unint64_t v53 = *((void *)v52 - 2);
                      if ((v53 & 2) != 0)
                      {
                        if (*((_DWORD *)v52 - 6) != 1)
                        {
LABEL_162:
                          unint64_t v74 = "!kcfi_type must have exactly one operand";
                          goto LABEL_170;
                        }
                        int v54 = (uint64_t *)*((void *)v52 - 4);
                      }
                      else
                      {
                        if ((*((void *)v52 - 2) & 0x3C0) != 0x40) {
                          goto LABEL_162;
                        }
                        int v54 = (uint64_t *)((char *)v52 - 8 * ((v53 >> 2) & 0xF) - 16);
                      }
                      uint64_t v62 = *v54;
                      if (!v62)
                      {
                        unint64_t v74 = "!kcfi_type operand must not be null";
                        goto LABEL_170;
                      }
                      if (*(unsigned char *)v62 != 1)
                      {
                        unint64_t v74 = "expected a constant operand for !kcfi_type";
                        goto LABEL_170;
                      }
                      uint64_t v63 = *(unsigned char **)(v62 + 128);
                      if (v63[16] != 16)
                      {
                        unint64_t v74 = "expected a constant integer operand for !kcfi_type";
                        goto LABEL_170;
                      }
                      if ((*(_DWORD *)(*(void *)v63 + 8) & 0xFFFFFF00) != 0x2000)
                      {
                        unint64_t v74 = "expected a 32-bit integer constant operand for !kcfi_type";
                        goto LABEL_170;
                      }
                    }
                    else if (v47 == 2)
                    {
                      uint64_t v48 = *v46;
                      v246 = v48;
                      int v49 = (char *)v48 - 16;
                      unint64_t v50 = *((void *)v48 - 2);
                      if ((v50 & 2) != 0)
                      {
                        if (*((_DWORD *)v48 - 6) <= 1u)
                        {
LABEL_161:
                          unint64_t v74 = "!prof annotations should have no less than 2 operands";
                          goto LABEL_170;
                        }
                        uint64_t v51 = (char *)*((void *)v48 - 4);
                      }
                      else
                      {
                        if ((v50 & 0x380) == 0) {
                          goto LABEL_161;
                        }
                        uint64_t v51 = &v49[-8 * ((v50 >> 2) & 0xF)];
                      }
                      uint64_t v55 = *(void *)v51;
                      if (!v55)
                      {
                        unint64_t v74 = "first operand should not be null";
                        goto LABEL_170;
                      }
                      if (*(unsigned char *)v55)
                      {
                        unint64_t v74 = "expected string with name of the !prof annotation";
                        goto LABEL_170;
                      }
                      uint64_t v56 = *(void **)(v55 + 8);
                      if (*v56 == 30)
                      {
                        uint64_t v64 = v56[3];
                        uint64_t v65 = v56[4];
                        uint64_t v66 = v56[5];
                        uint64_t v67 = *(void *)((char *)v56 + 46);
                        if (v64 != 0x69746568746E7973
                          || v65 != 0x6974636E75665F63
                          || v66 != 0x7972746E655F6E6FLL
                          || v67 != 0x746E756F635F7972)
                        {
LABEL_158:
                          unint64_t v74 = "first operand should be 'function_entry_count' or 'synthetic_function_entry_count'";
                          goto LABEL_170;
                        }
                      }
                      else
                      {
                        if (*v56 != 20) {
                          goto LABEL_158;
                        }
                        uint64_t v57 = v56[3];
                        uint64_t v58 = v56[4];
                        int v59 = *((_DWORD *)v56 + 10);
                        BOOL v60 = v57 == 0x6E6F6974636E7566 && v58 == 0x635F7972746E655FLL;
                        if (!v60 || v59 != 1953396079) {
                          goto LABEL_158;
                        }
                      }
                      if ((v50 & 2) != 0) {
                        uint64_t v71 = (char *)*((void *)v48 - 4);
                      }
                      else {
                        uint64_t v71 = &v49[-8 * ((v50 >> 2) & 0xF)];
                      }
                      unint64_t v72 = (unsigned char *)*((void *)v71 + 1);
                      if (!v72)
                      {
                        unint64_t v74 = "second operand should not be null";
                        goto LABEL_170;
                      }
                      if (*v72 != 1)
                      {
                        unint64_t v74 = "expected integer argument to function_entry_count";
LABEL_170:
                        v241 = v74;
                        v245[0] = 259;
                        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (uint64_t *)&v246);
LABEL_171:
                        if ((*((_WORD *)a2 + 9) & 8) != 0)
                        {
                          int v75 = *((_DWORD *)a2 + 5);
                          uint64_t v76 = (v75 & 0x40000000) != 0
                              ? (llvm::Value **)*((void *)a2 - 1)
                              : (llvm::Value **)((char *)a2 - 32 * (v75 & 0x7FFFFFF));
                          uint64_t v77 = llvm::Value::stripPointerCasts(*v76);
                          int64_t v78 = *((unsigned char *)v77 + 16) ? 0 : v77;
                          v246 = v78;
                          if (v78)
                          {
                            int64_t v79 = (const llvm::Module *)*((void *)v78 + 5);
                            if (v79 != *((const llvm::Module **)a2 + 5))
                            {
                              v240 = (llvm::Type **)*((void *)a2 + 5);
                              v241 = "Referencing personality function in another module!";
                              v245[0] = 259;
                              v237[0] = (llvm::Type **)a2;
                              v239 = v79;
                              llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, v237, (const llvm::Module **)&v240, (llvm::Type ***)&v246, &v239);
                              goto LABEL_488;
                            }
                          }
                        }
                        llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear((unsigned int *)this + 226);
                        if (*((unsigned char *)a2 + 35))
                        {
                          if (v251)
                          {
                            v241 = "unmaterialized function cannot have metadata";
                            v245[0] = 259;
                            v246 = a2;
                            v237[0] = (llvm::Type **)v250[1];
                            llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type ***)&v246, (uint64_t *)v237);
                            goto LABEL_488;
                          }
                          goto LABEL_233;
                        }
                        if (*((unsigned char *)a2 + 16) == 3)
                        {
                          if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
                            goto LABEL_185;
                          }
                        }
                        else if (!*((unsigned char *)a2 + 16) && (void *)*v4 == v4)
                        {
LABEL_185:
                          if (v251)
                          {
                            uint64_t v81 = 16 * v251;
                            int64_t v82 = v250 + 1;
                            do
                            {
                              int v83 = *((_DWORD *)v82 - 2);
                              if (v83)
                              {
                                if (v83 == 2)
                                {
                                  unint64_t v85 = "function declaration may not have a !prof attachment";
LABEL_199:
                                  v241 = v85;
                                  v245[0] = 259;
                                  v246 = a2;
                                  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type ***)&v246);
LABEL_488:
                                  if (v250 != (llvm::Type **)&v252) {
                                    free(v250);
                                  }
LABEL_281:
                                  unint64_t v126 = (void *)*((void *)a2 + 10);
                                  if (v126 != v4)
                                  {
                                    while (2)
                                    {
                                      uint64_t v127 = (void *)v126[1];
                                      if (v126) {
                                        BOOL v128 = v126 - 3;
                                      }
                                      else {
                                        BOOL v128 = 0;
                                      }
                                      llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 272));
                                      unint64_t v130 = v128 + 5;
                                      unint64_t v129 = (void *)v128[5];
                                      if (v129 == v128 + 5
                                        || (v129 ? (unint64_t v131 = v129 - 3) : (unint64_t v131 = 0),
                                            *((unsigned __int8 *)v131 + 16) - 29 >= 0xB))
                                      {
                                        v241 = "Basic Block does not have terminator!";
                                        v245[0] = 259;
                                        v250 = (llvm::Type **)v128;
                                        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250);
                                      }
                                      else
                                      {
                                        v132 = (void *)v128[6];
                                        BOOL v133 = v132 - 3;
                                        if (!v132) {
                                          BOOL v133 = 0;
                                        }
                                        if (*((unsigned char *)v133 + 16) != 83) {
                                          goto LABEL_374;
                                        }
                                        for (uint64_t j = v128[1]; j; uint64_t j = *(void *)(j + 8))
                                        {
                                          uint64_t v135 = *(void *)(j + 24);
                                          unsigned int v136 = *(unsigned __int8 *)(v135 + 16);
                                          if (v135) {
                                            BOOL v137 = v136 >= 0x1C;
                                          }
                                          else {
                                            BOOL v137 = 0;
                                          }
                                          if (v137 && v136 - 29 < 0xB) {
                                            break;
                                          }
                                        }
                                        v250 = (llvm::Type **)&v252;
                                        uint64_t v251 = 0x800000000;
                                        llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>((uint64_t)&v250, j, 0);
                                        v241 = &v243;
                                        uint64_t v242 = 0x800000000;
                                        if (v251 >= 2) {
                                          qsort(v250, v251, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::BasicBlock *>);
                                        }
                                        if ((void *)*v130 == v130)
                                        {
                                          char v142 = 1;
                                          goto LABEL_353;
                                        }
                                        uint64_t v139 = v128[6];
                                        uint64_t v140 = v139 - 24;
                                        if (v139) {
                                          uint64_t v141 = v139 - 24;
                                        }
                                        else {
                                          uint64_t v141 = 0;
                                        }
                                        char v142 = 1;
                                        if (v139 && *(unsigned char *)(v141 + 16) == 83)
                                        {
                                          while (1)
                                          {
                                            unint64_t v143 = *(_DWORD *)(v140 + 20) & 0x7FFFFFF;
                                            if (v251 != v143)
                                            {
                                              v246 = (llvm::User *)"PHINode should have one entry for each predecessor of"
                                                                   " its parent basic block!";
                                              __int16 v249 = 259;
                                              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                              if (*(void *)this) {
                                                llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v140);
                                              }
                                              char v142 = 0;
                                              goto LABEL_353;
                                            }
                                            LODWORD(v242) = 0;
                                            if (HIDWORD(v242) < v143)
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v241, &v243, v143, 16);
                                              unint64_t v143 = *(_DWORD *)(v140 + 20) & 0x7FFFFFF;
                                            }
                                            if (v143)
                                            {
                                              uint64_t v144 = 0;
                                              uint64_t v145 = 0;
                                              uint64_t v146 = 8 * v143;
                                              do
                                              {
                                                int v147 = *(_DWORD *)(v140 + 20);
                                                if ((v147 & 0x40000000) != 0) {
                                                  uint64_t v148 = *(void *)(v140 - 8);
                                                }
                                                else {
                                                  uint64_t v148 = v140 - 32 * (v147 & 0x7FFFFFF);
                                                }
                                                llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v241, *(void *)(v148 + 32 * *(unsigned int *)(v140 + 60) + v145), *(void *)(v148 + v144));
                                                v145 += 8;
                                                v144 += 32;
                                              }
                                              while (v146 != v145);
                                            }
                                            unint64_t v149 = 126 - 2 * __clz(v242);
                                            uint64_t v150 = v242 ? v149 : 0;
                                            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>((unint64_t)v241, (unint64_t *)v241 + 2 * v242, v150, 1);
                                            if (v242) {
                                              break;
                                            }
LABEL_332:
                                            uint64_t v155 = *(void *)(v140 + 32);
                                            uint64_t v140 = v155 - 24;
                                            if (v155) {
                                              uint64_t v156 = v155 - 24;
                                            }
                                            else {
                                              uint64_t v156 = 0;
                                            }
                                            char v142 = 1;
                                            if (!v155 || *(unsigned char *)(v156 + 16) != 83) {
                                              goto LABEL_353;
                                            }
                                          }
                                          uint64_t v151 = 0;
                                          v152 = (char *)v241;
                                          BOOL v153 = (llvm::Type ***)v250;
                                          while (1)
                                          {
                                            if (v151)
                                            {
                                              unint64_t v154 = *(llvm::Type ***)((char *)v241 + v151);
                                              if (v154 == *(llvm::Type ***)((char *)v241 + v151 - 16)
                                                && *(void *)((char *)v241 + v151 + 8) != *(void *)((char *)v241 + v151 - 8))
                                              {
                                                v246 = (llvm::User *)"PHI node has multiple entries for the same basic bl"
                                                                     "ock with different incoming values!";
                                                __int16 v249 = 259;
                                                llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                                if (*(void *)this)
                                                {
                                                  llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v140);
                                                  BOOL v162 = *(llvm::Type ***)&v152[v151];
                                                  if (v162) {
                                                    llvm::VerifierSupport::Write((uint64_t ***)this, v162);
                                                  }
                                                  BOOL v163 = &v152[v151];
                                                  unint64_t v164 = (llvm::Type **)*((void *)v163 + 1);
                                                  if (v164) {
                                                    llvm::VerifierSupport::Write((uint64_t ***)this, v164);
                                                  }
                                                  BOOL v165 = (llvm::Type **)*((void *)v163 - 1);
                                                  if (v165) {
                                                    llvm::VerifierSupport::Write((uint64_t ***)this, v165);
                                                  }
                                                }
                                                char v142 = 0;
                                                goto LABEL_353;
                                              }
                                            }
                                            else
                                            {
                                              unint64_t v154 = *(llvm::Type ***)v241;
                                            }
                                            if (v154 != *v153) {
                                              break;
                                            }
                                            ++v153;
                                            v151 += 16;
                                            if (16 * v242 == v151) {
                                              goto LABEL_332;
                                            }
                                          }
                                          v246 = (llvm::User *)"PHI node entries do not match predecessors!";
                                          __int16 v249 = 259;
                                          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                          if (*(void *)this)
                                          {
                                            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v140);
                                            v160 = *(llvm::Type ***)&v152[v151];
                                            if (v160) {
                                              llvm::VerifierSupport::Write((uint64_t ***)this, v160);
                                            }
                                            if (*v153) {
                                              llvm::VerifierSupport::Write((uint64_t ***)this, *v153);
                                            }
                                          }
                                          char v142 = 0;
                                        }
LABEL_353:
                                        if (v241 != &v243) {
                                          free(v241);
                                        }
                                        if (v250 != (llvm::Type **)&v252) {
                                          free(v250);
                                        }
                                        v132 = (void *)v128[6];
                                        if (v132 == v130) {
                                          char v161 = 0;
                                        }
                                        else {
                                          char v161 = v142;
                                        }
                                        if (v161)
                                        {
                                          while (1)
                                          {
                                            BOOL v166 = v132 - 3;
                                            if (!v132) {
                                              BOOL v166 = 0;
                                            }
                                            if ((void *)v166[5] != v128) {
                                              break;
                                            }
                                            v132 = (void *)v132[1];
LABEL_374:
                                            if (v132 == v130) {
                                              goto LABEL_339;
                                            }
                                          }
                                          v241 = "Instruction has bogus parent pointer!";
                                          v245[0] = 259;
                                          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v241);
                                        }
                                      }
LABEL_339:
                                      v157 = (void *)v128[6];
                                      if (v157 != v130)
                                      {
                                        do
                                        {
                                          BOOL v158 = (void *)v157[1];
                                          if (v157) {
                                            unint64_t v159 = (llvm::Instruction *)(v157 - 3);
                                          }
                                          else {
                                            unint64_t v159 = 0;
                                          }
                                          v157 = v158;
                                        }
                                        while (v158 != v130);
                                      }
                                      unint64_t v126 = v127;
                                      if (v127 == v4) {
                                        break;
                                      }
                                      continue;
                                    }
                                  }
                                  v241 = v245;
                                  uint64_t v242 = (uint64_t)v245;
                                  uint64_t v243 = 8;
                                  int v244 = 0;
                                  v250 = (llvm::Type **)v254;
                                  uint64_t v251 = (uint64_t)v254;
                                  uint64_t v252 = 8;
                                  int v253 = 0;
                                  uint64_t v167 = (void *)((char *)this + 856);
                                  uint64_t v168 = *((void *)this + 110);
                                  uint64_t v169 = *((void *)this + 111);
                                  while (1)
                                  {
                                    if (v168 == v169) {
                                      goto LABEL_407;
                                    }
                                    v240 = *(llvm::Type ***)v168;
                                    imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v241, v240);
                                    unsigned __int32 v171 = (void *)v242 == v241 ? (uint64_t *)((char *)&v243 + 4) : &v243;
                                    if (imp == (const void **)(v242 + 8 * *(unsigned int *)v171)) {
                                      break;
                                    }
LABEL_394:
                                    v168 += 16;
                                  }
                                  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v250, v240, (uint64_t)&v246);
                                  for (uint64_t k = *(llvm::Instruction **)(v168 + 8); ; uint64_t k = v177)
                                  {
                                    SuccPad = (const llvm::Module *)getSuccPad(k);
                                    v174 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v250, SuccPad);
                                    v175 = (llvm::Type **)v251 == v250 ? (uint64_t *)((char *)&v252 + 4) : &v252;
                                    if (v174 != (const void **)(v251 + 8 * *(unsigned int *)v175)) {
                                      break;
                                    }
                                    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v241, SuccPad, (uint64_t)&v246);
                                    if (!LOBYTE(v248[0])
                                      || (v240 = (llvm::Type **)SuccPad,
                                          uint64_t v176 = llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::find((uint64_t)this + 856, (uint64_t *)&v240), *((void *)this + 111) == v176))
                                    {
                                      llvm::SmallPtrSetImplBase::clear((llvm::SmallPtrSetImplBase *)&v250);
                                      goto LABEL_394;
                                    }
                                    v177 = *(llvm::Instruction **)(v176 + 8);
                                    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v250, v240, (uint64_t)&v246);
                                  }
                                  v239 = SuccPad;
                                  v246 = (llvm::User *)v248;
                                  uint64_t v247 = 0x800000000;
                                  v178 = SuccPad;
                                  do
                                  {
                                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v246, (uint64_t)v178);
                                    v179 = (llvm::Instruction **)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[]((void *)this + 107, (uint64_t *)&v239);
                                    v180 = *v179;
                                    if (*v179 != v239) {
                                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v246, (uint64_t)v180);
                                    }
                                    v178 = (const llvm::Module *)getSuccPad(v180);
                                    v239 = v178;
                                  }
                                  while (v178 != SuccPad);
                                  v237[0] = (llvm::Type **)"EH pads can't handle each other's exceptions";
                                  __int16 v238 = 259;
                                  v181 = (llvm::Type ***)v246;
                                  uint64_t v182 = v247;
                                  llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v237);
                                  if (*(void *)this && v182)
                                  {
                                    uint64_t v183 = 8 * v182;
                                    do
                                    {
                                      if (*v181) {
                                        llvm::VerifierSupport::Write((uint64_t ***)this, *v181);
                                      }
                                      ++v181;
                                      v183 -= 8;
                                    }
                                    while (v183);
                                  }
                                  if (v246 != (llvm::User *)v248) {
                                    free(v246);
                                  }
LABEL_407:
                                  if ((llvm::Type **)v251 != v250) {
                                    free((void *)v251);
                                  }
                                  if ((void *)v242 != v241) {
                                    free((void *)v242);
                                  }
                                  llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 272));
                                  *((_DWORD *)this + 462) = 0;
                                  *((void *)this + 99) = 0;
                                  *((unsigned char *)this + 800) = 0;
                                  int v184 = *((_DWORD *)this + 216);
                                  if (v184)
                                  {
                                    unsigned int v185 = *((_DWORD *)this + 218);
                                    if (v185 > 4 * v184 && v185 >= 0x41)
                                    {
                                      int v186 = 1 << (33 - __clz(v184 - 1));
                                      if (v186 <= 64) {
                                        int v187 = 64;
                                      }
                                      else {
                                        int v187 = v186;
                                      }
                                      goto LABEL_420;
                                    }
LABEL_424:
                                    if (v185)
                                    {
                                      v190 = (void *)*v167;
                                      uint64_t v191 = 16 * v185;
                                      do
                                      {
                                        void *v190 = -4096;
                                        v190 += 2;
                                        v191 -= 16;
                                      }
                                      while (v191);
                                    }
                                    *((void *)this + 108) = 0;
                                  }
                                  else if (*((_DWORD *)this + 217))
                                  {
                                    unsigned int v185 = *((_DWORD *)this + 218);
                                    if (v185 <= 0x40) {
                                      goto LABEL_424;
                                    }
                                    int v187 = 0;
LABEL_420:
                                    if (v187 == v185)
                                    {
                                      *((void *)this + 108) = 0;
                                      v188 = (void *)*((void *)this + 107);
                                      uint64_t v189 = 16 * v185;
                                      do
                                      {
                                        void *v188 = -4096;
                                        v188 += 2;
                                        v189 -= 16;
                                      }
                                      while (v189);
                                    }
                                    else
                                    {
                                      MEMORY[0x263E500A0](*v167, 8);
                                      if (v187)
                                      {
                                        unint64_t v228 = (4 * v187 / 3u + 1) | ((unint64_t)(4 * v187 / 3u + 1) >> 1);
                                        unint64_t v229 = v228 | (v228 >> 2) | ((v228 | (v228 >> 2)) >> 4);
                                        LODWORD(v229) = (((v229 | (v229 >> 8)) >> 16) | v229 | (v229 >> 8)) + 1;
                                        *((_DWORD *)this + 218) = v229;
                                        v230 = operator new(16 * v229, (std::align_val_t)8uLL);
                                        *((void *)this + 107) = v230;
                                        *((void *)this + 108) = 0;
                                        uint64_t v231 = *((unsigned int *)this + 218);
                                        if (v231)
                                        {
                                          uint64_t v232 = 16 * v231;
                                          do
                                          {
                                            void *v230 = -4096;
                                            v230 += 2;
                                            v232 -= 16;
                                          }
                                          while (v232);
                                        }
                                      }
                                      else
                                      {
                                        void *v167 = 0;
                                        *((void *)this + 108) = 0;
                                        *((_DWORD *)this + 218) = 0;
                                      }
                                    }
                                  }
                                  *((void *)this + 111) = *((void *)this + 110);
                                  uint64_t v192 = *((unsigned int *)this + 512);
                                  if (!v192) {
                                    goto LABEL_481;
                                  }
                                  int v193 = (llvm::Type ***)*((void *)this + 255);
                                  uint64_t v194 = 8 * v192;
                                  while (1)
                                  {
                                    v250 = *v193;
                                    int v195 = v250[-4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF)];
                                    if (!v195 || *((unsigned char *)v195 + 16) != 23) {
                                      break;
                                    }
                                    v197 = (unsigned char *)*((void *)v195 + 3);
                                    char v198 = llvm::MDNode::classof(v197);
                                    if (!v197 || (v198 & 1) == 0)
                                    {
                                      v233 = "!id.scope.list must point to an MDNode";
                                      goto LABEL_480;
                                    }
                                    uint64_t v199 = *((void *)v197 - 2);
                                    if ((v199 & 2) != 0) {
                                      unsigned int v200 = *((_DWORD *)v197 - 6);
                                    }
                                    else {
                                      unsigned int v200 = (v199 >> 6) & 0xF;
                                    }
                                    if (v200 != 1)
                                    {
                                      v233 = "!id.scope.list must point to a list with a single scope";
                                      goto LABEL_480;
                                    }
                                    ++v193;
                                    v194 -= 8;
                                    if (!v194)
                                    {
                                      if (byte_26B41D818)
                                      {
                                        unint64_t v201 = *((unsigned int *)this + 512);
                                        unint64_t v202 = 126 - 2 * __clz(v201);
                                        uint64_t v203 = v201 ? v202 : 0;
                                        uint64_t v204 = *((unsigned int *)this + 512);
                                        if (v204)
                                        {
                                          int v205 = (llvm::Type ***)*((void *)this + 255);
                                          v206 = &v205[v204];
                                          v207 = v205;
                                          do
                                          {
                                            int v208 = v207;
                                            uint64_t v209 = *((void *)(*v207)[-4 * (*((_DWORD *)*v207 + 5) & 0x7FFFFFF)] + 3);
                                            unint64_t v212 = *(void *)(v209 - 16);
                                            uint64_t v210 = v209 - 16;
                                            unint64_t v211 = v212;
                                            if ((v212 & 2) != 0) {
                                              uint64_t v213 = *(void *)(*((void *)(*v207)[-4
                                            }
                                                                                   * (*((_DWORD *)*v207 + 5) & 0x7FFFFFF)]
                                                                 + 3)
                                                               - 32);
                                            else {
                                              uint64_t v213 = v210 - 8 * ((v211 >> 2) & 0xF);
                                            }
                                            v214 = v207 + 1;
                                            uint64_t v215 = 8;
                                            while (1)
                                            {
                                              int v216 = v214;
                                              uint64_t v217 = v215;
                                              if (v214 == v206) {
                                                break;
                                              }
                                              uint64_t v218 = *((void *)(*v214)[-4 * (*((_DWORD *)*v214 + 5) & 0x7FFFFFF)] + 3);
                                              unint64_t v221 = *(void *)(v218 - 16);
                                              uint64_t v219 = v218 - 16;
                                              unint64_t v220 = v221;
                                              if ((v221 & 2) != 0) {
                                                uint64_t v222 = *(void *)(*((void *)(*v214)[-4
                                              }
                                                                                     * (*((_DWORD *)*v214 + 5) & 0x7FFFFFF)]
                                                                   + 3)
                                                                 - 32);
                                              else {
                                                uint64_t v222 = v219 - 8 * ((v220 >> 2) & 0xF);
                                              }
                                              ++v214;
                                              uint64_t v215 = v217 + 8;
                                              if (v222 != v213)
                                              {
                                                v207 = v216;
                                                goto LABEL_459;
                                              }
                                            }
                                            v207 = v206;
LABEL_459:
                                            if (v207 != v208 && (char *)v207 - (char *)v208 <= 255)
                                            {
                                              v223 = v216 - 1;
                                              v224 = v208;
                                              while (2)
                                              {
                                                v250 = 0;
                                                v225 = *v224;
                                                v250 = *v224;
                                                uint64_t v226 = v217;
                                                v227 = (const llvm::Instruction **)v208;
                                                do
                                                {
                                                  if (v225 != (llvm::Type **)*v227
                                                    && llvm::DominatorTree::dominates((_anonymous_namespace_::Verifier *)((char *)this + 200), (const llvm::Value *)v225, *v227))
                                                  {
                                                    v233 = "llvm.experimental.noalias.scope.decl dominates another one wi"
                                                           "th the same scope";
                                                    goto LABEL_480;
                                                  }
                                                  ++v227;
                                                  v226 -= 8;
                                                }
                                                while (v226);
                                                BOOL v42 = v223 == v224++;
                                                if (!v42) {
                                                  continue;
                                                }
                                                break;
                                              }
                                              int v205 = (llvm::Type ***)*((void *)this + 255);
                                              uint64_t v204 = *((unsigned int *)this + 512);
                                            }
                                            v206 = &v205[v204];
                                          }
                                          while (v207 != v206);
                                        }
                                      }
LABEL_481:
                                      *((_DWORD *)this + 512) = 0;
                                      return *((unsigned char *)this + 192) == 0;
                                    }
                                  }
                                  v233 = "llvm.experimental.noalias.scope.decl must have a MetadataAsValue argument";
LABEL_480:
                                  v241 = v233;
                                  v245[0] = 259;
                                  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250);
                                  goto LABEL_481;
                                }
                                BOOL v84 = *v82;
                              }
                              else
                              {
                                BOOL v84 = *v82;
                                if ((*((unsigned char *)*v82 + 1) & 0x7F) == 1)
                                {
                                  v241 = "function declaration may only have a unique !dbg attachment";
                                  v245[0] = 259;
                                  v246 = a2;
                                  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type ***)&v246);
                                  goto LABEL_488;
                                }
                              }
                              v82 += 2;
                              v81 -= 16;
                            }
                            while (v81);
                          }
                          if ((*((_WORD *)a2 + 9) & 8) != 0)
                          {
                            unint64_t v85 = "Function declaration shouldn't have a personality routine";
                            goto LABEL_199;
                          }
                          goto LABEL_233;
                        }
                        if ((v22 & 0x2000) != 0)
                        {
                          unint64_t v85 = "llvm intrinsics cannot be defined!";
                          goto LABEL_199;
                        }
                        uint64_t v86 = *((void *)a2 + 10);
                        if (v86) {
                          uint64_t v87 = v86 - 24;
                        }
                        else {
                          uint64_t v87 = 0;
                        }
                        v246 = (llvm::User *)v87;
                        uint64_t v88 = *(void *)(v87 + 8);
                        if (v88)
                        {
                          while (1)
                          {
                            uint64_t v89 = *(void *)(v88 + 24);
                            unsigned int v90 = *(unsigned __int8 *)(v89 + 16);
                            BOOL v91 = v89 && v90 >= 0x1C;
                            if (v91 && v90 - 29 < 0xB) {
                              break;
                            }
                            uint64_t v88 = *(void *)(v88 + 8);
                            if (!v88) {
                              goto LABEL_213;
                            }
                          }
                          unint64_t v125 = "Entry block to function must not have predecessors!";
LABEL_278:
                          v241 = v125;
                          v245[0] = 259;
                          llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type ***)&v246);
                          goto LABEL_488;
                        }
LABEL_213:
                        if ((*(_WORD *)(v87 + 18) & 0x7FFF) != 0)
                        {
                          uint64_t v93 = (llvm::Constant *)llvm::BlockAddress::lookup((llvm::BlockAddress *)v87, v80);
                          if (llvm::Constant::isConstantUsed(v93))
                          {
                            unint64_t v125 = "blockaddress may not be used with the entry block!";
                            goto LABEL_278;
                          }
                        }
                        if (v251)
                        {
                          int v94 = 0;
                          int v95 = 0;
                          int v96 = 0;
                          uint64_t v97 = &v250[2 * v251];
                          uint64_t v98 = (uint64_t *)(v250 + 1);
                          do
                          {
                            uint64_t v100 = v98 - 1;
                            int v99 = *((_DWORD *)v98 - 2);
                            if (v99 == 36)
                            {
                              if (v94)
                              {
                                v235 = "function must have a single !kcfi_type attachment";
LABEL_493:
                                v241 = v235;
                                v245[0] = 259;
                                v237[0] = (llvm::Type **)a2;
                                llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, v237, v98);
                                goto LABEL_488;
                              }
                              uint64_t v103 = 0;
                              int v94 = 1;
                            }
                            else if (v99 == 2)
                            {
                              if (v95)
                              {
                                v235 = "function must have a single !prof attachment";
                                goto LABEL_493;
                              }
                              uint64_t v103 = 0;
                              int v95 = 1;
                            }
                            else if (v99)
                            {
                              uint64_t v103 = 0;
                            }
                            else
                            {
                              if (v96)
                              {
                                v234 = "function must have a single !dbg attachment";
LABEL_495:
                                v241 = v234;
                                v245[0] = 259;
                                v237[0] = (llvm::Type **)a2;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, v237, v98);
                                goto LABEL_488;
                              }
                              if (*(unsigned char *)*v98 != 17)
                              {
                                v234 = "function !dbg attachment must be a subprogram";
                                goto LABEL_495;
                              }
                              if ((*(unsigned char *)(*v98 + 1) & 0x7F) != 1)
                              {
                                v241 = "function definition may only have a distinct !dbg attachment";
                                v245[0] = 259;
                                v237[0] = (llvm::Type **)a2;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, v237);
                                goto LABEL_488;
                              }
                              v237[0] = (llvm::Type **)*v98;
                              uint64_t v101 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>,llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>::FindAndConstruct((uint64_t)this + 720, (uint64_t *)v237);
                              uint64_t v102 = (const llvm::Function *)v101[1];
                              if (v102 && v102 != a2)
                              {
                                v240 = (llvm::Type **)a2;
                                v241 = "DISubprogram attached to more than one function";
                                v245[0] = 259;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (uint64_t *)v237, &v240);
                                goto LABEL_488;
                              }
                              v101[1] = (uint64_t)a2;
                              int v96 = 1;
                              uint64_t v103 = 1;
                            }
                            uint64_t v104 = (unsigned char *)*v98;
                            v98 += 2;
                          }
                          while (v100 + 2 != (uint64_t *)v97);
                        }
LABEL_233:
                        if ((*((unsigned char *)a2 + 33) & 0x20) != 0 && !*(void *)(*((void *)a2 + 5) + 152))
                        {
                          v246 = 0;
                          if (llvm::Function::hasAddressTaken(a2, &v246, 0, 1, 0, 1))
                          {
                            v241 = "Invalid user of intrinsic instruction!";
                            v245[0] = 259;
                            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type ***)&v246);
                            goto LABEL_488;
                          }
                        }
                        int v105 = *((_DWORD *)a2 + 9);
                        if (v105 == 122)
                        {
                          uint64_t v109 = *((void *)a2 + 3);
                          if (*(_DWORD *)(v109 + 12) == 2)
                          {
                            uint64_t v110 = *(void **)(v109 + 16);
                            if (*(unsigned char *)(v110[1] + 8) != 15)
                            {
                              unint64_t v108 = "gc.get.pointer.offset operand must be a pointer";
                              goto LABEL_487;
                            }
                            if (*(unsigned char *)(*v110 + 8) != 13)
                            {
                              unint64_t v108 = "gc.get.pointer.offset must return integer";
                              goto LABEL_487;
                            }
                            goto LABEL_246;
                          }
                        }
                        else
                        {
                          if (v105 != 121) {
                            goto LABEL_246;
                          }
                          uint64_t v106 = *((void *)a2 + 3);
                          if (*(_DWORD *)(v106 + 12) == 2)
                          {
                            uint64_t v107 = *(void **)(v106 + 16);
                            if (*(unsigned char *)(*v107 + 8) != 15)
                            {
                              unint64_t v108 = "gc.get.pointer.base must return a pointer";
                              goto LABEL_487;
                            }
                            if (v107[1] != *v107)
                            {
                              unint64_t v108 = "gc.get.pointer.base operand and result must be of the same type";
LABEL_487:
                              v241 = v108;
                              v245[0] = 259;
                              llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (llvm::Type **)a2);
                              goto LABEL_488;
                            }
LABEL_246:
                            uint64_t Metadata = (llvm::Type **)llvm::Value::getMetadata(a2, 0);
                            v237[0] = Metadata;
                            *((unsigned char *)this + 801) = Metadata != 0;
                            if (Metadata)
                            {
                              v241 = v245;
                              uint64_t v242 = (uint64_t)v245;
                              uint64_t v243 = 32;
                              int v244 = 0;
                              v246 = (llvm::User *)&v241;
                              uint64_t v247 = (uint64_t)this;
                              v248[0] = v237;
                              v248[1] = a2;
                              for (uint64_t m = (void *)*((void *)a2 + 10); ; uint64_t m = (void *)v236[1])
                              {
                                int v236 = m;
                                if (m == v4) {
                                  break;
                                }
                                unint64_t v113 = m - 3;
                                if (!v236) {
                                  unint64_t v113 = 0;
                                }
                                unint64_t v114 = v113 + 5;
                                for (n = (void *)v113[6]; n != v114; n = (void *)n[1])
                                {
                                  if (n) {
                                    unint64_t v116 = (llvm::Type **)(n - 3);
                                  }
                                  else {
                                    unint64_t v116 = 0;
                                  }
                                  if (v116[6] || (*((unsigned char *)v116 + 23) & 0x20) != 0)
                                  {
                                    uint64_t v117 = llvm::Value::getMetadata((llvm::Value *)v116, 18);
                                    if (v117)
                                    {
                                      uint64_t v118 = v117;
                                      unint64_t v119 = (unint64_t *)(v117 - 16);
                                      for (iuint64_t i = 1; ; ++ii)
                                      {
                                        unint64_t v121 = *v119;
                                        if ((*v119 & 2) != 0)
                                        {
                                          if (ii >= *(unsigned int *)(v118 - 24)) {
                                            break;
                                          }
                                          int v122 = *(unint64_t **)(v118 - 32);
                                        }
                                        else
                                        {
                                          if (ii >= ((v121 >> 6) & 0xF)) {
                                            break;
                                          }
                                          int v122 = &v119[-((v121 >> 2) & 0xF)];
                                        }
                                        BOOL v123 = (unsigned char *)v122[ii];
                                        if (v123)
                                        {
                                          if (llvm::MDNode::classof((unsigned char *)v122[ii])) {
                                            unint64_t v124 = v123;
                                          }
                                          else {
                                            unint64_t v124 = 0;
                                          }
                                        }
                                        else
                                        {
                                          unint64_t v124 = 0;
                                        }
                                      }
                                    }
                                  }
                                  if (*((unsigned char *)this + 193)) {
                                    goto LABEL_275;
                                  }
                                }
                              }
LABEL_275:
                              if ((void *)v242 != v241) {
                                free((void *)v242);
                              }
                            }
                            goto LABEL_488;
                          }
                        }
                        unint64_t v108 = "wrong number of parameters";
                        goto LABEL_487;
                      }
                    }
                    v46 += 2;
                    v45 -= 16;
                    if (!v45) {
                      goto LABEL_171;
                    }
                  }
                }
                __int16 v9 = "Function returns a token but isn't an intrinsic";
              }
              else
              {
                __int16 v9 = "Calling convention does not support varargs or perfect forwarding!";
              }
            }
          }
        }
      }
      else
      {
        __int16 v9 = "Function context does not match Module context!";
      }
LABEL_280:
      v241 = v9;
      v245[0] = 259;
      v250 = (llvm::Type **)a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v250);
      goto LABEL_281;
    }
    uint64_t v6 = i ? (uint64_t)(i - 3) : 0;
    uint64_t v7 = *(void *)(v6 + 40);
    if (v7 != v6 + 40)
    {
      uint64_t v8 = v7 ? v7 - 24 : 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 < 0xB) {
        continue;
      }
    }
    break;
  }
  char v10 = *(llvm::raw_ostream **)this;
  if (*(void *)this)
  {
    char v11 = (void *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v11 > 0x18uLL)
    {
      qmemcpy(v11, "Basic Block in function '", 25);
      *((void *)v10 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "Basic Block in function '", 0x19uLL);
    }
    if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
    {
      uint64_t ValueName = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
      unint64_t v13 = ValueName + 2;
      size_t v12 = *ValueName;
    }
    else
    {
      size_t v12 = 0;
      unint64_t v13 = &str_3_24;
    }
    long long v15 = llvm::raw_ostream::operator<<(v10, v13, v12);
    unint64_t v16 = (void *)*((void *)v15 + 4);
    if (*((void *)v15 + 3) - (void)v16 > 0x1BuLL)
    {
      qmemcpy(v16, "' does not have terminator!\n", 28);
      *((void *)v15 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' does not have terminator!\n", 0x1CuLL);
    }
    printAsOperandImpl((llvm::Type **)v6, *(uint64_t ***)this, 1, (_anonymous_namespace_::Verifier *)((char *)this + 16));
    uint64_t v17 = *(void *)this;
    __int16 v18 = *(unsigned char **)(*(void *)this + 32);
    if (*(unsigned char **)(*(void *)this + 24) != v18)
    {
      BOOL result = 0;
      unsigned char *v18 = 10;
      ++*(void *)(v17 + 32);
      return result;
    }
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "\n", 1uLL);
  }
  return 0;
}

void anonymous namespace'::Verifier::~Verifier(_anonymous_namespace_::Verifier *this)
{
  unsigned int v2 = (char *)*((void *)this + 255);
  if (v2 != (char *)this + 2056) {
    free(v2);
  }
  MEMORY[0x263E500A0](*((void *)this + 252), 8);
  MEMORY[0x263E500A0](*((void *)this + 249), 8);
  uint64_t v3 = (char *)*((void *)this + 230);
  if (v3 != (char *)this + 1856) {
    free(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 195);
  if (v4 != *((void **)this + 194)) {
    free(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 159);
  if (v5 != *((void **)this + 158)) {
    free(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 152);
  if (v6 != (char *)this + 1232) {
    free(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 117);
  if (v7 != *((void **)this + 116)) {
    free(v7);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll((uint64_t *)this + 113);
  MEMORY[0x263E500A0](*((void *)this + 113), 8);
  uint64_t v8 = (void *)*((void *)this + 110);
  if (v8)
  {
    *((void *)this + 111) = v8;
    operator delete(v8);
  }
  MEMORY[0x263E500A0](*((void *)this + 107), 8);
  MEMORY[0x263E500A0](*((void *)this + 104), 8);
  MEMORY[0x263E500A0](*((void *)this + 101), 8);
  __int16 v9 = (void *)*((void *)this + 94);
  if (v9 != *((void **)this + 93)) {
    free(v9);
  }
  MEMORY[0x263E500A0](*((void *)this + 90), 8);
  char v10 = (void *)*((void *)this + 55);
  if (v10 != *((void **)this + 54)) {
    free(v10);
  }
  char v11 = (void *)*((void *)this + 35);
  if (v11 != *((void **)this + 34)) {
    free(v11);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((unsigned int *)this + 56);
  MEMORY[0x263E500A0](*((void *)this + 28), 8);
  size_t v12 = (char *)*((void *)this + 25);
  if (v12 != (char *)this + 216) {
    free(v12);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  llvm::ModuleSlotTracker::~ModuleSlotTracker((_anonymous_namespace_::Verifier *)((char *)this + 16));
}

uint64_t llvm::verifyModule(llvm *this, const llvm::Module *a2, llvm::raw_ostream *a3, BOOL *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)this + 24;
  uint64_t v7 = *((void *)this + 4);
  if ((char *)v7 == v6)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      if (v7) {
        __int16 v9 = (const llvm::Function *)(v7 - 56);
      }
      else {
        __int16 v9 = 0;
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while ((char *)v7 != v6);
  }
  if (a3) {
    *(unsigned char *)a3 = v12[193];
  }
  return v8 & 1 | !v10;
}

BOOL anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this)
{
  uint64_t v359 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 192) = 0;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = v4 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if (*(_DWORD *)(v5 + 36) == 120)
      {
        unint64_t v6 = *((unsigned int *)this + 306);
        if (v6 >= *((unsigned int *)this + 307))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1216, (char *)this + 1232, v6 + 1, 8);
          unint64_t v6 = *((unsigned int *)this + 306);
        }
        *(void *)(*((void *)this + 152) + 8 * v6) = v5;
        ++*((_DWORD *)this + 306);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  if (*((_DWORD *)this + 210))
  {
    uint64_t v7 = *((unsigned int *)this + 212);
    if (v7)
    {
      uint64_t v8 = 16 * v7;
      uint64_t v9 = *((void *)this + 104);
      while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 16;
        v8 -= 16;
        if (!v8) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v9 = *((void *)this + 104);
    }
    uint64_t v289 = *((void *)this + 104) + 16 * v7;
LABEL_638:
    if (v9 != v289)
    {
      __p[0] = 0;
      __p[0] = *(void **)v9;
      if (*(_DWORD *)(v9 + 12) > *(_DWORD *)(v9 + 8))
      {
        v354 = "all indices passed to llvm.localrecover must be less than the number of arguments passed to llvm.localesc"
               "ape in the parent function";
        v358[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
      }
      else
      {
        while (1)
        {
          v9 += 16;
          if (v9 == v289) {
            break;
          }
          if ((*(void *)v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_638;
          }
        }
      }
    }
  }
LABEL_15:
  uint64_t v10 = *((void *)this + 1);
  uint64_t v11 = v10 + 8;
  uint64_t v12 = *(void *)(v10 + 16);
  if (v12 != v10 + 8)
  {
    uint64_t v339 = v10 + 8;
    while (1)
    {
      if (v12) {
        uint64_t v13 = (void ***)(v12 - 56);
      }
      else {
        uint64_t v13 = 0;
      }
      if (v12 && *((unsigned char *)v13 + 16) == 3)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_35;
        }
      }
      else if (!*((unsigned char *)v13 + 16) && v13[9] == v13 + 9 && (*((unsigned char *)v13 + 35) & 1) == 0)
      {
        goto LABEL_35;
      }
      int v14 = (llvm::Constant *)*(v13 - 4);
      if (*(void ***)v14 != v13[3])
      {
        long long v15 = "Global variable initializer type does not match global variable type!";
LABEL_29:
        v354 = v15;
        v358[0] = 259;
        __p[0] = v13;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
        goto LABEL_195;
      }
      if ((v13[4] & 0xF) == 0xA)
      {
        if ((llvm::Constant::isNullValue(v14) & 1) == 0)
        {
          long long v15 = "'common' global must have a zero initializer!";
          goto LABEL_29;
        }
        if ((_BYTE)v13[10])
        {
          long long v15 = "'common' global may not be marked constant!";
          goto LABEL_29;
        }
        if (v13[6])
        {
          long long v15 = "'common' global may not be in a Comdat!";
          goto LABEL_29;
        }
      }
LABEL_35:
      if ((*((unsigned char *)v13 + 23) & 0x10) == 0) {
        goto LABEL_53;
      }
      uint64_t ValueName = llvm::Value::getValueName(v13);
      if (*(void *)ValueName != 17
        || (*(void *)(ValueName + 16) == 0x6F6C672E6D766C6CLL
          ? (BOOL v17 = *(void *)(ValueName + 24) == 0x726F74635F6C6162)
          : (BOOL v17 = 0),
            v17 ? (BOOL v18 = *(unsigned char *)(ValueName + 32) == 115) : (BOOL v18 = 0),
            !v18))
      {
        if ((*((unsigned char *)v13 + 23) & 0x10) == 0) {
          goto LABEL_53;
        }
        uint64_t v19 = llvm::Value::getValueName(v13);
        if (*(void *)v19 != 17) {
          goto LABEL_53;
        }
        BOOL v20 = *(void *)(v19 + 16) == 0x6F6C672E6D766C6CLL && *(void *)(v19 + 24) == 0x726F74645F6C6162;
        if (!v20 || *(unsigned char *)(v19 + 32) != 115) {
          goto LABEL_53;
        }
      }
      if (v12 && *((unsigned char *)v13 + 16) == 3)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_169;
        }
      }
      else if (!*((unsigned char *)v13 + 16) && v13[9] == v13 + 9 && (*((unsigned char *)v13 + 35) & 1) == 0)
      {
        goto LABEL_169;
      }
      if ((v13[4] & 0xF) != 6) {
        goto LABEL_186;
      }
LABEL_169:
      if (v13[1]) {
        goto LABEL_185;
      }
      uint64_t v64 = v13[3];
      if (v64 && *((unsigned char *)v64 + 8) == 17)
      {
        uint64_t v65 = v64[3];
        int v66 = *((unsigned __int8 *)v65 + 8);
        uint64_t v67 = (llvm::PointerType **)llvm::FunctionType::get((uint64_t **)(**((void **)this + 23) + 1608), 0, 0, 0);
        uint64_t v68 = llvm::PointerType::get(v67, (llvm::Type *)*(unsigned int *)(*((void *)this + 22) + 12));
        if (!v65) {
          goto LABEL_206;
        }
        if (v66 != 16) {
          goto LABEL_206;
        }
        int v69 = *((_DWORD *)v65 + 3);
        if ((v69 & 0xFFFFFFFE) != 2) {
          goto LABEL_206;
        }
        BOOL v70 = (void *)v65[2];
        if (*(_DWORD *)(*v70 + 8) != 8205 || v70[1] != v68) {
          goto LABEL_206;
        }
        if (v69 != 3)
        {
          v354 = "the third field of the element type is mandatory, specify ptr null to migrate from the obsoleted 2-field form";
          v358[0] = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
          goto LABEL_195;
        }
        uint64_t v71 = v70[2];
        if (*(unsigned char *)(v71 + 8) != 15 || (uint64_t v72 = *(void *)(v71 + 24)) != 0 && v72 != **(void **)v71 + 1944)
        {
LABEL_206:
          long long v15 = "wrong type for intrinsic global variable";
          goto LABEL_29;
        }
      }
LABEL_53:
      if ((*((unsigned char *)v13 + 23) & 0x10) == 0) {
        goto LABEL_68;
      }
      uint64_t v22 = llvm::Value::getValueName(v13);
      if (*(void *)v22 != 9
        || (*(void *)(v22 + 16) == 0x6573752E6D766C6CLL ? (BOOL v23 = *(unsigned char *)(v22 + 24) == 100) : (BOOL v23 = 0), !v23))
      {
        if ((*((unsigned char *)v13 + 23) & 0x10) == 0) {
          goto LABEL_68;
        }
        uint64_t v24 = llvm::Value::getValueName(v13);
        if (*(void *)v24 != 18) {
          goto LABEL_68;
        }
        BOOL v25 = *(void *)(v24 + 16) == 0x6D6F632E6D766C6CLL && *(void *)(v24 + 24) == 0x73752E72656C6970;
        if (!v25 || *(_WORD *)(v24 + 32) != 25701) {
          goto LABEL_68;
        }
      }
      if (v12) {
        BOOL v59 = *((unsigned char *)v13 + 16) == 3;
      }
      else {
        BOOL v59 = 0;
      }
      char v60 = !v59;
      if (v59)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_184;
        }
      }
      else if (!*((unsigned char *)v13 + 16) && v13[9] == v13 + 9 && (*((unsigned char *)v13 + 35) & 1) == 0)
      {
        goto LABEL_184;
      }
      if ((v13[4] & 0xF) != 6)
      {
LABEL_186:
        long long v15 = "invalid linkage for intrinsic global variable";
        goto LABEL_29;
      }
LABEL_184:
      if (v13[1])
      {
LABEL_185:
        long long v15 = "invalid uses of intrinsic global variable";
        goto LABEL_29;
      }
      uint64_t v73 = v13[3];
      if (!v73 || *((unsigned char *)v73 + 8) != 17) {
        goto LABEL_68;
      }
      unint64_t v74 = v73[3];
      if (!v74 || *((unsigned char *)v74 + 8) != 15) {
        goto LABEL_206;
      }
      if (v60)
      {
        if (!*((unsigned char *)v13 + 16) && v13[9] == v13 + 9 && (*((unsigned char *)v13 + 35) & 1) == 0) {
          goto LABEL_68;
        }
      }
      else if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
      {
        goto LABEL_68;
      }
      uint64_t v77 = (uint64_t)*(v13 - 4);
      if (!v77 || *(unsigned char *)(v77 + 16) != 8)
      {
        v354 = "wrong initalizer for intrinsic global variable";
        v358[0] = 259;
        llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
        if (*(void *)this) {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v77);
        }
        goto LABEL_195;
      }
      int v78 = *(_DWORD *)(v77 + 20);
      if ((v78 & 0x40000000) != 0)
      {
        int64_t v80 = *(llvm::Value ***)(v77 - 8);
        uint64_t v79 = v78 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v79 = v78 & 0x7FFFFFF;
        int64_t v80 = (llvm::Value **)(v77 - 32 * v79);
      }
      if (!v79)
      {
LABEL_68:
        if ((*((unsigned char *)v13 + 34) & 0x80) != 0)
        {
          uint64_t v27 = (uint64_t *)(***v13 + 2552);
          v354 = v13;
          unsigned int v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v27, &v354);
          if (v28[2] == 12)
          {
            uint64_t v29 = (uint64_t *)v28[1];
            uint64_t v30 = *v29;
            int v31 = *((_DWORD *)v29 + 2);
            if (v30 == 0x7274702E6D766C6CLL && v31 == 1752462689)
            {
              llvm::GlobalPtrAuthInfo::tryAnalyze(v13, (uint64_t)&v354);
              if (v355)
              {
                if (v354)
                {
                  *(void *)&long long v346 = v354;
                  llvm::toString((uint64_t *)&v346, &v352);
                  unsigned int v33 = std::string::insert(&v352, 0, "invalid llvm.ptrauth global: ");
                  std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                  *(void *)&long long v348 = v34;
                  v33->__r_.__value_.__l.__size_ = 0;
                  v33->__r_.__value_.__r.__words[2] = 0;
                  v33->__r_.__value_.__r.__words[0] = 0;
                  v358[0] = 260;
                  v354 = __p;
                  v342 = (llvm::Type **)v13;
                  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, &v342);
                  if (SBYTE7(v348) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v352.__r_.__value_.__l.__data_);
                  }
                  if ((void)v346) {
                    (*(void (**)(void))(*(void *)v346 + 8))(v346);
                  }
                  goto LABEL_195;
                }
              }
            }
          }
        }
        v352.__r_.__value_.__r.__words[0] = (std::string::size_type)&v352.__r_.__value_.__r.__words[2];
        v352.__r_.__value_.__l.__size_ = 0x100000000;
        llvm::Value::getMetadata(v13, 0, (unsigned int *)&v352);
        if (LODWORD(v352.__r_.__value_.__r.__words[1]))
        {
          uint64_t v35 = (uint64_t *)v352.__r_.__value_.__r.__words[0];
          uint64_t v36 = 8 * LODWORD(v352.__r_.__value_.__r.__words[1]);
          do
          {
            if (*(unsigned char *)*v35 != 7)
            {
              v354 = "!dbg attachment of global variable must be a DIGlobalVariableExpression";
              v358[0] = 259;
              llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
              goto LABEL_192;
            }
            v36 -= 8;
          }
          while (v36);
        }
        LODWORD(v352.__r_.__value_.__r.__words[1]) = 0;
        llvm::Value::getMetadata(v13, 28, (unsigned int *)&v352);
        if (LODWORD(v352.__r_.__value_.__r.__words[1]))
        {
          BOOL v37 = (uint64_t *)v352.__r_.__value_.__r.__words[0];
          std::string::size_type v341 = v352.__r_.__value_.__r.__words[0] + 8 * LODWORD(v352.__r_.__value_.__r.__words[1]);
          do
          {
            uint64_t v38 = *v37;
            uint64_t v40 = (unint64_t *)(*v37 - 16);
            unint64_t v39 = *v40;
            if ((*v40 & 2) != 0)
            {
              if (!*(_DWORD *)(v38 - 24)) {
                goto LABEL_138;
              }
              int v41 = *(uint64_t **)(v38 - 32);
            }
            else
            {
              if ((v39 & 0x3C0) == 0) {
                goto LABEL_138;
              }
              int v41 = (uint64_t *)&v40[-((v39 >> 2) & 0xF)];
            }
            uint64_t v42 = *v41;
            if (*(unsigned char *)v42 != 1 || (uint64_t v43 = *(void *)(v42 + 128), *(unsigned char *)(v43 + 16) != 16))
            {
LABEL_138:
              v354 = "bad !vcall_visibility attachment";
              v358[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
              goto LABEL_192;
            }
            LODWORD(__p[1]) = *(_DWORD *)(v43 + 32);
            if (LODWORD(__p[1]) >= 0x41) {
              operator new[]();
            }
            int v44 = *(void **)(v43 + 24);
            __p[0] = v44;
            if (v44 == (void *)-1)
            {
LABEL_112:
              v354 = "bad !vcall_visibility attachment";
              v358[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
LABEL_113:
              char v51 = 0;
              goto LABEL_114;
            }
            unint64_t v45 = *v40;
            if ((*v40 & 2) != 0)
            {
              unsigned int v47 = *(_DWORD *)(v38 - 24);
              if (v47 != 3) {
                goto LABEL_110;
              }
              int v46 = *(unint64_t **)(v38 - 32);
            }
            else
            {
              if ((*v40 & 0x3C0) != 0xC0)
              {
                unsigned int v47 = (v45 >> 6) & 0xF;
LABEL_110:
                if (v47 != 1) {
                  goto LABEL_112;
                }
                goto LABEL_111;
              }
              int v46 = &v40[-((v45 >> 2) & 0xF)];
            }
            unint64_t v48 = v46[1];
            if (*(unsigned char *)v48 != 1) {
              goto LABEL_112;
            }
            uint64_t v49 = *(void *)(v48 + 128);
            if (*(unsigned char *)(v49 + 16) != 16) {
              goto LABEL_112;
            }
            DWORD2(v346) = *(_DWORD *)(v49 + 32);
            if (DWORD2(v346) >= 0x41) {
              operator new[]();
            }
            unint64_t v50 = *(void *)(v49 + 24);
            *(void *)&long long v346 = v50;
            if (v50 == -1) {
              goto LABEL_126;
            }
            uint64_t v52 = (*v40 & 2) != 0 ? *(unint64_t **)(v38 - 32) : &v40[-((*v40 >> 2) & 0xF)];
            unint64_t v53 = v52[2];
            if (*(unsigned char *)v53 != 1) {
              goto LABEL_126;
            }
            uint64_t v54 = *(void *)(v53 + 128);
            if (*(unsigned char *)(v54 + 16) != 16) {
              goto LABEL_126;
            }
            unsigned int v343 = *(_DWORD *)(v54 + 32);
            if (v343 >= 0x41) {
              operator new[]();
            }
            uint64_t v55 = *(llvm::Type ***)(v54 + 24);
            v342 = v55;
            if (v55 == (llvm::Type **)-1 || v50 > (unint64_t)v55)
            {
LABEL_126:
              v354 = "bad !vcall_visibility attachment";
              v358[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
              int v56 = 1;
            }
            else
            {
              int v56 = 0;
            }
            if (v56) {
              goto LABEL_113;
            }
LABEL_111:
            char v51 = 1;
LABEL_114:
            if ((v51 & 1) == 0) {
              goto LABEL_192;
            }
            ++v37;
          }
          while (v37 != (uint64_t *)v341);
        }
        uint64_t v57 = (uint64_t *)v13[3];
        int v58 = *((unsigned __int8 *)v57 + 8);
        switch(v58)
        {
          case 16:
            if (llvm::StructType::containsScalableVectorType((llvm::StructType *)v13[3])) {
              goto LABEL_136;
            }
            break;
          case 19:
LABEL_136:
            v354 = "Globals cannot contain scalable vectors";
            v358[0] = 259;
            __p[0] = v13;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
            goto LABEL_192;
          case 21:
            getTargetTypeInfo(v57);
            if ((v61 & 2) == 0)
            {
              if ((*((unsigned char *)v13 + 23) & 0x10) != 0)
              {
                int v75 = (uint64_t *)llvm::Value::getValueName(v13);
                uint64_t v76 = *v75;
                uint64_t v63 = v75 + 2;
                uint64_t v62 = v76;
              }
              else
              {
                uint64_t v62 = 0;
                uint64_t v63 = &str_3_24;
              }
              __int16 v349 = 1283;
              __p[0] = "Global @";
              *(void *)&long long v348 = v63;
              *((void *)&v348 + 1) = v62;
              v354 = __p;
              uint64_t v356 = (uint64_t)" has illegal target extension type";
              v358[0] = 770;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
              if (*(void *)this) {
                llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (llvm::Type *)v57);
              }
              goto LABEL_192;
            }
            break;
        }
        if (v12 && *((unsigned char *)v13 + 16) == 3)
        {
          if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0) {
            goto LABEL_191;
          }
        }
        else if (!*((unsigned char *)v13 + 16) && v13[9] == v13 + 9 && (*((unsigned char *)v13 + 35) & 1) == 0)
        {
          goto LABEL_191;
        }
LABEL_191:
LABEL_192:
        if ((std::string::size_type *)v352.__r_.__value_.__l.__data_ != &v352.__r_.__value_.__r.__words[2]) {
          free(v352.__r_.__value_.__l.__data_);
        }
        uint64_t v11 = v339;
        goto LABEL_195;
      }
      uint64_t v81 = 32 * v79;
      while (1)
      {
        int64_t v82 = llvm::Value::stripPointerCasts(*v80);
        v342 = (llvm::Type **)v82;
        unsigned int v83 = *((unsigned __int8 *)v82 + 16);
        if (v83 > 3 || v83 == 2)
        {
          v352.__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid ";
          __int16 v353 = 259;
          if ((*((unsigned char *)v13 + 23) & 0x10) != 0)
          {
            int v95 = (void **)llvm::Value::getValueName(v13);
            int v96 = *v95;
            int v94 = v95 + 2;
            uint64_t v92 = v96;
            char v93 = v353;
            if (v353 == 1)
            {
              __p[0] = v94;
              __p[1] = v92;
              long long v348 = v346;
              __int16 v349 = 261;
              int v350 = v344;
              __int16 v351 = v345;
              char v91 = 5;
LABEL_246:
              v354 = v94;
              uint64_t v355 = (uint64_t)v92;
              char v97 = 3;
              int v99 = " member";
              goto LABEL_247;
            }
            if (!(_BYTE)v353)
            {
LABEL_239:
              char v91 = 0;
              __int16 v349 = 256;
              char v97 = 1;
              goto LABEL_248;
            }
          }
          else
          {
            uint64_t v92 = 0;
            char v93 = 3;
            int v94 = (void **)&str_3_24;
          }
          uint64_t v98 = (std::string *)v352.__r_.__value_.__r.__words[0];
          char v91 = 2;
          if (HIBYTE(v353) != 1)
          {
            char v93 = 2;
            uint64_t v98 = &v352;
          }
          __p[0] = v98;
          __p[1] = (void *)v352.__r_.__value_.__l.__size_;
          *(void *)&long long v348 = v94;
          *((void *)&v348 + 1) = v92;
          LOBYTE(v349) = v93;
          HIBYTE(v349) = 5;
          int v94 = __p;
          goto LABEL_246;
        }
        if ((*((unsigned char *)v82 + 23) & 0x10) == 0) {
          break;
        }
        v80 += 4;
        v81 -= 32;
        if (!v81) {
          goto LABEL_68;
        }
      }
      v352.__r_.__value_.__r.__words[0] = (std::string::size_type)"members of ";
      __int16 v353 = 259;
      if ((*((unsigned char *)v13 + 23) & 0x10) == 0)
      {
        unint64_t v85 = 0;
        char v86 = 3;
        uint64_t v87 = (void **)&str_3_24;
        goto LABEL_232;
      }
      uint64_t v88 = (void **)llvm::Value::getValueName(v13);
      uint64_t v89 = *v88;
      uint64_t v87 = v88 + 2;
      unint64_t v85 = v89;
      char v86 = v353;
      if (v353 == 1)
      {
        __p[0] = v87;
        __p[1] = v85;
        long long v348 = v346;
        __int16 v349 = 261;
        int v350 = v344;
        __int16 v351 = v345;
        char v91 = 5;
        goto LABEL_244;
      }
      if (!(_BYTE)v353) {
        goto LABEL_239;
      }
LABEL_232:
      unsigned int v90 = (std::string *)v352.__r_.__value_.__r.__words[0];
      char v91 = 2;
      if (HIBYTE(v353) != 1)
      {
        char v86 = 2;
        unsigned int v90 = &v352;
      }
      __p[0] = v90;
      __p[1] = (void *)v352.__r_.__value_.__l.__size_;
      *(void *)&long long v348 = v87;
      *((void *)&v348 + 1) = v85;
      LOBYTE(v349) = v86;
      HIBYTE(v349) = 5;
      uint64_t v87 = __p;
LABEL_244:
      v354 = v87;
      uint64_t v355 = (uint64_t)v85;
      char v97 = 3;
      int v99 = " must be named";
LABEL_247:
      uint64_t v356 = (uint64_t)v99;
LABEL_248:
      LOBYTE(v358[0]) = v91;
      HIBYTE(v358[0]) = v97;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, &v342);
LABEL_195:
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == v11)
      {
        uint64_t v10 = *((void *)this + 1);
        break;
      }
    }
  }
  uint64_t v100 = v10 + 40;
  uint64_t v101 = *(void *)(v10 + 48);
  if (v101 == v10 + 40) {
    goto LABEL_283;
  }
  do
  {
    if (v101) {
      uint64_t v102 = (_DWORD *)(v101 - 48);
    }
    else {
      uint64_t v102 = 0;
    }
    int v103 = v102[8];
    BOOL v104 = (v103 & 0xFu) > 8 || ((1 << (v103 & 0xF)) & 0x181) == 0;
    int v105 = v103 & 0xE;
    if (v104 && v105 != 2 && v105 != 4 && (v102[8] & 0xF) != 1)
    {
      unint64_t v112 = "Alias should have private, internal, linkonce, weak, linkonce_odr, weak_odr, external, or available_externally linkage!";
LABEL_271:
      v354 = v112;
      goto LABEL_272;
    }
    uint64_t v109 = *((void *)v102 - 4);
    if (!v109)
    {
      unint64_t v112 = "Aliasee cannot be NULL!";
      goto LABEL_271;
    }
    if (*(void *)v102 != *(void *)v109)
    {
      v354 = "Alias and aliasee types should match!";
LABEL_272:
      v358[0] = 259;
      __p[0] = v102;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
      goto LABEL_273;
    }
    unsigned int v110 = *(unsigned __int8 *)(v109 + 16);
    if (v110 >= 4 && v110 != 5)
    {
      unint64_t v112 = "Aliasee should be either GlobalValue or ConstantExpr";
      goto LABEL_271;
    }
    v354 = v358;
    uint64_t v355 = (uint64_t)v358;
    uint64_t v356 = 4;
    int v357 = 0;
    llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)__p, (llvm::SmallPtrSetImplBase *)&v354, v102);
    if ((void *)v355 != v354) {
      free((void *)v355);
    }
LABEL_273:
    uint64_t v101 = *(void *)(v101 + 8);
  }
  while (v101 != v100);
  uint64_t v10 = *((void *)this + 1);
LABEL_283:
  uint64_t v113 = v10 + 56;
  uint64_t v114 = *(void *)(v10 + 64);
  if (v114 != v10 + 56)
  {
    unint64_t v115 = "IFunc should have private, internal, linkonce, weak, linkonce_odr, weak_odr, or external linkage!";
    unint64_t v116 = "IFunc resolver must be a definition";
    while (1)
    {
      if (v114) {
        uint64_t v117 = v114 - 56;
      }
      else {
        uint64_t v117 = 0;
      }
      unsigned int v118 = *(_DWORD *)(v117 + 32) & 0xF;
      BOOL v119 = v118 > 8;
      int v120 = (1 << v118) & 0x1BD;
      if (v119 || v120 == 0)
      {
        v354 = v115;
        goto LABEL_307;
      }
      int v122 = llvm::Value::stripPointerCastsAndAliases(*(llvm::Value **)(v117 - 32));
      if (v122) {
        BOOL v123 = *((unsigned char *)v122 + 16) == 0;
      }
      else {
        BOOL v123 = 0;
      }
      if (!v123)
      {
        v354 = "IFunc must have a Function resolver";
LABEL_307:
        v358[0] = 259;
        __p[0] = (void *)v117;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
        goto LABEL_308;
      }
      if ((*((_DWORD *)v122 + 8) & 0xF) == 1
        || (*((_DWORD *)v122 + 8) & 0x1000000) == 0 && *((llvm::Value **)v122 + 9) == (llvm::Value *)((char *)v122 + 72))
      {
        v354 = v116;
        goto LABEL_307;
      }
      if (*(unsigned char *)(**(void **)(*((void *)v122 + 3) + 16) + 8) != 15) {
        break;
      }
      unint64_t v124 = v116;
      unint64_t v125 = v115;
      uint64_t v126 = **(void **)(v117 - 32);
      uint64_t v127 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType ***)(v117 + 24), 0);
      BOOL v128 = (llvm::PointerType **)llvm::FunctionType::get(v127, 0, 0, 0);
      BOOL v17 = v126 == llvm::PointerType::get(v128, (llvm::Type *)(*(_DWORD *)(*(void *)v117 + 8) >> 8));
      unint64_t v115 = v125;
      unint64_t v116 = v124;
      if (!v17)
      {
        unint64_t v129 = "IFunc resolver has incorrect type";
LABEL_306:
        v354 = v129;
        goto LABEL_307;
      }
LABEL_308:
      uint64_t v114 = *(void *)(v114 + 8);
      if (v114 == v113)
      {
        uint64_t v10 = *((void *)this + 1);
        goto LABEL_310;
      }
    }
    unint64_t v129 = "IFunc resolver must return a pointer";
    goto LABEL_306;
  }
LABEL_310:
  uint64_t v130 = v10 + 72;
  uint64_t v131 = *(void *)(v10 + 80);
  if (v131 == v10 + 72) {
    goto LABEL_408;
  }
  while (2)
  {
    v132 = (uint64_t **)(v131 + 16);
    int v133 = *(char *)(v131 + 39);
    if (v133 >= 0) {
      unint64_t v134 = (uint64_t *)(v131 + 16);
    }
    else {
      unint64_t v134 = *(uint64_t **)(v131 + 16);
    }
    uint64_t v135 = *(void *)(v131 + 24);
    uint64_t v136 = *(unsigned __int8 *)(v131 + 39);
    if (v133 >= 0) {
      unint64_t v137 = *(unsigned __int8 *)(v131 + 39);
    }
    else {
      unint64_t v137 = *(void *)(v131 + 24);
    }
    if (v137 >= 9 && *v134 == 0x6762642E6D766C6CLL && *((unsigned char *)v134 + 8) == 46)
    {
      if (v137 != 11
        || ((uint64_t v179 = *v134, v180 = *(uint64_t *)((char *)v134 + 3), v179 == 0x6762642E6D766C6CLL)
          ? (BOOL v181 = v180 == 0x75632E6762642E6DLL)
          : (BOOL v181 = 0),
            !v181))
      {
        v354 = "unrecognized named metadata node in the llvm.dbg namespace";
        v358[0] = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
        if (*(void *)this) {
          llvm::VerifierSupport::Write(this, (const llvm::NamedMDNode *)v131);
        }
        goto LABEL_406;
      }
    }
    uint64_t v139 = *(unsigned int *)(*(void *)(v131 + 48) + 8);
    if (v139)
    {
      uint64_t v140 = 0;
      uint64_t v141 = 8 * v139;
      while (1)
      {
        char v142 = *(unsigned char **)(**(void **)(v131 + 48) + v140);
        uint64_t v143 = *(unsigned __int8 *)(v131 + 39);
        int v144 = (char)v143;
        if ((v143 & 0x80u) != 0) {
          uint64_t v143 = *(void *)(v131 + 24);
        }
        if (v143 == 11
          && (v144 >= 0 ? (uint64_t v145 = (uint64_t *)(v131 + 16)) : (uint64_t v145 = *v132),
              (uint64_t v146 = *v145, v147 = *(uint64_t *)((char *)v145 + 3), v146 == 0x6762642E6D766C6CLL)
            ? (BOOL v148 = v147 == 0x75632E6762642E6DLL)
            : (BOOL v148 = 0),
              v148))
        {
          if (!v142 || *v142 != 16)
          {
            v354 = "invalid compile unit";
            v358[0] = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
            if (*(void *)this)
            {
              llvm::VerifierSupport::Write(this, (const llvm::NamedMDNode *)v131);
              llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v142);
            }
            goto LABEL_406;
          }
        }
        else if (!v142)
        {
          goto LABEL_339;
        }
LABEL_339:
        v140 += 8;
        if (v141 == v140)
        {
          uint64_t v136 = *(unsigned __int8 *)(v131 + 39);
          uint64_t v135 = *(void *)(v131 + 24);
          LOBYTE(v133) = *(unsigned char *)(v131 + 39);
          break;
        }
      }
    }
    if ((v133 & 0x80u) != 0) {
      uint64_t v136 = v135;
    }
    if (v136 == 21)
    {
      unint64_t v149 = *v132;
      if ((v133 & 0x80u) == 0) {
        unint64_t v149 = (uint64_t *)(v131 + 16);
      }
      uint64_t v150 = *v149;
      uint64_t v151 = v149[1];
      uint64_t v152 = *(uint64_t *)((char *)v149 + 13);
      BOOL v153 = v150 == 0x6573752E6D766C6CLL && v151 == 0x7469646E6F632E64;
      if (v153 && v152 == 0x6C616E6F69746964)
      {
        uint64_t v155 = *(unsigned int *)(*(void *)(v131 + 48) + 8);
        if (v155)
        {
          uint64_t v156 = 0;
          while (1)
          {
            uint64_t v157 = *(void *)(**(void **)(v131 + 48) + 8 * v156);
            uint64_t v158 = v157 - 16;
            unint64_t v159 = *(void *)(v157 - 16);
            if ((v159 & 2) != 0)
            {
              if (*(_DWORD *)(v157 - 24) != 3) {
                break;
              }
              v160 = *(uint64_t **)(v157 - 32);
            }
            else
            {
              if ((*(void *)(v157 - 16) & 0x3C0) != 0xC0) {
                break;
              }
              v160 = (uint64_t *)(v158 - 8 * ((v159 >> 2) & 0xF));
            }
            uint64_t v161 = *v160;
            if (v161)
            {
              if (*(unsigned char *)v161 != 1 || *(unsigned __int8 *)(*(void *)(v161 + 128) + 16) >= 4u) {
                break;
              }
            }
            uint64_t v162 = (v159 & 2) != 0 ? *(void *)(v157 - 32) : v158 - 8 * ((v159 >> 2) & 0xF);
            uint64_t v163 = *(void *)(*(void *)(v162 + 8) + 128);
            unsigned int v164 = *(_DWORD *)(v163 + 32);
            unint64_t v165 = v164 > 0x40
                 ? **(void **)(v163 + 24)
                 : (uint64_t)(*(void *)(v163 + 24) << -(char)v164) >> -(char)v164;
            if (v165 >= 2) {
              break;
            }
            uint64_t v166 = (v159 & 2) != 0 ? *(void *)(v157 - 32) : v158 - 8 * ((v159 >> 2) & 0xF);
            uint64_t v167 = *(unsigned char **)(v166 + 16);
            char v168 = llvm::MDNode::classof(v167);
            if (!v167 || (v168 & 1) == 0) {
              break;
            }
            unint64_t v169 = *((void *)v167 - 2);
            if ((v169 & 2) != 0)
            {
              uint64_t v173 = *((unsigned int *)v167 - 6);
              if (v173)
              {
                unsigned __int32 v171 = (uint64_t *)*((void *)v167 - 4);
                v172 = &v171[v173];
                goto LABEL_382;
              }
              break;
            }
            if ((v169 & 0x3C0) == 0) {
              break;
            }
            uint64_t v170 = (v169 >> 6) & 0xF;
            if (v170)
            {
              unsigned __int32 v171 = (uint64_t *)&v167[-8 * ((v169 >> 2) & 0xF) - 16];
              v172 = &v171[v170];
LABEL_382:
              do
              {
                uint64_t v174 = *v171;
                if (*v171)
                {
                  v175 = *(unsigned char *)v174 == 1 ? *(llvm::Value **)(v174 + 128) : 0;
                  uint64_t v176 = llvm::Value::stripPointerCasts(v175);
                  unsigned int v177 = *((unsigned __int8 *)v176 + 16);
                  if ((!v176 || v177 - 13 <= 0xFFFFFFFD) && v177 >= 4 && v177 != 19) {
                    goto LABEL_405;
                  }
                }
                ++v171;
              }
              while (v171 != v172);
            }
            if (++v156 == v155) {
              goto LABEL_406;
            }
          }
LABEL_405:
          v354 = "invalid llvm.used.conditional member";
          v358[0] = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
        }
      }
    }
LABEL_406:
    uint64_t v131 = *(void *)(v131 + 8);
    if (v131 != v130) {
      continue;
    }
    break;
  }
  uint64_t v10 = *((void *)this + 1);
LABEL_408:
  uint64_t v182 = *(unsigned int *)(v10 + 128);
  if (v182)
  {
    for (uint64_t i = *(void **)(v10 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *(void **)(v10 + 120);
  }
  uint64_t v185 = *(void *)(v10 + 120) + 8 * v182;
  if (i != (void *)v185)
  {
    do
    {
      if (*((_DWORD *)this + 43) == 1)
      {
        int v186 = (_DWORD *)llvm::ValueSymbolTable::lookup(*(void *)(*((void *)this + 1) + 112), (uint64_t *)(*(void *)(*i + 8) + 72), **(void **)(*i + 8));
        __p[0] = v186;
        if (v186)
        {
          if ((v186[8] & 0xF) == 8)
          {
            v354 = "comdat global value has private linkage";
            v358[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (llvm::Type ***)__p);
          }
        }
      }
      do
      {
        uint64_t v188 = i[1];
        ++i;
        uint64_t v187 = v188;
        if (v188) {
          BOOL v189 = v187 == -8;
        }
        else {
          BOOL v189 = 1;
        }
      }
      while (v189);
    }
    while (i != (void *)v185);
    uint64_t v10 = *((void *)this + 1);
  }
  v354 = "llvm.module.flags";
  v358[0] = 259;
  Nameduint64_t Metadata = llvm::Module::getNamedMetadata((llvm::Module *)v10, (const llvm::Twine *)&v354);
  if (NamedMetadata)
  {
    uint64_t v191 = NamedMetadata;
    memset(&v352, 0, 20);
    v354 = &v356;
    uint64_t v355 = 0x1000000000;
    uint64_t v192 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (!v192)
    {
LABEL_623:
      MEMORY[0x263E500A0](v352.__r_.__value_.__r.__words[0], 8);
      goto LABEL_624;
    }
    uint64_t v340 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = "invalid ID operand in module flag (expected metadata string)";
    while (2)
    {
      uint64_t v195 = *(void *)(**(void **)(v191 + 48) + 8 * v193);
      *(void *)&long long v346 = v195;
      v197 = (unint64_t *)(v195 - 16);
      unint64_t v196 = *(void *)(v195 - 16);
      if ((v196 & 2) == 0)
      {
        if ((*(void *)(v195 - 16) & 0x3C0) == 0xC0)
        {
          LODWORD(v342) = 0;
          char v198 = (uint64_t *)&v197[-((v196 >> 2) & 0xF)];
          goto LABEL_436;
        }
LABEL_439:
        __p[0] = "incorrect number of operands in module flag";
        __int16 v349 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (uint64_t *)&v346);
LABEL_459:
        if (++v193 == v192)
        {
          v269 = (uint64_t *)v354;
          if (v355)
          {
            uint64_t v270 = v352.__r_.__value_.__r.__words[0];
            int v271 = v352.__r_.__value_.__r.__words[2];
            uint64_t v272 = 8 * v355;
            while (1)
            {
              unint64_t v273 = *(void *)(*v269 - 16);
              if ((v273 & 2) != 0) {
                v274 = *(void **)(*v269 - 32);
              }
              else {
                v274 = (void *)(*v269 - 16 - 8 * ((v273 >> 2) & 0xF));
              }
              uint64_t v275 = v274[1];
              *(void *)&long long v346 = *v274;
              __p[0] = 0;
              if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v270, v271, v346, __p) & 1) != 0&& (uint64_t v276 = *((void *)__p[0] + 1)) != 0)
              {
                unint64_t v277 = *(void *)(v276 - 16);
                if ((v277 & 2) != 0) {
                  uint64_t v278 = *(void *)(v276 - 32);
                }
                else {
                  uint64_t v278 = v276 - 16 - 8 * ((v277 >> 2) & 0xF);
                }
                if (*(void *)(v278 + 16) == v275) {
                  goto LABEL_619;
                }
                __p[0] = "invalid requirement on flag, flag does not have the required value";
              }
              else
              {
                __p[0] = "invalid requirement on flag, flag is not present in module";
              }
              __int16 v349 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (uint64_t *)&v346);
LABEL_619:
              ++v269;
              v272 -= 8;
              if (!v272)
              {
                v269 = (uint64_t *)v354;
                break;
              }
            }
          }
          if (v269 != &v356) {
            free(v269);
          }
          goto LABEL_623;
        }
        continue;
      }
      break;
    }
    if (*(_DWORD *)(v195 - 24) != 3) {
      goto LABEL_439;
    }
    LODWORD(v342) = 0;
    char v198 = *(uint64_t **)(v195 - 32);
LABEL_436:
    char isValidModFlagBehavior = llvm::Module::isValidModFlagBehavior(*v198, &v342);
    unint64_t v200 = *v197;
    if ((isValidModFlagBehavior & 1) == 0)
    {
      if ((v200 & 2) != 0) {
        unint64_t v202 = *(uint64_t **)(v195 - 32);
      }
      else {
        unint64_t v202 = (uint64_t *)&v197[-((v200 >> 2) & 0xF)];
      }
      uint64_t v205 = *v202;
      if (v205 && *(unsigned char *)v205 == 1 && *(unsigned char *)(*(void *)(v205 + 128) + 16) == 16) {
        __p[0] = "invalid behavior operand in module flag (unexpected constant)";
      }
      else {
        __p[0] = "invalid behavior operand in module flag (expected constant integer)";
      }
      __int16 v349 = 259;
      if ((v200 & 2) != 0) {
        v206 = *(uint64_t **)(v195 - 32);
      }
      else {
        v206 = (uint64_t *)&v197[-((v200 >> 2) & 0xF)];
      }
      goto LABEL_458;
    }
    if ((v200 & 2) != 0) {
      unint64_t v201 = *(unint64_t **)(v195 - 32);
    }
    else {
      unint64_t v201 = &v197[-((v200 >> 2) & 0xF)];
    }
    uint64_t v203 = v201[1];
    if (!v203 || *(unsigned char *)v203)
    {
      __p[0] = (void *)v194;
      __int16 v349 = 259;
      if ((v200 & 2) != 0) {
        uint64_t v204 = *(unint64_t **)(v195 - 32);
      }
      else {
        uint64_t v204 = &v197[-((v200 >> 2) & 0xF)];
      }
      v206 = (uint64_t *)(v204 + 1);
LABEL_458:
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v206);
      goto LABEL_459;
    }
    switch((int)v342)
    {
      case 3:
        int v208 = v194;
        if ((v200 & 2) != 0) {
          uint64_t v217 = *(unint64_t **)(v195 - 32);
        }
        else {
          uint64_t v217 = &v197[-((v200 >> 2) & 0xF)];
        }
        unint64_t v220 = (unsigned char *)v217[2];
        int v221 = llvm::MDNode::classof(v220);
        if (v220) {
          BOOL v222 = v221 == 0;
        }
        else {
          BOOL v222 = 1;
        }
        if (v222) {
          goto LABEL_540;
        }
        unint64_t v223 = *((void *)v220 - 2);
        if ((v223 & 2) != 0)
        {
          if (*((_DWORD *)v220 - 6) == 2)
          {
            v224 = (uint64_t *)*((void *)v220 - 4);
            goto LABEL_538;
          }
        }
        else if ((*((void *)v220 - 2) & 0x3C0) == 0x80)
        {
          v224 = (uint64_t *)&v220[-8 * ((v223 >> 2) & 0xF) - 16];
LABEL_538:
          if (*(unsigned char *)*v224)
          {
            __p[0] = "invalid value for 'require' module flag (first value operand should be a string)";
            __int16 v349 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v224);
            goto LABEL_469;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v354, (uint64_t)v220);
          uint64_t v194 = v208;
          goto LABEL_476;
        }
LABEL_540:
        __p[0] = "invalid value for 'require' module flag (expected metadata pair)";
        __int16 v349 = 259;
        if ((*v197 & 2) != 0) {
          v240 = *(unint64_t **)(v195 - 32);
        }
        else {
          v240 = &v197[-((*v197 >> 2) & 0xF)];
        }
        uint64_t v194 = v208;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (uint64_t *)v240 + 2);
        goto LABEL_459;
      case 5:
      case 6:
        if ((v200 & 2) != 0) {
          v207 = *(unint64_t **)(v195 - 32);
        }
        else {
          v207 = &v197[-((v200 >> 2) & 0xF)];
        }
        if (llvm::MDNode::classof((unsigned char *)v207[2])) {
          goto LABEL_466;
        }
        __p[0] = "invalid value for 'append'-type module flag (expected a metadata node)";
        __int16 v349 = 259;
        unint64_t v200 = *v197;
        if ((*v197 & 2) != 0) {
          goto LABEL_486;
        }
        goto LABEL_515;
      case 7:
        if ((v200 & 2) != 0) {
          uint64_t v218 = *(unint64_t **)(v195 - 32);
        }
        else {
          uint64_t v218 = &v197[-((v200 >> 2) & 0xF)];
        }
        unint64_t v225 = v218[2];
        if (v225 && *(unsigned char *)v225 == 1 && *(unsigned char *)(*(void *)(v225 + 128) + 16) == 16) {
          goto LABEL_466;
        }
        uint64_t v226 = "invalid value for 'max' module flag (expected constant integer)";
        goto LABEL_514;
      case 8:
        if ((v200 & 2) != 0) {
          uint64_t v219 = *(unint64_t **)(v195 - 32);
        }
        else {
          uint64_t v219 = &v197[-((v200 >> 2) & 0xF)];
        }
        unint64_t v227 = v219[2];
        if (v227)
        {
          if (*(unsigned char *)v227 == 1)
          {
            uint64_t v228 = *(void *)(v227 + 128);
            if (*(unsigned char *)(v228 + 16) == 16)
            {
              unint64_t v229 = (void *)(v228 + 24);
              unsigned int v230 = *(_DWORD *)(v228 + 32);
              unsigned int v231 = v230 - 1;
              if (v230 >= 0x41) {
                unint64_t v229 = (void *)(*v229 + 8 * (v231 >> 6));
              }
              if (((*v229 >> v231) & 1) == 0) {
                goto LABEL_466;
              }
            }
          }
        }
        uint64_t v226 = "invalid value for 'min' module flag (expected constant non-negative integer)";
LABEL_514:
        __p[0] = (void *)v226;
        __int16 v349 = 259;
        if ((v200 & 2) != 0) {
LABEL_486:
        }
          int v216 = *(unint64_t **)(v195 - 32);
        else {
LABEL_515:
        }
          int v216 = &v197[-((v200 >> 2) & 0xF)];
        v206 = (uint64_t *)(v216 + 2);
        goto LABEL_458;
      default:
LABEL_466:
        int v208 = v194;
        __p[0] = 0;
        unsigned int v209 = v352.__r_.__value_.__r.__words[2];
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v340, v352.__r_.__value_.__r.__words[2], v203, __p))
        {
          __p[0] = "module flag identifiers must be unique (or of 'require' type)";
          __int16 v349 = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
          if (*(void *)this) {
            llvm::VerifierSupport::Write((uint64_t)this, v203);
          }
LABEL_469:
          uint64_t v194 = v208;
          goto LABEL_459;
        }
        if (4 * LODWORD(v352.__r_.__value_.__r.__words[1]) + 4 >= 3 * v209)
        {
          int v268 = 2 * v209;
        }
        else
        {
          if (v209 + ~LODWORD(v352.__r_.__value_.__r.__words[1]) - HIDWORD(v352.__r_.__value_.__r.__words[1]) > v209 >> 3)
          {
LABEL_473:
            uint64_t v210 = __p[0];
            ++LODWORD(v352.__r_.__value_.__r.__words[1]);
            uint64_t v194 = v208;
            if (*(void *)__p[0] != -4096) {
              --HIDWORD(v352.__r_.__value_.__r.__words[1]);
            }
            *(void *)__p[0] = v203;
            v210[1] = v195;
LABEL_476:
            unint64_t v211 = *(uint64_t **)(v203 + 8);
            unint64_t v212 = v211 + 3;
            uint64_t v213 = *v211;
            if (*v211 == 14)
            {
              if (*v212 != 0x4F2072656B6E694CLL || *(uint64_t *)((char *)v211 + 30) != 0x736E6F6974704F20) {
                goto LABEL_459;
              }
              v233 = (llvm::Module *)*((void *)this + 1);
              __p[0] = "llvm.linker.options";
              __int16 v349 = 259;
              if (!llvm::Module::getNamedMetadata(v233, (const llvm::Twine *)__p))
              {
                __p[0] = "'Linker Options' named metadata no longer supported";
                __int16 v349 = 259;
                llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
                goto LABEL_459;
              }
              unint64_t v211 = *(uint64_t **)(v203 + 8);
              uint64_t v213 = *v211;
            }
            else if (v213 == 10)
            {
              if (*v212 != 0x69735F7261686377 || *((_WORD *)v211 + 16) != 25978) {
                goto LABEL_549;
              }
              uint64_t v215 = (*v197 & 2) != 0 ? *(unint64_t **)(v195 - 32) : &v197[-((*v197 >> 2) & 0xF)];
              unint64_t v241 = v215[2];
              if (v241)
              {
                if (*(unsigned char *)v241 == 1 && *(unsigned char *)(*(void *)(v241 + 128) + 16) == 16) {
                  goto LABEL_549;
                }
              }
              v246 = "wchar_size metadata requires constant integer argument";
              goto LABEL_601;
            }
            unint64_t v212 = v211 + 3;
            if (v213 == 10)
            {
LABEL_549:
              uint64_t v242 = *v212;
              int v243 = *((unsigned __int16 *)v212 + 4);
              if (v242 != 0x69666F7250204743 || v243 != 25964) {
                goto LABEL_459;
              }
              v245 = (*v197 & 2) != 0 ? *(unint64_t **)(v195 - 32) : &v197[-((*v197 >> 2) & 0xF)];
              unint64_t v247 = v245[2];
              unint64_t v248 = *(void *)(v247 - 16);
              if ((v248 & 2) != 0)
              {
                __int16 v249 = *(uint64_t **)(v247 - 32);
                uint64_t v250 = *(unsigned int *)(v247 - 24);
              }
              else
              {
                __int16 v249 = (uint64_t *)(v247 - 16 - 8 * ((v248 >> 2) & 0xF));
                uint64_t v250 = (v248 >> 6) & 0xF;
              }
              if (!v250) {
                goto LABEL_459;
              }
              uint64_t v251 = 8 * v250;
              while (1)
              {
                uint64_t v252 = *v249;
                if (!*v249 || !llvm::MDNode::classof((unsigned char *)*v249)) {
                  break;
                }
                v254 = (unint64_t *)(v252 - 16);
                unint64_t v253 = *(void *)(v252 - 16);
                if ((v253 & 2) != 0)
                {
                  if (*(_DWORD *)(v252 - 24) != 3) {
                    break;
                  }
                  v255 = *(uint64_t **)(v252 - 32);
                }
                else
                {
                  if ((*(void *)(v252 - 16) & 0x3C0) != 0xC0) {
                    break;
                  }
                  v255 = (uint64_t *)&v254[-((v253 >> 2) & 0xF)];
                }
                v256 = (llvm::Value **)*v255;
                if (*v255
                  && (*(unsigned __int8 *)v256 - 3 < 0xFFFFFFFE
                   || *((unsigned char *)llvm::Value::stripPointerCasts(v256[16]) + 16)))
                {
                  __p[0] = "expected a Function or null";
                  __int16 v349 = 259;
                  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v255);
                }
                if ((*v254 & 2) != 0) {
                  v257 = *(unint64_t **)(v252 - 32);
                }
                else {
                  v257 = &v254[-((*v254 >> 2) & 0xF)];
                }
                v262 = (llvm::Value **)v257[1];
                v261 = (uint64_t *)(v257 + 1);
                v260 = v262;
                if (v262
                  && (*(unsigned __int8 *)v260 - 3 < 0xFFFFFFFE
                   || *((unsigned char *)llvm::Value::stripPointerCasts(v260[16]) + 16)))
                {
                  __p[0] = "expected a Function or null";
                  __int16 v349 = 259;
                  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v261);
                }
                unint64_t v263 = *v254;
                if ((*v254 & 2) != 0) {
                  v264 = *(unint64_t **)(v252 - 32);
                }
                else {
                  v264 = &v254[-((v263 >> 2) & 0xF)];
                }
                unint64_t v265 = v264[2];
                if (v265 && *(unsigned char *)v265 == 1 && *(unsigned char *)(**(void **)(v265 + 128) + 8) == 13) {
                  goto LABEL_578;
                }
                __p[0] = "expected an integer constant";
                __int16 v349 = 259;
                if ((v263 & 2) != 0) {
                  v266 = *(unint64_t **)(v252 - 32);
                }
                else {
                  v266 = &v254[-((v263 >> 2) & 0xF)];
                }
                v259 = (uint64_t *)(v266 + 2);
                v258 = (llvm::raw_ostream **)this;
LABEL_577:
                llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(v258, (const llvm::Twine *)__p, v259);
LABEL_578:
                ++v249;
                v251 -= 8;
                if (!v251)
                {
                  uint64_t v194 = "invalid ID operand in module flag (expected metadata string)";
                  goto LABEL_459;
                }
              }
              __p[0] = "expected a MDNode triple";
              __int16 v349 = 259;
              v258 = (llvm::raw_ostream **)this;
              v259 = v249;
              goto LABEL_577;
            }
            if (v213 != 21) {
              goto LABEL_459;
            }
            uint64_t v234 = *v212;
            uint64_t v235 = v211[4];
            uint64_t v236 = *(uint64_t *)((char *)v212 + 13);
            BOOL v237 = v234 == 0x6369746E616D6553 && v235 == 0x736F707265746E49;
            if (!v237 || v236 != 0x6E6F697469736F70) {
              goto LABEL_459;
            }
            v239 = (*v197 & 2) != 0 ? *(unint64_t **)(v195 - 32) : &v197[-((*v197 >> 2) & 0xF)];
            unint64_t v267 = v239[2];
            if (v267)
            {
              if (*(unsigned char *)v267 == 1 && *(unsigned char *)(*(void *)(v267 + 128) + 16) == 16) {
                goto LABEL_459;
              }
            }
            v246 = "SemanticInterposition metadata requires constant integer argument";
LABEL_601:
            __p[0] = (void *)v246;
            __int16 v349 = 259;
            llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
            goto LABEL_459;
          }
          int v268 = v209;
        }
        llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow((uint64_t)&v352, v268);
        __p[0] = 0;
        uint64_t v340 = v352.__r_.__value_.__r.__words[0];
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v352.__r_.__value_.__l.__data_, v352.__r_.__value_.__r.__words[2], v203, __p);
        goto LABEL_473;
    }
  }
LABEL_624:
  v279 = (llvm::Module *)*((void *)this + 1);
  v354 = "llvm.ident";
  v358[0] = 259;
  uint64_t v280 = llvm::Module::getNamedMetadata(v279, (const llvm::Twine *)&v354);
  if (v280)
  {
    uint64_t v281 = *(void *)(v280 + 48);
    uint64_t v282 = *(unsigned int *)(v281 + 8);
    if (v282)
    {
      v283 = *(void ***)v281;
      while (1)
      {
        v284 = (char *)*v283;
        __p[0] = v284;
        v285 = v284 - 16;
        unint64_t v286 = *((void *)v284 - 2);
        if ((v286 & 2) != 0)
        {
          if (*((_DWORD *)v284 - 6) != 1)
          {
LABEL_645:
            v354 = "incorrect number of operands in llvm.ident metadata";
            v358[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (uint64_t *)__p);
            goto LABEL_648;
          }
          v287 = (char *)*((void *)v284 - 4);
        }
        else
        {
          if ((*((void *)v284 - 2) & 0x3C0) != 0x40) {
            goto LABEL_645;
          }
          v287 = &v285[-8 * ((v286 >> 2) & 0xF)];
        }
        v288 = *(unsigned char **)v287;
        if (!v288 || *v288) {
          break;
        }
        ++v283;
        if (!--v282) {
          goto LABEL_648;
        }
      }
      v354 = "invalid value for llvm.ident metadata entry operand(the operand should be a string)";
      v358[0] = 259;
      if ((v286 & 2) != 0) {
        v290 = (uint64_t *)*((void *)v284 - 4);
      }
      else {
        v290 = (uint64_t *)&v285[-8 * ((v286 >> 2) & 0xF)];
      }
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, v290);
    }
  }
LABEL_648:
  v291 = (llvm::Module *)*((void *)this + 1);
  v354 = "llvm.commandline";
  v358[0] = 259;
  uint64_t v292 = llvm::Module::getNamedMetadata(v291, (const llvm::Twine *)&v354);
  if (v292)
  {
    uint64_t v293 = *(void *)(v292 + 48);
    uint64_t v294 = *(unsigned int *)(v293 + 8);
    if (v294)
    {
      v295 = *(void ***)v293;
      while (1)
      {
        v296 = (char *)*v295;
        __p[0] = v296;
        v297 = v296 - 16;
        unint64_t v298 = *((void *)v296 - 2);
        if ((v298 & 2) != 0)
        {
          if (*((_DWORD *)v296 - 6) != 1)
          {
LABEL_662:
            v354 = "incorrect number of operands in llvm.commandline metadata";
            v358[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, (uint64_t *)__p);
            goto LABEL_665;
          }
          v299 = (char *)*((void *)v296 - 4);
        }
        else
        {
          if ((*((void *)v296 - 2) & 0x3C0) != 0x40) {
            goto LABEL_662;
          }
          v299 = &v297[-8 * ((v298 >> 2) & 0xF)];
        }
        v300 = *(unsigned char **)v299;
        if (!v300 || *v300) {
          break;
        }
        ++v295;
        if (!--v294) {
          goto LABEL_665;
        }
      }
      v354 = "invalid value for llvm.commandline metadata entry operand(the operand should be a string)";
      v358[0] = 259;
      if ((v298 & 2) != 0) {
        v301 = (uint64_t *)*((void *)v296 - 4);
      }
      else {
        v301 = (uint64_t *)&v297[-8 * ((v298 >> 2) & 0xF)];
      }
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v354, v301);
    }
  }
LABEL_665:
  int v302 = (llvm::Module *)*((void *)this + 1);
  if (!*(unsigned char *)(**(void **)v302 + 1224))
  {
    v354 = "llvm.dbg.cu";
    v358[0] = 259;
    uint64_t v303 = llvm::Module::getNamedMetadata(v302, (const llvm::Twine *)&v354);
    v354 = v358;
    uint64_t v355 = (uint64_t)v358;
    uint64_t v356 = 2;
    int v357 = 0;
    if (v303)
    {
      uint64_t v304 = v303;
      uint64_t v305 = *(unsigned int *)(*(void *)(v303 + 48) + 8);
      if (v305)
      {
        uint64_t v306 = 0;
        uint64_t v307 = 8 * v305;
        do
        {
          llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v354, *(const void **)(**(void **)(v304 + 48) + v306), (uint64_t)__p);
          v306 += 8;
        }
        while (v307 != v306);
      }
    }
    uint64_t v308 = *((void *)this + 94);
    uint64_t v309 = 760;
    if (v308 == *((void *)this + 93)) {
      uint64_t v309 = 764;
    }
    uint64_t v310 = *(unsigned int *)((char *)this + v309);
    if (v310)
    {
      uint64_t v311 = 8 * v310;
      v312 = (std::string::size_type *)*((void *)this + 94);
      while (*v312 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v312;
        v311 -= 8;
        if (!v311) {
          goto LABEL_686;
        }
      }
    }
    else
    {
      v312 = (std::string::size_type *)*((void *)this + 94);
    }
    v313 = (std::string::size_type *)(v308 + 8 * v310);
    if (v312 != v313)
    {
LABEL_679:
      v352.__r_.__value_.__r.__words[0] = 0;
      v352.__r_.__value_.__r.__words[0] = *v312;
      imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v354, v352.__r_.__value_.__l.__data_);
      if ((void *)v355 == v354) {
        v315 = (uint64_t *)((char *)&v356 + 4);
      }
      else {
        v315 = &v356;
      }
      if (imp == (const void **)(v355 + 8 * *(unsigned int *)v315))
      {
        __p[0] = "DICompileUnit not listed in llvm.dbg.cu";
        __int16 v349 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (uint64_t *)&v352);
LABEL_687:
        if ((void *)v355 != v354) {
          free((void *)v355);
        }
        goto LABEL_689;
      }
      while (++v312 != v313)
      {
        if (*v312 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v312 != v313) {
            goto LABEL_679;
          }
          break;
        }
      }
    }
LABEL_686:
    llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 744));
    goto LABEL_687;
  }
LABEL_689:
  uint64_t v316 = *((unsigned int *)this + 306);
  if (v316 >= 2)
  {
    v317 = (void *)*((void *)this + 152);
    uint64_t v320 = *v317;
    v318 = (llvm::Type ***)(v317 + 1);
    v319 = (llvm::Type **)v320;
    unsigned __int16 v321 = *(_WORD *)(v320 + 18);
    uint64_t v322 = 8 * v316 - 8;
    while (1)
    {
      int v323 = *v318;
      if (((*((_WORD *)*v318 + 9) ^ v321) & 0x3FF0) != 0) {
        break;
      }
      ++v318;
      v322 -= 8;
      if (!v322) {
        goto LABEL_698;
      }
    }
    v354 = "All llvm.experimental.deoptimize declarations must have the same calling convention";
    v358[0] = 259;
    llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v354);
    if (*(void *)this)
    {
      if (v319) {
        llvm::VerifierSupport::Write((uint64_t ***)this, v319);
      }
      llvm::VerifierSupport::Write((uint64_t ***)this, v323);
    }
  }
LABEL_698:
  v324 = (void *)((char *)this + 720);
  int v325 = *((_DWORD *)this + 182);
  if (v325)
  {
    unsigned int v326 = *((_DWORD *)this + 184);
    if (v326 > 4 * v325 && v326 >= 0x41)
    {
      int v327 = 1 << (33 - __clz(v325 - 1));
      if (v327 <= 64) {
        int v328 = 64;
      }
      else {
        int v328 = v327;
      }
LABEL_707:
      if (v328 == v326)
      {
        *((void *)this + 91) = 0;
        v329 = (void *)*((void *)this + 90);
        uint64_t v330 = 16 * v326;
        do
        {
          void *v329 = -4096;
          v329 += 2;
          v330 -= 16;
        }
        while (v330);
      }
      else
      {
        MEMORY[0x263E500A0](*v324, 8);
        if (v328)
        {
          unint64_t v334 = (4 * v328 / 3u + 1) | ((unint64_t)(4 * v328 / 3u + 1) >> 1);
          unint64_t v335 = v334 | (v334 >> 2) | ((v334 | (v334 >> 2)) >> 4);
          LODWORD(v335) = (((v335 | (v335 >> 8)) >> 16) | v335 | (v335 >> 8)) + 1;
          *((_DWORD *)this + 184) = v335;
          v336 = operator new(16 * v335, (std::align_val_t)8uLL);
          *((void *)this + 90) = v336;
          *((void *)this + 91) = 0;
          uint64_t v337 = *((unsigned int *)this + 184);
          if (v337)
          {
            uint64_t v338 = 16 * v337;
            do
            {
              void *v336 = -4096;
              v336 += 2;
              v338 -= 16;
            }
            while (v338);
          }
        }
        else
        {
          void *v324 = 0;
          *((void *)this + 91) = 0;
          *((_DWORD *)this + 184) = 0;
        }
      }
      return *((unsigned char *)this + 192) == 0;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 183)) {
      return *((unsigned char *)this + 192) == 0;
    }
    unsigned int v326 = *((_DWORD *)this + 184);
    if (v326 > 0x40)
    {
      int v328 = 0;
      goto LABEL_707;
    }
  }
  if (v326)
  {
    v331 = (void *)*v324;
    uint64_t v332 = 16 * v326;
    do
    {
      void *v331 = -4096;
      v331 += 2;
      v332 -= 16;
    }
    while (v332);
  }
  *((void *)this + 91) = 0;
  return *((unsigned char *)this + 192) == 0;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNode(llvm::TBAAVerifier *this, llvm::Type **a2, const llvm::MDNode *a3, int a4)
{
  uint64_t v49 = a3;
  uint64_t v9 = (unint64_t *)((char *)a3 - 16);
  uint64_t v8 = *((void *)a3 - 2);
  if ((v8 & 2) != 0) {
    unsigned int v10 = *((_DWORD *)a3 - 6);
  }
  else {
    unsigned int v10 = (v8 >> 6) & 0xF;
  }
  if (v10 > 1)
  {
    uint64_t v15 = *((void *)this + 1);
    v55[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v15, *((_DWORD *)this + 6), (uint64_t)a3, v55))BOOL v16 = v55[0] == *((void *)this + 1) + 16 * *((unsigned int *)this + 6); {
    else
    }
      BOOL v16 = 1;
    if (!v16)
    {
      uint64_t v19 = *(void *)(v55[0] + 8);
      int v12 = v19 & 0xFFFFFF00;
      unint64_t v13 = v19 & 0xFFFFFFFF00000000;
      uint64_t v14 = v19;
      return v13 | v14 | v12 & 0xFFFFFF00;
    }
    uint64_t v54 = a3;
    unint64_t v17 = *((void *)a3 - 2);
    if ((v17 & 2) != 0) {
      unsigned int v18 = *((_DWORD *)a3 - 6);
    }
    else {
      unsigned int v18 = (v17 >> 6) & 0xF;
    }
    if (v18 == 2)
    {
      int v20 = !llvm::TBAAVerifier::isValidScalarTBAANode(this, a3);
      uint64_t v21 = (v20 << 31 >> 31);
      goto LABEL_37;
    }
    if (a4)
    {
      if ((v17 & 2) != 0)
      {
        if ((-1431655765 * *((_DWORD *)a3 - 6)) < 0x55555556)
        {
          uint64_t v22 = (unint64_t *)*((void *)a3 - 4);
LABEL_46:
          unint64_t v30 = v22[1];
          if (v30 && *(unsigned char *)v30 == 1 && *(unsigned char *)(*(void *)(v30 + 128) + 16) == 16)
          {
            int v31 = 3;
            unsigned int v32 = 3;
LABEL_53:
            LOBYTE(v20) = 0;
            LOBYTE(v51) = 0;
            unsigned int v47 = -1;
            char v53 = 0;
            if ((v17 & 2) != 0) {
              goto LABEL_56;
            }
LABEL_54:
            if (v32 < ((v17 >> 6) & 0xF))
            {
              for (uint64_t i = &v9[-((v17 >> 2) & 0xF)]; ; uint64_t i = (unint64_t *)*((void *)a3 - 4))
              {
                if ((llvm::MDNode::classof((unsigned char *)i[v32]) & 1) == 0)
                {
                  unint64_t v50 = a2;
                  uint64_t v38 = *(llvm::raw_ostream ***)this;
                  if (*(void *)this)
                  {
                    unint64_t v39 = "Incorrect field entry in struct type node!";
                    goto LABEL_70;
                  }
LABEL_71:
                  LOBYTE(v20) = 1;
                  goto LABEL_72;
                }
                unint64_t v35 = i[v32 + 1];
                if (!v35 || *(unsigned char *)v35 != 1 || (uint64_t v36 = *(void *)(v35 + 128), *(unsigned char *)(v36 + 16) != 16))
                {
                  unint64_t v50 = a2;
                  uint64_t v38 = *(llvm::raw_ostream ***)this;
                  if (*(void *)this)
                  {
                    unint64_t v39 = "Offset entries must be constants!";
LABEL_70:
                    v55[0] = v39;
                    __int16 v56 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v38, (const llvm::Twine *)v55, &v50, (uint64_t *)&v54);
                  }
                  goto LABEL_71;
                }
                unsigned int v37 = *(_DWORD *)(v36 + 32);
                if (v47 != -1 && v37 != v47)
                {
                  unint64_t v50 = a2;
                  uint64_t v38 = *(llvm::raw_ostream ***)this;
                  if (*(void *)this)
                  {
                    unint64_t v39 = "Bitwidth between the offsets and struct type entries must match";
                    goto LABEL_70;
                  }
                  goto LABEL_71;
                }
                uint64_t v40 = (const llvm::APInt *)(v36 + 24);
                if (!v53) {
                  break;
                }
                unsigned int v48 = *(_DWORD *)(v36 + 32);
                if ((int)llvm::APInt::compare((llvm::APInt *)&v51, v40) >= 1)
                {
                  unint64_t v50 = a2;
                  int v41 = *(llvm::raw_ostream ***)this;
                  if (*(void *)this)
                  {
                    v55[0] = "Offsets must be increasing!";
                    __int16 v56 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v41, (const llvm::Twine *)v55, &v50, (uint64_t *)&v54);
                    if (!v53)
                    {
                      unsigned int v42 = *(_DWORD *)(v36 + 32);
                      LOBYTE(v20) = 1;
                      unsigned int v37 = v48;
                      uint64_t v40 = (const llvm::APInt *)(v36 + 24);
                      goto LABEL_81;
                    }
                  }
                  LOBYTE(v20) = 1;
                }
                llvm::APInt::operator=((llvm::APInt *)&v51, (const llvm::APInt *)(v36 + 24));
                unsigned int v37 = v48;
LABEL_84:
                if (a4)
                {
                  uint64_t v43 = (*v9 & 2) != 0 ? (unint64_t *)*((void *)a3 - 4) : &v9[-((*v9 >> 2) & 0xF)];
                  unint64_t v44 = v43[v32 + 2];
                  if (!v44 || *(unsigned char *)v44 != 1 || *(unsigned char *)(*(void *)(v44 + 128) + 16) != 16)
                  {
                    unint64_t v50 = a2;
                    unint64_t v45 = *(llvm::raw_ostream ***)this;
                    if (*(void *)this)
                    {
                      v55[0] = "Member size entries must be constants!";
                      __int16 v56 = 259;
                      unsigned int v46 = v37;
                      llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v45, (const llvm::Twine *)v55, &v50, (uint64_t *)&v54);
                      unsigned int v37 = v46;
                    }
                    LOBYTE(v20) = 1;
                  }
                }
                unsigned int v47 = v37;
LABEL_72:
                v32 += v31;
                unint64_t v17 = *v9;
                if ((*v9 & 2) == 0) {
                  goto LABEL_54;
                }
LABEL_56:
                if (v32 >= *((_DWORD *)a3 - 6)) {
                  goto LABEL_96;
                }
              }
              unsigned int v42 = *(_DWORD *)(v36 + 32);
LABEL_81:
              unsigned int v52 = v42;
              if (v42 > 0x40) {
                operator new[]();
              }
              char v51 = *(llvm::Type ***)v40;
              char v53 = 1;
              goto LABEL_84;
            }
LABEL_96:
            if (v20) {
              uint64_t v21 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v21 = v47;
            }
            if (v53 && v52 > 0x40 && v51) {
              MEMORY[0x263E50080](v51, 0x1000C8000313F17);
            }
LABEL_37:
            uint64_t v14 = v20 & 1;
            unint64_t v13 = v21 << 32;
            v55[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 1), *((_DWORD *)this + 6), (uint64_t)a3, v55))
            {
LABEL_43:
              int v12 = 0;
              return v13 | v14 | v12 & 0xFFFFFF00;
            }
            int v26 = *((_DWORD *)this + 4);
            unsigned int v27 = *((_DWORD *)this + 6);
            if (4 * v26 + 4 >= 3 * v27)
            {
              v27 *= 2;
            }
            else if (v27 + ~v26 - *((_DWORD *)this + 5) > v27 >> 3)
            {
LABEL_40:
              unsigned int v28 = (void *)v55[0];
              ++*((_DWORD *)this + 4);
              if (*v28 != -4096) {
                --*((_DWORD *)this + 5);
              }
              void *v28 = a3;
              v28[1] = v20 & 1 | ((unint64_t)v21 << 32);
              goto LABEL_43;
            }
            llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow((uint64_t)this + 8, v27);
            v55[0] = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 1), *((_DWORD *)this + 6), (uint64_t)a3, v55);
            goto LABEL_40;
          }
          char v51 = a2;
          unsigned int v33 = *(llvm::raw_ostream ***)this;
          if (*(void *)this)
          {
            v55[0] = "Type size nodes must be constants!";
            __int16 v56 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v33, (const llvm::Twine *)v55, &v51, (uint64_t *)&v54);
          }
          goto LABEL_36;
        }
      }
      else if (-1431655765 * ((v17 >> 6) & 0xF) < 0x55555556)
      {
        uint64_t v22 = &v9[-((v17 >> 2) & 0xF)];
        goto LABEL_46;
      }
      uint64_t v24 = *(llvm::raw_ostream ***)this;
      if (!*(void *)this) {
        goto LABEL_36;
      }
      BOOL v25 = "Access tag nodes must have the number of operands that is a multiple of 3!";
LABEL_35:
      v55[0] = v25;
      __int16 v56 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(v24, (const llvm::Twine *)v55, (uint64_t *)&v54);
      goto LABEL_36;
    }
    if ((v17 & 2) != 0)
    {
      if (*((unsigned char *)a3 - 24))
      {
        BOOL v23 = (unint64_t *)*((void *)a3 - 4);
        goto LABEL_32;
      }
    }
    else if ((v17 & 0x40) != 0)
    {
      BOOL v23 = &v9[-((v17 >> 2) & 0xF)];
LABEL_32:
      if (!*(unsigned char *)*v23)
      {
        unsigned int v32 = 1;
        int v31 = 2;
        goto LABEL_53;
      }
      uint64_t v24 = *(llvm::raw_ostream ***)this;
      if (!*(void *)this)
      {
LABEL_36:
        uint64_t v21 = 0xFFFFFFFFLL;
        LOBYTE(v20) = 1;
        goto LABEL_37;
      }
      BOOL v25 = "Struct tag nodes have a string as their first operand";
      goto LABEL_35;
    }
    uint64_t v24 = *(llvm::raw_ostream ***)this;
    if (!*(void *)this) {
      goto LABEL_36;
    }
    BOOL v25 = "Struct tag nodes must have an odd number of operands!";
    goto LABEL_35;
  }
  char v51 = a2;
  uint64_t v11 = *(llvm::raw_ostream ***)this;
  if (*(void *)this)
  {
    v55[0] = "Base nodes must have at least two operands";
    __int16 v56 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v11, (const llvm::Twine *)v55, &v51, (uint64_t *)&v49);
  }
  int v12 = 0;
  unint64_t v13 = 0xFFFFFFFF00000000;
  uint64_t v14 = 1;
  return v13 | v14 | v12 & 0xFFFFFF00;
}

BOOL llvm::TBAAVerifier::isValidScalarTBAANode(llvm::TBAAVerifier *this, const llvm::MDNode *a2)
{
  uint64_t v5 = (char *)this + 32;
  uint64_t v4 = *((void *)this + 4);
  int v12 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v4, *((_DWORD *)v5 + 4), (uint64_t)a2, &v12))BOOL v6 = v12 == (unsigned __int8 *)(*(void *)v5 + 16 * *((unsigned int *)v5 + 4)); {
  else
  }
    BOOL v6 = 1;
  if (!v6) {
    return v12[8] != 0;
  }
  int v12 = v16;
  unint64_t v13 = v16;
  uint64_t v14 = 4;
  int v15 = 0;
  uint64_t v10 = IsScalarTBAANodeImpl((uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v12);
  uint64_t v17 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 4), *((_DWORD *)this + 12), (uint64_t)a2, &v17) & 1) == 0)
  {
    unsigned int v7 = *((_DWORD *)this + 12);
    int v8 = *((_DWORD *)this + 10);
    if (4 * v8 + 4 >= 3 * v7)
    {
      v7 *= 2;
    }
    else if (v7 + ~v8 - *((_DWORD *)this + 11) > v7 >> 3)
    {
LABEL_9:
      uint64_t v9 = v17;
      ++*((_DWORD *)this + 10);
      if (*(void *)v9 != -4096) {
        --*((_DWORD *)this + 11);
      }
      *(void *)uint64_t v9 = a2;
      *(unsigned char *)(v9 + 8) = v10;
      goto LABEL_12;
    }
    llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow((uint64_t)v5, v7);
    uint64_t v17 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 4), *((_DWORD *)this + 12), (uint64_t)a2, &v17);
    goto LABEL_9;
  }
LABEL_12:
  if (v13 != v12) {
    free(v13);
  }
  return v10;
}

uint64_t IsScalarTBAANodeImpl(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v4 = a1 - 16;
  unint64_t v5 = *(void *)(a1 - 16);
  if ((v5 & 2) == 0)
  {
    if ((*(void *)(a1 - 16) & 0x380 | 0x40) != 0xC0) {
      return 0;
    }
    uint64_t v6 = (v5 >> 2) & 0xF;
    uint64_t v7 = v4 - 8 * v6;
    if (**(unsigned char **)v7) {
      return 0;
    }
    if ((*(void *)(a1 - 16) & 0x3C0) != 0xC0)
    {
      uint64_t v8 = -v6;
LABEL_6:
      uint64_t v7 = v4 + 8 * v8;
      goto LABEL_20;
    }
LABEL_10:
    uint64_t v10 = *(void *)(v7 + 16);
    if (*(unsigned char *)v10 != 1) {
      return 0;
    }
    uint64_t v11 = *(void *)(v10 + 128);
    if (*(unsigned char *)(v11 + 16) != 16) {
      return 0;
    }
    int v12 = (llvm::APInt *)(v11 + 24);
    unsigned int v13 = *(_DWORD *)(v11 + 32);
    if (v13 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v12) != v13) {
        return 0;
      }
    }
    else if (*(void *)v12)
    {
      return 0;
    }
    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(void *)(a1 - 32);
      if (!**(unsigned char **)v7) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v14 = (v5 >> 2) & 0xF;
      if (!**(unsigned char **)(v4 - 8 * v14))
      {
        uint64_t v8 = -v14;
        goto LABEL_6;
      }
    }
    return 0;
  }
  int v9 = *(_DWORD *)(a1 - 24);
  if ((v9 & 0xFFFFFFFE) != 2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 - 32);
  if (**(unsigned char **)v7) {
    return 0;
  }
  if (v9 == 3) {
    goto LABEL_10;
  }
LABEL_20:
  int v15 = *(const void **)(v7 + 8);
  if (!v15) {
    return 0;
  }
  if ((llvm::MDNode::classof(*(unsigned char **)(v7 + 8)) & 1) == 0) {
    return 0;
  }
  llvm::SmallPtrSetImpl<llvm::Value *>::insert(a2, v15, (uint64_t)v19);
  if (!v19[16]) {
    return 0;
  }
  uint64_t v16 = *((void *)v15 - 2);
  if ((v16 & 2) != 0) {
    unsigned int v17 = *((_DWORD *)v15 - 6);
  }
  else {
    unsigned int v17 = (v16 >> 6) & 0xF;
  }
  if (v17 >= 2) {
    return IsScalarTBAANodeImpl(v15, a2);
  }
  else {
    return 1;
  }
}

uint64_t llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(llvm::raw_ostream ***this, llvm::Type **a2, const llvm::MDNode *a3, llvm::APInt *a4, int a5)
{
  int v26 = a3;
  uint64_t v8 = (void *)((char *)a3 - 16);
  unint64_t v9 = *((void *)a3 - 2);
  if ((v9 & 2) != 0)
  {
    if (*((_DWORD *)a3 - 6) == 2)
    {
      uint64_t v10 = (void *)*((void *)a3 - 4);
      return v10[1];
    }
  }
  else if ((*((void *)a3 - 2) & 0x3C0) == 0x80)
  {
    uint64_t v10 = &v8[-((v9 >> 2) & 0xF)];
    return v10[1];
  }
  int v12 = 0;
  if (a5) {
    int v13 = 3;
  }
  else {
    int v13 = 1;
  }
  if (a5) {
    int v14 = 3;
  }
  else {
    int v14 = 2;
  }
  unsigned int v15 = (v9 >> 6) & 0xF;
  uint64_t v16 = &v8[-((v9 >> 2) & 0xF)];
  while (1)
  {
    unsigned int v17 = v13 + v12;
    if ((v9 & 2) != 0)
    {
      unsigned int v18 = (void *)*((void *)a3 - 4);
      if (v17 >= *((_DWORD *)a3 - 6))
      {
        unsigned int v15 = *((_DWORD *)a3 - 6);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v18 = &v8[-((v9 >> 2) & 0xF)];
      if (v17 >= v15)
      {
        unsigned int v18 = &v8[-((v9 >> 2) & 0xF)];
LABEL_25:
        unsigned int v19 = v15 - v14;
        uint64_t v20 = v18[v15 - v14 + 1];
LABEL_26:
        llvm::APInt::operator-=((uint64_t)a4, (void **)(*(void *)(v20 + 128) + 24));
        if ((*v8 & 2) != 0) {
          uint64_t v21 = (void *)*((void *)a3 - 4);
        }
        else {
          uint64_t v21 = &v8[-((*v8 >> 2) & 0xFLL)];
        }
        return v21[v19];
      }
    }
    if ((int)llvm::APInt::compare((llvm::APInt *)(*(void *)(v18[v13 + v12 + 1] + 128) + 24), a4) >= 1) {
      break;
    }
    v12 += v14;
  }
  if (v12)
  {
    unsigned int v19 = v13 - v14 + v12;
    if ((v9 & 2) != 0) {
      uint64_t v16 = (void *)*((void *)a3 - 4);
    }
    uint64_t v20 = v16[v19 + 1];
    goto LABEL_26;
  }
  uint64_t v24 = a4;
  BOOL v25 = a2;
  uint64_t v22 = *this;
  if (*this)
  {
    unsigned int v27 = "Could not find TBAA parent in struct type node";
    __int16 v28 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(v22, (const llvm::Twine *)&v27, &v25, (uint64_t *)&v26, &v24);
  }
  return 0;
}

uint64_t llvm::TBAAVerifier::visitTBAAMetadata(llvm::raw_ostream ***this, llvm::Type **a2, const llvm::MDNode *a3)
{
  uint64_t v67 = a3;
  unsigned int v5 = *((unsigned __int8 *)a2 + 16) - 60;
  BOOL v6 = v5 > 0x1C;
  int v7 = (1 << v5) & 0x11000033;
  if (v6 || v7 == 0)
  {
    v68[0] = a2;
    unsigned int v17 = *this;
    if (!*this) {
      return 0;
    }
    unsigned int v18 = "This instruction shall not have a TBAA access tag!";
    goto LABEL_22;
  }
  uint64_t v11 = (unint64_t *)((char *)a3 - 16);
  unint64_t v10 = *((void *)a3 - 2);
  if ((v10 & 2) != 0) {
    int v12 = (unint64_t *)*((void *)a3 - 4);
  }
  else {
    int v12 = &v11[-((v10 >> 2) & 0xF)];
  }
  if (!llvm::MDNode::classof((unsigned char *)*v12)) {
    goto LABEL_20;
  }
  unint64_t v13 = *v11;
  if ((*v11 & 2) == 0)
  {
    if ((*v11 & 0x3C0) > 0x80)
    {
      int v14 = (const llvm::MDNode **)&v11[-((v13 >> 2) & 0xF)];
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  if (*((_DWORD *)a3 - 6) <= 2u)
  {
LABEL_20:
    v68[0] = a2;
    unsigned int v17 = *this;
    if (!*this) {
      return 0;
    }
    unsigned int v18 = "Old-style TBAA is no longer allowed, use struct-path TBAA instead";
LABEL_22:
    BOOL v59 = (llvm::Type **)v18;
    v63[0] = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v17, (const llvm::Twine *)&v59, v68);
    return 0;
  }
  int v14 = (const llvm::MDNode **)*((void *)a3 - 4);
LABEL_14:
  FieldNodeFromTBAABaseNode = *v14;
  if (*v14)
  {
    if (!llvm::MDNode::classof(*v14)) {
      FieldNodeFromTBAABaseNode = 0;
    }
    unint64_t v13 = *v11;
  }
  if ((v13 & 2) != 0) {
    uint64_t v16 = (unint64_t *)*((void *)a3 - 4);
  }
  else {
    uint64_t v16 = &v11[-((v13 >> 2) & 0xF)];
  }
  uint64_t v21 = (const llvm::MDNode *)v16[1];
  if (!v21 || (llvm::MDNode::classof((unsigned char *)v16[1]) & 1) == 0)
  {
    uint64_t v21 = 0;
    int v66 = 0;
    goto LABEL_34;
  }
  int v66 = v21;
  unint64_t v22 = *((void *)v21 - 2);
  if ((v22 & 2) != 0)
  {
    if (*((_DWORD *)v21 - 6) >= 3u)
    {
      BOOL v23 = (unsigned char **)*((void *)v21 - 4);
      goto LABEL_45;
    }
LABEL_34:
    unint64_t v24 = *v11;
    if ((*v11 & 2) != 0) {
      unsigned int v25 = *((_DWORD *)a3 - 6);
    }
    else {
      unsigned int v25 = (v24 >> 6) & 0xF;
    }
    if (v25 >= 5)
    {
      v68[0] = a2;
      uint64_t v29 = *this;
      if (!*this) {
        return 0;
      }
      unint64_t v30 = "Struct tag metadata must have either 3 or 4 operands";
LABEL_91:
      BOOL v59 = (llvm::Type **)v30;
      v63[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v29, (const llvm::Twine *)&v59, v68, (uint64_t *)&v67);
      return 0;
    }
    int v26 = 0;
    unsigned int v27 = 3;
    if ((v24 & 2) != 0) {
      goto LABEL_56;
    }
    goto LABEL_39;
  }
  if ((*((void *)v21 - 2) & 0x3C0uLL) < 0xC0) {
    goto LABEL_34;
  }
  BOOL v23 = (unsigned char **)((char *)v21 - 8 * ((v22 >> 2) & 0xF) - 16);
LABEL_45:
  if (!*v23 || !llvm::MDNode::classof(*v23)) {
    goto LABEL_34;
  }
  unint64_t v24 = *v11;
  if ((*v11 & 2) != 0)
  {
    if ((*((_DWORD *)a3 - 6) & 0xFFFFFFFE) == 4)
    {
      int v31 = (unint64_t *)*((void *)a3 - 4);
      goto LABEL_52;
    }
LABEL_68:
    BOOL v59 = a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[53],llvm::Instruction *,llvm::MDNode const*&>(*this, "Access tag metadata must have either 4 or 5 operands", &v59, (uint64_t *)&v67);
    return 0;
  }
  if ((v24 & 0x380 | 0x40) != 0x140) {
    goto LABEL_68;
  }
  int v31 = &v11[-((v24 >> 2) & 0xF)];
LABEL_52:
  unint64_t v32 = v31[3];
  if (!v32 || *(unsigned char *)v32 != 1 || *(unsigned char *)(*(void *)(v32 + 128) + 16) != 16)
  {
    v68[0] = a2;
    uint64_t v29 = *this;
    if (!*this) {
      return 0;
    }
    unint64_t v30 = "Access size field must be a constant";
    goto LABEL_91;
  }
  unsigned int v27 = 4;
  int v26 = 1;
  if ((v24 & 2) != 0)
  {
LABEL_56:
    if (*((_DWORD *)a3 - 6) != v27 + 1) {
      goto LABEL_73;
    }
    __int16 v28 = (unint64_t *)*((void *)a3 - 4);
    goto LABEL_58;
  }
LABEL_39:
  if (((v24 >> 6) & 0xF) != v27 + 1) {
    goto LABEL_73;
  }
  __int16 v28 = &v11[-((v24 >> 2) & 0xF)];
LABEL_58:
  unint64_t v33 = v28[v27];
  if (!v33 || *(unsigned char *)v33 != 1 || (uint64_t v34 = *(void *)(v33 + 128), *(unsigned char *)(v34 + 16) != 16))
  {
    v68[0] = a2;
    uint64_t v29 = *this;
    if (!*this) {
      return 0;
    }
    unint64_t v30 = "Immutability tag on struct tag metadata must be a constant";
    goto LABEL_91;
  }
  unint64_t v35 = (llvm::APInt *)(v34 + 24);
  unsigned int v36 = *(_DWORD *)(v34 + 32);
  if (v36 <= 0x40)
  {
    if (*(void *)v35 < 2uLL) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  int v37 = llvm::APInt::countLeadingZerosSlowCase(v35);
  if (v37 != v36 && v37 != v36 - 1)
  {
LABEL_71:
    v68[0] = a2;
    uint64_t v29 = *this;
    if (!*this) {
      return 0;
    }
    unint64_t v30 = "Immutability part of the struct tag metadata must be either 0 or 1";
    goto LABEL_91;
  }
LABEL_73:
  if (!FieldNodeFromTBAABaseNode || !v21)
  {
    unint64_t v39 = *this;
    if (v39)
    {
      BOOL v59 = (llvm::Type **)"Malformed struct tag metadata: base and access-type should be non-null and point to Metadata nodes";
      v63[0] = 259;
      llvm::VerifierSupport::CheckFailed(v39, (const llvm::Twine *)&v59);
      if (*v39)
      {
        llvm::VerifierSupport::Write((uint64_t ***)v39, a2);
        llvm::VerifierSupport::Write((uint64_t)v39, (uint64_t)a3);
        llvm::VerifierSupport::Write((uint64_t)v39, (uint64_t)FieldNodeFromTBAABaseNode);
        llvm::VerifierSupport::Write((uint64_t)v39, (uint64_t)v21);
      }
    }
    return 0;
  }
  if ((v26 & 1) == 0)
  {
    if (!llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, v21))
    {
      BOOL v59 = a2;
      llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>(*this, &v59, (uint64_t *)&v67, (uint64_t *)&v66);
      return 0;
    }
    unint64_t v24 = *v11;
  }
  if ((v24 & 2) != 0) {
    uint64_t v38 = (unint64_t *)*((void *)a3 - 4);
  }
  else {
    uint64_t v38 = &v11[-((v24 >> 2) & 0xF)];
  }
  unint64_t v40 = v38[2];
  if (!v40 || *(unsigned char *)v40 != 1 || (uint64_t v41 = *(void *)(v40 + 128), *(unsigned char *)(v41 + 16) != 16))
  {
    v68[0] = a2;
    uint64_t v29 = *this;
    if (*this)
    {
      unint64_t v30 = "Offset must be constant integer";
      goto LABEL_91;
    }
    return 0;
  }
  unsigned int v65 = *(_DWORD *)(v41 + 32);
  if (v65 > 0x40) {
    operator new[]();
  }
  int v42 = 0;
  uint64_t v64 = *(void **)(v41 + 24);
  BOOL v59 = (llvm::Type **)v63;
  char v60 = (llvm::Type **)v63;
  uint64_t v61 = 4;
  int v62 = 0;
  do
  {
    uint64_t v43 = *((void *)FieldNodeFromTBAABaseNode - 2);
    unsigned int v44 = (v43 & 2) != 0 ? *((_DWORD *)FieldNodeFromTBAABaseNode - 6) : (v43 >> 6) & 0xF;
    if (v44 < 2) {
      break;
    }
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v59, FieldNodeFromTBAABaseNode, (uint64_t)v68);
    if (!v69)
    {
      int v58 = a2;
      char v53 = *this;
      if (!*this) {
        goto LABEL_131;
      }
      uint64_t v54 = "Cycle detected in struct path";
      goto LABEL_127;
    }
    unint64_t v45 = llvm::TBAAVerifier::verifyTBAABaseNode((llvm::TBAAVerifier *)this, a2, FieldNodeFromTBAABaseNode, v26);
    unint64_t v46 = HIDWORD(v45);
    unsigned int v57 = HIDWORD(v45);
    if ((_BYTE)v45) {
      goto LABEL_131;
    }
    BOOL v47 = FieldNodeFromTBAABaseNode == v66;
    BOOL isValidScalarTBAANode = llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, FieldNodeFromTBAABaseNode);
    unsigned int v49 = v65;
    if (isValidScalarTBAANode || FieldNodeFromTBAABaseNode == v66)
    {
      if (v65 >= 0x41)
      {
        if (v49 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v64) > 0x40) {
          goto LABEL_128;
        }
        unint64_t v50 = v64;
      }
      else
      {
        unint64_t v50 = &v64;
      }
      if (*v50)
      {
LABEL_128:
        int v58 = a2;
        __int16 v56 = (llvm::APInt *)&v64;
        uint64_t v55 = *this;
        if (*this)
        {
          v68[0] = (llvm::Type **)"Offset not zero at the point of scalar access";
          __int16 v70 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(v55, (const llvm::Twine *)v68, &v58, (uint64_t *)&v67, &v56);
        }
        goto LABEL_131;
      }
    }
    if (v49 != v46)
    {
      if (v46)
      {
        if (v46 == -1) {
          char v51 = v26;
        }
        else {
          char v51 = 0;
        }
        if ((v51 & 1) == 0) {
          goto LABEL_130;
        }
      }
      else
      {
        if (v49 >= 0x41)
        {
          if (v49 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v64) > 0x40) {
            goto LABEL_130;
          }
          unsigned int v52 = v64;
        }
        else
        {
          unsigned int v52 = &v64;
        }
        if (*v52)
        {
LABEL_130:
          v68[0] = a2;
          LODWORD(v58) = v49;
          llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>(*this, v68, (uint64_t *)&v67, &v57, (unsigned int *)&v58);
          goto LABEL_131;
        }
      }
    }
    v42 |= v47;
    if (v26 & v42) {
      goto LABEL_122;
    }
    FieldNodeFromTBAABaseNode = (const llvm::MDNode *)llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(this, a2, FieldNodeFromTBAABaseNode, (llvm::APInt *)&v64, v26);
  }
  while (FieldNodeFromTBAABaseNode);
  if (v42)
  {
LABEL_122:
    uint64_t v19 = 1;
    goto LABEL_132;
  }
  int v58 = a2;
  char v53 = *this;
  if (*this)
  {
    uint64_t v54 = "Did not see access type in access path!";
LABEL_127:
    v68[0] = (llvm::Type **)v54;
    __int16 v70 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v53, (const llvm::Twine *)v68, &v58, (uint64_t *)&v67);
  }
LABEL_131:
  uint64_t v19 = 0;
LABEL_132:
  if (v60 != v59) {
    free(v60);
  }
  if (v65 >= 0x41 && v64) {
    MEMORY[0x263E50080](v64, 0x1000C8000313F17);
  }
  return v19;
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[53],llvm::Instruction *,llvm::MDNode const*&>(llvm::raw_ostream **a1, unsigned char *a2, llvm::Type ***a3, uint64_t *a4)
{
  if (a1)
  {
    char v4 = 1;
    char v7 = 1;
    if (*a2)
    {
      unsigned int v5 = a2;
      char v4 = 3;
    }
    char v6 = v4;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(a1, (const llvm::Twine *)&v5, a3, a4);
  }
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>(llvm::raw_ostream **a1, llvm::Type ***a2, uint64_t *a3, uint64_t *a4)
{
  if (a1)
  {
    uint64_t v8 = "Access type node must be a valid scalar type";
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)&v8);
    if (*a1)
    {
      if (*a2) {
        llvm::VerifierSupport::Write((uint64_t ***)a1, *a2);
      }
      llvm::VerifierSupport::Write((uint64_t)a1, *a3);
      llvm::VerifierSupport::Write((uint64_t)a1, *a4);
    }
  }
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>(llvm::raw_ostream **a1, llvm::Type ***a2, uint64_t *a3, unsigned int *a4, unsigned int *a5)
{
  if (a1)
  {
    unint64_t v10 = "Access bit-width not the same as description bit-width";
    __int16 v11 = 259;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)&v10);
    if (*a1)
    {
      if (*a2) {
        llvm::VerifierSupport::Write((uint64_t ***)a1, *a2);
      }
      llvm::VerifierSupport::Write((uint64_t)a1, *a3);
      llvm::VerifierSupport::Write(*a1, *a4);
      llvm::VerifierSupport::Write(*a1, *a5);
    }
  }
}

void anonymous namespace'::Verifier::visitGlobalValue(llvm::raw_ostream **this, const llvm::GlobalValue *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a2 + 16))
  {
    if (v4 != 3) {
      goto LABEL_12;
    }
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_16;
    }
    int v5 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (*((const llvm::GlobalValue **)a2 + 9) != (const llvm::GlobalValue *)((char *)a2 + 72)) {
      goto LABEL_16;
    }
    int v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 0x1000000) != 0) {
      goto LABEL_16;
    }
  }
  int v6 = v5 & 0xF;
  if (v6) {
    BOOL v7 = v6 == 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v16 = "Global is external, but doesn't have external or weak linkage!";
LABEL_82:
    int v42 = v16;
    __int16 v45 = 259;
    v39[0] = (llvm::Type **)a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v42, v39);
    return;
  }
LABEL_12:
  if (v4 > 3 || v4 == 1) {
    goto LABEL_42;
  }
LABEL_16:
  v39[0] = (llvm::Type **)a2;
  int v9 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
  if (v9 && (v9 - 1) >= 0x21u)
  {
    int v42 = "huge alignment values are unsupported";
    __int16 v45 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v42);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
    }
    return;
  }
  uint64_t Metadata = llvm::Value::getMetadata(a2, 22);
  uint64_t v38 = Metadata;
  if (!Metadata) {
    goto LABEL_42;
  }
  uint64_t v11 = Metadata;
  unint64_t v12 = *(void *)(Metadata - 16);
  if ((v12 & 2) != 0)
  {
    if (*(_DWORD *)(Metadata - 24) == 1)
    {
      unint64_t v13 = *(unsigned __int8 ***)(Metadata - 32);
      goto LABEL_26;
    }
LABEL_29:
    int v42 = "associated metadata must have one operand";
    __int16 v45 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v42);
    if (*this)
    {
      llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
      llvm::VerifierSupport::Write((uint64_t)this, v11);
    }
    return;
  }
  if ((*(void *)(Metadata - 16) & 0x3C0) != 0x40) {
    goto LABEL_29;
  }
  unint64_t v13 = (unsigned __int8 **)(Metadata - 16 - 8 * ((v12 >> 2) & 0xF));
LABEL_26:
  int v14 = *v13;
  if (!v14)
  {
    unsigned int v15 = "associated metadata must have a global value";
    goto LABEL_32;
  }
  if (*v14 - 3 <= 0xFFFFFFFD)
  {
    unsigned int v15 = "associated metadata must be ValueAsMetadata";
LABEL_32:
    int v42 = v15;
    __int16 v45 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(this, (const llvm::Twine *)&v42, v39, &v38);
    return;
  }
  unsigned int v17 = (llvm::Value *)*((void *)v14 + 16);
  if (*(unsigned char *)(*(void *)v17 + 8) != 15)
  {
    int v42 = "associated value must be pointer typed";
    __int16 v45 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalValue,llvm::MDNode const*>(this, (const llvm::Twine *)&v42, (llvm::Type **)a2, &v38);
    return;
  }
  unsigned int v18 = llvm::Value::stripPointerCastsAndAliases(v17);
  int v37 = (llvm::Type **)v18;
  unsigned int v19 = *((unsigned __int8 *)v18 + 16);
  if ((v19 > 3 || v19 == 1) && v19 >= 0x15)
  {
    int v42 = "associated metadata must point to a GlobalObject";
    __int16 v45 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v42, v39, &v37);
    return;
  }
  if (v18 == a2)
  {
    unsigned int v15 = "global values should not associate to themselves";
    goto LABEL_32;
  }
LABEL_42:
  int v22 = *((_DWORD *)a2 + 8);
  if ((v22 & 0xF) != 1)
  {
    if ((v22 & 0xF) == 6)
    {
      if (*((unsigned char *)a2 + 16) != 3)
      {
        uint64_t v16 = "Only global variables can have appending linkage!";
        goto LABEL_82;
      }
      v39[0] = (llvm::Type **)a2;
      if (*(unsigned char *)(*((void *)a2 + 3) + 8) != 17)
      {
        int v42 = "Only global arrays can have appending linkage!";
        __int16 v45 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v42, v39);
        return;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + 16))
      {
        if ((v22 & 0x1000000) != 0
          || *((const llvm::GlobalValue **)a2 + 9) != (const llvm::GlobalValue *)((char *)a2 + 72))
        {
          goto LABEL_57;
        }
        goto LABEL_54;
      }
      if (*((unsigned char *)a2 + 16) != 3) {
        goto LABEL_57;
      }
    }
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_57;
    }
  }
LABEL_54:
  if (llvm::GlobalValue::getComdat(a2))
  {
    uint64_t v16 = "Declaration may not be in a Comdat!";
    goto LABEL_82;
  }
  int v22 = *((_DWORD *)a2 + 8);
LABEL_57:
  if ((v22 & 0x300) == 0x100)
  {
    if ((v22 & 0x30) != 0)
    {
      uint64_t v16 = "dllimport GlobalValue must have default visibility";
      goto LABEL_82;
    }
    if ((v22 & 0x4000) != 0)
    {
      uint64_t v16 = "GlobalValue with DLLImport Storage is dso_local!";
      goto LABEL_82;
    }
    if (*((unsigned char *)a2 + 16))
    {
      if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
        goto LABEL_73;
      }
    }
    else if ((v22 & 0x1000000) == 0 {
           && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72))
    }
    {
LABEL_73:
      if ((v22 & 0xF) == 0) {
        goto LABEL_76;
      }
      char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(a2);
      int v22 = *((_DWORD *)a2 + 8);
      if (hasExternalWeakLinkage) {
        goto LABEL_76;
      }
    }
    if ((v22 & 0xF) != 1)
    {
      uint64_t v16 = "Global is marked as dllimport, but not external";
      goto LABEL_82;
    }
    goto LABEL_76;
  }
  if ((v22 & 0x300) == 0x200 && (v22 & 0x30) == 0x10)
  {
    uint64_t v16 = "dllexport GlobalValue must have default or protected visibility";
    goto LABEL_82;
  }
LABEL_76:
  if ((v22 & 0xFu) - 7 < 2) {
    goto LABEL_80;
  }
  if ((v22 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(a2) & 1) == 0)
  {
    int v22 = *((_DWORD *)a2 + 8);
LABEL_80:
    if ((v22 & 0x4000) == 0)
    {
      uint64_t v16 = "GlobalValue with local linkage or non-default visibility must be dso_local!";
      goto LABEL_82;
    }
  }
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(this + 194), a2, (uint64_t)&v42);
  if (!v44[0]) {
    return;
  }
  int v42 = v44;
  uint64_t v43 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((unsigned int *)&v42, (uint64_t)v44, *((void *)a2 + 1));
  for (unsigned int i = v43; v43; unsigned int i = v43)
  {
    uint64_t v25 = *((void *)v42 + i - 1);
    LODWORD(v43) = i - 1;
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(this + 194), (const void *)v25, (uint64_t)v39);
    if (v40)
    {
      unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
      if (v25) {
        BOOL v27 = v26 >= 0x1C;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        uint64_t v29 = *(void *)(v25 + 40);
        if (!v29 || (unint64_t v30 = *(llvm::Type ***)(v29 + 56)) == 0)
        {
          v39[0] = (llvm::Type **)"Global is referenced by parentless instruction!";
          __int16 v41 = 259;
          unint64_t v35 = this[1];
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v39);
          if (*this)
          {
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
            llvm::VerifierSupport::Write(*this, v35);
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v25);
          }
          continue;
        }
        int v31 = v30[5];
        unint64_t v32 = this[1];
        if (v31 != v32)
        {
          v39[0] = (llvm::Type **)"Global is referenced in a different module!";
          __int16 v41 = 259;
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v39);
          if (*this)
          {
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
            llvm::VerifierSupport::Write(*this, v32);
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v25);
            unint64_t v33 = (uint64_t ***)this;
            uint64_t v34 = v30;
LABEL_106:
            llvm::VerifierSupport::Write(v33, v34);
            llvm::VerifierSupport::Write(*this, v31);
          }
        }
      }
      else
      {
        if (v25) {
          BOOL v28 = v26 == 0;
        }
        else {
          BOOL v28 = 0;
        }
        if (v28)
        {
          int v31 = *(const llvm::Module **)(v25 + 40);
          unsigned int v36 = this[1];
          if (v31 == v36) {
            continue;
          }
          v39[0] = (llvm::Type **)"Global is used by function in a different module";
          __int16 v41 = 259;
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v39);
          if (!*this) {
            continue;
          }
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
          llvm::VerifierSupport::Write(*this, v36);
          unint64_t v33 = (uint64_t ***)this;
          uint64_t v34 = (llvm::Type **)v25;
          goto LABEL_106;
        }
        llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((unsigned int *)&v42, (uint64_t)v42 + 8 * v43, *(void *)(v25 + 8));
      }
    }
  }
  if (v42 != v44) {
    free(v42);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    int v5 = *a3;
    if (*a3)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v5);
    }
  }
}

void anonymous namespace'::Verifier::verifyFunctionAttrs(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, char a5, char a6)
{
  uint64_t v87 = a2;
  uint64_t v88 = (llvm::AttributeSetNode *)a3;
  char v86 = a4;
  if (!a3) {
    return;
  }
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 1264), (const void *)a3, (uint64_t)v82);
  if ((_BYTE)v83)
  {
    if (!llvm::AttributeList::hasParentContext((uint64_t)&v88, *(void **)(a1 + 184)))
    {
      v82[0] = (uint64_t *)"Attribute list does not match Module context!";
      __int16 v85 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v82);
      if (!*(void *)a1) {
        return;
      }
      llvm::AttributeList::print(&v88, *(llvm::raw_ostream **)a1);
      goto LABEL_86;
    }
    uint64_t v10 = *(unsigned int *)(a3 + 8);
    if (v10)
    {
      uint64_t v11 = (uint64_t *)(a3 + 40);
      uint64_t v12 = a3 + 40 + 8 * v10;
      while (1)
      {
        if (*v11)
        {
          if (!llvm::AttributeSet::hasParentContext((uint64_t)v11, *(void **)(a1 + 184)))
          {
            v82[0] = (uint64_t *)"Attribute set does not match Module context!";
            __int16 v85 = 259;
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
            llvm::VerifierSupport::CheckFailed<llvm::AttributeSet const*,llvm::Value const*>((llvm::raw_ostream **)a1, (const llvm::Twine *)v82, (llvm::AttributeSetNode ***)&v89, (llvm::Type ***)&v86);
            return;
          }
          uint64_t v13 = *v11;
          if (*v11)
          {
            uint64_t v14 = *(unsigned int *)(v13 + 8);
            if (v14) {
              break;
            }
          }
        }
LABEL_13:
        if (++v11 == (uint64_t *)v12) {
          goto LABEL_14;
        }
      }
      unsigned int v15 = (uint64_t *)(v13 + 48);
      uint64_t v16 = 8 * v14;
      while (llvm::Attribute::hasParentContext(v15, *(void **)(a1 + 184)))
      {
        ++v15;
        v16 -= 8;
        if (!v16) {
          goto LABEL_13;
        }
      }
      v82[0] = (uint64_t *)"Attribute does not match Module context!";
      __int16 v85 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v82);
      char v40 = *(llvm::raw_ostream **)a1;
      if (!*(void *)a1) {
        return;
      }
      llvm::Attribute::getAsString((llvm::Attribute *)v15, 0, &v89);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v41 = &v89;
      }
      else {
        __int16 v41 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v89.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(v40, (const char *)v41, size);
      uint64_t v43 = (unsigned char *)*((void *)v40 + 4);
      if ((unint64_t)v43 >= *((void *)v40 + 3))
      {
        llvm::raw_ostream::write(v40, 10);
      }
      else
      {
        *((void *)v40 + 4) = v43 + 1;
        unsigned char *v43 = 10;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
LABEL_86:
      if (v86) {
        llvm::VerifierSupport::Write((uint64_t ***)a1, (llvm::Type **)v86);
      }
      return;
    }
  }
LABEL_14:
  char v73 = a6;
  if (*(_DWORD *)(a3 + 8) < 2u)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(a3 + 48);
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v17 + 8);
      if (v18)
      {
        unsigned int v19 = (uint64_t *)(v17 + 48);
        uint64_t v20 = 8 * v18;
        while (1)
        {
          uint64_t v21 = *v19;
          uint64_t v81 = v21;
          if (!v21) {
            goto LABEL_21;
          }
          if (*(unsigned char *)(v21 + 8) != 2) {
            break;
          }
LABEL_22:
          ++v19;
          v20 -= 8;
          if (!v20) {
            goto LABEL_27;
          }
        }
        LODWORD(v21) = *(_DWORD *)(v21 + 12);
LABEL_21:
        if ((AttrPropTable[(v21 - 1)] & 4) == 0)
        {
          llvm::Attribute::getAsString((llvm::Attribute *)&v81, 0, &v79);
          unsigned int v44 = std::string::insert(&v79, 0, "Attribute '");
          std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          uint64_t v46 = std::string::append(&v80, "' does not apply to function return values");
          std::string::size_type v47 = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          __int16 v85 = 260;
          v82[0] = (uint64_t *)&v89;
          unsigned int v48 = (llvm::raw_ostream **)a1;
          goto LABEL_108;
        }
        goto LABEL_22;
      }
    }
  }
LABEL_27:
  int v78 = (llvm::raw_ostream **)a1;
  int v22 = *(_DWORD *)(a2 + 12);
  uint64_t v23 = (v22 - 1);
  if (v22 != 1)
  {
    unint64_t v24 = 0;
    int v25 = 0;
    uint64_t v75 = 0;
    char v74 = 0;
    int v76 = 0;
    int v26 = 0;
    while (1)
    {
      BOOL v27 = *(llvm::Type **)(*(void *)(a2 + 16) + 8 * v24 + 8);
      if ((v24 + 2) >= *(_DWORD *)(a3 + 8)) {
        break;
      }
      BOOL v28 = *(unsigned char **)(a3 + 40 + 8 * (v24 + 2));
      if (a5)
      {
        if (!v28) {
          goto LABEL_54;
        }
      }
      else
      {
        if (!v28) {
          break;
        }
        if ((v28[13] & 4) != 0)
        {
          unint64_t v50 = "immarg attribute only applies to intrinsics";
          goto LABEL_115;
        }
        if ((v73 & 1) == 0 && (char)v28[20] < 0)
        {
          unint64_t v50 = "Attribute 'elementtype' can only be applied to intrinsics and inline asm.";
LABEL_115:
          v82[0] = (uint64_t *)v50;
          __int16 v85 = 259;
          unsigned int v49 = v78;
LABEL_116:
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v49, (const llvm::Twine *)v82, (llvm::Type ***)&v86);
          return;
        }
      }
      int v29 = v26;
      unsigned int v30 = v28[14] & 2;
      if ((v25 & (v30 >> 1)) == 1)
      {
        unint64_t v50 = "More than one parameter has attribute nest!";
        goto LABEL_115;
      }
      if ((v28[17] & 0x40) != 0)
      {
        if (v75)
        {
          unint64_t v50 = "More than one parameter has attribute returned!";
          goto LABEL_115;
        }
        if (!llvm::Type::canLosslesslyBitCastTo(v27, **(llvm::Type ***)(a2 + 16)))
        {
          unint64_t v50 = "Incompatible argument and return types for 'returned' attribute";
          goto LABEL_115;
        }
        LOBYTE(v75) = 1;
      }
      if ((v28[21] & 4) != 0)
      {
        if (v74)
        {
          unint64_t v50 = "Cannot have multiple 'sret' parameters!";
          goto LABEL_115;
        }
        if (v24 >= 2)
        {
          unint64_t v50 = "Attribute 'sret' is not on first or second parameter!";
          goto LABEL_115;
        }
        char v74 = 1;
      }
      int v31 = v28[20];
      if ((v76 & ((v31 & 2) >> 1)) == 1)
      {
        unint64_t v50 = "Cannot have multiple 'swiftself' parameters!";
        goto LABEL_115;
      }
      BOOL v32 = (char)v28[19] < 0;
      if ((v32 & HIDWORD(v75)) == 1)
      {
        unint64_t v50 = "Cannot have multiple 'swiftasync' parameters!";
        goto LABEL_115;
      }
      if (v31 & v29)
      {
        unint64_t v50 = "Cannot have multiple 'swifterror' parameters!";
        goto LABEL_115;
      }
      v25 |= v30 >> 1;
      int v26 = v31 | v29;
      HIDWORD(v75) |= v32;
      v76 |= (v31 & 2) >> 1;
      if ((v28[21] & 1) != 0 && v24 != *(_DWORD *)(a2 + 12) - 2)
      {
        unint64_t v50 = "inalloca isn't on the last parameter!";
        goto LABEL_115;
      }
LABEL_54:
      if (v23 == ++v24) {
        goto LABEL_55;
      }
    }
    goto LABEL_54;
  }
LABEL_55:
  if (!*(_DWORD *)(a3 + 8)) {
    return;
  }
  uint64_t v33 = *(void *)(a3 + 40);
  if (!v33) {
    return;
  }
  if (!*(_DWORD *)(a3 + 8) || (uint64_t v34 = *(void *)(a3 + 40)) == 0 || (v35 = *(unsigned int *)(v34 + 8), !v35))
  {
LABEL_66:
    if ((*(unsigned char *)(a3 + 15) & 4) != 0)
    {
      if ((*(unsigned char *)(a3 + 12) & 8) != 0)
      {
        unint64_t v39 = "Attributes 'noinline and alwaysinline' are incompatible!";
        goto LABEL_97;
      }
      if ((*(unsigned char *)(a3 + 17) & 4) != 0)
      {
        if ((*(unsigned char *)(a3 + 17) & 2) != 0)
        {
          unint64_t v39 = "Attributes 'optsize and optnone' are incompatible!";
          goto LABEL_97;
        }
        if ((*(unsigned char *)(a3 + 13) & 0x40) != 0)
        {
          unint64_t v39 = "Attributes 'minsize and optnone' are incompatible!";
          goto LABEL_97;
        }
      }
    }
    else if ((*(unsigned char *)(a3 + 17) & 4) != 0)
    {
      unint64_t v39 = "Attribute 'optnone' requires 'noinline'!";
LABEL_97:
      v82[0] = (uint64_t *)v39;
      __int16 v85 = 259;
      unsigned int v49 = v78;
      goto LABEL_116;
    }
    if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_sm_enabled", (unint64_t *)0x19)&& llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_sm_compatible", (unint64_t *)0x1C))
    {
      unint64_t v39 = "Attributes 'aarch64_pstate_sm_enabled and aarch64_pstate_sm_compatible' are incompatible!";
      goto LABEL_97;
    }
    if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_new", (unint64_t *)0x15))
    {
      if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_preserved", (unint64_t *)0x1B))
      {
        unint64_t v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_preserved' are incompatible!";
        goto LABEL_97;
      }
      if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_shared", (unint64_t *)0x18))
      {
        unint64_t v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_shared' are incompatible!";
        goto LABEL_97;
      }
    }
    if ((*(unsigned char *)(a3 + 13) & 0x20) != 0 && (*((_DWORD *)v86 + 8) & 0xC0) != 0x80)
    {
      unint64_t v39 = "Attribute 'jumptable' requires 'unnamed_addr'";
      goto LABEL_97;
    }
    if (*(_DWORD *)(a3 + 8))
    {
      uint64_t v55 = *(llvm::AttributeSetNode **)(a3 + 40);
      if (v55)
      {
        uint64_t AllocSizeArgs = llvm::AttributeSetNode::getAllocSizeArgs(v55);
        if ((v57 & 0xFF00000000) != 0)
        {
          unsigned int v58 = HIDWORD(AllocSizeArgs);
          char v59 = v57;
          v82[0] = &v87;
          v82[1] = (uint64_t *)v78;
          unsigned int v83 = &v86;
          {
            return;
          }
        }
      }
    }
    if ((*(unsigned char *)(a3 + 21) & 0x10) != 0)
    {
      char AllocKind = llvm::AttributeList::getAllocKind((llvm::AttributeList *)&v88);
      uint64_t v61 = 0;
      uint64_t v62 = AllocKind & 7;
      while (qword_261EA7200[v61] != v62)
      {
        if (++v61 == 3)
        {
          v82[0] = (uint64_t *)"'allockind()' requires exactly one of alloc, realloc, and free";
          __int16 v85 = 259;
          llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
          break;
        }
      }
      if (v62 == 4 && (AllocKind & 0x38) != 0)
      {
        v82[0] = (uint64_t *)"'allockind(\"free\")' doesn't allow uninitialized, zeroed, or aligned modifiers.";
        __int16 v85 = 259;
        llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
      }
      if ((~AllocKind & 0x18) == 0)
      {
        v82[0] = (uint64_t *)"'allockind()' can't be both zeroed and uninitialized";
        __int16 v85 = 259;
        llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
      }
    }
    if ((*(unsigned char *)(a3 + 22) & 0x10) != 0)
    {
      if (*(_DWORD *)(a3 + 8))
      {
        uint64_t v63 = *(llvm::AttributeSetNode **)(a3 + 40);
        if (v63)
        {
          unsigned int VScaleRangeMin = llvm::AttributeSetNode::getVScaleRangeMin(v63);
          if (VScaleRangeMin
            || (v82[0] = (uint64_t *)"'vscale_range' minimum must be greater than 0",
                __int16 v85 = 259,
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, (llvm::Type ***)&v86), *(_DWORD *)(a3 + 8)))
          {
            unsigned int v65 = *(llvm::AttributeSetNode **)(a3 + 40);
            if (v65)
            {
              uint64_t VScaleRangeMax = llvm::AttributeSetNode::getVScaleRangeMax(v65);
              if ((VScaleRangeMax & 0xFF00000000) != 0 && VScaleRangeMin > VScaleRangeMax)
              {
                v82[0] = (uint64_t *)"'vscale_range' minimum cannot be greater than maximum";
                __int16 v85 = 259;
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, (llvm::Type ***)&v86);
              }
            }
          }
        }
      }
    }
    if (!llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"frame-pointer", (unint64_t *)0xD))goto LABEL_168; {
    if (*(_DWORD *)(a3 + 8))
    }
      uint64_t v68 = *(uint64_t **)(a3 + 40);
    else {
      uint64_t v68 = 0;
    }
    v82[0] = v68;
    uint64_t Attribute = llvm::AttributeSet::getAttribute((uint64_t *)v82, (uint64_t)"frame-pointer", 13, v67);
    if (Attribute)
    {
      uint64_t v70 = *(unsigned int *)(Attribute + 16);
      uint64_t v71 = (llvm::Value **)(Attribute + *(unsigned int *)(Attribute + 12) + 25);
      if (v70 != 8)
      {
        if (v70 != 4)
        {
          if (v70 == 3)
          {
            if (*(_WORD *)v71 == 27745 && *(unsigned char *)(Attribute + *(unsigned int *)(Attribute + 12) + 27) == 108) {
              goto LABEL_168;
            }
            uint64_t v70 = 3;
          }
          goto LABEL_167;
        }
        if (*(_DWORD *)v71 != 1701736302)
        {
          uint64_t v70 = 4;
          goto LABEL_167;
        }
LABEL_168:
        return;
      }
      if (*v71 == (llvm::Value *)0x6661656C2D6E6F6ELL) {
        goto LABEL_168;
      }
      uint64_t v70 = 8;
    }
    else
    {
      uint64_t v71 = 0;
      uint64_t v70 = 0;
    }
LABEL_167:
    __int16 v85 = 1283;
    v82[0] = (uint64_t *)"invalid value for 'frame-pointer' attribute: ";
    unsigned int v83 = v71;
    uint64_t v84 = v70;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, (llvm::Type ***)&v86);
    goto LABEL_168;
  }
  unsigned int v36 = (uint64_t *)(v34 + 48);
  uint64_t v37 = 8 * v35;
  while (1)
  {
    uint64_t v38 = *v36;
    uint64_t v81 = v38;
    if (!v38) {
      break;
    }
    if (*(unsigned char *)(v38 + 8) != 2)
    {
      LODWORD(v38) = *(_DWORD *)(v38 + 12);
      break;
    }
LABEL_65:
    ++v36;
    v37 -= 8;
    if (!v37) {
      goto LABEL_66;
    }
  }
  if (AttrPropTable[(v38 - 1)]) {
    goto LABEL_65;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v81, 0, &v79);
  char v51 = std::string::insert(&v79, 0, "Attribute '");
  std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  char v53 = std::string::append(&v80, "' does not apply to functions!");
  std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  __int16 v85 = 260;
  v82[0] = (uint64_t *)&v89;
  unsigned int v48 = v78;
LABEL_108:
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v48, (const llvm::Twine *)v82, (llvm::Type ***)&v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, llvm::Type **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    BOOL v7 = *a4;
    llvm::VerifierSupport::Write(a1, v7);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    BOOL v7 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v7);
    }
  }
}

void anonymous namespace'::Verifier::verifySwiftErrorValue(llvm::raw_ostream **this, const llvm::Value *a2)
{
  uint64_t v13 = (llvm::Type **)a2;
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2) {
    return;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v12 = (llvm::Type **)v5;
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 <= 0x3C)
    {
      if (v6 == 33) {
        goto LABEL_8;
      }
      if (v6 != 60) {
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    if (v6 != 61)
    {
      if (v6 != 84)
      {
LABEL_19:
        uint64_t v11 = "swifterror value can only be loaded and stored from, or as a swifterror argument!";
        goto LABEL_21;
      }
LABEL_8:
      BOOL v7 = (const llvm::Value **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      uint64_t v8 = llvm::CallBase::arg_end((llvm::CallBase *)v5);
      if (v7 != (const llvm::Value **)v8)
      {
        int v9 = (const llvm::Value **)v8;
        int v10 = 0;
        while (*v7 != a2 || llvm::CallBase::paramHasAttr((llvm::CallBase *)v5, v10, 64))
        {
          ++v10;
          v7 += 4;
          if (v7 == v9) {
            goto LABEL_15;
          }
        }
        v14[0] = "swifterror value when used in a callsite should be marked with swifterror attribute";
        __int16 v15 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v14);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v5);
        }
      }
      goto LABEL_15;
    }
    if (*(const llvm::Value **)(v5 - 32) != a2) {
      break;
    }
LABEL_15:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return;
    }
  }
  uint64_t v11 = "swifterror value should be the second operand when used by stores";
LABEL_21:
  v14[0] = v11;
  __int16 v15 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)v14, &v13, &v12);
}

llvm::VerifierSupport *llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, const llvm::Module **a4, llvm::Type ***a5, const llvm::Module **a6)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  BOOL result = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
      BOOL result = *a1;
    }
    llvm::VerifierSupport::Write(result, *a4);
    uint64_t v12 = *a5;
    return llvm::VerifierSupport::WriteTs<llvm::Function *,llvm::Module *>((uint64_t ***)a1, v12, a6);
  }
  return result;
}

unsigned int *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear(unsigned int *result)
{
  unint64_t v1 = result;
  unsigned int v2 = result[2];
  if (!v2 && !result[3]) {
    return result;
  }
  uint64_t v3 = result[4];
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_20:
      *((void *)v1 + 1) = 0;
      return result;
    }
    uint64_t v8 = 16 * v3;
    BOOL result = (unsigned int *)(*(void *)result + 8);
    while (1)
    {
      uint64_t v9 = *((void *)result - 1);
      if (v9 == -8192) {
        goto LABEL_18;
      }
      if (v9 != -4096) {
        break;
      }
LABEL_19:
      result += 4;
      v8 -= 16;
      if (!v8) {
        goto LABEL_20;
      }
    }
    BOOL result = (unsigned int *)llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector((uint64_t *)result);
LABEL_18:
    *((void *)result - 1) = -4096;
    goto LABEL_19;
  }
  BOOL result = (unsigned int *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll((uint64_t *)result);
  if (!v2)
  {
    if (v1[4])
    {
      BOOL result = (unsigned int *)MEMORY[0x263E500A0](*(void *)v1, 8);
      *(void *)unint64_t v1 = 0;
      *((void *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
    goto LABEL_20;
  }
  int v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64) {
    unsigned int v5 = 64;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v5 == v1[4])
  {
    *((void *)v1 + 1) = 0;
    uint64_t v6 = 16 * v5;
    BOOL v7 = *(void **)v1;
    do
    {
      *BOOL v7 = -4096;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  else
  {
    MEMORY[0x263E500A0](*(void *)v1, 8);
    unint64_t v10 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
    v1[4] = v11;
    BOOL result = (unsigned int *)operator new(16 * v11, (std::align_val_t)8uLL);
    *(void *)unint64_t v1 = result;
    *((void *)v1 + 1) = 0;
    uint64_t v12 = v1[4];
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *(void *)BOOL result = -4096;
        result += 4;
        v13 -= 16;
      }
      while (v13);
    }
  }
  return result;
}

void llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, uint64_t *a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    BOOL v7 = *a3;
    llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>((uint64_t ***)a1, v7, a4);
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    unsigned int v5 = *a3;
    if (*a3)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v5);
    }
  }
}

void anonymous namespace'::Verifier::visitMDNode(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 432), a2, (uint64_t)v17);
  if (!v18) {
    return;
  }
  uint64_t v6 = *((void *)a2 + 1);
  BOOL v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0) {
    BOOL v7 = (void *)*v7;
  }
  if (v7 != *(void **)(a1 + 184))
  {
    uint64_t v8 = "MDNode context does not match Module context!";
    goto LABEL_6;
  }
  switch(*a2)
  {
    case 5:
      break;
    case 6:
      break;
    case 7:
      break;
    case 8:
      break;
    case 9:
      break;
    case 0xA:
      break;
    case 0xB:
      break;
    case 0xC:
      break;
    case 0xD:
      break;
    case 0xE:
      break;
    case 0xF:
      break;
    case 0x10:
      break;
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x18:
      break;
    case 0x19:
      break;
    case 0x1A:
      break;
    case 0x1B:
      break;
    case 0x1C:
      break;
    case 0x1D:
      break;
    case 0x1E:
      break;
    case 0x1F:
      break;
    case 0x20:
      break;
    case 0x21:
      break;
    case 0x22:
      break;
    case 0x23:
      break;
    default:
      break;
  }
  unint64_t v9 = *((void *)a2 - 2);
  if ((v9 & 2) != 0)
  {
    unint64_t v10 = (const llvm::ValueAsMetadata **)*((void *)a2 - 4);
    uint64_t v11 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6)) {
      goto LABEL_54;
    }
  }
  else
  {
    unint64_t v10 = (const llvm::ValueAsMetadata **)&a2[-8 * ((v9 >> 2) & 0xF) - 16];
    uint64_t v11 = (v9 >> 6) & 0xF;
    if (!v11)
    {
LABEL_54:
      if ((a2[1] & 0x7F) == 2)
      {
        uint64_t v8 = "Expected no forward declarations!";
      }
      else
      {
        if (!*((_DWORD *)a2 - 2)) {
          return;
        }
        uint64_t v8 = "All nodes should be resolved!";
      }
LABEL_6:
      uint64_t v16 = (const llvm::ValueAsMetadata *)a2;
      v17[0] = v8;
      __int16 v19 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)a1, (const llvm::Twine *)v17, (uint64_t *)&v16);
      return;
    }
  }
  uint64_t v12 = 8 * v11;
  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v16 = v13;
    if (!v13) {
      goto LABEL_53;
    }
    int v14 = *(unsigned __int8 *)v13;
    if (v14 == 2) {
      break;
    }
    if (a3 != 1 && v14 == 5)
    {
      v17[0] = "DILocation not allowed within this metadata node";
      __int16 v19 = 259;
      __int16 v15 = a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>((llvm::raw_ostream **)a1, (const llvm::Twine *)v17, (uint64_t *)&v15, (uint64_t *)&v16);
      return;
    }
    if (llvm::MDNode::classof(v13))
    {
    }
    else if (*(unsigned __int8 *)v13 - 3 >= 0xFFFFFFFE)
    {
    }
LABEL_53:
    ++v10;
    v12 -= 8;
    if (!v12) {
      goto LABEL_54;
    }
  }
  v17[0] = "Invalid operand for global metadata!";
  __int16 v19 = 259;
  llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v17);
  if (*(void *)a1)
  {
    llvm::VerifierSupport::Write(a1, (uint64_t)a2);
    llvm::VerifierSupport::Write(a1, (uint64_t)v13);
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, uint64_t *a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    BOOL v7 = *a3;
    llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>((uint64_t ***)a1, v7, a4);
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t)a1, *a3);
    BOOL v7 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v7);
    }
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Function>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t ***)a1, a3);
  }
}

void anonymous namespace'::Verifier::visitFunction(llvm::Function const&)::$_0::operator()(uint64_t a1, llvm::Type **a2, unsigned char *a3)
{
  if (!a3) {
    return;
  }
  if (*a3 != 5) {
    return;
  }
  BOOL v27 = a3;
  uint64_t v6 = *(llvm::raw_ostream ***)(a1 + 8);
  llvm::SmallPtrSetImpl<llvm::Value *>::insert(*(llvm::SmallPtrSetImplBase **)a1, a3, (uint64_t)v24);
  if (!v25) {
    return;
  }
  unint64_t v7 = *((void *)a3 - 2);
  if ((v7 & 2) != 0) {
    uint64_t v8 = (unsigned __int8 **)*((void *)a3 - 4);
  }
  else {
    uint64_t v8 = (unsigned __int8 **)&a3[-8 * ((v7 >> 2) & 0xF) - 16];
  }
  unint64_t v9 = *v8;
  if (!*v8 || *v9 - 17 >= 3)
  {
    v24[0] = "DILocation's scope must be a DILocalScope";
    __int16 v26 = 259;
    uint64_t v17 = *(uint64_t **)(a1 + 16);
    uint64_t v16 = *(llvm::Type ***)(a1 + 24);
    llvm::VerifierSupport::DebugInfoCheckFailed(v6, (const llvm::Twine *)v24);
    if (!*v6) {
      return;
    }
    llvm::VerifierSupport::Write((uint64_t)v6, *v17);
    if (v16) {
      llvm::VerifierSupport::Write((uint64_t ***)v6, v16);
    }
    llvm::VerifierSupport::Write((uint64_t ***)v6, a2);
    llvm::VerifierSupport::Write((uint64_t)v6, (uint64_t)a3);
    uint64_t v18 = (uint64_t)v6;
    uint64_t v19 = (uint64_t)v9;
    goto LABEL_20;
  }
  InlinedAtScope = (unsigned char *)llvm::DILocation::getInlinedAtScope((llvm::DILocation *)a3);
  uint64_t v23 = InlinedAtScope;
  if (!InlinedAtScope)
  {
    v24[0] = "Failed to find DILocalScope";
    __int16 v26 = 259;
    llvm::VerifierSupport::CheckFailed(v6, (const llvm::Twine *)v24);
    if (!*v6) {
      return;
    }
    uint64_t v18 = (uint64_t)v6;
    uint64_t v19 = (uint64_t)a3;
LABEL_20:
    llvm::VerifierSupport::Write(v18, v19);
    return;
  }
  uint64_t v11 = InlinedAtScope;
  llvm::SmallPtrSetImpl<llvm::Value *>::insert(*(llvm::SmallPtrSetImplBase **)a1, InlinedAtScope, (uint64_t)v24);
  if (v25)
  {
    Subprograuint64_t m = llvm::DILocalScope::getSubprogram(v11);
    uint64_t v13 = Subprogram;
    int v22 = Subprogram;
    if (!Subprogram
      || v11 == Subprogram
      || (llvm::SmallPtrSetImpl<llvm::Value *>::insert(*(llvm::SmallPtrSetImplBase **)a1, Subprogram, (uint64_t)v24), v25))
    {
      if ((unsigned char *)llvm::Value::getMetadata(*(llvm::Value **)(a1 + 24), 0) != v13)
      {
        v24[0] = "!dbg attachment points at wrong subprogram for function";
        __int16 v26 = 259;
        int v14 = *(uint64_t **)(a1 + 16);
        __int16 v15 = *(llvm::Type ***)(a1 + 24);
        uint64_t v20 = a2;
        uint64_t v21 = v15;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(v6, (const llvm::Twine *)v24, v14, &v21, &v20, (uint64_t *)&v27, (uint64_t *)&v23, (uint64_t *)&v22);
      }
    }
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, uint64_t *a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    uint64_t v7 = *a4;
    llvm::VerifierSupport::Write((uint64_t)a1, v7);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::GlobalValue,llvm::MDNode const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3, uint64_t *a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t ***)a1, a3);
    uint64_t v7 = *a4;
    llvm::VerifierSupport::Write((uint64_t)a1, v7);
  }
}

void llvm::VerifierSupport::CheckFailed(llvm::raw_ostream **this, const llvm::Twine *a2)
{
  uint64_t v3 = *this;
  if (*this)
  {
    llvm::Twine::print(a2, v3);
    int v4 = (unsigned char *)*((void *)v3 + 4);
    if ((unint64_t)v4 >= *((void *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((void *)v3 + 4) = v4 + 1;
      *int v4 = 10;
    }
  }
  *((unsigned char *)this + 192) = 1;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(uint64_t ***this, llvm::Type **a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  uint64_t v6 = (llvm::ModuleSlotTracker *)(this + 2);
  unsigned int v5 = *this;
  if (v4 < 0x1C) {
    printAsOperandImpl(a2, v5, 1, v6);
  }
  else {
    llvm::Value::print((llvm::Value *)a2, (llvm::raw_ostream *)v5, v6, 0);
  }
  BOOL result = (llvm::raw_ostream *)*this;
  uint64_t v8 = (*this)[4];
  if (v8 >= (*this)[3])
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = (char *)v8 + 1;
    *(unsigned char *)uint64_t v8 = 10;
  }
  return result;
}

uint64_t llvm::VerifierSupport::Write(uint64_t result, uint64_t a2)
{
  if (a2) {
    printMetadataImpl(*(llvm::raw_ostream **)result, a2, (llvm::ModuleSlotTracker *)(result + 16), *(void *)(result + 8), 0, 0);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v4 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v6 = result[2];
  if (*(void *)result + 8 * v6 == a2)
  {
    uint64_t v13 = 0;
    if (a3)
    {
      uint64_t v14 = a3;
      do
      {
        ++v13;
        uint64_t v14 = *(void *)(v14 + 8);
      }
      while (v14);
    }
    if (v13 + v6 > (unint64_t)result[3])
    {
      BOOL result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v13 + v6, 8);
      uint64_t v6 = v4[2];
      uint64_t v5 = *(void *)v4;
    }
    if (v3)
    {
      __int16 v15 = (void *)(v5 + 8 * v6);
      do
      {
        *v15++ = *(void *)(v3 + 24);
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3);
    }
    void v4[2] = v6 + v13;
  }
  else
  {
    unint64_t v7 = 0;
    if (a3)
    {
      uint64_t v8 = a3;
      do
      {
        ++v7;
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8);
    }
    uint64_t v9 = (a2 - v5) >> 3;
    if (v7 + v6 > result[3])
    {
      BOOL result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v6, 8);
      uint64_t v5 = *(void *)v4;
      uint64_t v6 = v4[2];
    }
    unint64_t v10 = (char *)(v5 + 8 * v9);
    uint64_t v11 = (char *)(v5 + 8 * v6);
    unint64_t v12 = (v11 - v10) >> 3;
    if (v12 >= v7)
    {
      uint64_t v16 = &v11[-8 * v7];
      BOOL result = llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(v4, v16, (char *)(v5 + 8 * v6));
      if (v16 != v10) {
        BOOL result = (unsigned int *)memmove(&v11[-(v16 - v10)], v10, v16 - v10);
      }
      while (v3)
      {
        *(void *)unint64_t v10 = *(void *)(v3 + 24);
        v10 += 8;
        uint64_t v3 = *(void *)(v3 + 8);
      }
    }
    else
    {
      void v4[2] = v6 + v7;
      if (v9 != v6)
      {
        BOOL result = (unsigned int *)memcpy((void *)(v5 + 8 * (v6 + v7) - 8 * v12), (const void *)(v5 + 8 * v9), v11 - v10);
        do
        {
          *(void *)unint64_t v10 = *(void *)(v3 + 24);
          v10 += 8;
          uint64_t v3 = *(void *)(v3 + 8);
          --v12;
        }
        while (v12);
      }
      for (; v3; uint64_t v3 = *(void *)(v3 + 8))
      {
        *(void *)uint64_t v11 = *(void *)(v3 + 24);
        v11 += 8;
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::VerifierSupport *this, const llvm::Module *a2)
{
  uint64_t v3 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v3 > 0xDuLL)
  {
    qmemcpy(v3, "; ModuleID = '", 14);
    *((void *)this + 4) += 14;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "; ModuleID = '", 0xEuLL);
  }
  uint64_t v6 = (const char *)*((void *)a2 + 20);
  uint64_t v5 = (char *)a2 + 160;
  unsigned int v4 = v6;
  int v7 = v5[23];
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    size_t v9 = v5[23];
  }
  else {
    size_t v9 = *((void *)v5 + 1);
  }
  BOOL result = llvm::raw_ostream::write(this, v8, v9);
  uint64_t v11 = (_WORD *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v11 > 1uLL)
  {
    *uint64_t v11 = 2599;
    *((void *)result + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(result, "'\n", 2uLL);
  }
  return result;
}

llvm::raw_ostream **llvm::VerifierSupport::Write(llvm::raw_ostream **this, llvm::Type *a2)
{
  if (a2)
  {
    uint64_t v3 = *this;
    unsigned int v4 = (unsigned char *)*((void *)*this + 4);
    if ((unint64_t)v4 >= *((void *)*this + 3))
    {
      llvm::raw_ostream::write(*this, 32);
    }
    else
    {
      *((void *)v3 + 4) = v4 + 1;
      *unsigned int v4 = 32;
    }
    return (llvm::raw_ostream **)llvm::Type::print(a2, v3, 0, 0);
  }
  return this;
}

void llvm::VerifierSupport::CheckFailed<llvm::AttributeSet const*,llvm::Value const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::AttributeSetNode ***a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  int v7 = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::AttributeSet::getAsString(*a3, 0, &__p);
      uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      size_t v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v7, (const char *)v8, v9);
      unint64_t v10 = (unsigned char *)*((void *)v7 + 4);
      if ((unint64_t)v10 >= *((void *)v7 + 3))
      {
        llvm::raw_ostream::write(v7, 10);
      }
      else
      {
        *((void *)v7 + 4) = v10 + 1;
        *unint64_t v10 = 10;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v11 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v11);
    }
  }
}

void anonymous namespace'::Verifier::verifyParameterAttrs(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  uint64_t v57 = a4;
  uint64_t v58 = a2;
  if (!a2) {
    return;
  }
  int v7 = (unint64_t *)(a2 + 48);
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (!v8)
  {
    LOBYTE(v12) = *(unsigned char *)(a2 + 13);
    if ((v12 & 4) != 0) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 8 * v8;
  unint64_t v10 = (std::string::size_type *)(a2 + 48);
  do
  {
    std::string::size_type v11 = *v10;
    v52.__r_.__value_.__r.__words[0] = v11;
    if (v11)
    {
      if (*(unsigned char *)(v11 + 8) == 2) {
        goto LABEL_8;
      }
      LODWORD(v11) = *(_DWORD *)(v11 + 12);
    }
    if ((AttrPropTable[(v11 - 1)] & 2) == 0)
    {
      llvm::Attribute::getAsString((llvm::Attribute *)&v52, 0, &v56);
      uint64_t v17 = std::string::insert(&v56, 0, "Attribute '");
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v45, "' does not apply to parameters");
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v55[0] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v51[0] = 260;
      std::string::size_type v47 = (std::string *)__p;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
      if (SHIBYTE(v55[0]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_8:
    ++v10;
    v9 -= 8;
  }
  while (v9);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 13);
  if ((*(unsigned char *)(a2 + 13) & 4) != 0 && v8 != 1)
  {
LABEL_11:
    uint64_t v13 = "Attribute 'immarg' is incompatible with other attributes";
LABEL_81:
    std::string::size_type v47 = (std::string *)v13;
    v51[0] = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
    return;
  }
LABEL_13:
  unsigned int v14 = *(unsigned __int8 *)(a2 + 20);
  unsigned int v15 = *(unsigned __int8 *)(a2 + 21);
  if (v15 & 4 | v12 & 8) {
    int v16 = (v15 & 1) + ((v14 >> 6) & 1) + ((v15 >> 1) & 1) + 1;
  }
  else {
    int v16 = (v15 & 1) + ((v14 >> 6) & 1) + ((v15 >> 1) & 1);
  }
  if (v16 + ((*(unsigned __int8 *)(a2 + 14) >> 1) & 1) + ((v14 >> 5) & 1) >= 2)
  {
    uint64_t v13 = "Attributes 'byval', 'inalloca', 'preallocated', 'inreg', 'nest', 'byref', and 'sret' are incompatible!";
    goto LABEL_81;
  }
  if ((v15 & 1) != 0 && (*(unsigned char *)(a2 + 17) & 0x20) != 0)
  {
    uint64_t v13 = "Attributes 'inalloca and readonly' are incompatible!";
    goto LABEL_81;
  }
  if ((v15 & 4) != 0 && (*(unsigned char *)(a2 + 17) & 0x40) != 0)
  {
    uint64_t v13 = "Attributes 'sret and returned' are incompatible!";
    goto LABEL_81;
  }
  if (v14 & 0x10) != 0 && (*(unsigned char *)(a2 + 18))
  {
    uint64_t v13 = "Attributes 'zeroext and signext' are incompatible!";
    goto LABEL_81;
  }
  if ((*(unsigned char *)(a2 + 17) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 17) & 0x20) != 0)
    {
      uint64_t v13 = "Attributes 'readnone and readonly' are incompatible!";
      goto LABEL_81;
    }
    if ((v14 & 8) != 0)
    {
      uint64_t v13 = "Attributes 'readnone and writeonly' are incompatible!";
      goto LABEL_81;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 0x20) != 0 && (v14 & 8) != 0)
  {
    uint64_t v13 = "Attributes 'readonly and writeonly' are incompatible!";
    goto LABEL_81;
  }
  if ((*(unsigned char *)(a2 + 15) & 4) != 0 && (*(unsigned char *)(a2 + 12) & 8) != 0)
  {
    uint64_t v13 = "Attributes 'noinline and alwaysinline' are incompatible!";
    goto LABEL_81;
  }
  llvm::AttributeFuncs::typeIncompatible(a3, 3, (uint64_t *)__p);
  uint64_t v21 = *(unsigned int *)(a2 + 8);
  if (!v21)
  {
LABEL_48:
    if (!a3 || *(unsigned char *)(a3 + 8) != 15) {
      goto LABEL_109;
    }
    char v24 = *(unsigned char *)(a2 + 20);
    if ((v24 & 0x40) != 0)
    {
      if ((*(unsigned char *)(a2 + 21) & 8) != 0)
      {
        unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment((llvm::AttributeSetNode *)a2);
        if (Alignment >= 0x100u && Alignment >= 0xFu)
        {
          unint64_t v39 = "Attribute 'align' exceed the max size 2^14";
          goto LABEL_116;
        }
      }
      std::string::size_type v47 = (std::string *)v51;
      unsigned int v48 = (std::string *)v51;
      uint64_t v49 = 4;
      int v50 = 0;
      uint64_t v25 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v25, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        uint64_t v38 = "Attribute 'byval' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47) {
        free(v48);
      }
      char v24 = *(unsigned char *)(a2 + 20);
    }
    if ((v24 & 0x20) != 0)
    {
      std::string::size_type v47 = (std::string *)v51;
      unsigned int v48 = (std::string *)v51;
      uint64_t v49 = 4;
      int v50 = 0;
      uint64_t v26 = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v26, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        uint64_t v38 = "Attribute 'byref' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47) {
        free(v48);
      }
    }
    char v27 = *(unsigned char *)(a2 + 21);
    if (v27)
    {
      std::string::size_type v47 = (std::string *)v51;
      unsigned int v48 = (std::string *)v51;
      uint64_t v49 = 4;
      int v50 = 0;
      uint64_t v28 = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v28, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        uint64_t v38 = "Attribute 'inalloca' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47) {
        free(v48);
      }
      char v27 = *(unsigned char *)(a2 + 21);
    }
    if ((v27 & 2) == 0) {
      goto LABEL_69;
    }
    std::string::size_type v47 = (std::string *)v51;
    unsigned int v48 = (std::string *)v51;
    uint64_t v49 = 4;
    int v50 = 0;
    uint64_t PreallocatedType = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v58);
    if (llvm::Type::isSized(PreallocatedType, (llvm::SmallPtrSetImplBase *)&v47))
    {
      if (v48 != v47) {
        free(v48);
      }
LABEL_69:
      if (*(void *)(a3 + 24))
      {
        uint64_t v30 = **(void **)(a3 + 16);
        char v31 = *(unsigned char *)(a2 + 20);
        if (*(unsigned char *)(v30 + 8) != 15 && (v31 & 1) != 0)
        {
          unint64_t v39 = "Attribute 'swifterror' only applies to parameters with pointer to pointer type!";
LABEL_116:
          std::string::size_type v47 = (std::string *)v39;
          v51[0] = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
          goto LABEL_117;
        }
        if ((*(unsigned char *)(a2 + 20) & 0x20) != 0 && llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v58) != v30)
        {
          unint64_t v39 = "Attribute 'byref' type does not match parameter!";
          goto LABEL_116;
        }
        if ((v31 & 0x40) != 0)
        {
          uint64_t v40 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v58);
          if (v40)
          {
            if (v40 != v30)
            {
              unint64_t v39 = "Attribute 'byval' type does not match parameter!";
              goto LABEL_116;
            }
          }
        }
        char v41 = *(unsigned char *)(a2 + 21);
        if ((v41 & 2) != 0 && llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v58) != v30)
        {
          unint64_t v39 = "Attribute 'preallocated' type does not match parameter!";
          goto LABEL_116;
        }
        if ((v41 & 1) != 0 && llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v58) != v30)
        {
          unint64_t v39 = "Attribute 'inalloca' type does not match parameter!";
          goto LABEL_116;
        }
        if (v31 < 0 && llvm::AttributeSet::getElementType((llvm::AttributeSet *)&v58) != v30)
        {
          unint64_t v39 = "Attribute 'elementtype' type does not match parameter!";
          goto LABEL_116;
        }
      }
LABEL_109:
      if ((*(unsigned char *)(a2 + 22) & 2) == 0) {
        goto LABEL_117;
      }
      uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(a2, 81);
      if (v43 && EnumAttribute && (uint64_t v44 = *(void *)(EnumAttribute + 16)) != 0)
      {
        if ((v44 & 0xFFFFFC00) == 0) {
          goto LABEL_117;
        }
        unint64_t v39 = "Invalid value for 'nofpclass' test mask";
      }
      else
      {
        unint64_t v39 = "Attribute 'nofpclass' must have at least one test bit set";
      }
      goto LABEL_116;
    }
    uint64_t v38 = "Attribute 'preallocated' does not support unsized types!";
LABEL_96:
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    __int16 v46 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v45, &v57);
    if (v48 != v47) {
      free(v48);
    }
    goto LABEL_117;
  }
  uint64_t v22 = 8 * v21;
  while (1)
  {
    unint64_t v23 = *v7;
    unint64_t v53 = v23;
    if (!v23) {
      break;
    }
    if (*(unsigned char *)(v23 + 8) != 2)
    {
      unint64_t v23 = *(unsigned int *)(v23 + 12);
      break;
    }
LABEL_47:
    ++v7;
    v22 -= 8;
    if (!v22) {
      goto LABEL_48;
    }
  }
  if (((*(unint64_t *)((char *)__p + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0) {
    goto LABEL_47;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v53, 0, &v52);
  uint64_t v33 = std::string::insert(&v52, 0, "Attribute '");
  std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v56, "' applied to incompatible type!");
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v51[0] = 260;
  std::string::size_type v47 = &v45;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
LABEL_117:
  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)v55, (void *)v55[1]);
}

void anonymous namespace'::Verifier::verifyAttributeTypes(llvm::raw_ostream **a1, uint64_t a2, llvm::Type **a3)
{
  uint64_t v71 = a3;
  if (a2) {
    unsigned int v4 = (uint64_t *)(a2 + 48);
  }
  else {
    unsigned int v4 = 0;
  }
  if (a2) {
    uint64_t v5 = a2 + 48 + 8 * *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4 == (uint64_t *)v5) {
    return;
  }
  while (1)
  {
    uint64_t v70 = *v4;
    uint64_t v6 = v70;
    if (!v70) {
      goto LABEL_194;
    }
    int v7 = *(unsigned __int8 *)(v70 + 8);
    if (v7 != 2) {
      break;
    }
    int v8 = *(_DWORD *)(v70 + 12);
    if (v8 == 19)
    {
      if (*(void *)(v70 + 24) != 0x662D786F72707061
        || *(void *)(v70 + 32) != 0x6D2D70662D636E75
        || *(void *)(v70 + 35) != 0x6874616D2D70662DLL)
      {
        goto LABEL_31;
      }
      uint64_t v11 = *(unsigned int *)(v70 + 16);
      if (!v11) {
        goto LABEL_31;
      }
      uint64_t v12 = (_DWORD *)(v70 + 44);
      if (v11 == 5)
      {
        if (*v12 == 1936482662 && *(unsigned char *)(v70 + 48) == 101) {
          goto LABEL_31;
        }
      }
      else if (v11 == 4 && *v12 == 1702195828)
      {
        goto LABEL_31;
      }
      v66[0] = "invalid value for 'approx-func-fp-math' attribute: ";
      uint64_t v67 = v70 + 44;
      uint64_t v68 = v11;
      __int16 v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_31:
      int v8 = *(_DWORD *)(v6 + 12);
    }
    if (v8 == 18)
    {
      BOOL v14 = *(void *)(v6 + 24) == 0x6572702D7373656CLL && *(void *)(v6 + 32) == 0x6D70662D65736963;
      if (v14 && *(_WORD *)(v6 + 40) == 25697)
      {
        uint64_t v16 = *(unsigned int *)(v6 + 16);
        if (v16)
        {
          uint64_t v17 = (_DWORD *)(v6 + 43);
          if (v16 == 5)
          {
            if (*v17 != 1936482662 || *(unsigned char *)(v6 + 47) != 101)
            {
LABEL_50:
              v66[0] = "invalid value for 'less-precise-fpmad' attribute: ";
              uint64_t v67 = v6 + 43;
              uint64_t v68 = v16;
              __int16 v69 = 1283;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
            }
          }
          else if (v16 != 4 || *v17 != 1702195828)
          {
            goto LABEL_50;
          }
        }
      }
    }
    int v19 = *(_DWORD *)(v6 + 12);
    if (v19 == 15)
    {
      if (*(void *)(v6 + 24) != 0x2D73666E692D6F6ELL || *(void *)(v6 + 31) != 0x6874616D2D70662DLL) {
        goto LABEL_67;
      }
      uint64_t v21 = *(unsigned int *)(v6 + 16);
      if (!v21) {
        goto LABEL_67;
      }
      uint64_t v22 = (_DWORD *)(v6 + 40);
      if (v21 == 5)
      {
        if (*v22 == 1936482662 && *(unsigned char *)(v6 + 44) == 101) {
          goto LABEL_67;
        }
      }
      else if (v21 == 4 && *v22 == 1702195828)
      {
        goto LABEL_67;
      }
      v66[0] = "invalid value for 'no-infs-fp-math' attribute: ";
      uint64_t v67 = v6 + 40;
      uint64_t v68 = v21;
      __int16 v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_67:
      int v19 = *(_DWORD *)(v6 + 12);
    }
    if (v19 == 21)
    {
      BOOL v24 = *(void *)(v6 + 24) == 0x6E696C6E692D6F6ELL && *(void *)(v6 + 32) == 0x742D656E696C2D65;
      if (v24 && *(void *)(v6 + 37) == 0x73656C6261742D65)
      {
        uint64_t v26 = *(unsigned int *)(v6 + 16);
        if (v26)
        {
          char v27 = (_DWORD *)(v6 + 46);
          if (v26 == 5)
          {
            if (*v27 != 1936482662 || *(unsigned char *)(v6 + 50) != 101)
            {
LABEL_86:
              v66[0] = "invalid value for 'no-inline-line-tables' attribute: ";
              uint64_t v67 = v6 + 46;
              uint64_t v68 = v26;
              __int16 v69 = 1283;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
            }
          }
          else if (v26 != 4 || *v27 != 1702195828)
          {
            goto LABEL_86;
          }
        }
      }
    }
    int v29 = *(_DWORD *)(v6 + 12);
    if (v29 == 14)
    {
      if (*(void *)(v6 + 24) != 0x2D706D756A2D6F6ELL || *(void *)(v6 + 30) != 0x73656C6261742D70) {
        goto LABEL_103;
      }
      uint64_t v31 = *(unsigned int *)(v6 + 16);
      if (!v31) {
        goto LABEL_103;
      }
      BOOL v32 = (_DWORD *)(v6 + 39);
      if (v31 == 5)
      {
        if (*v32 == 1936482662 && *(unsigned char *)(v6 + 43) == 101) {
          goto LABEL_103;
        }
      }
      else if (v31 == 4 && *v32 == 1702195828)
      {
        goto LABEL_103;
      }
      v66[0] = "invalid value for 'no-jump-tables' attribute: ";
      uint64_t v67 = v6 + 39;
      uint64_t v68 = v31;
      __int16 v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_103:
      int v29 = *(_DWORD *)(v6 + 12);
    }
    if (v29 == 15 && *(void *)(v6 + 24) == 0x2D736E616E2D6F6ELL && *(void *)(v6 + 31) == 0x6874616D2D70662DLL)
    {
      uint64_t v35 = *(unsigned int *)(v6 + 16);
      if (v35)
      {
        std::string::size_type v36 = (_DWORD *)(v6 + 40);
        if (v35 == 5)
        {
          if (*v36 != 1936482662 || *(unsigned char *)(v6 + 44) != 101)
          {
LABEL_119:
            v66[0] = "invalid value for 'no-nans-fp-math' attribute: ";
            uint64_t v67 = v6 + 40;
            uint64_t v68 = v35;
            __int16 v69 = 1283;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
          }
        }
        else if (v35 != 4 || *v36 != 1702195828)
        {
          goto LABEL_119;
        }
      }
    }
    int v38 = *(_DWORD *)(v6 + 12);
    if (v38 != 23) {
      goto LABEL_159;
    }
    if (*(void *)(v6 + 24) == 0x656E6769732D6F6ELL
      && *(void *)(v6 + 32) == 0x2D736F72657A2D64
      && *(void *)(v6 + 39) == 0x6874616D2D70662DLL)
    {
      uint64_t v41 = *(unsigned int *)(v6 + 16);
      if (v41)
      {
        int v42 = (_DWORD *)(v6 + 48);
        if (v41 == 5)
        {
          if (*v42 != 1936482662 || *(unsigned char *)(v6 + 52) != 101)
          {
LABEL_138:
            v66[0] = "invalid value for 'no-signed-zeros-fp-math' attribute: ";
            uint64_t v67 = v6 + 48;
            uint64_t v68 = v41;
            __int16 v69 = 1283;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
          }
        }
        else if (v41 != 4 || *v42 != 1702195828)
        {
          goto LABEL_138;
        }
      }
    }
    int v38 = *(_DWORD *)(v6 + 12);
    if (v38 == 23)
    {
      if (*(void *)(v6 + 24) != 0x2D656C69666F7270
        || *(void *)(v6 + 32) != 0x612D656C706D6173
        || *(void *)(v6 + 39) != 0x6574617275636361)
      {
        goto LABEL_158;
      }
      uint64_t v46 = *(unsigned int *)(v6 + 16);
      if (!v46) {
        goto LABEL_158;
      }
      std::string::size_type v47 = (_DWORD *)(v6 + 48);
      if (v46 == 5)
      {
        if (*v47 == 1936482662 && *(unsigned char *)(v6 + 52) == 101) {
          goto LABEL_158;
        }
      }
      else if (v46 == 4 && *v47 == 1702195828)
      {
        goto LABEL_158;
      }
      v66[0] = "invalid value for 'profile-sample-accurate' attribute: ";
      uint64_t v67 = v6 + 48;
      uint64_t v68 = v46;
      __int16 v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_158:
      int v38 = *(_DWORD *)(v6 + 12);
    }
LABEL_159:
    if (v38 != 14) {
      goto LABEL_175;
    }
    if (*(void *)(v6 + 24) != 0x662D656661736E75 || *(void *)(v6 + 30) != 0x6874616D2D70662DLL) {
      goto LABEL_175;
    }
    uint64_t v50 = *(unsigned int *)(v6 + 16);
    if (!v50) {
      goto LABEL_175;
    }
    char v51 = (_DWORD *)(v6 + 39);
    if (v50 == 5)
    {
      if (*v51 == 1936482662 && *(unsigned char *)(v6 + 43) == 101) {
        goto LABEL_175;
      }
LABEL_174:
      v66[0] = "invalid value for 'unsafe-fp-math' attribute: ";
      uint64_t v67 = v6 + 39;
      uint64_t v68 = v50;
      __int16 v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
      goto LABEL_175;
    }
    if (v50 != 4 || *v51 != 1702195828) {
      goto LABEL_174;
    }
LABEL_175:
    if (*(_DWORD *)(v6 + 12) != 18) {
      goto LABEL_194;
    }
    BOOL v53 = *(void *)(v6 + 24) == 0x706D61732D657375 && *(void *)(v6 + 32) == 0x69666F72702D656CLL;
    if (!v53 || *(_WORD *)(v6 + 40) != 25964) {
      goto LABEL_194;
    }
    uint64_t v55 = *(unsigned int *)(v6 + 16);
    if (!v55) {
      goto LABEL_194;
    }
    std::string v56 = (_DWORD *)(v6 + 43);
    if (v55 == 5)
    {
      if (*v56 == 1936482662 && *(unsigned char *)(v6 + 47) == 101) {
        goto LABEL_194;
      }
    }
    else if (v55 == 4 && *v56 == 1702195828)
    {
      goto LABEL_194;
    }
    v66[0] = "invalid value for 'use-sample-profile' attribute: ";
    uint64_t v67 = v6 + 43;
    uint64_t v68 = v55;
    __int16 v69 = 1283;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_194:
    if (++v4 == (uint64_t *)v5) {
      return;
    }
  }
  if ((v7 == 1) == (*(_DWORD *)(v70 + 12) - 75) < 0xA) {
    goto LABEL_194;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v70, 0, &v62);
  uint64_t v58 = std::string::insert(&v62, 0, "Attribute '");
  std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  char v60 = std::string::append(&v63, "' should have an Argument");
  std::string::size_type v61 = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  std::string::size_type v65 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  __int16 v69 = 260;
  v66[0] = __p;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v66, &v71);
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
}

uint64_t anonymous namespace'::Verifier::verifyFunctionAttrs(llvm::FunctionType *,llvm::AttributeList,llvm::Value const*,BOOL,BOOL)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = (llvm::raw_ostream **)a1[1];
  uint64_t v6 = **a1;
  if (*(_DWORD *)(v6 + 12) - 1 <= a4)
  {
    __int16 v12 = 1283;
    uint64_t v9 = "'allocsize' ";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    int v8 = " argument is out of bounds";
  }
  else
  {
    if (*(unsigned char *)(*(void *)(*(void *)(v6 + 16) + 8 * (a4 + 1)) + 8) == 13) {
      return 1;
    }
    __int16 v12 = 1283;
    uint64_t v9 = "'allocsize' ";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    int v8 = " argument must refer to an integer parameter";
  }
  v13[0] = &v9;
  uint64_t v13[2] = v8;
  __int16 v14 = 770;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v5, (const llvm::Twine *)v13, (llvm::Type ***)a1[2]);
  return 0;
}

void anonymous namespace'::Verifier::checkUnsignedBaseTenFuncAttr(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, unint64_t *a4, llvm::Type **a5)
{
  BOOL v24 = a5;
  uint64_t v25 = a2;
  if (llvm::AttributeList::hasAttributeAtIndex(&v25, -1, a3, a4))
  {
    if (a2 && *(_DWORD *)(a2 + 8)) {
      uint64_t v10 = *(void *)(a2 + 40);
    }
    else {
      uint64_t v10 = 0;
    }
    int v19 = (unint64_t *)v10;
    uint64_t Attribute = llvm::AttributeSet::getAttribute((uint64_t *)&v19, a3, (uint64_t)a4, v9);
    if (Attribute)
    {
      uint64_t v13 = *(unsigned int *)(Attribute + 16);
      uint64_t v14 = Attribute + *(unsigned int *)(Attribute + 12) + 25;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    v17[0] = 0;
    int v19 = (unint64_t *)v14;
    uint64_t v20 = v13;
    if ((llvm::consumeUnsignedInteger((llvm *)&v19, (llvm::StringRef *)0xA, v17, v12) & 1) != 0
      || v20
      || HIDWORD(v17[0]))
    {
      __int16 v16 = 1283;
      v15[0] = "\"";
      uint64_t v15[2] = a3;
      void v15[3] = a4;
      v17[0] = (unint64_t)v15;
      void v17[2] = (unint64_t)"\" takes an unsigned integer: ";
      __int16 v18 = 770;
      int v19 = v17;
      uint64_t v21 = v14;
      uint64_t v22 = v13;
      __int16 v23 = 1282;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v19, &v24);
    }
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    uint64_t v5 = *a3;
    llvm::VerifierSupport::Write((uint64_t)a1, v5);
  }
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Function *,llvm::Module *>(uint64_t ***this, llvm::Type **a2, const llvm::Module **a3)
{
  if (a2) {
    llvm::VerifierSupport::Write(this, a2);
  }
  uint64_t v5 = *a3;
  uint64_t v6 = *this;
  return llvm::VerifierSupport::Write((llvm::VerifierSupport *)v6, v5);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll(uint64_t *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    BOOL result = (uint64_t *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        BOOL result = llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(result);
      }
      result += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>(uint64_t ***this, llvm::Type **a2, uint64_t *a3)
{
  if (a2) {
    llvm::VerifierSupport::Write(this, a2);
  }
  uint64_t v5 = *a3;
  return llvm::VerifierSupport::Write((uint64_t)this, v5);
}

void llvm::VerifierSupport::DebugInfoCheckFailed(llvm::raw_ostream **this, const llvm::Twine *a2)
{
  uint64_t v3 = *this;
  if (*this)
  {
    llvm::Twine::print(a2, v3);
    unsigned int v4 = (unsigned char *)*((void *)v3 + 4);
    if ((unint64_t)v4 >= *((void *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((void *)v3 + 4) = v4 + 1;
      *unsigned int v4 = 10;
    }
  }
  *((unsigned char *)this + 192) |= *((unsigned char *)this + 194);
  *((unsigned char *)this + 193) = 1;
}

void anonymous namespace'::Verifier::visitDILocation(llvm::raw_ostream **this, const llvm::DILocation *a2)
{
  unsigned int v4 = (char *)a2 - 16;
  unint64_t v5 = *((void *)a2 - 2);
  if ((v5 & 2) == 0)
  {
    uint64_t v6 = (v5 >> 2) & 0xF;
    int v7 = &v4[-8 * v6];
    int v8 = *(const llvm::DILocation **)v7;
    if (*(void *)v7 && *(unsigned __int8 *)v8 - 20 >= 0xFFFFFFFD)
    {
      if ((*((void *)a2 - 2) & 0x3C0) != 0x80)
      {
        uint64_t v9 = -v6;
LABEL_16:
        int v7 = &v4[8 * v9];
        goto LABEL_18;
      }
      goto LABEL_12;
    }
LABEL_8:
    uint64_t v14 = a2;
    v15[0] = "location requires a valid scope";
    __int16 v16 = 259;
    uint64_t v13 = v8;
    uint64_t v10 = &v14;
    uint64_t v11 = &v13;
    goto LABEL_9;
  }
  int v7 = (char *)*((void *)a2 - 4);
  int v8 = *(const llvm::DILocation **)v7;
  if (!*(void *)v7 || *(unsigned __int8 *)v8 - 20 <= 0xFFFFFFFC) {
    goto LABEL_8;
  }
  if (*((_DWORD *)a2 - 6) == 2)
  {
LABEL_12:
    __int16 v12 = (const llvm::DILocation *)*((void *)v7 + 1);
    uint64_t v14 = v12;
    if (!v12 || *(unsigned char *)v12 == 5)
    {
      if ((v5 & 2) != 0)
      {
        int v7 = (char *)*((void *)a2 - 4);
        goto LABEL_18;
      }
      uint64_t v9 = -(uint64_t)((v5 >> 2) & 0xF);
      goto LABEL_16;
    }
    v15[0] = "inlined-at should be a location";
    __int16 v16 = 259;
    uint64_t v13 = a2;
    uint64_t v10 = &v13;
    uint64_t v11 = &v14;
LABEL_9:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v15, (uint64_t *)v10, (uint64_t *)v11);
    return;
  }
LABEL_18:
  if (**(unsigned char **)v7 == 17 && (*(unsigned char *)(*(void *)v7 + 36) & 8) == 0)
  {
    v15[0] = "scope points into the type hierarchy";
    __int16 v16 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v15);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIExpression(llvm::raw_ostream **this, const llvm::DIExpression *a2)
{
  if (!llvm::DIExpression::isValid(a2))
  {
    unsigned int v4 = "invalid expression";
    __int16 v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v4);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIGlobalVariableExpression(llvm::raw_ostream **this, uint64_t a2)
{
  __int16 v5 = (void *)(a2 - 16);
  unint64_t v4 = *(void *)(a2 - 16);
  if ((v4 & 2) != 0) {
    uint64_t v6 = *(uint64_t **)(a2 - 32);
  }
  else {
    uint64_t v6 = &v5[-((v4 >> 2) & 0xF)];
  }
  if (!*v6)
  {
    v19[0] = "missing variable";
    __int16 v20 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v19);
    return;
  }
  if ((*v5 & 2) != 0) {
    int v7 = *(void **)(a2 - 32);
  }
  else {
    int v7 = &v5[-((*v5 >> 2) & 0xFLL)];
  }
  uint64_t v8 = v7[1];
  if (v8)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 16), *(uint64_t **)(v8 + 24), &v16);
    if (v17)
    {
      uint64_t v9 = (*v5 & 2) != 0 ? *(llvm::DIVariable ***)(a2 - 32) : (llvm::DIVariable **)&v5[-((*v5 >> 2) & 0xFLL)];
      uint64_t v10 = *v9;
      __int32 v11 = v16.i32[0];
      __int32 v12 = v16.i32[2];
      uint64_t v21 = a2;
      unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(v10);
      if (v14)
      {
        if ((v12 + v11) <= SizeInBits)
        {
          if (SizeInBits != v11) {
            return;
          }
          unsigned int v15 = "fragment covers entire variable";
        }
        else
        {
          unsigned int v15 = "fragment is larger than or outside of variable";
        }
        __int16 v18 = v10;
        v19[0] = v15;
        __int16 v20 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v19, &v21, (uint64_t *)&v18);
      }
    }
  }
}

void anonymous namespace'::Verifier::visitGenericDINode(llvm::raw_ostream **a1, uint64_t a2)
{
  if (!*(_WORD *)(a2 + 2))
  {
    unint64_t v4 = "invalid tag";
    __int16 v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v4);
    if (*a1) {
      llvm::VerifierSupport::Write((uint64_t)a1, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDISubrange(llvm::raw_ostream **this, const llvm::DISubrange *a2)
{
  if (*((_WORD *)a2 + 1) != 33)
  {
    __int32 v11 = "invalid tag";
LABEL_56:
    std::string::size_type v34 = a2;
    uint64_t v35 = v11;
    __int16 v36 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)&v35, (uint64_t *)&v34);
    return;
  }
  unsigned int v4 = *((_DWORD *)this + 201);
  BOOL v5 = v4 > 0x2D;
  uint64_t v6 = (1 << v4) & 0x200C00004180;
  if (v5 || v6 == 0)
  {
    unint64_t v19 = *((void *)a2 - 2);
    __int16 v20 = (v19 & 2) != 0
        ? (const llvm::DISubrange *)*((void *)a2 - 4)
        : (const llvm::DISubrange *)((char *)a2 - 8 * ((v19 >> 2) & 0xF) - 16);
    if (!*(void *)v20 && !*((void *)v20 + 2))
    {
      __int32 v11 = "Subrange must contain count or upperBound";
      goto LABEL_56;
    }
  }
  uint64_t v8 = (char *)a2 - 16;
  unint64_t v9 = *((void *)a2 - 2);
  if ((v9 & 2) != 0) {
    uint64_t v10 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v10 = &v8[-8 * ((v9 >> 2) & 0xF)];
  }
  if (*(void *)v10)
  {
    if (*((void *)v10 + 2))
    {
      __int32 v11 = "Subrange can have any one of count or upperBound";
      goto LABEL_56;
    }
    unsigned int v12 = **(unsigned __int8 **)v10;
    BOOL v5 = v12 > 0x19;
    int v13 = (1 << v12) & 0x3000042;
    if (v5 || v13 == 0)
    {
      __int32 v11 = "Count must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  unint64_t Count = llvm::DISubrange::getCount(a2);
  if (Count >= 8 && (Count & 6) == 0)
  {
    unint64_t v16 = Count & 0xFFFFFFFFFFFFFFF8;
    unsigned int v17 = *(_DWORD *)((Count & 0xFFFFFFFFFFFFFFF8) + 32);
    uint64_t v18 = v17 > 0x40 ? **(void **)(v16 + 24) : (uint64_t)(*(void *)(v16 + 24) << -(char)v17) >> -(char)v17;
    if (v18 <= -2)
    {
      __int32 v11 = "invalid subrange count";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0) {
    uint64_t v21 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v21 = &v8[-8 * ((v9 >> 2) & 0xF)];
  }
  uint64_t v22 = (unsigned __int8 *)*((void *)v21 + 1);
  if (v22)
  {
    unsigned int v23 = *v22;
    BOOL v5 = v23 > 0x19;
    int v24 = (1 << v23) & 0x3000042;
    if (v5 || v24 == 0)
    {
      __int32 v11 = "LowerBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0) {
    uint64_t v26 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v26 = &v8[-8 * ((v9 >> 2) & 0xF)];
  }
  char v27 = (unsigned __int8 *)*((void *)v26 + 2);
  if (v27)
  {
    unsigned int v28 = *v27;
    BOOL v5 = v28 > 0x19;
    int v29 = (1 << v28) & 0x3000042;
    if (v5 || v29 == 0)
    {
      __int32 v11 = "UpperBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0) {
    uint64_t v31 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v31 = &v8[-8 * ((v9 >> 2) & 0xF)];
  }
  BOOL v32 = (unsigned __int8 *)*((void *)v31 + 3);
  if (v32)
  {
    unsigned int v33 = *v32;
    if (v33 > 0x19 || ((1 << v33) & 0x3000042) == 0)
    {
      __int32 v11 = "Stride must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
}

void anonymous namespace'::Verifier::visitDIEnumerator(llvm::raw_ostream **this, const llvm::DIEnumerator *a2)
{
  if (*((_WORD *)a2 + 1) != 40)
  {
    unsigned int v4 = "invalid tag";
    __int16 v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v4);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIBasicType(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 2);
  BOOL v3 = v2 > 0x3B;
  uint64_t v4 = (1 << v2) & 0x800001000040000;
  if (v3 || v4 == 0)
  {
    uint64_t v8 = "invalid tag";
    __int16 v9 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v8);
    if (*a1) {
      llvm::VerifierSupport::Write((uint64_t)a1, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIDerivedType(llvm::raw_ostream **a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 2);
  uint64_t v5 = (v4 - 13);
  if (v5 <= 0x3E)
  {
    if (((1 << (v4 - 13)) & 0x442005002200820DLL) != 0) {
      goto LABEL_3;
    }
    if (v5 == 18)
    {
      uint64_t v20 = a2 - 16;
      unint64_t v21 = *(void *)(a2 - 16);
      if ((v21 & 2) != 0) {
        uint64_t v22 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v22 = v20 - 8 * ((v21 >> 2) & 0xF);
      }
      uint64_t v31 = *(unsigned __int8 **)(v22 + 32);
      if (v31)
      {
        int v32 = *v31;
        if ((v32 - 11) >= 4 && v32 != 34)
        {
          uint64_t v35 = (unsigned __int8 *)a2;
          v36[0] = "invalid pointer to member type";
          __int16 v37 = 259;
          if ((v21 & 2) != 0) {
            uint64_t v33 = *(void *)(a2 - 32);
          }
          else {
            uint64_t v33 = v20 - 8 * ((v21 >> 2) & 0xF);
          }
          uint64_t v23 = *(void *)(v33 + 32);
          goto LABEL_56;
        }
      }
      goto LABEL_3;
    }
    if (v5 == 19)
    {
      unint64_t v16 = *(void *)(a2 - 16);
      if ((v16 & 2) != 0) {
        uint64_t v17 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v17 = a2 - 16 - 8 * ((v16 >> 2) & 0xF);
      }
      int v24 = *(unsigned __int8 **)(v17 + 24);
      uint64_t v35 = v24;
      if (v24)
      {
        int v25 = *v24;
        uint64_t v26 = v25 == 11 ? v24 : 0;
        if (v25 != 13 || *((_WORD *)v24 + 1) != 4)
        {
          if (!v26
            || ((int v27 = *((_DWORD *)v26 + 11), (v27 - 5) >= 4) ? (v28 = v27 == 2) : (v28 = 1), !v28))
          {
            v36[0] = "invalid set base type";
            __int16 v37 = 259;
            uint64_t v34 = a2;
            int v29 = &v34;
            uint64_t v30 = (uint64_t *)&v35;
LABEL_57:
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v36, v29, v30);
            return;
          }
        }
      }
      goto LABEL_3;
    }
  }
  if (v4 != 17152)
  {
    unsigned int v15 = "invalid tag";
    goto LABEL_24;
  }
LABEL_3:
  uint64_t v6 = a2 - 16;
  unint64_t v7 = *(void *)(a2 - 16);
  if ((v7 & 2) != 0) {
    uint64_t v8 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v8 = v6 - 8 * ((v7 >> 2) & 0xF);
  }
  __int16 v9 = *(unsigned __int8 **)(v8 + 8);
  if (v9)
  {
    int v10 = *v9;
    if ((v10 - 11) >= 0xB && v10 != 32 && v10 != 34)
    {
      uint64_t v35 = (unsigned __int8 *)a2;
      v36[0] = "invalid scope";
      __int16 v37 = 259;
      if ((v7 & 2) != 0) {
        uint64_t v18 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v18 = v6 - 8 * ((v7 >> 2) & 0xF);
      }
      uint64_t v23 = *(void *)(v18 + 8);
LABEL_56:
      uint64_t v34 = v23;
      int v29 = (uint64_t *)&v35;
      uint64_t v30 = &v34;
      goto LABEL_57;
    }
  }
  if ((v7 & 2) != 0) {
    uint64_t v11 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v11 = v6 - 8 * ((v7 >> 2) & 0xF);
  }
  unsigned int v12 = *(unsigned __int8 **)(v11 + 24);
  if (v12)
  {
    int v13 = *v12;
    if ((v13 - 11) >= 4 && v13 != 34)
    {
      uint64_t v35 = (unsigned __int8 *)a2;
      v36[0] = "invalid base type";
      __int16 v37 = 259;
      if ((v7 & 2) != 0) {
        uint64_t v19 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v19 = v6 - 8 * ((v7 >> 2) & 0xF);
      }
      uint64_t v23 = *(void *)(v19 + 24);
      goto LABEL_56;
    }
  }
  if ((*(void *)(a2 + 44) & 0xFF00000000) != 0)
  {
    unsigned int v14 = v4 - 15;
    if (v14 > 0x33 || ((1 << v14) & 0x8000000000003) == 0)
    {
      unsigned int v15 = "DWARF address space only applies to pointer or reference types";
LABEL_24:
      uint64_t v35 = (unsigned __int8 *)a2;
      v36[0] = v15;
      __int16 v37 = 259;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v36, (uint64_t *)&v35);
    }
  }
}

void anonymous namespace'::Verifier::visitDICompositeType(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 2);
  BOOL v5 = v4 > 0x33;
  uint64_t v6 = (1 << v4) & 0x8080000880016;
  if (v5 || v6 == 0)
  {
    uint64_t v22 = "invalid tag";
    goto LABEL_79;
  }
  uint64_t v9 = a2 - 16;
  unint64_t v8 = *(void *)(a2 - 16);
  if ((v8 & 2) != 0) {
    uint64_t v10 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v10 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  uint64_t v11 = *(unsigned __int8 **)(v10 + 8);
  if (v11)
  {
    int v12 = *v11;
    if ((v12 - 11) >= 0xB && v12 != 32 && v12 != 34)
    {
      uint64_t v40 = a2;
      v41[0] = "invalid scope";
      __int16 v42 = 259;
      if ((v8 & 2) != 0) {
        uint64_t v23 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v23 = v9 - 8 * ((v8 >> 2) & 0xF);
      }
      uint64_t v27 = *(void *)(v23 + 8);
LABEL_73:
      unint64_t v39 = (unsigned char *)v27;
      goto LABEL_74;
    }
  }
  if ((v8 & 2) != 0) {
    uint64_t v13 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v13 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  unsigned int v14 = *(unsigned __int8 **)(v13 + 24);
  if (v14)
  {
    int v15 = *v14;
    if ((v15 - 11) >= 4 && v15 != 34)
    {
      uint64_t v40 = a2;
      v41[0] = "invalid base type";
      __int16 v42 = 259;
      if ((v8 & 2) != 0) {
        uint64_t v24 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v24 = v9 - 8 * ((v8 >> 2) & 0xF);
      }
      uint64_t v27 = *(void *)(v24 + 24);
      goto LABEL_73;
    }
  }
  if ((v8 & 2) != 0) {
    uint64_t v16 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v16 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  uint64_t v17 = *(unsigned char **)(v16 + 32);
  if (v17 && *v17 != 4)
  {
    uint64_t v40 = a2;
    v41[0] = "invalid composite elements";
    __int16 v42 = 259;
    unint64_t v39 = v17;
LABEL_74:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v41, &v40, (uint64_t *)&v39);
    return;
  }
  uint64_t v18 = *(unsigned __int8 **)(v16 + 40);
  if (v18)
  {
    int v19 = *v18;
    if ((v19 - 11) >= 4 && v19 != 34)
    {
      uint64_t v40 = a2;
      v41[0] = "invalid vtable holder";
      __int16 v42 = 259;
      if ((v8 & 2) != 0) {
        uint64_t v26 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v26 = v9 - 8 * ((v8 >> 2) & 0xF);
      }
      uint64_t v27 = *(void *)(v26 + 40);
      goto LABEL_73;
    }
  }
  int v20 = *(_DWORD *)(a2 + 20);
  if ((~v20 & 0x6000) == 0 || (v20 & 0xC00000) == 0xC00000)
  {
    uint64_t v22 = "invalid reference flags";
LABEL_79:
    uint64_t v40 = a2;
    v41[0] = v22;
    __int16 v42 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v41, &v40);
    return;
  }
  if ((v20 & 0x10) != 0)
  {
    uint64_t v22 = "DIBlockByRefStruct on DICompositeType is no longer supported";
    goto LABEL_79;
  }
  if ((v20 & 0x800) != 0)
  {
    if ((v8 & 2) != 0) {
      uint64_t v25 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v25 = v9 - 8 * ((v8 >> 2) & 0xF);
    }
    uint64_t v32 = *(void *)(v25 + 32);
    if (v32)
    {
      unint64_t v33 = *(void *)(v32 - 16);
      if ((v33 & 2) != 0)
      {
        if (*(_DWORD *)(v32 - 24) == 1)
        {
          uint64_t v34 = *(void *)(v32 - 32);
LABEL_77:
          if (*(_WORD *)(*(void *)v34 + 2) == 33) {
            goto LABEL_28;
          }
        }
      }
      else if ((*(void *)(v32 - 16) & 0x3C0) == 0x40)
      {
        uint64_t v34 = v32 - 16 - 8 * ((v33 >> 2) & 0xF);
        goto LABEL_77;
      }
    }
    uint64_t v22 = "invalid vector, expected one element of type subrange";
    goto LABEL_79;
  }
LABEL_28:
  if ((v8 & 2) != 0) {
    uint64_t v21 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v21 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  BOOL v28 = *(unsigned __int8 **)(v21 + 48);
  if (v28)
  {
    unint64_t v8 = *(void *)(a2 - 16);
  }
  if ((v8 & 2) != 0) {
    uint64_t v29 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v29 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  uint64_t v30 = *(unsigned char **)(v29 + 64);
  if (v30 && (*v30 != 12 || *(_WORD *)(a2 + 2) != 51))
  {
    uint64_t v35 = "discriminator can only appear on variant part";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0) {
    uint64_t v31 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v31 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  if (*(void *)(v31 + 72) && *(_WORD *)(a2 + 2) != 1)
  {
    uint64_t v35 = "dataLocation can only appear in array type";
LABEL_97:
    v41[0] = v35;
    __int16 v42 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v41);
    return;
  }
  if ((v8 & 2) != 0) {
    uint64_t v36 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v36 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  if (*(void *)(v36 + 80) && *(_WORD *)(a2 + 2) != 1)
  {
    uint64_t v35 = "associated can only appear in array type";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0) {
    uint64_t v37 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v37 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  if (*(void *)(v37 + 88) && *(_WORD *)(a2 + 2) != 1)
  {
    uint64_t v35 = "allocated can only appear in array type";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0) {
    uint64_t v38 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v38 = v9 - 8 * ((v8 >> 2) & 0xF);
  }
  if (*(void *)(v38 + 96) && *(_WORD *)(a2 + 2) != 1)
  {
    uint64_t v35 = "rank can only appear in array type";
    goto LABEL_97;
  }
}

void anonymous namespace'::Verifier::visitDISubroutineType(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 21)
  {
    unint64_t v7 = "invalid tag";
LABEL_27:
    int v20 = (unsigned char *)a2;
    v21[0] = v7;
    __int16 v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v21, (uint64_t *)&v20);
    return;
  }
  uint64_t v4 = a2 - 16;
  unint64_t v5 = *(void *)(a2 - 16);
  if ((v5 & 2) != 0) {
    uint64_t v6 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v6 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  unint64_t v8 = *(unsigned char **)(v6 + 24);
  int v20 = v8;
  if (!v8) {
    goto LABEL_24;
  }
  if (*v8 != 4)
  {
    v21[0] = "invalid composite elements";
    __int16 v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v21);
    if (*this)
    {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v8);
    }
    return;
  }
  if ((v5 & 2) != 0) {
    uint64_t v9 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v9 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  uint64_t v10 = *(void *)(v9 + 24);
  unint64_t v11 = *(void *)(v10 - 16);
  if ((v11 & 2) == 0)
  {
    int v12 = (unsigned __int8 **)(v10 - 16 - 8 * ((v11 >> 2) & 0xF));
    uint64_t v13 = (v11 >> 6) & 0xF;
    if (!v13) {
      goto LABEL_24;
    }
LABEL_17:
    uint64_t v14 = 8 * v13;
    while (1)
    {
      int v15 = *v12;
      int v19 = v15;
      if (v15)
      {
        int v16 = *v15;
        if ((v16 - 11) >= 4 && v16 != 34) {
          break;
        }
      }
      ++v12;
      v14 -= 8;
      if (!v14) {
        goto LABEL_24;
      }
    }
    v21[0] = "invalid subroutine type ref";
    __int16 v22 = 259;
    uint64_t v18 = a2;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v21, &v18, (uint64_t *)&v20, (uint64_t *)&v19);
    return;
  }
  int v12 = *(unsigned __int8 ***)(v10 - 32);
  uint64_t v13 = *(unsigned int *)(v10 - 24);
  if (v13) {
    goto LABEL_17;
  }
LABEL_24:
  int v17 = *(_DWORD *)(a2 + 20);
  if ((~v17 & 0x6000) == 0 || (v17 & 0xC00000) == 0xC00000)
  {
    unint64_t v7 = "invalid reference flags";
    goto LABEL_27;
  }
}

void anonymous namespace'::Verifier::visitDIFile(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 41)
  {
    uint64_t v6 = "invalid tag";
LABEL_16:
    uint64_t v11 = a2;
    int v12 = v6;
    __int16 v13 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v12, &v11);
    return;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    return;
  }
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2 >= 4)
  {
    uint64_t v6 = "invalid checksum kind";
    goto LABEL_16;
  }
  BOOL v3 = *(uint64_t **)(*(void *)(a2 + 24) + 8);
  unsigned int v4 = v2 - 1;
  if (v4 > 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = qword_261EA7240[v4];
  }
  uint64_t v9 = *v3;
  unint64_t v7 = v3 + 3;
  uint64_t v8 = v9;
  if (v9 != v5)
  {
    uint64_t v6 = "invalid checksum length";
    goto LABEL_16;
  }
  if (v8)
  {
    uint64_t v10 = 0;
    while (llvm::hexDigitValue(char)::LUT[*((unsigned __int8 *)v7 + v10)] != -1)
    {
      if (v8 == ++v10) {
        return;
      }
    }
    if (v10 != -1)
    {
      uint64_t v6 = "invalid checksum";
      goto LABEL_16;
    }
  }
}

void anonymous namespace'::Verifier::visitDICompileUnit(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  if ((a2[1] & 0x7F) != 1)
  {
    uint64_t v8 = "compile units must be distinct";
LABEL_8:
    char v74 = a2;
    v75[0] = v8;
    __int16 v76 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v75, (uint64_t *)&v74);
    return;
  }
  if (*((_WORD *)a2 + 1) != 17)
  {
    uint64_t v8 = "invalid tag";
    goto LABEL_8;
  }
  int v4 = *a2;
  uint64_t v5 = a2;
  if (v4 != 15)
  {
    unint64_t v6 = *((void *)a2 - 2);
    unint64_t v7 = (v6 & 2) != 0 ? (unsigned __int8 *)*((void *)a2 - 4) : &a2[-8 * ((v6 >> 2) & 0xF) - 16];
    uint64_t v5 = *(unsigned char **)v7;
    if (!v5 || *v5 != 15)
    {
      char v74 = a2;
      v75[0] = "invalid file";
      __int16 v76 = 259;
      char v73 = v5;
      uint64_t v11 = (uint64_t *)&v74;
LABEL_16:
      int v12 = (uint64_t *)&v73;
LABEL_17:
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v75, v11, v12);
      return;
    }
  }
  unint64_t v9 = *((void *)v5 - 2);
  if ((v9 & 2) != 0) {
    uint64_t v10 = (uint64_t *)*((void *)v5 - 4);
  }
  else {
    uint64_t v10 = (uint64_t *)&v5[-8 * ((v9 >> 2) & 0xF) - 16];
  }
  uint64_t v13 = *v10;
  if (!v13 || !**(void **)(v13 + 8))
  {
    v75[0] = "invalid filename";
    __int16 v76 = 259;
    uint64_t v17 = (uint64_t)a2;
    if (v4 != 15)
    {
      unint64_t v18 = *((void *)a2 - 2);
      if ((v18 & 2) != 0) {
        int v19 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        int v19 = (uint64_t *)&a2[-8 * ((v18 >> 2) & 0xF) - 16];
      }
      uint64_t v17 = *v19;
    }
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v75);
    if (*this)
    {
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
      llvm::VerifierSupport::Write((uint64_t)this, v17);
    }
    return;
  }
  *((_DWORD *)this + 201) = *((_DWORD *)a2 + 4);
  uint64_t v14 = a2;
  if (v4 != 15)
  {
    unint64_t v15 = *((void *)a2 - 2);
    if ((v15 & 2) != 0) {
      int v16 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      int v16 = &a2[-8 * ((v15 >> 2) & 0xF) - 16];
    }
    uint64_t v14 = *(unsigned __int8 **)v16;
  }
  if (*((_DWORD *)a2 + 7) >= 4u)
  {
    uint64_t v8 = "invalid emission kind";
    goto LABEL_8;
  }
  int v20 = a2 - 16;
  unint64_t v21 = *((void *)a2 - 2);
  if ((v21 & 2) != 0) {
    __int16 v22 = (unsigned __int8 *)*((void *)a2 - 4);
  }
  else {
    __int16 v22 = &v20[-8 * ((v21 >> 2) & 0xF)];
  }
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  char v74 = v23;
  if (!v23) {
    goto LABEL_53;
  }
  if (*v23 != 4)
  {
    uint64_t v25 = "invalid enum list";
    goto LABEL_122;
  }
  uint64_t v24 = (v21 & 2) != 0 ? (unsigned __int8 *)*((void *)a2 - 4) : &v20[-8 * ((v21 >> 2) & 0xF)];
  uint64_t v26 = *((void *)v24 + 4);
  unint64_t v27 = *(void *)(v26 - 16);
  if ((v27 & 2) != 0)
  {
    BOOL v28 = *(uint64_t **)(v26 - 32);
    uint64_t v29 = *(unsigned int *)(v26 - 24);
  }
  else
  {
    BOOL v28 = (uint64_t *)(v26 - 16 - 8 * ((v27 >> 2) & 0xF));
    uint64_t v29 = (v27 >> 6) & 0xF;
  }
  if (!v29)
  {
LABEL_53:
    if ((v21 & 2) != 0) {
      uint64_t v32 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      uint64_t v32 = &v20[-8 * ((v21 >> 2) & 0xF)];
    }
    unint64_t v33 = (unsigned char *)*((void *)v32 + 5);
    char v74 = v33;
    if (v33)
    {
      if (*v33 != 4)
      {
        uint64_t v25 = "invalid retained type list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0) {
        uint64_t v34 = (unsigned __int8 *)*((void *)a2 - 4);
      }
      else {
        uint64_t v34 = &v20[-8 * ((v21 >> 2) & 0xF)];
      }
      uint64_t v36 = *((void *)v34 + 5);
      unint64_t v37 = *(void *)(v36 - 16);
      if ((v37 & 2) != 0)
      {
        uint64_t v38 = *(unsigned __int8 ***)(v36 - 32);
        uint64_t v39 = *(unsigned int *)(v36 - 24);
      }
      else
      {
        uint64_t v38 = (unsigned __int8 **)(v36 - 16 - 8 * ((v37 >> 2) & 0xF));
        uint64_t v39 = (v37 >> 6) & 0xF;
      }
      if (v39)
      {
        uint64_t v40 = 8 * v39;
        while (1)
        {
          uint64_t v41 = *v38;
          char v73 = v41;
          if (!v41) {
            break;
          }
          int v42 = *v41;
          if ((v42 - 11) >= 4 && v42 != 34 && (v42 != 17 || (v41[36] & 8) != 0)) {
            break;
          }
          ++v38;
          v40 -= 8;
          if (!v40) {
            goto LABEL_77;
          }
        }
        char v43 = "invalid retained type";
        goto LABEL_135;
      }
    }
LABEL_77:
    if ((v21 & 2) != 0) {
      uint64_t v44 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      uint64_t v44 = &v20[-8 * ((v21 >> 2) & 0xF)];
    }
    std::string v45 = (unsigned char *)*((void *)v44 + 6);
    char v74 = v45;
    if (v45)
    {
      if (*v45 != 4)
      {
        uint64_t v25 = "invalid global variable list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0) {
        uint64_t v46 = (unsigned __int8 *)*((void *)a2 - 4);
      }
      else {
        uint64_t v46 = &v20[-8 * ((v21 >> 2) & 0xF)];
      }
      uint64_t v47 = *((void *)v46 + 6);
      unint64_t v48 = *(void *)(v47 - 16);
      if ((v48 & 2) != 0)
      {
        uint64_t v49 = *(unsigned char ***)(v47 - 32);
        uint64_t v50 = *(unsigned int *)(v47 - 24);
      }
      else
      {
        uint64_t v49 = (unsigned char **)(v47 - 16 - 8 * ((v48 >> 2) & 0xF));
        uint64_t v50 = (v48 >> 6) & 0xF;
      }
      if (v50)
      {
        uint64_t v51 = 8 * v50;
        while (1)
        {
          std::string v52 = *v49;
          char v73 = v52;
          if (!v52 || *v52 != 7) {
            break;
          }
          ++v49;
          v51 -= 8;
          if (!v51) {
            goto LABEL_96;
          }
        }
        char v43 = "invalid global variable ref";
        goto LABEL_135;
      }
    }
LABEL_96:
    if ((v21 & 2) != 0) {
      BOOL v53 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      BOOL v53 = &v20[-8 * ((v21 >> 2) & 0xF)];
    }
    std::string::size_type v54 = (unsigned char *)*((void *)v53 + 7);
    char v74 = v54;
    if (v54)
    {
      if (*v54 != 4)
      {
        uint64_t v25 = "invalid imported entity list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0) {
        uint64_t v55 = (unsigned __int8 *)*((void *)a2 - 4);
      }
      else {
        uint64_t v55 = &v20[-8 * ((v21 >> 2) & 0xF)];
      }
      uint64_t v56 = *((void *)v55 + 7);
      unint64_t v57 = *(void *)(v56 - 16);
      if ((v57 & 2) != 0)
      {
        uint64_t v58 = *(unsigned char ***)(v56 - 32);
        uint64_t v59 = *(unsigned int *)(v56 - 24);
      }
      else
      {
        uint64_t v58 = (unsigned char **)(v56 - 16 - 8 * ((v57 >> 2) & 0xF));
        uint64_t v59 = (v57 >> 6) & 0xF;
      }
      if (v59)
      {
        uint64_t v60 = 8 * v59;
        while (1)
        {
          std::string::size_type v61 = *v58;
          char v73 = v61;
          if (!v61 || *v61 != 28) {
            break;
          }
          ++v58;
          v60 -= 8;
          if (!v60) {
            goto LABEL_114;
          }
        }
        char v43 = "invalid imported entity ref";
        goto LABEL_135;
      }
    }
LABEL_114:
    if ((v21 & 2) != 0) {
      std::string v62 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      std::string v62 = &v20[-8 * ((v21 >> 2) & 0xF)];
    }
    std::string v63 = (unsigned char *)*((void *)v62 + 8);
    char v74 = v63;
    if (!v63) {
      goto LABEL_133;
    }
    if (*v63 == 4)
    {
      if ((v21 & 2) != 0) {
        uint64_t v64 = (unsigned __int8 *)*((void *)a2 - 4);
      }
      else {
        uint64_t v64 = &v20[-8 * ((v21 >> 2) & 0xF)];
      }
      uint64_t v65 = *((void *)v64 + 8);
      unint64_t v66 = *(void *)(v65 - 16);
      if ((v66 & 2) != 0)
      {
        uint64_t v67 = *(unsigned char ***)(v65 - 32);
        uint64_t v68 = *(unsigned int *)(v65 - 24);
      }
      else
      {
        uint64_t v67 = (unsigned char **)(v65 - 16 - 8 * ((v66 >> 2) & 0xF));
        uint64_t v68 = (v66 >> 6) & 0xF;
      }
      if (v68)
      {
        uint64_t v69 = 8 * v68;
        while (1)
        {
          uint64_t v70 = *v67;
          char v73 = v70;
          if (!v70 || (*v70 & 0xFE) != 0x1E) {
            break;
          }
          ++v67;
          v69 -= 8;
          if (!v69) {
            goto LABEL_133;
          }
        }
        char v43 = "invalid macro ref";
LABEL_135:
        v75[0] = v43;
        __int16 v76 = 259;
        uint64_t v72 = a2;
        uint64_t v11 = (uint64_t *)&v72;
        goto LABEL_16;
      }
LABEL_133:
      llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(this + 93), a2, (uint64_t)v75);
      return;
    }
    uint64_t v25 = "invalid macro list";
LABEL_122:
    v75[0] = v25;
    __int16 v76 = 259;
    char v73 = a2;
    uint64_t v11 = (uint64_t *)&v73;
    int v12 = (uint64_t *)&v74;
    goto LABEL_17;
  }
  uint64_t v30 = 8 * v29;
  while (1)
  {
    uint64_t v31 = *v28;
    char v73 = (unsigned char *)v31;
    if (!v31 || *(unsigned char *)v31 != 13 || *(_WORD *)(v31 + 2) != 4) {
      break;
    }
    ++v28;
    v30 -= 8;
    if (!v30) {
      goto LABEL_53;
    }
  }
  v75[0] = "invalid enum type";
  __int16 v76 = 259;
  uint64_t v72 = a2;
  if ((v21 & 2) != 0) {
    uint64_t v35 = (unsigned __int8 *)*((void *)a2 - 4);
  }
  else {
    uint64_t v35 = &v20[-8 * ((v21 >> 2) & 0xF)];
  }
  uint64_t v71 = *((void *)v35 + 4);
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v75, (uint64_t *)&v72, &v71, (uint64_t *)&v73);
}

void anonymous namespace'::Verifier::visitDISubprogram(llvm::raw_ostream **this, const llvm::DISubprogram *a2)
{
  if (*((_WORD *)a2 + 1) != 46)
  {
    unint64_t v7 = "invalid tag";
LABEL_5:
    std::string::size_type v61 = a2;
    v62[0] = v7;
    __int16 v63 = 259;
    uint64_t v8 = &v61;
LABEL_6:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v62, (uint64_t *)v8);
    return;
  }
  uint64_t v5 = (char *)a2 - 16;
  unint64_t v4 = *((void *)a2 - 2);
  if ((v4 & 2) != 0) {
    unint64_t v6 = (char *)*((void *)a2 - 4);
  }
  else {
    unint64_t v6 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
  if (v9)
  {
    int v10 = *v9;
    if ((v10 - 11) >= 0xB && v10 != 32 && v10 != 34)
    {
      std::string::size_type v61 = a2;
      v62[0] = "invalid scope";
      __int16 v63 = 259;
      if ((v4 & 2) != 0) {
        unint64_t v21 = (char *)*((void *)a2 - 4);
      }
      else {
        unint64_t v21 = &v5[-8 * ((v4 >> 2) & 0xF)];
      }
      uint64_t v44 = (const llvm::DISubprogram *)*((void *)v21 + 1);
      goto LABEL_102;
    }
  }
  if (*(unsigned char *)a2 != 15)
  {
    if ((v4 & 2) != 0) {
      uint64_t v11 = (const llvm::DISubprogram **)*((void *)a2 - 4);
    }
    else {
      uint64_t v11 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
    }
    int v12 = *v11;
    std::string::size_type v61 = v12;
    if (v12)
    {
      if (*(unsigned char *)v12 != 15)
      {
        uint64_t v13 = "invalid file";
LABEL_54:
        v62[0] = v13;
        __int16 v63 = 259;
        uint64_t v60 = a2;
        uint64_t v26 = &v60;
LABEL_55:
        unint64_t v27 = &v61;
LABEL_56:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v62, (uint64_t *)v26, (uint64_t *)v27);
        return;
      }
    }
    else
    {
      unsigned int v14 = *((_DWORD *)a2 + 4);
      if (v14)
      {
        v62[0] = "line specified with no file";
        __int16 v63 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v62);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
          llvm::VerifierSupport::Write(*this, v14);
        }
        return;
      }
    }
  }
  if ((v4 & 2) != 0) {
    unint64_t v15 = (char *)*((void *)a2 - 4);
  }
  else {
    unint64_t v15 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  int v16 = (const llvm::DISubprogram *)*((void *)v15 + 4);
  std::string::size_type v61 = v16;
  if (v16 && *(unsigned char *)v16 != 14)
  {
    uint64_t v13 = "invalid subroutine type";
    goto LABEL_54;
  }
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) < 9u) {
      goto LABEL_45;
    }
    uint64_t v17 = (char *)*((void *)a2 - 4);
  }
  else
  {
    if ((v4 & 0x3C0) <= 0x200)
    {
LABEL_34:
      if ((v4 & 0x380) <= 0x240) {
        goto LABEL_45;
      }
      int v20 = &v5[-8 * ((v4 >> 2) & 0xF)];
      goto LABEL_43;
    }
    uint64_t v17 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  unint64_t v18 = (unsigned __int8 *)*((void *)v17 + 8);
  if (v18)
  {
    int v19 = *v18;
    if ((v19 - 11) >= 4 && v19 != 34)
    {
      std::string::size_type v61 = a2;
      v62[0] = "invalid containing type";
      __int16 v63 = 259;
      if ((v4 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 9u)
        {
          char v43 = (char *)*((void *)a2 - 4);
          goto LABEL_100;
        }
      }
      else if ((v4 & 0x3C0) > 0x200)
      {
        char v43 = &v5[-8 * ((v4 >> 2) & 0xF)];
LABEL_100:
        uint64_t v44 = (const llvm::DISubprogram *)*((void *)v43 + 8);
LABEL_102:
        uint64_t v60 = v44;
        uint64_t v26 = &v61;
LABEL_103:
        unint64_t v27 = &v60;
        goto LABEL_56;
      }
      uint64_t v44 = 0;
      goto LABEL_102;
    }
  }
  if ((v4 & 2) == 0) {
    goto LABEL_34;
  }
  if (*((_DWORD *)a2 - 6) < 0xAu) {
    goto LABEL_45;
  }
  int v20 = (char *)*((void *)a2 - 4);
LABEL_43:
  __int16 v22 = (unsigned __int8 *)*((void *)v20 + 9);
  if (v22)
  {
    unint64_t v4 = *((void *)a2 - 2);
  }
LABEL_45:
  if ((v4 & 2) != 0) {
    uint64_t v23 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v23 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  uint64_t v24 = (const llvm::DISubprogram *)*((void *)v23 + 6);
  std::string::size_type v61 = v24;
  if (v24 && (*(unsigned char *)v24 != 17 || (*((unsigned char *)v24 + 36) & 8) != 0))
  {
    uint64_t v13 = "invalid subprogram declaration";
    goto LABEL_54;
  }
  if ((v4 & 2) != 0) {
    uint64_t v25 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v25 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  BOOL v28 = (const llvm::DISubprogram *)*((void *)v25 + 7);
  std::string::size_type v61 = v28;
  if (v28)
  {
    if (*(unsigned char *)v28 == 4) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v60 = v29;
    if (!v29)
    {
      v62[0] = "invalid retained nodes list";
      __int16 v63 = 259;
      uint64_t v59 = a2;
      uint64_t v26 = &v59;
      goto LABEL_55;
    }
    unint64_t v30 = *((void *)v29 - 2);
    if ((v30 & 2) != 0)
    {
      uint64_t v31 = (const llvm::DISubprogram **)*((void *)v29 - 4);
      uint64_t v32 = *((unsigned int *)v29 - 6);
    }
    else
    {
      uint64_t v31 = (const llvm::DISubprogram **)((char *)v29 - 8 * ((v30 >> 2) & 0xF) - 16);
      uint64_t v32 = (v30 >> 6) & 0xF;
    }
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (1)
      {
        uint64_t v59 = 0;
        uint64_t v34 = *v31;
        uint64_t v59 = v34;
        if (!v34 || *(unsigned __int8 *)v34 - 25 >= 2) {
          break;
        }
        ++v31;
        v33 -= 8;
        if (!v33) {
          goto LABEL_73;
        }
      }
      v62[0] = "invalid retained nodes, expected DILocalVariable or DILabel";
      __int16 v63 = 259;
      uint64_t v58 = a2;
      unint64_t v37 = &v58;
      uint64_t v38 = &v60;
      uint64_t v39 = &v59;
      goto LABEL_79;
    }
  }
LABEL_73:
  int v35 = *((_DWORD *)a2 + 8);
  if ((~v35 & 0x6000) == 0 || (v35 & 0xC00000) == 0xC00000)
  {
    unint64_t v7 = "invalid reference flags";
    goto LABEL_5;
  }
  if ((v4 & 2) != 0) {
    uint64_t v36 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v36 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  uint64_t v40 = (const llvm::DISubprogram *)*((void *)v36 + 5);
  std::string::size_type v61 = v40;
  if ((*((unsigned char *)a2 + 36) & 8) != 0)
  {
    if ((*((unsigned char *)a2 + 1) & 0x7F) != 1)
    {
      uint64_t v41 = "subprogram definitions must be distinct";
      goto LABEL_105;
    }
    if (!v40)
    {
      uint64_t v41 = "subprogram definitions must have a compile unit";
      goto LABEL_105;
    }
    if (*(unsigned char *)v40 != 16)
    {
      uint64_t v13 = "invalid unit type";
      goto LABEL_54;
    }
    if (*(unsigned char *)a2 == 15)
    {
      if ((v4 & 2) != 0) {
        int v42 = (const llvm::DISubprogram **)*((void *)a2 - 4);
      }
      else {
        int v42 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
      }
      uint64_t v47 = a2;
    }
    else
    {
      if ((v4 & 2) != 0) {
        int v42 = (const llvm::DISubprogram **)*((void *)a2 - 4);
      }
      else {
        int v42 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
      }
      uint64_t v47 = *v42;
      if (!*v42) {
        goto LABEL_117;
      }
    }
    unint64_t v4 = *((void *)a2 - 2);
    goto LABEL_117;
  }
  if (v40)
  {
    uint64_t v41 = "subprogram declarations must not have a compile unit";
LABEL_105:
    v62[0] = v41;
    __int16 v63 = 259;
    uint64_t v60 = a2;
    uint64_t v8 = &v60;
    goto LABEL_6;
  }
  if ((v4 & 2) != 0) {
    std::string v45 = (char *)*((void *)a2 - 4);
  }
  else {
    std::string v45 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  if (*((void *)v45 + 6))
  {
    uint64_t v46 = "subprogram declaration must not have a declaration field";
LABEL_142:
    v62[0] = v46;
    __int16 v63 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v62);
    return;
  }
LABEL_117:
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) < 0xBu) {
      goto LABEL_139;
    }
    unint64_t v48 = (char *)*((void *)a2 - 4);
  }
  else
  {
    if ((v4 & 0x3C0) <= 0x280) {
      goto LABEL_139;
    }
    unint64_t v48 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  uint64_t v49 = (const llvm::DISubprogram *)*((void *)v48 + 10);
  uint64_t v60 = v49;
  if (v49)
  {
    if (*(unsigned char *)v49 == 4) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v59 = v50;
    if (!v50)
    {
      v62[0] = "invalid thrown types list";
      __int16 v63 = 259;
      uint64_t v58 = a2;
      uint64_t v26 = &v58;
      goto LABEL_103;
    }
    unint64_t v51 = *((void *)v50 - 2);
    if ((v51 & 2) != 0)
    {
      std::string v52 = (const llvm::DISubprogram **)*((void *)v50 - 4);
      uint64_t v53 = *((unsigned int *)v50 - 6);
    }
    else
    {
      std::string v52 = (const llvm::DISubprogram **)((char *)v50 - 8 * ((v51 >> 2) & 0xF) - 16);
      uint64_t v53 = (v51 >> 6) & 0xF;
    }
    if (v53)
    {
      uint64_t v54 = 8 * v53;
      while (1)
      {
        uint64_t v58 = 0;
        uint64_t v55 = *v52;
        uint64_t v58 = v55;
        if (!v55) {
          break;
        }
        int v56 = *(unsigned __int8 *)v55;
        if ((v56 - 11) >= 4 && v56 != 34) {
          break;
        }
        ++v52;
        v54 -= 8;
        if (!v54) {
          goto LABEL_139;
        }
      }
      v62[0] = "invalid thrown type";
      __int16 v63 = 259;
      unint64_t v57 = a2;
      unint64_t v37 = &v57;
      uint64_t v38 = &v59;
      uint64_t v39 = &v58;
LABEL_79:
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v62, (uint64_t *)v37, (uint64_t *)v38, (uint64_t *)v39);
      return;
    }
  }
LABEL_139:
  if ((*((unsigned char *)a2 + 35) & 0x20) != 0 && (*((unsigned char *)a2 + 36) & 8) == 0)
  {
    uint64_t v46 = "DIFlagAllCallsDescribed must be attached to a definition";
    goto LABEL_142;
  }
}

void anonymous namespace'::Verifier::visitDILexicalBlock(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(unsigned __int16 *)(a2 + 20) == 0;
  }
  if (!v4)
  {
    uint64_t v5 = "cannot have column info without line info";
    __int16 v6 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v5);
    if (*a1) {
      llvm::VerifierSupport::Write((uint64_t)a1, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDINamespace(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) == 57)
  {
    unint64_t v4 = *(void *)(a2 - 16);
    if ((v4 & 2) != 0) {
      uint64_t v5 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v5 = a2 - 16 - 8 * ((v4 >> 2) & 0xF);
    }
    uint64_t v8 = *(unsigned __int8 **)(v5 + 8);
    if (v8)
    {
      int v9 = *v8;
      if ((v9 - 11) >= 0xB && v9 != 32 && v9 != 34)
      {
        v10[0] = "invalid scope ref";
        __int16 v11 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v10);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t)this, a2);
          __int16 v6 = (llvm::VerifierSupport *)this;
          uint64_t v7 = (uint64_t)v8;
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    v10[0] = "invalid tag";
    __int16 v11 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v10);
    if (*this)
    {
      __int16 v6 = (llvm::VerifierSupport *)this;
      uint64_t v7 = a2;
LABEL_6:
      llvm::VerifierSupport::Write((uint64_t)v6, v7);
    }
  }
}

void anonymous namespace'::Verifier::visitDIModule(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 30)
  {
    unint64_t v4 = "invalid tag";
LABEL_9:
    uint64_t v6 = a2;
    uint64_t v7 = v4;
    __int16 v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v7, &v6);
    return;
  }
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5 || !**(void **)(v5 + 8))
  {
    unint64_t v4 = "anonymous module";
    goto LABEL_9;
  }
}

void anonymous namespace'::Verifier::visitDITemplateTypeParameter(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 47)
  {
    unint64_t v4 = "invalid tag";
    __int16 v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v4);
    if (*a1) {
      llvm::VerifierSupport::Write((uint64_t)a1, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDITemplateValueParameter(llvm::raw_ostream **a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 2);
  if ((v4 - 16646) >= 2 && v4 != 48)
  {
    __int16 v5 = "invalid tag";
    __int16 v6 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v5);
    if (*a1) {
      llvm::VerifierSupport::Write((uint64_t)a1, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIGlobalVariable(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 52)
  {
    uint64_t v7 = "invalid tag";
LABEL_5:
    uint64_t v17 = (unsigned char *)a2;
    v18[0] = v7;
    __int16 v19 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v18, (uint64_t *)&v17);
    return;
  }
  uint64_t v4 = a2 - 16;
  unint64_t v5 = *(void *)(a2 - 16);
  if ((v5 & 2) != 0) {
    uint64_t v6 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v6 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  __int16 v8 = *(unsigned __int8 **)(v6 + 24);
  if (v8)
  {
    int v9 = *v8;
    if ((v9 - 11) >= 4 && v9 != 34)
    {
      uint64_t v17 = (unsigned char *)a2;
      v18[0] = "invalid type ref";
      __int16 v19 = 259;
      if ((v5 & 2) != 0) {
        uint64_t v15 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v15 = v4 - 8 * ((v5 >> 2) & 0xF);
      }
      uint64_t v16 = *(void *)(v15 + 24);
      uint64_t v13 = (uint64_t *)&v17;
      unsigned int v14 = &v16;
      goto LABEL_26;
    }
  }
  if (*(unsigned char *)(a2 + 25))
  {
    uint64_t v10 = (v5 & 2) != 0 ? *(void *)(a2 - 32) : v4 - 8 * ((v5 >> 2) & 0xF);
    if (!*(void *)(v10 + 24))
    {
      uint64_t v7 = "missing global variable type";
      goto LABEL_5;
    }
  }
  if ((v5 & 2) != 0) {
    uint64_t v11 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v11 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  int v12 = *(unsigned char **)(v11 + 48);
  uint64_t v17 = v12;
  if (v12 && *v12 != 12)
  {
    v18[0] = "invalid static data member declaration";
    __int16 v19 = 259;
    uint64_t v16 = a2;
    uint64_t v13 = &v16;
    unsigned int v14 = (uint64_t *)&v17;
LABEL_26:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v18, v13, v14);
  }
}

void anonymous namespace'::Verifier::visitDILocalVariable(llvm::raw_ostream **a1, const llvm::DIVariable *a2)
{
  uint64_t v4 = (_WORD *)((char *)a2 - 16);
  unint64_t v5 = *((void *)a2 - 2);
  if ((v5 & 2) != 0) {
    uint64_t v6 = (_WORD *)*((void *)a2 - 4);
  }
  else {
    uint64_t v6 = &v4[-4 * ((v5 >> 2) & 0xF)];
  }
  uint64_t v7 = (unsigned __int8 *)*((void *)v6 + 3);
  if (v7)
  {
    int v8 = *v7;
    if ((v8 - 11) >= 4 && v8 != 34)
    {
      unint64_t v18 = a2;
      v19[0] = "invalid type ref";
      __int16 v20 = 259;
      if ((v5 & 2) != 0) {
        uint64_t v15 = (_WORD *)*((void *)a2 - 4);
      }
      else {
        uint64_t v15 = &v4[-4 * ((v5 >> 2) & 0xF)];
      }
      uint64_t v17 = (unsigned __int8 *)*((void *)v15 + 3);
      goto LABEL_26;
    }
  }
  if (*((_WORD *)a2 + 1) == 52)
  {
    if ((v5 & 2) != 0)
    {
      int v9 = (unsigned __int8 **)*((void *)a2 - 4);
      uint64_t v10 = *v9;
      if (*v9 && *v10 - 20 > 0xFFFFFFFC) {
        goto LABEL_18;
      }
    }
    else
    {
      int v9 = (unsigned __int8 **)&v4[-4 * ((v5 >> 2) & 0xF)];
      uint64_t v10 = *v9;
      if (*v9 && *v10 - 20 >= 0xFFFFFFFD)
      {
LABEL_18:
        uint64_t v13 = v9[3];
        if (v13 && *v13 == 14)
        {
          v19[0] = "invalid type";
          __int16 v20 = 259;
          unsigned int v14 = (v5 & 2) != 0 ? (_WORD *)*((void *)a2 - 4) : &v4[-4 * ((v5 >> 2) & 0xF)];
          uint64_t v16 = *((void *)v14 + 3);
          llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v19);
          if (*a1)
          {
            llvm::VerifierSupport::Write((uint64_t)a1, (uint64_t)a2);
            uint64_t v11 = (uint64_t)a1;
            uint64_t v12 = v16;
            goto LABEL_14;
          }
        }
        return;
      }
    }
    unint64_t v18 = a2;
    v19[0] = "local variable requires a valid scope";
    __int16 v20 = 259;
    uint64_t v17 = v10;
LABEL_26:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v19, (uint64_t *)&v18, (uint64_t *)&v17);
    return;
  }
  v19[0] = "invalid tag";
  __int16 v20 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v19);
  if (*a1)
  {
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = (uint64_t)a2;
LABEL_14:
    llvm::VerifierSupport::Write(v11, v12);
  }
}

void anonymous namespace'::Verifier::visitDILabel(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4 = a2 - 16;
  unint64_t v5 = *(void *)(a2 - 16);
  if ((v5 & 2) != 0) {
    uint64_t v6 = *(unsigned __int8 ***)(a2 - 32);
  }
  else {
    uint64_t v6 = (unsigned __int8 **)(v4 - 8 * ((v5 >> 2) & 0xF));
  }
  uint64_t v7 = *v6;
  unint64_t v21 = v7;
  if (v7)
  {
    int v8 = *v7;
    if ((v8 - 11) >= 0xB && v8 != 32 && v8 != 34)
    {
      unsigned int v14 = "invalid scope";
      goto LABEL_18;
    }
  }
  if ((v5 & 2) != 0) {
    uint64_t v9 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v9 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  uint64_t v10 = *(unsigned char **)(v9 + 16);
  unint64_t v21 = v10;
  if (v10 && *v10 != 15)
  {
    unsigned int v14 = "invalid file";
LABEL_18:
    uint64_t v18 = a2;
    v19[0] = v14;
    __int16 v20 = 259;
    uint64_t v15 = &v18;
    uint64_t v16 = (uint64_t *)&v21;
LABEL_30:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v19, v15, v16);
    return;
  }
  if (*(_WORD *)(a2 + 2) == 10)
  {
    if ((v5 & 2) != 0)
    {
      uint64_t v17 = *(uint64_t **)(a2 - 32);
      uint64_t v12 = (unsigned __int8 *)*v17;
      if (!*v17)
      {
        v19[0] = "label requires a valid scope";
        __int16 v20 = 259;
        unint64_t v21 = (unsigned char *)a2;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v11 = (v5 >> 2) & 0xF;
      uint64_t v12 = *(unsigned __int8 **)(v4 - 8 * v11);
      if (!v12)
      {
        uint64_t v13 = -v11;
        v19[0] = "label requires a valid scope";
        __int16 v20 = 259;
        unint64_t v21 = (unsigned char *)a2;
LABEL_23:
        uint64_t v17 = (uint64_t *)(v4 + 8 * v13);
LABEL_29:
        uint64_t v18 = *v17;
        uint64_t v15 = (uint64_t *)&v21;
        uint64_t v16 = &v18;
        goto LABEL_30;
      }
    }
    if (*v12 - 20 > 0xFFFFFFFC) {
      return;
    }
    v19[0] = "label requires a valid scope";
    __int16 v20 = 259;
    unint64_t v21 = (unsigned char *)a2;
    if ((v5 & 2) != 0)
    {
      uint64_t v17 = *(uint64_t **)(a2 - 32);
      goto LABEL_29;
    }
    uint64_t v13 = -(uint64_t)((v5 >> 2) & 0xF);
    goto LABEL_23;
  }
  v19[0] = "invalid tag";
  __int16 v20 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v19);
  if (*this) {
    llvm::VerifierSupport::Write((uint64_t)this, a2);
  }
}

void anonymous namespace'::Verifier::visitDIObjCProperty(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) == 16896)
  {
    uint64_t v4 = a2 - 16;
    unint64_t v5 = *(void *)(a2 - 16);
    if ((v5 & 2) != 0) {
      uint64_t v6 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v6 = v4 - 8 * ((v5 >> 2) & 0xF);
    }
    uint64_t v7 = *(unsigned __int8 **)(v6 + 32);
    uint64_t v13 = v7;
    if (v7)
    {
      int v8 = *v7;
      if ((v8 - 11) >= 4 && v8 != 34)
      {
        uint64_t v11 = "invalid type ref";
        goto LABEL_17;
      }
    }
    if ((v5 & 2) != 0) {
      uint64_t v9 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v9 = v4 - 8 * ((v5 >> 2) & 0xF);
    }
    uint64_t v10 = *(unsigned char **)(v9 + 8);
    uint64_t v13 = v10;
    if (v10 && *v10 != 15)
    {
      uint64_t v11 = "invalid file";
LABEL_17:
      v14[0] = v11;
      __int16 v15 = 259;
      uint64_t v12 = a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v12, (uint64_t *)&v13);
    }
  }
  else
  {
    v14[0] = "invalid tag";
    __int16 v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIImportedEntity(llvm::raw_ostream **this, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 == 8 || v4 == 58)
  {
    uint64_t v5 = a2 - 16;
    unint64_t v6 = *(void *)(a2 - 16);
    if ((v6 & 2) != 0) {
      uint64_t v7 = *(unsigned __int8 ***)(a2 - 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 **)(v5 - 8 * ((v6 >> 2) & 0xF));
    }
    int v8 = *v7;
    __int16 v20 = v8;
    if (v8)
    {
      int v9 = *v8;
      if ((v9 - 11) >= 0xB && v9 != 32 && v9 != 34)
      {
        v21[0] = "invalid scope for imported entity";
        __int16 v22 = 259;
        uint64_t v19 = a2;
        uint64_t v13 = &v19;
        unsigned int v14 = (uint64_t *)&v20;
LABEL_28:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v21, v13, v14);
        return;
      }
    }
    if ((v6 & 2) != 0) {
      uint64_t v10 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v10 = v5 - 8 * ((v6 >> 2) & 0xF);
    }
    uint64_t v11 = *(unsigned __int8 **)(v10 + 8);
    if (v11)
    {
      unsigned int v12 = *v11;
      if (v12 - 8 >= 0x16)
      {
        BOOL v15 = v12 > 0x23;
        uint64_t v16 = (1 << v12) & 0xD00000000;
        if (v15 || v16 == 0)
        {
          __int16 v20 = (unsigned __int8 *)a2;
          v21[0] = "invalid imported entity";
          __int16 v22 = 259;
          if ((v6 & 2) != 0) {
            uint64_t v18 = *(void *)(a2 - 32);
          }
          else {
            uint64_t v18 = v5 - 8 * ((v6 >> 2) & 0xF);
          }
          uint64_t v19 = *(void *)(v18 + 8);
          uint64_t v13 = (uint64_t *)&v20;
          unsigned int v14 = &v19;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v21[0] = "invalid tag";
    __int16 v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v21);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIAssignID(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24)) {
      goto LABEL_3;
    }
  }
  else if (((v2 >> 6) & 0xF) != 0)
  {
LABEL_3:
    uint64_t v3 = "DIAssignID has no arguments";
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a2 + 1) & 0x7F) == 1) {
    return;
  }
  uint64_t v3 = "DIAssignID must be distinct";
LABEL_7:
  uint64_t v4 = a2;
  uint64_t v5 = v3;
  __int16 v6 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v5, &v4);
}

void anonymous namespace'::Verifier::visitDIMacro(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 2) - 1 >= 2)
  {
    uint64_t v4 = "invalid macinfo type";
LABEL_9:
    uint64_t v6 = a2;
    uint64_t v7 = v4;
    __int16 v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v7, &v6);
    return;
  }
  unint64_t v2 = *(void *)(a2 - 16);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *(uint64_t **)(a2 - 32);
  }
  else {
    uint64_t v3 = (uint64_t *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  }
  uint64_t v5 = *v3;
  if (!v5 || !**(void **)(v5 + 8))
  {
    uint64_t v4 = "anonymous macro";
    goto LABEL_9;
  }
}

void anonymous namespace'::Verifier::visitDIMacroFile(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) == 3)
  {
    uint64_t v4 = a2 - 16;
    unint64_t v5 = *(void *)(a2 - 16);
    if ((v5 & 2) != 0) {
      uint64_t v6 = *(unsigned char ***)(a2 - 32);
    }
    else {
      uint64_t v6 = (unsigned char **)(v4 - 8 * ((v5 >> 2) & 0xF));
    }
    uint64_t v7 = *v6;
    __int16 v22 = v7;
    if (v7 && *v7 != 15)
    {
      uint64_t v11 = "invalid file";
      goto LABEL_18;
    }
    if ((v5 & 2) != 0) {
      uint64_t v8 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v8 = v4 - 8 * ((v5 >> 2) & 0xF);
    }
    int v9 = *(unsigned char **)(v8 + 8);
    __int16 v22 = v9;
    if (v9)
    {
      if (*v9 == 4)
      {
        if ((v5 & 2) != 0) {
          uint64_t v10 = *(void *)(a2 - 32);
        }
        else {
          uint64_t v10 = v4 - 8 * ((v5 >> 2) & 0xF);
        }
        uint64_t v14 = *(void *)(v10 + 8);
        unint64_t v15 = *(void *)(v14 - 16);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = *(unsigned char ***)(v14 - 32);
          uint64_t v17 = *(unsigned int *)(v14 - 24);
          if (!v17) {
            return;
          }
        }
        else
        {
          uint64_t v16 = (unsigned char **)(v14 - 16 - 8 * ((v15 >> 2) & 0xF));
          uint64_t v17 = (v15 >> 6) & 0xF;
          if (!v17) {
            return;
          }
        }
        uint64_t v18 = 8 * v17;
        while (1)
        {
          uint64_t v19 = *v16;
          unint64_t v21 = v19;
          if (!v19 || (*v19 & 0xFE) != 0x1E) {
            break;
          }
          ++v16;
          v18 -= 8;
          if (!v18) {
            return;
          }
        }
        v23[0] = "invalid macro ref";
        __int16 v24 = 259;
        uint64_t v20 = a2;
        unsigned int v12 = &v20;
        uint64_t v13 = (uint64_t *)&v21;
LABEL_19:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v23, v12, v13);
        return;
      }
      uint64_t v11 = "invalid macro list";
LABEL_18:
      v23[0] = v11;
      __int16 v24 = 259;
      unint64_t v21 = (unsigned char *)a2;
      unsigned int v12 = (uint64_t *)&v21;
      uint64_t v13 = (uint64_t *)&v22;
      goto LABEL_19;
    }
  }
  else
  {
    v23[0] = "invalid macinfo type";
    __int16 v24 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v23);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDICommonBlock(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) == 26)
  {
    uint64_t v4 = a2 - 16;
    unint64_t v5 = *(void *)(a2 - 16);
    if ((v5 & 2) != 0) {
      uint64_t v6 = *(unsigned __int8 ***)(a2 - 32);
    }
    else {
      uint64_t v6 = (unsigned __int8 **)(v4 - 8 * ((v5 >> 2) & 0xF));
    }
    uint64_t v7 = *v6;
    uint64_t v13 = v7;
    if (v7)
    {
      int v8 = *v7;
      if ((v8 - 11) >= 0xB && v8 != 32 && v8 != 34)
      {
        uint64_t v11 = "invalid scope ref";
        goto LABEL_15;
      }
    }
    if ((v5 & 2) != 0) {
      uint64_t v9 = *(void *)(a2 - 32);
    }
    else {
      uint64_t v9 = v4 - 8 * ((v5 >> 2) & 0xF);
    }
    uint64_t v10 = *(unsigned char **)(v9 + 8);
    uint64_t v13 = v10;
    if (v10 && *v10 != 24)
    {
      uint64_t v11 = "invalid declaration";
LABEL_15:
      v14[0] = v11;
      __int16 v15 = 259;
      uint64_t v12 = a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v12, (uint64_t *)&v13);
    }
  }
  else
  {
    v14[0] = "invalid tag";
    __int16 v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
    }
  }
}

void anonymous namespace'::Verifier::visitDIArgList(llvm::raw_ostream **this, const llvm::DIArgList *a2)
{
  uint64_t v4 = *((void *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    if (!*((_DWORD *)a2 - 6)) {
      return;
    }
  }
  else if (((v4 >> 6) & 0xF) == 0)
  {
    return;
  }
  unint64_t v5 = "DIArgList should have no operands other than a list of ValueAsMetadata";
  __int16 v6 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v5);
  if (*this) {
    llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
  }
}

void anonymous namespace'::Verifier::visitDIStringType(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) == 18)
  {
    if ((~*(_DWORD *)(a2 + 20) & 0x18000000) != 0) {
      return;
    }
    unint64_t v2 = "has conflicting flags";
  }
  else
  {
    unint64_t v2 = "invalid tag";
  }
  uint64_t v3 = a2;
  uint64_t v4 = v2;
  __int16 v5 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v4, &v3);
}

void anonymous namespace'::Verifier::visitDIGenericSubrange(llvm::raw_ostream **a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 69)
  {
    uint64_t v12 = "invalid tag";
LABEL_47:
    uint64_t v28 = a2;
    uint64_t v29 = v12;
    __int16 v30 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v29, &v28);
    return;
  }
  uint64_t v2 = a2 - 16;
  unint64_t v3 = *(void *)(a2 - 16);
  if ((v3 & 2) == 0)
  {
    uint64_t v4 = (unsigned __int8 **)(v2 - 8 * ((v3 >> 2) & 0xF));
    __int16 v5 = *v4;
    __int16 v6 = v4[2];
    if (v5)
    {
      if (!v6) {
        goto LABEL_5;
      }
LABEL_14:
      uint64_t v12 = "GenericSubrange can have any one of count or upperBound";
      goto LABEL_47;
    }
    if (v6)
    {
LABEL_16:
      uint64_t v11 = (unsigned __int8 **)(v2 - 8 * ((v3 >> 2) & 0xF));
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  uint64_t v11 = *(unsigned __int8 ***)(a2 - 32);
  __int16 v5 = *v11;
  uint64_t v13 = v11[2];
  if (*v11)
  {
    if (!v13)
    {
LABEL_5:
      unsigned int v7 = *v5;
      BOOL v8 = v7 > 0x19;
      int v9 = (1 << v7) & 0x3000040;
      if (v8 || v9 == 0)
      {
        uint64_t v12 = "Count must be signed constant or DIVariable or DIExpression";
        goto LABEL_47;
      }
      if ((v3 & 2) != 0)
      {
        uint64_t v11 = *(unsigned __int8 ***)(a2 - 32);
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (!v13)
  {
LABEL_26:
    uint64_t v12 = "GenericSubrange must contain count or upperBound";
    goto LABEL_47;
  }
LABEL_18:
  uint64_t v14 = v11[1];
  if (!v14)
  {
    uint64_t v12 = "GenericSubrange must contain lowerBound";
    goto LABEL_47;
  }
  unsigned int v15 = *v14;
  BOOL v8 = v15 > 0x19;
  int v16 = (1 << v15) & 0x3000040;
  if (v8 || v16 == 0)
  {
    uint64_t v12 = "LowerBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_47;
  }
  if ((v3 & 2) != 0) {
    uint64_t v18 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v18 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  uint64_t v19 = *(unsigned __int8 **)(v18 + 16);
  if (v19)
  {
    unsigned int v20 = *v19;
    BOOL v8 = v20 > 0x19;
    int v21 = (1 << v20) & 0x3000040;
    if (v8 || v21 == 0)
    {
      uint64_t v12 = "UpperBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_47;
    }
  }
  if ((v3 & 2) != 0) {
    uint64_t v23 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v23 = v2 - 8 * ((v3 >> 2) & 0xF);
  }
  __int16 v24 = *(unsigned __int8 **)(v23 + 24);
  if (!v24)
  {
    uint64_t v12 = "GenericSubrange must contain stride";
    goto LABEL_47;
  }
  unsigned int v25 = *v24;
  BOOL v8 = v25 > 0x19;
  int v26 = (1 << v25) & 0x3000040;
  if (v8 || v26 == 0)
  {
    uint64_t v12 = "Stride must be signed constant or DIVariable or DIExpression";
    goto LABEL_47;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3, uint64_t *a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t)a1, *a3);
    uint64_t v7 = *a4;
    llvm::VerifierSupport::Write((uint64_t)a1, v7);
  }
}

void anonymous namespace'::Verifier::visitValueAsMetadata(llvm::raw_ostream **this, const llvm::ValueAsMetadata *a2, llvm::Function *a3)
{
  __int16 v5 = (llvm::Type **)*((void *)a2 + 16);
  if (!v5)
  {
    v16[0] = "Expected valid value";
    __int16 v17 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v16);
    if (*this) {
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
    }
    return;
  }
  if (*((unsigned char *)*v5 + 8) == 9)
  {
    __int16 v6 = "Unexpected metadata round-trip through values";
    goto LABEL_4;
  }
  int v7 = *(unsigned __int8 *)a2;
  BOOL v8 = v7 == 2;
  if (v7 == 2) {
    int v9 = a2;
  }
  else {
    int v9 = 0;
  }
  unsigned int v15 = v9;
  if (v8)
  {
    if (!a3)
    {
      uint64_t v12 = "function-local metadata used outside a function";
LABEL_27:
      v16[0] = v12;
      __int16 v17 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v16, (uint64_t *)&v15);
      return;
    }
    unsigned int v10 = *((unsigned __int8 *)v5 + 16);
    if (v10 >= 0x1C)
    {
      uint64_t v13 = v5[5];
      if (!v13)
      {
        __int16 v6 = "function-local metadata not in basic block";
LABEL_4:
        v16[0] = v6;
        __int16 v17 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v16);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
          llvm::VerifierSupport::Write((uint64_t ***)this, v5);
        }
        return;
      }
      uint64_t v11 = (llvm::Function **)((char *)v13 + 56);
    }
    else if (v10 == 21)
    {
      uint64_t v11 = v5 + 3;
    }
    else
    {
      if (v10 != 22)
      {
        uint64_t v14 = 0;
        goto LABEL_25;
      }
      uint64_t v11 = v5 + 7;
    }
    uint64_t v14 = *v11;
LABEL_25:
    if (v14 == a3) {
      return;
    }
    uint64_t v12 = "function-local metadata used in wrong function";
    goto LABEL_27;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    uint64_t v5 = *a3;
    llvm::VerifierSupport::Write((uint64_t)a1, v5);
  }
}

void anonymous namespace'::Verifier::visitDIScope(llvm::raw_ostream **this, unsigned char *a2)
{
  if (*a2 != 15)
  {
    unint64_t v4 = *((void *)a2 - 2);
    if ((v4 & 2) != 0) {
      uint64_t v5 = (unsigned char **)*((void *)a2 - 4);
    }
    else {
      uint64_t v5 = (unsigned char **)&a2[-8 * ((v4 >> 2) & 0xF) - 16];
    }
    __int16 v6 = *v5;
    if (*v5 && *v6 != 15)
    {
      int v7 = "invalid file";
      __int16 v8 = 259;
      llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v7);
      if (*this)
      {
        llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a2);
        llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v6);
      }
    }
  }
}

void anonymous namespace'::Verifier::visitTemplateParams(llvm::raw_ostream **this, uint64_t a2, unsigned __int8 *a3)
{
  int v5 = *a3;
  if (v5 == 4) {
    uint64_t v6 = (uint64_t)a3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5 != 4)
  {
    uint64_t v13 = a2;
    v14[0] = "invalid template params";
    __int16 v15 = 259;
    uint64_t v12 = a3;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v13, (uint64_t *)&v12);
    return;
  }
  unint64_t v7 = *((void *)a3 - 2);
  if ((v7 & 2) != 0)
  {
    __int16 v8 = (unsigned __int8 *)*((void *)a3 - 4);
    uint64_t v9 = *((unsigned int *)a3 - 6);
    if (!*((_DWORD *)a3 - 6)) {
      return;
    }
  }
  else
  {
    __int16 v8 = &a3[-8 * ((v7 >> 2) & 0xF) - 16];
    uint64_t v9 = (v7 >> 6) & 0xF;
    if (!v9) {
      return;
    }
  }
  uint64_t v10 = 8 * v9;
  while (1)
  {
    uint64_t v11 = *(unsigned char **)v8;
    if (!*(void *)v8 || (*v11 & 0xFE) != 0x16) {
      break;
    }
    v8 += 8;
    v10 -= 8;
    if (!v10) {
      return;
    }
  }
  v14[0] = "invalid template parameter";
  __int16 v15 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
  if (*this)
  {
    llvm::VerifierSupport::Write((uint64_t)this, a2);
    llvm::VerifierSupport::Write((uint64_t)this, v6);
    llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v11);
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t)a1, *a3);
    llvm::VerifierSupport::Write((uint64_t)a1, *a4);
    uint64_t v9 = *a5;
    llvm::VerifierSupport::Write((uint64_t)a1, v9);
  }
}

void anonymous namespace'::Verifier::verifySourceDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = a3 != 0;
  uint64_t v6 = a1 + 808;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(a1 + 808), *(_DWORD *)(a1 + 824), a2, v7) & 1) == 0)
  {
    v7[0] = a2;
    *(unsigned char *)(llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(v6, v7)+ 8) = v5;
  }
  v7[0] = a2;
  if (*(unsigned __int8 *)(llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(v6, v7)+ 8) != v5)
  {
    v7[0] = (uint64_t)"inconsistent use of embedded source";
    __int16 v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v7);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

void *llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          __int16 v15 = v18;
          void *v18 = *(void *)v13;
          *((unsigned char *)v15 + 8) = *(unsigned char *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::VerifierSupport *this, unsigned int a2)
{
  uint64_t result = write_unsigned<unsigned long>(this, a2, 0, 0, 0);
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    return llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    *uint64_t v4 = 10;
  }
  return result;
}

void anonymous namespace'::Verifier::visitDILexicalBlockBase(llvm::raw_ostream **this, uint64_t a2)
{
  if (*(_WORD *)(a2 + 2) != 11)
  {
    int v7 = "invalid tag";
LABEL_7:
    uint64_t v8 = a2;
    v9[0] = v7;
    __int16 v10 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v9, &v8);
    return;
  }
  unint64_t v4 = *(void *)(a2 - 16);
  if ((v4 & 2) == 0)
  {
    unint64_t v5 = *(unsigned __int8 **)(a2 - 16 - 8 * ((v4 >> 2) & 0xF) + 8);
    if (v5)
    {
      int v6 = *v5;
      if ((v6 - 20) >= 0xFFFFFFFD) {
        goto LABEL_12;
      }
    }
LABEL_10:
    v9[0] = "invalid local scope";
    __int16 v10 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v9);
    if (*this)
    {
      llvm::VerifierSupport::Write((uint64_t)this, a2);
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v5);
    }
    return;
  }
  unint64_t v5 = *(unsigned __int8 **)(*(void *)(a2 - 32) + 8);
  if (!v5) {
    goto LABEL_10;
  }
  int v6 = *v5;
  if ((v6 - 20) <= 0xFFFFFFFC) {
    goto LABEL_10;
  }
LABEL_12:
  if (v6 == 17 && (v5[36] & 8) == 0)
  {
    int v7 = "scope points into the type hierarchy";
    goto LABEL_7;
  }
}

void anonymous namespace'::Verifier::visitDITemplateParameter(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4 = a2 - 16;
  unint64_t v5 = *(void *)(a2 - 16);
  if ((v5 & 2) != 0) {
    uint64_t v6 = *(void *)(a2 - 32);
  }
  else {
    uint64_t v6 = v4 - 8 * ((v5 >> 2) & 0xF);
  }
  int v7 = *(unsigned __int8 **)(v6 + 8);
  if (v7)
  {
    int v8 = *v7;
    if ((v8 - 11) >= 4 && v8 != 34)
    {
      uint64_t v11 = "invalid type ref";
      __int16 v12 = 259;
      if ((v5 & 2) != 0) {
        uint64_t v9 = *(void *)(a2 - 32);
      }
      else {
        uint64_t v9 = v4 - 8 * ((v5 >> 2) & 0xF);
      }
      uint64_t v10 = *(void *)(v9 + 8);
      llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v11);
      if (*this)
      {
        llvm::VerifierSupport::Write((uint64_t)this, a2);
        llvm::VerifierSupport::Write((uint64_t)this, v10);
      }
    }
  }
}

void anonymous namespace'::Verifier::visitDIVariable(llvm::raw_ostream **this, const llvm::DIVariable *a2)
{
  uint64_t v2 = (char *)a2 - 16;
  unint64_t v3 = *((void *)a2 - 2);
  if ((v3 & 2) != 0) {
    uint64_t v4 = (char *)*((void *)a2 - 4);
  }
  else {
    uint64_t v4 = &v2[-8 * ((v3 >> 2) & 0xF)];
  }
  unint64_t v5 = *(unsigned __int8 **)v4;
  uint64_t v13 = v5;
  if (v5)
  {
    int v6 = *v5;
    if ((v6 - 11) >= 0xB && v6 != 32 && v6 != 34)
    {
      uint64_t v9 = "invalid scope";
      goto LABEL_12;
    }
  }
  if ((v3 & 2) != 0) {
    int v7 = (char *)*((void *)a2 - 4);
  }
  else {
    int v7 = &v2[-8 * ((v3 >> 2) & 0xF)];
  }
  int v8 = (unsigned char *)*((void *)v7 + 2);
  uint64_t v13 = v8;
  if (v8 && *v8 != 15)
  {
    uint64_t v9 = "invalid file";
LABEL_12:
    uint64_t v10 = a2;
    uint64_t v11 = v9;
    __int16 v12 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)&v11, (uint64_t *)&v10, (uint64_t *)&v13);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>,llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  int v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a1, v7);
    int v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(llvm::raw_ostream **a1, const llvm::Twine *a2, uint64_t *a3, llvm::Type ***a4, llvm::Type ***a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t)a1, *a3);
    if (*a4) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a4);
    }
    if (*a5) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a5);
    }
    llvm::VerifierSupport::Write((uint64_t)a1, *a6);
    llvm::VerifierSupport::Write((uint64_t)a1, *a7);
    uint64_t v15 = *a8;
    llvm::VerifierSupport::Write((uint64_t)a1, v15);
  }
}

uint64_t llvm::array_pod_sort_comparator<llvm::BasicBlock *>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 2;
  uint64_t k = v9;
  while (1)
  {
    uint64_t v9 = k;
    uint64_t v12 = (char *)a2 - (char *)k;
    unint64_t v13 = ((char *)a2 - (char *)k) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v45 = *(a2 - 2);
          unint64_t v46 = *k;
          if (v45 < *k || v46 >= v45 && *(a2 - 1) < k[1])
          {
            unint64_t *k = v45;
            *(a2 - 2) = v46;
            unint64_t v47 = k[1];
            k[1] = *(a2 - 1);
            *(a2 - 1) = v47;
          }
          break;
        case 3uLL:
          uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(k, k + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(k, k + 2, k + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(k, k + 2, k + 4, k + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383)
    {
      unint64_t v48 = k + 2;
      BOOL v50 = k == a2 || v48 == a2;
      if (a4)
      {
        if (v50) {
          return result;
        }
        uint64_t v51 = 0;
        std::string v52 = k;
        while (2)
        {
          uint64_t v53 = v52;
          std::string v52 = v48;
          unint64_t v54 = v53[2];
          unint64_t v55 = *v53;
          if (v54 < *v53)
          {
            unint64_t v56 = v53[3];
            goto LABEL_112;
          }
          if (v55 >= v54)
          {
            unint64_t v56 = v53[3];
            if (v56 < v53[1])
            {
LABEL_112:
              v53[2] = v55;
              v52[1] = v53[1];
              unint64_t v57 = k;
              if (v53 != k)
              {
                uint64_t v58 = v51;
                do
                {
                  unint64_t v59 = *(unint64_t *)((char *)k + v58 - 16);
                  if (v54 >= v59)
                  {
                    if (v59 < v54)
                    {
                      unint64_t v57 = v53;
                      goto LABEL_121;
                    }
                    unint64_t v57 = (unint64_t *)((char *)k + v58);
                    unint64_t v60 = *(unint64_t *)((char *)k + v58 - 8);
                    if (v56 >= v60) {
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    unint64_t v60 = *(unint64_t *)((char *)k + v58 - 8);
                  }
                  v53 -= 2;
                  std::string::size_type v61 = (unint64_t *)((char *)k + v58);
                  unint64_t *v61 = v59;
                  v61[1] = v60;
                  v58 -= 16;
                }
                while (v58);
                unint64_t v57 = k;
              }
LABEL_121:
              unint64_t *v57 = v54;
              v57[1] = v56;
            }
          }
          unint64_t v48 = v52 + 2;
          v51 += 16;
          if (v52 + 2 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v50) {
        return result;
      }
      uint64_t v100 = k + 1;
      while (2)
      {
        uint64_t v101 = v9;
        uint64_t v9 = v48;
        unint64_t v102 = v101[2];
        unint64_t v103 = *v101;
        if (v102 >= *v101)
        {
          if (v103 >= v102)
          {
            unint64_t v104 = v101[3];
            if (v104 < v101[1]) {
              goto LABEL_187;
            }
          }
        }
        else
        {
          unint64_t v104 = v101[3];
LABEL_187:
          for (unsigned int i = v100; ; i -= 2)
          {
            unint64_t v106 = *i;
            i[1] = v103;
            i[2] = v106;
            unint64_t v103 = *(i - 3);
            if (v102 >= v103 && (v103 < v102 || v104 >= *(i - 2))) {
              break;
            }
          }
          *(i - 1) = v102;
          unint64_t *i = v104;
        }
        unint64_t v48 = v9 + 2;
        v100 += 2;
        if (v9 + 2 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &k[2 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v9 + 2, v15 - 2, a2 - 4);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
      long long v16 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = v16;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
    }
    --a3;
    unint64_t v17 = *v9;
    if ((a4 & 1) != 0 || (unint64_t v18 = *(v9 - 2), v18 < v17))
    {
LABEL_14:
      uint64_t v20 = 0;
      unint64_t v21 = v9[1];
      while (1)
      {
        unint64_t v22 = v9[v20 + 2];
        if (v22 >= v17 && (v17 < v22 || v9[v20 + 3] >= v21)) {
          break;
        }
        v20 += 2;
      }
      unint64_t v23 = (unint64_t)&v9[v20 + 2];
      if (v20 * 8)
      {
        unint64_t v24 = *v10;
        for (uint64_t j = a2 - 2; v24 >= v17 && (v17 < v24 || j[1] >= v21); j -= 2)
        {
          unint64_t v26 = *(j - 2);
          unint64_t v24 = v26;
        }
      }
      else
      {
        uint64_t j = a2;
        if (v23 < (unint64_t)a2)
        {
          unint64_t v27 = *v10;
          uint64_t j = a2 - 2;
          if (*v10 >= v17)
          {
            uint64_t j = a2 - 2;
            do
            {
              if (v17 >= v27)
              {
                if (v23 >= (unint64_t)j || j[1] < v21) {
                  break;
                }
              }
              else if (v23 >= (unint64_t)j)
              {
                break;
              }
              unint64_t v28 = *(j - 2);
              j -= 2;
              unint64_t v27 = v28;
            }
            while (v28 >= v17);
          }
        }
      }
      if (v23 >= (unint64_t)j)
      {
        uint64_t k = (unint64_t *)v23;
      }
      else
      {
        unint64_t v29 = *j;
        uint64_t k = (unint64_t *)v23;
        __int16 v30 = j;
        do
        {
          unint64_t *k = v29;
          unint64_t *v30 = v22;
          unint64_t v31 = k[1];
          k[1] = v30[1];
          v30[1] = v31;
          do
          {
            do
            {
              unint64_t v32 = k[2];
              k += 2;
              unint64_t v22 = v32;
            }
            while (v32 < v17);
          }
          while (v17 >= v22 && k[1] < v21);
          do
          {
            unint64_t v33 = *(v30 - 2);
            v30 -= 2;
            unint64_t v29 = v33;
          }
          while (v33 >= v17 && (v17 < v29 || v30[1] >= v21));
        }
        while (k < v30);
      }
      if (k - 2 != v9)
      {
        unint64_t *v9 = *(k - 2);
        v9[1] = *(k - 1);
      }
      *(k - 2) = v17;
      *(k - 1) = v21;
      if (v23 < (unint64_t)j) {
        goto LABEL_51;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v9, k - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(k, a2);
      if (result)
      {
        a2 = k - 2;
        if (v34) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v34)
      {
LABEL_51:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(v9, k - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 < v18)
      {
        unint64_t v19 = v9[1];
      }
      else
      {
        unint64_t v19 = v9[1];
        if (*(v9 - 1) < v19) {
          goto LABEL_14;
        }
      }
      unint64_t v35 = *v10;
      if (v17 >= *v10 && (v35 < v17 || v19 >= *(a2 - 1)))
      {
        for (uint64_t k = v9 + 2; k < a2 && v17 >= *k && (*k < v17 || v19 >= k[1]); k += 2)
          ;
      }
      else
      {
        uint64_t k = v9;
        do
        {
          unint64_t v37 = k[2];
          k += 2;
          unint64_t v36 = v37;
        }
        while (v17 >= v37 && (v36 < v17 || v19 >= k[1]));
      }
      uint64_t m = a2;
      if (k < a2)
      {
        for (uint64_t m = a2 - 2; v17 < v35 || v35 >= v17 && v19 < m[1]; m -= 2)
        {
          unint64_t v39 = *(m - 2);
          unint64_t v35 = v39;
        }
      }
      if (k < m)
      {
        unint64_t v40 = *k;
        unint64_t v41 = *m;
        do
        {
          unint64_t *k = v41;
          unint64_t *m = v40;
          unint64_t v42 = k[1];
          k[1] = m[1];
          m[1] = v42;
          do
          {
            unint64_t v43 = k[2];
            k += 2;
            unint64_t v40 = v43;
          }
          while (v17 >= v43 && (v40 < v17 || v19 >= k[1]));
          do
          {
            do
            {
              unint64_t v44 = *(m - 2);
              m -= 2;
              unint64_t v41 = v44;
            }
            while (v17 < v44);
          }
          while (v41 >= v17 && v19 < m[1]);
        }
        while (k < m);
      }
      BOOL v4 = k - 2 >= v9;
      BOOL v5 = k - 2 == v9;
      if (k - 2 != v9)
      {
        unint64_t *v9 = *(k - 2);
        v9[1] = *(k - 1);
      }
      a4 = 0;
      *(k - 2) = v17;
      *(k - 1) = v19;
    }
  }
  if (k != a2)
  {
    int64_t v62 = (v13 - 2) >> 1;
    int64_t v63 = v62;
    while (2)
    {
      int64_t v64 = v63;
      if (v62 >= v63)
      {
        uint64_t v65 = (2 * v63) | 1;
        unint64_t v66 = &k[2 * v65];
        if (2 * v64 + 2 < (uint64_t)v13)
        {
          unint64_t v67 = v66[2];
          if (*v66 < v67 || v67 >= *v66 && k[2 * v65 + 1] < v66[3])
          {
            v66 += 2;
            uint64_t v65 = 2 * v64 + 2;
          }
        }
        uint64_t v68 = &k[2 * v64];
        unint64_t v69 = *v66;
        unint64_t v70 = *v68;
        if (*v66 >= *v68)
        {
          if (v70 < v69)
          {
            unint64_t v71 = v68[1];
            goto LABEL_136;
          }
          unint64_t v71 = k[2 * v64 + 1];
          if (v66[1] >= v71)
          {
LABEL_136:
            unint64_t *v68 = v69;
            v68[1] = v66[1];
            if (v62 >= v65)
            {
              while (1)
              {
                uint64_t v73 = 2 * v65;
                uint64_t v65 = (2 * v65) | 1;
                uint64_t v72 = &k[2 * v65];
                uint64_t v74 = v73 + 2;
                if (v74 < (uint64_t)v13)
                {
                  unint64_t v75 = v72[2];
                  if (*v72 < v75 || v75 >= *v72 && k[2 * v65 + 1] < v72[3])
                  {
                    v72 += 2;
                    uint64_t v65 = v74;
                  }
                }
                unint64_t v76 = *v72;
                if (*v72 < v70 || v70 >= v76 && v72[1] < v71) {
                  break;
                }
                unint64_t *v66 = v76;
                v66[1] = v72[1];
                unint64_t v66 = v72;
                if (v62 < v65) {
                  goto LABEL_138;
                }
              }
            }
            uint64_t v72 = v66;
LABEL_138:
            unint64_t *v72 = v70;
            v72[1] = v71;
          }
        }
      }
      int64_t v63 = v64 - 1;
      if (v64) {
        continue;
      }
      break;
    }
    uint64_t v77 = (unint64_t)v12 >> 4;
    while (2)
    {
      int64_t v78 = 0;
      unint64_t v79 = *k;
      unint64_t v80 = k[1];
      uint64_t v81 = v77 - 2;
      if (v77 < 2) {
        uint64_t v81 = v77 - 1;
      }
      uint64_t v82 = v81 >> 1;
      unsigned int v83 = k;
      do
      {
        uint64_t v84 = v83;
        int64_t v85 = v78 + 1;
        v83 += 2 * v78 + 2;
        uint64_t v86 = 2 * v78;
        uint64_t result = (2 * v78) | 1;
        int64_t v78 = result;
        uint64_t v87 = v86 + 2;
        if (v87 < v77)
        {
          uint64_t result = (unint64_t)(v83 + 2);
          unint64_t v88 = v83[2];
          if (*v83 < v88 || v88 >= *v83 && v84[2 * v85 + 1] < v83[3])
          {
            v83 += 2;
            int64_t v78 = v87;
          }
        }
        unint64_t *v84 = *v83;
        v84[1] = v83[1];
      }
      while (v78 <= v82);
      if (v83 == a2 - 2)
      {
        *unsigned int v83 = v79;
        v83[1] = v80;
      }
      else
      {
        *unsigned int v83 = *(a2 - 2);
        v83[1] = *(a2 - 1);
        *(a2 - 2) = v79;
        *(a2 - 1) = v80;
        uint64_t v89 = (char *)v83 - (char *)k + 16;
        if (v89 >= 17)
        {
          unint64_t v90 = ((unint64_t)v89 >> 4) - 2;
          unint64_t v91 = v90 >> 1;
          uint64_t v92 = &k[2 * (v90 >> 1)];
          unint64_t v93 = *v92;
          unint64_t v94 = *v83;
          if (*v92 < *v83)
          {
            unint64_t v95 = v83[1];
            goto LABEL_167;
          }
          if (v94 >= v93)
          {
            uint64_t result = k[2 * v91 + 1];
            unint64_t v95 = v83[1];
            if (result < v95)
            {
LABEL_167:
              *unsigned int v83 = v93;
              v83[1] = k[2 * v91 + 1];
              if (v90 >= 2)
              {
                while (1)
                {
                  unint64_t v97 = v91 - 1;
                  unint64_t v91 = (v91 - 1) >> 1;
                  int v96 = &k[2 * v91];
                  unint64_t v98 = *v96;
                  if (*v96 >= v94)
                  {
                    if (v94 < v98) {
                      break;
                    }
                    uint64_t result = k[2 * v91 + 1];
                    if (result >= v95) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t result = v96[1];
                  }
                  *uint64_t v92 = v98;
                  v92[1] = result;
                  uint64_t v92 = &k[2 * v91];
                  if (v97 <= 1) {
                    goto LABEL_174;
                  }
                }
              }
              int v96 = v92;
LABEL_174:
              *int v96 = v94;
              v96[1] = v95;
            }
          }
        }
      }
      a2 -= 2;
      if (v77-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    unint64_t v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      int v8 = a2 + 1;
      unint64_t v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      unint64_t v10 = *a2;
      unint64_t v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        unint64_t v15 = *result;
        uint64_t *result = *v8;
        unint64_t *v8 = v15;
      }
    }
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      int v6 = a3 + 1;
LABEL_17:
      int v8 = v6;
      goto LABEL_18;
    }
    uint64_t *result = v3;
    *a2 = v4;
    unint64_t v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    unint64_t v13 = *a3;
    unint64_t v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      int v6 = a3 + 1;
      uint64_t result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      unint64_t v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v15 = v10[1];
    }
    *unint64_t v10 = v14;
    v10[1] = v9[1];
    long long v16 = a1;
    if (v9 == a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unint64_t v18 = (char *)a1 + v17;
      unint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        unint64_t v20 = *((void *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        long long v16 = (unint64_t *)((char *)a1 + v17 + 32);
        goto LABEL_22;
      }
      unint64_t v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *((void *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        long long v16 = a1;
        goto LABEL_22;
      }
    }
    long long v16 = v9;
LABEL_22:
    unint64_t *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a3;
    unint64_t v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a4;
    unint64_t v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a2;
        unint64_t v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

void anonymous namespace'::Verifier::visit(llvm::raw_ostream **this, llvm::Instruction *a2)
{
  unint64_t v3 = this;
  uint64_t v382 = *MEMORY[0x263EF8340];
  unsigned int v4 = *((_DWORD *)a2 + 5);
  uint64_t v5 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) != 0)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)a2 - 32 * v5;
      if ((v4 & 0x40000000) != 0) {
        unint64_t v7 = (char *)*((void *)a2 - 1);
      }
      if (!*(void *)&v7[v6])
      {
        unint64_t v8 = "Operand is null";
LABEL_12:
        v377 = v8;
        v381[0] = 259;
        int v373 = a2;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
        return;
      }
      v6 += 32;
    }
    while (32 * v5 != v6);
  }
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
      if (v5 != 3) {
        goto LABEL_231;
      }
      unint64_t v11 = (llvm::Type **)*((void *)a2 - 12);
      if (*((_DWORD *)*v11 + 2) == 269) {
        goto LABEL_231;
      }
      v377 = "Branch condition is not 'i1' type!";
      v381[0] = 259;
      int v373 = a2;
      v368 = v11;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373, &v368);
      return;
    case 0x1F:
      if (*(unsigned char *)(*(void *)a2 + 8) != 7)
      {
        v377 = "Switch must have void result type!";
        v381[0] = 259;
        int v373 = a2;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
        return;
      }
      if ((v4 & 0x40000000) != 0) {
        unint64_t v12 = (uint64_t **)*((void *)a2 - 1);
      }
      else {
        unint64_t v12 = (uint64_t **)((char *)a2 - 32 * v5);
      }
      uint64_t v242 = **v12;
      v377 = (const char *)v381;
      v378 = v381;
      uint64_t v379 = 32;
      int v380 = 0;
      uint64_t v243 = ((v4 >> 1) & 0x3FFFFFF) - 1;
      if (!v243) {
        goto LABEL_469;
      }
      uint64_t v244 = 0;
      uint64_t v245 = 2 * v243;
      while (2)
      {
        int v246 = *((_DWORD *)a2 + 5);
        if ((v246 & 0x40000000) != 0) {
          unint64_t v247 = (char *)*((void *)a2 - 1);
        }
        else {
          unint64_t v247 = (char *)a2 - 32 * (v246 & 0x7FFFFFF);
        }
        if (*(unsigned char *)(*(void *)&v247[32 * (v244 + 2)] + 16) == 16)
        {
          if (**(void **)&v247[32 * ((v244 + 2) & 0xFFFFFFFE)] == v242)
          {
            if ((v246 & 0x40000000) != 0) {
              unint64_t v248 = (char *)*((void *)a2 - 1);
            }
            else {
              unint64_t v248 = (char *)a2 - 32 * (v246 & 0x7FFFFFF);
            }
            llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v377, *(const void **)&v248[32 * ((v244 + 2) & 0xFFFFFFFE)]);
            if (v249)
            {
              v244 += 2;
              if (v245 == v244)
              {
LABEL_469:
                goto LABEL_662;
              }
              continue;
            }
            int v373 = "Duplicate integer as switch case";
            __int16 v376 = 259;
            v368 = (llvm::Type **)a2;
            int v294 = *((_DWORD *)a2 + 5);
            if ((v294 & 0x40000000) != 0) {
              v295 = (char *)*((void *)a2 - 1);
            }
            else {
              v295 = (char *)a2 - 32 * (v294 & 0x7FFFFFF);
            }
            v367 = *(llvm::Type ***)&v295[32 * ((v244 + 2) & 0xFFFFFFFE)];
            llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(v3, (const llvm::Twine *)&v373, &v368, &v367);
LABEL_662:
            v283 = (uint64_t *)v378;
            if (v378 == v377) {
              return;
            }
            goto LABEL_663;
          }
          unint64_t v29 = "Switch constants must all be same type as switch value!";
        }
        else
        {
          unint64_t v29 = "Case value is not a constant integer.";
        }
        break;
      }
LABEL_661:
      int v373 = v29;
      __int16 v376 = 259;
      v368 = (llvm::Type **)a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v373, &v368);
      goto LABEL_662;
    case 0x20:
      if ((v4 & 0x40000000) != 0) {
        unint64_t v13 = (char *)*((void *)a2 - 1);
      }
      else {
        unint64_t v13 = (char *)a2 - 32 * v5;
      }
      if (*(unsigned char *)(**(void **)v13 + 8) == 15)
      {
        uint64_t v152 = 0;
        uint64_t v153 = (v5 - 1);
        unint64_t v154 = (char *)a2 - 32 * v5;
        do
        {
          if (v153 == v152) {
            goto LABEL_231;
          }
          uint64_t v155 = v154;
          if ((v4 & 0x40000000) != 0) {
            uint64_t v155 = (char *)*((void *)a2 - 1);
          }
          ++v152;
        }
        while (*(unsigned char *)(**(void **)&v155[32 * v152] + 8) == 8);
        unint64_t v16 = "Indirectbr destinations must all have pointer type!";
      }
      else
      {
        unint64_t v16 = "Indirectbr operand must have pointer type!";
      }
      goto LABEL_612;
    case 0x21:
      for (uint64_t i = *(void *)(*((void *)a2 - 8) + 48); ; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v15 = i - 24;
        if (!i) {
          uint64_t v15 = 0;
        }
        if (*(unsigned char *)(v15 + 16) != 83) {
          break;
        }
      }
      unsigned int v146 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v147 = v146 > 0x38;
      uint64_t v148 = (1 << v146) & 0x100060000000001;
      if (!v147 && v148 != 0) {
        goto LABEL_231;
      }
      v377 = "The unwind destination does not have an exception handling instruction!";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x22:
      if ((*(_WORD *)(*(void *)(*((void *)a2 + 5) + 56) + 18) & 8) == 0)
      {
        unint64_t v16 = "ResumeInst needs to be in a function with a personality.";
        goto LABEL_612;
      }
      uint64_t v156 = this[99];
      uint64_t v157 = (llvm::raw_ostream *)**((void **)a2 - 4);
      if (!v156)
      {
        this[99] = v157;
        goto LABEL_231;
      }
      if (v156 == v157) {
        goto LABEL_231;
      }
      unint64_t v16 = "The resume instruction should have a consistent result type inside a function.";
      goto LABEL_612;
    case 0x23:
      goto LABEL_231;
    case 0x24:
      unint64_t v17 = (llvm::Type ***)((char *)a2 - 32 * v5);
      unint64_t v18 = *v17;
      if (*((unsigned char *)*v17 + 16) != 79)
      {
        v377 = "CleanupReturnInst needs to be provided a CleanupPad";
        v381[0] = 259;
        int v373 = a2;
        v368 = v18;
        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373, &v368);
        return;
      }
      if ((*((_WORD *)a2 + 9) & 1) == 0) {
        goto LABEL_231;
      }
      unint64_t v19 = v17[4];
      if (!v19) {
        goto LABEL_231;
      }
      for (uint64_t j = v19[6]; ; uint64_t j = (llvm::Type *)*((void *)j + 1))
      {
        uint64_t v21 = (uint64_t)j - 24;
        if (!j) {
          uint64_t v21 = 0;
        }
        if (*(unsigned char *)(v21 + 16) != 83) {
          break;
        }
      }
      unsigned int v262 = *((unsigned __int8 *)j - 8) - 38;
      BOOL v147 = v262 > 0x2A;
      uint64_t v263 = (1 << v262) & 0x60000000001;
      if (!v147 && v263 != 0) {
        goto LABEL_231;
      }
      v377 = "CleanupReturnInst must unwind to an EH block which is not a landingpad.";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x25:
      uint64_t v22 = *((void *)a2 - 8);
      if (*(unsigned char *)(v22 + 16) == 80) {
        goto LABEL_231;
      }
      v377 = "CatchReturnInst needs to be provided a CatchPad";
      v381[0] = 259;
      int v373 = a2;
      v368 = (llvm::Type **)v22;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373, &v368);
      return;
    case 0x26:
      uint64_t v23 = *((void *)a2 + 5);
      if ((*(_WORD *)(*(void *)(v23 + 56) + 18) & 8) == 0)
      {
        unint64_t v24 = "CatchSwitchInst needs to be in a function with a personality.";
LABEL_539:
        v377 = v24;
        v381[0] = 259;
        int v373 = a2;
        unint64_t v32 = (llvm::Type ***)&v373;
        goto LABEL_678;
      }
      uint64_t v158 = v23 + 40;
      for (uint64_t k = *(void *)(v23 + 48); ; uint64_t k = *(void *)(k + 8))
      {
        if (k == v158) {
          goto LABEL_538;
        }
        uint64_t v160 = k ? k - 24 : 0;
        if (*(unsigned char *)(v160 + 16) != 83) {
          break;
        }
      }
      if ((llvm::Instruction *)(k - 24) != a2)
      {
LABEL_538:
        unint64_t v24 = "CatchSwitchInst not the first non-PHI instruction in the block.";
        goto LABEL_539;
      }
      if ((v4 & 0x40000000) != 0) {
        v296 = (unsigned __int8 **)*((void *)a2 - 1);
      }
      else {
        v296 = (unsigned __int8 **)((char *)a2 - 32 * v5);
      }
      uint64_t v305 = *v296;
      int v373 = v305;
      unsigned int v306 = v305[16];
      if (v306 != 20 && (v306 < 0x1C || v306 - 79 >= 2))
      {
        v377 = "CatchSwitchInst has an invalid parent.";
        v381[0] = 259;
LABEL_494:
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
        return;
      }
      if (*((_WORD *)a2 + 9))
      {
        if ((v4 & 0x40000000) != 0) {
          uint64_t v311 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v311 = (char *)a2 - 32 * v5;
        }
        uint64_t v319 = *((void *)v311 + 4);
        if (!v319) {
          goto LABEL_785;
        }
        for (uint64_t m = *(void *)(v319 + 48); ; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v321 = m - 24;
          if (!m) {
            uint64_t v321 = 0;
          }
          if (*(unsigned char *)(v321 + 16) != 83) {
            break;
          }
        }
        unsigned int v322 = *(unsigned __int8 *)(m - 8);
        if (v322 - 38 > 0x2A || ((1 << (v322 - 38)) & 0x60000000001) == 0)
        {
          int v344 = "CatchSwitchInst must unwind to an EH block which is not a landingpad.";
          goto LABEL_792;
        }
        if (v322 >= 0x4F)
        {
          int v325 = (unsigned __int8 **)(m - 56);
        }
        else
        {
          int v324 = *(_DWORD *)(m - 4);
          int v325 = (v324 & 0x40000000) != 0
               ? *(unsigned __int8 ***)(m - 32)
               : (unsigned __int8 **)(m - 32 * (v324 & 0x7FFFFFF) - 24);
        }
        if (*v325 == v305)
        {
          v377 = (const char *)a2;
          *(void *)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[](this + 107, (uint64_t *)&v377) = a2;
          unsigned int v4 = *((_DWORD *)a2 + 5);
          LODWORD(v5) = v4 & 0x7FFFFFF;
          BOOL v308 = (*((_WORD *)a2 + 9) & 1) == 0;
        }
        else
        {
LABEL_785:
          BOOL v308 = 0;
        }
      }
      else
      {
        BOOL v308 = 1;
      }
      if (v308) {
        int v345 = 1;
      }
      else {
        int v345 = 2;
      }
      if (v5 != v345)
      {
        if ((v4 & 0x40000000) != 0)
        {
          long long v346 = (char *)*((void *)a2 - 1);
          uint64_t v349 = 64;
          if (v308) {
            uint64_t v349 = 32;
          }
          long long v348 = (llvm::Type ***)&v346[v349];
          uint64_t v5 = v5;
        }
        else
        {
          uint64_t v5 = v5;
          long long v346 = (char *)a2 - 32 * v5;
          uint64_t v347 = 64;
          if (v308) {
            uint64_t v347 = 32;
          }
          long long v348 = (llvm::Type ***)&v346[v347];
        }
        int v350 = (llvm::Type ***)&v346[32 * v5];
        while (1)
        {
          if (v348 == v350)
          {
            return;
          }
          v368 = *v348;
          for (n = v368[6]; ; n = (llvm::Type *)*((void *)n + 1))
          {
            std::string v352 = (char *)n - 24;
            if (!n) {
              std::string v352 = 0;
            }
            if (v352[16] != 83) {
              break;
            }
          }
          if (*((unsigned char *)n - 8) != 80) {
            break;
          }
          v348 += 4;
        }
        v377 = "CatchSwitchInst handlers must be catchpads";
        v381[0] = 259;
        v367 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(v3, (const llvm::Twine *)&v377, &v367, &v368);
        return;
      }
      int v344 = "CatchSwitchInst cannot have empty handler list";
LABEL_792:
      v377 = v344;
      v381[0] = 259;
      v368 = (llvm::Type **)a2;
      unint64_t v32 = &v368;
LABEL_678:
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, v32);
      return;
    case 0x27:
      uint64_t v25 = *((void *)a2 - 4);
      if (*(unsigned char *)(v25 + 16) != 24)
      {
        v377 = "Callbr is currently only used for asm-goto!";
        v381[0] = 259;
        int v373 = a2;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
        return;
      }
      if (*(unsigned char *)(v25 + 88))
      {
        unint64_t v26 = "Unwinding from Callbr is not allowed";
        goto LABEL_204;
      }
      goto LABEL_231;
    case 0x28:
      uint64_t v27 = *(void *)a2;
      if (*(void *)a2 != **((void **)a2 - 4))
      {
        unint64_t v8 = "Unary operators must have same type foroperands and result!";
        goto LABEL_12;
      }
      int v233 = *(_DWORD *)(v27 + 8);
      if ((v233 & 0xFE) == 0x12) {
        int v233 = *(_DWORD *)(**(void **)(v27 + 16) + 8);
      }
      if (v233 < 4u || v233 == 5 || (v233 & 0xFD) == 4) {
        goto LABEL_584;
      }
      unint64_t v8 = "FNeg operator only works with float types!";
      goto LABEL_12;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      return;
    case 0x3B:
      v377 = (const char *)v381;
      v378 = v381;
      uint64_t v379 = 4;
      int v380 = 0;
      if ((llvm::Type::isSized(*((void *)a2 + 8), (llvm::SmallPtrSetImplBase *)&v377) & 1) == 0)
      {
        unint64_t v29 = "Cannot allocate unsized type";
        goto LABEL_661;
      }
      if (*(unsigned char *)(**((void **)a2 - 4) + 8) != 13)
      {
        unint64_t v29 = "Alloca array size must have integer type";
        goto LABEL_661;
      }
      __int16 v28 = *((_WORD *)a2 + 9);
      if ((v28 & 0x3Fu) >= 0x21)
      {
        unint64_t v29 = "huge alignment values are unsupported";
        goto LABEL_661;
      }
      if ((v28 & 0x80) == 0) {
        goto LABEL_702;
      }
      if (*(unsigned char *)(*((void *)a2 + 8) + 8) != 15)
      {
        unint64_t v29 = "swifterror alloca must have pointer type";
        goto LABEL_661;
      }
      if (llvm::AllocaInst::isArrayAllocation(a2))
      {
        unint64_t v29 = "swifterror alloca must not be array allocation";
        goto LABEL_661;
      }
LABEL_702:
      goto LABEL_662;
    case 0x3C:
      uint64_t v30 = **((void **)a2 - 4);
      if (v30) {
        BOOL v31 = *(unsigned char *)(v30 + 8) == 15;
      }
      else {
        BOOL v31 = 0;
      }
      if (!v31)
      {
        v377 = "Load operand must be a pointer.";
        v381[0] = 259;
        int v373 = a2;
        unint64_t v32 = (llvm::Type ***)&v373;
        goto LABEL_678;
      }
      uint64_t v161 = *(_DWORD **)a2;
      int v373 = *(void **)a2;
      if ((*((_WORD *)a2 + 9) & 0x7Eu) >= 0x42)
      {
        uint64_t v162 = "huge alignment values are unsupported";
        goto LABEL_637;
      }
      if ((llvm::Type::isSized((uint64_t)v161, 0) & 1) == 0)
      {
        uint64_t v162 = "loading unsized types is not allowed";
        goto LABEL_637;
      }
      if (!llvm::Instruction::isAtomic(a2))
      {
        if (*((unsigned char *)a2 + 60) == 1) {
          goto LABEL_586;
        }
        uint64_t v162 = "Non-atomic load cannot have SynchronizationScope specified";
        goto LABEL_637;
      }
      if (((*((unsigned __int16 *)a2 + 9) >> 7) & 7u) - 5 <= 1)
      {
        uint64_t v162 = "Load cannot have Release ordering";
LABEL_637:
        v377 = v162;
        v381[0] = 259;
        v368 = (llvm::Type **)a2;
        unint64_t v32 = &v368;
        goto LABEL_678;
      }
      int v300 = v161[2] & 0xFD;
      unsigned int v301 = v161[2];
      if (v300 != 13 && v301 >= 4 && v301 != 5 && v300 != 4)
      {
        v377 = "atomic load operand must have integer, pointer, or floating point type!";
        v381[0] = 259;
        v368 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(v3, (const llvm::Twine *)&v377, (llvm::Type **)&v373, &v368);
        return;
      }
      goto LABEL_746;
    case 0x3D:
      uint64_t v33 = **((void **)a2 - 4);
      if (v33) {
        BOOL v34 = *(unsigned char *)(v33 + 8) == 15;
      }
      else {
        BOOL v34 = 0;
      }
      if (!v34)
      {
        v377 = "Store operand must be a pointer.";
        v381[0] = 259;
        int v373 = a2;
        unint64_t v32 = (llvm::Type ***)&v373;
        goto LABEL_678;
      }
      uint64_t v161 = (_DWORD *)**((void **)a2 - 8);
      int v373 = v161;
      uint64_t v163 = *(_DWORD **)(v33 + 24);
      if (v163) {
        BOOL v164 = v163 == v161;
      }
      else {
        BOOL v164 = 1;
      }
      if (!v164)
      {
        v377 = "Stored value type does not match pointer operand type!";
        v381[0] = 259;
        v368 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(this, (const llvm::Twine *)&v377, &v368, (llvm::Type **)&v373);
        return;
      }
      if ((*((_WORD *)a2 + 9) & 0x7Eu) >= 0x42)
      {
        unint64_t v165 = "huge alignment values are unsupported";
        goto LABEL_677;
      }
      if ((llvm::Type::isSized((uint64_t)v161, 0) & 1) == 0)
      {
        unint64_t v165 = "storing unsized types is not allowed";
        goto LABEL_677;
      }
      if (!llvm::Instruction::isAtomic(a2))
      {
        if (*((unsigned char *)a2 + 60) == 1) {
          goto LABEL_586;
        }
        unint64_t v165 = "Non-atomic store cannot have SynchronizationScope specified";
        goto LABEL_677;
      }
      if (((*((unsigned __int16 *)a2 + 9) >> 7) & 5 | 2) == 6)
      {
        unint64_t v165 = "Store cannot have Acquire ordering";
LABEL_677:
        v377 = v165;
        v381[0] = 259;
        v368 = (llvm::Type **)a2;
        unint64_t v32 = &v368;
        goto LABEL_678;
      }
      int v326 = v161[2] & 0xFD;
      unsigned int v327 = v161[2];
      if (v326 != 13 && v327 >= 4 && v327 != 5 && v326 != 4)
      {
        v377 = "atomic store operand must have integer, pointer, or floating point type!";
        v381[0] = 259;
        v368 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(v3, (const llvm::Twine *)&v377, (llvm::Type **)&v373, &v368);
        return;
      }
LABEL_746:
      this = v3;
      unint64_t v37 = v161;
      goto LABEL_524;
    case 0x3E:
      uint64_t v35 = **((void **)a2 - 4 * v5);
      if ((*(_DWORD *)(v35 + 8) & 0xFE) == 0x12) {
        int v36 = *(unsigned __int8 *)(**(void **)(v35 + 16) + 8);
      }
      else {
        int v36 = *(_DWORD *)(v35 + 8);
      }
      if (v36 != 15)
      {
        unint64_t v39 = "GEP base pointer is not a vector or a vector of pointers";
        goto LABEL_815;
      }
      if ((llvm::Type::isSized(*((void *)a2 + 8), 0) & 1) == 0)
      {
        unint64_t v39 = "GEP into unsized type!";
        goto LABEL_815;
      }
      uint64_t v166 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 32;
      v377 = (const char *)&v379;
      v378 = (void *)0x1000000000;
      llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v377, v166, (char *)a2);
      if (v378)
      {
        uint64_t v168 = 8 * v378;
        unint64_t v169 = (uint64_t *)v377;
        do
        {
          uint64_t v170 = *(void *)*v169;
          if ((*(_DWORD *)(v170 + 8) & 0xFE) == 0x12) {
            int v171 = *(unsigned __int8 *)(**(void **)(v170 + 16) + 8);
          }
          else {
            int v171 = *(_DWORD *)(v170 + 8);
          }
          if (v171 != 13)
          {
            int v373 = "GEP indexes must be integers";
            __int16 v376 = 259;
            v368 = (llvm::Type **)a2;
            uint64_t v282 = &v368;
            goto LABEL_607;
          }
          ++v169;
          v168 -= 8;
        }
        while (v168);
        uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)*((void *)a2 + 8);
        uint64_t v173 = (llvm::Type **)(v377 + 8);
        uint64_t v174 = 8 * v378 - 8;
        while (v174)
        {
          v175 = *v173++;
          uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v175, v167);
          v174 -= 8;
          if (!TypeAtIndex) {
            goto LABEL_603;
          }
        }
      }
      else
      {
        uint64_t TypeAtIndex = (llvm::GetElementPtrInst *)*((void *)a2 + 8);
      }
      v368 = (llvm::Type **)TypeAtIndex;
      if (!TypeAtIndex)
      {
LABEL_603:
        uint64_t v281 = "Invalid indices for GEP pointer type!";
        goto LABEL_604;
      }
      uint64_t v274 = *(void *)a2;
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
      {
        if (*(_DWORD *)(*(void *)a2 + 8) != 15 || *((void *)a2 + 9) != (void)TypeAtIndex) {
          goto LABEL_657;
        }
        uint64_t v278 = **((void **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        unsigned int v279 = *(_DWORD *)(v278 + 8);
        goto LABEL_697;
      }
      if (*(unsigned char *)(**(void **)(v274 + 16) + 8) != 15 || *((void *)a2 + 9) != (void)TypeAtIndex)
      {
LABEL_657:
        int v373 = "GEP is not of right type for indices!";
        __int16 v376 = 259;
        v367 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(v3, (const llvm::Twine *)&v373, &v367, (llvm::Type **)&v368);
        goto LABEL_608;
      }
      int v276 = *(_DWORD *)(v274 + 32);
      int v277 = *(_DWORD *)(*(void *)a2 + 8);
      uint64_t v278 = **((void **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      unsigned int v279 = *(_DWORD *)(v278 + 8);
      if ((v279 & 0xFE) == 0x12
        && ((v277 == 19) == (*(_DWORD *)(v278 + 8) != 19) || v276 != *(_DWORD *)(v278 + 32)))
      {
        uint64_t v281 = "Vector GEP result width doesn't match operand's";
        goto LABEL_604;
      }
      if (!v378)
      {
LABEL_719:
        if (v277 != 15)
        {
LABEL_720:
          goto LABEL_608;
        }
LABEL_697:
        if ((v279 & 0xFE) == 0x12) {
          unsigned int v279 = *(_DWORD *)(**(void **)(v278 + 16) + 8);
        }
        if ((v279 ^ *(_DWORD *)(*(void *)a2 + 8)) >= 0x100)
        {
          uint64_t v281 = "GEP address space doesn't match type";
          goto LABEL_604;
        }
        goto LABEL_720;
      }
      v312 = (uint64_t *)v377;
      uint64_t v313 = 8 * v378;
      while (1)
      {
        uint64_t v314 = *(void *)*v312;
        int v315 = *(_DWORD *)(v314 + 8);
        int v316 = *(_DWORD *)(v314 + 8) & 0xFE;
        if (v314) {
          BOOL v317 = v316 == 18;
        }
        else {
          BOOL v317 = 0;
        }
        if (v317)
        {
          if ((v277 == 19) == (v315 != 19) || *(_DWORD *)(v314 + 32) != v276)
          {
            uint64_t v281 = "Invalid GEP index vector width";
LABEL_604:
            int v373 = v281;
            __int16 v376 = 259;
            v367 = (llvm::Type **)a2;
            uint64_t v282 = &v367;
LABEL_607:
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v373, v282);
            goto LABEL_608;
          }
LABEL_716:
          int v315 = *(unsigned __int8 *)(**(void **)(v314 + 16) + 8);
          goto LABEL_717;
        }
        if (v316 == 18) {
          goto LABEL_716;
        }
LABEL_717:
        if (v315 != 13) {
          break;
        }
        ++v312;
        v313 -= 8;
        if (!v313) {
          goto LABEL_719;
        }
      }
      int v373 = "All GEP indices should be of integer type";
      __int16 v376 = 259;
      llvm::VerifierSupport::CheckFailed(v3, (const llvm::Twine *)&v373);
LABEL_608:
      v283 = (uint64_t *)v377;
      if (v377 != (const char *)&v379) {
        goto LABEL_663;
      }
      return;
    case 0x3F:
      if ((*((_WORD *)a2 + 9) & 4) != 0) {
        goto LABEL_584;
      }
      v377 = "fence instructions may only have acquire, release, acq_rel, or seq_cst ordering.";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x40:
      unint64_t v37 = (_DWORD *)**((void **)a2 - 8);
      int v373 = v37;
      if ((v37[2] & 0xFD) == 0xD) {
        goto LABEL_524;
      }
      v377 = "cmpxchg operand must have integer or pointer type";
      v381[0] = 259;
      v368 = (llvm::Type **)a2;
      llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(this, (const llvm::Twine *)&v377, (llvm::Type **)&v373, &v368);
      return;
    case 0x41:
      unsigned int v38 = *((unsigned __int16 *)a2 + 9);
      if ((v38 & 0xE) == 2)
      {
        unint64_t v39 = "atomicrmw instructions cannot be unordered.";
        goto LABEL_815;
      }
      unsigned int v176 = (v38 >> 4) & 0x1F;
      unint64_t v37 = (_DWORD *)**((void **)a2 - 4);
      v368 = (llvm::Type **)v37;
      if (v176)
      {
        unsigned int v177 = *((unsigned __int8 *)v37 + 8);
        if (v176 - 11 > 3)
        {
          if (v177 == 13)
          {
            if (v176 < 0x11) {
              goto LABEL_586;
            }
            unint64_t v39 = "Invalid binary operation!";
            goto LABEL_815;
          }
          __int16 v376 = 1283;
          int v373 = "atomicrmw ";
          v374[1] = llvm::AtomicRMWInst::getOperationName(v176);
          uint64_t v375 = v293;
          uint64_t v182 = " operand must have integer type!";
LABEL_632:
          v377 = (const char *)&v373;
          uint64_t v379 = (uint64_t)v182;
          v381[0] = 770;
          v367 = (llvm::Type **)a2;
          llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(v3, (const llvm::Twine *)&v377, &v367, (llvm::Type **)&v368);
          return;
        }
        BOOL v178 = v177 < 4 || v177 == 5;
        unsigned int v179 = v177 & 0xFFFFFFFD;
        if (!v178 && v179 != 4)
        {
          __int16 v376 = 1283;
          int v373 = "atomicrmw ";
          v374[1] = llvm::AtomicRMWInst::getOperationName(v176);
          uint64_t v375 = v181;
          uint64_t v182 = " operand must have floating point type!";
          goto LABEL_632;
        }
      }
      else
      {
        unsigned int v256 = *((unsigned __int8 *)v37 + 8);
        if (v256 != 13 && v256 >= 4 && v256 != 5 && (v256 & 0xFFFFFFFD) != 4 && v256 != 15)
        {
          __int16 v376 = 1283;
          int v373 = "atomicrmw ";
          v374[1] = "xchg";
          uint64_t v375 = 4;
          uint64_t v182 = " operand must have integer or floating point type!";
          goto LABEL_632;
        }
      }
LABEL_524:
LABEL_586:
      return;
    case 0x42:
      uint64_t v40 = **((void **)a2 - 4);
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(v40 + 8) & 0xFE;
      unint64_t v43 = (llvm::Type *)v40;
      if (v42 == 18) {
        unint64_t v43 = **(llvm::Type ***)(v40 + 16);
      }
      int v44 = *(_DWORD *)(v40 + 8);
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v43);
      int v46 = *(_DWORD *)(v41 + 8);
      int v47 = v46 & 0xFE;
      unint64_t v48 = (llvm::Type *)v41;
      if (v47 == 18) {
        unint64_t v48 = **(llvm::Type ***)(v41 + 16);
      }
      unsigned int v49 = llvm::Type::getPrimitiveSizeInBits(v48);
      if (v42 == 18) {
        int v44 = *(unsigned __int8 *)(**(void **)(v40 + 16) + 8);
      }
      if (v44 != 13)
      {
        unint64_t v39 = "Trunc only operates on integer";
        goto LABEL_815;
      }
      if (v47 == 18) {
        int v50 = *(unsigned __int8 *)(**(void **)(v41 + 16) + 8);
      }
      else {
        int v50 = v46;
      }
      if (v50 != 13)
      {
        unint64_t v39 = "Trunc only produces integer";
        goto LABEL_815;
      }
      if ((v42 == 18) != (v47 == 18))
      {
        unint64_t v39 = "trunc source and destination must both be a vector or neither";
        goto LABEL_815;
      }
      if (PrimitiveSizeInBits > v49) {
        goto LABEL_584;
      }
      unint64_t v39 = "DestTy too big for Trunc";
      goto LABEL_815;
    case 0x43:
      uint64_t v51 = **((void **)a2 - 4);
      int v52 = *(_DWORD *)(v51 + 8) & 0xFE;
      if (v52 == 18) {
        int v53 = *(unsigned __int8 *)(**(void **)(v51 + 16) + 8);
      }
      else {
        int v53 = *(_DWORD *)(v51 + 8);
      }
      if (v53 != 13)
      {
        unint64_t v39 = "ZExt only operates on integer";
        goto LABEL_815;
      }
      uint64_t v183 = *(llvm::Type **)a2;
      int v184 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      if (v184 == 18) {
        int v185 = *(unsigned __int8 *)(**((void **)v183 + 2) + 8);
      }
      else {
        int v185 = *(_DWORD *)(*(void *)a2 + 8);
      }
      if (v185 != 13)
      {
        unint64_t v39 = "ZExt only produces an integer";
        goto LABEL_815;
      }
      if ((v52 == 18) != (v184 == 18))
      {
        unint64_t v39 = "zext source and destination must both be a vector or neither";
        goto LABEL_815;
      }
      if (v52 == 18) {
        uint64_t v51 = **(void **)(v51 + 16);
      }
      unsigned int v273 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v51);
      if (v184 == 18) {
        uint64_t v183 = (llvm::Type *)**((void **)v183 + 2);
      }
      if (v273 < llvm::Type::getPrimitiveSizeInBits(v183)) {
        goto LABEL_584;
      }
      unint64_t v39 = "Type too small for ZExt";
      goto LABEL_815;
    case 0x44:
      uint64_t v54 = **((void **)a2 - 4);
      uint64_t v55 = *(void *)a2;
      int v56 = *(_DWORD *)(v54 + 8) & 0xFE;
      unint64_t v57 = (llvm::Type *)v54;
      if (v56 == 18) {
        unint64_t v57 = **(llvm::Type ***)(v54 + 16);
      }
      int v58 = *(_DWORD *)(v54 + 8);
      unsigned int v59 = llvm::Type::getPrimitiveSizeInBits(v57);
      int v60 = *(_DWORD *)(v55 + 8);
      int v61 = v60 & 0xFE;
      int64_t v62 = (llvm::Type *)v55;
      if (v61 == 18) {
        int64_t v62 = **(llvm::Type ***)(v55 + 16);
      }
      unsigned int v63 = llvm::Type::getPrimitiveSizeInBits(v62);
      if (v56 == 18) {
        int v58 = *(unsigned __int8 *)(**(void **)(v54 + 16) + 8);
      }
      if (v58 != 13)
      {
        unint64_t v39 = "SExt only operates on integer";
        goto LABEL_815;
      }
      if (v61 == 18) {
        int v64 = *(unsigned __int8 *)(**(void **)(v55 + 16) + 8);
      }
      else {
        int v64 = v60;
      }
      if (v64 != 13)
      {
        unint64_t v39 = "SExt only produces an integer";
        goto LABEL_815;
      }
      if ((v56 == 18) != (v61 == 18))
      {
        unint64_t v39 = "sext source and destination must both be a vector or neither";
        goto LABEL_815;
      }
      if (v59 < v63) {
        goto LABEL_584;
      }
      unint64_t v39 = "Type too small for SExt";
      goto LABEL_815;
    case 0x45:
      uint64_t v65 = **((void **)a2 - 4);
      uint64_t v66 = *(void *)a2;
      int v67 = *(_DWORD *)(v65 + 8) & 0xFE;
      int v68 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      if ((v67 == 18) != (v68 == 18))
      {
        unint64_t v16 = "FPToUI source and dest must both be vector or scalar";
        goto LABEL_612;
      }
      int v186 = *(_DWORD *)(v65 + 8);
      LOBYTE(v187) = *(_DWORD *)(v65 + 8);
      if (v67 == 18) {
        int v187 = *(_DWORD *)(**(void **)(v65 + 16) + 8);
      }
      BOOL v188 = v187 < 4u || v187 == 5;
      int v189 = v187 & 0xFD;
      if (!v188 && v189 != 4)
      {
        unint64_t v16 = "FPToUI source must be FP or FP vector";
        goto LABEL_612;
      }
      int v191 = *(_DWORD *)(*(void *)a2 + 8);
      if (v68 == 18) {
        int v191 = *(unsigned __int8 *)(**(void **)(v66 + 16) + 8);
      }
      if (v191 != 13)
      {
        unint64_t v16 = "FPToUI result must be integer or integer vector";
        goto LABEL_612;
      }
      if (v67 == 18 && v68 == 18)
      {
        int v193 = *(_DWORD *)(v65 + 32);
        int v194 = *(_DWORD *)(v66 + 32);
        if ((v186 != 19) == (*(_DWORD *)(*(void *)a2 + 8) == 19) || v193 != v194)
        {
          unint64_t v16 = "FPToUI source and dest vector length mismatch";
          goto LABEL_612;
        }
      }
      goto LABEL_584;
    case 0x46:
      uint64_t v69 = **((void **)a2 - 4);
      uint64_t v70 = *(void *)a2;
      int v71 = *(_DWORD *)(v69 + 8) & 0xFE;
      int v72 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      if ((v71 == 18) != (v72 == 18))
      {
        unint64_t v16 = "FPToSI source and dest must both be vector or scalar";
        goto LABEL_612;
      }
      int v196 = *(_DWORD *)(v69 + 8);
      LOBYTE(v197) = *(_DWORD *)(v69 + 8);
      if (v71 == 18) {
        int v197 = *(_DWORD *)(**(void **)(v69 + 16) + 8);
      }
      BOOL v198 = v197 < 4u || v197 == 5;
      int v199 = v197 & 0xFD;
      if (!v198 && v199 != 4)
      {
        unint64_t v16 = "FPToSI source must be FP or FP vector";
        goto LABEL_612;
      }
      int v201 = *(_DWORD *)(*(void *)a2 + 8);
      if (v72 == 18) {
        int v201 = *(unsigned __int8 *)(**(void **)(v70 + 16) + 8);
      }
      if (v201 != 13)
      {
        unint64_t v16 = "FPToSI result must be integer or integer vector";
        goto LABEL_612;
      }
      if (v71 == 18 && v72 == 18)
      {
        int v203 = *(_DWORD *)(v69 + 32);
        int v204 = *(_DWORD *)(v70 + 32);
        if ((v196 != 19) == (*(_DWORD *)(*(void *)a2 + 8) == 19) || v203 != v204)
        {
          unint64_t v16 = "FPToSI source and dest vector length mismatch";
          goto LABEL_612;
        }
      }
      goto LABEL_584;
    case 0x47:
      uint64_t v73 = **((void **)a2 - 4);
      uint64_t v74 = *(void *)a2;
      int v75 = *(_DWORD *)(v73 + 8) & 0xFE;
      int v76 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      if ((v75 == 18) != (v76 == 18))
      {
        unint64_t v16 = "UIToFP source and dest must both be vector or scalar";
        goto LABEL_612;
      }
      int v206 = *(_DWORD *)(v73 + 8);
      int v207 = v206;
      if (v75 == 18) {
        int v207 = *(unsigned __int8 *)(**(void **)(v73 + 16) + 8);
      }
      if (v207 != 13)
      {
        unint64_t v16 = "UIToFP source must be integer or integer vector";
        goto LABEL_612;
      }
      LOBYTE(v208) = *(_DWORD *)(*(void *)a2 + 8);
      if (v76 == 18) {
        int v208 = *(_DWORD *)(**(void **)(v74 + 16) + 8);
      }
      BOOL v209 = v208 < 4u || v208 == 5;
      int v210 = v208 & 0xFD;
      if (!v209 && v210 != 4)
      {
        unint64_t v16 = "UIToFP result must be FP or FP vector";
        goto LABEL_612;
      }
      if (v75 == 18 && v76 == 18)
      {
        int v213 = *(_DWORD *)(v73 + 32);
        int v214 = *(_DWORD *)(v74 + 32);
        if ((v206 != 19) == (*(_DWORD *)(*(void *)a2 + 8) == 19) || v213 != v214)
        {
          unint64_t v16 = "UIToFP source and dest vector length mismatch";
          goto LABEL_612;
        }
      }
      goto LABEL_584;
    case 0x48:
      uint64_t v77 = **((void **)a2 - 4);
      uint64_t v78 = *(void *)a2;
      int v79 = *(_DWORD *)(v77 + 8) & 0xFE;
      int v80 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      if ((v79 == 18) != (v80 == 18))
      {
        unint64_t v16 = "SIToFP source and dest must both be vector or scalar";
        goto LABEL_612;
      }
      int v216 = *(_DWORD *)(v77 + 8);
      int v217 = v216;
      if (v79 == 18) {
        int v217 = *(unsigned __int8 *)(**(void **)(v77 + 16) + 8);
      }
      if (v217 != 13)
      {
        unint64_t v16 = "SIToFP source must be integer or integer vector";
        goto LABEL_612;
      }
      LOBYTE(v218) = *(_DWORD *)(*(void *)a2 + 8);
      if (v80 == 18) {
        int v218 = *(_DWORD *)(**(void **)(v78 + 16) + 8);
      }
      BOOL v219 = v218 < 4u || v218 == 5;
      int v220 = v218 & 0xFD;
      if (!v219 && v220 != 4)
      {
        unint64_t v16 = "SIToFP result must be FP or FP vector";
        goto LABEL_612;
      }
      if (v79 == 18 && v80 == 18)
      {
        int v223 = *(_DWORD *)(v77 + 32);
        int v224 = *(_DWORD *)(v78 + 32);
        if ((v216 != 19) == (*(_DWORD *)(*(void *)a2 + 8) == 19) || v223 != v224)
        {
          unint64_t v16 = "SIToFP source and dest vector length mismatch";
          goto LABEL_612;
        }
      }
      goto LABEL_584;
    case 0x49:
      uint64_t v81 = (llvm::Type **)*((void *)a2 - 4);
      uint64_t v82 = *v81;
      uint64_t v83 = *(void *)a2;
      int v84 = *((_DWORD *)*v81 + 2);
      int v85 = v84 & 0xFE;
      uint64_t v86 = *v81;
      if (v85 == 18) {
        uint64_t v86 = (llvm::Type *)**((void **)v82 + 2);
      }
      unsigned int v87 = llvm::Type::getPrimitiveSizeInBits(v86);
      int v88 = *(_DWORD *)(v83 + 8);
      int v89 = v88 & 0xFE;
      unint64_t v90 = (llvm::Type *)v83;
      if (v89 == 18) {
        unint64_t v90 = **(llvm::Type ***)(v83 + 16);
      }
      unsigned int v91 = llvm::Type::getPrimitiveSizeInBits(v90);
      if (v85 == 18) {
        int v84 = *(_DWORD *)(**((void **)v82 + 2) + 8);
      }
      if (v84 >= 4u && v84 != 5 && (v84 & 0xFD) != 4)
      {
        unint64_t v39 = "FPTrunc only operates on FP";
        goto LABEL_815;
      }
      if (v89 == 18) {
        int v88 = *(_DWORD *)(**(void **)(v83 + 16) + 8);
      }
      if (v88 >= 4u && v88 != 5 && (v88 & 0xFD) != 4)
      {
        unint64_t v39 = "FPTrunc only produces an FP";
        goto LABEL_815;
      }
      if ((v85 == 18) != (v89 == 18))
      {
        unint64_t v39 = "fptrunc source and destination must both be a vector or neither";
        goto LABEL_815;
      }
      if (v87 > v91) {
        goto LABEL_584;
      }
      unint64_t v39 = "DestTy too big for FPTrunc";
      goto LABEL_815;
    case 0x4A:
      int v96 = (llvm::Type **)*((void *)a2 - 4);
      unint64_t v97 = *v96;
      uint64_t v98 = *(void *)a2;
      int v99 = *((_DWORD *)*v96 + 2);
      int v100 = v99 & 0xFE;
      uint64_t v101 = *v96;
      if (v100 == 18) {
        uint64_t v101 = (llvm::Type *)**((void **)v97 + 2);
      }
      unsigned int v102 = llvm::Type::getPrimitiveSizeInBits(v101);
      int v103 = *(_DWORD *)(v98 + 8);
      int v104 = v103 & 0xFE;
      int v105 = (llvm::Type *)v98;
      if (v104 == 18) {
        int v105 = **(llvm::Type ***)(v98 + 16);
      }
      unsigned int v106 = llvm::Type::getPrimitiveSizeInBits(v105);
      if (v100 == 18) {
        int v99 = *(_DWORD *)(**((void **)v97 + 2) + 8);
      }
      if (v99 >= 4u && v99 != 5 && (v99 & 0xFD) != 4)
      {
        unint64_t v39 = "FPExt only operates on FP";
        goto LABEL_815;
      }
      if (v104 == 18) {
        int v103 = *(_DWORD *)(**(void **)(v98 + 16) + 8);
      }
      if (v103 >= 4u && v103 != 5 && (v103 & 0xFD) != 4)
      {
        unint64_t v39 = "FPExt only produces an FP";
        goto LABEL_815;
      }
      if ((v100 == 18) != (v104 == 18))
      {
        unint64_t v39 = "fpext source and destination must both be a vector or neither";
        goto LABEL_815;
      }
      if (v102 < v106) {
        goto LABEL_584;
      }
      unint64_t v39 = "DestTy too small for FPExt";
      goto LABEL_815;
    case 0x4B:
      uint64_t v111 = **((void **)a2 - 4);
      int v112 = *(_DWORD *)(v111 + 8);
      int v113 = *(_DWORD *)(v111 + 8) & 0xFE;
      int v114 = v112;
      if (v113 == 18) {
        int v114 = *(unsigned __int8 *)(**(void **)(v111 + 16) + 8);
      }
      if (v114 != 15)
      {
        unint64_t v16 = "PtrToInt source must be pointer";
        goto LABEL_612;
      }
      uint64_t v115 = *(void *)a2;
      int v116 = *(_DWORD *)(*(void *)a2 + 8);
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        int v116 = *(unsigned __int8 *)(**(void **)(v115 + 16) + 8);
      }
      if (v116 != 13)
      {
        unint64_t v16 = "PtrToInt result must be integral";
        goto LABEL_612;
      }
      if ((v113 == 18) != ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18))
      {
        unint64_t v16 = "PtrToInt type mismatch";
        goto LABEL_612;
      }
      if (v113 != 18) {
        goto LABEL_584;
      }
      int v265 = *(_DWORD *)(v111 + 32);
      if ((v112 != 19) != (*(_DWORD *)(*(void *)a2 + 8) == 19) && v265 == *(_DWORD *)(v115 + 32)) {
        goto LABEL_584;
      }
      unint64_t v16 = "PtrToInt Vector width mismatch";
      goto LABEL_612;
    case 0x4C:
      uint64_t v117 = **((void **)a2 - 4);
      int v118 = *(_DWORD *)(v117 + 8);
      int v119 = *(_DWORD *)(v117 + 8) & 0xFE;
      int v120 = v118;
      if (v119 == 18) {
        int v120 = *(unsigned __int8 *)(**(void **)(v117 + 16) + 8);
      }
      if (v120 != 13)
      {
        unint64_t v16 = "IntToPtr source must be an integral";
        goto LABEL_612;
      }
      uint64_t v121 = *(void *)a2;
      int v122 = *(_DWORD *)(*(void *)a2 + 8);
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        int v122 = *(unsigned __int8 *)(**(void **)(v121 + 16) + 8);
      }
      if (v122 != 15)
      {
        unint64_t v16 = "IntToPtr result must be a pointer";
        goto LABEL_612;
      }
      if ((v119 == 18) != ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18))
      {
        unint64_t v16 = "IntToPtr type mismatch";
        goto LABEL_612;
      }
      if (v119 != 18) {
        goto LABEL_584;
      }
      int v267 = *(_DWORD *)(v117 + 32);
      if ((v118 != 19) != (*(_DWORD *)(*(void *)a2 + 8) == 19) && v267 == *(_DWORD *)(v121 + 32)) {
        goto LABEL_584;
      }
      unint64_t v16 = "IntToPtr Vector width mismatch";
      goto LABEL_612;
    case 0x4D:
      if (llvm::CastInst::castIsValid(49, **((void **)a2 - 4), *(void *)a2)) {
        goto LABEL_584;
      }
      v377 = "Invalid bitcast";
      v381[0] = 259;
      int v373 = a2;
      goto LABEL_173;
    case 0x4E:
      uint64_t v123 = **((void **)a2 - 4);
      int v124 = *(_DWORD *)(v123 + 8);
      int v125 = v124 & 0xFE;
      char v126 = v124;
      if (v125 == 18) {
        char v126 = *(unsigned char *)(**(void **)(v123 + 16) + 8);
      }
      if (v126 != 15)
      {
        unint64_t v16 = "AddrSpaceCast source must be a pointer";
        goto LABEL_612;
      }
      uint64_t v127 = *(void *)a2;
      int v128 = *(_DWORD *)(*(void *)a2 + 8);
      int v129 = v128;
      char v130 = v128;
      if ((v128 & 0xFE) == 0x12) {
        char v130 = *(unsigned char *)(**(void **)(v127 + 16) + 8);
      }
      if (v130 != 15)
      {
        unint64_t v16 = "AddrSpaceCast result must be a pointer";
        goto LABEL_612;
      }
      unsigned int v131 = *(_DWORD *)(v123 + 8);
      if (v125 == 18) {
        unsigned int v131 = *(_DWORD *)(**(void **)(v123 + 16) + 8);
      }
      if ((v128 & 0xFE) == 0x12) {
        int v129 = *(_DWORD *)(**(void **)(v127 + 16) + 8);
      }
      if ((v129 ^ v131) <= 0xFF)
      {
        unint64_t v16 = "AddrSpaceCast must be between different address spaces";
        goto LABEL_612;
      }
      if (v125 != 18) {
        goto LABEL_584;
      }
      int v269 = *(_DWORD *)(v123 + 32);
      if ((v124 != 19) != (v128 == 19) && v269 == *(_DWORD *)(v127 + 32)) {
        goto LABEL_584;
      }
      unint64_t v16 = "AddrSpaceCast vector pointer number of elements mismatch";
      goto LABEL_612;
    case 0x4F:
      uint64_t v132 = *((void *)a2 + 5);
      if ((*(_WORD *)(*(void *)(v132 + 56) + 18) & 8) == 0)
      {
        unint64_t v16 = "CleanupPadInst needs to be in a function with a personality.";
        goto LABEL_612;
      }
      uint64_t v226 = v132 + 40;
      uint64_t v227 = *(void *)(v132 + 48);
      while (2)
      {
        if (v227 == v226) {
          goto LABEL_541;
        }
        if (v227) {
          uint64_t v228 = v227 - 24;
        }
        else {
          uint64_t v228 = 0;
        }
        if (*(unsigned char *)(v228 + 16) == 83)
        {
          uint64_t v227 = *(void *)(v227 + 8);
          continue;
        }
        break;
      }
      if ((llvm::Instruction *)(v227 - 24) != a2)
      {
LABEL_541:
        unint64_t v16 = "CleanupPadInst not the first non-PHI instruction in the block.";
        goto LABEL_612;
      }
      unsigned int v297 = *(unsigned __int8 *)(*((void *)a2 - 4) + 16);
      if (v297 == 20) {
        goto LABEL_650;
      }
      if (v297 >= 0x1C && v297 - 79 < 2) {
        goto LABEL_650;
      }
      unint64_t v16 = "CleanupPadInst has an invalid parent.";
      goto LABEL_612;
    case 0x50:
      uint64_t v133 = *((void *)a2 + 5);
      if ((*(_WORD *)(*(void *)(v133 + 56) + 18) & 8) == 0)
      {
        unint64_t v16 = "CatchPadInst needs to be in a function with a personality.";
        goto LABEL_612;
      }
      unint64_t v229 = (unsigned char *)*((void *)a2 - 4);
      if (v229[16] != 38)
      {
        v377 = "CatchPadInst needs to be directly nested in a CatchSwitchInst.";
        v381[0] = 259;
        int v373 = v229;
        goto LABEL_494;
      }
      uint64_t v230 = v133 + 40;
      uint64_t v231 = *(void *)(v133 + 48);
      while (2)
      {
        if (v231 == v230) {
          goto LABEL_611;
        }
        if (v231) {
          uint64_t v232 = v231 - 24;
        }
        else {
          uint64_t v232 = 0;
        }
        if (*(unsigned char *)(v232 + 16) == 83)
        {
          uint64_t v231 = *(void *)(v231 + 8);
          continue;
        }
        break;
      }
      if ((llvm::Instruction *)(v231 - 24) != a2)
      {
LABEL_611:
        unint64_t v16 = "CatchPadInst not the first non-PHI instruction in the block.";
        goto LABEL_612;
      }
LABEL_650:
      return;
    case 0x51:
      uint64_t v134 = **((void **)a2 - 8);
      if (v134 != **((void **)a2 - 4))
      {
        unint64_t v16 = "Both operands to ICmp instruction are not of the same type!";
        goto LABEL_612;
      }
      if ((*(_DWORD *)(v134 + 8) & 0xFE) == 0x12) {
        int v236 = *(unsigned __int8 *)(**(void **)(v134 + 16) + 8);
      }
      else {
        int v236 = *(_DWORD *)(v134 + 8);
      }
      if (v236 == 13 || v236 == 15)
      {
        if ((*((_WORD *)a2 + 9) & 0x3Eu) - 32 < 0xA) {
          goto LABEL_584;
        }
        unint64_t v16 = "Invalid predicate in ICmp instruction!";
      }
      else
      {
        unint64_t v16 = "Invalid operand types for ICmp instruction";
      }
      goto LABEL_612;
    case 0x52:
      uint64_t v135 = **((void **)a2 - 8);
      if (v135 == **((void **)a2 - 4))
      {
        int v237 = *(_DWORD *)(v135 + 8);
        if ((v237 & 0xFE) == 0x12) {
          int v237 = *(_DWORD *)(**(void **)(v135 + 16) + 8);
        }
        if (v237 < 4u || v237 == 5 || (v237 & 0xFD) == 4)
        {
          if ((*((_WORD *)a2 + 9) & 0x30) == 0) {
            goto LABEL_584;
          }
          unint64_t v16 = "Invalid predicate in FCmp instruction!";
        }
        else
        {
          unint64_t v16 = "Invalid operand types for FCmp instruction";
        }
      }
      else
      {
        unint64_t v16 = "Both operands to FCmp instruction are not of the same type!";
      }
LABEL_612:
      v377 = v16;
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x53:
      uint64_t v136 = *((void *)a2 + 5);
      uint64_t v137 = *(void *)(v136 + 48);
      if (v137) {
        BOOL v138 = v137 - 24 == (void)a2;
      }
      else {
        BOOL v138 = 0;
      }
      if (!v138)
      {
        uint64_t v139 = *((void *)a2 + 3);
        uint64_t v140 = v139 ? v139 - 24 : 0;
        if (*(unsigned char *)(v140 + 16) != 83)
        {
          v377 = "PHI nodes not grouped at top of basic block!";
          v381[0] = 259;
          int v373 = a2;
          v368 = (llvm::Type **)v136;
          llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373, &v368);
          return;
        }
      }
      if (*(unsigned char *)(*(void *)a2 + 8) == 12)
      {
        unint64_t v26 = "PHI nodes cannot have token type!";
LABEL_204:
        v377 = v26;
        __int16 v141 = 259;
        goto LABEL_205;
      }
      if ((v4 & 0x40000000) != 0)
      {
        v240 = (void **)*((void *)a2 - 1);
        uint64_t v5 = v5;
      }
      else
      {
        uint64_t v5 = v5;
        v240 = (void **)((char *)a2 - 32 * v5);
      }
      if (!v5) {
        goto LABEL_584;
      }
      uint64_t v261 = 32 * v5;
      while (*(void *)a2 == **v240)
      {
        v240 += 4;
        v261 -= 32;
        if (!v261) {
          goto LABEL_584;
        }
      }
      v377 = "PHI node operands are not the same type as the result!";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x54:
      unsigned int v142 = *((unsigned __int16 *)a2 + 9);
      if ((v142 & 3) != 2) {
        return;
      }
      uint64_t v143 = *((void *)a2 - 4);
      int v144 = *(unsigned __int8 *)(v143 + 16);
      if (v144 == 24)
      {
        unint64_t v39 = "cannot use musttail call with inline asm";
        goto LABEL_815;
      }
      uint64_t v250 = *((void *)a2 + 5);
      uint64_t v251 = *(void *)(*(void *)(v250 + 56) + 24);
      uint64_t v252 = *((void *)a2 + 9);
      if (*(_DWORD *)(v251 + 8) > 0xFFu != *(_DWORD *)(v252 + 8) > 0xFFu)
      {
        unint64_t v39 = "cannot guarantee tail call due to mismatched varargs";
        goto LABEL_815;
      }
      uint64_t v364 = *(void *)(v250 + 56);
      int v271 = *(llvm::Type ***)(v251 + 16);
      uint64_t v272 = *(llvm::Type ***)(v252 + 16);
      if (!isTypeCongruent(*v271, *v272))
      {
        unint64_t v39 = "cannot guarantee tail call due to mismatched return types";
        goto LABEL_815;
      }
      if ((((*(unsigned __int16 *)(v364 + 18) >> 4) ^ (v142 >> 2)) & 0x3FF) != 0)
      {
        unint64_t v39 = "cannot guarantee tail call due to mismatched calling conv";
        goto LABEL_815;
      }
      uint64_t v309 = *((void *)a2 + 4);
      if (v309 == v250 + 40 || !v309) {
        goto LABEL_814;
      }
      uint64_t v310 = v309 - 24;
      if (*(unsigned char *)(v309 - 8) == 77)
      {
        int v373 = (void *)(v309 - 24);
        if (*(llvm::Instruction **)(v309 - 56) != a2)
        {
          v377 = "bitcast following musttail call must use the call";
          v381[0] = 259;
LABEL_173:
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
          return;
        }
        uint64_t v353 = *(void *)(v309 + 8);
        if (v353 == *(void *)(v309 + 16) + 40 || !v353) {
          goto LABEL_814;
        }
        v331 = (llvm::Instruction *)(v309 - 24);
        uint64_t v310 = v353 - 24;
      }
      else
      {
        v331 = a2;
      }
      if (*(unsigned char *)(v310 + 16) == 29)
      {
        v367 = (llvm::Type **)v310;
        uint64_t v332 = *(_DWORD *)(v310 + 20) & 0x7FFFFFF;
        if (v332)
        {
          v333 = *(llvm::Instruction **)(v310 - 32 * v332);
          BOOL v334 = !v333 || v333 == v331;
          if (!v334 && *((unsigned __int8 *)v333 + 16) - 11 >= 2)
          {
            v377 = "musttail call result must be returned";
            v381[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, &v367);
            return;
          }
        }
        uint64_t v362 = *(void *)(v364 + 112);
        uint64_t v363 = *((void *)a2 + 8);
        int v335 = (v142 >> 2) & 0x3FF;
        if (v335 == 20 || v335 == 18)
        {
          if (v335 == 18) {
            v336 = "tailcc";
          }
          else {
            v336 = "swifttailcc";
          }
          if (v335 == 18) {
            uint64_t v337 = 6;
          }
          else {
            uint64_t v337 = 11;
          }
          int v338 = *(_DWORD *)(v251 + 12);
          int v339 = v338 - 1;
          if (v338 != 1)
          {
            int v340 = 0;
            do
            {
              getParameterABIAttributes((uint64_t **)&v377, **(uint64_t ***)v364, v340, v362);
              v368 = (llvm::Type **)v336;
              uint64_t v369 = v337;
              v370 = " musttail caller";
              uint64_t v371 = 16;
              int v373 = &v375;
              *(_OWORD *)v374 = xmmword_261E8A6A0;
              llvm::SmallString<128u>::append(&v373, (uint64_t)&v368, 2);
              if (v373 != &v375) {
                free(v373);
              }
              if (v378 != &v380) {
                free(v378);
              }
              ++v340;
            }
            while (v339 != v340);
          }
          int v341 = *(_DWORD *)(v252 + 12);
          int v342 = v341 - 1;
          if (v341 != 1)
          {
            int v343 = 0;
            do
            {
              getParameterABIAttributes((uint64_t **)&v377, **(uint64_t ***)v364, v343, v363);
              v368 = (llvm::Type **)v336;
              uint64_t v369 = v337;
              v370 = " musttail callee";
              uint64_t v371 = 16;
              int v373 = &v375;
              *(_OWORD *)v374 = xmmword_261E8A6A0;
              llvm::SmallString<128u>::append(&v373, (uint64_t)&v368, 2);
              if (v373 != &v375) {
                free(v373);
              }
              if (v378 != &v380) {
                free(v378);
              }
              ++v343;
            }
            while (v342 != v343);
          }
          if (*(_DWORD *)(v251 + 8) > 0xFFu)
          {
            int v373 = "cannot guarantee ";
            v374[1] = (void *)v336;
            uint64_t v375 = v337;
            __int16 v376 = 1283;
            v377 = (const char *)&v373;
            uint64_t v379 = (uint64_t)" tail call for varargs function";
            __int16 v141 = 770;
LABEL_205:
            v381[0] = v141;
            llvm::VerifierSupport::CheckFailed(v3, (const llvm::Twine *)&v377);
          }
          return;
        }
        if (v144 || *(void *)(v143 + 24) != v252 || (*(unsigned char *)(v143 + 33) & 0x20) == 0)
        {
          int v354 = *(_DWORD *)(v251 + 12);
          if (v354 == *(_DWORD *)(v252 + 12))
          {
            uint64_t v355 = 0;
            uint64_t v356 = (v354 - 1);
            do
            {
              if (v356 == v355) {
                goto LABEL_827;
              }
              ++v355;
            }
            while (isTypeCongruent(v271[v355], v272[v355]));
            unint64_t v39 = "cannot guarantee tail call due to mismatched parameter types";
          }
          else
          {
            unint64_t v39 = "cannot guarantee tail call due to mismatched parameter counts";
          }
LABEL_815:
          v377 = v39;
          v381[0] = 259;
          int v373 = a2;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
          return;
        }
        LODWORD(v356) = *(_DWORD *)(v251 + 12) - 1;
LABEL_827:
        if (!v356) {
          return;
        }
        unsigned int v357 = 0;
        while (1)
        {
          getParameterABIAttributes((uint64_t **)&v377, **(uint64_t ***)v364, v357, v362);
          getParameterABIAttributes((uint64_t **)&v373, **(uint64_t ***)v364, v357, v363);
          if (v379 != LODWORD(v374[1])) {
            goto LABEL_840;
          }
          v358 = (int *)v378;
          if (v379) {
            break;
          }
LABEL_834:
          if (v374[0] != &v375)
          {
            free(v374[0]);
            v358 = (int *)v378;
          }
          if (v358 != &v380) {
            free(v358);
          }
          if (++v357 == v356) {
            return;
          }
        }
        uint64_t v359 = 8 * v379;
        v360 = v374[0];
        v361 = v378;
        while (*v361 == *v360)
        {
          ++v361;
          ++v360;
          v359 -= 8;
          if (!v359) {
            goto LABEL_834;
          }
        }
LABEL_840:
        v368 = (llvm::Type **)"cannot guarantee tail call due to mismatched ABI impacting function attributes";
        __int16 v372 = 259;
        v365 = (llvm::Type **)*((void *)a2 + 4 * v357 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v366 = (llvm::Type **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(v3, (const llvm::Twine *)&v368, &v366, &v365);
        if (v374[0] != &v375) {
          free(v374[0]);
        }
        v283 = (uint64_t *)v378;
        if (v378 == &v380) {
          return;
        }
LABEL_663:
        free(v283);
        return;
      }
LABEL_814:
      unint64_t v39 = "musttail call must precede a ret with an optional bitcast";
      goto LABEL_815;
    case 0x55:
      if (llvm::SelectInst::areInvalidOperands(*((uint64_t **)a2 - 12), *((uint64_t **)a2 - 8), *((void **)a2 - 4)))
      {
        unint64_t v39 = "Invalid operands for select instruction!";
        goto LABEL_815;
      }
      if (**((void **)a2 - 8) == *(void *)a2) {
        goto LABEL_584;
      }
      unint64_t v39 = "Select values must have same type as select instruction!";
      goto LABEL_815;
    case 0x56:
    case 0x57:
      unint64_t v8 = "User-defined operators should not live outside of a pass!";
      goto LABEL_12;
    case 0x58:
    case 0x5F:
      goto LABEL_584;
    case 0x59:
      if ((*(_DWORD *)(**((void **)a2 - 8) + 8) & 0xFE) == 0x12 && *(unsigned char *)(**((void **)a2 - 4) + 8) == 13) {
        goto LABEL_584;
      }
      v377 = "Invalid extractelement operands!";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x5A:
      uint64_t v145 = **((void **)a2 - 12);
      if ((*(_DWORD *)(v145 + 8) & 0xFE) == 0x12
        && **((void **)a2 - 8) == *(void *)(v145 + 24)
        && *(unsigned char *)(**((void **)a2 - 4) + 8) == 13)
      {
        goto LABEL_584;
      }
      v377 = "Invalid insertelement operands!";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x5B:
      if (llvm::ShuffleVectorInst::isValidOperands(*((uint64_t **)a2 - 8), *((void **)a2 - 4), *((int **)a2 + 8), *((unsigned int *)a2 + 18)))
      {
        goto LABEL_584;
      }
      v377 = "Invalid shufflevector operands!";
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x5C:
      if (llvm::ExtractValueInst::getIndexedType(**((void **)a2 - 4), *((unsigned int **)a2 + 8), *((unsigned int *)a2 + 18)) == *(void *)a2)goto LABEL_584; {
      v377 = "Invalid ExtractValueInst operands!";
      }
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x5D:
      if (llvm::ExtractValueInst::getIndexedType(**((void **)a2 - 8), *((unsigned int **)a2 + 8), *((unsigned int *)a2 + 18)) == **((void **)a2 - 4))goto LABEL_584; {
      v377 = "Invalid InsertValueInst operands!";
      }
      v381[0] = 259;
      int v373 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v3, (const llvm::Twine *)&v377, (llvm::Type ***)&v373);
      return;
    case 0x5E:
      if (!v5 && (*((_WORD *)a2 + 9) & 1) == 0)
      {
        unint64_t v39 = "LandingPadInst needs at least one clause or to be a cleanup.";
        goto LABEL_815;
      }
      uint64_t v150 = v3[99];
      uint64_t v151 = *(llvm::raw_ostream **)a2;
      if (v150)
      {
        if (v150 != v151)
        {
          unint64_t v39 = "The landingpad instruction should have a consistent result type inside a function.";
          goto LABEL_815;
        }
      }
      else
      {
        v3[99] = v151;
      }
      uint64_t v241 = *((void *)a2 + 5);
      if ((*(_WORD *)(*(void *)(v241 + 56) + 18) & 8) == 0)
      {
        unint64_t v39 = "LandingPadInst needs to be in a function with a personality.";
        goto LABEL_815;
      }
      uint64_t v253 = v241 + 40;
      uint64_t v254 = *(void *)(v241 + 48);
      while (2)
      {
        if (v254 == v253) {
          goto LABEL_630;
        }
        if (v254) {
          uint64_t v255 = v254 - 24;
        }
        else {
          uint64_t v255 = 0;
        }
        if (*(unsigned char *)(v255 + 16) == 83)
        {
          uint64_t v254 = *(void *)(v254 + 8);
          continue;
        }
        break;
      }
      if ((llvm::Instruction *)(v254 - 24) != a2 || *(unsigned char *)(v254 - 8) != 94)
      {
LABEL_630:
        unint64_t v39 = "LandingPadInst not the first non-PHI instruction in the block.";
        goto LABEL_815;
      }
      int v284 = *((_DWORD *)a2 + 5);
      uint64_t v285 = v284 & 0x7FFFFFF;
      if ((v284 & 0x7FFFFFF) == 0) {
        goto LABEL_584;
      }
      uint64_t v286 = 0;
      uint64_t v287 = 32 * v285;
      v288 = (char *)a2 - 32 * v285;
      while (1)
      {
        if ((v284 & 0x40000000) != 0) {
          uint64_t v289 = *(unsigned __int8 **)(*((void *)a2 - 1) + v286);
        }
        else {
          uint64_t v289 = *(unsigned __int8 **)&v288[v286];
        }
        int v290 = *(unsigned __int8 *)(*(void *)v289 + 8);
        if (v290 == 17)
        {
          int v291 = v289[16];
          if (v291 != 8 && v291 != 13)
          {
            unint64_t v39 = "Filter operand is not an array of constants!";
            goto LABEL_815;
          }
        }
        else if (v290 != 15)
        {
          unint64_t v39 = "Catch operand does not have pointer type!";
          goto LABEL_815;
        }
        v286 += 32;
        if (v287 == v286)
        {
LABEL_584:
          goto LABEL_586;
        }
      }
    default:
      uint64_t v9 = **(void **)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 24) + 16);
      if (*(unsigned char *)(v9 + 8) == 7)
      {
        if (v5)
        {
          unint64_t v10 = "Found return instr that returns non-void in Function of void return type!";
LABEL_240:
          v377 = v10;
          v381[0] = 259;
          int v373 = a2;
          v368 = (llvm::Type **)v9;
          llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(this, (const llvm::Twine *)&v377, (llvm::Type ***)&v373, (llvm::Type **)&v368);
          return;
        }
      }
      else if (v5 != 1 || v9 != **((void **)a2 - 4))
      {
        unint64_t v10 = "Function return type does not match operand type of return inst!";
        goto LABEL_240;
      }
LABEL_231:
      return;
  }
}

void anonymous namespace'::Verifier::visitTerminator(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v3 != v2 + 40
    && ((v4 = (llvm::Instruction *)(v3 - 24), v3) ? (uint64_t v5 = v3 - 24) : (uint64_t v5 = 0),
        *(unsigned __int8 *)(v5 + 16) - 29 <= 0xA ? (BOOL v6 = v4 == a2) : (BOOL v6 = 0),
        v6))
  {
  }
  else
  {
    unint64_t v7 = (llvm::Type **)*((void *)a2 + 5);
    unint64_t v8 = "Terminator found in the middle of a basic block!";
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v8, &v7);
  }
}

void anonymous namespace'::Verifier::visitInstruction(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 5);
  if (!v4)
  {
    unint64_t v8 = "Instruction not embedded in basic block!";
    goto LABEL_330;
  }
  if (*((unsigned char *)a2 + 16) != 83)
  {
    for (uint64_t i = *((void *)a2 + 1); i; uint64_t i = *(void *)(i + 8))
    {
      if (*(llvm::Instruction **)(i + 24) == a2)
      {
        uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 224, v4);
        if (*((void *)this + 28) + 16 * *((unsigned int *)this + 60) != v6)
        {
          if (*(void *)(v6 + 8))
          {
            unint64_t v8 = "Only PHI nodes may reference their own value!";
            goto LABEL_330;
          }
        }
      }
    }
  }
  int v7 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if (v7 == 14)
  {
    unint64_t v8 = "Instruction returns a non-scalar type!";
    goto LABEL_330;
  }
  if (v7 == 9)
  {
    int v9 = *((unsigned __int8 *)a2 + 16);
    if (v9 != 33 && v9 != 84)
    {
      unint64_t v8 = "Invalid use of metadata!";
      goto LABEL_330;
    }
  }
  else if (v7 == 7 && (*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    unint64_t v8 = "Instruction has a name, but provides a void value!";
    goto LABEL_330;
  }
  for (uint64_t j = *((void *)a2 + 1); j; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v11 = *(void *)(j + 24);
    if (*(unsigned __int8 *)(v11 + 16) <= 0x1Bu) {
      uint64_t v11 = 0;
    }
    __int16 v141 = (llvm::Type **)v11;
    if (!v11)
    {
      unsigned int v146 = "Use of instruction is not an instruction!";
      __int16 v150 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v146);
      if (*(void *)this && *(void *)j) {
        llvm::VerifierSupport::Write((uint64_t ***)this, *(llvm::Type ***)j);
      }
      return;
    }
    if (!*(void *)(v11 + 40))
    {
      unsigned int v146 = "Instruction referencing instruction not embedded in a basic block!";
      __int16 v150 = 259;
      uint64_t v133 = (llvm::Type **)a2;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, &v133, &v141);
      return;
    }
  }
  unsigned int v12 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v13 = v12 > 0x33;
  uint64_t v14 = (1 << v12) & 0x8000000000041;
  if (v13 || v14 == 0) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a2;
  }
  int v17 = *((_DWORD *)a2 + 5);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = (llvm::CallBase *)((char *)v16 - 32);
    do
    {
      int v22 = *((_DWORD *)a2 + 5);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v23 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = *(void *)&v23[v19];
      if (!v24)
      {
        unint64_t v8 = "Instruction has null operand!";
        goto LABEL_330;
      }
      int v25 = *(unsigned __int8 *)(*(void *)v24 + 8);
      if (v25 == 14 || v25 == 7)
      {
        unint64_t v8 = "Instruction operands must be first-class values!";
        goto LABEL_330;
      }
      if ((v22 & 0x40000000) != 0) {
        uint64_t v27 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v27 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v28 = *(void *)&v27[v19];
      if (*(unsigned char *)(v28 + 16)) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28;
      }
      __int16 v141 = (llvm::Type **)v29;
      if (v29)
      {
        if ((*(unsigned char *)(v29 + 33) & 0x20) == 0) {
          goto LABEL_52;
        }
        if (!v16) {
          goto LABEL_141;
        }
        unsigned int v38 = (v22 & 0x40000000) != 0
            ? (llvm::Instruction *)*((void *)a2 - 1)
            : (llvm::Instruction *)((char *)a2 - 32 * (v22 & 0x7FFFFFF));
        if ((llvm::Instruction *)((char *)v38 + v19) != v21)
        {
          if (!llvm::CallBase::isOperandBundleOfType(v16, 6, v20))
          {
LABEL_141:
            uint64_t v55 = "Cannot take the address of an intrinsic!";
            goto LABEL_142;
          }
          if ((*(_DWORD *)(v29 + 32) & 0x2000) == 0) {
            goto LABEL_52;
          }
        }
        if (*((unsigned char *)a2 + 16) == 84) {
          goto LABEL_52;
        }
        int v40 = *(_DWORD *)(v29 + 36);
        if (v40 > 268)
        {
          if ((v40 - 269) < 4 || v40 == 10148)
          {
LABEL_52:
            uint64_t v30 = (llvm::Type **)*((void *)this + 1);
            if (*(llvm::Type ***)(v29 + 40) != v30)
            {
              uint64_t v145 = *(const llvm::Module **)(v29 + 40);
              unsigned int v146 = "Referencing function in another module!";
              __int16 v150 = 259;
              uint64_t v133 = (llvm::Type **)a2;
              uint64_t v137 = v30;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, &v133, (const llvm::Module **)&v137, &v141, &v145);
              return;
            }
            goto LABEL_116;
          }
        }
        else
        {
          if (v40 <= 0x3D && ((1 << v40) & 0x2000200080000000) != 0) {
            goto LABEL_52;
          }
          unsigned int v42 = v40 - 125;
          BOOL v13 = v42 > 4;
          int v43 = (1 << v42) & 0x19;
          if (!v13 && v43 != 0) {
            goto LABEL_52;
          }
        }
        if (!llvm::CallBase::isOperandBundleOfType(v16, 6, v20))
        {
          uint64_t v55 = "Cannot invoke an intrinsic other than donothing, patchpoint, statepoint, coro_resume, coro_destroy or cl"
                "ang.arc.attachedcall";
          goto LABEL_142;
        }
        goto LABEL_52;
      }
      if ((v22 & 0x40000000) != 0)
      {
        uint64_t v32 = *(void *)(*((void *)a2 - 1) + v19);
        unsigned int v39 = *(unsigned __int8 *)(v32 + 16);
        if (!v32 || v39 != 22)
        {
          if (v39 != 21)
          {
            if (v39 >= 4) {
              int v46 = 0;
            }
            else {
              int v46 = *(llvm::Type ***)(*((void *)a2 - 1) + v19);
            }
            uint64_t v133 = v46;
            if (v46)
            {
LABEL_106:
              int v47 = *(const llvm::Module **)(v32 + 40);
              if (v47 != *((const llvm::Module **)this + 1))
              {
                uint64_t v145 = (const llvm::Module *)*((void *)this + 1);
                unsigned int v146 = "Referencing global in another module!";
                __int16 v150 = 259;
                uint64_t v137 = (llvm::Type **)a2;
                uint64_t v140 = v47;
                llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, &v137, &v145, &v133, &v140);
                return;
              }
              goto LABEL_116;
            }
            BOOL v31 = (char *)*((void *)a2 - 1);
            int v36 = *(unsigned __int8 **)&v31[v19];
            unsigned int v37 = v36[16];
            if (v37 < 0x1C)
            {
LABEL_65:
              if (v37 == 24)
              {
                if (!v16 || &v31[v19] != (char *)v21)
                {
                  unsigned int v146 = "Cannot take the address of an inline asm!";
                  __int16 v150 = 259;
                  uint64_t v137 = (llvm::Type **)a2;
                  int v56 = &v137;
                  goto LABEL_331;
                }
              }
              else if (v37 == 5)
              {
                int v48 = (*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12
                    ? *(unsigned __int8 *)(**(void **)(*(void *)v36 + 16) + 8)
                    : *(_DWORD *)(*(void *)v36 + 8);
                if (v48 == 15) {
              }
                }
              goto LABEL_116;
            }
            goto LABEL_109;
          }
          goto LABEL_94;
        }
      }
      else
      {
        BOOL v31 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
        uint64_t v32 = *(void *)&v31[v19];
        unsigned int v33 = *(unsigned __int8 *)(v32 + 16);
        if (v32) {
          BOOL v34 = v33 == 22;
        }
        else {
          BOOL v34 = 0;
        }
        if (!v34)
        {
          if (v33 != 21)
          {
            if (v33 >= 4) {
              uint64_t v35 = 0;
            }
            else {
              uint64_t v35 = *(llvm::Type ***)&v31[v19];
            }
            uint64_t v133 = v35;
            if (v35) {
              goto LABEL_106;
            }
            int v36 = *(unsigned __int8 **)&v31[v19];
            unsigned int v37 = v36[16];
            if (v37 <= 0x1B) {
              goto LABEL_65;
            }
LABEL_109:
            goto LABEL_116;
          }
LABEL_94:
          if (*(void *)(v32 + 24) != *(void *)(v4 + 56))
          {
            uint64_t v55 = "Referring to an argument in another function!";
            goto LABEL_142;
          }
          goto LABEL_116;
        }
      }
      if (*(void *)(v32 + 56) != *(void *)(v4 + 56))
      {
        uint64_t v55 = "Referring to a basic block in another function!";
LABEL_142:
        unsigned int v146 = v55;
        __int16 v150 = 259;
        uint64_t v133 = (llvm::Type **)a2;
        int v56 = &v133;
        goto LABEL_331;
      }
LABEL_116:
      ++v20;
      v19 += 32;
    }
    while (v18 != v20);
  }
  if (!*((void *)a2 + 6) && (*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_151;
  }
  uint64_t Metadata = llvm::Value::getMetadata(a2, 3);
  if (!Metadata) {
    goto LABEL_151;
  }
  int v50 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v50 & 0xFE) == 0x12) {
    int v50 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v50 >= 4u && v50 != 5 && (v50 & 0xFD) != 4)
  {
    unint64_t v8 = "fpmath requires a floating point result!";
    goto LABEL_330;
  }
  unint64_t v51 = *(void *)(Metadata - 16);
  if ((v51 & 2) != 0)
  {
    if (*(_DWORD *)(Metadata - 24) == 1)
    {
      int v52 = *(uint64_t **)(Metadata - 32);
      goto LABEL_131;
    }
LABEL_136:
    unint64_t v8 = "fpmath takes one operand!";
    goto LABEL_330;
  }
  if ((*(void *)(Metadata - 16) & 0x3C0) != 0x40) {
    goto LABEL_136;
  }
  int v52 = (uint64_t *)(Metadata - 16 - 8 * ((v51 >> 2) & 0xF));
LABEL_131:
  uint64_t v53 = *v52;
  if (!v53 || *(unsigned char *)v53 != 1 || (uint64_t v54 = *(void *)(v53 + 128), *(unsigned char *)(v54 + 16) != 17))
  {
    unint64_t v8 = "invalid fpmath accuracy!";
    goto LABEL_330;
  }
  if (*(_UNKNOWN **)(v54 + 32) != &llvm::semIEEEsingle)
  {
    unint64_t v8 = "fpmath accuracy must have float type";
    goto LABEL_330;
  }
  char v57 = *(unsigned char *)(v54 + 52);
  int v58 = v57 & 6;
  int v59 = v57 & 7;
  int v60 = v57 & 8;
  if (v58) {
    BOOL v61 = v59 == 3;
  }
  else {
    BOOL v61 = 1;
  }
  if (v61 || v60 != 0)
  {
    unint64_t v8 = "fpmath accuracy not a positive number!";
    goto LABEL_330;
  }
LABEL_151:
  if (!*((void *)a2 + 6) && (*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_164;
  }
  unsigned int v63 = (const llvm::Module *)llvm::Value::getMetadata(a2, 4);
  if (!v63) {
    goto LABEL_164;
  }
  unsigned int v64 = *((unsigned __int8 *)a2 + 16) - 33;
  if (v64 > 0x33 || ((1 << v64) & 0x8000008000001) == 0)
  {
    unint64_t v8 = "Ranges are only for loads, calls and invokes!";
    goto LABEL_330;
  }
  uint64_t v65 = v63;
  uint64_t v66 = *(void *)a2;
  uint64_t v145 = v63;
  int v68 = (void *)((char *)v63 - 16);
  uint64_t v67 = *((void *)v63 - 2);
  if ((v67 & 2) != 0) {
    unsigned int v69 = *((_DWORD *)v63 - 6);
  }
  else {
    unsigned int v69 = (v67 >> 6) & 0xF;
  }
  if (v69)
  {
    uint64_t v70 = "Unfinished range!";
    goto LABEL_163;
  }
  if (v69 <= 1)
  {
    uint64_t v70 = "It should have at least one range!";
LABEL_163:
    unsigned int v146 = v70;
    __int16 v150 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, (uint64_t *)&v145);
    goto LABEL_164;
  }
  unsigned int v128 = v69;
  unsigned int v74 = v69 >> 1;
  llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)&v141, 1u, 1);
  unint64_t v75 = 0;
  int v129 = v68;
  uint64_t v130 = 16 * v74;
  uint64_t v131 = v66;
  do
  {
    unint64_t v76 = *v68;
    if ((*v68 & 2) != 0) {
      uint64_t v77 = (void *)*((void *)v65 - 4);
    }
    else {
      uint64_t v77 = &v68[-((v76 >> 2) & 0xF)];
    }
    uint64_t v78 = v77[v75 / 8];
    if (*(unsigned char *)v78 != 1 || (uint64_t v79 = *(void *)(v78 + 128), *(unsigned char *)(v79 + 16) != 16))
    {
      uint64_t v140 = 0;
      unsigned int v146 = "The lower limit must be an integer!";
      __int16 v150 = 259;
      int v100 = (llvm::Type ***)&v140;
LABEL_272:
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, v100);
      goto LABEL_274;
    }
    if ((v76 & 2) != 0) {
      int v80 = (void *)*((void *)v65 - 4);
    }
    else {
      int v80 = &v68[-((v76 >> 2) & 0xF)];
    }
    uint64_t v81 = v80[v75 / 8 + 1];
    if (*(unsigned char *)v81 != 1 || (uint64_t v82 = *(void *)(v81 + 128), *(unsigned char *)(v82 + 16) != 16))
    {
      uint64_t v139 = 0;
      unsigned int v146 = "The upper limit must be an integer!";
      __int16 v150 = 259;
      int v100 = (llvm::Type ***)&v139;
      goto LABEL_272;
    }
    if (*(void *)v82 != *(void *)v79) {
      goto LABEL_273;
    }
    uint64_t v83 = v66;
    if ((*(_DWORD *)(v66 + 8) & 0xFE) == 0x12) {
      uint64_t v83 = **(void **)(v66 + 16);
    }
    if (*(void *)v82 != v83)
    {
LABEL_273:
      unsigned int v146 = "Range types must match instruction type!";
      __int16 v150 = 259;
      uint64_t v133 = (llvm::Type **)a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, &v133);
      goto LABEL_274;
    }
    unsigned int v84 = *(_DWORD *)(v82 + 32);
    if (v84 > 0x40) {
      operator new[]();
    }
    uint64_t __src = *(void **)(v82 + 24);
    unsigned int v85 = *(_DWORD *)(v79 + 32);
    unsigned int v138 = v85;
    if (v85 > 0x40) {
      operator new[]();
    }
    unsigned int v87 = *(llvm::Type ***)(v79 + 24);
    uint64_t v86 = v87;
    uint64_t v137 = v87;
    unsigned int v134 = v85;
    uint64_t v133 = v87;
    unsigned int v136 = v84;
    uint64_t v135 = __src;
    if (llvm::ConstantRange::isEmptySet((const void **)&v133) || llvm::ConstantRange::isFullSet((const void **)&v133))
    {
      int v88 = "Range must not be empty!";
LABEL_202:
      unsigned int v146 = v88;
      __int16 v150 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, (uint64_t *)&v145);
      char v89 = 0;
      goto LABEL_203;
    }
    if (v75)
    {
      llvm::ConstantRange::intersectWith((const void **)&v133, (const void **)&v141, 0, (uint64_t)&v146);
      BOOL isEmptySet = llvm::ConstantRange::isEmptySet((const void **)&v146);
      if (v149 >= 0x41 && v148) {
        MEMORY[0x263E50080](v148, 0x1000C8000313F17);
      }
      if (v147 >= 0x41 && v146) {
        MEMORY[0x263E50080](v146, 0x1000C8000313F17);
      }
      if (!isEmptySet)
      {
        int v88 = "Intervals are overlapping";
        goto LABEL_202;
      }
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v137, (const llvm::APInt *)&v141) <= 0)
      {
        int v88 = "Intervals are not in order";
        goto LABEL_202;
      }
      if (isContiguous((const void **)&v133, (const void **)&v141))
      {
        int v88 = "Intervals are contiguous";
        goto LABEL_202;
      }
    }
    if (v142 >= 0x41 && v141) {
      MEMORY[0x263E50080](v141, 0x1000C8000313F17);
    }
    __int16 v141 = v86;
    unsigned int v142 = v85;
    if (v144 >= 0x41 && v143) {
      MEMORY[0x263E50080](v143, 0x1000C8000313F17);
    }
    uint64_t v143 = __src;
    unsigned int v144 = v84;
    char v89 = 1;
LABEL_203:
    if (v136 >= 0x41 && v135) {
      MEMORY[0x263E50080](v135, 0x1000C8000313F17);
    }
    if (v134 >= 0x41 && v133) {
      MEMORY[0x263E50080](v133, 0x1000C8000313F17);
    }
    uint64_t v66 = v131;
    if ((v89 & 1) == 0) {
      goto LABEL_274;
    }
    v75 += 16;
  }
  while (v130 != v75);
  if (v128 >= 6)
  {
    unint64_t v115 = *v68;
    if ((*v68 & 2) != 0) {
      int v116 = (void *)*((void *)v65 - 4);
    }
    else {
      int v116 = &v68[-((v115 >> 2) & 0xF)];
    }
    uint64_t v117 = *(void *)(*v116 + 128);
    if (*(unsigned char *)(v117 + 16) == 16) {
      uint64_t v118 = v117;
    }
    else {
      uint64_t v118 = 0;
    }
    unsigned int v119 = *(_DWORD *)(v118 + 32);
    if (v119 > 0x40) {
      operator new[]();
    }
    int v120 = *(llvm::Type ***)(v118 + 24);
    if ((v115 & 2) != 0) {
      uint64_t v121 = (void *)*((void *)v65 - 4);
    }
    else {
      uint64_t v121 = &v129[-((v115 >> 2) & 0xF)];
    }
    uint64_t v122 = *(void *)(v121[1] + 128);
    if (*(unsigned char *)(v122 + 16) == 16) {
      uint64_t v123 = v122;
    }
    else {
      uint64_t v123 = 0;
    }
    unsigned int v124 = *(_DWORD *)(v123 + 32);
    if (v124 > 0x40) {
      operator new[]();
    }
    int v125 = *(void **)(v123 + 24);
    unsigned int v134 = v119;
    uint64_t v133 = v120;
    unsigned int v136 = v124;
    uint64_t v135 = v125;
    llvm::ConstantRange::intersectWith((const void **)&v133, (const void **)&v141, 0, (uint64_t)&v146);
    BOOL v126 = llvm::ConstantRange::isEmptySet((const void **)&v146);
    if (v149 >= 0x41 && v148) {
      MEMORY[0x263E50080](v148, 0x1000C8000313F17);
    }
    if (v147 >= 0x41 && v146) {
      MEMORY[0x263E50080](v146, 0x1000C8000313F17);
    }
    if (v126)
    {
      if (isContiguous((const void **)&v133, (const void **)&v141))
      {
        uint64_t v127 = "Intervals are contiguous";
        goto LABEL_363;
      }
    }
    else
    {
      uint64_t v127 = "Intervals are overlapping";
LABEL_363:
      unsigned int v146 = v127;
      __int16 v150 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, (uint64_t *)&v145);
    }
    if (v136 >= 0x41 && v135) {
      MEMORY[0x263E50080](v135, 0x1000C8000313F17);
    }
    if (v134 >= 0x41 && v133) {
      MEMORY[0x263E50080](v133, 0x1000C8000313F17);
    }
  }
LABEL_274:
  if (v144 >= 0x41 && v143) {
    MEMORY[0x263E50080](v143, 0x1000C8000313F17);
  }
  if (v142 >= 0x41 && v141) {
    MEMORY[0x263E50080](v141, 0x1000C8000313F17);
  }
LABEL_164:
  if ((*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
    && llvm::Value::getMetadata(a2, 16)
    && (*((unsigned char *)a2 + 16) & 0xFE) != 0x3C)
  {
    unint64_t v8 = "invariant.group metadata is only for loads and stores";
    goto LABEL_330;
  }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v71 = llvm::Value::getMetadata(a2, 11);
    if (v71)
    {
      if (*(unsigned char *)(*(void *)a2 + 8) != 15)
      {
        unint64_t v8 = "nonnull applies only to pointer types";
        goto LABEL_330;
      }
      if (*((unsigned char *)a2 + 16) != 60)
      {
        unint64_t v8 = "nonnull applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_330;
      }
      uint64_t v72 = *(void *)(v71 - 16);
      if ((v72 & 2) != 0 ? *(_DWORD *)(v71 - 24) : (v72 >> 6) & 0xF)
      {
        unint64_t v8 = "nonnull metadata must be empty";
        goto LABEL_330;
      }
    }
  }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unsigned int v91 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 12);
    if (v91) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v92 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 13);
    if (v92) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unint64_t v93 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 1);
    if (v93) {
      llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream ***)this + 248, (llvm::Type **)a2, v93);
    }
  }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unint64_t v94 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 8);
    if (v94) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unint64_t v95 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 7);
    if (v95) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    int v96 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 25);
    if (v96) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v97 = llvm::Value::getMetadata(a2, 17);
    if (v97)
    {
      if (*(unsigned char *)(*(void *)a2 + 8) != 15)
      {
        unint64_t v8 = "align applies only to pointer types";
        goto LABEL_330;
      }
      if (*((unsigned char *)a2 + 16) != 60)
      {
        unint64_t v8 = "align applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_330;
      }
      unint64_t v98 = *(void *)(v97 - 16);
      if ((v98 & 2) != 0)
      {
        if (*(_DWORD *)(v97 - 24) == 1)
        {
          int v99 = *(uint64_t **)(v97 - 32);
          goto LABEL_282;
        }
      }
      else if ((*(void *)(v97 - 16) & 0x3C0) == 0x40)
      {
        int v99 = (uint64_t *)(v97 - 16 - 8 * ((v98 >> 2) & 0xF));
LABEL_282:
        uint64_t v101 = *v99;
        if (*(unsigned char *)v101 == 1
          && (unsigned int v102 = *(int8x8_t **)(v101 + 128), v102[2].i8[0] == 16)
          && *(_DWORD *)(*(void *)v102 + 8) == 16397)
        {
          int v103 = v102 + 3;
          if (v102[4].i32[0] >= 0x41u) {
            int v103 = (int8x8_t *)*v103;
          }
          uint8x8_t v104 = (uint8x8_t)vcnt_s8(*v103);
          v104.i16[0] = vaddlv_u8(v104);
          if (v104.u32[0] == 1)
          {
            if (*(void *)v103 < 0x100000001uLL) {
              goto LABEL_289;
            }
            unint64_t v8 = "alignment is larger that implementation defined limit";
          }
          else
          {
            unint64_t v8 = "align metadata value must be a power of 2!";
          }
        }
        else
        {
          unint64_t v8 = "align metadata value must be an i64!";
        }
LABEL_330:
        unsigned int v146 = v8;
        __int16 v150 = 259;
        __int16 v141 = (llvm::Type **)a2;
        int v56 = &v141;
LABEL_331:
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, v56);
        return;
      }
      unint64_t v8 = "align takes one operand!";
      goto LABEL_330;
    }
  }
LABEL_289:
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    int v105 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 2);
    if (v105) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unsigned int v106 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 34);
    if (v106) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v107 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 35);
    if (v107) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    unint64_t v108 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 38);
    if (v108) {
  }
    }
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v109 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 30);
    if (v109) {
  }
    }
  unsigned int v110 = (llvm::Type **)*((void *)a2 + 6);
  __int16 v141 = v110;
  if (v110)
  {
    if (*(unsigned char *)v110 != 5)
    {
      unsigned int v146 = "invalid !dbg metadata attachment";
      __int16 v150 = 259;
      uint64_t v133 = (llvm::Type **)a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v146, &v133, (uint64_t *)&v141);
      return;
    }
  }
  if (llvm::DbgVariableIntrinsic::classof((uint64_t)a2))
  {
  }
  unsigned int v146 = &v148;
  uint64_t v147 = 0x400000000;
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (unsigned int *)&v146);
    if (v147)
    {
      uint64_t v111 = (char *)v146;
      int v112 = (char *)v146 + 16 * v147;
      do
      {
        if (*(_DWORD *)v111) {
          BOOL v113 = *(_DWORD *)v111 == 18;
        }
        else {
          BOOL v113 = 1;
        }
        uint64_t v114 = v113;
        v111 += 16;
      }
      while (v111 != v112);
    }
  }
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((_anonymous_namespace_::Verifier *)((char *)this + 272), a2, (uint64_t)&v141);
  if (v146 != &v148) {
    free(v146);
  }
}

llvm::VerifierSupport *llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, const llvm::Module **a4, llvm::Type ***a5, const llvm::Module **a6)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  BOOL result = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
      BOOL result = *a1;
    }
    llvm::VerifierSupport::Write(result, *a4);
    if (*a5) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a5);
    }
    unsigned int v12 = *a6;
    BOOL v13 = *a1;
    return llvm::VerifierSupport::Write(v13, v12);
  }
  return result;
}

void anonymous namespace'::Verifier::verifyDominatesUse(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2, int a3)
{
  int v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0) {
    int v7 = (char *)*((void *)a2 - 1);
  }
  else {
    int v7 = (char *)a2 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v8 = *(void *)&v7[32 * a3];
  unint64_t v16 = (llvm::Type **)v8;
  if (v8 && *(unsigned char *)(v8 + 16) == 33 && *(void *)(v8 - 96) == *(void *)(v8 - 64)) {
    return;
  }
  if (*((unsigned char *)a2 + 16) == 83) {
    goto LABEL_12;
  }
  imp = llvm::SmallPtrSetImplBase::find_imp((_anonymous_namespace_::Verifier *)((char *)this + 272), (const void *)v8);
  uint64_t v10 = *((void *)this + 35);
  uint64_t v11 = 288;
  if (v10 == *((void *)this + 34)) {
    uint64_t v11 = 292;
  }
  if (imp == (const void **)(v10 + 8 * *(unsigned int *)((char *)this + v11)))
  {
    int v6 = *((_DWORD *)a2 + 5);
LABEL_12:
    if ((v6 & 0x40000000) != 0) {
      unsigned int v12 = (char *)*((void *)a2 - 1);
    }
    else {
      unsigned int v12 = (char *)a2 - 32 * (v6 & 0x7FFFFFF);
    }
    if ((llvm::DominatorTree::dominates((uint64_t)this + 200, v8, (uint64_t)&v12[32 * a3]) & 1) == 0)
    {
      BOOL v13 = (llvm::Type **)a2;
      uint64_t v14 = "Instruction does not dominate all uses!";
      __int16 v15 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v14, &v16, &v13);
    }
  }
}

void anonymous namespace'::Verifier::visitConstantExprsRecursively(llvm::raw_ostream **this, const llvm::Constant *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::SmallPtrSetImplBase *)(this + 116);
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(this + 116), a2, (uint64_t)&v22);
  if (!v24[0]) {
    return;
  }
  int v22 = v24;
  uint64_t v23 = 0x1000000000;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v22, (uint64_t)a2);
  unsigned int v5 = v23;
  if (!v23) {
    goto LABEL_38;
  }
  while (1)
  {
    uint64_t v6 = *((void *)v22 + v5 - 1);
    LODWORD(v23) = v5 - 1;
    unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    if (v6) {
      BOOL v8 = v7 == 5;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      if (*(_WORD *)(v6 + 18) == 49
        && (llvm::CastInst::castIsValid(49, **(void **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)), *(void *)v6) & 1) == 0)
      {
        v19[0] = "Invalid bitcast";
        __int16 v21 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v19);
        if (*this) {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v6);
        }
      }
      unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    }
    if (v6 && v7 <= 3) {
      break;
    }
    int v10 = *(_DWORD *)(v6 + 20);
    if ((v10 & 0x40000000) != 0)
    {
      unsigned int v12 = *(const void ***)(v6 - 8);
      uint64_t v11 = v10 & 0x7FFFFFF;
      if (v11)
      {
LABEL_24:
        uint64_t v15 = 32 * v11;
        do
        {
          uint64_t v16 = (uint64_t)*v12;
          if (*v12) {
            BOOL v17 = *((unsigned __int8 *)*v12 + 16) > 0x14u;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17)
          {
            llvm::SmallPtrSetImpl<llvm::Value *>::insert(v4, *v12, (uint64_t)v19);
            if (v20) {
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v22, v16);
            }
          }
          v12 += 4;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      uint64_t v11 = v10 & 0x7FFFFFF;
      unsigned int v12 = (const void **)(v6 - 32 * v11);
      if (v11) {
        goto LABEL_24;
      }
    }
LABEL_32:
    unsigned int v5 = v23;
    if (!v23) {
      goto LABEL_38;
    }
  }
  BOOL v13 = *(const llvm::Module **)(v6 + 40);
  uint64_t v14 = this[1];
  if (v13 == v14) {
    goto LABEL_32;
  }
  v19[0] = "Referencing global in another module!";
  __int16 v21 = 259;
  llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v19);
  uint64_t v18 = *this;
  if (*this)
  {
    if (a2)
    {
      llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
      uint64_t v18 = *this;
    }
    llvm::VerifierSupport::Write(v18, v14);
    llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v6);
    llvm::VerifierSupport::Write(*this, v13);
  }
LABEL_38:
  if (v22 != v24) {
    free(v22);
  }
}

void anonymous namespace'::Verifier::visitDereferenceableMetadata(llvm::raw_ostream **this, llvm::Type **a2, llvm::MDNode *a3)
{
  if (*((unsigned char *)*a2 + 8) != 15)
  {
    uint64_t v6 = "dereferenceable, dereferenceable_or_null apply only to pointer types";
LABEL_16:
    int v9 = a2;
    int v10 = v6;
    __int16 v11 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v10, &v9);
    return;
  }
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 != 60 && v3 != 76)
  {
    uint64_t v6 = "dereferenceable, dereferenceable_or_null apply only to load and inttoptr instructions, use attributes for calls or invokes";
    goto LABEL_16;
  }
  unint64_t v4 = *((void *)a3 - 2);
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a3 - 6) == 1)
    {
      unsigned int v5 = (uint64_t *)*((void *)a3 - 4);
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v6 = "dereferenceable, dereferenceable_or_null take one operand!";
    goto LABEL_16;
  }
  if ((*((void *)a3 - 2) & 0x3C0) != 0x40) {
    goto LABEL_15;
  }
  unsigned int v5 = (uint64_t *)((char *)a3 - 8 * ((v4 >> 2) & 0xF) - 16);
LABEL_11:
  uint64_t v7 = *v5;
  if (*(unsigned char *)v7 != 1 || (BOOL v8 = *(unsigned char **)(v7 + 128), v8[16] != 16) || *(_DWORD *)(*(void *)v8 + 8) != 16397)
  {
    uint64_t v6 = "dereferenceable, dereferenceable_or_null metadata value must be an i64!";
    goto LABEL_16;
  }
}

void anonymous namespace'::Verifier::visitAliasScopeListMetadata(llvm::raw_ostream **this, const llvm::MDNode *a2)
{
  unint64_t v26 = a2;
  unint64_t v3 = *((void *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    unint64_t v4 = (uint64_t *)*((void *)a2 - 4);
    uint64_t v5 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6)) {
      return;
    }
    goto LABEL_5;
  }
  unint64_t v4 = (uint64_t *)((char *)a2 - 8 * ((v3 >> 2) & 0xF) - 16);
  uint64_t v5 = (v3 >> 6) & 0xF;
  if (v5)
  {
LABEL_5:
    for (uint64_t i = 8 * v5; i; i -= 8)
    {
      uint64_t v7 = *v4;
      char v8 = llvm::MDNode::classof((unsigned char *)*v4);
      if (!v7 || (v8 & 1) == 0)
      {
        v28[0] = "scope list must consist of MDNodes";
        __int16 v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, (uint64_t *)&v26);
        return;
      }
      uint64_t v30 = v7;
      uint64_t v9 = v7 - 16;
      unint64_t v10 = *(void *)(v7 - 16);
      if ((v10 & 2) != 0)
      {
        unsigned int v11 = *(_DWORD *)(v7 - 24);
        if ((v11 & 0xFFFFFFFE) != 2)
        {
LABEL_17:
          v28[0] = "scope must have two or three operands";
          goto LABEL_18;
        }
        uint64_t v15 = *(void *)(v7 - 32);
        BOOL v13 = *(unsigned char **)v15;
        if (*(void *)v15 == v7)
        {
          if (v11 != 3) {
            goto LABEL_34;
          }
          goto LABEL_28;
        }
      }
      else
      {
        if ((v10 & 0x380) != 0x80) {
          goto LABEL_17;
        }
        unsigned int v11 = (v10 >> 6) & 0xF;
        uint64_t v12 = (v10 >> 2) & 0xF;
        BOOL v13 = *(unsigned char **)(v9 - 8 * v12);
        if (v13 == (unsigned char *)v7)
        {
          uint64_t v14 = -v12;
          if (v11 != 3) {
            goto LABEL_32;
          }
          goto LABEL_24;
        }
      }
      if (*v13)
      {
        v28[0] = "first scope operand must be self-referential or string";
LABEL_18:
        __int16 v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, &v30);
        goto LABEL_19;
      }
      if (v11 != 3) {
        goto LABEL_30;
      }
      if ((v10 & 2) == 0)
      {
        uint64_t v14 = -(uint64_t)((v10 >> 2) & 0xF);
LABEL_24:
        uint64_t v15 = v9 + 8 * v14;
        goto LABEL_28;
      }
      uint64_t v15 = *(void *)(v7 - 32);
LABEL_28:
      if (**(unsigned char **)(v15 + 16))
      {
        v28[0] = "third scope operand must be string (if used)";
        goto LABEL_18;
      }
LABEL_30:
      if ((v10 & 2) == 0)
      {
        uint64_t v14 = -(uint64_t)((v10 >> 2) & 0xF);
LABEL_32:
        uint64_t v15 = v9 + 8 * v14;
        goto LABEL_34;
      }
      uint64_t v15 = *(void *)(v7 - 32);
LABEL_34:
      uint64_t v16 = *(unsigned char **)(v15 + 8);
      if (llvm::MDNode::classof(v16)) {
        uint64_t v17 = (uint64_t)v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v27 = v17;
      if (!v17)
      {
        v28[0] = "second scope operand must be MDNode";
        goto LABEL_18;
      }
      uint64_t v18 = v17 - 16;
      unint64_t v19 = *(void *)(v17 - 16);
      if ((v19 & 2) != 0)
      {
        unsigned int v20 = *(_DWORD *)(v17 - 24);
        if (v20 - 1 >= 2)
        {
LABEL_48:
          v28[0] = "domain must have one or two operands";
          goto LABEL_59;
        }
        uint64_t v24 = *(unsigned char ***)(v17 - 32);
        int v22 = *v24;
        if (*v24 == (unsigned char *)v17)
        {
          if (v20 != 2) {
            goto LABEL_19;
          }
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v20 = (v19 >> 6) & 0xF;
        if (v20 - 1 >= 2) {
          goto LABEL_48;
        }
        uint64_t v21 = (v19 >> 2) & 0xF;
        int v22 = *(unsigned char **)(v18 - 8 * v21);
        if (v22 == (unsigned char *)v17)
        {
          if (v20 != 2) {
            goto LABEL_19;
          }
          uint64_t v23 = -v21;
          goto LABEL_52;
        }
      }
      if (*v22)
      {
        uint64_t v25 = "first domain operand must be self-referential or string";
        goto LABEL_58;
      }
      if (v20 != 2) {
        goto LABEL_19;
      }
      if ((v19 & 2) == 0)
      {
        uint64_t v23 = -(uint64_t)((v19 >> 2) & 0xF);
LABEL_52:
        uint64_t v24 = (unsigned char **)(v18 + 8 * v23);
        goto LABEL_56;
      }
      uint64_t v24 = *(unsigned char ***)(v17 - 32);
LABEL_56:
      if (*v24[1])
      {
        uint64_t v25 = "second domain operand must be string (if used)";
LABEL_58:
        v28[0] = v25;
LABEL_59:
        __int16 v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, &v27);
      }
LABEL_19:
      ++v4;
    }
  }
}

void anonymous namespace'::Verifier::visitAccessGroupMetadata(llvm::raw_ostream **this, const llvm::MDNode *a2)
{
  BOOL v13 = a2;
  unint64_t v3 = *((void *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6)) {
      goto LABEL_6;
    }
  }
  else if (((v3 >> 6) & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if ((*((unsigned char *)a2 + 1) & 0x7F) == 1) {
    return;
  }
LABEL_6:
  if ((v3 & 2) != 0)
  {
    unint64_t v4 = (unsigned char **)*((void *)a2 - 4);
    uint64_t v5 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6)) {
      return;
    }
  }
  else
  {
    unint64_t v4 = (unsigned char **)((char *)a2 - 8 * ((v3 >> 2) & 0xF) - 16);
    uint64_t v5 = (v3 >> 6) & 0xF;
    if (!v5) {
      return;
    }
  }
  uint64_t v6 = 8 * v5;
  while (1)
  {
    uint64_t v7 = (uint64_t)*v4;
    char v8 = llvm::MDNode::classof(*v4);
    if (!v7 || (v8 & 1) == 0) {
      break;
    }
    uint64_t v9 = *(void *)(v7 - 16);
    if ((v9 & 2) != 0)
    {
      if (*(_DWORD *)(v7 - 24)) {
        goto LABEL_20;
      }
    }
    else if (((v9 >> 6) & 0xF) != 0)
    {
      goto LABEL_20;
    }
    if ((*(unsigned char *)(v7 + 1) & 0x7F) != 1)
    {
LABEL_20:
      unint64_t v10 = "Access scope list contains invalid access scope";
      goto LABEL_22;
    }
    ++v4;
    v6 -= 8;
    if (!v6) {
      return;
    }
  }
  unint64_t v10 = "Access scope list must consist of MDNodes";
LABEL_22:
  unsigned int v11 = v10;
  __int16 v12 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)&v11, (uint64_t *)&v13);
}

void anonymous namespace'::Verifier::visitProfMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  uint64_t v23 = a3;
  uint64_t v6 = (unint64_t *)((char *)a3 - 16);
  unint64_t v5 = *((void *)a3 - 2);
  if ((v5 & 2) == 0)
  {
    if ((v5 & 0x380) != 0)
    {
      uint64_t v7 = (uint64_t *)&v6[-((v5 >> 2) & 0xF)];
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v9 = "!prof annotations should have no less than 2 operands";
    goto LABEL_11;
  }
  if (*((_DWORD *)a3 - 6) <= 1u) {
    goto LABEL_9;
  }
  uint64_t v7 = (uint64_t *)*((void *)a3 - 4);
LABEL_6:
  uint64_t v8 = *v7;
  if (!v8)
  {
    uint64_t v9 = "first operand should not be null";
    goto LABEL_11;
  }
  if (*(unsigned char *)v8)
  {
    uint64_t v9 = "expected string with name of the !prof annotation";
LABEL_11:
    v21[0] = v9;
    __int16 v22 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v21, (uint64_t *)&v23);
    return;
  }
  unint64_t v10 = *(void **)(v8 + 8);
  if (*v10 == 14)
  {
    uint64_t v11 = v10[3];
    uint64_t v12 = *(void *)((char *)v10 + 30);
    if (v11 == 0x775F68636E617262 && v12 == 0x737468676965775FLL)
    {
      int v14 = *((unsigned __int8 *)a2 + 16);
      switch(*((unsigned char *)a2 + 16))
      {
        case 0x1E:
          if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3) {
            int v15 = 2;
          }
          else {
            int v15 = 1;
          }
          goto LABEL_34;
        case 0x1F:
          int v15 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_34;
        case 0x20:
          int v15 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_34;
        case 0x21:
          if ((v5 & 2) != 0)
          {
            unsigned int v16 = *((_DWORD *)a3 - 6);
            if (v16 == 2) {
              goto LABEL_38;
            }
          }
          else
          {
            if ((*((void *)a3 - 2) & 0x3C0) == 0x80) {
              goto LABEL_38;
            }
            unsigned int v16 = (v5 >> 6) & 0xF;
          }
          if (v16 != 3)
          {
            uint64_t v9 = "Wrong number of InvokeInst branch_weights operands";
            goto LABEL_11;
          }
LABEL_38:
          unint64_t v18 = 1;
          while (1)
          {
            if ((v5 & 2) != 0)
            {
              if (v18 >= *((unsigned int *)a3 - 6)) {
                return;
              }
              unint64_t v19 = (unint64_t *)*((void *)a3 - 4);
            }
            else
            {
              unint64_t v19 = &v6[-((v5 >> 2) & 0xF)];
              if (v18 >= ((v5 >> 6) & 0xF)) {
                return;
              }
            }
            unint64_t v20 = v19[v18];
            if (!v20) {
              break;
            }
            if (*(unsigned char *)v20 == 1)
            {
              ++v18;
              if (*(unsigned char *)(*(void *)(v20 + 128) + 16) == 16) {
                continue;
              }
            }
            v21[0] = "!prof brunch_weights operand is not a const int";
            __int16 v22 = 259;
            llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v21);
            return;
          }
          uint64_t v9 = "second operand should not be null";
          break;
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_26;
        case 0x27:
          int v15 = *((_DWORD *)a2 + 20) + 1;
          goto LABEL_34;
        default:
          if (v14 == 84)
          {
            int v15 = 1;
          }
          else if (v14 == 85)
          {
            int v15 = 2;
          }
          else
          {
LABEL_26:
            v21[0] = "!prof branch_weights are not allowed for this instruction";
            __int16 v22 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v21, (uint64_t *)&v23);
            int v15 = 0;
            unint64_t v5 = *v6;
          }
LABEL_34:
          if ((v5 & 2) != 0) {
            unsigned int v17 = *((_DWORD *)a3 - 6);
          }
          else {
            unsigned int v17 = (v5 >> 6) & 0xF;
          }
          if (v17 == v15 + 1) {
            goto LABEL_38;
          }
          uint64_t v9 = "Wrong number of operands";
          goto LABEL_11;
      }
      goto LABEL_11;
    }
  }
}

void anonymous namespace'::Verifier::visitMemProfMetadata(llvm::raw_ostream **this, llvm::Type **a2, llvm::MDNode *a3)
{
  BOOL v31 = a3;
  unsigned int v4 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v5 = v4 > 0x33;
  uint64_t v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
  {
    uint64_t v28 = a2;
    v29[0] = "!memprof metadata should only exist on calls";
    __int16 v30 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v29, &v28);
    return;
  }
  unint64_t v8 = *((void *)a3 - 2);
  if ((v8 & 2) != 0)
  {
    uint64_t v12 = *((unsigned int *)a3 - 6);
    if (v12)
    {
      unint64_t v10 = (llvm::Type ***)*((void *)a3 - 4);
      uint64_t v11 = &v10[v12];
      while (1)
      {
LABEL_11:
        BOOL v13 = *v10;
        if (llvm::MDNode::classof(*v10)) {
          int v14 = v13;
        }
        else {
          int v14 = 0;
        }
        uint64_t v28 = v14;
        unsigned int v16 = (unint64_t *)(v14 - 2);
        unint64_t v15 = (unint64_t)*(v14 - 2);
        if ((v15 & 2) != 0)
        {
          if (*((_DWORD *)v14 - 6) <= 1u)
          {
LABEL_42:
            uint64_t v27 = "Each !memprof MemInfoBlock should have at least 2 operands";
            goto LABEL_38;
          }
          unsigned int v17 = (unint64_t *)*(v14 - 4);
        }
        else
        {
          if ((v15 & 0x380) == 0) {
            goto LABEL_42;
          }
          unsigned int v17 = &v16[-((v15 >> 2) & 0xF)];
        }
        if (!*v17)
        {
          uint64_t v27 = "!memprof MemInfoBlock first operand should not be null";
          goto LABEL_38;
        }
        if ((llvm::MDNode::classof((unsigned char *)*v17) & 1) == 0)
        {
          uint64_t v27 = "!memprof MemInfoBlock first operand should be an MDNode";
          goto LABEL_38;
        }
        unint64_t v18 = (*v16 & 2) != 0 ? *(v14 - 4) : (llvm::Type *)&v16[-((*v16 >> 2) & 0xF)];
        uint64_t v19 = *(void *)v18;
        unint64_t v20 = llvm::MDNode::classof(*(unsigned char **)v18) ? (llvm::MDNode *)v19 : 0;
        unint64_t v21 = *v16;
        if ((*v16 & 2) != 0)
        {
          __int16 v22 = (unint64_t *)*(v14 - 4);
          uint64_t v23 = *((unsigned int *)v14 - 6);
        }
        else
        {
          __int16 v22 = &v16[-((v21 >> 2) & 0xF)];
          uint64_t v23 = (v21 >> 6) & 0xF;
        }
        if (v23 != 1) {
          break;
        }
LABEL_34:
        if (++v10 == v11) {
          return;
        }
      }
      uint64_t v24 = (unsigned char **)(v22 + 1);
      uint64_t v25 = 8 * v23 - 8;
      while (!**v24)
      {
        ++v24;
        v25 -= 8;
        if (!v25) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = "Not all !memprof MemInfoBlock operands 1 to N are MDString";
LABEL_38:
      v29[0] = v27;
      __int16 v30 = 259;
      unint64_t v26 = (uint64_t *)&v28;
      goto LABEL_39;
    }
LABEL_36:
    v29[0] = "!memprof annotations should have at least 1 metadata operand (MemInfoBlock)";
    __int16 v30 = 259;
    unint64_t v26 = (uint64_t *)&v31;
LABEL_39:
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v29, v26);
    return;
  }
  if ((v8 & 0x3C0) == 0) {
    goto LABEL_36;
  }
  uint64_t v9 = (v8 >> 6) & 0xF;
  if (v9)
  {
    unint64_t v10 = (llvm::Type ***)((char *)a3 - 8 * ((v8 >> 2) & 0xF) - 16);
    uint64_t v11 = &v10[v9];
    goto LABEL_11;
  }
}

void anonymous namespace'::Verifier::visitCallsiteMetadata(llvm::raw_ostream **this, llvm::Type **a2, llvm::MDNode *a3)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v4 = v3 > 0x33;
  uint64_t v5 = (1 << v3) & 0x8000000000041;
  if (v4 || v5 == 0)
  {
    uint64_t v7 = a2;
    unint64_t v8 = "!callsite metadata should only exist on calls";
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v8, &v7);
  }
  else
  {
  }
}

void anonymous namespace'::Verifier::visitDIAssignIDMetadata(_anonymous_namespace_::Verifier *this, llvm::Type **a2, llvm::MDNode *a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 59 || v6 == 61 || (llvm::MemIntrinsic::classof((uint64_t)a2) & 1) != 0)
  {
    uint64_t IfExists = llvm::MetadataAsValue::getIfExists(*((void **)this + 23), a3);
    if (IfExists)
    {
      uint64_t v8 = *(void *)(IfExists + 8);
      if (v8)
      {
        while (1)
        {
          uint64_t v9 = *(void *)(v8 + 24);
          if (!llvm::DbgAssignIntrinsic::classof(v9)) {
            break;
          }
          BOOL v10 = llvm::DbgAssignIntrinsic::classof(v9);
          if (v9) {
            BOOL v11 = !v10;
          }
          else {
            BOOL v11 = 1;
          }
          if (!v11 && *(void *)(*(void *)(v9 + 40) + 56) != *((void *)a2[5] + 7))
          {
            v14[0] = "dbg.assign not in same function as inst";
            __int16 v15 = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
            if (!*(void *)this) {
              return;
            }
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v9);
            uint64_t v12 = (uint64_t ***)this;
            BOOL v13 = a2;
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v8 + 8);
          if (!v8) {
            return;
          }
        }
        v14[0] = "!DIAssignID should only be used by llvm.dbg.assign intrinsics";
        __int16 v15 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
        if (*(void *)this)
        {
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a3);
          if (v9)
          {
            uint64_t v12 = (uint64_t ***)this;
            BOOL v13 = (llvm::Type **)v9;
LABEL_21:
            llvm::VerifierSupport::Write(v12, v13);
          }
        }
      }
    }
  }
  else
  {
    v14[0] = "!DIAssignID attached to unexpected instruction kind";
    __int16 v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
    if (*(void *)this)
    {
      llvm::VerifierSupport::Write((uint64_t ***)this, a2);
      llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)a3);
    }
  }
}

void anonymous namespace'::Verifier::visitAnnotationMetadata(llvm::raw_ostream **this, llvm::MDNode *a2)
{
  if (*(unsigned char *)a2 != 4)
  {
    int v6 = "annotation must be a tuple";
LABEL_14:
    uint64_t v8 = v6;
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v8);
    return;
  }
  unint64_t v2 = *((void *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    uint64_t v7 = *((unsigned int *)a2 - 6);
    if (v7)
    {
      BOOL v4 = (unsigned char **)*((void *)a2 - 4);
      uint64_t v5 = &v4[v7];
LABEL_9:
      while (!**v4)
      {
        if (++v4 == v5) {
          return;
        }
      }
      int v6 = "operands must be strings";
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if ((v2 & 0x3C0) == 0)
  {
LABEL_12:
    int v6 = "annotation must have at least one operand";
    goto LABEL_14;
  }
  uint64_t v3 = (v2 >> 6) & 0xF;
  if (v3)
  {
    BOOL v4 = (unsigned char **)((char *)a2 - 8 * ((v2 >> 2) & 0xF) - 16);
    uint64_t v5 = &v4[v3];
    goto LABEL_9;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, uint64_t *a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    uint64_t v7 = *a4;
    llvm::VerifierSupport::Write((uint64_t)a1, v7);
  }
}

void anonymous namespace'::Verifier::verifyFragmentExpression(llvm::raw_ostream **this, const llvm::DbgVariableIntrinsic *a2)
{
  BOOL v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v5 = *(unsigned char **)(*((void *)v4 + 4) + 24);
  if (v5)
  {
    if (*v5 == 25) {
      int v6 = *(llvm::DIVariable **)(*((void *)v4 + 4) + 24);
    }
    else {
      int v6 = 0;
    }
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 **)(*((void *)v4 + 8) + 24);
  if (v7)
  {
    int v8 = *v7;
    __int16 v9 = v8 == 6 ? (uint64_t **)v7 : 0;
    if (v6)
    {
      if (v8 == 6 && llvm::DIExpression::isValid((llvm::DIExpression *)v9))
      {
        llvm::DIExpression::getFragmentInfo(v9[2], v9[3], &v15);
        if (v16)
        {
          if ((*((unsigned char *)v6 + 28) & 0x40) == 0)
          {
            __int32 v10 = v15.i32[0];
            __int32 v11 = v15.i32[2];
            unint64_t v20 = (llvm::Type **)a2;
            unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(v6);
            if (v13)
            {
              if ((v11 + v10) <= SizeInBits)
              {
                if (SizeInBits != v10) {
                  return;
                }
                int v14 = "fragment covers entire variable";
              }
              else
              {
                int v14 = "fragment is larger than or outside of variable";
              }
              unsigned int v17 = v6;
              unint64_t v18 = v14;
              __int16 v19 = 259;
              llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(this, (const llvm::Twine *)&v18, &v20, (uint64_t *)&v17);
            }
          }
        }
      }
    }
  }
}

void anonymous namespace'::Verifier::verifyNotEntryValue(llvm::raw_ostream **this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t v2 = *(void *)(((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8] + 24);
  if (v2)
  {
    if (*(unsigned char *)v2 == 6
      && llvm::DIExpression::isValid(*(llvm::DIExpression **)(((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8]
                                                            + 24)))
    {
      uint64_t v5 = *(void **)(v2 + 16);
      if (((*(void *)(v2 + 24) - (void)v5) & 0x7FFFFFFF8) != 0 && *v5 == 4099)
      {
        int v6 = "Entry values are only allowed in MIR";
        __int16 v7 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v6);
        if (*this) {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
        }
      }
    }
  }
}

BOOL isContiguous(const void **a1, const void **a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 6);
  if (v4 > 0x40)
  {
    if (!memcmp(a1[2], *a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)) {
      return 1;
    }
  }
  else if (a1[2] == *a2)
  {
    return 1;
  }
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (v6 > 0x40) {
    return memcmp(*a1, a2[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    return *a1 == a2[2];
  }
}

void anonymous namespace'::Verifier::visitCallStackMetadata(llvm::raw_ostream **this, llvm::MDNode *a2)
{
  __int32 v10 = a2;
  unint64_t v2 = *((void *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((unsigned int *)a2 - 6);
    if (v6)
    {
      uint64_t v4 = (uint64_t *)*((void *)a2 - 4);
      uint64_t v5 = &v4[v6];
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  if ((v2 & 0x3C0) == 0)
  {
LABEL_12:
    v8[0] = "call stack metadata should have at least 1 operand";
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v8, (uint64_t *)&v10);
    return;
  }
  uint64_t v3 = (v2 >> 6) & 0xF;
  if (v3)
  {
    uint64_t v4 = (uint64_t *)((char *)a2 - 8 * ((v2 >> 2) & 0xF) - 16);
    uint64_t v5 = &v4[v3];
LABEL_7:
    while (1)
    {
      uint64_t v7 = *v4;
      if (!*v4 || *(unsigned char *)v7 != 1 || *(unsigned char *)(*(void *)(v7 + 128) + 16) != 16) {
        break;
      }
      if (++v4 == v5) {
        return;
      }
    }
    v8[0] = "call stack metadata operand should be constant integer";
    __int16 v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v8, v4);
  }
}

void anonymous namespace'::Verifier::visitCallBase(llvm::raw_ostream **this, llvm::CallBase *a2)
{
  uint64_t v4 = **((void **)a2 - 4);
  if (*(unsigned char *)(v4 + 8) != 15)
  {
    int v14 = "Called function must be a pointer!";
    goto LABEL_11;
  }
  uint64_t v5 = *((void *)a2 + 9);
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6) {
    BOOL v7 = v6 == v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    int v14 = "Called function is not the same type as the call!";
    goto LABEL_11;
  }
  unsigned int v8 = *(_DWORD *)(v5 + 8);
  uint64_t v9 = llvm::CallBase::arg_end(a2);
  __int32 v10 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  unint64_t v11 = (unint64_t)(v9 - (void)v10) >> 5;
  int v12 = *(_DWORD *)(v5 + 12);
  unsigned int v13 = v12 - 1;
  if (v8 < 0x100)
  {
    if (v13 != v11)
    {
      int v14 = "Incorrect number of arguments passed to called function!";
      goto LABEL_11;
    }
  }
  else if (v13 > v11)
  {
    int v14 = "Called function requires more parameters than were provided!";
    goto LABEL_11;
  }
  unsigned int v15 = 1;
  while (v12 != v15)
  {
    char v16 = *(llvm::Type ***)&v10[32 * v15 - 32];
    unsigned int v17 = *(llvm::Type **)(*(void *)(v5 + 16) + 8 * v15++);
    if (*v16 != v17)
    {
      v116[0] = "Call parameter type does not match function signature!";
      __int16 v118 = 259;
      llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v116);
      if (*this)
      {
        llvm::VerifierSupport::Write((uint64_t ***)this, v16);
        llvm::VerifierSupport::Write(this, v17);
        llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
      }
      return;
    }
  }
  uint64_t v18 = *((void *)a2 + 8);
  uint64_t v19 = llvm::CallBase::arg_end(a2);
  if (v18
    && *(_DWORD *)(v18 + 8) > ((unint64_t)(v19
                                                              - ((void)a2
                                                               - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5)
                            + 2)
  {
    int v14 = "Attribute after last parameter!";
    goto LABEL_11;
  }
  unint64_t v20 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4));
  if (*((unsigned char *)v20 + 16)) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = v20;
  }
  uint64_t v107 = v21;
  if (v21 && (*((unsigned char *)v21 + 33) & 0x20) != 0)
  {
    if (*((void *)v21 + 3) != v5)
    {
      int v14 = "Intrinsic called with incompatible signature";
      goto LABEL_11;
    }
    if (v18)
    {
      char v31 = 1;
      if ((*(unsigned char *)(v18 + 19) & 2) == 0) {
        goto LABEL_48;
      }
      goto LABEL_110;
    }
    char v31 = 1;
LABEL_54:
    uint64_t v32 = *((void *)a2 - 4);
    goto LABEL_55;
  }
  __int16 v22 = **(llvm::Type ***)(v5 + 16);
  if (llvm::Type::isSized((uint64_t)v22, 0)
    && llvm::DataLayout::getAlignment(this[22], v22, 1) >= 0xFu)
  {
    v112[0] = (uint64_t *)"Incorrect alignment of ";
    BOOL v113 = "return type";
    __int16 v115 = 771;
    v116[0] = v112;
    uint64_t v117 = " to called function!";
    __int16 v118 = 770;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (const llvm::Twine *)v116, (llvm::Type **)a2);
  }
  if (*(_DWORD *)(v5 + 12) != 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 8 * (*(_DWORD *)(v5 + 12) - 1);
    do
    {
      uint64_t v25 = *(llvm::Type **)(*(void *)(v5 + 16) + v23 + 8);
      v110[0] = (llvm::Type **)"argument passed";
      __int16 v111 = 259;
      if (llvm::Type::isSized((uint64_t)v25, 0)
        && llvm::DataLayout::getAlignment(this[22], v25, 1) >= 0xFu)
      {
        char v26 = v111;
        if ((_BYTE)v111)
        {
          if (v111 == 1)
          {
            v112[0] = (uint64_t *)"Incorrect alignment of ";
            char v27 = 3;
            uint64_t v28 = "Incorrect alignment of ";
          }
          else
          {
            uint64_t v28 = (const char *)v112;
            __int16 v30 = (llvm::Type ***)v110[0];
            char v27 = 2;
            if (HIBYTE(v111) != 1)
            {
              char v26 = 2;
              __int16 v30 = v110;
            }
            v112[0] = (uint64_t *)"Incorrect alignment of ";
            BOOL v113 = (const char *)v30;
            uint64_t v114 = v110[1];
          }
          char v29 = 3;
          LOBYTE(v115) = 3;
          HIBYTE(v115) = v26;
          v116[0] = v28;
          uint64_t v117 = " to called function!";
        }
        else
        {
          char v27 = 0;
          __int16 v115 = 256;
          char v29 = 1;
        }
        LOBYTE(v118) = v27;
        HIBYTE(v118) = v29;
        llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (const llvm::Twine *)v116, (llvm::Type **)a2);
      }
      v23 += 8;
    }
    while (v24 != v23);
  }
  if (!v18)
  {
    char v31 = 0;
    goto LABEL_54;
  }
  unint64_t v21 = v107;
  if ((*(unsigned char *)(v18 + 19) & 2) == 0)
  {
    char v31 = 0;
    goto LABEL_48;
  }
  if (!v107)
  {
LABEL_112:
    int v14 = "speculatable attribute may not apply to call sites";
    goto LABEL_11;
  }
  char v31 = 0;
LABEL_110:
  uint64_t v55 = *((void *)v21 + 14);
  if (!v55 || (*(unsigned char *)(v55 + 19) & 2) == 0) {
    goto LABEL_112;
  }
LABEL_48:
  uint64_t v32 = *((void *)a2 - 4);
  if ((*(unsigned char *)(v18 + 21) & 2) == 0)
  {
LABEL_55:
    int v33 = *(unsigned __int8 *)(v32 + 16);
    goto LABEL_56;
  }
  if (*(_DWORD *)(v32 + 36) != 10)
  {
    int v56 = "preallocated as a call site attribute can only be on llvm.call.preallocated.arg";
LABEL_161:
    v116[0] = v56;
    __int16 v118 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v116);
    return;
  }
  int v33 = 0;
LABEL_56:
  if (llvm::CallBase::hasInAllocaArgument(a2))
  {
    uint64_t v34 = llvm::Value::stripInBoundsOffsets(*((const void **)a2 + 4 * (*(_DWORD *)(v5 + 12) - 2) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v116);
    uint64_t v35 = *(unsigned char *)(v34 + 16) == 59 ? v34 : 0;
    v112[0] = (uint64_t *)v35;
    if (v35)
    {
      if ((*(_WORD *)(v35 + 18) & 0x40) == 0)
      {
        v116[0] = "inalloca argument for call has mismatched alloca";
        __int16 v118 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(this, (const llvm::Twine *)v116, (llvm::Type ***)v112, (llvm::Type **)a2);
        return;
      }
    }
  }
  int v36 = *(_DWORD *)(v5 + 12);
  uint64_t v37 = (v36 - 1);
  if (v36 != 1)
  {
    uint64_t v38 = 0;
    do
    {
      if (llvm::CallBase::paramHasAttr(a2, v38, 64))
      {
        uint64_t v39 = *((void *)a2 + 4 * v38 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v112[0] = (uint64_t *)v39;
        uint64_t v40 = llvm::Value::stripInBoundsOffsets((const void *)v39, (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v116);
        if (*(unsigned char *)(v40 + 16) == 59) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = 0;
        }
        v110[0] = (llvm::Type **)v41;
        if (v41)
        {
          if ((*(_WORD *)(v41 + 18) & 0x80) == 0)
          {
            v116[0] = "swifterror argument for call has mismatched alloca";
            __int16 v118 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(this, (const llvm::Twine *)v116, v110, (llvm::Type **)a2);
            goto LABEL_83;
          }
          int v46 = 30;
LABEL_84:
          if (v46 != 30) {
            return;
          }
          uint64_t v47 = v38 + 1;
          goto LABEL_102;
        }
        if (*(unsigned char *)(v39 + 16) == 21) {
          uint64_t v42 = v39;
        }
        else {
          uint64_t v42 = 0;
        }
        v110[0] = (llvm::Type **)v42;
        if (!v42)
        {
          v116[0] = "swifterror argument should come from an alloca or parameter";
          __int16 v118 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(this, (const llvm::Twine *)v116, (llvm::Type ***)v112, (llvm::Type **)a2);
          goto LABEL_83;
        }
        uint64_t v43 = *(void *)(*(void *)(v42 + 24) + 112);
        if (!v43
          || (unsigned int v44 = *(_DWORD *)(v42 + 32) + 2, v44 >= *(_DWORD *)(v43 + 8))
          || (uint64_t v45 = *(void *)(v43 + 8 * v44 + 40)) == 0
          || (*(unsigned char *)(v45 + 20) & 1) == 0)
        {
          v116[0] = "swifterror argument for call has mismatched parameter";
          __int16 v118 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(this, (const llvm::Twine *)v116, v110, (llvm::Type **)a2);
LABEL_83:
          int v46 = 1;
          goto LABEL_84;
        }
      }
      uint64_t v47 = v38 + 1;
      if (v18)
      {
        if ((v38 + 2) < *(_DWORD *)(v18 + 8))
        {
          uint64_t v48 = *(void *)(v18 + 40 + 8 * (v38 + 2));
          if (v48)
          {
            if ((*(unsigned char *)(v48 + 13) & 4) != 0
              && (!v107
               || (uint64_t v49 = *((void *)v107 + 14)) == 0
               || (v38 + 2) >= *(_DWORD *)(v49 + 8)
               || (uint64_t v50 = *(void *)(v49 + 8 * (v38 + 2) + 40)) == 0
               || (*(unsigned char *)(v50 + 13) & 4) == 0))
            {
              v116[0] = "immarg may not apply only to call sites";
              __int16 v118 = 259;
              v112[0] = *((uint64_t **)a2 + 4 * v38 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              goto LABEL_186;
            }
          }
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v38, 10))
      {
        v112[0] = *((uint64_t **)a2 + 4 * v38 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        if ((v112[0][2] & 0xFE) != 0x10)
        {
          uint64_t v86 = "immarg operand has non-immediate parameter";
LABEL_183:
          v116[0] = v86;
          __int16 v118 = 259;
LABEL_186:
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(this, (const llvm::Twine *)v116, (llvm::Type ***)v112, (llvm::Type **)a2);
          return;
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v38, 73))
      {
        v112[0] = *((uint64_t **)a2 + 4 * v38 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        int v51 = llvm::CallBase::countOperandBundlesOfType(a2, 4);
        if (*((unsigned char *)a2 + 16) == 84)
        {
          if ((v51 == 0) != ((*((_WORD *)a2 + 9) & 3) == 2)) {
            goto LABEL_182;
          }
        }
        else if (!v51)
        {
LABEL_182:
          uint64_t v86 = "preallocated operand either requires a preallocated bundle or the call to be musttail (but not both)";
          goto LABEL_183;
        }
      }
LABEL_102:
      uint64_t v38 = v47;
    }
    while (v47 != v37);
  }
  char v108 = v31;
  if (*(_DWORD *)(v5 + 8) >= 0x100u)
  {
    uint64_t v52 = (*(_DWORD *)(v5 + 12) - 1);
    if (*(_DWORD *)(v5 + 12) == 1)
    {
      int v53 = 0;
      char v54 = 0;
    }
    else
    {
      uint64_t v57 = 0;
      char v54 = 0;
      int v53 = 0;
      uint64_t v58 = v18 + 40;
      do
      {
        if (v18 && (v57 + 2) < *(_DWORD *)(v18 + 8))
        {
          uint64_t v59 = *(void *)(v58 + 8 * (v57 + 2));
          if (v59) {
            LODWORD(v59) = (*(unsigned __int8 *)(v59 + 14) >> 1) & 1;
          }
          v53 |= v59;
          uint64_t v60 = *(void *)(v58 + 8 * (v57 + 2));
          if (v60) {
            LODWORD(v60) = (*(unsigned __int8 *)(v60 + 17) >> 6) & 1;
          }
        }
        else
        {
          LOBYTE(v60) = 0;
        }
        ++v57;
        v54 |= v60;
      }
      while (v52 != v57);
    }
    unint64_t v61 = v52;
    uint64_t v62 = llvm::CallBase::arg_end(a2);
    uint64_t v63 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v61 < ((unint64_t)(v62 - (void)a2 + 32 * v63) >> 5))
    {
      uint64_t v64 = -v63;
      uint64_t v65 = (char *)a2 + 32 * v61;
      while (1)
      {
        uint64_t v66 = **(llvm::Type ***)&v65[32 * v64];
        if (!v18 || (v61 + 2) >= *(_DWORD *)(v18 + 8)) {
          break;
        }
        uint64_t v67 = *(unsigned char **)(v18 + 40 + 8 * (v61 + 2));
        if (!v67) {
          goto LABEL_132;
        }
        unsigned int v68 = v67[14] & 2;
        if ((v53 & (v68 >> 1)) == 1)
        {
          int v14 = "More than one parameter has attribute nest!";
          goto LABEL_11;
        }
        v53 |= v68 >> 1;
        if ((v67[17] & 0x40) != 0)
        {
          if (v54)
          {
            int v14 = "More than one parameter has attribute returned!";
            goto LABEL_11;
          }
          if (!llvm::Type::canLosslesslyBitCastTo(v66, **(llvm::Type ***)(v5 + 16)))
          {
            int v14 = "Incompatible argument and return types for 'returned' attribute";
            goto LABEL_11;
          }
          char v69 = 0;
          char v54 = 1;
        }
        else
        {
          char v69 = 0;
        }
LABEL_133:
        uint64_t v70 = *((void *)a2 - 4);
        if (v70
          && !*(unsigned char *)(v70 + 16)
          && *(void *)(v70 + 24) == *((void *)a2 + 9)
          && *(_DWORD *)(v70 + 36) == 125)
        {
          if ((v69 & 1) == 0)
          {
            char v71 = v67[21];
            goto LABEL_141;
          }
        }
        else if ((v69 & 1) == 0)
        {
          char v71 = v67[21];
          if ((v71 & 4) != 0)
          {
            int v14 = "Attribute 'sret' cannot be used for vararg call arguments!";
            goto LABEL_11;
          }
LABEL_141:
          if ((v71 & 1) != 0
            && v61 != ((unint64_t)(llvm::CallBase::arg_end(a2)
                                                      - ((void)a2
                                                       - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5)
                    - 1)
          {
            int v14 = "inalloca isn't on the last argument!";
            goto LABEL_11;
          }
        }
        ++v61;
        uint64_t v72 = llvm::CallBase::arg_end(a2);
        uint64_t v73 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        uint64_t v64 = -v73;
        v65 += 32;
        if (v61 >= ((unint64_t)(v72 - (void)a2 + 32 * v73) >> 5)) {
          goto LABEL_148;
        }
      }
      uint64_t v67 = 0;
LABEL_132:
      char v69 = 1;
      goto LABEL_133;
    }
  }
LABEL_148:
  if ((v108 & 1) == 0 && 8 * *(unsigned int *)(v5 + 12) != 8)
  {
    uint64_t v74 = *(void *)(v5 + 16) + 8;
    uint64_t v75 = 8 * ((8 * *(unsigned int *)(v5 + 12) - 8) >> 3);
    do
    {
      int v76 = *(unsigned __int8 *)(*(void *)v74 + 8);
      if (v76 == 12)
      {
        int v14 = "Function has token parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      if (v76 == 9)
      {
        int v14 = "Function has metadata parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      v74 += 8;
      v75 -= 8;
    }
    while (v75);
  }
  uint64_t v77 = *((void *)a2 - 4);
  if (v77 && !*(unsigned char *)(v77 + 16) && *(void *)(v77 + 24) == *((void *)a2 + 9)) {
    goto LABEL_165;
  }
  int v78 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
  if (v78 == 11)
  {
    int v56 = "Return type cannot be x86_amx for indirect call!";
    goto LABEL_161;
  }
  if (v78 == 12)
  {
    int v56 = "Return type cannot be token for indirect call!";
    goto LABEL_161;
  }
  if (v77 && !*(unsigned char *)(v77 + 16) && *(void *)(v77 + 24) == *((void *)a2 + 9))
  {
LABEL_165:
    int v79 = *(_DWORD *)(v77 + 36);
    if (v79) {
  }
    }
  int v80 = *((_DWORD *)a2 + 5);
  if ((v80 & 0x80000000) == 0 || (unint64_t v87 = *((void *)a2 - 4 * (v80 & 0x7FFFFFF) - 1), (v87 & 0xFFFFFFFF0) == 0))
  {
    char v81 = 0;
LABEL_169:
    uint64_t v82 = *((void *)a2 - 4);
    if (v82 && !*(unsigned char *)(v82 + 16) && ((*(void *)(v82 + 24) == *((void *)a2 + 9)) & v81) == 1)
    {
      int v14 = "Direct call cannot have a ptrauth bundle";
      goto LABEL_11;
    }
    uint64_t Metadata = llvm::Value::getMetadata(*(llvm::Value **)(*((void *)a2 + 5) + 56), 0);
    uint64_t v84 = *((void *)a2 - 4);
    if (!Metadata) {
      goto LABEL_262;
    }
    if (*(unsigned char *)(v84 + 16)) {
      goto LABEL_262;
    }
    if (*(void *)(v84 + 24) != *((void *)a2 + 9)) {
      goto LABEL_262;
    }
    char isInterposable = llvm::GlobalValue::isInterposable(*((llvm::GlobalValue **)a2 - 4));
    uint64_t v84 = *((void *)a2 - 4);
    if (isInterposable) {
      goto LABEL_262;
    }
    if (v84)
    {
      if (*(unsigned char *)(v84 + 16))
      {
        if (llvm::GlobalValue::isDeclaration(0)) {
          goto LABEL_262;
        }
      }
      else
      {
        if (*(void *)(v84 + 24) == *((void *)a2 + 9)) {
          uint8x8_t v104 = (llvm::GlobalValue *)*((void *)a2 - 4);
        }
        else {
          uint8x8_t v104 = 0;
        }
        if (llvm::GlobalValue::isDeclaration(v104))
        {
LABEL_262:
          if (*(unsigned char *)(v84 + 16) == 24) {
          return;
          }
        }
        if (*(void *)(v84 + 24) == *((void *)a2 + 9))
        {
LABEL_258:
          if (llvm::Value::getMetadata((llvm::Value *)v84, 0) && !*((void *)a2 + 6))
          {
            v116[0] = "inlinable function call in a function with debug info must have a !dbg location";
            __int16 v118 = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>(this, (const llvm::Twine *)v116, (llvm::Type **)a2);
            return;
          }
          uint64_t v84 = *((void *)a2 - 4);
          goto LABEL_262;
        }
      }
    }
    uint64_t v84 = 0;
    goto LABEL_258;
  }
  char v88 = 0;
  char v89 = 0;
  char v81 = 0;
  char v109 = 0;
  char v90 = 0;
  uint64_t v105 = 0;
  char v106 = 0;
  char v91 = 0;
  uint64_t v92 = (v87 >> 4);
  unint64_t v93 = a2;
  while (2)
  {
    uint64_t v94 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    unint64_t v95 = (unsigned int *)((char *)v93 - *((void *)a2 - 4 * v94 - 1) + -32 * v94);
    uint64_t v96 = *v95;
    uint64_t v97 = (uint64_t *)((char *)a2 + 32 * v96 + -32 * v94);
    unint64_t v98 = (uint64_t *)(v95[1] - v96);
    uint64_t v99 = *((void *)v95 - 1);
    v112[0] = v97;
    v112[1] = v98;
    BOOL v113 = (const char *)v99;
    switch(*(_DWORD *)(v99 + 8))
    {
      case 0:
        if ((v105 & 0x100000000) == 0)
        {
          BYTE4(v105) = 1;
          goto LABEL_224;
        }
        int v14 = "Multiple deopt operand bundles";
        goto LABEL_11;
      case 1:
        if (v91)
        {
          int v14 = "Multiple funclet operand bundles";
          goto LABEL_11;
        }
        if (v98 != (uint64_t *)1)
        {
          int v14 = "Expected exactly one funclet bundle operand";
          goto LABEL_11;
        }
        unsigned int v100 = *(unsigned __int8 *)(*v97 + 16);
        if (v100 < 0x1C || v100 - 79 >= 2)
        {
          int v14 = "Funclet bundle operands should correspond to a FuncletPadInst";
          goto LABEL_11;
        }
        char v91 = 1;
        goto LABEL_224;
      case 2:
        if (v106)
        {
          int v14 = "Multiple gc-transition operand bundles";
          goto LABEL_11;
        }
        char v106 = 1;
        goto LABEL_224;
      case 3:
        if (v105)
        {
          int v14 = "Multiple CFGuardTarget operand bundles";
          goto LABEL_11;
        }
        if (v98 != (uint64_t *)1)
        {
          int v14 = "Expected exactly one cfguardtarget bundle operand";
          goto LABEL_11;
        }
        LOBYTE(v105) = 1;
        goto LABEL_224;
      case 4:
        if (v90)
        {
          int v14 = "Multiple preallocated operand bundles";
          goto LABEL_11;
        }
        if (v98 != (uint64_t *)1)
        {
          int v14 = "Expected exactly one preallocated bundle operand";
          goto LABEL_11;
        }
        uint64_t v102 = llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>(*v97);
        if (!v102 || *(_DWORD *)(*(void *)(v102 - 32) + 36) != 11)
        {
          int v14 = "\"preallocated\" argument must be a token from llvm.call.preallocated.setup";
          goto LABEL_11;
        }
        char v90 = 1;
        goto LABEL_224;
      case 5:
        if (v109)
        {
          int v14 = "Multiple gc-live operand bundles";
          goto LABEL_11;
        }
        char v109 = 1;
        goto LABEL_224;
      case 6:
        if (v88)
        {
          int v14 = "Multiple \"clang.arc.attachedcall\" operand bundles";
          goto LABEL_11;
        }
        char v88 = 1;
        goto LABEL_224;
      case 7:
        if (v81)
        {
          int v14 = "Multiple ptrauth operand bundles";
          goto LABEL_11;
        }
        if (v98 != (uint64_t *)2)
        {
          int v14 = "Expected exactly two ptrauth bundle operands";
          goto LABEL_11;
        }
        if (*(unsigned char *)(*v97 + 16) != 16 || *(_DWORD *)(*(void *)*v97 + 8) != 8205)
        {
          int v14 = "Ptrauth bundle key operand must be an i32 constant";
          goto LABEL_11;
        }
        if (*(_DWORD *)(*(void *)v97[4] + 8) == 16397)
        {
          char v81 = 1;
LABEL_224:
          unint64_t v93 = (llvm::CallBase *)((char *)v93 + 16);
          if (!--v92) {
            goto LABEL_169;
          }
          continue;
        }
        int v14 = "Ptrauth bundle discriminator operand must be an i64";
LABEL_11:
        v116[0] = v14;
        __int16 v118 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (const llvm::Twine *)v116, (llvm::Type **)a2);
        return;
      case 8:
        if (v89)
        {
          int v14 = "Multiple kcfi operand bundles";
          goto LABEL_11;
        }
        if (v98 != (uint64_t *)1)
        {
          int v14 = "Expected exactly one kcfi bundle operand";
          goto LABEL_11;
        }
        int v103 = (unsigned char *)*v97;
        if (v103[16] != 16 || *(_DWORD *)(*(void *)v103 + 8) != 8205)
        {
          int v14 = "Kcfi bundle operand must be an i32 constant";
          goto LABEL_11;
        }
        char v89 = 1;
        goto LABEL_224;
      default:
        goto LABEL_224;
    }
  }
}

BOOL llvm::CallBase::hasInAllocaArgument(llvm::CallBase *this)
{
  if ((llvm::CallBase *)llvm::CallBase::arg_end(this) == (llvm::CallBase *)((char *)this
                                                                           - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)))
    return 0;
  int v2 = ((unint64_t)(llvm::CallBase::arg_end(this) - ((void)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5)
     - 1;
  return llvm::CallBase::paramHasAttr(this, v2, 72);
}

void llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, llvm::Type **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    llvm::VerifierSupport::Write((uint64_t ***)a1, a4);
  }
}

uint64_t llvm::CallBase::countOperandBundlesOfType(llvm::CallBase *this, int a2)
{
  int v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v4 = (char *)this - 32 * (v2 & 0x7FFFFFF);
  unint64_t v7 = *((void *)v4 - 1);
  uint64_t v5 = v4 - 8;
  unint64_t v6 = v7;
  if ((v7 & 0xFFFFFFFF0) == 0) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v8 = (v6 >> 4);
  uint64_t v9 = &v5[-v6];
  do
  {
    uint64_t v10 = *(void *)v9;
    v9 += 16;
    if (*(_DWORD *)(v10 + 8) == a2) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    --v8;
  }
  while (v8);
  return result;
}

void anonymous namespace'::Verifier::visitIntrinsicCall(_anonymous_namespace_::Verifier *this, int a2, llvm::CallBase *a3)
{
  v361[12] = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a3 - 4);
  if (v6 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *((void *)a3 + 9))
  {
    __int16 v351 = (llvm::Type **)*((void *)a3 - 4);
  }
  else
  {
    __int16 v351 = 0;
    if (MEMORY[0x10])
    {
LABEL_12:
      p_p = "Intrinsic functions should never be defined!";
      __int16 v355 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v351);
      return;
    }
    uint64_t v6 = 0;
  }
  if (*(void *)(v6 + 72) != v6 + 72 || (*(unsigned char *)(v6 + 35) & 1) != 0) {
    goto LABEL_12;
  }
  unint64_t v7 = *(void *)(v6 + 24);
  unsigned int v8 = *(_DWORD *)(v7 + 8);
  uint64_t v359 = (unsigned int *)v361;
  uint64_t v360 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2, (unsigned int *)&v359);
  uint64_t v349 = v359;
  uint64_t v350 = v360;
  uint64_t v356 = v358;
  uint64_t v357 = 0x400000000;
  int matched = llvm::Intrinsic::matchIntrinsicSignature(v7, &v349, (unsigned int *)&v356);
  if (matched == 2)
  {
    uint64_t v10 = "Intrinsic has incorrect argument type!";
    goto LABEL_23;
  }
  if (matched != 1)
  {
    if (v8 < 0x100)
    {
      if (v350)
      {
        if (v350 == 1)
        {
          v349 += 3;
          uint64_t v350 = 0;
        }
        uint64_t v10 = "Callsite was not defined with variable arguments!";
        goto LABEL_23;
      }
    }
    else if (v350 != 1 || (int v11 = *v349, v349 += 3, v350 = 0, v11 != 1))
    {
      uint64_t v10 = "Intrinsic was not defined with variable arguments!";
      goto LABEL_23;
    }
    getIntrinsicNameImpl(a2, (uint64_t)v356, v357, *(uint64_t ***)(v6 + 40), v7, &v348);
    if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v348;
    }
    else {
      int v12 = (std::string *)v348.__r_.__value_.__r.__words[0];
    }
    if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v348.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v348.__r_.__value_.__l.__size_;
    }
    if ((*(unsigned char *)(v6 + 23) & 0x10) != 0)
    {
      uint64_t ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v6);
      unsigned int v15 = ValueName + 2;
      uint64_t v14 = *ValueName;
    }
    else
    {
      uint64_t v14 = 0;
      unsigned int v15 = &str_3_24;
    }
    if (size != v14 || size && memcmp(v12, v15, size))
    {
      std::operator+<char>();
      __int16 v355 = 260;
      p_p = &__p;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v351);
      if (v346 < 0) {
        operator delete(__p);
      }
      goto LABEL_717;
    }
    unsigned int v17 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
    uint64_t v18 = llvm::CallBase::arg_end(a3);
    if (v17 != (char *)v18)
    {
      unint64_t v20 = (char *)v18;
      while (1)
      {
        uint64_t v21 = *(void *)v17;
        if (*(void *)v17) {
          BOOL v22 = *(unsigned char *)(*(void *)v17 + 16) == 23;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22)
        {
          uint64_t v23 = *(llvm::Function **)(*((void *)a3 + 5) + 56);
          uint64_t v24 = *(unsigned char **)(v21 + 24);
          int v25 = llvm::MDNode::classof(v24);
          if (v24) {
            BOOL v26 = v25 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            llvm::SmallPtrSetImpl<llvm::Value *>::insert((_anonymous_namespace_::Verifier *)((char *)this + 432), v24, (uint64_t)&p_p);
            if (v354 && *v24 - 3 >= 0xFFFFFFFE) {
          }
            }
          else
          {
          }
        }
        BOOL v27 = !v21 || *(unsigned __int8 *)(v21 + 16) > 0x14u;
        if (!v27 && *(unsigned char *)(*(void *)v21 + 8) == 11) {
          break;
        }
        v17 += 32;
        if (v17 == v20) {
          goto LABEL_63;
        }
      }
      uint64_t v28 = "const x86_amx is not allowed in argument!";
      goto LABEL_67;
    }
LABEL_63:
    if (a2 <= 663)
    {
      switch(a2)
      {
        case 7:
          int v86 = *((_DWORD *)a3 + 5);
          if ((v86 & 0x80000000) == 0) {
            goto LABEL_717;
          }
          unint64_t v87 = (char *)a3 - 32 * (v86 & 0x7FFFFFF);
          uint64_t v88 = *((void *)v87 - 1);
          if (!v88) {
            goto LABEL_717;
          }
          uint64_t v89 = -v88;
          while (2)
          {
            char v90 = &v87[v89];
            uint64_t v91 = *(unsigned int *)&v87[v89];
            int v92 = *(_DWORD *)&v87[v89 + 4];
            unsigned int v93 = v92 - v91;
            uint64_t v94 = *(void *)&v87[v89 - 8];
            unint64_t v95 = (unsigned __int16 *)(v94 + 16);
            uint64_t v96 = *(void *)v94;
            if (*(void *)v94 == 6)
            {
              if (*(_DWORD *)v95 == 1869506409 && *(_WORD *)(v94 + 20) == 25970)
              {
                uint64_t v99 = 6;
LABEL_204:
                int AttrKindFromName = llvm::Attribute::getAttrKindFromName((char *)(v94 + 16), v99);
                if (AttrKindFromName != 75)
                {
                  if (v93 >= 3)
                  {
                    uint64_t v285 = "too many arguments";
                    goto LABEL_716;
                  }
                  if (!AttrKindFromName) {
                    goto LABEL_69;
                  }
                  if ((AttrKindFromName - 75) > 9)
                  {
                    if ((AttrPropTable[AttrKindFromName - 1] & 2) != 0)
                    {
                      if (v93 != 1)
                      {
                        uint64_t v285 = "this attribute should have one argument";
                        goto LABEL_716;
                      }
                    }
                    else if ((AttrPropTable[AttrKindFromName - 1] & 1) != 0 && v92 != v91)
                    {
                      uint64_t v285 = "this attribute has no argument";
                      goto LABEL_716;
                    }
                  }
                  else
                  {
                    if (v93 != 2)
                    {
                      uint64_t v285 = "this attribute should have 2 arguments";
                      goto LABEL_716;
                    }
                    if (*(unsigned char *)(*((void *)a3
                                    + 4 * (*(_DWORD *)v90 + 1)
                                    + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))
                                  + 16) != 16)
                    {
                      uint64_t v285 = "the second argument should be a constant integral value";
LABEL_716:
                      p_p = v285;
                      __int16 v355 = 259;
                      llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type **)a3);
                      goto LABEL_717;
                    }
                  }
                  v89 += 16;
                  if (!v89) {
                    goto LABEL_69;
                  }
                  continue;
                }
                if ((v93 & 0xFFFFFFFE) != 2)
                {
                  uint64_t v285 = "alignment assumptions should have 2 or 3 arguments";
                  goto LABEL_716;
                }
                uint64_t v324 = *(unsigned int *)&v87[v89];
                int v325 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
                if (*(unsigned char *)(**(void **)&v325[32 * v324] + 8) != 15)
                {
                  uint64_t v285 = "first argument should be a pointer";
                  goto LABEL_716;
                }
                if (*(unsigned char *)(**(void **)&v325[32 * (v324 + 1)] + 8) != 13)
                {
                  uint64_t v285 = "second argument should be an integer";
                  goto LABEL_716;
                }
                if (v93 == 3 && *(unsigned char *)(**(void **)&v325[32 * (v324 + 2)] + 8) != 13)
                {
                  uint64_t v285 = "third argument should be an integer if present";
                  goto LABEL_716;
                }
LABEL_717:
                if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v348.__r_.__value_.__l.__data_);
                }
                goto LABEL_24;
              }
            }
            else if (v96 == 16 {
                   && *(void *)v95 == 0x6574617261706573
            }
                   && *(void *)(v94 + 24) == 0x656761726F74735FLL)
            {
              if (v93 != 2)
              {
                uint64_t v285 = "separate_storage assumptions should have 2 arguments";
                goto LABEL_716;
              }
              int v328 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              if (*(unsigned char *)(**(void **)&v328[32 * v91] + 8) != 15
                || *(unsigned char *)(**(void **)&v328[32 * (v91 + 1)] + 8) != 15)
              {
                uint64_t v285 = "arguments to separate_storage assumptions should be pointers";
                goto LABEL_716;
              }
              goto LABEL_717;
            }
            break;
          }
          if (!llvm::Attribute::isExistingAttribute(v95, v96))
          {
            uint64_t v285 = "tags must be valid attribute names";
            goto LABEL_716;
          }
          uint64_t v94 = *((void *)v90 - 1);
          uint64_t v99 = *(void *)v94;
          goto LABEL_204;
        case 9:
          uint64_t v101 = *(llvm::Type **)a3;
          if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
            uint64_t v101 = (llvm::Type *)**((void **)v101 + 2);
          }
          if ((llvm::Type::getPrimitiveSizeInBits(v101) & 0xF) == 0) {
            goto LABEL_717;
          }
          char v54 = "bswap must be an even number of bytes";
          goto LABEL_106;
        case 10:
          uint64_t v102 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          unsigned int v103 = *(unsigned __int8 *)(v102 + 16);
          if (v103 < 0x1C
            || ((v104 = v103 - 33, BOOL v27 = v104 > 0x33, v105 = (1 << v104) & 0x8000000000041, !v27)
              ? (BOOL v106 = v105 == 0)
              : (BOOL v106 = 1),
                v106 || *(_DWORD *)(*(void *)(v102 - 32) + 36) != 11))
          {
            uint64_t v28 = "llvm.call.preallocated.arg token argument must be a llvm.call.preallocated.setup";
            goto LABEL_67;
          }
          uint64_t v107 = *((void *)a3 + 8);
          if ((!v107 || (*(unsigned char *)(v107 + 21) & 2) == 0)
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 73) & 1) == 0)
          {
            uint64_t v28 = "llvm.call.preallocated.arg must be called with a \"preallocated\" call site attribute";
            goto LABEL_67;
          }
          goto LABEL_717;
        case 11:
          uint64_t v108 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v108) {
            BOOL v109 = *(unsigned char *)(v108 + 16) == 16;
          }
          else {
            BOOL v109 = 0;
          }
          if (!v109)
          {
            uint64_t v28 = "llvm.call.preallocated.setup argument must be a constant";
            goto LABEL_67;
          }
          uint64_t v229 = *((void *)a3 + 1);
          if (!v229) {
            goto LABEL_717;
          }
          char v230 = 0;
          while (2)
          {
            uint64_t v231 = *(void *)(v229 + 24);
            unsigned int v232 = *(unsigned __int8 *)(v231 + 16);
            if (v232 < 0x1C
              || ((v233 = v232 - 33, BOOL v27 = v233 > 0x33, v234 = (1 << v233) & 0x8000000000041, !v27)
                ? (BOOL v235 = v234 == 0)
                : (BOOL v235 = 1),
                  v235))
            {
              uint64_t v28 = "Uses of llvm.call.preallocated.setup must be calls";
              goto LABEL_67;
            }
            uint64_t v236 = *(void *)(v231 - 32);
            if (!v236 || *(unsigned char *)(v236 + 16) || *(void *)(v236 + 24) != *(void *)(v231 + 72)) {
              break;
            }
            int v241 = *(_DWORD *)(v236 + 36);
            if (v241 == 12) {
              goto LABEL_460;
            }
            if (v241 == 10)
            {
              uint64_t v242 = *(void *)(v231 - 32 * (*(_DWORD *)(v231 + 20) & 0x7FFFFFF) + 32);
              if (v242) {
                BOOL v243 = *(unsigned char *)(v242 + 16) == 16;
              }
              else {
                BOOL v243 = 0;
              }
              if (v243)
              {
                LODWORD(v345) = *(_DWORD *)(v242 + 32);
                if (v345 > 0x40) {
                  operator new[]();
                }
                std::string __p = *(void **)(v242 + 24);
                if (!llvm::APInt::slt((llvm::APInt *)&__p, 0)
                  && (llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)(v108 + 24)) & 0x80000000) != 0)
                {
                  char v244 = 1;
                }
                else
                {
                  p_p = "llvm.call.preallocated.alloc arg index must be between 0 and corresponding llvm.call.preallocate"
                        "d.setup's argument count";
                  __int16 v355 = 259;
                  llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p);
                  char v244 = 0;
                }
                if (v345 >= 0x41 && __p) {
                  MEMORY[0x263E50080](__p, 0x1000C8000313F17);
                }
                if ((v244 & 1) == 0) {
                  goto LABEL_717;
                }
LABEL_460:
                uint64_t v229 = *(void *)(v229 + 8);
                if (!v229) {
                  goto LABEL_69;
                }
                continue;
              }
              uint64_t v28 = "llvm.call.preallocated.alloc arg index must be a constant";
LABEL_67:
              p_p = v28;
              __int16 v355 = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p);
              goto LABEL_717;
            }
            break;
          }
          if (v230)
          {
            uint64_t v28 = "Can have at most one call corresponding to a llvm.call.preallocated.setup";
            goto LABEL_67;
          }
          if (((llvm::CallBase::arg_end(*(llvm::CallBase **)(v229 + 24))
               - (v231
                + 32 * -(*(_DWORD *)(v231 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0)
            goto LABEL_660;
          uint64_t v237 = 0;
          unsigned int v238 = 0;
          do
            v237 += llvm::CallBase::paramHasAttr((llvm::CallBase *)v231, v238++, 73);
          while (v238 < ((llvm::CallBase::arg_end((llvm::CallBase *)v231)
                                       - (v231
                                        + 32 * (unint64_t)-(*(_DWORD *)(v231 + 20) & 0x7FFFFFF))) >> 5));
          if (!v237)
          {
LABEL_660:
            uint64_t v28 = "cannot use preallocated intrinsics on a call without preallocated arguments";
            goto LABEL_67;
          }
          unsigned int v239 = *(_DWORD *)(v108 + 32);
          v240 = (void *)(v108 + 24);
          if (v239 < 0x41) {
            goto LABEL_455;
          }
          if (v239 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v108 + 24)) <= 0x40)
          {
            v240 = *(void **)(v108 + 24);
LABEL_455:
            if (*v240 == v237)
            {
              if (llvm::CallBase::countOperandBundlesOfType((llvm::CallBase *)v231, 4) > 1) {
                goto LABEL_717;
              }
              llvm::CallBase::getOperandBundle(v231, 4, (uint64_t)&__p);
              if (v347)
              {
                if (*(llvm::CallBase **)__p == a3)
                {
                  char v230 = 1;
                  goto LABEL_460;
                }
                uint64_t v28 = "preallocated bundle must have token from corresponding llvm.call.preallocated.setup";
              }
              else
              {
                uint64_t v28 = "Use of llvm.call.preallocated.setup outside intrinsics must be in \"preallocated\" operand bundle";
              }
              goto LABEL_67;
            }
          }
          p_p = "llvm.call.preallocated.setup arg size must be equal to number of preallocated arguments at call site";
          __int16 v355 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type **)a3, (llvm::Type **)v231);
          goto LABEL_717;
        case 12:
          uint64_t v110 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          unsigned int v111 = *(unsigned __int8 *)(v110 + 16);
          if (v111 >= 0x1C)
          {
            unsigned int v112 = v111 - 33;
            BOOL v27 = v112 > 0x33;
            uint64_t v113 = (1 << v112) & 0x8000000000041;
            BOOL v114 = v27 || v113 == 0;
            if (!v114 && *(_DWORD *)(*(void *)(v110 - 32) + 36) == 11) {
              goto LABEL_717;
            }
          }
          uint64_t v28 = "llvm.call.preallocated.teardown token argument must be a llvm.call.preallocated.setup";
          goto LABEL_67;
        case 13:
          uint64_t v115 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (!v115 || *(unsigned char *)(v115 + 16) != 39)
          {
            char v54 = "intrinstic requires callbr operand";
            goto LABEL_106;
          }
          int v116 = (llvm::BasicBlock *)*((void *)a3 + 5);
          uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v116);
          if (!UniquePredecessor)
          {
            char v54 = "Intrinsic in block must have 1 unique predecessor";
            goto LABEL_106;
          }
          uint64_t v118 = *(void *)(UniquePredecessor + 40);
          uint64_t v119 = v118 - 24;
          if (v118) {
            uint64_t v120 = v118 - 24;
          }
          else {
            uint64_t v120 = 0;
          }
          if (*(unsigned __int8 *)(v120 + 16) - 29 >= 0xB) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = v119;
          }
          if (*(unsigned char *)(v121 + 16) != 39)
          {
            char v54 = "Intrinsic must have corresponding callbr in predecessor";
            goto LABEL_106;
          }
          llvm::CallBrInst::getIndirectDests((unsigned int *)v115, (uint64_t)&p_p);
          if (v353)
          {
            uint64_t v122 = 8 * v353 - 8;
            uint64_t v123 = (llvm::BasicBlock **)p_p;
            do
            {
              unsigned int v124 = *v123++;
              BOOL v125 = v124 == v116;
              BOOL v126 = v124 == v116 || v122 == 0;
              v122 -= 8;
            }
            while (!v126);
          }
          else
          {
            BOOL v125 = 0;
          }
          if (p_p != &v354) {
            free(p_p);
          }
          if (!v125)
          {
            char v54 = "Intrinsic's corresponding callbr must have intrinsic's parent basic block in indirect destination list";
            goto LABEL_106;
          }
          uint64_t v322 = *((void *)v116 + 6);
          if (!v322 || (llvm::CallBase *)(v322 - 24) != a3)
          {
            char v54 = "No other instructions may proceed intrinsic";
            goto LABEL_106;
          }
          goto LABEL_69;
        case 37:
          uint64_t v127 = (unsigned __int8 *)llvm::Value::stripPointerCasts(((llvm::Value **)a3
                                                                  - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12]);
          int v128 = v127[16];
          if (v128 == 19) {
            goto LABEL_717;
          }
          if (v128 == 3
            && (int v129 = v127, (v127[80] & 1) != 0)
            && llvm::GlobalVariable::hasDefinitiveInitializer((llvm::GlobalVariable *)v127))
          {
            if ((*(unsigned char *)(*((void *)v129 - 4) + 16) & 0xFE) == 8) {
              goto LABEL_717;
            }
            uint64_t v28 = "info argument of llvm.coro.id must refer to either a struct or an array";
          }
          else
          {
            uint64_t v28 = "info argument of llvm.coro.id must refer to an initialized constant";
          }
          goto LABEL_67;
        case 56:
          uint64_t v130 = "assign";
          uint64_t v131 = (llvm::raw_ostream **)this;
          uint64_t v132 = 6;
          goto LABEL_274;
        case 57:
          if (*(unsigned char *)(*((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) != 23)
          {
            uint64_t v285 = "invalid llvm.dbg.declare intrinsic call 1";
            goto LABEL_716;
          }
          uint64_t v130 = "declare";
          uint64_t v131 = (llvm::raw_ostream **)this;
          uint64_t v132 = 7;
LABEL_274:
          goto LABEL_717;
        case 58:
          goto LABEL_717;
        case 59:
          uint64_t v130 = "value";
          uint64_t v131 = (llvm::raw_ostream **)this;
          uint64_t v132 = 5;
          goto LABEL_274;
        case 63:
        case 64:
          if (*(unsigned char *)(*((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) == 80) {
            goto LABEL_69;
          }
          uint64_t v285 = "eh.exceptionpointer argument must be a catchpad";
          goto LABEL_716;
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
          goto LABEL_69;
        case 120:
          if (*((unsigned char *)a3 + 16) != 84)
          {
            uint64_t v285 = "experimental_deoptimize cannot be invoked";
            goto LABEL_716;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) != 1)
          {
            uint64_t v28 = "experimental_deoptimize must have exactly one \"deopt\" operand bundle";
            goto LABEL_67;
          }
          uint64_t v133 = *((void *)a3 + 5);
          if (*(void *)a3 != **(void **)(*(void *)(*(void *)(v133 + 56) + 24) + 16))
          {
            uint64_t v28 = "experimental_deoptimize return type must match caller return type";
            goto LABEL_67;
          }
          uint64_t v316 = *((void *)a3 + 4);
          uint64_t v317 = v316 - 24;
          BOOL v318 = v316 == v133 + 40 || v316 == 0;
          int v319 = v318;
          if (v318) {
            uint64_t v320 = 0;
          }
          else {
            uint64_t v320 = v317;
          }
          if (*(unsigned char *)(v320 + 16) == 29)
          {
            BOOL v321 = v319 == 0;
          }
          else
          {
            uint64_t v320 = 0;
            BOOL v321 = 0;
          }
          if (!v321)
          {
            uint64_t v28 = "calls to experimental_deoptimize must be followed by a return";
            goto LABEL_67;
          }
          if (*(unsigned char *)(*(void *)a3 + 8) == 7) {
            goto LABEL_717;
          }
          uint64_t v323 = *(_DWORD *)(v320 + 20) & 0x7FFFFFF;
          if (v323)
          {
            if (*(llvm::CallBase **)(v320 - 32 * v323) == a3) {
              goto LABEL_717;
            }
          }
          uint64_t v28 = "calls to experimental_deoptimize must be followed by a return of the value computed by experimental_deoptimize";
          goto LABEL_67;
        case 123:
          uint64_t v134 = llvm::CallBase::arg_end(a3);
          uint64_t v135 = (void **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (((v134 - (void)v135) & 0x1FFFFFFFE0) != 0x60)
          {
            uint64_t v285 = "wrong number of arguments";
            goto LABEL_716;
          }
          if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
            int v136 = *(unsigned __int8 *)(**(void **)(*(void *)a3 + 16) + 8);
          }
          else {
            int v136 = *(_DWORD *)(*(void *)a3 + 8);
          }
          if (v136 != 15)
          {
            uint64_t v285 = "gc.relocate must return a pointer or a vector of pointers";
            goto LABEL_716;
          }
          uint64_t v272 = (unsigned __int8 *)*v135;
          if (*v135 && v272[16] == 94)
          {
            unsigned int v273 = (llvm::BasicBlock *)*((void *)v272 + 5);
            uint64_t v274 = (void *)llvm::BasicBlock::getUniquePredecessor(v273);
            std::string __p = v274;
            if (!v274)
            {
              p_p = "safepoints should have unique landingpads";
              __int16 v355 = 259;
              int v343 = (llvm::Type **)v273;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v343);
              goto LABEL_717;
            }
            uint64_t v275 = (void *)v274[5];
            if (v275 == v274 + 5
              || ((uint64_t v276 = (uint64_t)(v275 - 3), v275) ? (v277 = v275 - 3) : (v277 = 0),
                  *((unsigned __int8 *)v277 + 16) - 29 >= 0xB))
            {
              int v300 = "safepoint block should be well formed";
              goto LABEL_671;
            }
            if (!llvm::GCStatepointInst::classof(v276))
            {
              int v300 = "gc relocate should be linked to a statepoint";
LABEL_671:
              p_p = v300;
              __int16 v355 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type ***)&__p);
              goto LABEL_717;
            }
          }
          else
          {
            std::string __p = *v135;
            if (!llvm::GCStatepointInst::classof((uint64_t)v272) && v272[16] - 11 >= 2)
            {
              p_p = "gc relocate is incorrectly tied to the statepoint";
              __int16 v355 = 259;
LABEL_574:
              llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type **)a3, (llvm::Type ***)&__p);
              goto LABEL_717;
            }
          }
          uint64_t Statepoint = llvm::GCProjectionInst::getStatepoint(a3);
          int v302 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          uint64_t v303 = *((void *)v302 + 4);
          if (*(unsigned char *)(v303 + 16) != 16)
          {
            uint64_t v285 = "gc.relocate operand #2 must be integer offset";
            goto LABEL_716;
          }
          uint64_t v304 = *((void *)v302 + 8);
          if (*(unsigned char *)(v304 + 16) != 16)
          {
            uint64_t v285 = "gc.relocate operand #3 must be integer offset";
            goto LABEL_716;
          }
          uint64_t v305 = (void *)(v303 + 24);
          if (*(_DWORD *)(v303 + 32) >= 0x41u) {
            uint64_t v305 = (void *)*v305;
          }
          unsigned int v306 = (void *)(v304 + 24);
          if (*(_DWORD *)(v304 + 32) >= 0x41u) {
            unsigned int v306 = (void *)*v306;
          }
          if (*(unsigned __int8 *)(Statepoint + 16) - 11 < 2) {
            goto LABEL_717;
          }
          uint64_t v307 = (void *)*v305;
          BOOL v308 = (void *)*v306;
          llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)&__p);
          if (v347)
          {
            if ((unint64_t)v307 >= v345)
            {
              uint64_t v285 = "gc.relocate: statepoint base index out of bounds";
              goto LABEL_716;
            }
            if ((unint64_t)v308 >= v345)
            {
              uint64_t v285 = "gc.relocate: statepoint derived index out of bounds";
              goto LABEL_716;
            }
          }
          uint64_t v309 = *(void *)a3;
          uint64_t v310 = *(void *)llvm::GCRelocateInst::getDerivedPtr(a3);
          BasePtr = llvm::GCRelocateInst::getBasePtr(a3);
          uint64_t v312 = *(void *)BasePtr;
          if ((*(_DWORD *)(*(void *)BasePtr + 8) & 0xFE) == 0x12) {
            int v313 = *(unsigned __int8 *)(**(void **)(v312 + 16) + 8);
          }
          else {
            int v313 = *(_DWORD *)(*(void *)BasePtr + 8);
          }
          if (v313 != 15) {
            goto LABEL_714;
          }
          int v329 = *(_DWORD *)(v310 + 8);
          int v330 = v329 & 0xFE;
          char v331 = v329;
          if (v330 == 18) {
            char v331 = *(unsigned char *)(**(void **)(v310 + 16) + 8);
          }
          if (v331 != 15)
          {
LABEL_714:
            uint64_t v285 = "gc.relocate: relocated value must be a pointer";
            goto LABEL_716;
          }
          unsigned int v332 = *(_DWORD *)(v309 + 8);
          if ((v330 == 18) != ((v332 & 0xFE) == 18))
          {
            uint64_t v285 = "gc.relocate: vector relocates to vector and pointer to pointer";
            goto LABEL_716;
          }
          if ((v332 & 0xFE) == 0x12) {
            unsigned int v332 = *(_DWORD *)(**(void **)(v309 + 16) + 8);
          }
          if (v330 == 18) {
            int v329 = *(_DWORD *)(**(void **)(v310 + 16) + 8);
          }
          if ((v329 ^ v332) >= 0x100)
          {
            uint64_t v285 = "gc.relocate: relocating a pointer shouldn't change its address space";
            goto LABEL_716;
          }
          v333 = (uint64_t *)(****(void ****)(*((void *)a3 + 5) + 56) + 2696);
          p_p = *(void **)(*((void *)a3 + 5) + 56);
          BOOL v334 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(v333, (uint64_t *)&p_p);
          uint64_t v337 = (void *)v334[1];
          int v335 = v334 + 1;
          v336 = v337;
          int v338 = *((char *)v335 + 23);
          if (v338 >= 0) {
            int v339 = v335;
          }
          else {
            int v339 = v336;
          }
          if (v338 >= 0) {
            int v340 = (void *)*((unsigned __int8 *)v335 + 23);
          }
          else {
            int v340 = (void *)v335[1];
          }
          llvm::getGCStrategy(v339, v340);
          if (!__p)
          {
            p_p = "gc.relocate: calling function must have GCStrategy";
            __int16 v355 = 259;
            int v343 = *(llvm::Type ***)(*((void *)a3 + 5) + 56);
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v343);
            goto LABEL_739;
          }
          {
            {
LABEL_739:
              int v342 = __p;
              std::string __p = 0;
              if (v342) {
                (*(void (**)(void *))(*(void *)v342 + 8))(v342);
              }
              goto LABEL_717;
            }
            int v341 = "gc.relocate: relocated value must be a gc pointer";
          }
          else
          {
            int v341 = "gc.relocate: must return gc pointer";
          }
          p_p = v341;
          __int16 v355 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type **)a3);
          goto LABEL_739;
        case 124:
          if ((*(_WORD *)(*(void *)(*((void *)a3 + 5) + 56) + 18) & 0x4000) == 0) {
            goto LABEL_429;
          }
          uint64_t v137 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          unsigned int v138 = *(unsigned __int8 *)(v137 + 16);
          if (v138 - 11 < 2) {
            goto LABEL_717;
          }
          if (v138 < 0x1C
            || ((v139 = v138 - 33, BOOL v27 = v139 > 0x33, v140 = (1 << v139) & 0x8000000000041, !v27)
              ? (BOOL v141 = v140 == 0)
              : (BOOL v141 = 1),
                v141
             || (uint64_t v142 = *(void *)(v137 - 32)) == 0
             || *(unsigned char *)(v142 + 16)
             || *(void *)(v142 + 24) != *(void *)(v137 + 72)
             || *(void *)(v142 + 72) != v142 + 72
             || (*(unsigned char *)(v142 + 35) & 1) != 0
             || *(_DWORD *)(v142 + 36) != 125))
          {
            p_p = "gc.result operand #1 must be from a statepoint";
            __int16 v355 = 259;
            std::string __p = (void *)v137;
            goto LABEL_574;
          }
          if (*(void *)a3 == **(void **)(llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v137 + 64), 2)+ 16))goto LABEL_717; {
          uint64_t v285 = "gc.result result type does not match wrapped callee";
          }
          goto LABEL_716;
        case 125:
          int v143 = *((unsigned __int8 *)a3 + 16);
          BOOL v144 = v143 == 84;
          if (v143 == 84) {
            uint64_t v145 = a3;
          }
          else {
            uint64_t v145 = 0;
          }
          std::string __p = v145;
          if (v144 && *(unsigned char *)(*((void *)a3 - 4) + 16) == 24)
          {
            p_p = "gc.statepoint support for inline assembly unimplemented";
            __int16 v355 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type ***)&__p);
            goto LABEL_717;
          }
          if ((*(_WORD *)(*(void *)(*((void *)a3 + 5) + 56) + 18) & 0x4000) == 0) {
            goto LABEL_429;
          }
          goto LABEL_717;
        case 126:
          if (*((unsigned char *)a3 + 16) != 84)
          {
            uint64_t v285 = "experimental_guard cannot be invoked";
            goto LABEL_716;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) == 1) {
            goto LABEL_717;
          }
          uint64_t v28 = "experimental_guard must have exactly one \"deopt\" operand bundle";
          goto LABEL_67;
        case 127:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)this + 510, (uint64_t)a3);
          goto LABEL_717;
        case 131:
          uint64_t v146 = *(void *)a3;
          if (*(void *)a3)
          {
            if ((*(_DWORD *)(v146 + 8) & 0xFE) == 0x12)
            {
              uint64_t v147 = **(llvm::Type ***)(v146 + 16);
              if (*((unsigned char *)v147 + 8) == 13 && (llvm::Type::getPrimitiveSizeInBits(v147) & 0xFFFFFFF8) != 0) {
                goto LABEL_717;
              }
            }
          }
          char v54 = "experimental_stepvector only supported for vectors of integers with a bitwidth of at least 8.";
          goto LABEL_106;
        case 135:
          uint64_t v148 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          unsigned int v149 = *(_DWORD *)(v148 + 32);
          if (v149 > 0x40) {
            uint64_t v150 = **(void **)(v148 + 24);
          }
          else {
            uint64_t v150 = (uint64_t)(*(void *)(v148 + 24) << -(char)v149) >> -(char)v149;
          }
          int64_t v245 = *(unsigned int *)(*(void *)a3 + 32);
          uint64_t v246 = *((void *)a3 + 5);
          if (v246)
          {
            uint64_t v247 = *(void *)(v246 + 56);
            if (v247)
            {
              uint64_t v248 = *(void *)(v247 + 112);
              if (v248)
              {
                if ((*(unsigned char *)(v248 + 22) & 0x10) != 0)
                {
                  if (*(_DWORD *)(v248 + 8) && (char v249 = *(llvm::AttributeSetNode **)(v248 + 40)) != 0) {
                    unsigned int VScaleRangeMin = llvm::AttributeSetNode::getVScaleRangeMin(v249);
                  }
                  else {
                    unsigned int VScaleRangeMin = 1;
                  }
                  int64_t v245 = VScaleRangeMin * (unint64_t)v245;
                }
              }
            }
          }
          if (v150 < 0)
          {
            if (v245 >= -v150) {
              goto LABEL_717;
            }
          }
          else if (v150 < v245)
          {
            goto LABEL_717;
          }
          char v54 = "The splice index exceeds the range [-VL, VL-1] where VL is the known minimum number of elements in the v"
                "ector. For scalable vectors the minimum number of elements is determined from vscale_range.";
          goto LABEL_106;
        case 136:
        case 137:
        case 138:
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 344:
        case 345:
        case 346:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
        case 353:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 411:
          goto LABEL_69;
        case 146:
          uint64_t v151 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          if (v151) {
            BOOL v152 = *(unsigned char *)(v151 + 16) == 23;
          }
          else {
            BOOL v152 = 0;
          }
          if (!v152 || (v153 = *(uint64_t ***)(v151 + 24), (std::string __p = v153) == 0))
          {
            uint64_t v285 = "missing rounding mode argument";
            goto LABEL_716;
          }
          if (*(unsigned char *)v153)
          {
            p_p = "invalid value for llvm.fptrunc.round metadata operand (the operand should be a string)";
            __int16 v355 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (uint64_t *)&__p);
            goto LABEL_717;
          }
          unsigned __int16 v314 = llvm::convertStrToRoundingMode(v153[1] + 3, *v153[1]);
          if (v314 >= 0x100u && v314 != 7) {
            goto LABEL_717;
          }
          uint64_t v285 = "unsupported rounding mode argument";
          goto LABEL_716;
        case 150:
        case 151:
        case 152:
          if (a2 != 151) {
            goto LABEL_149;
          }
          char v71 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (!v71 || *((unsigned char *)v71 + 16) != 59)
          {
            uint64_t v285 = "llvm.gcroot parameter #1 must be an alloca.";
            goto LABEL_716;
          }
          unsigned int v72 = *(unsigned __int8 *)(((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4] + 16);
          if (v72 >= 0x15)
          {
            uint64_t v285 = "llvm.gcroot parameter #2 must be a constant.";
            goto LABEL_716;
          }
          if (v72 == 19 && *(unsigned char *)(*((void *)v71 + 8) + 8) != 15)
          {
            uint64_t v285 = "llvm.gcroot parameter #1 must either be a pointer alloca, or argument #2 must be a non-null constant.";
            goto LABEL_716;
          }
LABEL_149:
          if ((*(_WORD *)(*(void *)(*((void *)a3 + 5) + 56) + 18) & 0x4000) == 0)
          {
LABEL_429:
            uint64_t v285 = "Enclosing function does not use GC.";
            goto LABEL_716;
          }
          goto LABEL_69;
        case 153:
          if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
          {
            if (*(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8) == 269) {
              goto LABEL_717;
            }
            uint64_t v285 = "get_active_lane_mask: element type is not i1";
          }
          else
          {
            uint64_t v285 = "get_active_lane_mask: must return a vector";
          }
          goto LABEL_716;
        case 159:
          if (!*((unsigned char *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
                + 16))
            goto LABEL_717;
          uint64_t v285 = "llvm.init_trampoline parameter #2 must resolve to a function.";
          goto LABEL_716;
        case 166:
          uint64_t v154 = *((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v154) {
            BOOL v155 = *(unsigned char *)(v154 + 16) == 16;
          }
          else {
            BOOL v155 = 0;
          }
          if (v155)
          {
            uint64_t v156 = (llvm::APInt *)(v154 + 24);
            unsigned int v157 = *(_DWORD *)(v154 + 32);
            unsigned int v158 = v157 - 1;
            unint64_t v159 = v156;
            if (v157 >= 0x41) {
              unint64_t v159 = (llvm::APInt *)(*(void *)v156 + 8 * (v158 >> 6));
            }
            if (((*(void *)v159 >> v158) & 1) == 0 || llvm::APInt::isAllOnes(v156)) {
              goto LABEL_717;
            }
          }
          char v54 = "invariant_start parameter must be -1, 0 or a positive number";
          goto LABEL_106;
        case 168:
          uint64_t v160 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          uint64_t v161 = (void *)(v160 + 24);
          if (*(_DWORD *)(v160 + 32) >= 0x41u) {
            uint64_t v161 = (void *)*v161;
          }
          if ((*(_DWORD *)v161 & 0xFFFFFC00) == 0) {
            goto LABEL_717;
          }
          uint64_t v28 = "unsupported bits for llvm.is.fpclass test mask";
          goto LABEL_67;
        case 172:
        case 173:
        case 183:
        case 184:
          if ((*(_DWORD *)(**((void **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 8) & 0xFE) != 0x12
            && (*(_DWORD *)(*(void *)a3 + 8) & 0xFE) != 0x12)
          {
            goto LABEL_69;
          }
          char v54 = "Intrinsic does not support vectors";
          goto LABEL_106;
        case 176:
          uint64_t v162 = *((void *)a3 + 5);
          uint64_t v163 = *(void *)(*(void *)(v162 + 56) + 80);
          if (v163) {
            uint64_t v164 = v163 - 24;
          }
          else {
            uint64_t v164 = 0;
          }
          if (v164 != v162)
          {
            uint64_t v285 = "llvm.localescape used outside of entry block";
            goto LABEL_716;
          }
          if (*((unsigned char *)this + 800))
          {
            uint64_t v285 = "multiple calls to llvm.localescape in one function";
            goto LABEL_716;
          }
          uint64_t v286 = (llvm::Value **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          uint64_t v287 = llvm::CallBase::arg_end(a3);
          if (v286 == (llvm::Value **)v287) {
            goto LABEL_602;
          }
          v288 = (llvm::Value **)v287;
          while (1)
          {
            if (*((unsigned char *)*v286 + 16) != 19)
            {
              uint64_t v289 = llvm::Value::stripPointerCasts(*v286);
              if (!v289 || *((unsigned char *)v289 + 16) != 59 || *(unsigned char *)(*((void *)v289 - 4) + 16) != 16) {
                break;
              }
              uint64_t v290 = *((void *)v289 + 5);
              uint64_t v291 = *(void *)(*(void *)(v290 + 56) + 80);
              uint64_t v292 = v291 ? v291 - 24 : 0;
              if (v292 != v290 || (*((_WORD *)v289 + 9) & 0x40) != 0) {
                break;
              }
            }
            v286 += 4;
            if (v286 == v288)
            {
LABEL_602:
              unint64_t v293 = (unint64_t)(llvm::CallBase::arg_end(a3)
                                      - ((void)a3
                                       - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))) >> 5;
              p_p = *(void **)(v162 + 56);
              *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct((uint64_t)this + 832, (uint64_t *)&p_p)+ 2) = v293;
              *((unsigned char *)this + 800) = 1;
              goto LABEL_69;
            }
          }
          uint64_t v285 = "llvm.localescape only accepts static allocas";
          goto LABEL_716;
        case 177:
          unint64_t v165 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (*((unsigned char *)v165 + 16)) {
            uint64_t v166 = 0;
          }
          else {
            uint64_t v166 = v165;
          }
          std::string __p = v166;
          if (!v166) {
            goto LABEL_577;
          }
          if (*((unsigned char *)v166 + 16))
          {
            if (*((unsigned char *)v166 + 16) == 3 && (*((_DWORD *)v166 + 5) & 0x7FFFFFF) == 0)
            {
LABEL_577:
              uint64_t v285 = "llvm.localrecover first argument must be function defined in this module";
              goto LABEL_716;
            }
          }
          else if (*((llvm::Value **)v166 + 9) == (llvm::Value *)((char *)v166 + 72) {
                 && (*((unsigned char *)v166 + 35) & 1) == 0)
          }
          {
            goto LABEL_577;
          }
          uint64_t v278 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          unsigned int v279 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct((uint64_t)this + 832, (uint64_t *)&__p);
          unint64_t v280 = *((unsigned int *)v279 + 3);
          __int16 LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v278 + 24), 0xFFFFFFFFuLL);
          if ((unint64_t)LimitedValue + 1 > v280) {
            int v282 = LimitedValue + 1;
          }
          else {
            int v282 = v280;
          }
          *((_DWORD *)v279 + 3) = v282;
          goto LABEL_717;
        case 187:
          uint64_t v167 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          uint64_t v168 = (int8x8_t **)(v167 + 24);
          unsigned int v169 = *(_DWORD *)(v167 + 32);
          if (v169 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v167 + 24)) == v169) {
              goto LABEL_717;
            }
          }
          else if (!*v168)
          {
            goto LABEL_717;
          }
          if (llvm::APInt::isPowerOf2(v168)) {
            goto LABEL_717;
          }
          uint64_t v285 = "masked_gather: alignment must be 0 or a power of 2";
          goto LABEL_716;
        case 188:
          if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) != 0x12)
          {
            uint64_t v285 = "masked_load: must return a vector";
            goto LABEL_716;
          }
          uint64_t v170 = (uint64_t *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          uint64_t v171 = v170[8];
          if ((*(_DWORD *)(*(void *)v171 + 8) & 0xFE) != 0x12)
          {
            uint64_t v285 = "masked_load: mask must be vector";
            goto LABEL_716;
          }
          uint64_t v172 = *v170;
          uint64_t v173 = (void *)v170[12];
          if (!llvm::APInt::isPowerOf2((int8x8_t **)(v170[4] + 24)))
          {
            uint64_t v285 = "masked_load: alignment must be a power of 2";
            goto LABEL_716;
          }
          uint64_t v174 = *(void *)a3;
          uint64_t v175 = *(void *)(*(void *)v172 + 24);
          if (v175) {
            BOOL v176 = v175 == v174;
          }
          else {
            BOOL v176 = 1;
          }
          if (!v176)
          {
            uint64_t v285 = "masked_load: return must match pointer type";
            goto LABEL_716;
          }
          if (*v173 != v174)
          {
            uint64_t v285 = "masked_load: pass through and return type must match";
            goto LABEL_716;
          }
          int v326 = *(_DWORD *)(v174 + 32);
          BOOL v327 = *(unsigned __int8 *)(v174 + 8) == 19;
          if (*(_DWORD *)(*(void *)v171 + 32) == v326
            && (((*(unsigned char *)(*(void *)v171 + 8) != 19) ^ v327) & 1) != 0)
          {
            goto LABEL_717;
          }
          uint64_t v285 = "masked_load: vector mask must be same length as return";
          goto LABEL_716;
        case 189:
          uint64_t v177 = ((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          BOOL v178 = (int8x8_t **)(v177 + 24);
          unsigned int v179 = *(_DWORD *)(v177 + 32);
          if (v179 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v177 + 24)) == v179) {
              goto LABEL_717;
            }
          }
          else if (!*v178)
          {
            goto LABEL_717;
          }
          if (llvm::APInt::isPowerOf2(v178)) {
            goto LABEL_717;
          }
          uint64_t v285 = "masked_scatter: alignment must be 0 or a power of 2";
          goto LABEL_716;
        case 190:
          uint64_t v180 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          uint64_t v181 = *((void *)v180 + 12);
          if ((*(_DWORD *)(*(void *)v181 + 8) & 0xFE) != 0x12)
          {
            uint64_t v285 = "masked_store: mask must be vector";
            goto LABEL_716;
          }
          uint64_t v182 = *(uint64_t **)v180;
          uint64_t v183 = *((void *)v180 + 4);
          if (!llvm::APInt::isPowerOf2((int8x8_t **)(*((void *)v180 + 8) + 24)))
          {
            uint64_t v285 = "masked_store: alignment must be a power of 2";
            goto LABEL_716;
          }
          uint64_t v184 = *v182;
          uint64_t v185 = *(void *)(*(void *)v183 + 24);
          if (v185) {
            BOOL v186 = v185 == v184;
          }
          else {
            BOOL v186 = 1;
          }
          if (!v186)
          {
            uint64_t v285 = "masked_store: storee must match pointer type";
            goto LABEL_716;
          }
          int v187 = *(_DWORD *)(v184 + 32);
          BOOL v188 = *(unsigned __int8 *)(v184 + 8) == 19;
          if (*(_DWORD *)(*(void *)v181 + 32) != v187
            || (((*(unsigned char *)(*(void *)v181 + 8) != 19) ^ v188) & 1) == 0)
          {
            uint64_t v285 = "masked_store: vector mask must be same length as value";
            goto LABEL_716;
          }
          goto LABEL_717;
        case 191:
        case 192:
        case 193:
        case 194:
          uint64_t v60 = *((void *)a3 - 4);
          if (!v60 || *(unsigned char *)(v60 + 16) || *(void *)(v60 + 24) != *((void *)a3 + 9)) {
            uint64_t v60 = 0;
          }
          std::string __p = (void *)v60;
          switch(a2)
          {
            case 192:
              BOOL v209 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              if (*(unsigned char *)(*((void *)v209 + 8) + 16) == 16) {
                uint64_t v62 = *((void *)v209 + 8);
              }
              else {
                uint64_t v62 = 0;
              }
              uint64_t v63 = *((void *)v209 + 16);
              uint64_t v64 = *((void *)v209 + 20);
              uint64_t v65 = **(void **)v209;
              uint64_t v68 = *(void *)(v65 + 24);
              uint64_t v210 = **((void **)v209 + 4);
              if (*(void *)(v210 + 24)) {
                uint64_t v67 = **(void **)(v210 + 16);
              }
              else {
                uint64_t v67 = 0;
              }
              goto LABEL_521;
            case 193:
              unint64_t v211 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              uint64_t v63 = *((void *)v211 + 8);
              uint64_t v212 = *((void *)v211 + 12);
              uint64_t v213 = **(void **)v211;
              int v214 = (void *)(v63 + 24);
              if (*(_DWORD *)(v63 + 32) >= 0x41u) {
                int v214 = (void *)*v214;
              }
              uint64_t v64 = *((void *)v211 + 16);
              uint64_t v215 = (void *)*v214;
              if (*(_DWORD *)(v212 + 32) > 0x40u) {
                uint64_t v216 = **(void **)(v212 + 24);
              }
              else {
                uint64_t v216 = *(void *)(v212 + 24);
              }
              if (v216 * (void)v215 != *(_DWORD *)(v213 + 32))
              {
                uint64_t v28 = "First argument of a matrix operation does not match specified shape!";
                goto LABEL_67;
              }
              uint64_t v251 = **((void **)v211 + 4);
              uint64_t v252 = (void *)(v64 + 24);
              if (*(_DWORD *)(v64 + 32) >= 0x41u) {
                uint64_t v252 = (void *)*v252;
              }
              if (*v252 * v216 != *(_DWORD *)(v251 + 32))
              {
                uint64_t v28 = "Second argument of a matrix operation does not match specified shape!";
                goto LABEL_67;
              }
              uint64_t v62 = 0;
              uint64_t v65 = *(void *)a3;
              uint64_t v68 = *(void *)(v213 + 24);
              uint64_t v67 = *(void *)(v251 + 24);
LABEL_521:
              uint64_t v257 = *(void *)(v65 + 24);
              unsigned int v258 = *(unsigned __int8 *)(v257 + 8);
              BOOL v260 = v258 == 13 || v258 < 4 || v258 == 5;
              unsigned int v261 = v258 & 0xFFFFFFFD;
              if (!v260 && v261 != 4)
              {
                int v300 = "Result type must be an integer or floating-point type!";
                goto LABEL_671;
              }
              if (v68) {
                BOOL v263 = v257 == v68;
              }
              else {
                BOOL v263 = 1;
              }
              if (!v263)
              {
                int v300 = "Vector element type mismatch of the result and first operand vector!";
                goto LABEL_671;
              }
              if (v67 && v257 != v67)
              {
                int v300 = "Vector element type mismatch of the result and second operand vector!";
                goto LABEL_671;
              }
              uint64_t v264 = *(unsigned int *)(v65 + 32);
              int v265 = (uint64_t *)(v63 + 24);
              unsigned int v266 = *(_DWORD *)(v63 + 32);
              int v267 = v265;
              if (v266 >= 0x41) {
                int v267 = (uint64_t *)*v265;
              }
              uint64_t v268 = *v267;
              int v269 = (void *)(v64 + 24);
              if (*(_DWORD *)(v64 + 32) >= 0x41u) {
                int v269 = (void *)*v269;
              }
              if (*v269 * v268 != v264)
              {
                uint64_t v28 = "Result of a matrix operation does not fit in the returned vector!";
                goto LABEL_67;
              }
              if (v62)
              {
                uint64_t v270 = (void *)(v62 + 24);
                if (*(_DWORD *)(v62 + 32) >= 0x41u) {
                  uint64_t v270 = (void *)*v270;
                }
                int v271 = (void *)*v270;
                if (v266 >= 0x41) {
                  int v265 = (uint64_t *)*v265;
                }
                if ((unint64_t)v271 < *v265)
                {
                  int v300 = "Stride must be greater or equal than the number of rows!";
                  goto LABEL_671;
                }
              }
              break;
            case 194:
              uint64_t v62 = 0;
              uint64_t v67 = 0;
              int v217 = (void *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
              uint64_t v63 = v217[4];
              uint64_t v64 = v217[8];
              uint64_t v65 = *(void *)a3;
              uint64_t v68 = *(void *)(*(void *)*v217 + 24);
              goto LABEL_521;
            default:
              unint64_t v61 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              if (*(unsigned char *)(*((void *)v61 + 4) + 16) == 16) {
                uint64_t v62 = *((void *)v61 + 4);
              }
              else {
                uint64_t v62 = 0;
              }
              uint64_t v63 = *((void *)v61 + 12);
              uint64_t v64 = *((void *)v61 + 16);
              uint64_t v65 = *(void *)a3;
              uint64_t v66 = **(void **)v61;
              uint64_t v67 = *(void *)(v66 + 24);
              if (v67)
              {
                uint64_t v67 = 0;
                uint64_t v68 = **(void **)(v66 + 16);
              }
              else
              {
                uint64_t v68 = 0;
              }
              goto LABEL_521;
          }
          goto LABEL_69;
        case 198:
        case 201:
        case 203:
          uint64_t v74 = (int8x8_t **)(((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12] + 24);
          if (!llvm::APInt::isPowerOf2(v74))
          {
            uint64_t v285 = "element size of the element-wise atomic memory intrinsic must be a power of 2";
            goto LABEL_716;
          }
          Paramunsigned __int16 Alignment = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 64), 0);
          {
            uint64_t v285 = "incorrect alignment of the destination argument";
            goto LABEL_716;
          }
          int v76 = *(_DWORD *)(*((void *)a3 - 4) + 36);
          if (v76 == 201 || v76 == 198)
          {
            __int16 v77 = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 64), 1);
            {
              uint64_t v285 = "incorrect alignment of the source argument";
              goto LABEL_716;
            }
          }
          goto LABEL_69;
        case 244:
          int v189 = (void *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          uint64_t v190 = v189[4];
          int v191 = (void *)(v190 + 24);
          if (*(_DWORD *)(v190 + 32) >= 0x41u) {
            int v191 = (void *)*v191;
          }
          if (*v191 >= 2uLL)
          {
            uint64_t v285 = "rw argument to llvm.prefetch must be 0-1";
            goto LABEL_716;
          }
          uint64_t v192 = v189[8];
          int v193 = (void *)(v192 + 24);
          if (*(_DWORD *)(v192 + 32) >= 0x41u) {
            int v193 = (void *)*v193;
          }
          if (*v193 >= 4uLL)
          {
            uint64_t v285 = "locality argument to llvm.prefetch must be 0-4";
            goto LABEL_716;
          }
          uint64_t v194 = v189[12];
          uint64_t v195 = (void *)(v194 + 24);
          if (*(_DWORD *)(v194 + 32) >= 0x41u) {
            uint64_t v195 = (void *)*v195;
          }
          if (*v195 >= 2uLL)
          {
            uint64_t v285 = "cache type argument to llvm.prefetch must be 0-1";
            goto LABEL_716;
          }
          goto LABEL_717;
        case 245:
        case 246:
        case 477:
        case 480:
          goto LABEL_116;
        case 267:
        case 268:
        case 279:
        case 280:
        case 306:
        case 307:
        case 310:
        case 311:
          int v56 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          uint64_t v57 = **(void **)v56;
          int v58 = *(_DWORD *)(v57 + 8) & 0xFE;
          if (v58 == 18) {
            int v59 = *(unsigned __int8 *)(**(void **)(v57 + 16) + 8);
          }
          else {
            int v59 = *(_DWORD *)(v57 + 8);
          }
          if (v59 != 13)
          {
            uint64_t v28 = "first operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_67;
          }
          uint64_t v69 = **((void **)v56 + 4);
          if ((*(_DWORD *)(v69 + 8) & 0xFE) == 0x12) {
            int v70 = *(unsigned __int8 *)(**(void **)(v69 + 16) + 8);
          }
          else {
            int v70 = *(_DWORD *)(v69 + 8);
          }
          if (v70 != 13)
          {
            uint64_t v28 = "second operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_67;
          }
          uint64_t v83 = (unint64_t *)*((void *)v56 + 8);
          if (*(_DWORD *)(*v83 + 8) >> 8 >= 0x21u)
          {
            uint64_t v28 = "third argument of [us][mul|div]_fix[_sat] must fit within 32 bits";
            goto LABEL_67;
          }
          if ((a2 - 267) <= 0xD && ((1 << (a2 - 11)) & 0x3003) != 0)
          {
            uint64_t v84 = v83 + 3;
            if (*((_DWORD *)v83 + 8) >= 0x41u) {
              uint64_t v84 = (unint64_t *)*v84;
            }
            if (v58 == 18) {
              uint64_t v57 = **(void **)(v57 + 16);
            }
            unint64_t v85 = *v84;
            if (v85 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v57))
            {
              uint64_t v28 = "the scale of s[mul|div]_fix[_sat] must be less than the width of the operands";
              goto LABEL_67;
            }
          }
          else
          {
            v283 = v83 + 3;
            if (*((_DWORD *)v83 + 8) >= 0x41u) {
              v283 = (unint64_t *)*v283;
            }
            if (v58 == 18) {
              uint64_t v57 = **(void **)(v57 + 16);
            }
            unint64_t v284 = *v283;
            if (v284 > llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v57))
            {
              uint64_t v28 = "the scale of u[mul|div]_fix[_sat] must be less than or equal to the width of the operands";
              goto LABEL_67;
            }
          }
          goto LABEL_69;
        case 289:
          if (*((unsigned char *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
               + 16) == 59)
            goto LABEL_717;
          uint64_t v285 = "llvm.stackprotector parameter #2 must resolve to an alloca.";
          goto LABEL_716;
        case 320:
          int v196 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          int v197 = *(uint64_t **)v196;
          uint64_t v198 = *((void *)v196 + 4);
          int v199 = (void *)(v198 + 24);
          if (*(_DWORD *)(v198 + 32) >= 0x41u) {
            int v199 = (void *)*v199;
          }
          uint64_t v200 = *(void *)a3;
          uint64_t v201 = *v197;
          if (*(void *)(*(void *)a3 + 24) != *(void *)(v201 + 24))
          {
            char v54 = "vector_extract result must have the same element type as the input vector.";
            goto LABEL_106;
          }
          unsigned int v253 = *(_DWORD *)v199;
          unsigned int v254 = *(_DWORD *)(v200 + 32);
          if (v253 % v254)
          {
            uint64_t v28 = "vector_extract index must be a constant multiple of the result type's known minimum vector length.";
            goto LABEL_67;
          }
          if ((*(unsigned char *)(v201 + 8) == 19) != (*(unsigned char *)(v200 + 8) == 19)) {
            goto LABEL_717;
          }
          unsigned int v294 = *(_DWORD *)(v201 + 32);
          unsigned int v295 = v254 + v253;
          if (v294 > v253 && v295 <= v294) {
            goto LABEL_717;
          }
          uint64_t v28 = "vector_extract would overrun.";
          goto LABEL_67;
        case 321:
          unint64_t v202 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          int v203 = *(uint64_t **)v202;
          int v204 = (uint64_t *)*((void *)v202 + 4);
          uint64_t v205 = *((void *)v202 + 8);
          int v206 = (void *)(v205 + 24);
          if (*(_DWORD *)(v205 + 32) >= 0x41u) {
            int v206 = (void *)*v206;
          }
          uint64_t v207 = *v203;
          uint64_t v208 = *v204;
          if (*(void *)(v207 + 24) != *(void *)(*v204 + 24))
          {
            char v54 = "vector_insert parameters must have the same element type.";
            goto LABEL_106;
          }
          unsigned int v255 = *(_DWORD *)v206;
          unsigned int v256 = *(_DWORD *)(v208 + 32);
          if (v255 % v256)
          {
            uint64_t v28 = "vector_insert index must be a constant multiple of the subvector's known minimum vector length.";
            goto LABEL_67;
          }
          if ((*(unsigned char *)(v207 + 8) == 19) != (*(unsigned char *)(v208 + 8) == 19)) {
            goto LABEL_717;
          }
          unsigned int v297 = *(_DWORD *)(v207 + 32);
          unsigned int v298 = v256 + v255;
          if (v297 > v255 && v298 <= v297) {
            goto LABEL_717;
          }
          uint64_t v28 = "subvector operand of vector_insert would overrun the vector being inserted into.";
          goto LABEL_67;
        case 322:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 334:
          uint64_t v55 = **((void **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(v55 + 8) & 0xFE) == 0x12 && *(unsigned char *)(**(void **)(v55 + 16) + 8) == 13) {
            goto LABEL_69;
          }
          goto LABEL_173;
        case 324:
        case 327:
          int v78 = (uint64_t *)((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          goto LABEL_165;
        case 325:
        case 326:
          int v78 = (uint64_t *)*((void *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
LABEL_165:
          uint64_t v79 = *v78;
          int v80 = *(_DWORD *)(*v78 + 8);
          int v81 = v80 & 0xFE;
          if (v81 == 18) {
            int v80 = *(_DWORD *)(**(void **)(v79 + 16) + 8);
          }
          if (v80 < 4u || v80 == 5)
          {
            if (v81 == 18) {
              goto LABEL_69;
            }
            goto LABEL_173;
          }
          int v227 = v80 & 0xFD;
          if (v81 != 18 || v227 != 4)
          {
LABEL_173:
            uint64_t v28 = "Intrinsic has incorrect argument type!";
            goto LABEL_67;
          }
          break;
        default:
          goto LABEL_69;
      }
      goto LABEL_69;
    }
    if (a2 <= 2598)
    {
      if (a2 == 664)
      {
        int v218 = (void *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
        uint64_t v219 = v218[4];
        int v220 = (void *)(v219 + 24);
        if (*(_DWORD *)(v219 + 32) >= 0x41u) {
          int v220 = (void *)*v220;
        }
        if (*v220 >= 2uLL)
        {
          uint64_t v285 = "write argument to llvm.aarch64.prefetch must be 0 or 1";
        }
        else
        {
          uint64_t v221 = v218[8];
          BOOL v222 = (void *)(v221 + 24);
          if (*(_DWORD *)(v221 + 32) >= 0x41u) {
            BOOL v222 = (void *)*v222;
          }
          if (*v222 >= 4uLL)
          {
            uint64_t v285 = "target argument to llvm.aarch64.prefetch must be 0-3";
          }
          else
          {
            uint64_t v223 = v218[12];
            int v224 = (void *)(v223 + 24);
            if (*(_DWORD *)(v223 + 32) >= 0x41u) {
              int v224 = (void *)*v224;
            }
            if (*v224 >= 2uLL)
            {
              uint64_t v285 = "stream argument to llvm.aarch64.prefetch must be 0 or 1";
            }
            else
            {
              uint64_t v225 = v218[16];
              uint64_t v226 = (void *)(v225 + 24);
              if (*(_DWORD *)(v225 + 32) >= 0x41u) {
                uint64_t v226 = (void *)*v226;
              }
              if (*v226 < 2uLL) {
                goto LABEL_717;
              }
              uint64_t v285 = "isdata argument to llvm.aarch64.prefetch must be 0 or 1";
            }
          }
        }
        goto LABEL_716;
      }
      if (a2 != 953 && a2 != 955) {
        goto LABEL_69;
      }
    }
    else
    {
      if (a2 <= 3004)
      {
        if (a2 == 2599 || a2 == 2605)
        {
LABEL_116:
          if (!llvm::AttributeList::getParamElementType((llvm::CallBase *)((char *)a3 + 64), 0))
          {
            char v54 = "Intrinsic requires elementtype attribute on first argument.";
LABEL_106:
            p_p = v54;
            __int16 v355 = 259;
            std::string __p = a3;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (llvm::Type ***)&__p);
            goto LABEL_717;
          }
        }
        goto LABEL_69;
      }
      if (a2 != 3005 && a2 != 3007) {
        goto LABEL_69;
      }
    }
    p_p = (void *)*((void *)a3 + 8);
    if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&p_p, 1))
    {
      char v54 = "Intrinsic requires elementtype attribute on second argument.";
      goto LABEL_106;
    }
LABEL_69:
    if ((a2 - 219) >= 0x15 && (a2 - 212) > 4) {
      goto LABEL_717;
    }
    uint64_t v29 = *(void *)(*((void *)a3 + 5) + 56);
    if ((*(_WORD *)(v29 + 18) & 8) == 0) {
      goto LABEL_717;
    }
    int v30 = *(_DWORD *)(v29 + 20);
    char v31 = (v30 & 0x40000000) != 0 ? *(uint64_t **)(v29 - 8) : (uint64_t *)(v29 - 32 * (v30 & 0x7FFFFFF));
    int v32 = llvm::classifyEHPersonality(*v31, v19);
    if ((v32 - 7) >= 4 && v32 != 12) {
      goto LABEL_717;
    }
    if (!*((_DWORD *)this + 228))
    {
      llvm::colorEHFunclets((llvm *)v29, (uint64_t)&p_p);
      llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=((uint64_t *)this + 113, (uint64_t)&p_p);
      llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::~DenseMap((uint64_t *)&p_p);
    }
    uint64_t v34 = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(*((void *)this + 113), *((_DWORD *)this + 230), *((void *)a3 + 5));
    unint64_t v37 = v34[1];
    uint64_t v35 = v34 + 1;
    unint64_t v36 = v37;
    if ((v37 & 4) != 0)
    {
      unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v35 = *(uint64_t **)v39;
      uint64_t v38 = *(void *)v39 + 8 * *(unsigned int *)(v39 + 8);
    }
    else
    {
      uint64_t v38 = (uint64_t)&v35[v36 > 7];
    }
    if (v35 == (uint64_t *)v38)
    {
      int v44 = 1;
    }
    else
    {
      int v40 = 0;
      do
      {
        for (uint64_t i = *(void *)(*v35 + 48); ; uint64_t i = *(void *)(i + 8))
        {
          if (i == *v35 + 40)
          {
            BOOL v43 = 0;
            goto LABEL_96;
          }
          uint64_t v42 = i - 24;
          if (!i) {
            uint64_t v42 = 0;
          }
          if (*(unsigned char *)(v42 + 16) != 83) {
            break;
          }
        }
        BOOL v43 = *(unsigned __int8 *)(i - 8) - 79 < 2;
LABEL_96:
        v40 |= v43;
        ++v35;
      }
      while (v35 != (uint64_t *)v38);
      int v44 = v40 ^ 1;
    }
    int v45 = *((_DWORD *)a3 + 5);
    if (v45 < 0
      && (uint64_t v47 = (char *)a3 - 32 * (v45 & 0x7FFFFFF),
          unint64_t v50 = *((void *)v47 - 1),
          uint64_t v48 = v47 - 8,
          unint64_t v49 = v50,
          (v50 & 0xFFFFFFFF0) != 0))
    {
      int v46 = 0;
      uint64_t v51 = (v49 >> 4);
      uint64_t v52 = &v48[-v49];
      do
      {
        uint64_t v53 = *(void *)v52;
        v52 += 16;
        v46 |= *(_DWORD *)(v53 + 8) == 1;
        --v51;
      }
      while (v51);
    }
    else
    {
      int v46 = 0;
    }
    if ((v44 | v46)) {
      goto LABEL_717;
    }
    char v54 = "Missing funclet token on intrinsic call";
    goto LABEL_106;
  }
  uint64_t v10 = "Intrinsic has incorrect return type!";
LABEL_23:
  p_p = v10;
  __int16 v355 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v351);
LABEL_24:
  if (v356 != v358) {
    free(v356);
  }
  if (v359 != (unsigned int *)v361) {
    free(v359);
  }
}

uint64_t llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>(uint64_t result)
{
  if (*(unsigned char *)(result + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(result - 32);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(result + 72)) {
    return 0;
  }
  if ((*(_DWORD *)(v1 + 32) & 0x2000) == 0) {
    return 0;
  }
  return result;
}

void anonymous namespace'::Verifier::verifyAttachedCallBundle(llvm::raw_ostream **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = *(void *)(a2 + 72);
  int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  if (v7 != 15)
  {
    uint64_t v8 = *(void *)(a2 + 64);
    if (!v8 || (*(char *)(v8 + 15) & 0x80000000) == 0)
    {
      if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 31)) {
        goto LABEL_10;
      }
      int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
    }
    if (v7 == 7) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v10 = "a call with operand bundle \"clang.arc.attachedcall\" must call a function returning a pointer or a non-return"
          "ing function that has a void return type";
    goto LABEL_11;
  }
LABEL_7:
  if (a3[1] != (uint64_t *)1 || (uint64_t v9 = **a3, *(unsigned char *)(v9 + 16)))
  {
    uint64_t v10 = "operand bundle \"clang.arc.attachedcall\" requires one function as an argument";
LABEL_11:
    uint64_t v19 = v10;
    __int16 v20 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (const llvm::Twine *)&v19, (llvm::Type **)a2);
    return;
  }
  int v11 = *(_DWORD *)(v9 + 36);
  if ((v11 - 216) > 0x17 || ((1 << (v11 + 40)) & 0x804001) == 0)
  {
    if (v11 || (*(unsigned char *)(v9 + 23) & 0x10) == 0) {
      goto LABEL_27;
    }
    uint64_t ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v9);
    uint64_t v16 = *ValueName;
    uint64_t v14 = ValueName + 2;
    uint64_t v15 = v16;
    if (v16 == 33)
    {
      unsigned int v17 = "objc_claimAutoreleasedReturnValue";
      size_t v18 = 33;
    }
    else if (v15 == 39)
    {
      unsigned int v17 = "objc_unsafeClaimAutoreleasedReturnValue";
      size_t v18 = 39;
    }
    else
    {
      if (v15 != 34) {
        goto LABEL_27;
      }
      unsigned int v17 = "objc_retainAutoreleasedReturnValue";
      size_t v18 = 34;
    }
    if (!memcmp(v14, v17, v18)) {
      return;
    }
LABEL_27:
    uint64_t v10 = "invalid function argument";
    goto LABEL_11;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t ***)a1, a3);
  }
}

void anonymous namespace'::Verifier::verifyInlineAsmCall(llvm::raw_ostream **this, const llvm::CallBase *a2)
{
  uint64_t v4 = *((void *)a2 - 4);
  int v7 = *(char **)(v4 + 48);
  uint64_t v5 = v4 + 48;
  uint64_t v6 = v7;
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (char *)v5;
  }
  else {
    uint64_t v9 = v6;
  }
  uint64_t v10 = *(void *)(v5 + 8);
  if (v8 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v10;
  }
  llvm::InlineAsm::ParseConstraints(v9, v11, (uint64_t *)&v22);
  int v12 = v22;
  unsigned int v13 = v23;
  if (v22 != v23)
  {
    unsigned int v14 = 0;
    int v15 = 0;
    while (1)
    {
      int v16 = *(_DWORD *)v12;
      if (!*(_DWORD *)v12) {
        break;
      }
      if (v16 != 1)
      {
        if (v16 == 3) {
          ++v15;
        }
        goto LABEL_21;
      }
      if (*((unsigned char *)v12 + 13)) {
        goto LABEL_18;
      }
LABEL_21:
      v12 += 10;
      if (v12 == v13) {
        goto LABEL_24;
      }
    }
    if (*((unsigned char *)v12 + 13))
    {
LABEL_18:
      if (*(unsigned char *)(**((void **)a2 + 4 * v14 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 8) != 15)
      {
        size_t v18 = "Operand for indirect constraint must have pointer type";
        goto LABEL_32;
      }
      if (!llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 64), v14))
      {
        size_t v18 = "Operand for indirect constraint must have elementtype attribute";
LABEL_32:
        uint64_t v19 = (llvm::Type **)a2;
        v20[0] = (void **)v18;
        __int16 v21 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v20, &v19);
        v20[0] = (void **)&v22;
        std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v20);
        return;
      }
    }
    else if (llvm::CallBase::paramHasAttr(a2, v14, 71))
    {
      size_t v18 = "Elementtype attribute can only be applied for indirect constraints";
      goto LABEL_32;
    }
    ++v14;
    goto LABEL_21;
  }
  int v15 = 0;
LABEL_24:
  v20[0] = (void **)&v22;
  std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v20);
  if (*((unsigned char *)a2 + 16) == 39)
  {
    if (v15 == *((_DWORD *)a2 + 20)) {
      return;
    }
    unsigned int v17 = "Number of label constraints does not match number of callbr dests";
  }
  else
  {
    if (!v15) {
      return;
    }
    unsigned int v17 = "Label constraints can only be used with callbr";
  }
  v20[0] = (void **)v17;
  __int16 v21 = 259;
  BOOL v22 = (llvm::Type **)a2;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v20, &v22);
}

BOOL llvm::GlobalVariable::hasDefinitiveInitializer(llvm::GlobalVariable *this)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 16) {
         && *((llvm::GlobalVariable **)this + 9) == (llvm::GlobalVariable *)((char *)this + 72)
  }
         && (*((unsigned char *)this + 35) & 1) == 0)
  {
    return 0;
  }
  if (llvm::GlobalValue::isInterposable(this)) {
    return 0;
  }
  return (*((unsigned char *)this + 80) & 2) == 0;
}

void anonymous namespace'::Verifier::visitVPIntrinsic(llvm::raw_ostream **a1, llvm::VPCmpIntrinsic *this)
{
  int v4 = *(_DWORD *)(*((void *)this - 4) + 36);
  if ((v4 - 348) > 0x3F) {
    goto LABEL_41;
  }
  if (((1 << (v4 - 92)) & 0x8502800004020780) == 0)
  {
    if (v4 == 348)
    {
      if (llvm::VPCmpIntrinsic::getPredicate(this) > 0xF)
      {
        int v16 = "invalid predicate for VP FP comparison intrinsic";
        goto LABEL_57;
      }
      int v4 = *(_DWORD *)(*((void *)this - 4) + 36);
    }
LABEL_41:
    if (v4 != 364 || llvm::VPCmpIntrinsic::getPredicate(this) - 32 < 0xA) {
      return;
    }
    int v16 = "invalid predicate for VP integer comparison intrinsic";
LABEL_57:
    uint64_t v38 = (llvm::Type **)this;
    v39[0] = v16;
    __int16 v40 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v39, &v38);
    return;
  }
  uint64_t v5 = *(llvm::Type **)this;
  uint64_t v6 = **((void **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  int v7 = *(unsigned __int8 *)(*(void *)this + 8);
  int v8 = *(unsigned __int8 *)(v6 + 8);
  if (*(_DWORD *)(*(void *)this + 32) != *(_DWORD *)(v6 + 32) || (v7 != 19) == (v8 == 19))
  {
    int v12 = "VP cast intrinsic first argument and result vector lengths must be equal";
    goto LABEL_22;
  }
  if (v4 <= 373)
  {
    switch(v4)
    {
      case 356:
      case 357:
        if ((v7 & 0xFE) == 0x12) {
          int v7 = *(unsigned __int8 *)(**((void **)v5 + 2) + 8);
        }
        if (v7 == 13)
        {
          if ((v8 & 0xFE) == 0x12) {
            int v8 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
          }
          BOOL v13 = v8 < 4u || v8 == 5;
          int v14 = v8 & 0xFD;
          if (v13 || v14 == 4) {
            return;
          }
        }
        int v12 = "llvm.vp.fptoui or llvm.vp.fptosi intrinsic first argument element type must be floating-point and result e"
              "lement type must be integer";
        goto LABEL_22;
      case 358:
        int v29 = v7 & 0xFE;
        if (v29 == 18) {
          int v7 = *(_DWORD *)(**((void **)v5 + 2) + 8);
        }
        BOOL v30 = v7 < 4u || v7 == 5;
        int v31 = v7 & 0xFD;
        if (!v30 && v31 != 4) {
          goto LABEL_138;
        }
        int v33 = v8 & 0xFE;
        if (v33 == 18) {
          int v8 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        BOOL v34 = v8 < 4u || v8 == 5;
        int v35 = v8 & 0xFD;
        if (!v34 && v35 != 4)
        {
LABEL_138:
          int v12 = "llvm.vp.fptrunc intrinsic first argument and result element type must be floating-point";
          goto LABEL_22;
        }
        if (v29 == 18) {
          uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
        }
        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
        if (v33 == 18) {
          uint64_t v6 = **(void **)(v6 + 16);
        }
        if (PrimitiveSizeInBits >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
        {
          int v12 = "llvm.vp.fptrunc intrinsic the bit size of first argument must be larger than the bit size of the return type";
          goto LABEL_22;
        }
        return;
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
        __break(1u);
        JUMPOUT(0x261E7A2A8);
      case 365:
        if ((v7 & 0xFE) == 0x12) {
          int v7 = *(unsigned __int8 *)(**((void **)v5 + 2) + 8);
        }
        if (v7 == 15)
        {
          if ((v8 & 0xFE) == 0x12) {
            int v8 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
          }
          if (v8 == 13) {
            return;
          }
        }
        int v12 = "llvm.vp.inttoptr intrinsic first argument element type must be integer and result element type must be pointer";
        goto LABEL_22;
      default:
        int v20 = v7 & 0xFE;
        if (v20 == 18) {
          int v7 = *(_DWORD *)(**((void **)v5 + 2) + 8);
        }
        BOOL v21 = v7 < 4u || v7 == 5;
        int v22 = v7 & 0xFD;
        if (!v21 && v22 != 4) {
          goto LABEL_137;
        }
        int v24 = v8 & 0xFE;
        if (v24 == 18) {
          int v8 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        BOOL v25 = v8 < 4u || v8 == 5;
        int v26 = v8 & 0xFD;
        if (!v25 && v26 != 4)
        {
LABEL_137:
          int v12 = "llvm.vp.fpext intrinsic first argument and result element type must be floating-point";
          goto LABEL_22;
        }
        if (v20 == 18) {
          uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
        }
        unsigned int v28 = llvm::Type::getPrimitiveSizeInBits(v5);
        if (v24 == 18) {
          uint64_t v6 = **(void **)(v6 + 16);
        }
        if (v28 <= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
        {
          int v12 = "llvm.vp.fpext intrinsic the bit size of first argument must be smaller than the bit size of the return type";
          goto LABEL_22;
        }
        break;
    }
    return;
  }
  if (v4 <= 403)
  {
    if (v4 == 374)
    {
      if ((v7 & 0xFE) == 0x12) {
        int v7 = *(unsigned __int8 *)(**((void **)v5 + 2) + 8);
      }
      if (v7 != 13) {
        goto LABEL_71;
      }
      if ((v8 & 0xFE) == 0x12) {
        int v8 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
      }
      if (v8 != 15)
      {
LABEL_71:
        int v12 = "llvm.vp.ptrtoint intrinsic first argument element type must be pointer and result element type must be integer";
        goto LABEL_22;
      }
      return;
    }
    if (v4 == 395) {
      goto LABEL_9;
    }
LABEL_46:
    if ((v7 & 0xFE) == 0x12) {
      int v7 = *(_DWORD *)(**((void **)v5 + 2) + 8);
    }
    if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4) {
      goto LABEL_54;
    }
    if ((v8 & 0xFE) == 0x12) {
      int v8 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
    }
    if (v8 != 13)
    {
LABEL_54:
      int v12 = "llvm.vp.uitofp or llvm.vp.sitofp intrinsic first argument element type must be integer and result element ty"
            "pe must be floating-point";
      goto LABEL_22;
    }
    return;
  }
  if (v4 == 404)
  {
    int v17 = v7 & 0xFE;
    if (v17 == 18) {
      int v7 = *(unsigned __int8 *)(**((void **)v5 + 2) + 8);
    }
    if (v7 != 13) {
      goto LABEL_136;
    }
    int v18 = v8 & 0xFE;
    if (v18 == 18) {
      int v8 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
    }
    if (v8 != 13)
    {
LABEL_136:
      int v12 = "llvm.vp.trunc intrinsic first argument and result element type must be integer";
      goto LABEL_22;
    }
    if (v17 == 18) {
      uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
    }
    unsigned int v19 = llvm::Type::getPrimitiveSizeInBits(v5);
    if (v18 == 18) {
      uint64_t v6 = **(void **)(v6 + 16);
    }
    if (v19 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
    {
      int v12 = "llvm.vp.trunc intrinsic the bit size of first argument must be larger than the bit size of the return type";
      goto LABEL_22;
    }
    return;
  }
  if (v4 == 406) {
    goto LABEL_46;
  }
LABEL_9:
  int v9 = v7 & 0xFE;
  if (v9 == 18) {
    int v7 = *(unsigned __int8 *)(**((void **)v5 + 2) + 8);
  }
  if (v7 != 13) {
    goto LABEL_55;
  }
  int v10 = v8 & 0xFE;
  if (v10 == 18) {
    int v8 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  }
  if (v8 != 13)
  {
LABEL_55:
    int v12 = "llvm.vp.zext or llvm.vp.sext intrinsic first argument and result element type must be integer";
    goto LABEL_22;
  }
  if (v9 == 18) {
    uint64_t v5 = (llvm::Type *)**((void **)v5 + 2);
  }
  unsigned int v11 = llvm::Type::getPrimitiveSizeInBits(v5);
  if (v10 == 18) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  if (v11 <= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
  {
    int v12 = "llvm.vp.zext or llvm.vp.sext intrinsic the bit size of first argument must be smaller than the bit size of the return type";
LABEL_22:
    v39[0] = v12;
    __int16 v40 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (const llvm::Twine *)v39, (llvm::Type **)this);
  }
}

void anonymous namespace'::Verifier::visitConstrainedFPIntrinsic(llvm::raw_ostream **this, llvm::ConstrainedFPIntrinsic *a2)
{
  int v2 = *(_DWORD *)(*((void *)a2 - 4) + 36);
  int v3 = 1;
  int v4 = 2;
  int v7 = 2;
  switch(v2)
  {
    case 'Q':
    case 'R':
    case 'S':
    case '_':
    case 'b':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'm':
    case 'p':
    case 's':
    case 't':
    case 'u':
    case 'w':
      int v4 = 1;
      break;
    case 'T':
    case 'W':
    case 'Z':
    case 'a':
    case 'n':
    case 'o':
      break;
    case 'U':
    case 'V':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
      int v3 = 0;
      goto LABEL_5;
    case 'Y':
    case '[':
      int v4 = 3;
      break;
    default:
      int v3 = 0;
      int v4 = 1;
LABEL_5:
      int v7 = 1;
      break;
  }
  if ((v2 - 85) >= 2) {
    int v8 = v4;
  }
  else {
    int v8 = v4 + 1;
  }
  int v9 = v8 + v7;
  uint64_t v10 = llvm::CallBase::arg_end(a2);
  unsigned int v11 = (uint64_t **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (v9 != ((unint64_t)(v10 - (void)v11) >> 5))
  {
    BOOL v13 = "invalid arguments for constrained FP intrinsic";
LABEL_15:
    int v44 = (llvm::Type **)a2;
    int v45 = v13;
    __int16 v46 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v45, &v44);
    return;
  }
  int v12 = *(_DWORD *)(*((void *)a2 - 4) + 36);
  switch(v12)
  {
    case 'U':
    case 'V':
      if (getFPPredicateFromMD((uint64_t)v11[8]) < 0x10) {
        goto LABEL_25;
      }
      BOOL v13 = "invalid predicate for constrained FP comparison intrinsic";
      goto LABEL_15;
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case 'a':
    case 'd':
    case 'e':
    case 'f':
      goto LABEL_25;
    case '\\':
    case '_':
      uint64_t v20 = **v11;
      int v21 = *(_DWORD *)(v20 + 8) & 0xFE;
      LOBYTE(v22) = *(_DWORD *)(v20 + 8);
      if (v21 == 18) {
        int v22 = *(_DWORD *)(**(void **)(v20 + 16) + 8);
      }
      BOOL v23 = v22 < 4u || v22 == 5;
      int v24 = v22 & 0xFD;
      if (!v23 && v24 != 4)
      {
        BOOL v13 = "Intrinsic first argument must be FP or FP vector";
        goto LABEL_15;
      }
      uint64_t v26 = *(void *)a2;
      int v27 = *(_DWORD *)(*(void *)a2 + 8) & 0xFE;
      LOBYTE(v28) = *(_DWORD *)(*(void *)a2 + 8);
      if (v27 == 18) {
        int v28 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
      }
      if (v28 >= 4u && v28 != 5 && (v28 & 0xFD) != 4)
      {
        BOOL v13 = "Intrinsic result must be FP or FP vector";
        goto LABEL_15;
      }
      if ((v21 == 18) != (v27 == 18)) {
        goto LABEL_82;
      }
      if (v21 != 18) {
        goto LABEL_51;
      }
      if ((*(_DWORD *)(v20 + 8) != 19) == (*(_DWORD *)(*(void *)a2 + 8) == 19)
        || *(_DWORD *)(v20 + 32) != *(_DWORD *)(v26 + 32))
      {
        goto LABEL_96;
      }
      uint64_t v20 = **(void **)(v20 + 16);
LABEL_51:
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v20);
      if (v27 == 18) {
        uint64_t v26 = **(void **)(v26 + 16);
      }
      unsigned int v31 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v26);
      if (v12 == 95)
      {
        if (PrimitiveSizeInBits > v31) {
          goto LABEL_25;
        }
        BOOL v13 = "Intrinsic first argument's type must be larger than result type";
      }
      else
      {
        if (PrimitiveSizeInBits < v31) {
          goto LABEL_25;
        }
        BOOL v13 = "Intrinsic first argument's type must be smaller than result type";
      }
      goto LABEL_15;
    case ']':
    case '^':
      uint64_t v32 = **v11;
      int v33 = *(_DWORD *)(v32 + 8);
      LOBYTE(v34) = *(_DWORD *)(v32 + 8);
      if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12) {
        int v34 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
      }
      BOOL v35 = v34 < 4u || v34 == 5;
      int v36 = v34 & 0xFD;
      if (!v35 && v36 != 4)
      {
        BOOL v13 = "Intrinsic first argument must be floating point";
        goto LABEL_15;
      }
      if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
      {
        int v38 = *(_DWORD *)(v32 + 32);
        uint64_t v39 = *(void *)a2;
        int v40 = *(_DWORD *)(*(void *)a2 + 8);
        if ((v38 != 0) != ((v40 & 0xFE) == 18)) {
          goto LABEL_82;
        }
        BOOL v41 = v33 == 19;
        if ((v40 & 0xFE) == 0x12)
        {
          int v40 = *(unsigned __int8 *)(**(void **)(v39 + 16) + 8);
          goto LABEL_75;
        }
      }
      else
      {
        int v40 = *(_DWORD *)(*(void *)a2 + 8);
        if ((v40 & 0xFE) == 0x12) {
          goto LABEL_82;
        }
        BOOL v41 = 0;
        int v38 = 0;
      }
      uint64_t v39 = 0;
      int v40 = v40;
LABEL_75:
      if (v40 != 13)
      {
        BOOL v13 = "Intrinsic result must be an integer";
        goto LABEL_15;
      }
      if (v39)
      {
        int v42 = *(_DWORD *)(v39 + 32);
        BOOL v43 = *(unsigned __int8 *)(v39 + 8) != 19;
        if (v38 != v42 || ((v41 ^ v43) & 1) == 0) {
          goto LABEL_96;
        }
      }
      goto LABEL_25;
    case 'b':
    case 'c':
    case 'g':
    case 'h':
      if ((*(_DWORD *)(**v11 + 8) & 0xFE) != 0x12 && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12) {
        goto LABEL_25;
      }
      BOOL v13 = "Intrinsic does not support vectors";
      goto LABEL_15;
    default:
      if (v12 != 116 && v12 != 119) {
        goto LABEL_25;
      }
      uint64_t v14 = **v11;
      int v15 = *(_DWORD *)(v14 + 8);
      if ((*(_DWORD *)(v14 + 8) & 0xFE) != 0x12)
      {
        if (v15 == 13)
        {
          int v18 = *(_DWORD *)(*(void *)a2 + 8);
          if ((v18 & 0xFE) != 0x12)
          {
            BOOL v19 = 0;
            int v16 = 0;
            goto LABEL_91;
          }
LABEL_82:
          BOOL v13 = "Intrinsic first argument and result disagree on vector use";
          goto LABEL_15;
        }
        goto LABEL_83;
      }
      if (*(unsigned char *)(**(void **)(v14 + 16) + 8) != 13)
      {
LABEL_83:
        BOOL v13 = "Intrinsic first argument must be integer";
        goto LABEL_15;
      }
      int v16 = *(_DWORD *)(v14 + 32);
      uint64_t v17 = *(void *)a2;
      int v18 = *(_DWORD *)(*(void *)a2 + 8);
      if ((v16 != 0) != ((v18 & 0xFE) == 18)) {
        goto LABEL_82;
      }
      BOOL v19 = v15 == 19;
      if ((v18 & 0xFE) != 0x12)
      {
LABEL_91:
        uint64_t v17 = 0;
        goto LABEL_92;
      }
      int v18 = *(_DWORD *)(**(void **)(v17 + 16) + 8);
LABEL_92:
      if (v18 >= 4u && v18 != 5 && (v18 & 0xFD) != 4)
      {
        BOOL v13 = "Intrinsic result must be a floating point";
        goto LABEL_15;
      }
      if (v17 && (v16 != *(_DWORD *)(v17 + 32) || ((v19 ^ (*(unsigned char *)(v17 + 8) != 19)) & 1) == 0))
      {
LABEL_96:
        BOOL v13 = "Intrinsic first argument and result vector lengths must be equal";
        goto LABEL_15;
      }
LABEL_25:
      if ((unsigned __int16)llvm::ConstrainedFPIntrinsic::getExceptionBehavior(a2) <= 0xFFu)
      {
        BOOL v13 = "invalid exception behavior argument";
        goto LABEL_15;
      }
      if (v3 && (unsigned __int16)llvm::ConstrainedFPIntrinsic::getRoundingMode(a2) <= 0xFFu)
      {
        BOOL v13 = "invalid rounding mode argument";
        goto LABEL_15;
      }
      return;
  }
}

void anonymous namespace'::Verifier::visitDbgIntrinsic(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a4 + 20);
  int v9 = *(unsigned char **)(*(void *)(a4 - 32 * (v8 & 0x7FFFFFF)) + 24);
  uint64_t v69 = v9;
  unsigned int v10 = *v9;
  BOOL v11 = v10 > 0x21;
  uint64_t v12 = (1 << v10) & 0x200000006;
  if (!v11 && v12 != 0)
  {
    uint64_t v14 = -(uint64_t)(v8 & 0x7FFFFFF);
    goto LABEL_6;
  }
  if (!llvm::MDNode::classof(v9))
  {
LABEL_28:
    __int16 v65 = 1283;
    v62[0] = (llvm::Type **)"invalid llvm.dbg.";
    uint64_t v63 = a2;
    uint64_t v64 = a3;
    v66[0] = v62;
    uint64_t v67 = " intrinsic address/value";
    __int16 v68 = 770;
    v56[0] = (llvm::Type **)a4;
    int v33 = (uint64_t *)&v69;
LABEL_33:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(a1, (const llvm::Twine *)v66, v56, v33);
    return;
  }
  uint64_t v32 = *((void *)v9 - 2);
  if ((v32 & 2) != 0)
  {
    if (*((_DWORD *)v9 - 6)) {
      goto LABEL_28;
    }
  }
  else if (((v32 >> 6) & 0xF) != 0)
  {
    goto LABEL_28;
  }
  int v8 = *(_DWORD *)(a4 + 20);
  uint64_t v14 = -(uint64_t)(v8 & 0x7FFFFFF);
LABEL_6:
  uint64_t v15 = a4 + 32 * v14;
  int v16 = *(llvm::Type ***)(*(void *)(v15 + 32) + 24);
  if (*(unsigned char *)v16 != 25)
  {
    __int16 v65 = 1283;
    v62[0] = (llvm::Type **)"invalid llvm.dbg.";
    uint64_t v63 = a2;
    uint64_t v64 = a3;
    unsigned int v31 = " intrinsic variable";
LABEL_30:
    v66[0] = v62;
    uint64_t v67 = v31;
    __int16 v34 = 770;
LABEL_31:
    __int16 v68 = v34;
    v56[0] = (llvm::Type **)a4;
    unint64_t v61 = v16;
LABEL_32:
    int v33 = (uint64_t *)&v61;
    goto LABEL_33;
  }
  int v16 = *(llvm::Type ***)(*(void *)(v15 + 64) + 24);
  if (*(unsigned char *)v16 != 6)
  {
    __int16 v65 = 1283;
    v62[0] = (llvm::Type **)"invalid llvm.dbg.";
    uint64_t v63 = a2;
    uint64_t v64 = a3;
    unsigned int v31 = " intrinsic expression";
    goto LABEL_30;
  }
  int v17 = *(_DWORD *)(*(void *)(a4 - 32) + 36);
  BOOL v18 = v17 == 56;
  if (v17 == 56) {
    BOOL v19 = (llvm::Type **)a4;
  }
  else {
    BOOL v19 = 0;
  }
  v62[0] = v19;
  if (!v18)
  {
LABEL_20:
    int v28 = *(unsigned char **)(a4 + 48);
    if (!v28 || *v28 == 5)
    {
      uint64_t v29 = *(void *)(a4 + 40);
      unint64_t v61 = (llvm::Type **)v29;
      if (v29) {
        BOOL v30 = *(llvm::Type ***)(v29 + 56);
      }
      else {
        BOOL v30 = 0;
      }
      uint64_t v60 = v30;
      uint64_t v35 = *(void *)(*(void *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) + 32) + 24);
      int v58 = v28;
      uint64_t v59 = v35;
      if (v28)
      {
        int v36 = (void *)(v35 - 16);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((v37 & 2) != 0) {
          int v38 = *(unsigned __int8 ***)(v35 - 32);
        }
        else {
          int v38 = (unsigned __int8 **)&v36[-((v37 >> 2) & 0xF)];
        }
        Subprograuint64_t m = getSubprogram(*v38);
        BOOL v43 = v28 - 16;
        unint64_t v42 = *((void *)v28 - 2);
        if ((v42 & 2) != 0) {
          int v44 = (unsigned __int8 **)*((void *)v28 - 4);
        }
        else {
          int v44 = (unsigned __int8 **)&v43[-((v42 >> 2) & 0xF)];
        }
        int v45 = getSubprogram(*v44);
        if (Subprogram) {
          BOOL v46 = v45 == 0;
        }
        else {
          BOOL v46 = 1;
        }
        if (!v46)
        {
          if (Subprogram == v45)
          {
            if ((v37 & 2) != 0) {
              uint64_t v48 = *(void **)(v35 - 32);
            }
            else {
              uint64_t v48 = &v36[-((v37 >> 2) & 0xF)];
            }
            unint64_t v50 = (unsigned __int8 *)v48[3];
            if (!v50 || (int v51 = *v50, (v51 - 11) < 4) || v51 == 34)
            {
            }
            else
            {
              v66[0] = "invalid type ref";
              __int16 v68 = 259;
              if ((v37 & 2) != 0) {
                uint64_t v52 = *(llvm::Type ****)(v35 - 32);
              }
              else {
                uint64_t v52 = (llvm::Type ***)&v36[-((v37 >> 2) & 0xF)];
              }
              v62[0] = v52[3];
              llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v66, &v59, (uint64_t *)v62);
            }
          }
          else
          {
            __int16 v65 = 1283;
            v62[0] = (llvm::Type **)"mismatched subprogram between llvm.dbg.";
            uint64_t v63 = a2;
            uint64_t v64 = a3;
            v56[0] = (llvm::Type **)" variable and !dbg attachment";
            __int16 v57 = 259;
            llvm::operator+((uint64_t *)v62, (uint64_t *)v56, (uint64_t)v66);
            uint64_t v55 = (llvm::Type **)a4;
            if ((*v36 & 2) != 0) {
              uint64_t v47 = *(unsigned char ***)(v35 - 32);
            }
            else {
              uint64_t v47 = (unsigned char **)&v36[-((*v36 >> 2) & 0xFLL)];
            }
            char v54 = llvm::DILocalScope::getSubprogram(*v47);
            if ((*v43 & 2) != 0) {
              unint64_t v49 = (unsigned char **)*((void *)v28 - 4);
            }
            else {
              unint64_t v49 = (unsigned char **)&v43[-((*v43 >> 2) & 0xFLL)];
            }
            uint64_t v53 = llvm::DILocalScope::getSubprogram(*v49);
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, (const llvm::Twine *)v66, &v55, &v61, &v60, &v59, (uint64_t *)&v54, (uint64_t *)&v58, (uint64_t *)&v53);
          }
        }
      }
      else
      {
        __int16 v65 = 1283;
        v62[0] = (llvm::Type **)"llvm.dbg.";
        uint64_t v63 = a2;
        uint64_t v64 = a3;
        v66[0] = v62;
        uint64_t v67 = " intrinsic requires a !dbg attachment";
        __int16 v68 = 770;
        llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v66);
        if (*a1)
        {
          llvm::VerifierSupport::Write((uint64_t ***)a1, (llvm::Type **)a4);
          llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>((llvm::raw_ostream *)a1, (llvm::Type **)v29, &v60);
        }
      }
    }
    return;
  }
  uint64_t v20 = v8 & 0x7FFFFFF;
  uint64_t v21 = a4 - 32 * v20;
  int v16 = *(llvm::Type ***)(*(void *)(v21 + 96) + 24);
  if (*(unsigned char *)v16 != 29)
  {
    v66[0] = "invalid llvm.dbg.assign intrinsic DIAssignID";
    __int16 v34 = 259;
    goto LABEL_31;
  }
  int v22 = *(unsigned __int8 **)(*(void *)(v21 + 128) + 24);
  if (*v22 - 1 >= 2)
  {
    if (!llvm::MDNode::classof(*(unsigned char **)(*(void *)(v21 + 128) + 24))
      || ((uint64_t v39 = *((void *)v22 - 2), (v39 & 2) != 0)
        ? (unsigned int v40 = *((_DWORD *)v22 - 6))
        : (unsigned int v40 = (v39 >> 6) & 0xF),
          v40))
    {
      v66[0] = "invalid llvm.dbg.assign intrinsic address";
      __int16 v68 = 259;
      v56[0] = (llvm::Type **)a4;
      int v24 = *(llvm::Type ***)(*(void *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) + 128) + 24);
      goto LABEL_69;
    }
    uint64_t v20 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  }
  uint64_t v23 = a4 - 32 * v20;
  int v24 = *(llvm::Type ***)(*(void *)(v23 + 160) + 24);
  if (*(unsigned char *)v24 != 6)
  {
    v66[0] = "invalid llvm.dbg.assign intrinsic address expression";
    __int16 v68 = 259;
    v56[0] = (llvm::Type **)a4;
LABEL_69:
    unint64_t v61 = v24;
    goto LABEL_32;
  }
  AssignmentInsts = (llvm::Type ***)llvm::at::getAssignmentInsts(*(void *)(*(void *)(v23 + 96) + 24));
  if (AssignmentInsts == v26) {
    goto LABEL_20;
  }
  uint64_t v27 = *(void *)(*(void *)(a4 + 40) + 56);
  while (1)
  {
    v56[0] = *AssignmentInsts;
    if (v27 != *((void *)v56[0][5] + 7)) {
      break;
    }
    if (++AssignmentInsts == v26) {
      goto LABEL_20;
    }
  }
  v66[0] = "inst not in same function as dbg.assign";
  __int16 v68 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(a1, (const llvm::Twine *)v66, v56, v62);
}

void anonymous namespace'::Verifier::visitDbgLabelIntrinsic(llvm::raw_ostream **this, uint64_t a2)
{
  int v4 = *(unsigned char **)(*(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
  if (*v4 != 26)
  {
    __int16 v29 = 1283;
    v26[0] = "invalid llvm.dbg.";
    uint64_t v27 = "label";
    uint64_t v28 = 5;
    v30[0] = v26;
    unsigned int v31 = " intrinsic variable";
    __int16 v32 = 770;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v30);
    if (!*this) {
      return;
    }
    llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
    int v8 = (llvm::VerifierSupport *)this;
    uint64_t v9 = (uint64_t)v4;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned char **)(a2 + 48);
  if (!v5 || *v5 == 5)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      int v7 = *(llvm::Type ***)(v6 + 56);
    }
    else {
      int v7 = 0;
    }
    BOOL v25 = v7;
    if (v5)
    {
      unsigned int v10 = v4 - 16;
      unint64_t v11 = *((void *)v4 - 2);
      int v24 = v7;
      if ((v11 & 2) != 0) {
        uint64_t v12 = (unsigned __int8 **)*((void *)v4 - 4);
      }
      else {
        uint64_t v12 = (unsigned __int8 **)&v10[-8 * ((v11 >> 2) & 0xF)];
      }
      Subprograuint64_t m = getSubprogram(*v12);
      uint64_t v15 = v5 - 16;
      unint64_t v14 = *((void *)v5 - 2);
      if ((v14 & 2) != 0) {
        int v16 = (unsigned __int8 **)*((void *)v5 - 4);
      }
      else {
        int v16 = (unsigned __int8 **)&v15[-8 * ((v14 >> 2) & 0xF)];
      }
      int v17 = getSubprogram(*v16);
      if (Subprogram) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18 && Subprogram != v17)
      {
        __int16 v29 = 1283;
        v26[0] = "mismatched subprogram between llvm.dbg.";
        uint64_t v27 = "label";
        uint64_t v28 = 5;
        v30[0] = v26;
        unsigned int v31 = " label and !dbg attachment";
        __int16 v32 = 770;
        uint64_t v20 = (v11 & 2) != 0 ? (unsigned char **)*((void *)v4 - 4) : (unsigned char **)&v10[-8 * ((v11 >> 2) & 0xF)];
        uint64_t v21 = llvm::DILocalScope::getSubprogram(*v20);
        int v22 = (v14 & 2) != 0 ? (unsigned char **)*((void *)v5 - 4) : (unsigned char **)&v15[-8 * ((v14 >> 2) & 0xF)];
        uint64_t v23 = llvm::DILocalScope::getSubprogram(*v22);
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v30);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
          if (v6) {
            llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v6);
          }
          if (v24) {
            llvm::VerifierSupport::Write((uint64_t ***)this, v24);
          }
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v4);
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v21);
          llvm::VerifierSupport::Write((uint64_t)this, (uint64_t)v5);
          int v8 = (llvm::VerifierSupport *)this;
          uint64_t v9 = (uint64_t)v23;
LABEL_8:
          llvm::VerifierSupport::Write((uint64_t)v8, v9);
        }
      }
    }
    else
    {
      __int16 v29 = 1283;
      v26[0] = "llvm.dbg.";
      uint64_t v27 = "label";
      uint64_t v28 = 5;
      v30[0] = v26;
      unsigned int v31 = " intrinsic requires a !dbg attachment";
      __int16 v32 = 770;
      llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v30);
      if (*this)
      {
        llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
        llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>((llvm::raw_ostream *)this, (llvm::Type **)v6, &v25);
      }
    }
  }
}

BOOL anonymous namespace'::Verifier::visitIntrinsicCall(unsigned int,llvm::CallBase &)::$_1::operator()(llvm::APInt *this, __int16 a2)
{
  if ((a2 & 0xFF00) == 0) {
    return 0;
  }
  char v2 = a2;
  int v3 = this;
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40) {
      return 0;
    }
    int v3 = *(llvm::APInt **)v3;
  }
  return *(void *)v3 <= (unint64_t)(1 << v2);
}

void llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3, llvm::Type **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t ***)a1, a3);
    llvm::VerifierSupport::Write((uint64_t ***)a1, a4);
  }
}

void anonymous namespace'::Verifier::verifyStatepoint(llvm::raw_ostream **this, const llvm::CallBase *a2)
{
  if (!llvm::CallBase::getMemoryEffects(a2)
    || (unsigned __int8 MemoryEffects = llvm::CallBase::getMemoryEffects(a2),
        !(((MemoryEffects >> 2) | (MemoryEffects >> 4)) & 2 | MemoryEffects & 2))
    || llvm::CallBase::getMemoryEffects(a2) <= 3)
  {
    uint64_t v5 = "gc.statepoint must read and write all memory to preserve reordering restrictions required by safepoint semantics";
    goto LABEL_5;
  }
  uint64_t v6 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  int v7 = (void *)((char *)a2 - 32 * v6);
  uint64_t v8 = v7[4];
  unsigned int v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
  {
    if ((**(void **)(v8 + 24) & 0x8000000000000000) != 0) {
      goto LABEL_9;
    }
  }
  else if ((uint64_t)(*(void *)(v8 + 24) << -(char)v9) >> -(char)v9 < 0)
  {
LABEL_9:
    uint64_t v5 = "gc.statepoint number of patchable bytes must be positive";
    goto LABEL_5;
  }
  unsigned int v10 = (uint64_t *)((char *)a2 + 64);
  uint64_t ParamElementType = llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 64), 2);
  if (!ParamElementType)
  {
    uint64_t v5 = "gc.statepoint callee argument must have elementtype attribute";
    goto LABEL_5;
  }
  unsigned int v12 = *(_DWORD *)(ParamElementType + 8);
  if (v12 != 14)
  {
    uint64_t v5 = "gc.statepoint callee elementtype must be function type";
    goto LABEL_5;
  }
  uint64_t v13 = v7[12];
  unint64_t v14 = (void *)(v13 + 24);
  if (*(_DWORD *)(v13 + 32) >= 0x41u) {
    unint64_t v14 = (void *)*v14;
  }
  uint64_t v15 = (void *)*v14;
  if ((v15 & 0x80000000) != 0)
  {
    uint64_t v5 = "gc.statepoint number of arguments to underlying call must be positive";
    goto LABEL_5;
  }
  uint64_t v16 = (*(_DWORD *)(ParamElementType + 12) - 1);
  if (v12 < 0x100)
  {
    if (v16 != v15)
    {
      uint64_t v5 = "gc.statepoint mismatch in number of call args";
      goto LABEL_5;
    }
  }
  else
  {
    if ((int)v16 > (int)v15)
    {
      uint64_t v5 = "gc.statepoint mismatch in number of vararg call args";
      goto LABEL_5;
    }
    if (*(unsigned char *)(**(void **)(ParamElementType + 16) + 8) != 7)
    {
      uint64_t v5 = "gc.statepoint doesn't support wrapping non-void vararg functions yet";
      goto LABEL_5;
    }
  }
  uint64_t v17 = v7[16];
  BOOL v18 = (void *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    BOOL v18 = (void *)*v18;
  }
  if (*v18 >= 4uLL)
  {
    uint64_t v5 = "unknown flag used in gc.statepoint flags argument";
    goto LABEL_5;
  }
  if ((int)v16 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *v10;
    uint64_t v21 = 160 - 32 * v6;
    while (**(void **)((char *)a2 + v21) == *(void *)(*(void *)(ParamElementType + 16) + 8 + 8 * v19))
    {
      if (v12 >= 0x100)
      {
        if (v20)
        {
          if ((v19 + 7) < *(_DWORD *)(v20 + 8))
          {
            uint64_t v22 = *(void *)(*v10 + 96 + 8 * v19);
            if (v22)
            {
              if ((*(unsigned char *)(v22 + 21) & 4) != 0)
              {
                uint64_t v5 = "Attribute 'sret' cannot be used for vararg call arguments!";
                goto LABEL_5;
              }
            }
          }
        }
      }
      ++v19;
      v21 += 32;
      if (v16 == v19) {
        goto LABEL_37;
      }
    }
    uint64_t v5 = "gc.statepoint call argument does not match wrapped function type";
LABEL_5:
    v35[0] = v5;
    __int16 v36 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (const llvm::Twine *)v35, (llvm::Type **)a2);
    return;
  }
LABEL_37:
  uint64_t v23 = v7[4 * (v15 + 5)];
  if (*(unsigned char *)(v23 + 16) != 16)
  {
    uint64_t v5 = "gc.statepoint number of transition arguments must be constant integer";
    goto LABEL_5;
  }
  int v24 = (void *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u) {
    int v24 = (void *)*v24;
  }
  if (*(_DWORD *)v24)
  {
    uint64_t v5 = "gc.statepoint w/inline transition bundle is deprecated";
    goto LABEL_5;
  }
  uint64_t v25 = v7[4 * (v15 + 6)];
  if (*(unsigned char *)(v25 + 16) != 16)
  {
    uint64_t v5 = "gc.statepoint number of deoptimization arguments must be constant integer";
    goto LABEL_5;
  }
  uint64_t v26 = (void *)(v25 + 24);
  if (*(_DWORD *)(v25 + 32) >= 0x41u) {
    uint64_t v26 = (void *)*v26;
  }
  if (*(_DWORD *)v26)
  {
    uint64_t v5 = "gc.statepoint w/inline deopt operands is deprecated";
    goto LABEL_5;
  }
  if (v15 + 7 != ((unint64_t)(llvm::CallBase::arg_end(a2)
                                                          - ((void)a2
                                                           - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5))
  {
    uint64_t v5 = "gc.statepoint too many arguments";
    goto LABEL_5;
  }
  uint64_t v27 = *((void *)a2 + 1);
  if (!v27) {
    return;
  }
  while (1)
  {
    uint64_t v28 = *(void *)(v27 + 24);
    if (*(unsigned char *)(v28 + 16) == 84) {
      uint64_t v29 = *(void *)(v27 + 24);
    }
    else {
      uint64_t v29 = 0;
    }
    int v33 = (llvm::Type **)v29;
    __int16 v34 = (llvm::Type **)v28;
    if (!v29)
    {
      unsigned int v31 = "illegal use of statepoint token";
LABEL_71:
      v35[0] = v31;
      __int16 v36 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (const llvm::Twine *)v35, (llvm::Type **)a2, &v34);
      return;
    }
    if (!llvm::GCRelocateInst::classof(v29) && !llvm::GCResultInst::classof((llvm::GCResultInst *)v29, v30))
    {
      unsigned int v31 = "gc.result or gc.relocate are the only value uses of a gc.statepoint";
      goto LABEL_71;
    }
    if (!llvm::GCResultInst::classof((llvm::GCResultInst *)v29, v30)) {
      break;
    }
    if (*(const llvm::CallBase **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) != a2)
    {
      __int16 v32 = "gc.result connected to wrong gc.statepoint";
      goto LABEL_73;
    }
LABEL_66:
    uint64_t v27 = *(void *)(v27 + 8);
    if (!v27) {
      return;
    }
  }
  if (!llvm::GCRelocateInst::classof((uint64_t)a2)
    || *(const llvm::CallBase **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)) == a2)
  {
    goto LABEL_66;
  }
  __int16 v32 = "gc.relocate connected to wrong gc.statepoint";
LABEL_73:
  v35[0] = v32;
  __int16 v36 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (const llvm::Twine *)v35, (llvm::Type **)a2, &v33);
}

void llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((uint64_t ***)a1, a3);
    int v7 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v7);
    }
  }
}

BOOL anonymous namespace'::Verifier::visitIntrinsicCall(unsigned int,llvm::CallBase &)::$_2::operator()(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    a2 = **(void **)(a2 + 16);
  }
  unsigned __int16 v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
  if ((_BYTE)v2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v2 >= 0x100u;
  }
  return !v3;
}

uint64_t *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=(uint64_t *a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll(a1);
  MEMORY[0x263E500A0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

uint64_t *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::~DenseMap(uint64_t *a1)
{
  return a1;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    int v7 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v7);
    }
  }
}

unsigned __int8 *getSubprogram(unsigned __int8 *result)
{
  for (; result; uint64_t result = *(unsigned __int8 **)(v3 + 8))
  {
    int v1 = *result;
    if (v1 == 17) {
      break;
    }
    if ((v1 & 0xFE) != 0x12) {
      return 0;
    }
    unint64_t v2 = *((void *)result - 2);
    if ((v2 & 2) != 0) {
      uint64_t v3 = *((void *)result - 4);
    }
    else {
      uint64_t v3 = (uint64_t)&result[-8 * ((v2 >> 2) & 0xF) - 16];
    }
  }
  return result;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, llvm::Type ***a4, llvm::Type ***a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    if (*a4) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a4);
    }
    if (*a5) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a5);
    }
    llvm::VerifierSupport::Write((uint64_t)a1, *a6);
    uint64_t v16 = *a7;
    llvm::VerifierSupport::WriteTs<llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>((uint64_t)a1, v16, a8, a9);
  }
}

void anonymous namespace'::Verifier::verifyFnArgs(_anonymous_namespace_::Verifier *this, const llvm::DbgVariableIntrinsic *a2)
{
  if (!*((unsigned char *)this + 801)) {
    return;
  }
  uint64_t v4 = *((void *)a2 + 6);
  unint64_t v5 = *(void *)(v4 - 16);
  if ((v5 & 2) != 0)
  {
    if (*(_DWORD *)(v4 - 24) == 2)
    {
      uint64_t v6 = *(void *)(v4 - 32);
LABEL_7:
      if (*(void *)(v6 + 8)) {
        return;
      }
    }
  }
  else if ((*(void *)(v4 - 16) & 0x3C0) == 0x80)
  {
    uint64_t v6 = v4 - 16 - 8 * ((v5 >> 2) & 0xF);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4] + 24);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 24);
    if (*(_WORD *)(v7 + 24))
    {
      unsigned int v9 = (void *)((char *)this + 1840);
      unint64_t v10 = *((unsigned int *)this + 462);
      unint64_t v11 = v8 - v10;
      if (v8 > v10)
      {
        uint64_t v12 = *((unsigned int *)this + 462);
        int v13 = *((_DWORD *)this + 462);
        if (*((_DWORD *)this + 463) < v8)
        {
          unint64_t v17 = *((unsigned int *)this + 462);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1840, (char *)this + 1856, *(unsigned __int16 *)(v7 + 24), 8);
          unint64_t v10 = v17;
          uint64_t v12 = *((unsigned int *)this + 462);
          int v13 = *((_DWORD *)this + 462);
        }
        if (v8 != v10) {
          bzero((void *)(*v9 + 8 * v12), 8 * v11);
        }
        *((_DWORD *)this + 462) = v13 + v11;
      }
      unsigned int v14 = v8 - 1;
      uint64_t v15 = *(void *)(*v9 + 8 * (v8 - 1));
      *(void *)(*v9 + 8 * v14) = v7;
      if (v15) {
        BOOL v16 = v15 == v7;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        v18[0] = "conflicting debug info for argument";
        __int16 v19 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v18);
        if (*(void *)this)
        {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)a2);
          llvm::VerifierSupport::Write((uint64_t)this, v15);
          llvm::VerifierSupport::Write((uint64_t)this, v7);
        }
      }
    }
  }
  else
  {
    v18[0] = "dbg intrinsic without variable";
    __int16 v19 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v18);
  }
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>(llvm::raw_ostream *this, llvm::Type **a2, llvm::Type ***a3)
{
  uint64_t v4 = (uint64_t ***)this;
  if (a2) {
    this = llvm::VerifierSupport::Write((uint64_t ***)this, a2);
  }
  unint64_t v5 = *a3;
  if (*a3)
  {
    return llvm::VerifierSupport::Write(v4, v5);
  }
  return this;
}

uint64_t llvm::VerifierSupport::WriteTs<llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  llvm::VerifierSupport::Write(a1, a2);
  llvm::VerifierSupport::Write(a1, *a3);
  uint64_t v7 = *a4;
  return llvm::VerifierSupport::Write(a1, v7);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<llvm::Function *>(a1, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<llvm::Function *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a1, v6);
  unint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

BOOL llvm::GCResultInst::classof(llvm::GCResultInst *this, const llvm::Value *a2)
{
  return *((unsigned char *)this + 16) == 84
      && (uint64_t v2 = *((void *)this - 4)) != 0
      && !*(unsigned char *)(v2 + 16)
      && *(void *)(v2 + 24) == *((void *)this + 9)
      && (*(unsigned char *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == 124;
}

void anonymous namespace'::Verifier::visitEHPadPredecessors(llvm::raw_ostream **this, llvm::Instruction *a2)
{
  uint64_t v3 = (llvm::BasicBlock *)*((void *)a2 + 5);
  uint64_t v4 = *(void *)(*((void *)v3 + 7) + 80);
  if (v4) {
    int v5 = (llvm::BasicBlock *)(v4 - 24);
  }
  else {
    int v5 = 0;
  }
  if (v3 == v5)
  {
    unint64_t v61 = "EH pad cannot be in entry block.";
    v65[0] = 259;
    v58[0] = (llvm::Type **)a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
    return;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 94) {
    uint64_t v7 = (llvm::Type **)a2;
  }
  else {
    uint64_t v7 = 0;
  }
  v58[0] = v7;
  if (v6 == 94)
  {
    uint64_t v8 = *((void *)v3 + 1);
    if (v8)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
        BOOL v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 <= 0xA) {
          break;
        }
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          return;
        }
      }
LABEL_61:
      uint64_t v28 = *(void *)(v9 + 40);
      uint64_t v29 = *(void *)(v28 + 40);
      if (v29 == v28 + 40
        || ((uint64_t v20 = v29 - 24, v29) ? (v21 = v29 - 24) : (v21 = 0),
            (unsigned int v22 = *(unsigned __int8 *)(v21 + 16) - 40, v22 >= 0xFFFFFFF5) ? (v23 = v20) : (v23 = 0),
            *(unsigned char *)(v23 + 16) == 33 ? (BOOL v24 = v22 >= 0xFFFFFFF5) : (BOOL v24 = 0),
            !v24 || *(llvm::BasicBlock **)(v23 - 64) != v3 || *(llvm::BasicBlock **)(v23 - 96) == v3))
      {
        unint64_t v61 = "Block containing LandingPadInst must be jumped to only by the unwind edge of an invoke.";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
      }
      else
      {
        while (1)
        {
          uint64_t v8 = *(void *)(v8 + 8);
          if (!v8) {
            break;
          }
          uint64_t v9 = *(void *)(v8 + 24);
          unsigned int v25 = *(unsigned __int8 *)(v9 + 16);
          if (v9) {
            BOOL v26 = v25 >= 0x1C;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26 && v25 - 29 < 0xB) {
            goto LABEL_61;
          }
        }
      }
    }
    return;
  }
  if (v6 == 80) {
    int v13 = (llvm::Type **)a2;
  }
  else {
    int v13 = 0;
  }
  v58[0] = v13;
  if (v6 == 80)
  {
    uint64_t v14 = *((void *)v3 + 1);
    if (!v14) {
      goto LABEL_67;
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
      BOOL v17 = v15 && v16 >= 0x1C;
      if (v17 && v16 - 29 < 0xB) {
        break;
      }
      uint64_t v14 = *(void *)(v14 + 8);
      if (!v14) {
        goto LABEL_67;
      }
    }
    if (llvm::BasicBlock::getUniquePredecessor(v3) == *((void *)*(v13 - 4) + 5))
    {
LABEL_67:
      uint64_t v31 = (uint64_t)*(v13 - 4);
      if (*(_WORD *)(v31 + 18))
      {
        int v33 = *(_DWORD *)(v31 + 20);
        if ((v33 & 0x40000000) != 0) {
          uint64_t v34 = *(void *)(v31 - 8);
        }
        else {
          uint64_t v34 = v31 - 32 * (v33 & 0x7FFFFFF);
        }
        __int16 v32 = *(llvm::BasicBlock **)(v34 + 32);
      }
      else
      {
        __int16 v32 = 0;
      }
      if (v3 == v32)
      {
        unint64_t v61 = "Catchswitch cannot unwind to one of its catchpads";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v61);
        if (*this)
        {
          llvm::VerifierSupport::Write((uint64_t ***)this, (llvm::Type **)v31);
          llvm::VerifierSupport::Write((uint64_t ***)this, v13);
        }
      }
    }
    else
    {
      unint64_t v61 = "Block containg CatchPadInst must be jumped to only by its catchswitch.";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
    }
    return;
  }
  v69[0] = (llvm::Type **)a2;
  if (v6 < 0x1C || v6 - 81 < 0xFFFFFFFE)
  {
    int v30 = *((_DWORD *)a2 + 5);
    if ((v30 & 0x40000000) != 0) {
      __int16 v19 = (char *)*((void *)a2 - 1);
    }
    else {
      __int16 v19 = (char *)a2 - 32 * (v30 & 0x7FFFFFF);
    }
  }
  else
  {
    __int16 v19 = (char *)a2 - 32;
  }
  uint64_t v35 = *((void *)v3 + 1);
  if (!v35) {
    return;
  }
  __int16 v36 = *(llvm::Type ***)v19;
  while (1)
  {
    uint64_t v37 = *(void *)(v35 + 24);
    unsigned int v38 = *(unsigned __int8 *)(v37 + 16);
    BOOL v39 = v37 && v38 >= 0x1C;
    if (v39 && v38 - 29 < 0xB) {
      break;
    }
    uint64_t v35 = *(void *)(v35 + 8);
    if (!v35) {
      return;
    }
  }
LABEL_84:
  uint64_t v41 = *(void *)(v37 + 40);
  uint64_t v42 = *(void *)(v41 + 40);
  if (v42 == v41 + 40)
  {
    int v45 = 0;
  }
  else
  {
    BOOL v43 = (llvm::Type **)(v42 - 24);
    if (v42) {
      uint64_t v44 = v42 - 24;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
      int v45 = 0;
    }
    else {
      int v45 = v43;
    }
  }
  __int16 v68 = v45;
  int v46 = *((unsigned __int8 *)v45 + 16);
  if (v46 == 33) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = 0;
  }
  v58[0] = v47;
  if (v47)
  {
    if (*(v47 - 8) != v3 || *(v47 - 12) == v3)
    {
      unint64_t v61 = "EH pad must be jumped to via an unwind edge";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v61, v69, v58);
      return;
    }
    llvm::CallBase::getOperandBundle((uint64_t)v47, 1, (uint64_t)&v61);
    if ((_BYTE)v64) {
      int v45 = *(llvm::Type ***)v61;
    }
    else {
      int v45 = (llvm::Type **)llvm::ConstantTokenNone::get(*(uint64_t **)*v47);
    }
  }
  else
  {
    if (v46 == 36) {
      uint64_t v48 = v45;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v66 = v48;
    if (v48)
    {
      int v45 = (llvm::Type **)v48[-4 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF)];
      uint64_t v67 = v45;
      if (v45 == v36)
      {
        unint64_t v61 = "A cleanupret must exit its cleanup";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, &v66);
        return;
      }
      goto LABEL_109;
    }
    if (v46 != 38)
    {
      unint64_t v61 = "EH pad must be jumped to via an unwind edge";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v61, v69, &v68);
      return;
    }
  }
  uint64_t v67 = v45;
LABEL_109:
  unint64_t v61 = (const char *)v65;
  uint64_t v62 = (char *)v65;
  uint64_t v63 = 8;
  int v64 = 0;
  while (v45 != v69[0])
  {
    if (v45 == v36)
    {
      int v53 = 1;
      goto LABEL_135;
    }
    if (*((unsigned char *)v45 + 16) == 20)
    {
      char v54 = "A single unwind edge may only enter one EH pad";
LABEL_133:
      v58[0] = (llvm::Type **)v54;
      __int16 v60 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v58, &v68);
      goto LABEL_134;
    }
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v61, v45, (uint64_t)v58);
    if (!v59)
    {
      v58[0] = (llvm::Type **)"EH pad jumps through a cycle of pads";
      __int16 v60 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v58, &v67);
      goto LABEL_134;
    }
    unsigned int v49 = *((unsigned __int8 *)v67 + 16);
    if (v49 < 0x1C || v49 - 79 >= 2)
    {
      if (v49 != 38)
      {
        char v54 = "Parent pad must be catchpad/cleanuppad/catchswitch";
        goto LABEL_133;
      }
      int v51 = *((_DWORD *)v67 + 5);
      if ((v51 & 0x40000000) != 0) {
        uint64_t v52 = (llvm::Type **)*(v67 - 1);
      }
      else {
        uint64_t v52 = &v67[-4 * (v51 & 0x7FFFFFF)];
      }
    }
    else
    {
      uint64_t v52 = v67 - 4;
    }
    int v45 = (llvm::Type **)*v52;
    uint64_t v67 = (llvm::Type **)*v52;
  }
  v58[0] = (llvm::Type **)"EH pad cannot handle exceptions raised within it";
  __int16 v60 = 259;
  llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v58);
  if (*this)
  {
    if (v45) {
      llvm::VerifierSupport::Write((uint64_t ***)this, v45);
    }
    if (v68) {
      llvm::VerifierSupport::Write((uint64_t ***)this, v68);
    }
  }
LABEL_134:
  int v53 = 0;
LABEL_135:
  if (v62 != v61) {
    free(v62);
  }
  if (v53)
  {
    while (1)
    {
      uint64_t v35 = *(void *)(v35 + 8);
      if (!v35) {
        break;
      }
      uint64_t v37 = *(void *)(v35 + 24);
      unsigned int v55 = *(unsigned __int8 *)(v37 + 16);
      if (v37) {
        BOOL v56 = v55 >= 0x1C;
      }
      else {
        BOOL v56 = 0;
      }
      if (v56 && v55 - 29 < 0xB) {
        goto LABEL_84;
      }
    }
  }
}

void anonymous namespace'::Verifier::visitBinaryOperator(_anonymous_namespace_::Verifier *a1, unsigned char *a2)
{
  uint64_t v2 = **((void **)a2 - 8);
  if (v2 == **((void **)a2 - 4))
  {
    switch(a2[16])
    {
      case '*':
      case ',':
      case '.':
      case '1':
      case '4':
        uint64_t v6 = *(void *)a2;
        int v7 = *(_DWORD *)(*(void *)a2 + 8);
        if ((v7 & 0xFE) == 0x12) {
          int v7 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        BOOL v8 = v7 < 4u || v7 == 5;
        int v9 = v7 & 0xFD;
        if (!v8 && v9 != 4)
        {
          uint64_t v3 = "Floating-point arithmetic operators only work with floating-point types!";
          goto LABEL_3;
        }
        if (v6 == v2) {
          goto LABEL_36;
        }
        uint64_t v3 = "Floating-point arithmetic operators must have same type for operands and result!";
        goto LABEL_3;
      case '5':
      case '6':
      case '7':
        uint64_t v11 = *(void *)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v12 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
        }
        else {
          int v12 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v12 == 13)
        {
          if (v11 == v2) {
            goto LABEL_36;
          }
          uint64_t v3 = "Shift return type must be same as operands!";
        }
        else
        {
          uint64_t v3 = "Shifts only work with integral types!";
        }
        goto LABEL_3;
      case '8':
      case '9':
      case ':':
        uint64_t v13 = *(void *)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v14 = *(unsigned __int8 *)(**(void **)(v13 + 16) + 8);
        }
        else {
          int v14 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v14 == 13)
        {
          if (v13 == v2) {
            goto LABEL_36;
          }
          uint64_t v3 = "Logical operators must have same type for operands and result!";
        }
        else
        {
          uint64_t v3 = "Logical operators only work with integral types!";
        }
        goto LABEL_3;
      default:
        uint64_t v4 = *(void *)a2;
        if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
          int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
        }
        else {
          int v5 = *(_DWORD *)(*(void *)a2 + 8);
        }
        if (v5 != 13)
        {
          uint64_t v3 = "Integer arithmetic operators only work with integral types!";
          goto LABEL_3;
        }
        if (v4 != v2)
        {
          uint64_t v3 = "Integer arithmetic operators must have same type for operands and result!";
          goto LABEL_3;
        }
LABEL_36:
        break;
    }
  }
  else
  {
    uint64_t v3 = "Both operands to a binary operator are not of the same type!";
LABEL_3:
    uint64_t v15 = (llvm::Type **)a2;
    unsigned int v16 = v3;
    __int16 v17 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)a1, (const llvm::Twine *)&v16, &v15);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3, llvm::Type ***a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write(a1, *a3);
    int v7 = *a4;
    if (*a4)
    {
      llvm::VerifierSupport::Write((uint64_t ***)a1, v7);
    }
  }
}

void anonymous namespace'::Verifier::checkAtomicMemAccessSize(llvm::DataLayout **this, llvm::Type *a2, llvm::Type **a3)
{
  int v9 = a3;
  unsigned int v10 = a2;
  unsigned int TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(this[22], a2);
  if ((_BYTE)v4) {
  if (TypeSizeInBits <= 7)
  }
  {
    uint64_t v6 = "atomic memory access' size must be byte-sized";
  }
  else
  {
    if ((TypeSizeInBits & (TypeSizeInBits - 1)) == 0) {
      return;
    }
    uint64_t v6 = "atomic memory access' operand must have a power-of-two size";
  }
  int v7 = v6;
  __int16 v8 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(this, (const llvm::Twine *)&v7, &v10, &v9);
}

void anonymous namespace'::Verifier::visitFuncletPadInst(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  v67[8] = *MEMORY[0x263EF8340];
  int v64 = v67;
  unsigned int v66 = 8;
  v67[0] = a2;
  char v59 = v63;
  __int16 v60 = v63;
  uint64_t v61 = 8;
  int v62 = 0;
  unsigned int v55 = a1 + 107;
  LODWORD(v5) = 1;
LABEL_2:
  while (1)
  {
    uint64_t v6 = *((void *)v64 + v5 - 1);
    unsigned int v65 = v5 - 1;
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v59, (const void *)v6);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void *)(v6 + 8);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6;
      while (1)
      {
        uint64_t v11 = *(llvm::Type ***)(v8 + 24);
        int v12 = *((unsigned __int8 *)v11 + 16);
        if (v11)
        {
          if (v12 == 36) {
            break;
          }
        }
        if (v11 && v12 == 38)
        {
          if ((*((_WORD *)v11 + 9) & 1) == 0) {
            goto LABEL_76;
          }
          int v13 = *((_DWORD *)v11 + 5);
          if ((v13 & 0x40000000) == 0) {
            goto LABEL_13;
          }
          int v14 = (llvm::Type **)*(v11 - 1);
LABEL_14:
          uint64_t v15 = v14 + 4;
          goto LABEL_18;
        }
        if (!v11 || v12 != 33)
        {
          if (v12 != 84)
          {
            if (v11 && v12 == 79)
            {
              uint64_t v27 = v65;
              if (v65 >= (unint64_t)v66)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v65 + 1, 8);
                uint64_t v27 = v65;
              }
              *((void *)v64 + v27) = v11;
              ++v65;
            }
            else if (v12 != 37)
            {
              v57[0] = (uint64_t)"Bogus funclet pad use";
              __int16 v58 = 259;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
              if (*a1)
              {
                uint64_t v44 = (uint64_t ***)a1;
                int v45 = v11;
                goto LABEL_143;
              }
              goto LABEL_145;
            }
          }
          goto LABEL_76;
        }
        uint64_t v15 = v11 - 8;
LABEL_18:
        unsigned int v16 = *v15;
        if (v16)
        {
          for (uint64_t i = *((void *)v16 + 6); ; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v18 = i - 24;
            uint64_t v19 = i ? i - 24 : 0;
            if (*(unsigned char *)(v19 + 16) != 83) {
              break;
            }
          }
          int v21 = *(unsigned __int8 *)(i - 8);
          if ((v21 - 38) > 0x38 || ((1 << (v21 - 38)) & 0x100060000000001) == 0) {
            goto LABEL_76;
          }
          if ((v21 - 81) >= 0xFFFFFFFE)
          {
            BOOL v24 = (uint64_t *)(i - 56);
          }
          else
          {
            int v23 = *(_DWORD *)(i - 4);
            BOOL v24 = (v23 & 0x40000000) != 0 ? *(uint64_t **)(i - 32) : (uint64_t *)(v18 - 32 * (v23 & 0x7FFFFFF));
          }
          uint64_t v20 = *v24;
          if (v20 == v10) {
            goto LABEL_76;
          }
          while (v10 != a2)
          {
            if (v10
              && ((v28 = *(unsigned __int8 *)(v10 + 16), v28 >= 0x1C) ? (BOOL v29 = v28 - 81 >= 0xFFFFFFFE) : (BOOL v29 = 0), v29))
            {
              int v30 = (uint64_t *)(v10 - 32);
            }
            else
            {
              int v31 = *(_DWORD *)(v10 + 20);
              if ((v31 & 0x40000000) != 0) {
                int v30 = *(uint64_t **)(v10 - 8);
              }
              else {
                int v30 = (uint64_t *)(v10 - 32 * (v31 & 0x7FFFFFF));
              }
            }
            uint64_t v10 = *v30;
            if (*v30 == v20)
            {
              uint64_t v11 = v3;
              goto LABEL_29;
            }
            if (*(unsigned char *)(v10 + 16) == 20)
            {
              uint64_t v11 = v3;
              uint64_t v20 = v9;
              goto LABEL_29;
            }
          }
          goto LABEL_26;
        }
LABEL_25:
        uint64_t v18 = llvm::ConstantTokenNone::get(**(uint64_t ***)a2);
LABEL_26:
        if (v3)
        {
          if (v18 != v4)
          {
            v57[0] = (uint64_t)"Unwind edges out of a funclet pad must have the same unwind dest";
            __int16 v58 = 259;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
            if (!*a1) {
              goto LABEL_145;
            }
            llvm::VerifierSupport::Write((uint64_t ***)a1, (llvm::Type **)a2);
            llvm::VerifierSupport::Write((uint64_t ***)a1, v11);
            uint64_t v44 = (uint64_t ***)a1;
            int v45 = v3;
            goto LABEL_143;
          }
          uint64_t v11 = v3;
          uint64_t v20 = a2;
LABEL_29:
          uint64_t v18 = v4;
        }
        else
        {
          if (*(unsigned char *)(a2 + 16) == 79)
          {
            unsigned int v25 = *(unsigned __int8 *)(v18 + 16);
            if (v25 != 20)
            {
              if (v25 < 0x1C || v25 - 81 < 0xFFFFFFFE)
              {
                int v32 = *(_DWORD *)(v18 + 20);
                BOOL v26 = (v32 & 0x40000000) != 0 ? *(void **)(v18 - 8) : (void *)(v18 - 32 * (v32 & 0x7FFFFFF));
              }
              else
              {
                BOOL v26 = (void *)(v18 - 32);
              }
              if (*v26 == *(void *)(a2 - 32))
              {
                v57[0] = a2;
                *(void *)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[](v55, v57) = v11;
              }
            }
          }
          uint64_t v20 = a2;
        }
        uint64_t v3 = v11;
        uint64_t v10 = a2;
        uint64_t v4 = v18;
        uint64_t v9 = v20;
        if (v6 != a2)
        {
LABEL_77:
          uint64_t v5 = v65;
          if (!v20 || v6 == v20)
          {
LABEL_107:
            uint64_t v3 = v11;
            uint64_t v4 = v18;
            if (v5) {
              goto LABEL_2;
            }
            goto LABEL_110;
          }
          if (v65)
          {
            do
            {
              uint64_t v33 = *((void *)v64 + v5 - 1);
              unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
              if (v33) {
                BOOL v35 = v34 >= 0x1C;
              }
              else {
                BOOL v35 = 0;
              }
              if (v35 && v34 - 81 >= 0xFFFFFFFE)
              {
                unsigned int v38 = (uint64_t *)(v33 - 32);
              }
              else
              {
                int v37 = *(_DWORD *)(v33 + 20);
                if ((v37 & 0x40000000) != 0) {
                  unsigned int v38 = *(uint64_t **)(v33 - 8);
                }
                else {
                  unsigned int v38 = (uint64_t *)(v33 - 32 * (v37 & 0x7FFFFFF));
                }
              }
              uint64_t v39 = *v38;
              while (v6 != v39)
              {
                if (v6
                  && ((v40 = *(unsigned __int8 *)(v6 + 16), v40 >= 0x1C) ? (BOOL v41 = v40 - 81 >= 0xFFFFFFFE) : (BOOL v41 = 0),
                      v41))
                {
                  uint64_t v42 = (uint64_t *)(v6 - 32);
                }
                else
                {
                  int v43 = *(_DWORD *)(v6 + 20);
                  if ((v43 & 0x40000000) != 0) {
                    uint64_t v42 = *(uint64_t **)(v6 - 8);
                  }
                  else {
                    uint64_t v42 = (uint64_t *)(v6 - 32 * (v43 & 0x7FFFFFF));
                  }
                }
                uint64_t v6 = *v42;
                if (*v42 == v20) {
                  goto LABEL_107;
                }
              }
              uint64_t v6 = v39;
              unsigned int v65 = --v5;
            }
            while (v5);
          }
          uint64_t v3 = v11;
          uint64_t v4 = v18;
          if (!v18) {
            goto LABEL_144;
          }
LABEL_120:
          uint64_t v47 = *(void *)(a2 - 32);
          if (v47 && *(unsigned char *)(v47 + 16) == 38)
          {
            if ((*(_WORD *)(v47 + 18) & 1) != 0
              && ((int v48 = *(_DWORD *)(v47 + 20), (v48 & 0x40000000) != 0)
                ? (uint64_t v49 = *(void *)(v47 - 8))
                : (uint64_t v49 = v47 - 32 * (v48 & 0x7FFFFFF)),
                  (uint64_t v50 = *(void *)(v49 + 32)) != 0))
            {
              uint64_t v51 = v50 + 40;
              for (uint64_t j = *(void *)(v50 + 48); j != v51; uint64_t j = *(void *)(j + 8))
              {
                uint64_t v53 = j - 24;
                if (j) {
                  uint64_t v54 = j - 24;
                }
                else {
                  uint64_t v54 = 0;
                }
                if (*(unsigned char *)(v54 + 16) != 83) {
                  goto LABEL_138;
                }
              }
              uint64_t v53 = 0;
            }
            else
            {
              uint64_t v53 = llvm::ConstantTokenNone::get(**(uint64_t ***)a2);
            }
LABEL_138:
            if (v53 != v4)
            {
              v57[0] = (uint64_t)"Unwind edges out of a catch must have the same unwind dest as the parent catchswitch";
              __int16 v58 = 259;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
              if (*a1)
              {
                llvm::VerifierSupport::Write((uint64_t ***)a1, (llvm::Type **)a2);
                if (v3) {
                  llvm::VerifierSupport::Write((uint64_t ***)a1, v3);
                }
                uint64_t v44 = (uint64_t ***)a1;
                int v45 = (llvm::Type **)v47;
LABEL_143:
                llvm::VerifierSupport::Write(v44, v45);
              }
              goto LABEL_145;
            }
          }
LABEL_144:
          goto LABEL_145;
        }
LABEL_76:
        uint64_t v8 = *(void *)(v8 + 8);
        uint64_t v11 = v3;
        uint64_t v18 = v4;
        uint64_t v20 = v9;
        if (!v8) {
          goto LABEL_77;
        }
      }
      if ((*((_WORD *)v11 + 9) & 1) == 0) {
        goto LABEL_25;
      }
      int v13 = *((_DWORD *)v11 + 5);
LABEL_13:
      int v14 = &v11[-4 * (v13 & 0x7FFFFFF)];
      goto LABEL_14;
    }
    LODWORD(v5) = v65;
    if (!v65)
    {
LABEL_110:
      if (v4) {
        goto LABEL_120;
      }
      goto LABEL_144;
    }
  }
  v57[0] = (uint64_t)"FuncletPadInst must not be nested within itself";
  __int16 v58 = 259;
  llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
  if (v6) {
    BOOL v46 = *a1 == 0;
  }
  else {
    BOOL v46 = 1;
  }
  if (!v46)
  {
    uint64_t v44 = (uint64_t ***)a1;
    int v45 = (llvm::Type **)v6;
    goto LABEL_143;
  }
LABEL_145:
  if (v60 != v59) {
    free(v60);
  }
  if (v64 != v67) {
    free(v64);
  }
}

BOOL isTypeCongruent(llvm::Type *a1, llvm::Type *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*((unsigned char *)a1 + 8) == 15) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)a2 + 8) == 15) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4 && (*((_DWORD *)v3 + 2) ^ *((_DWORD *)v2 + 2)) < 0x100;
}

uint64_t **getParameterABIAttributes(uint64_t **result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v14 = a4;
  llvm::VerifierSupport *result = a2;
  result[1] = (uint64_t *)(result + 3);
  result[2] = (uint64_t *)0x800000000;
  uint64_t v7 = (a3 + 2);
  uint64_t v8 = a4 + 40;
  uint64_t v9 = &getParameterABIAttributes(llvm::LLVMContext &,unsigned int,llvm::AttributeList)::ABIAttrs;
  do
  {
    while (!a4)
    {
      if (++v9 == (int *)qword_261EA7240) {
        return result;
      }
    }
    if (v7 < *(_DWORD *)(a4 + 8))
    {
      uint64_t result = *(uint64_t ***)(v8 + 8 * v7);
      if (result)
      {
        uint64_t result = (uint64_t **)llvm::AttributeSetNode::findEnumAttribute((uint64_t)result, *v9);
        if (v10 && result != 0) {
          uint64_t result = (uint64_t **)llvm::AttrBuilder::addAttribute((uint64_t)v6, (uint64_t)result);
        }
      }
    }
    ++v9;
  }
  while (v9 != (int *)qword_261EA7240);
  if (v7 < *(_DWORD *)(a4 + 8))
  {
    uint64_t v12 = *(void *)(v8 + 8 * v7);
    if (v12)
    {
      if ((*(unsigned char *)(v12 + 21) & 8) != 0 && (*(unsigned char *)(v12 + 20) & 0x60) != 0)
      {
        Paramunsigned __int16 Alignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)&v14, a3);
        return llvm::AttrBuilder::addAlignmentAttr(v6, ParamAlignment);
      }
    }
  }
  return result;
}

void anonymous namespace'::Verifier::verifyTailCCMustTailAttrs(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (llvm::AttrBuilder::getAttribute(a2, 72))
  {
    uint64_t v8 = "inalloca attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 11))
  {
    uint64_t v8 = "inreg attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 64))
  {
    uint64_t v8 = "swifterror attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 73))
  {
    uint64_t v8 = "preallocated attribute not allowed in ";
  }
  else
  {
    if (!llvm::AttrBuilder::getAttribute(a2, 69)) {
      return;
    }
    uint64_t v8 = "byref attribute not allowed in ";
  }
  v9[0] = v8;
  void v9[2] = a3;
  void v9[3] = a4;
  __int16 v10 = 1283;
  llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v9);
}

uint64_t getSuccPad(llvm::Instruction *a1)
{
  int v1 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v1 == 33)
  {
    uint64_t v2 = (uint64_t *)((char *)a1 - 64);
LABEL_14:
    uint64_t v6 = *v2;
    goto LABEL_15;
  }
  __int16 v3 = *((_WORD *)a1 + 9);
  if (a1 && v1 == 38)
  {
    if (v3)
    {
      int v4 = *((_DWORD *)a1 + 5);
      if ((v4 & 0x40000000) != 0)
      {
        uint64_t v5 = (char *)*((void *)a1 - 1);
LABEL_13:
        uint64_t v2 = (uint64_t *)(v5 + 32);
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v5 = (char *)a1 - 32 * (v4 & 0x7FFFFFF);
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    int v4 = *((_DWORD *)a1 + 5);
    goto LABEL_12;
  }
  uint64_t v6 = 0;
LABEL_15:
  uint64_t v7 = v6 + 40;
  for (uint64_t i = *(void *)(v6 + 48); i != v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t result = i - 24;
    if (i) {
      uint64_t v10 = i - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 83) {
      return result;
    }
  }
  return 0;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v108 = *(a2 - 1);
                uint64_t v109 = *v11;
                uint64_t v110 = *(void *)(*(void *)(v108 - 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF)) + 24);
                unint64_t v113 = *(void *)(v110 - 16);
                uint64_t v111 = v110 - 16;
                unint64_t v112 = v113;
                if ((v113 & 2) != 0) {
                  unint64_t v114 = *(void *)(*(void *)(*(void *)(v108 - 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v114 = v111 - 8 * ((v112 >> 2) & 0xF);
                }
                uint64_t v235 = *(void *)(*(void *)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF)) + 24);
                unint64_t v238 = *(void *)(v235 - 16);
                uint64_t v236 = v235 - 16;
                unint64_t v237 = v238;
                if ((v238 & 2) != 0) {
                  unint64_t v239 = *(void *)(*(void *)(*(void *)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v239 = v236 - 8 * ((v237 >> 2) & 0xF);
                }
                if (v114 < v239)
                {
                  *uint64_t v11 = v108;
                  *(a2 - 1) = v109;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v115 = v11 + 1;
            BOOL v117 = v11 == a2 || v115 == a2;
            if (a4)
            {
              if (!v117)
              {
                uint64_t v118 = 8;
                uint64_t v119 = v11;
                do
                {
                  uint64_t v120 = v115;
                  uint64_t v121 = v119[1];
                  uint64_t v122 = *(void *)(*(void *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF)) + 24);
                  unint64_t v125 = *(void *)(v122 - 16);
                  uint64_t v123 = v122 - 16;
                  unint64_t v124 = v125;
                  if ((v125 & 2) != 0) {
                    unint64_t v126 = *(void *)(*(void *)(*(void *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF)) + 24)
                  }
                                     - 32);
                  else {
                    unint64_t v126 = v123 - 8 * ((v124 >> 2) & 0xF);
                  }
                  uint64_t v127 = *v119;
                  uint64_t v128 = *(void *)(*(void *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF)) + 24);
                  unint64_t v131 = *(void *)(v128 - 16);
                  uint64_t v129 = v128 - 16;
                  unint64_t v130 = v131;
                  if ((v131 & 2) != 0) {
                    unint64_t v132 = *(void *)(*(void *)(*(void *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF)) + 24)
                  }
                                     - 32);
                  else {
                    unint64_t v132 = v129 - 8 * ((v130 >> 2) & 0xF);
                  }
                  if (v126 < v132)
                  {
                    uint64_t v133 = v118;
                    do
                    {
                      *(uint64_t *)((char *)v11 + v133) = v127;
                      uint64_t v134 = v133 - 8;
                      if (v133 == 8)
                      {
                        uint64_t v145 = v11;
                        goto LABEL_155;
                      }
                      uint64_t v135 = *(void *)(*(void *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v138 = *(void *)(v135 - 16);
                      uint64_t v136 = v135 - 16;
                      unint64_t v137 = v138;
                      if ((v138 & 2) != 0) {
                        unint64_t v139 = *(void *)(*(void *)(*(void *)(v121 - 32 * (*(_DWORD *)(v121 + 20) & 0x7FFFFFF))
                      }
                                                     + 24)
                                         - 32);
                      else {
                        unint64_t v139 = v136 - 8 * ((v137 >> 2) & 0xF);
                      }
                      uint64_t v127 = *(uint64_t *)((char *)v11 + v133 - 16);
                      uint64_t v140 = *(void *)(*(void *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v143 = *(void *)(v140 - 16);
                      uint64_t v141 = v140 - 16;
                      unint64_t v142 = v143;
                      if ((v143 & 2) != 0) {
                        unint64_t v144 = *(void *)(*(void *)(*(void *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF))
                      }
                                                     + 24)
                                         - 32);
                      else {
                        unint64_t v144 = v141 - 8 * ((v142 >> 2) & 0xF);
                      }
                      v133 -= 8;
                    }
                    while (v139 < v144);
                    uint64_t v145 = (uint64_t *)((char *)v11 + v134);
LABEL_155:
                    uint64_t *v145 = v121;
                  }
                  uint64_t v115 = v120 + 1;
                  v118 += 8;
                  uint64_t v119 = v120;
                }
                while (v120 + 1 != a2);
              }
            }
            else if (!v117)
            {
              do
              {
                v240 = v115;
                uint64_t v241 = v9[1];
                uint64_t v242 = *(void *)(*(void *)(v241 - 32 * (*(_DWORD *)(v241 + 20) & 0x7FFFFFF)) + 24);
                unint64_t v245 = *(void *)(v242 - 16);
                uint64_t v243 = v242 - 16;
                unint64_t v244 = v245;
                if ((v245 & 2) != 0) {
                  unint64_t v246 = *(void *)(*(void *)(*(void *)(v241 - 32 * (*(_DWORD *)(v241 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v246 = v243 - 8 * ((v244 >> 2) & 0xF);
                }
                uint64_t v247 = *v9;
                uint64_t v248 = *(void *)(*(void *)(*v9 - 32 * (*(_DWORD *)(*v9 + 20) & 0x7FFFFFF)) + 24);
                unint64_t v251 = *(void *)(v248 - 16);
                uint64_t v249 = v248 - 16;
                unint64_t v250 = v251;
                if ((v251 & 2) != 0) {
                  unint64_t v252 = *(void *)(*(void *)(*(void *)(*v9 - 32 * (*(_DWORD *)(*v9 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v252 = v249 - 8 * ((v250 >> 2) & 0xF);
                }
                if (v246 < v252)
                {
                  unsigned int v253 = v240;
                  do
                  {
                    uint64_t *v253 = v247;
                    uint64_t v254 = *(void *)(*(void *)(v241 - 32 * (*(_DWORD *)(v241 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v257 = *(void *)(v254 - 16);
                    uint64_t v255 = v254 - 16;
                    unint64_t v256 = v257;
                    if ((v257 & 2) != 0) {
                      unint64_t v258 = *(void *)(*(void *)(*(void *)(v241 - 32 * (*(_DWORD *)(v241 + 20) & 0x7FFFFFF))
                    }
                                                   + 24)
                                       - 32);
                    else {
                      unint64_t v258 = v255 - 8 * ((v256 >> 2) & 0xF);
                    }
                    uint64_t v247 = *(v253 - 2);
                    uint64_t v259 = *(void *)(*(void *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v262 = *(void *)(v259 - 16);
                    uint64_t v260 = v259 - 16;
                    unint64_t v261 = v262;
                    if ((v262 & 2) != 0) {
                      unint64_t v263 = *(void *)(*(void *)(*(void *)(v247 - 32 * (*(_DWORD *)(v247 + 20) & 0x7FFFFFF))
                    }
                                                   + 24)
                                       - 32);
                    else {
                      unint64_t v263 = v260 - 8 * ((v261 >> 2) & 0xF);
                    }
                    --v253;
                  }
                  while (v258 < v263);
                  uint64_t *v253 = v241;
                }
                uint64_t v115 = v240 + 1;
                uint64_t v9 = v240;
              }
              while (v240 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v146 = (v13 - 2) >> 1;
              int64_t v147 = v146;
              do
              {
                int64_t v148 = v147;
                if (v146 >= v147)
                {
                  uint64_t v149 = (2 * v147) | 1;
                  uint64_t v150 = &v11[v149];
                  if (2 * v148 + 2 < (uint64_t)v13)
                  {
                    uint64_t v151 = *(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v154 = *(void *)(v151 - 16);
                    uint64_t v153 = v151 - 16;
                    unint64_t v152 = v154;
                    if ((v154 & 2) != 0) {
                      unint64_t v155 = *(void *)(*(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF))
                    }
                                                   + 24)
                                       - 32);
                    else {
                      unint64_t v155 = v153 - 8 * ((v152 >> 2) & 0xF);
                    }
                    uint64_t v156 = v150[1];
                    ++v150;
                    uint64_t v157 = *(void *)(*(void *)(v156 - 32 * (*(_DWORD *)(v156 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v158 = *(void *)(v157 - 16);
                    if ((v158 & 2) != 0) {
                      unint64_t v159 = *(void *)(v157 - 32);
                    }
                    else {
                      unint64_t v159 = v157 - 16 - 8 * ((v158 >> 2) & 0xF);
                    }
                    if (v155 < v159) {
                      uint64_t v149 = 2 * v148 + 2;
                    }
                    else {
                      uint64_t v150 = &v11[v149];
                    }
                  }
                  uint64_t v160 = *v150;
                  uint64_t v161 = *(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF)) + 24);
                  unint64_t v164 = *(void *)(v161 - 16);
                  uint64_t v162 = v161 - 16;
                  unint64_t v163 = v164;
                  if ((v164 & 2) != 0) {
                    unint64_t v165 = *(void *)(*(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF))
                  }
                                                 + 24)
                                     - 32);
                  else {
                    unint64_t v165 = v162 - 8 * ((v163 >> 2) & 0xF);
                  }
                  uint64_t v166 = &v11[v148];
                  uint64_t v167 = *v166;
                  uint64_t v168 = *(void *)(*(void *)(*v166 - 32 * (*(_DWORD *)(*v166 + 20) & 0x7FFFFFF)) + 24);
                  unint64_t v171 = *(void *)(v168 - 16);
                  uint64_t v169 = v168 - 16;
                  unint64_t v170 = v171;
                  if ((v171 & 2) != 0) {
                    uint64_t result = *(uint64_t **)(*(void *)(*(void *)(*v166 - 32 * (*(_DWORD *)(*v166 + 20) & 0x7FFFFFF))
                  }
                                                     + 24)
                                         - 32);
                  else {
                    uint64_t result = (uint64_t *)(v169 - 8 * ((v170 >> 2) & 0xF));
                  }
                  if (v165 >= (unint64_t)result)
                  {
                    do
                    {
                      uint64_t v172 = v150;
                      *uint64_t v166 = v160;
                      if (v146 < v149) {
                        break;
                      }
                      uint64_t v173 = (2 * v149) | 1;
                      uint64_t v150 = &v11[v173];
                      if (2 * v149 + 2 < (uint64_t)v13)
                      {
                        uint64_t v174 = *(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v177 = *(void *)(v174 - 16);
                        uint64_t v175 = v174 - 16;
                        unint64_t v176 = v177;
                        unint64_t v178 = (v177 & 2) != 0
                             ? *(void *)(*(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF))
                                                     + 24)
                                         - 32)
                             : v175 - 8 * ((v176 >> 2) & 0xF);
                        uint64_t v179 = v150[1];
                        ++v150;
                        uint64_t v180 = *(void *)(*(void *)(v179 - 32 * (*(_DWORD *)(v179 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v181 = *(void *)(v180 - 16);
                        unint64_t v182 = (v181 & 2) != 0 ? *(void *)(v180 - 32) : v180 - 16 - 8 * ((v181 >> 2) & 0xF);
                        if (v178 < v182)
                        {
                          uint64_t v149 = 2 * v149 + 2;
                        }
                        else
                        {
                          uint64_t v150 = &v11[v173];
                          uint64_t v149 = (2 * v149) | 1;
                        }
                      }
                      else
                      {
                        uint64_t v149 = (2 * v149) | 1;
                      }
                      uint64_t v160 = *v150;
                      uint64_t v183 = *(void *)(*(void *)(*v150 - 32 * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v186 = *(void *)(v183 - 16);
                      uint64_t v184 = v183 - 16;
                      unint64_t v185 = v186;
                      uint64_t result = (v186 & 2) != 0
                             ? *(uint64_t **)(*(void *)(*(void *)(*v150 - 32
                                                                           * (*(_DWORD *)(*v150 + 20) & 0x7FFFFFF))
                                                       + 24)
                                           - 32)
                             : (uint64_t *)(v184 - 8 * ((v185 >> 2) & 0xF));
                      uint64_t v187 = *(void *)(*(void *)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF)) + 24);
                      unint64_t v190 = *(void *)(v187 - 16);
                      uint64_t v188 = v187 - 16;
                      unint64_t v189 = v190;
                      unint64_t v191 = (v190 & 2) != 0
                           ? *(void *)(*(void *)(*(void *)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                           : v188 - 8 * ((v189 >> 2) & 0xF);
                      uint64_t v166 = v172;
                    }
                    while ((unint64_t)result >= v191);
                    uint64_t *v172 = v167;
                  }
                }
                int64_t v147 = v148 - 1;
              }
              while (v148);
              uint64_t v192 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v193 = 0;
                uint64_t v194 = *v11;
                uint64_t v195 = v11;
                do
                {
                  int v196 = &v195[v193 + 1];
                  uint64_t v197 = (2 * v193) | 1;
                  uint64_t v198 = 2 * v193 + 2;
                  if (v198 < v192)
                  {
                    uint64_t v199 = *(void *)(*(void *)(*v196 - 32 * (*(_DWORD *)(*v196 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v202 = *(void *)(v199 - 16);
                    uint64_t v200 = v199 - 16;
                    unint64_t v201 = v202;
                    unint64_t v203 = (v202 & 2) != 0
                         ? *(void *)(*(void *)(*(void *)(*v196 - 32 * (*(_DWORD *)(*v196 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32)
                         : v200 - 8 * ((v201 >> 2) & 0xF);
                    uint64_t v204 = *(void *)(*(void *)(v196[1] - 32 * (*(_DWORD *)(v196[1] + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v206 = *(void *)(v204 - 16);
                    uint64_t result = (uint64_t *)(v204 - 16);
                    unint64_t v205 = v206;
                    uint64_t v207 = (v206 & 2) != 0
                         ? *(uint64_t **)(*(void *)(*(void *)(v196[1] - 32
                                                                         * (*(_DWORD *)(v196[1] + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                         : &result[-((v205 >> 2) & 0xF)];
                    if (v203 < (unint64_t)v207)
                    {
                      ++v196;
                      uint64_t v197 = v198;
                    }
                  }
                  *uint64_t v195 = *v196;
                  uint64_t v195 = v196;
                  uint64_t v193 = v197;
                }
                while (v197 <= (uint64_t)((unint64_t)(v192 - 2) >> 1));
                if (v196 == --a2)
                {
                  uint64_t *v196 = v194;
                }
                else
                {
                  uint64_t *v196 = *a2;
                  *a2 = v194;
                  uint64_t v208 = (char *)v196 - (char *)v11 + 8;
                  if (v208 >= 9)
                  {
                    unint64_t v209 = (((unint64_t)v208 >> 3) - 2) >> 1;
                    uint64_t v210 = &v11[v209];
                    uint64_t v211 = *v210;
                    uint64_t v212 = *(void *)(*(void *)(*v210 - 32 * (*(_DWORD *)(*v210 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v215 = *(void *)(v212 - 16);
                    uint64_t v213 = v212 - 16;
                    unint64_t v214 = v215;
                    unint64_t v216 = (v215 & 2) != 0
                         ? *(void *)(*(void *)(*(void *)(*v210 - 32 * (*(_DWORD *)(*v210 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32)
                         : v213 - 8 * ((v214 >> 2) & 0xF);
                    uint64_t v217 = *v196;
                    uint64_t v218 = *(void *)(*(void *)(*v196 - 32 * (*(_DWORD *)(*v196 + 20) & 0x7FFFFFF)) + 24);
                    unint64_t v221 = *(void *)(v218 - 16);
                    uint64_t v219 = v218 - 16;
                    unint64_t v220 = v221;
                    unint64_t v222 = (v221 & 2) != 0
                         ? *(void *)(*(void *)(*(void *)(*v196 - 32 * (*(_DWORD *)(*v196 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32)
                         : v219 - 8 * ((v220 >> 2) & 0xF);
                    if (v216 < v222)
                    {
                      do
                      {
                        uint64_t v223 = v210;
                        uint64_t *v196 = v211;
                        if (!v209) {
                          break;
                        }
                        unint64_t v209 = (v209 - 1) >> 1;
                        uint64_t v210 = &v11[v209];
                        uint64_t v211 = *v210;
                        uint64_t v224 = *(void *)(*(void *)(*v210 - 32 * (*(_DWORD *)(*v210 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v227 = *(void *)(v224 - 16);
                        uint64_t v225 = v224 - 16;
                        unint64_t v226 = v227;
                        unint64_t v228 = (v227 & 2) != 0
                             ? *(void *)(*(void *)(*(void *)(*v210 - 32 * (*(_DWORD *)(*v210 + 20) & 0x7FFFFFF))
                                                     + 24)
                                         - 32)
                             : v225 - 8 * ((v226 >> 2) & 0xF);
                        uint64_t v229 = *(void *)(*(void *)(v217 - 32 * (*(_DWORD *)(v217 + 20) & 0x7FFFFFF)) + 24);
                        unint64_t v232 = *(void *)(v229 - 16);
                        uint64_t v230 = v229 - 16;
                        unint64_t v231 = v232;
                        unint64_t v233 = (v232 & 2) != 0
                             ? *(void *)(*(void *)(*(void *)(v217 - 32 * (*(_DWORD *)(v217 + 20) & 0x7FFFFFF))
                                                     + 24)
                                         - 32)
                             : v230 - 8 * ((v231 >> 2) & 0xF);
                        int v196 = v223;
                      }
                      while (v228 < v233);
                      uint64_t *v223 = v217;
                    }
                  }
                }
              }
              while (v192-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            uint64_t v16 = *v9;
            uint64_t *v9 = *v15;
            *uint64_t v15 = v16;
          }
          else
          {
          }
          --a3;
          uint64_t v17 = *v9;
          if (a4) {
            break;
          }
          uint64_t v21 = *(void *)(*(void *)(*(v9 - 1) - 32 * (*(_DWORD *)(*(v9 - 1) + 20) & 0x7FFFFFF)) + 24);
          unint64_t v24 = *(void *)(v21 - 16);
          uint64_t v22 = v21 - 16;
          unint64_t v23 = v24;
          if ((v24 & 2) != 0) {
            unint64_t v25 = *(void *)(*(void *)(*(void *)(*(v9 - 1) - 32 * (*(_DWORD *)(*(v9 - 1) + 20) & 0x7FFFFFF))
          }
                                        + 24)
                            - 32);
          else {
            unint64_t v25 = v22 - 8 * ((v23 >> 2) & 0xF);
          }
          uint64_t v18 = *(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
          uint64_t v26 = v18 - 16;
          unint64_t v19 = *(void *)(v18 - 16);
          if ((v19 & 2) != 0)
          {
            unint64_t v27 = *(void *)(v18 - 32);
            if (v25 < v27)
            {
              uint64_t v20 = 1;
              goto LABEL_20;
            }
          }
          else
          {
            unint64_t v27 = v26 - 8 * ((v19 >> 2) & 0xF);
            if (v25 < v27)
            {
              uint64_t v20 = 0;
              goto LABEL_20;
            }
          }
          uint64_t v66 = *(void *)(*(void *)(*v10 - 32 * (*(_DWORD *)(*v10 + 20) & 0x7FFFFFF)) + 24);
          unint64_t v69 = *(void *)(v66 - 16);
          uint64_t v67 = v66 - 16;
          unint64_t v68 = v69;
          if ((v69 & 2) != 0) {
            unint64_t v70 = *(void *)(*(void *)(*(void *)(*v10 - 32 * (*(_DWORD *)(*v10 + 20) & 0x7FFFFFF)) + 24) - 32);
          }
          else {
            unint64_t v70 = v67 - 8 * ((v68 >> 2) & 0xF);
          }
          unint64_t v71 = v26 - 8 * ((v19 >> 2) & 0xF);
          if (v27 >= v70)
          {
            __int16 v77 = v9 + 1;
            do
            {
              uint64_t v11 = v77;
              if (v77 >= a2) {
                break;
              }
              unint64_t v78 = v71;
              if ((v19 & 2) != 0) {
                unint64_t v78 = *(void *)(v18 - 32);
              }
              uint64_t v79 = *(void *)(*(void *)(*v77 - 32 * (*(_DWORD *)(*v77 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v82 = *(void *)(v79 - 16);
              uint64_t v80 = v79 - 16;
              unint64_t v81 = v82;
              unint64_t v83 = (v82 & 2) != 0
                  ? *(void *)(*(void *)(*(void *)(*v77 - 32 * (*(_DWORD *)(*v77 + 20) & 0x7FFFFFF)) + 24)
                              - 32)
                  : v80 - 8 * ((v81 >> 2) & 0xF);
              ++v77;
            }
            while (v78 >= v83);
          }
          else
          {
            uint64_t v11 = v9;
            do
            {
              unint64_t v72 = v71;
              if ((v19 & 2) != 0) {
                unint64_t v72 = *(void *)(v18 - 32);
              }
              uint64_t v73 = v11[1];
              ++v11;
              uint64_t v74 = *(void *)(*(void *)(v73 - 32 * (*(_DWORD *)(v73 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v75 = *(void *)(v74 - 16);
              if ((v75 & 2) != 0) {
                unint64_t v76 = *(void *)(v74 - 32);
              }
              else {
                unint64_t v76 = v74 - 16 - 8 * ((v75 >> 2) & 0xF);
              }
            }
            while (v72 >= v76);
          }
          uint64_t v84 = a2;
          if (v11 < a2)
          {
            uint64_t v84 = a2;
            do
            {
              unint64_t v85 = v71;
              if ((v19 & 2) != 0) {
                unint64_t v85 = *(void *)(v18 - 32);
              }
              uint64_t v86 = *--v84;
              uint64_t v87 = *(void *)(*(void *)(v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v88 = *(void *)(v87 - 16);
              if ((v88 & 2) != 0) {
                unint64_t v89 = *(void *)(v87 - 32);
              }
              else {
                unint64_t v89 = v87 - 16 - 8 * ((v88 >> 2) & 0xF);
              }
            }
            while (v85 < v89);
          }
          if (v11 < v84)
          {
            uint64_t v90 = *v11;
            uint64_t v91 = *v84;
            do
            {
              *uint64_t v11 = v91;
              uint64_t *v84 = v90;
              uint64_t v92 = *(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v93 = *(void *)(v92 - 16);
              do
              {
                uint64_t v94 = v11[1];
                ++v11;
                uint64_t v90 = v94;
                unint64_t v95 = v92 - 16 - 8 * ((v93 >> 2) & 0xF);
                if ((v93 & 2) != 0) {
                  unint64_t v95 = *(void *)(v92 - 32);
                }
                uint64_t v96 = *(void *)(*(void *)(v90 - 32 * (*(_DWORD *)(v90 + 20) & 0x7FFFFFF)) + 24);
                unint64_t v99 = *(void *)(v96 - 16);
                uint64_t v97 = v96 - 16;
                unint64_t v98 = v99;
                if ((v99 & 2) != 0) {
                  unint64_t v100 = *(void *)(*(void *)(*(void *)(v90 - 32 * (*(_DWORD *)(v90 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v100 = v97 - 8 * ((v98 >> 2) & 0xF);
                }
              }
              while (v95 >= v100);
              do
              {
                uint64_t v101 = *--v84;
                uint64_t v91 = v101;
                unint64_t v102 = v92 - 16 - 8 * ((v93 >> 2) & 0xF);
                if ((v93 & 2) != 0) {
                  unint64_t v102 = *(void *)(v92 - 32);
                }
                uint64_t v103 = *(void *)(*(void *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF)) + 24);
                uint64_t v105 = *(uint64_t **)(v103 - 16);
                uint64_t v104 = v103 - 16;
                uint64_t result = v105;
                if ((v105 & 2) != 0) {
                  unint64_t v106 = *(void *)(*(void *)(*(void *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF)) + 24)
                }
                                   - 32);
                else {
                  unint64_t v106 = v104 - 8 * (((unint64_t)result >> 2) & 0xF);
                }
              }
              while (v102 < v106);
            }
            while (v11 < v84);
          }
          uint64_t v107 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            uint64_t *v9 = *v107;
          }
          a4 = 0;
          uint64_t *v107 = v17;
        }
        uint64_t v18 = *(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v19 = *(void *)(v18 - 16);
        uint64_t v20 = v19 & 2;
LABEL_20:
        uint64_t v28 = 0;
        uint64_t v29 = v18 - 8 * ((v19 >> 2) & 0xF) - 16;
        do
        {
          uint64_t v30 = v9[v28 + 1];
          uint64_t v31 = *(void *)(*(void *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF)) + 24);
          unint64_t v34 = *(void *)(v31 - 16);
          uint64_t v32 = v31 - 16;
          unint64_t v33 = v34;
          if ((v34 & 2) != 0) {
            unint64_t v35 = *(void *)(*(void *)(*(void *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF)) + 24) - 32);
          }
          else {
            unint64_t v35 = v32 - 8 * ((v33 >> 2) & 0xF);
          }
          unint64_t v36 = v29;
          if (v20) {
            unint64_t v36 = *(void *)(v18 - 32);
          }
          ++v28;
        }
        while (v35 < v36);
        int v37 = &v9[v28];
        unsigned int v38 = a2;
        if (v28 == 1)
        {
          unsigned int v38 = a2;
          do
          {
            if (v37 >= v38) {
              break;
            }
            uint64_t v44 = *--v38;
            uint64_t v45 = *(void *)(*(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24);
            unint64_t v46 = *(void *)(v45 - 16);
            if ((v46 & 2) != 0) {
              unint64_t v47 = *(void *)(v45 - 32);
            }
            else {
              unint64_t v47 = v45 - 16 - 8 * ((v46 >> 2) & 0xF);
            }
            unint64_t v48 = v29;
            if (v20) {
              unint64_t v48 = *(void *)(v18 - 32);
            }
          }
          while (v47 >= v48);
        }
        else
        {
          do
          {
            uint64_t v39 = *--v38;
            uint64_t v40 = *(void *)(*(void *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF)) + 24);
            unint64_t v41 = *(void *)(v40 - 16);
            if ((v41 & 2) != 0) {
              unint64_t v42 = *(void *)(v40 - 32);
            }
            else {
              unint64_t v42 = v40 - 16 - 8 * ((v41 >> 2) & 0xF);
            }
            unint64_t v43 = v29;
            if (v20) {
              unint64_t v43 = *(void *)(v18 - 32);
            }
          }
          while (v42 >= v43);
        }
        if (v37 >= v38)
        {
          int v64 = v37 - 1;
        }
        else
        {
          uint64_t v49 = *v38;
          uint64_t v50 = v37;
          uint64_t v51 = v38;
          do
          {
            *uint64_t v50 = v49;
            *uint64_t v51 = v30;
            uint64_t v52 = *(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
            unint64_t v53 = *(void *)(v52 - 16);
            do
            {
              uint64_t v54 = v50[1];
              ++v50;
              uint64_t v30 = v54;
              uint64_t v55 = *(void *)(*(void *)(v54 - 32 * (*(_DWORD *)(v54 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v56 = *(void *)(v55 - 16);
              if ((v56 & 2) != 0) {
                unint64_t v57 = *(void *)(v55 - 32);
              }
              else {
                unint64_t v57 = v55 - 16 - 8 * ((v56 >> 2) & 0xF);
              }
              unint64_t v58 = v52 - 16 - 8 * ((v53 >> 2) & 0xF);
              if ((v53 & 2) != 0) {
                unint64_t v58 = *(void *)(v52 - 32);
              }
            }
            while (v57 < v58);
            do
            {
              uint64_t v59 = *--v51;
              uint64_t v49 = v59;
              uint64_t v60 = *(void *)(*(void *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF)) + 24);
              unint64_t v61 = *(void *)(v60 - 16);
              if ((v61 & 2) != 0) {
                unint64_t v62 = *(void *)(v60 - 32);
              }
              else {
                unint64_t v62 = v60 - 16 - 8 * ((v61 >> 2) & 0xF);
              }
              unint64_t v63 = v52 - 16 - 8 * ((v53 >> 2) & 0xF);
              if ((v53 & 2) != 0) {
                unint64_t v63 = *(void *)(v52 - 32);
              }
            }
            while (v62 >= v63);
          }
          while (v50 < v51);
          int v64 = v50 - 1;
        }
        if (v64 != v9) {
          uint64_t *v9 = *v64;
        }
        uint64_t *v64 = v17;
        if (v37 >= v38) {
          break;
        }
LABEL_66:
        a4 = 0;
        uint64_t v11 = v64 + 1;
      }
      uint64_t v11 = v64 + 1;
      if (result) {
        break;
      }
      if (!v65) {
        goto LABEL_66;
      }
    }
    a2 = v64;
    if (!v65) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v11 = *a4;
  uint64_t v12 = *(void *)(*(void *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v15 = *(void *)(v12 - 16);
  uint64_t v13 = v12 - 16;
  unint64_t v14 = v15;
  if ((v15 & 2) != 0) {
    unint64_t v16 = *(void *)(*(void *)(*(void *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v16 = v13 - 8 * ((v14 >> 2) & 0xF);
  }
  uint64_t v17 = *(void *)(*(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v20 = *(void *)(v17 - 16);
  uint64_t v18 = v17 - 16;
  unint64_t v19 = v20;
  if ((v20 & 2) != 0) {
    unint64_t v21 = *(void *)(*(void *)(*(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v21 = v18 - 8 * ((v19 >> 2) & 0xF);
  }
  if (v16 < v21)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v22 = *a3;
    uint64_t v23 = *(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v26 = *(void *)(v23 - 16);
    uint64_t v24 = v23 - 16;
    unint64_t v25 = v26;
    unint64_t v27 = (v26 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v24 - 8 * ((v25 >> 2) & 0xF);
    uint64_t v28 = *(void *)(*(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v31 = *(void *)(v28 - 16);
    uint64_t v29 = v28 - 16;
    unint64_t v30 = v31;
    unint64_t v32 = (v31 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v29 - 8 * ((v30 >> 2) & 0xF);
    if (v27 < v32)
    {
      *a3 = *a4;
      *a4 = v22;
      uint64_t v33 = *a2;
      uint64_t v34 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v37 = *(void *)(v34 - 16);
      uint64_t v35 = v34 - 16;
      unint64_t v36 = v37;
      unint64_t v38 = (v37 & 2) != 0
          ? *(void *)(*(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32)
          : v35 - 8 * ((v36 >> 2) & 0xF);
      uint64_t v39 = *(void *)(*(void *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v42 = *(void *)(v39 - 16);
      uint64_t v40 = v39 - 16;
      unint64_t v41 = v42;
      unint64_t v43 = (v42 & 2) != 0
          ? *(void *)(*(void *)(*(void *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24) - 32)
          : v40 - 8 * ((v41 >> 2) & 0xF);
      if (v38 < v43)
      {
        *a2 = *a3;
        *a3 = v33;
        uint64_t v44 = *a1;
        uint64_t v45 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v48 = *(void *)(v45 - 16);
        uint64_t v46 = v45 - 16;
        unint64_t v47 = v48;
        if ((v48 & 2) != 0) {
          unint64_t v49 = *(void *)(*(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
        }
        else {
          unint64_t v49 = v46 - 8 * ((v47 >> 2) & 0xF);
        }
        uint64_t v50 = *(void *)(*(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v53 = *(void *)(v50 - 16);
        uint64_t v51 = v50 - 16;
        unint64_t v52 = v53;
        if ((v53 & 2) != 0) {
          unint64_t v54 = *(void *)(*(void *)(*(void *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24) - 32);
        }
        else {
          unint64_t v54 = v51 - 8 * ((v52 >> 2) & 0xF);
        }
        if (v49 < v54)
        {
          *a1 = *a2;
          *a2 = v44;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v5 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  uint64_t v6 = v5 - 16;
  unint64_t v7 = *(void *)(v5 - 16);
  if ((v7 & 2) != 0) {
    unint64_t v8 = *(void *)(v5 - 32);
  }
  else {
    unint64_t v8 = v6 - 8 * ((v7 >> 2) & 0xF);
  }
  uint64_t v9 = *(void *)(*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v12 = *(void *)(v9 - 16);
  uint64_t v10 = v9 - 16;
  unint64_t v11 = v12;
  if ((v12 & 2) != 0) {
    unint64_t v13 = *(void *)(*(void *)(*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v13 = v10 - 8 * ((v11 >> 2) & 0xF);
  }
  uint64_t v14 = *a3;
  uint64_t v15 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  uint64_t v17 = v15 - 16;
  unint64_t v16 = *(void *)(v15 - 16);
  if (v8 >= v13)
  {
    if ((v16 & 2) != 0)
    {
      unint64_t v20 = *(void *)(v15 - 32);
      if ((v7 & 2) != 0) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v20 = v17 - 8 * ((v16 >> 2) & 0xF);
      if ((v7 & 2) != 0)
      {
LABEL_13:
        unint64_t v21 = *(void *)(v5 - 32);
LABEL_20:
        if (v20 < v21)
        {
          *a2 = v14;
          *a3 = v3;
          uint64_t v22 = *result;
          uint64_t v23 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
          unint64_t v26 = *(void *)(v23 - 16);
          uint64_t v24 = v23 - 16;
          unint64_t v25 = v26;
          unint64_t v27 = (v26 & 2) != 0
              ? *(void *)(*(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32)
              : v24 - 8 * ((v25 >> 2) & 0xF);
          uint64_t v33 = *(void *)(*(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24);
          unint64_t v36 = *(void *)(v33 - 16);
          uint64_t v34 = v33 - 16;
          unint64_t v35 = v36;
          unint64_t v37 = (v36 & 2) != 0
              ? *(void *)(*(void *)(*(void *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24) - 32)
              : v34 - 8 * ((v35 >> 2) & 0xF);
          if (v27 < v37)
          {
            uint64_t *result = *a2;
            *a2 = v22;
          }
        }
        return result;
      }
    }
    unint64_t v21 = v6 - 8 * ((v7 >> 2) & 0xF);
    goto LABEL_20;
  }
  if ((v16 & 2) != 0)
  {
    unint64_t v18 = *(void *)(v15 - 32);
    if ((v7 & 2) != 0) {
      goto LABEL_10;
    }
LABEL_15:
    unint64_t v19 = v6 - 8 * ((v7 >> 2) & 0xF);
    goto LABEL_16;
  }
  unint64_t v18 = v17 - 8 * ((v16 >> 2) & 0xF);
  if ((v7 & 2) == 0) {
    goto LABEL_15;
  }
LABEL_10:
  unint64_t v19 = *(void *)(v5 - 32);
LABEL_16:
  if (v18 < v19)
  {
    uint64_t *result = v14;
LABEL_37:
    *a3 = v4;
    return result;
  }
  uint64_t *result = v3;
  *a2 = v4;
  uint64_t v28 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v31 = *(void *)(v28 - 16);
  uint64_t v29 = v28 - 16;
  unint64_t v30 = v31;
  if ((v31 & 2) != 0) {
    unint64_t v32 = *(void *)(*(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v32 = v29 - 8 * ((v30 >> 2) & 0xF);
  }
  uint64_t v38 = *(void *)(*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v41 = *(void *)(v38 - 16);
  uint64_t v39 = v38 - 16;
  unint64_t v40 = v41;
  if ((v41 & 2) != 0) {
    unint64_t v42 = *(void *)(*(void *)(*(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v42 = v39 - 8 * ((v40 >> 2) & 0xF);
  }
  if (v32 < v42)
  {
    *a2 = *a3;
    goto LABEL_37;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = *(void *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v11 = *(void *)(v8 - 16);
      uint64_t v9 = v8 - 16;
      unint64_t v10 = v11;
      if ((v11 & 2) != 0) {
        unint64_t v12 = *(void *)(*(void *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24) - 32);
      }
      else {
        unint64_t v12 = v9 - 8 * ((v10 >> 2) & 0xF);
      }
      uint64_t v42 = *(void *)(*(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v45 = *(void *)(v42 - 16);
      uint64_t v43 = v42 - 16;
      unint64_t v44 = v45;
      if ((v45 & 2) != 0) {
        unint64_t v46 = *(void *)(*(void *)(*(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)) + 24) - 32);
      }
      else {
        unint64_t v46 = v43 - 8 * ((v44 >> 2) & 0xF);
      }
      if (v12 < v46)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      unint64_t v13 = a1 + 2;
      uint64_t v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v15 = 0;
      uint64_t v16 = 24;
      break;
  }
  while (1)
  {
    uint64_t v17 = *v14;
    uint64_t v18 = *(void *)(*(void *)(*v14 - 32 * (*(_DWORD *)(*v14 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v21 = *(void *)(v18 - 16);
    uint64_t v19 = v18 - 16;
    unint64_t v20 = v21;
    unint64_t v22 = (v21 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(*v14 - 32 * (*(_DWORD *)(*v14 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v19 - 8 * ((v20 >> 2) & 0xF);
    uint64_t v23 = *v13;
    uint64_t v24 = *(void *)(*(void *)(*v13 - 32 * (*(_DWORD *)(*v13 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v27 = *(void *)(v24 - 16);
    uint64_t v25 = v24 - 16;
    unint64_t v26 = v27;
    unint64_t v28 = (v27 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(*v13 - 32 * (*(_DWORD *)(*v13 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v25 - 8 * ((v26 >> 2) & 0xF);
    if (v22 < v28)
    {
      uint64_t v29 = v16;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v29) = v23;
        uint64_t v30 = v29 - 8;
        if (v29 == 8) {
          break;
        }
        uint64_t v31 = *(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v34 = *(void *)(v31 - 16);
        uint64_t v32 = v31 - 16;
        unint64_t v33 = v34;
        if ((v34 & 2) != 0) {
          unint64_t v35 = *(void *)(*(void *)(*(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24) - 32);
        }
        else {
          unint64_t v35 = v32 - 8 * ((v33 >> 2) & 0xF);
        }
        uint64_t v23 = *(uint64_t *)((char *)a1 + v29 - 16);
        uint64_t v36 = *(void *)(*(void *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v39 = *(void *)(v36 - 16);
        uint64_t v37 = v36 - 16;
        unint64_t v38 = v39;
        if ((v39 & 2) != 0) {
          unint64_t v40 = *(void *)(*(void *)(*(void *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)) + 24) - 32);
        }
        else {
          unint64_t v40 = v37 - 8 * ((v38 >> 2) & 0xF);
        }
        v29 -= 8;
        if (v35 >= v40)
        {
          unint64_t v41 = (uint64_t *)((char *)a1 + v30);
          goto LABEL_24;
        }
      }
      unint64_t v41 = a1;
LABEL_24:
      uint64_t *v41 = v17;
      if (++v15 == 8) {
        return v14 + 1 == a2;
      }
    }
    unint64_t v13 = v14;
    v16 += 8;
    if (++v14 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v13 = *(void *)(v10 - 16);
  uint64_t v11 = v10 - 16;
  unint64_t v12 = v13;
  if ((v13 & 2) != 0) {
    unint64_t v14 = *(void *)(*(void *)(*(void *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v14 = v11 - 8 * ((v12 >> 2) & 0xF);
  }
  uint64_t v15 = *(void *)(*(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24);
  unint64_t v18 = *(void *)(v15 - 16);
  uint64_t v16 = v15 - 16;
  unint64_t v17 = v18;
  if ((v18 & 2) != 0) {
    unint64_t v19 = *(void *)(*(void *)(*(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24) - 32);
  }
  else {
    unint64_t v19 = v16 - 8 * ((v17 >> 2) & 0xF);
  }
  if (v14 < v19)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v20 = *a2;
    uint64_t v21 = *(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v24 = *(void *)(v21 - 16);
    uint64_t v22 = v21 - 16;
    unint64_t v23 = v24;
    unint64_t v25 = (v24 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v22 - 8 * ((v23 >> 2) & 0xF);
    uint64_t v26 = *(void *)(*(void *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)) + 24);
    unint64_t v29 = *(void *)(v26 - 16);
    uint64_t v27 = v26 - 16;
    unint64_t v28 = v29;
    unint64_t v30 = (v29 & 2) != 0
        ? *(void *)(*(void *)(*(void *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v27 - 8 * ((v28 >> 2) & 0xF);
    if (v25 < v30)
    {
      *a2 = *a3;
      *a3 = v20;
      uint64_t v31 = *a1;
      uint64_t v32 = *(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v35 = *(void *)(v32 - 16);
      uint64_t v33 = v32 - 16;
      unint64_t v34 = v35;
      if ((v35 & 2) != 0) {
        unint64_t v36 = *(void *)(*(void *)(*(void *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
      }
      else {
        unint64_t v36 = v33 - 8 * ((v34 >> 2) & 0xF);
      }
      uint64_t v37 = *(void *)(*(void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24);
      unint64_t v40 = *(void *)(v37 - 16);
      uint64_t v38 = v37 - 16;
      unint64_t v39 = v40;
      if ((v40 & 2) != 0) {
        unint64_t v41 = *(void *)(*(void *)(*(void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24) - 32);
      }
      else {
        unint64_t v41 = v38 - 8 * ((v39 >> 2) & 0xF);
      }
      if (v36 < v41)
      {
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

void anonymous namespace'::Verifier::visitAliaseeSubExpr(llvm::raw_ostream **a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
  if ((*(_DWORD *)(a3 + 32) & 0xF) == 1)
  {
    if (v8 <= 3 && (*(_DWORD *)(a4 + 32) & 0xF) == 1)
    {
      if (v8 != 1) {
        return;
      }
      goto LABEL_37;
    }
    unint64_t v12 = "available_externally alias must point to available_externally global value";
    goto LABEL_15;
  }
  if (v8 <= 3)
  {
    if ((*(_DWORD *)(a4 + 32) & 0xF) != 1)
    {
      if (*(unsigned char *)(a4 + 16))
      {
        if (v8 == 1)
        {
LABEL_37:
          llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)v19, a2, (void *)a4);
          if (!v20)
          {
            unint64_t v12 = "Aliases cannot form a cycle";
            goto LABEL_15;
          }
          if (llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a4))
          {
            unint64_t v12 = "Alias cannot point to an interposable alias";
            goto LABEL_15;
          }
          unsigned int v8 = *(unsigned __int8 *)(a4 + 16);
          goto LABEL_7;
        }
        if (v8 != 3 || (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) != 0) {
          return;
        }
      }
      else if ((*(_DWORD *)(a4 + 32) & 0x1000000) != 0 || *(void *)(a4 + 72) != a4 + 72)
      {
        return;
      }
    }
    unint64_t v12 = "Alias must point to a definition";
LABEL_15:
    unint64_t v18 = (llvm::Type **)a3;
    v19[0] = v12;
    __int16 v21 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v19, &v18);
    return;
  }
LABEL_7:
  if (v8 == 5) {
  int v9 = *(_DWORD *)(a4 + 20);
  }
  if ((v9 & 0x40000000) == 0)
  {
    uint64_t v10 = v9 & 0x7FFFFFF;
    uint64_t v11 = (uint64_t *)(a4 - 32 * v10);
    if (!v10) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v11 = *(uint64_t **)(a4 - 8);
  uint64_t v10 = v9 & 0x7FFFFFF;
  if (v10)
  {
LABEL_17:
    for (uint64_t i = 32 * v10; i; i -= 32)
    {
      uint64_t v14 = *v11;
      unsigned int v15 = *(unsigned __int8 *)(*v11 + 16);
      if (*v11) {
        BOOL v16 = v15 == 1;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        uint64_t v14 = *(void *)(v14 - 32);
      }
      else
      {
        if (v14) {
          BOOL v17 = v15 > 0x14;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17) {
          goto LABEL_30;
        }
      }
LABEL_30:
      v11 += 4;
    }
  }
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::raw_ostream *this, const llvm::NamedMDNode *a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    llvm::NamedMDNode::print(a2, *(llvm::raw_ostream **)this, (llvm::raw_ostream *)((char *)this + 16), 0);
    this = *(llvm::raw_ostream **)v2;
    uint64_t v3 = *(unsigned char **)(*(void *)v2 + 32);
    if ((unint64_t)v3 >= *(void *)(*(void *)v2 + 24))
    {
      return llvm::raw_ostream::write(this, 10);
    }
    else
    {
      *((void *)this + 4) = v3 + 1;
      *uint64_t v3 = 10;
    }
  }
  return this;
}

void llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type ***a3, uint64_t *a4, llvm::APInt **a5)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3) {
      llvm::VerifierSupport::Write((uint64_t ***)a1, *a3);
    }
    llvm::VerifierSupport::Write((uint64_t)a1, *a4);
    if (*a5)
    {
      int v9 = *a1;
      llvm::APInt::print(*a5, v9, 1);
      uint64_t v10 = (unsigned char *)*((void *)v9 + 4);
      if ((unint64_t)v10 >= *((void *)v9 + 3))
      {
        llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((void *)v9 + 4) = v10 + 1;
        *uint64_t v10 = 10;
      }
    }
  }
}

uint64_t _GLOBAL__sub_I_Verifier_cpp()
{
  int v4 = 1;
  char v2 = 0;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating";
  v1.n128_u64[1] = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_41, "verify-noalias-scope-decl-dom", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_41, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)qword_26B41D858, 0, 0);
  byte_26B41D8D8 = 0;
  qword_26B41D8E0 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41D8E8 = 0;
  qword_26B41D858[0] = (uint64_t)&unk_270DBC910;
  qword_26B41D8F0 = (uint64_t)&unk_270DBC658;
  qword_26B41D8F8 = (uint64_t)&unk_270DBC998;
  qword_26B41D910 = (uint64_t)&qword_26B41D8F8;
  llvm::cl::Option::setArgStr((uint64_t)qword_26B41D858, (uint64_t *)"enable-swifttailcc-musttail-check", 0x21uLL);
  byte_26B41D8D8 = 0;
  word_26B41D8E8 = 256;
  qword_26B41D878 = (uint64_t)"Check that tail calls from swifttailcc functions to swifttailcc functions are marked musttail.";
  unk_26B41D880 = 94;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_26B41D858);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, qword_26B41D858, &dword_261C2B000);
}

const char *llvm::dwarf::TagString(llvm::dwarf *this)
{
  int v1 = (int)this;
  BOOL result = 0;
  if (v1 <= 16895)
  {
    switch(v1)
    {
      case 0:
        BOOL result = "DW_TAG_null";
        break;
      case 1:
        BOOL result = "DW_TAG_array_type";
        break;
      case 2:
        BOOL result = "DW_TAG_class_type";
        break;
      case 3:
        BOOL result = "DW_TAG_entry_point";
        break;
      case 4:
        BOOL result = "DW_TAG_enumeration_type";
        break;
      case 5:
        BOOL result = "DW_TAG_formal_parameter";
        break;
      case 6:
      case 7:
      case 9:
      case 12:
      case 14:
      case 20:
      case 62:
        return result;
      case 8:
        BOOL result = "DW_TAG_imported_declaration";
        break;
      case 10:
        BOOL result = "DW_TAG_label";
        break;
      case 11:
        BOOL result = "DW_TAG_lexical_block";
        break;
      case 13:
        BOOL result = "DW_TAG_member";
        break;
      case 15:
        BOOL result = "DW_TAG_pointer_type";
        break;
      case 16:
        BOOL result = "DW_TAG_reference_type";
        break;
      case 17:
        BOOL result = "DW_TAG_compile_unit";
        break;
      case 18:
        BOOL result = "DW_TAG_string_type";
        break;
      case 19:
        BOOL result = "DW_TAG_structure_type";
        break;
      case 21:
        BOOL result = "DW_TAG_subroutine_type";
        break;
      case 22:
        BOOL result = "DW_TAG_typedef";
        break;
      case 23:
        BOOL result = "DW_TAG_union_type";
        break;
      case 24:
        BOOL result = "DW_TAG_unspecified_parameters";
        break;
      case 25:
        BOOL result = "DW_TAG_variant";
        break;
      case 26:
        BOOL result = "DW_TAG_common_block";
        break;
      case 27:
        BOOL result = "DW_TAG_common_inclusion";
        break;
      case 28:
        BOOL result = "DW_TAG_inheritance";
        break;
      case 29:
        BOOL result = "DW_TAG_inlined_subroutine";
        break;
      case 30:
        BOOL result = "DW_TAG_module";
        break;
      case 31:
        BOOL result = "DW_TAG_ptr_to_member_type";
        break;
      case 32:
        BOOL result = "DW_TAG_set_type";
        break;
      case 33:
        BOOL result = "DW_TAG_subrange_type";
        break;
      case 34:
        BOOL result = "DW_TAG_with_stmt";
        break;
      case 35:
        BOOL result = "DW_TAG_access_declaration";
        break;
      case 36:
        BOOL result = "DW_TAG_base_type";
        break;
      case 37:
        BOOL result = "DW_TAG_catch_block";
        break;
      case 38:
        BOOL result = "DW_TAG_const_type";
        break;
      case 39:
        BOOL result = "DW_TAG_constant";
        break;
      case 40:
        BOOL result = "DW_TAG_enumerator";
        break;
      case 41:
        BOOL result = "DW_TAG_file_type";
        break;
      case 42:
        BOOL result = "DW_TAG_friend";
        break;
      case 43:
        BOOL result = "DW_TAG_namelist";
        break;
      case 44:
        BOOL result = "DW_TAG_namelist_item";
        break;
      case 45:
        BOOL result = "DW_TAG_packed_type";
        break;
      case 46:
        BOOL result = "DW_TAG_subprogram";
        break;
      case 47:
        BOOL result = "DW_TAG_template_type_parameter";
        break;
      case 48:
        BOOL result = "DW_TAG_template_value_parameter";
        break;
      case 49:
        BOOL result = "DW_TAG_thrown_type";
        break;
      case 50:
        BOOL result = "DW_TAG_try_block";
        break;
      case 51:
        BOOL result = "DW_TAG_variant_part";
        break;
      case 52:
        BOOL result = "DW_TAG_variable";
        break;
      case 53:
        BOOL result = "DW_TAG_volatile_type";
        break;
      case 54:
        BOOL result = "DW_TAG_dwarf_procedure";
        break;
      case 55:
        BOOL result = "DW_TAG_restrict_type";
        break;
      case 56:
        BOOL result = "DW_TAG_interface_type";
        break;
      case 57:
        BOOL result = "DW_TAG_namespace";
        break;
      case 58:
        BOOL result = "DW_TAG_imported_module";
        break;
      case 59:
        BOOL result = "DW_TAG_unspecified_type";
        break;
      case 60:
        BOOL result = "DW_TAG_partial_unit";
        break;
      case 61:
        BOOL result = "DW_TAG_imported_unit";
        break;
      case 63:
        BOOL result = "DW_TAG_condition";
        break;
      case 64:
        BOOL result = "DW_TAG_shared_type";
        break;
      case 65:
        BOOL result = "DW_TAG_type_unit";
        break;
      case 66:
        BOOL result = "DW_TAG_rvalue_reference_type";
        break;
      case 67:
        BOOL result = "DW_TAG_template_alias";
        break;
      case 68:
        BOOL result = "DW_TAG_coarray_type";
        break;
      case 69:
        BOOL result = "DW_TAG_generic_subrange";
        break;
      case 70:
        BOOL result = "DW_TAG_dynamic_type";
        break;
      case 71:
        BOOL result = "DW_TAG_atomic_type";
        break;
      case 72:
        BOOL result = "DW_TAG_call_site";
        break;
      case 73:
        BOOL result = "DW_TAG_call_site_parameter";
        break;
      case 74:
        BOOL result = "DW_TAG_skeleton_unit";
        break;
      case 75:
        BOOL result = "DW_TAG_immutable_type";
        break;
      default:
        switch(v1)
        {
          case 16641:
            BOOL result = "DW_TAG_format_label";
            break;
          case 16642:
            BOOL result = "DW_TAG_function_template";
            break;
          case 16643:
            BOOL result = "DW_TAG_class_template";
            break;
          case 16644:
            BOOL result = "DW_TAG_GNU_BINCL";
            break;
          case 16645:
            BOOL result = "DW_TAG_GNU_EINCL";
            break;
          case 16646:
            BOOL result = "DW_TAG_GNU_template_template_param";
            break;
          case 16647:
            BOOL result = "DW_TAG_GNU_template_parameter_pack";
            break;
          case 16648:
            BOOL result = "DW_TAG_GNU_formal_parameter_pack";
            break;
          case 16649:
            BOOL result = "DW_TAG_GNU_call_site";
            break;
          case 16650:
            BOOL result = "DW_TAG_GNU_call_site_parameter";
            break;
          default:
            BOOL v13 = v1 == 16513;
            uint64_t v14 = "DW_TAG_MIPS_loop";
            goto LABEL_55;
        }
        break;
    }
    return result;
  }
  if (v1 <= 20737)
  {
    if (v1 > 17150)
    {
      int v3 = 17151;
      int v4 = "DW_TAG_SUN_hi";
      int v5 = 17152;
      uint64_t v6 = "DW_TAG_LLVM_ptrauth_type";
      BOOL v7 = v1 == 20737;
      unsigned int v8 = "DW_TAG_ALTIUM_circ_type";
LABEL_27:
      if (!v7) {
        unsigned int v8 = 0;
      }
      if (v1 == v5) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v8;
      }
      if (v1 == v3) {
        return v4;
      }
      else {
        return v11;
      }
    }
    switch(v1)
    {
      case 16896:
        BOOL result = "DW_TAG_APPLE_property";
        break;
      case 16897:
        BOOL result = "DW_TAG_SUN_function_template";
        break;
      case 16898:
        BOOL result = "DW_TAG_SUN_class_template";
        break;
      case 16899:
        BOOL result = "DW_TAG_SUN_struct_template";
        break;
      case 16900:
        BOOL result = "DW_TAG_SUN_union_template";
        break;
      case 16901:
        BOOL result = "DW_TAG_SUN_indirect_inheritance";
        break;
      case 16902:
        BOOL result = "DW_TAG_SUN_codeflags";
        break;
      case 16903:
        BOOL result = "DW_TAG_SUN_memop_info";
        break;
      case 16904:
        BOOL result = "DW_TAG_SUN_omp_child_func";
        break;
      case 16905:
        BOOL result = "DW_TAG_SUN_rtti_descriptor";
        break;
      case 16906:
        BOOL result = "DW_TAG_SUN_dtor_info";
        break;
      case 16907:
        BOOL result = "DW_TAG_SUN_dtor";
        break;
      case 16908:
        BOOL result = "DW_TAG_SUN_f90_interface";
        break;
      case 16909:
        BOOL result = "DW_TAG_SUN_fortran_vax_structure";
        break;
      default:
        return result;
    }
  }
  else
  {
    if (v1 <= 34661)
    {
      if (v1 >= 24576)
      {
        switch(v1)
        {
          case 32772:
            BOOL result = "DW_TAG_GHS_namespace";
            break;
          case 32773:
            BOOL result = "DW_TAG_GHS_using_namespace";
            break;
          case 32774:
            BOOL result = "DW_TAG_GHS_using_declaration";
            break;
          case 32775:
            BOOL result = "DW_TAG_GHS_template_templ_param";
            break;
          default:
            unint64_t v12 = "DW_TAG_UPC_shared_type";
            if (v1 != 34661) {
              unint64_t v12 = 0;
            }
            if (v1 == 24576) {
              BOOL result = "DW_TAG_LLVM_annotation";
            }
            else {
              BOOL result = v12;
            }
            break;
        }
        return result;
      }
      int v3 = 20738;
      int v4 = "DW_TAG_ALTIUM_mwa_circ_type";
      int v5 = 20739;
      uint64_t v6 = "DW_TAG_ALTIUM_rev_carry_type";
      BOOL v7 = v1 == 20753;
      unsigned int v8 = "DW_TAG_ALTIUM_rom";
      goto LABEL_27;
    }
    if (v1 <= 40991)
    {
      int v9 = "DW_TAG_PGI_kanji_type";
      if (v1 != 40960) {
        int v9 = 0;
      }
      if (v1 == 34663) {
        uint64_t v10 = "DW_TAG_UPC_relaxed";
      }
      else {
        uint64_t v10 = v9;
      }
      if (v1 == 34662) {
        return "DW_TAG_UPC_strict_type";
      }
      else {
        return v10;
      }
    }
    else
    {
      switch(v1)
      {
        case 45056:
          BOOL result = "DW_TAG_BORLAND_property";
          break;
        case 45057:
          BOOL result = "DW_TAG_BORLAND_Delphi_string";
          break;
        case 45058:
          BOOL result = "DW_TAG_BORLAND_Delphi_dynamic_array";
          break;
        case 45059:
          BOOL result = "DW_TAG_BORLAND_Delphi_set";
          break;
        case 45060:
          BOOL result = "DW_TAG_BORLAND_Delphi_variant";
          break;
        default:
          BOOL v13 = v1 == 40992;
          uint64_t v14 = "DW_TAG_PGI_interface_block";
LABEL_55:
          if (v13) {
            BOOL result = v14;
          }
          else {
            BOOL result = 0;
          }
          break;
      }
    }
  }
  return result;
}

const char *llvm::dwarf::OperationEncodingString(llvm::dwarf *this)
{
  int v1 = (int)this;
  BOOL result = 0;
  switch(v1)
  {
    case 3:
      BOOL result = "DW_OP_addr";
      break;
    case 4:
    case 5:
    case 7:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 231:
    case 233:
    case 234:
    case 235:
    case 236:
    case 239:
    case 241:
    case 242:
    case 244:
    case 245:
    case 246:
    case 247:
    case 249:
    case 250:
      return result;
    case 6:
      BOOL result = "DW_OP_deref";
      break;
    case 8:
      BOOL result = "DW_OP_const1u";
      break;
    case 9:
      BOOL result = "DW_OP_const1s";
      break;
    case 10:
      BOOL result = "DW_OP_const2u";
      break;
    case 11:
      BOOL result = "DW_OP_const2s";
      break;
    case 12:
      BOOL result = "DW_OP_const4u";
      break;
    case 13:
      BOOL result = "DW_OP_const4s";
      break;
    case 14:
      BOOL result = "DW_OP_const8u";
      break;
    case 15:
      BOOL result = "DW_OP_const8s";
      break;
    case 16:
      BOOL result = "DW_OP_constu";
      break;
    case 17:
      BOOL result = "DW_OP_consts";
      break;
    case 18:
      BOOL result = "DW_OP_dup";
      break;
    case 19:
      BOOL result = "DW_OP_drop";
      break;
    case 20:
      BOOL result = "DW_OP_over";
      break;
    case 21:
      BOOL result = "DW_OP_pick";
      break;
    case 22:
      BOOL result = "DW_OP_swap";
      break;
    case 23:
      BOOL result = "DW_OP_rot";
      break;
    case 24:
      BOOL result = "DW_OP_xderef";
      break;
    case 25:
      BOOL result = "DW_OP_abs";
      break;
    case 26:
      BOOL result = "DW_OP_and";
      break;
    case 27:
      BOOL result = "DW_OP_div";
      break;
    case 28:
      BOOL result = "DW_OP_minus";
      break;
    case 29:
      BOOL result = "DW_OP_mod";
      break;
    case 30:
      BOOL result = "DW_OP_mul";
      break;
    case 31:
      BOOL result = "DW_OP_neg";
      break;
    case 32:
      BOOL result = "DW_OP_not";
      break;
    case 33:
      BOOL result = "DW_OP_or";
      break;
    case 34:
      BOOL result = "DW_OP_plus";
      break;
    case 35:
      BOOL result = "DW_OP_plus_uconst";
      break;
    case 36:
      BOOL result = "DW_OP_shl";
      break;
    case 37:
      BOOL result = "DW_OP_shr";
      break;
    case 38:
      BOOL result = "DW_OP_shra";
      break;
    case 39:
      BOOL result = "DW_OP_xor";
      break;
    case 40:
      BOOL result = "DW_OP_bra";
      break;
    case 41:
      BOOL result = "DW_OP_eq";
      break;
    case 42:
      BOOL result = "DW_OP_ge";
      break;
    case 43:
      BOOL result = "DW_OP_gt";
      break;
    case 44:
      BOOL result = "DW_OP_le";
      break;
    case 45:
      BOOL result = "DW_OP_lt";
      break;
    case 46:
      BOOL result = "DW_OP_ne";
      break;
    case 47:
      BOOL result = "DW_OP_skip";
      break;
    case 48:
      BOOL result = "DW_OP_lit0";
      break;
    case 49:
      BOOL result = "DW_OP_lit1";
      break;
    case 50:
      BOOL result = "DW_OP_lit2";
      break;
    case 51:
      BOOL result = "DW_OP_lit3";
      break;
    case 52:
      BOOL result = "DW_OP_lit4";
      break;
    case 53:
      BOOL result = "DW_OP_lit5";
      break;
    case 54:
      BOOL result = "DW_OP_lit6";
      break;
    case 55:
      BOOL result = "DW_OP_lit7";
      break;
    case 56:
      BOOL result = "DW_OP_lit8";
      break;
    case 57:
      BOOL result = "DW_OP_lit9";
      break;
    case 58:
      BOOL result = "DW_OP_lit10";
      break;
    case 59:
      BOOL result = "DW_OP_lit11";
      break;
    case 60:
      BOOL result = "DW_OP_lit12";
      break;
    case 61:
      BOOL result = "DW_OP_lit13";
      break;
    case 62:
      BOOL result = "DW_OP_lit14";
      break;
    case 63:
      BOOL result = "DW_OP_lit15";
      break;
    case 64:
      BOOL result = "DW_OP_lit16";
      break;
    case 65:
      BOOL result = "DW_OP_lit17";
      break;
    case 66:
      BOOL result = "DW_OP_lit18";
      break;
    case 67:
      BOOL result = "DW_OP_lit19";
      break;
    case 68:
      BOOL result = "DW_OP_lit20";
      break;
    case 69:
      BOOL result = "DW_OP_lit21";
      break;
    case 70:
      BOOL result = "DW_OP_lit22";
      break;
    case 71:
      BOOL result = "DW_OP_lit23";
      break;
    case 72:
      BOOL result = "DW_OP_lit24";
      break;
    case 73:
      BOOL result = "DW_OP_lit25";
      break;
    case 74:
      BOOL result = "DW_OP_lit26";
      break;
    case 75:
      BOOL result = "DW_OP_lit27";
      break;
    case 76:
      BOOL result = "DW_OP_lit28";
      break;
    case 77:
      BOOL result = "DW_OP_lit29";
      break;
    case 78:
      BOOL result = "DW_OP_lit30";
      break;
    case 79:
      BOOL result = "DW_OP_lit31";
      break;
    case 80:
      BOOL result = "DW_OP_reg0";
      break;
    case 81:
      BOOL result = "DW_OP_reg1";
      break;
    case 82:
      BOOL result = "DW_OP_reg2";
      break;
    case 83:
      BOOL result = "DW_OP_reg3";
      break;
    case 84:
      BOOL result = "DW_OP_reg4";
      break;
    case 85:
      BOOL result = "DW_OP_reg5";
      break;
    case 86:
      BOOL result = "DW_OP_reg6";
      break;
    case 87:
      BOOL result = "DW_OP_reg7";
      break;
    case 88:
      BOOL result = "DW_OP_reg8";
      break;
    case 89:
      BOOL result = "DW_OP_reg9";
      break;
    case 90:
      BOOL result = "DW_OP_reg10";
      break;
    case 91:
      BOOL result = "DW_OP_reg11";
      break;
    case 92:
      BOOL result = "DW_OP_reg12";
      break;
    case 93:
      BOOL result = "DW_OP_reg13";
      break;
    case 94:
      BOOL result = "DW_OP_reg14";
      break;
    case 95:
      BOOL result = "DW_OP_reg15";
      break;
    case 96:
      BOOL result = "DW_OP_reg16";
      break;
    case 97:
      BOOL result = "DW_OP_reg17";
      break;
    case 98:
      BOOL result = "DW_OP_reg18";
      break;
    case 99:
      BOOL result = "DW_OP_reg19";
      break;
    case 100:
      BOOL result = "DW_OP_reg20";
      break;
    case 101:
      BOOL result = "DW_OP_reg21";
      break;
    case 102:
      BOOL result = "DW_OP_reg22";
      break;
    case 103:
      BOOL result = "DW_OP_reg23";
      break;
    case 104:
      BOOL result = "DW_OP_reg24";
      break;
    case 105:
      BOOL result = "DW_OP_reg25";
      break;
    case 106:
      BOOL result = "DW_OP_reg26";
      break;
    case 107:
      BOOL result = "DW_OP_reg27";
      break;
    case 108:
      BOOL result = "DW_OP_reg28";
      break;
    case 109:
      BOOL result = "DW_OP_reg29";
      break;
    case 110:
      BOOL result = "DW_OP_reg30";
      break;
    case 111:
      BOOL result = "DW_OP_reg31";
      break;
    case 112:
      BOOL result = "DW_OP_breg0";
      break;
    case 113:
      BOOL result = "DW_OP_breg1";
      break;
    case 114:
      BOOL result = "DW_OP_breg2";
      break;
    case 115:
      BOOL result = "DW_OP_breg3";
      break;
    case 116:
      BOOL result = "DW_OP_breg4";
      break;
    case 117:
      BOOL result = "DW_OP_breg5";
      break;
    case 118:
      BOOL result = "DW_OP_breg6";
      break;
    case 119:
      BOOL result = "DW_OP_breg7";
      break;
    case 120:
      BOOL result = "DW_OP_breg8";
      break;
    case 121:
      BOOL result = "DW_OP_breg9";
      break;
    case 122:
      BOOL result = "DW_OP_breg10";
      break;
    case 123:
      BOOL result = "DW_OP_breg11";
      break;
    case 124:
      BOOL result = "DW_OP_breg12";
      break;
    case 125:
      BOOL result = "DW_OP_breg13";
      break;
    case 126:
      BOOL result = "DW_OP_breg14";
      break;
    case 127:
      BOOL result = "DW_OP_breg15";
      break;
    case 128:
      BOOL result = "DW_OP_breg16";
      break;
    case 129:
      BOOL result = "DW_OP_breg17";
      break;
    case 130:
      BOOL result = "DW_OP_breg18";
      break;
    case 131:
      BOOL result = "DW_OP_breg19";
      break;
    case 132:
      BOOL result = "DW_OP_breg20";
      break;
    case 133:
      BOOL result = "DW_OP_breg21";
      break;
    case 134:
      BOOL result = "DW_OP_breg22";
      break;
    case 135:
      BOOL result = "DW_OP_breg23";
      break;
    case 136:
      BOOL result = "DW_OP_breg24";
      break;
    case 137:
      BOOL result = "DW_OP_breg25";
      break;
    case 138:
      BOOL result = "DW_OP_breg26";
      break;
    case 139:
      BOOL result = "DW_OP_breg27";
      break;
    case 140:
      BOOL result = "DW_OP_breg28";
      break;
    case 141:
      BOOL result = "DW_OP_breg29";
      break;
    case 142:
      BOOL result = "DW_OP_breg30";
      break;
    case 143:
      BOOL result = "DW_OP_breg31";
      break;
    case 144:
      BOOL result = "DW_OP_regx";
      break;
    case 145:
      BOOL result = "DW_OP_fbreg";
      break;
    case 146:
      BOOL result = "DW_OP_bregx";
      break;
    case 147:
      BOOL result = "DW_OP_piece";
      break;
    case 148:
      BOOL result = "DW_OP_deref_size";
      break;
    case 149:
      BOOL result = "DW_OP_xderef_size";
      break;
    case 150:
      BOOL result = "DW_OP_nop";
      break;
    case 151:
      BOOL result = "DW_OP_push_object_address";
      break;
    case 152:
      BOOL result = "DW_OP_call2";
      break;
    case 153:
      BOOL result = "DW_OP_call4";
      break;
    case 154:
      BOOL result = "DW_OP_call_ref";
      break;
    case 155:
      BOOL result = "DW_OP_form_tls_address";
      break;
    case 156:
      BOOL result = "DW_OP_call_frame_cfa";
      break;
    case 157:
      BOOL result = "DW_OP_bit_piece";
      break;
    case 158:
      BOOL result = "DW_OP_implicit_value";
      break;
    case 159:
      BOOL result = "DW_OP_stack_value";
      break;
    case 160:
      BOOL result = "DW_OP_implicit_pointer";
      break;
    case 161:
      BOOL result = "DW_OP_addrx";
      break;
    case 162:
      BOOL result = "DW_OP_constx";
      break;
    case 163:
      BOOL result = "DW_OP_entry_value";
      break;
    case 164:
      BOOL result = "DW_OP_const_type";
      break;
    case 165:
      BOOL result = "DW_OP_regval_type";
      break;
    case 166:
      BOOL result = "DW_OP_deref_type";
      break;
    case 167:
      BOOL result = "DW_OP_xderef_type";
      break;
    case 168:
      BOOL result = "DW_OP_convert";
      break;
    case 169:
      BOOL result = "DW_OP_reinterpret";
      break;
    case 224:
      BOOL result = "DW_OP_GNU_push_tls_address";
      break;
    case 225:
      BOOL result = "DW_OP_HP_is_value";
      break;
    case 226:
      BOOL result = "DW_OP_HP_fltconst4";
      break;
    case 227:
      BOOL result = "DW_OP_HP_fltconst8";
      break;
    case 228:
      BOOL result = "DW_OP_HP_mod_range";
      break;
    case 229:
      BOOL result = "DW_OP_HP_unmod_range";
      break;
    case 230:
      BOOL result = "DW_OP_HP_tls";
      break;
    case 232:
      BOOL result = "DW_OP_INTEL_bit_piece";
      break;
    case 237:
      BOOL result = "DW_OP_WASM_location";
      break;
    case 238:
      BOOL result = "DW_OP_WASM_location_int";
      break;
    case 240:
      BOOL result = "DW_OP_APPLE_uninit";
      break;
    case 243:
      BOOL result = "DW_OP_GNU_entry_value";
      break;
    case 248:
      BOOL result = "DW_OP_PGI_omp_thread_num";
      break;
    case 251:
      BOOL result = "DW_OP_GNU_addr_index";
      break;
    case 252:
      BOOL result = "DW_OP_GNU_const_index";
      break;
    default:
      switch(v1)
      {
        case 4096:
          BOOL result = "DW_OP_LLVM_fragment";
          break;
        case 4097:
          BOOL result = "DW_OP_LLVM_convert";
          break;
        case 4098:
          BOOL result = "DW_OP_LLVM_tag_offset";
          break;
        case 4099:
          BOOL result = "DW_OP_LLVM_entry_value";
          break;
        case 4100:
          BOOL result = "DW_OP_LLVM_implicit_pointer";
          break;
        case 4101:
          BOOL result = "DW_OP_LLVM_arg";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

const char *llvm::dwarf::AttributeEncodingString(llvm::dwarf *this)
{
  switch((int)this)
  {
    case 1:
      BOOL result = "DW_ATE_address";
      break;
    case 2:
      BOOL result = "DW_ATE_BOOLean";
      break;
    case 3:
      BOOL result = "DW_ATE_complex_float";
      break;
    case 4:
      BOOL result = "DW_ATE_float";
      break;
    case 5:
      BOOL result = "DW_ATE_signed";
      break;
    case 6:
      BOOL result = "DW_ATE_signed_char";
      break;
    case 7:
      BOOL result = "DW_ATE_unsigned";
      break;
    case 8:
      BOOL result = "DW_ATE_unsigned_char";
      break;
    case 9:
      BOOL result = "DW_ATE_imaginary_float";
      break;
    case 10:
      BOOL result = "DW_ATE_packed_decimal";
      break;
    case 11:
      BOOL result = "DW_ATE_numeric_string";
      break;
    case 12:
      BOOL result = "DW_ATE_edited";
      break;
    case 13:
      BOOL result = "DW_ATE_signed_fixed";
      break;
    case 14:
      BOOL result = "DW_ATE_unsigned_fixed";
      break;
    case 15:
      BOOL result = "DW_ATE_decimal_float";
      break;
    case 16:
      BOOL result = "DW_ATE_UTF";
      break;
    case 17:
      BOOL result = "DW_ATE_UCS";
      break;
    case 18:
      BOOL result = "DW_ATE_ASCII";
      break;
    default:
      switch((int)this)
      {
        case 129:
          BOOL result = "DW_ATE_HP_complex_float";
          break;
        case 130:
          BOOL result = "DW_ATE_HP_float128";
          break;
        case 131:
          BOOL result = "DW_ATE_HP_complex_float128";
          break;
        case 132:
          BOOL result = "DW_ATE_HP_floathpintel";
          break;
        case 133:
          BOOL result = "DW_ATE_HP_imaginary_float90";
          break;
        case 134:
          BOOL result = "DW_ATE_HP_imaginary_float128";
          break;
        default:
          BOOL result = 0;
          break;
      }
      break;
  }
  return result;
}

const char *llvm::dwarf::LanguageString(llvm::dwarf *this)
{
  int v1 = (int)this;
  BOOL result = 0;
  if (v1 > 0x8000)
  {
    int v3 = "DW_LANG_BORLAND_Delphi";
    if (v1 != 45056) {
      int v3 = 0;
    }
    if (v1 == 36439) {
      int v4 = "DW_LANG_GOOGLE_RenderScript";
    }
    else {
      int v4 = v3;
    }
    if (v1 == 32769) {
      return "DW_LANG_Mips_Assembler";
    }
    else {
      return v4;
    }
  }
  else
  {
    switch(v1)
    {
      case 1:
        BOOL result = "DW_LANG_C89";
        break;
      case 2:
        BOOL result = "DW_LANG_C";
        break;
      case 3:
        BOOL result = "DW_LANG_Ada83";
        break;
      case 4:
        BOOL result = "DW_LANG_C_plus_plus";
        break;
      case 5:
        BOOL result = "DW_LANG_Cobol74";
        break;
      case 6:
        BOOL result = "DW_LANG_Cobol85";
        break;
      case 7:
        BOOL result = "DW_LANG_Fortran77";
        break;
      case 8:
        BOOL result = "DW_LANG_Fortran90";
        break;
      case 9:
        BOOL result = "DW_LANG_Pascal83";
        break;
      case 10:
        BOOL result = "DW_LANG_Modula2";
        break;
      case 11:
        BOOL result = "DW_LANG_Java";
        break;
      case 12:
        BOOL result = "DW_LANG_C99";
        break;
      case 13:
        BOOL result = "DW_LANG_Ada95";
        break;
      case 14:
        BOOL result = "DW_LANG_Fortran95";
        break;
      case 15:
        BOOL result = "DW_LANG_PLI";
        break;
      case 16:
        BOOL result = "DW_LANG_ObjC";
        break;
      case 17:
        BOOL result = "DW_LANG_ObjC_plus_plus";
        break;
      case 18:
        BOOL result = "DW_LANG_UPC";
        break;
      case 19:
        BOOL result = "DW_LANG_D";
        break;
      case 20:
        BOOL result = "DW_LANG_Python";
        break;
      case 21:
        BOOL result = "DW_LANG_OpenCL";
        break;
      case 22:
        BOOL result = "DW_LANG_Go";
        break;
      case 23:
        BOOL result = "DW_LANG_Modula3";
        break;
      case 24:
        BOOL result = "DW_LANG_Haskell";
        break;
      case 25:
        BOOL result = "DW_LANG_C_plus_plus_03";
        break;
      case 26:
        BOOL result = "DW_LANG_C_plus_plus_11";
        break;
      case 27:
        BOOL result = "DW_LANG_OCaml";
        break;
      case 28:
        BOOL result = "DW_LANG_Rust";
        break;
      case 29:
        BOOL result = "DW_LANG_C11";
        break;
      case 30:
        BOOL result = "DW_LANG_Swift";
        break;
      case 31:
        BOOL result = "DW_LANG_Julia";
        break;
      case 32:
        BOOL result = "DW_LANG_Dylan";
        break;
      case 33:
        BOOL result = "DW_LANG_C_plus_plus_14";
        break;
      case 34:
        BOOL result = "DW_LANG_Fortran03";
        break;
      case 35:
        BOOL result = "DW_LANG_Fortran08";
        break;
      case 36:
        BOOL result = "DW_LANG_RenderScript";
        break;
      case 37:
        BOOL result = "DW_LANG_BLISS";
        break;
      case 38:
        BOOL result = "DW_LANG_Kotlin";
        break;
      case 39:
        BOOL result = "DW_LANG_Zig";
        break;
      case 40:
        BOOL result = "DW_LANG_Crystal";
        break;
      case 42:
        BOOL result = "DW_LANG_C_plus_plus_17";
        break;
      case 43:
        BOOL result = "DW_LANG_C_plus_plus_20";
        break;
      case 44:
        BOOL result = "DW_LANG_C17";
        break;
      case 45:
        BOOL result = "DW_LANG_Fortran18";
        break;
      case 46:
        BOOL result = "DW_LANG_Ada2005";
        break;
      case 47:
        BOOL result = "DW_LANG_Ada2012";
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *llvm::dwarf::ConventionString(llvm::dwarf *this)
{
  if ((int)this <= 175)
  {
    switch((int)this)
    {
      case 1:
        BOOL result = "DW_CC_normal";
        break;
      case 2:
        BOOL result = "DW_CC_program";
        break;
      case 3:
        BOOL result = "DW_CC_nocall";
        break;
      case 4:
        BOOL result = "DW_CC_pass_by_reference";
        break;
      case 5:
        BOOL result = "DW_CC_pass_by_value";
        break;
      default:
        int v3 = "DW_CC_GNU_borland_fastcall_i386";
        if (this != 65) {
          int v3 = 0;
        }
        if (this == 64) {
          BOOL result = "DW_CC_GNU_renesas_sh";
        }
        else {
          BOOL result = v3;
        }
        break;
    }
  }
  else
  {
    int v1 = this - 176;
    BOOL result = 0;
    switch(v1)
    {
      case 0:
        BOOL result = "DW_CC_BORLAND_safecall";
        break;
      case 1:
        BOOL result = "DW_CC_BORLAND_stdcall";
        break;
      case 2:
        BOOL result = "DW_CC_BORLAND_pascal";
        break;
      case 3:
        BOOL result = "DW_CC_BORLAND_msfastcall";
        break;
      case 4:
        BOOL result = "DW_CC_BORLAND_msreturn";
        break;
      case 5:
        BOOL result = "DW_CC_BORLAND_thiscall";
        break;
      case 6:
        BOOL result = "DW_CC_BORLAND_fastcall";
        break;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        return result;
      case 16:
        BOOL result = "DW_CC_LLVM_vectorcall";
        break;
      case 17:
        BOOL result = "DW_CC_LLVM_Win64";
        break;
      case 18:
        BOOL result = "DW_CC_LLVM_X86_64SysV";
        break;
      case 19:
        BOOL result = "DW_CC_LLVM_AAPCS";
        break;
      case 20:
        BOOL result = "DW_CC_LLVM_AAPCS_VFP";
        break;
      case 21:
        BOOL result = "DW_CC_LLVM_IntelOclBicc";
        break;
      case 22:
        BOOL result = "DW_CC_LLVM_SpirFunction";
        break;
      case 23:
        BOOL result = "DW_CC_LLVM_OpenCLKernel";
        break;
      case 24:
        BOOL result = "DW_CC_LLVM_Swift";
        break;
      case 25:
        BOOL result = "DW_CC_LLVM_PreserveMost";
        break;
      case 26:
        BOOL result = "DW_CC_LLVM_PreserveAll";
        break;
      case 27:
        BOOL result = "DW_CC_LLVM_X86RegCall";
        break;
      case 28:
        BOOL result = "DW_CC_LLVM_SwiftTail";
        break;
      default:
        BOOL result = 0;
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::MacinfoString(llvm::dwarf *this)
{
  int v1 = this + 1;
  BOOL result = 0;
  switch(v1)
  {
    case 0:
      BOOL result = "DW_MACINFO_invalid";
      break;
    case 1:
      return result;
    case 2:
      BOOL result = "DW_MACINFO_define";
      break;
    case 3:
      BOOL result = "DW_MACINFO_undef";
      break;
    case 4:
      BOOL result = "DW_MACINFO_start_file";
      break;
    case 5:
      BOOL result = "DW_MACINFO_end_file";
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 < 4) {
    return 0;
  }
  unsigned int v4 = *a1;
  if (v4 > 0x65)
  {
    if (*a1 > 0xC3u)
    {
      if (*a1 > 0xDDu)
      {
        if (v4 == 222)
        {
          int v18 = *(_DWORD *)a1;
          int v19 = 186106078;
          return v18 == v19;
        }
        if (v4 == 240) {
          goto LABEL_78;
        }
        if (v4 != 254) {
          return 0;
        }
      }
      else if (v4 - 206 >= 2)
      {
        if (v4 != 196)
        {
          if (v4 == 202)
          {
            if (*(_DWORD *)a1 == -1095041334)
            {
              if (a2 < 8) {
                return 0;
              }
            }
            else if (a2 < 8 || *(_DWORD *)a1 != -1078264118)
            {
              return 0;
            }
            if ((char)a1[7] < 43) {
              return 20;
            }
          }
          return 0;
        }
LABEL_79:
        if (a1[1] == 1) {
          return 24;
        }
        goto LABEL_80;
      }
      if (*(_DWORD *)a1 == -822415874 || *(_DWORD *)a1 == -805638658)
      {
        unint64_t v16 = 32;
        if (a1[3] == 206) {
          unint64_t v16 = 28;
        }
        if (a2 < v16) {
          return 0;
        }
        uint64_t v9 = 15;
        uint64_t v10 = 14;
        uint64_t v11 = 13;
      }
      else
      {
        if (*(_DWORD *)a1 != -17958194 && *(_DWORD *)a1 != -17958193) {
          return 0;
        }
        BOOL v12 = v4 == 206;
        unint64_t v8 = 32;
        if (v12) {
          unint64_t v8 = 28;
        }
        if (a2 < v8) {
          return 0;
        }
        uint64_t v9 = 12;
        uint64_t v10 = 13;
        uint64_t v11 = 14;
      }
      unsigned __int16 v17 = ((a1[v10] << 8) | (a1[v11] << 12) | (char)a1[v9]) - 1;
      if (v17 < 0xCu) {
        return dword_261EA7258[(__int16)v17];
      }
      return 0;
    }
    if (*a1 > 0x7Eu)
    {
      if (v4 - 131 < 2) {
        goto LABEL_78;
      }
      if (v4 == 127)
      {
        if (a2 < 0x12 || *(_DWORD *)a1 != 1179403647) {
          return 0;
        }
        int v21 = a1[5];
        uint64_t v22 = 16;
        if (v21 != 2) {
          uint64_t v22 = 17;
        }
        int v23 = a1[v22];
        uint64_t v2 = 3;
        if (!v23)
        {
          BOOL v12 = v21 == 2;
          uint64_t v24 = 16;
          if (v12) {
            uint64_t v24 = 17;
          }
          int v25 = (char)a1[v24];
          unsigned int v26 = v25 - 1;
          unsigned int v27 = v25 + 3;
          if (v26 >= 4) {
            return 3;
          }
          else {
            return v27;
          }
        }
        return v2;
      }
      if (v4 != 144) {
        return 0;
      }
    }
    else
    {
      if (v4 == 102) {
        goto LABEL_78;
      }
      if (v4 != 104)
      {
        if (v4 != 123) {
          return 0;
        }
        return 32;
      }
    }
LABEL_80:
    if (a1[1] != 2) {
      return 0;
    }
    return 24;
  }
  if (*a1 > 0x3Bu)
  {
    if (*a1 <= 0x4Bu)
    {
      switch(*a1)
      {
        case '<':
          if (a2 < 8) {
            return 0;
          }
          uint64_t v5 = *(void *)a1;
          uint64_t v6 = 0x66616769623CLL;
          goto LABEL_114;
        case 'A':
          if (a1[1] == 166) {
            return 24;
          }
          return 0;
        case 'B':
          int v18 = *(_DWORD *)a1;
          int v19 = -557825214;
          return v18 == v19;
        case 'D':
          if (*(_DWORD *)a1 != 1128421444) {
            return 0;
          }
          return 35;
        default:
          return 0;
      }
    }
    if (*a1 <= 0x4Fu)
    {
      if (v4 != 76)
      {
        if (v4 == 77)
        {
          if (a2 >= 0x40 && *(_WORD *)a1 == 23117)
          {
            unint64_t v7 = *((unsigned int *)a1 + 15);
            if (a2 < v7) {
              unint64_t v7 = a2;
            }
            if (a2 - v7 >= 4 && *(_DWORD *)&a1[v7] == 17744) {
              return 26;
            }
          }
          else if (a2 < 0x1A)
          {
            goto LABEL_137;
          }
          if (*(void *)a1 == 0x666F736F7263694DLL
            && *((void *)a1 + 1) == 0x202B2B432F432074
            && *((void *)a1 + 2) == 0x30302E372046534DLL
            && *((_WORD *)a1 + 12) == 2573)
          {
            return 31;
          }
LABEL_137:
          if (*(_DWORD *)a1 == 1347241037) {
            return 22;
          }
          return 0;
        }
        return 0;
      }
      goto LABEL_79;
    }
    if (v4 != 80)
    {
      if (v4 != 100) {
        return 0;
      }
      int v14 = a1[1];
      if (v14 == 170 || v14 == 134) {
        return 24;
      }
      else {
        return 0;
      }
    }
LABEL_78:
    if (*(_DWORD *)a1 == -1168773808) {
      return 33;
    }
    goto LABEL_79;
  }
  if (*a1 > 0xFu)
  {
    if (v4 == 16)
    {
      if (*(_DWORD *)a1 == -1391395056) {
        return 34;
      }
      return 0;
    }
    if (v4 == 33)
    {
      if (a2 >= 8)
      {
        if (*(void *)a1 == 0xA3E686372613C21) {
          return 2;
        }
        uint64_t v5 = *(void *)a1;
        uint64_t v6 = 0x6E6968743C21;
LABEL_114:
        if (v5 == (v6 & 0xFFFFFFFFFFFFLL | 0xA3E000000000000)) {
          return 2;
        }
      }
      return 0;
    }
    if (v4 != 45 || a2 < 9) {
      return 0;
    }
    BOOL v12 = *(void *)a1 == 0x70617421202D2D2DLL && a1[8] == 105;
    if (!v12)
    {
      if (a2 < 0xA) {
        return 0;
      }
      if (*(void *)a1 != 0x686372610A2D2D2DLL || *((_WORD *)a1 + 4) != 14963) {
        return 0;
      }
    }
    return 32;
  }
  if (*a1)
  {
    if (v4 == 1)
    {
      if (*(unsigned __int16 *)a1 == 57089) {
        return 28;
      }
      if (*(__int16 *)a1 == -2303) {
        return 29;
      }
    }
    else if (v4 == 3 && !(*(unsigned __int16 *)a1 ^ 0xF003 | a1[2]))
    {
      return 8;
    }
    return 0;
  }
  if (*(_DWORD *)a1 != -65536)
  {
    if (a2 >= 0x10 && *(void *)a1 == 0x2000000000 && *((void *)a1 + 1) == 0xFFFF0000FFFFLL) {
      return 27;
    }
    if (a1[1])
    {
      if (*(_DWORD *)a1 == 1836278016) {
        return 30;
      }
      return 0;
    }
    return 24;
  }
  if (a2 < 0x1C) {
    return 25;
  }
  if (*(void *)(a1 + 12) == 0x4BA9BAEED1BAA1C7 && *(void *)(a1 + 20) == 0xB8DCA46AF6FA20AFLL) {
    return 24;
  }
  if (*(void *)(a1 + 12) ^ 0x4DABD9A50CB3FE38 | *(void *)(a1 + 20) ^ 0xC2532622B6D69BACLL) {
    return 25;
  }
  else {
    return 23;
  }
}

char *llvm::wasm::sectionTypeToString(llvm::wasm *this)
{
  return off_2655AE680[(int)this];
}

const char *llvm::XCOFF::getMappingClassString(unsigned int a1)
{
  if (a1 > 0x16) {
    return "Unknown";
  }
  else {
    return off_2655AE6F0[(char)a1];
  }
}

const char *llvm::XCOFF::getRelocationTypeString(unsigned int a1)
{
  if (a1 > 0x31) {
    return "Unknown";
  }
  else {
    return off_2655AE7A8[(char)a1];
  }
}

uint64_t _GLOBAL__sub_I_RemarkStreamer_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&EnableRemarksSection, 0, 0);
  dword_26B41E150 = 0;
  qword_26B41E158 = (uint64_t)&unk_270DBC618;
  *(void *)&dword_26B41E160 = 0;
  EnableRemarksSection = (uint64_t)&unk_270DBD1E0;
  qword_26B41E168 = (uint64_t)&unk_270DBC688;
  qword_26B41E170 = (uint64_t)&unk_270DBD248;
  qword_26B41E188 = (uint64_t)&qword_26B41E170;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"remarks-section", 0xFuLL);
  qword_26B41E0F0 = (uint64_t)"Emit a section containing remark diagnostics metadata. By default, this is enabled for the "
                             "following formats: yaml-strtab, bitstream.";
  unk_26B41E0F8 = 133;
  dword_26B41E150 = 0;
  byte_26B41E164 = 1;
  dword_26B41E160 = 0;
  word_26B41E0DA = word_26B41E0DA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableRemarksSection);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt, &EnableRemarksSection, &dword_261C2B000);
}

void **llvm::BitstreamCursor::EnterSubBlock@<X0>(llvm::BitstreamCursor *this@<X0>, unsigned int *a2@<X2>, int a3@<W1>, void ***a4@<X8>)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v9 = (unint64_t *)((char *)this + 64);
  unint64_t v8 = *((void *)this + 8);
  LODWORD(v57) = *((_DWORD *)this + 9);
  uint64_t v10 = &v57;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v58 = 0;
  uint64_t v11 = *((unsigned int *)this + 18);
  if (v11 >= *((_DWORD *)this + 19))
  {
    unint64_t v54 = v11 + 1;
    BOOL v55 = v8 + 32 * v11 > (unint64_t)&v57;
    if (v8 <= (unint64_t)&v57 && v55)
    {
      unint64_t v56 = (char *)&v57 - v8;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v54);
      unint64_t v8 = *v9;
      uint64_t v10 = (uint64_t *)&v56[*v9];
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v54);
      unint64_t v8 = *v9;
      uint64_t v10 = &v57;
    }
  }
  uint64_t v12 = v8 + 32 * *((unsigned int *)this + 18);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v10;
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 8) = 0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v10 + 1);
  *(void *)(v12 + 24) = v10[3];
  v10[1] = 0;
  _OWORD v10[2] = 0;
  uint64_t v10[3] = 0;
  ++*((_DWORD *)this + 18);
  unint64_t v69 = (void **)&v58;
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v69);
  uint64_t v13 = *((void *)this + 8) + 32 * *((unsigned int *)this + 18);
  uint64_t v14 = *(void *)(v13 - 24);
  *(void *)(v13 - 24) = *((void *)this + 5);
  *((void *)this + 5) = v14;
  uint64_t v15 = *(void *)(v13 - 16);
  *(void *)(v13 - 16) = *((void *)this + 6);
  *((void *)this + 6) = v15;
  uint64_t v16 = *(void *)(v13 - 8);
  *(void *)(v13 - 8) = *((void *)this + 7);
  *((void *)this + 7) = v16;
  unsigned __int16 v17 = (uint64_t *)*((void *)this + 42);
  if (v17)
  {
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    if (*v17 != v18)
    {
      uint64_t v20 = v18 - 80;
      if (*(_DWORD *)(v18 - 80) != a3)
      {
        uint64_t v20 = v19;
        while (*(_DWORD *)v20 != a3)
        {
          v20 += 80;
          if (v20 == v18) {
            goto LABEL_41;
          }
        }
      }
      uint64_t v22 = *(char **)(v20 + 8);
      int v21 = *(char **)(v20 + 16);
      if (v21 - v22 >= 1)
      {
        int v23 = (std::error_category_vtbl **)*((void *)this + 6);
        uint64_t v24 = (v21 - v22) >> 4;
        if (v24 <= (v16 - (uint64_t)v23) >> 4)
        {
          if (v24 <= 0)
          {
            unint64_t v35 = &v22[16 * v24];
            std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__move_range((uint64_t)this + 40, *((void **)this + 6), *((void *)this + 6), (uint64_t)&v23[2 * v24]);
            for (; v22 != v35; v23 += 2)
            {
              unint64_t v40 = *(std::error_category_vtbl **)v22;
              uint64_t v39 = *((void *)v22 + 1);
              if (v39) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v41 = (std::__shared_weak_count *)v23[1];
              *int v23 = v40;
              v23[1] = (std::error_category_vtbl *)v39;
              if (v41) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v41);
              }
              v22 += 16;
            }
          }
          else
          {
            if (v22 == v21)
            {
              uint64_t v31 = (void *)*((void *)this + 6);
            }
            else
            {
              uint64_t v31 = (void *)*((void *)this + 6);
              uint64_t v32 = v22;
              uint64_t v33 = v31;
              do
              {
                *uint64_t v33 = *(void *)v32;
                uint64_t v34 = *((void *)v32 + 1);
                v33[1] = v34;
                if (v34) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
                }
                v31 += 2;
                v32 += 16;
                v33 += 2;
              }
              while (v32 != v21);
            }
            *((void *)this + 6) = v31;
          }
        }
        else
        {
          uint64_t v25 = *((void *)this + 5);
          uint64_t v26 = ((uint64_t)v23 - v25) >> 4;
          if ((unint64_t)(v26 + v24) >> 60) {
            abort();
          }
          uint64_t v27 = v16 - v25;
          uint64_t v28 = v27 >> 3;
          if (v27 >> 3 <= (unint64_t)(v26 + v24)) {
            uint64_t v28 = v26 + v24;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          unint64_t v61 = (char *)this + 56;
          if (v29) {
            unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)this + 56, v29);
          }
          else {
            unint64_t v30 = 0;
          }
          unint64_t v36 = (std::error_category *)&v30[16 * v26];
          uint64_t v57 = (uint64_t)v30;
          unint64_t v58 = v36;
          uint64_t v60 = &v30[16 * v29];
          uint64_t v37 = &v36[2 * v24];
          do
          {
            v36->__vftable = *(std::error_category_vtbl **)v22;
            uint64_t v38 = *((void *)v22 + 1);
            v36[1].__vftable = (std::error_category_vtbl *)v38;
            if (v38) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
            }
            v36 += 2;
            v22 += 16;
          }
          while (v36 != v37);
          uint64_t v59 = v37;
          std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__swap_out_circular_buffer((void *)this + 5, &v57, v23);
          std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((void **)&v57);
        }
      }
    }
  }
LABEL_41:
  BOOL result = (void **)llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v67);
  if (v68)
  {
    unint64_t v45 = v67;
    uint64_t v67 = 0;
    *a4 = v45;
    goto LABEL_62;
  }
  unsigned int v43 = v67;
  *((_DWORD *)this + 9) = v67;
  if (v43 >= 0x21)
  {
    unint64_t v44 = std::generic_category();
    __p[3] = (void *)92;
    __p[4] = (void *)v44;
    memset(__p, 0, 24);
    LODWORD(v58) = 0;
    char v62 = 0;
    uint64_t v63 = 0;
    int v64 = 1;
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = (uint64_t)&unk_270DBD6E0;
    BOOL v65 = __p;
    llvm::raw_ostream::SetUnbuffered(&v57);
    unint64_t v69 = (void **)&unk_270DC3510;
    unint64_t v70 = "can't read more than %zu at a time, trying to read %u";
    uint64_t v71 = 32;
    int v72 = *((_DWORD *)this + 9);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v57, (uint64_t)&v69);
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  unsigned int v46 = *((_DWORD *)this + 8);
  BOOL v47 = v46 >= 0x20;
  char v48 = v46 - 32;
  if (v47)
  {
    *((void *)this + 3) >>= v48;
    int v49 = 32;
  }
  else
  {
    int v49 = 0;
  }
  *((_DWORD *)this + 8) = v49;
  BOOL result = (void **)llvm::SimpleBitstreamCursor::Read((uint64_t)this, 0x20u, (uint64_t)&v69);
  if (v70)
  {
    uint64_t v50 = v69;
    unint64_t v69 = 0;
    *a4 = v50;
    goto LABEL_59;
  }
  if (a2) {
    *a2 = v69;
  }
  if (!*((_DWORD *)this + 9))
  {
    uint64_t v51 = std::generic_category();
    uint64_t v57 = 92;
    unint64_t v58 = v51;
    unint64_t v52 = "can't enter sub-block: current code size is 0";
    goto LABEL_58;
  }
  if (!*((_DWORD *)this + 8) && *((void *)this + 1) <= *((void *)this + 2))
  {
    unint64_t v53 = std::generic_category();
    uint64_t v57 = 92;
    unint64_t v58 = v53;
    unint64_t v52 = "can't enter sub block: already at end of stream";
LABEL_58:
    __p[0] = (void *)v52;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  *a4 = 0;
LABEL_59:
  if (v70)
  {
    BOOL result = v69;
    unint64_t v69 = 0;
    if (result) {
      BOOL result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    }
  }
LABEL_62:
  if (v68)
  {
    BOOL result = v67;
    uint64_t v67 = 0;
    if (result) {
      return (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    }
  }
  return result;
}

const char *llvm::BitstreamCursor::skipRecord@<X0>(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (a2 != 3)
  {
    BOOL result = (const char *)llvm::BitstreamCursor::getAbbrev((uint64_t)&v42, *((void *)this + 5), *((void *)this + 6), a2);
    uint64_t v8 = v42;
    if (v43)
    {
      *(unsigned char *)(a3 + 8) |= 1u;
      *(void *)a3 = v8;
      return result;
    }
    uint64_t v9 = *(uint64_t **)v42;
    unsigned int v10 = *(unsigned __int8 *)(*(void *)v42 + 8);
    if (v10)
    {
      uint64_t v15 = *v9;
    }
    else
    {
      int v11 = (v10 >> 1) & 7;
      if (v11 == 5 || v11 == 3)
      {
        uint64_t v13 = std::generic_category();
        uint64_t v44 = 92;
        unint64_t v45 = v13;
        unint64_t v40 = "Abbreviation starts with an Array or a Blob";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      BOOL result = (const char *)readAbbreviatedField((llvm::SimpleBitstreamCursor *)&v44, this, *v9, v10);
      if (v45) {
        goto LABEL_66;
      }
      LODWORD(v15) = v44;
    }
    unsigned int v16 = *(_DWORD *)(v8 + 8);
    if (v16 <= 1)
    {
      LOBYTE(v17) = *(unsigned char *)(a3 + 8);
      goto LABEL_63;
    }
    int v17 = *(unsigned __int8 *)(a3 + 8);
    unsigned int v18 = 1;
    while (1)
    {
      uint64_t v19 = *(void *)v8 + 16 * v18;
      unsigned int v20 = *(unsigned __int8 *)(v19 + 8);
      if (v20) {
        goto LABEL_60;
      }
      int v21 = (v20 >> 1) & 7;
      if (v21 == 3) {
        break;
      }
      if (v21 == 5)
      {
        BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v44);
        if (v45) {
          goto LABEL_38;
        }
        unsigned int v22 = *((_DWORD *)this + 8);
        BOOL v23 = v22 >= 0x20;
        char v24 = v22 - 32;
        if (v23)
        {
          *((void *)this + 3) >>= v24;
          uint64_t v31 = 32;
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = v44;
        *((_DWORD *)this + 8) = v31;
        uint64_t v33 = ((8 * v32 + 24) & 0xFFFFFFFE0) - v31;
        unint64_t v34 = *((void *)this + 1);
        unint64_t v35 = v33 + 8 * *((void *)this + 2);
        if (v34 >= v35 >> 3)
        {
          BOOL result = (const char *)llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this, v35, &v40);
          unint64_t v36 = v40;
          if (v40)
          {
            v17 |= 1u;
            *(unsigned char *)(a3 + 8) = v17;
            *(void *)a3 = v36;
            int v28 = 1;
          }
          else
          {
            int v28 = 0;
          }
          if (v45)
          {
            BOOL result = (const char *)v44;
            uint64_t v44 = 0;
            if (result) {
LABEL_57:
            }
              BOOL result = (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
          }
        }
        else
        {
          *((void *)this + 2) = v34;
          int v28 = 5;
        }
      }
      else
      {
        BOOL result = (const char *)readAbbreviatedField((llvm::SimpleBitstreamCursor *)&v44, this, *(void *)v19, v20);
        if (v45)
        {
LABEL_38:
          uint64_t v29 = v44;
          v17 |= 1u;
          *(unsigned char *)(a3 + 8) = v17;
          *(void *)a3 = v29;
          int v28 = 1;
          goto LABEL_58;
        }
        int v28 = 7;
      }
LABEL_58:
      if (v28 && v28 != 7)
      {
        if (v28 != 5) {
          return result;
        }
LABEL_63:
        *(unsigned char *)(a3 + 8) = v17 & 0xFE;
        *(_DWORD *)a3 = v15;
        return result;
      }
LABEL_60:
      if (++v18 >= v16) {
        goto LABEL_63;
      }
    }
    BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v40);
    if (v41)
    {
      unint64_t v30 = v40;
      unint64_t v40 = 0;
    }
    else
    {
      int v25 = (int)v40;
      uint64_t v26 = *(void *)v8 + 16 * ++v18;
      int v27 = (*(unsigned __int8 *)(v26 + 8) >> 1) & 7;
      switch(v27)
      {
        case 1:
          unint64_t v37 = *(void *)v26 * v40 - *((unsigned int *)this + 8) + 8 * *((void *)this + 2);
          break;
        case 4:
          unint64_t v37 = (6 * v40) + 8 * *((void *)this + 2) - *((unsigned int *)this + 8);
          break;
        case 2:
          if (v40)
          {
            while (1)
            {
              BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v44, this, *(_DWORD *)v26);
              if (v45) {
                break;
              }
              if (!--v25) {
                goto LABEL_47;
              }
            }
            unint64_t v30 = (const char *)v44;
            goto LABEL_54;
          }
LABEL_47:
          int v28 = 7;
LABEL_55:
          if (v41)
          {
            BOOL result = v40;
            unint64_t v40 = 0;
            if (result) {
              goto LABEL_57;
            }
          }
          goto LABEL_58;
        default:
          uint64_t v38 = std::generic_category();
          uint64_t v44 = 92;
          unint64_t v45 = v38;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      BOOL result = (const char *)llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this, v37, &v44);
      unint64_t v30 = (const char *)v44;
      if (!v44) {
        goto LABEL_47;
      }
    }
LABEL_54:
    v17 |= 1u;
    *(unsigned char *)(a3 + 8) = v17;
    *(void *)a3 = v30;
    int v28 = 1;
    goto LABEL_55;
  }
  BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v44);
  if (v45)
  {
LABEL_66:
    uint64_t v39 = v44;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v39;
    return result;
  }
  int v6 = v44;
  BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v42);
  if (v43)
  {
    uint64_t v14 = (const char *)v42;
    uint64_t v42 = 0;
  }
  else
  {
    int v7 = v42;
    if (!v42)
    {
LABEL_7:
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v6;
      goto LABEL_69;
    }
    while (1)
    {
      BOOL result = (const char *)llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v40, this, 6u);
      if (v41) {
        break;
      }
      if (!--v7) {
        goto LABEL_7;
      }
    }
    uint64_t v14 = v40;
  }
  *(unsigned char *)(a3 + 8) |= 1u;
  *(void *)a3 = v14;
LABEL_69:
  if (v43)
  {
    BOOL result = (const char *)v42;
    uint64_t v42 = 0;
    if (result) {
      BOOL result = (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
    }
  }
  if (v45)
  {
    BOOL result = (const char *)v44;
    uint64_t v44 = 0;
    if (result) {
      return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::SimpleBitstreamCursor::ReadVBR64(llvm::SimpleBitstreamCursor *this, llvm::SimpleBitstreamCursor *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)a2, a3, (uint64_t)&v18);
  char v17 = v19 & 1;
  if (v19)
  {
    uint64_t v11 = v18;
    char v12 = *((unsigned char *)this + 8) | 1;
LABEL_18:
    *((unsigned char *)this + 8) = v12;
    goto LABEL_19;
  }
  uint64_t v16 = v18;
  uint64_t v7 = 1 << (a3 - 1);
  if ((v18 & v7) == 0)
  {
    uint64_t v11 = v18;
    char v12 = *((unsigned char *)this + 8) & 0xFE;
    goto LABEL_18;
  }
  uint64_t v8 = (v7 - 1) & v18;
  unsigned int v9 = a3 - 1;
  while (1)
  {
    if (v9 > 0x3F)
    {
      uint64_t v13 = std::generic_category();
      uint64_t v18 = 92;
      uint64_t v19 = v13;
      uint64_t v14 = "Unterminated VBR";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    llvm::SimpleBitstreamCursor::Read((uint64_t)a2, a3, (uint64_t)&v14);
    LOBYTE(v19) = v19 & 0xFE | v15 & 1;
    unsigned int v10 = v14;
    if (v15) {
      uint64_t v14 = 0;
    }
    uint64_t v18 = (uint64_t)v10;
    uint64_t result = (uint64_t)llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(&v16, &v18);
    if (v19)
    {
      uint64_t result = v18;
      uint64_t v18 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    if (v15)
    {
      uint64_t result = (uint64_t)v14;
      uint64_t v14 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    if (v17) {
      break;
    }
    v8 |= (unint64_t)((v7 - 1) & v16) << v9;
    v9 += a3 - 1;
    if ((v16 & v7) == 0)
    {
      *((unsigned char *)this + 8) &= ~1u;
      *(void *)this = v8;
      return result;
    }
  }
  *((unsigned char *)this + 8) |= 1u;
  uint64_t v11 = v16;
LABEL_19:
  *(void *)this = v11;
  return result;
}

uint64_t llvm::BitstreamCursor::getAbbrev(uint64_t this, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = (a4 - 4);
  if (v4 >= (a3 - a2) >> 4)
  {
    std::generic_category();
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  uint64_t v5 = *(void *)(a2 + 16 * v4);
  *(unsigned char *)(this + 8) &= ~1u;
  *(void *)this = v5;
  return this;
}

uint64_t readAbbreviatedField(llvm::SimpleBitstreamCursor *this, llvm::SimpleBitstreamCursor *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v5 = (a4 >> 1) & 7;
  if (v5 == 4)
  {
    uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)a2, 6u, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v7 = v9;
      char v8 = *((unsigned char *)this + 8) | 1;
    }
    else
    {
      uint64_t v7 = aAbcdefghijklmn_5[v9];
      char v8 = *((unsigned char *)this + 8) & 0xFE;
    }
    *((unsigned char *)this + 8) = v8;
    goto LABEL_11;
  }
  if (v5 != 2)
  {
    uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)a2, a3, (uint64_t)&v9);
    *((unsigned char *)this + 8) = *((unsigned char *)this + 8) & 0xFE | v10 & 1;
    uint64_t v7 = v9;
LABEL_11:
    *(void *)this = v7;
    return result;
  }
  return llvm::SimpleBitstreamCursor::ReadVBR64(this, a2, a3);
}

std::string::size_type llvm::BitstreamCursor::readRecord@<X0>(llvm::SimpleBitstreamCursor *this@<X0>, int a2@<W1>, unsigned int *a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (a2 == 3)
  {
    std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v72);
    if ((v73 & 1) == 0)
    {
      int v9 = v72;
      std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v70);
      if (v71)
      {
        uint64_t v20 = v70;
        std::string::size_type v70 = 0;
        uint64_t v63 = v20;
        llvm::toString(&v63, &v67);
        int v21 = std::string::insert(&v67, 0, "Failed to read size: ");
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
        long long __p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        uint64_t v69 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (v69 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        char v24 = std::generic_category();
        uint64_t v65 = 92;
        uint64_t v66 = v24;
        int v64 = p_p;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      int v10 = v70;
      if (v70 >= (unint64_t)(8 * *((void *)this + 1)))
      {
        *(void *)&long long __p = 92;
        *((void *)&__p + 1) = std::generic_category();
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      unint64_t v11 = a3[2] + (unint64_t)v70;
      if (v11 > a3[3]) {
        std::string::size_type result = (std::string::size_type)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 4, v11, 8);
      }
      if (v10)
      {
        char v12 = *(unsigned char *)(a5 + 8);
        while (1)
        {
          std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&__p, this, 6u);
          if (BYTE8(__p)) {
            break;
          }
          std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
          if (!--v10) {
            goto LABEL_102;
          }
        }
        uint64_t v59 = __p;
        *(unsigned char *)(a5 + 8) = v12 | 1;
        *(void *)a5 = v59;
      }
      else
      {
        char v12 = *(unsigned char *)(a5 + 8);
LABEL_102:
        *(unsigned char *)(a5 + 8) = v12 & 0xFE;
        *(_DWORD *)a5 = v9;
      }
      if (v71)
      {
        std::string::size_type result = v70;
        std::string::size_type v70 = 0;
        if (result) {
          std::string::size_type result = (*(uint64_t (**)(std::string::size_type))(*(void *)result + 8))(result);
        }
      }
      if (v73)
      {
        std::string::size_type result = v72;
        uint64_t v72 = 0;
        if (result) {
          return (*(uint64_t (**)(std::string::size_type))(*(void *)result + 8))(result);
        }
      }
      return result;
    }
    uint64_t v19 = v72;
LABEL_21:
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v19;
    return result;
  }
  std::string::size_type result = llvm::BitstreamCursor::getAbbrev((uint64_t)&v72, *((void *)this + 5), *((void *)this + 6), a2);
  uint64_t v14 = v72;
  if (v73)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v14;
    return result;
  }
  char v15 = *(uint64_t **)v72;
  unsigned int v16 = *(unsigned __int8 *)(*(void *)v72 + 8);
  if (v16)
  {
    uint64_t v25 = *v15;
  }
  else
  {
    int v17 = (v16 >> 1) & 7;
    if (v17 == 5 || v17 == 3)
    {
      *(void *)&long long __p = 92;
      *((void *)&__p + 1) = std::generic_category();
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Abbreviation starts with an Array or a Blob";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    std::string::size_type result = readAbbreviatedField((llvm::SimpleBitstreamCursor *)&__p, this, *v15, v16);
    if (BYTE8(__p))
    {
      uint64_t v19 = __p;
      goto LABEL_21;
    }
    LODWORD(v25) = __p;
  }
  int v61 = v25;
  int v26 = *(_DWORD *)(v14 + 8);
  if (v26 != 1)
  {
    uint64_t v60 = a4;
    unsigned int v28 = 1;
    int v27 = *(unsigned __int8 *)(a5 + 8);
    while (1)
    {
      uint64_t v29 = *(void *)v14 + 16 * v28;
      unsigned int v30 = *(unsigned __int8 *)(v29 + 8);
      if (v30)
      {
        std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, *(void *)v29);
        goto LABEL_81;
      }
      int v31 = (v30 >> 1) & 7;
      if (v31 != 3)
      {
        if (v31 != 5)
        {
          std::string::size_type result = readAbbreviatedField((llvm::SimpleBitstreamCursor *)&__p, this, *(void *)v29, v30);
          if (BYTE8(__p))
          {
            uint64_t v47 = __p;
            v27 |= 1u;
            *(unsigned char *)(a5 + 8) = v27;
            *(void *)a5 = v47;
            int v40 = 1;
          }
          else
          {
            std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
            int v40 = 7;
          }
          goto LABEL_79;
        }
        std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v67);
        if ((v67.__r_.__value_.__s.__data_[8] & 1) == 0)
        {
          unsigned int v32 = *((_DWORD *)this + 8);
          BOOL v33 = v32 >= 0x20;
          char v34 = v32 - 32;
          if (v33)
          {
            *((void *)this + 3) >>= v34;
            uint64_t v48 = 32;
          }
          else
          {
            uint64_t v48 = 0;
          }
          data_low = (unsigned __int8 *)LODWORD(v67.__r_.__value_.__l.__data_);
          *((_DWORD *)this + 8) = v48;
          unint64_t v50 = 8 * *((void *)this + 2) - v48;
          unint64_t v51 = v50 + ((8 * (void)data_low + 24) & 0xFFFFFFFE0);
          if (*((void *)this + 1) < v51 >> 3)
          {
            unint64_t v52 = std::generic_category();
            *(void *)&long long __p = 92;
            *((void *)&__p + 1) = v52;
            uint64_t v65 = (uint64_t)"Blob ends too soon";
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
          std::string::size_type result = llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this, v51, &__p);
          std::string::size_type v41 = __p;
          if ((void)__p)
          {
LABEL_68:
            v27 |= 1u;
            *(unsigned char *)(a5 + 8) = v27;
            *(void *)a5 = v41;
            int v40 = 1;
          }
          else
          {
            BOOL v55 = (unsigned __int8 *)(*(void *)this + (v50 >> 3));
            if (v60)
            {
              int v40 = 0;
              *uint64_t v60 = v55;
              v60[1] = data_low;
            }
            else
            {
              std::string::size_type result = (std::string::size_type)llvm::SmallVectorImpl<unsigned long long>::append<unsigned char const*,void>(a3, v55, &data_low[(void)v55]);
              int v40 = 0;
            }
          }
          if (v67.__r_.__value_.__s.__data_[8])
          {
            std::string::size_type result = v67.__r_.__value_.__r.__words[0];
            v67.__r_.__value_.__r.__words[0] = 0;
            if (result) {
              goto LABEL_78;
            }
          }
          goto LABEL_79;
        }
        std::string::size_type v41 = v67.__r_.__value_.__r.__words[0];
        v67.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_68;
      }
      std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v70);
      if (v71)
      {
        uint64_t v42 = v70;
        std::string::size_type v70 = 0;
        uint64_t v62 = v42;
        llvm::toString(&v62, &v67);
        char v43 = std::string::insert(&v67, 0, "Failed to read size: ");
        std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
        long long __p = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        uint64_t v69 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (v69 >= 0) {
          unint64_t v45 = &__p;
        }
        else {
          unint64_t v45 = (long long *)__p;
        }
        uint64_t v46 = std::generic_category();
        uint64_t v65 = 92;
        uint64_t v66 = v46;
        int v64 = v45;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      int v35 = v70;
      if (v70 >= (unint64_t)(8 * *((void *)this + 1)))
      {
        unint64_t v53 = std::generic_category();
        *(void *)&long long __p = 92;
        *((void *)&__p + 1) = v53;
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      unint64_t v36 = a3[2] + (unint64_t)v70;
      if (v36 > a3[3]) {
        std::string::size_type result = (std::string::size_type)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 4, v36, 8);
      }
      if (v28 + 2 != v26)
      {
        unint64_t v54 = std::generic_category();
        *(void *)&long long __p = 92;
        *((void *)&__p + 1) = v54;
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array op not second to last";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      uint64_t v37 = *(void *)v14 + 16 * ++v28;
      unsigned int v38 = *(unsigned __int8 *)(v37 + 8);
      if (v38)
      {
        unint64_t v56 = std::generic_category();
        *(void *)&long long __p = 92;
        *((void *)&__p + 1) = v56;
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type has to be an encoding of a type";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      int v39 = (v38 >> 1) & 7;
      switch(v39)
      {
        case 1:
          if (v35)
          {
            while (1)
            {
              std::string::size_type result = llvm::SimpleBitstreamCursor::Read((uint64_t)this, *(_DWORD *)v37, (uint64_t)&__p);
              if (BYTE8(__p)) {
                goto LABEL_97;
              }
              std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
              if (BYTE8(__p))
              {
                std::string::size_type result = __p;
                *(void *)&long long __p = 0;
                if (result) {
                  std::string::size_type result = (*(uint64_t (**)(std::string::size_type))(*(void *)result + 8))(result);
                }
              }
              int v40 = 7;
              if (!--v35) {
                goto LABEL_76;
              }
            }
          }
          break;
        case 2:
          if (v35)
          {
            while (1)
            {
              std::string::size_type result = llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&__p, this, *(_DWORD *)v37);
              if (BYTE8(__p)) {
                goto LABEL_97;
              }
              std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
              int v40 = 7;
              if (!--v35) {
                goto LABEL_76;
              }
            }
          }
          break;
        case 4:
          if (v35)
          {
            while (1)
            {
              std::string::size_type result = llvm::SimpleBitstreamCursor::Read((uint64_t)this, 6u, (uint64_t)&__p);
              if (BYTE8(__p)) {
                break;
              }
              std::string::size_type result = (std::string::size_type)llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, aAbcdefghijklmn_5[__p]);
              if (BYTE8(__p))
              {
                std::string::size_type result = __p;
                *(void *)&long long __p = 0;
                if (result) {
                  std::string::size_type result = (*(uint64_t (**)(std::string::size_type))(*(void *)result + 8))(result);
                }
              }
              int v40 = 7;
              if (!--v35) {
                goto LABEL_76;
              }
            }
LABEL_97:
            uint64_t v58 = __p;
            v27 |= 1u;
            *(unsigned char *)(a5 + 8) = v27;
            *(void *)a5 = v58;
            int v40 = 1;
            goto LABEL_76;
          }
          break;
        default:
          uint64_t v57 = std::generic_category();
          *(void *)&long long __p = 92;
          *((void *)&__p + 1) = v57;
          v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type can't be an Array or a Blob";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      int v40 = 7;
LABEL_76:
      if (v71)
      {
        std::string::size_type result = v70;
        std::string::size_type v70 = 0;
        if (result) {
LABEL_78:
        }
          std::string::size_type result = (*(uint64_t (**)(std::string::size_type))(*(void *)result + 8))(result);
      }
LABEL_79:
      if (v40 != 7 && v40) {
        return result;
      }
LABEL_81:
      if (++v28 == v26) {
        goto LABEL_30;
      }
    }
  }
  LOBYTE(v27) = *(unsigned char *)(a5 + 8);
LABEL_30:
  *(unsigned char *)(a5 + 8) = v27 & 0xFE;
  *(_DWORD *)a5 = v61;
  return result;
}

void llvm::BitstreamCursor::ReadAbbrevRecord(llvm::BitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v6 = (char *)operator new(0x228uLL);
  *(void *)int v6 = &unk_270DBFDE0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = (unsigned int *)(v6 + 24);
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = v6 + 40;
  *((void *)v6 + 4) = 0x2000000000;
  llvm::SimpleBitstreamCursor::ReadVBR(this, 5u, (uint64_t)&v48);
  if (v49)
  {
    uint64_t v20 = v48;
    uint64_t v48 = 0;
    *a2 = v20;
  }
  else
  {
    int v8 = v48;
    if (v48)
    {
      while (1)
      {
        llvm::SimpleBitstreamCursor::Read((uint64_t)this, 1u, (uint64_t)&v46);
        if (v47)
        {
          uint64_t v10 = (uint64_t)v46;
          uint64_t v46 = 0;
LABEL_14:
          *a2 = v10;
          int v9 = 1;
          goto LABEL_15;
        }
        if (!v46) {
          break;
        }
        llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v50, this, 8u);
        if (v51.i8[0])
        {
          uint64_t v10 = v50;
          goto LABEL_14;
        }
        v3 |= 1uLL;
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v7, v50, v3);
        int v9 = 4;
LABEL_15:
        if (v47)
        {
          char v15 = v46;
          uint64_t v46 = 0;
          if (v15) {
            (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
          }
        }
        if ((v9 | 4) != 4) {
          goto LABEL_54;
        }
        if (!--v8) {
          goto LABEL_37;
        }
      }
      llvm::SimpleBitstreamCursor::Read((uint64_t)this, 3u, (uint64_t)&v44);
      if (v45)
      {
        unsigned int v16 = v44;
        std::string::size_type v44 = 0;
      }
      else
      {
        char v11 = (char)v44;
        if ((unint64_t)(v44 - 1) >= 5)
        {
          int v17 = std::generic_category();
          uint64_t v50 = 92;
          v51.i64[0] = (uint64_t)v17;
          uint64_t v42 = "Invalid encoding";
          goto LABEL_24;
        }
        if ((v44 - 3) < 3)
        {
          unint64_t v2 = v2 & 0xFFFFFFFFFFFFFFF0 | (2 * (v44 & 7));
          char v12 = (unsigned int *)(v6 + 24);
          uint64_t v13 = 0;
          unint64_t v14 = v2;
LABEL_12:
          llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v12, v13, v14);
          int v9 = 0;
LABEL_25:
          if (v45)
          {
            uint64_t v18 = v44;
            std::string::size_type v44 = 0;
            if (v18) {
              (*(void (**)(const char *))(*(void *)v18 + 8))(v18);
            }
          }
          goto LABEL_15;
        }
        if ((v44 - 1) >= 2) {
          llvm::report_fatal_error((llvm *)"Invalid encoding", (const llvm::Twine *)1);
        }
        llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v42, this, 5u);
        if ((v43 & 1) == 0)
        {
          uint64_t v13 = (uint64_t)v42;
          if (!v42)
          {
            v41 |= 1uLL;
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v7, 0, v41);
            int v9 = 4;
            goto LABEL_25;
          }
          if ((unint64_t)v42 >= 0x21)
          {
            uint64_t v19 = std::generic_category();
            uint64_t v50 = 92;
            v51.i64[0] = (uint64_t)v19;
LABEL_24:
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
          unint64_t v14 = v40 & 0xFFFFFFFFFFFFFFF0 | (2 * (v11 & 7));
          char v12 = (unsigned int *)(v6 + 24);
          unint64_t v40 = v14;
          goto LABEL_12;
        }
        unsigned int v16 = v42;
      }
      *a2 = (uint64_t)v16;
      int v9 = 1;
      goto LABEL_25;
    }
LABEL_37:
    if (!*((_DWORD *)v6 + 8))
    {
      char v24 = std::generic_category();
      uint64_t v50 = 92;
      v51.i64[0] = (uint64_t)v24;
      uint64_t v46 = "Abbrev record with no operands";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    unint64_t v21 = *((void *)this + 7);
    std::string::size_type v22 = (unsigned int **)*((void *)this + 6);
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v25 = *((void *)this + 5);
      uint64_t v26 = ((uint64_t)v22 - v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        abort();
      }
      uint64_t v28 = v21 - v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      unint64_t v53 = (char *)this + 56;
      unsigned int v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)this + 56, v29);
      unsigned int v32 = (unsigned int **)&v30[16 * v26];
      *unsigned int v32 = v7;
      v32[1] = (unsigned int *)v6;
      char v34 = (void *)*((void *)this + 5);
      BOOL v33 = (void *)*((void *)this + 6);
      if (v33 == v34)
      {
        int64x2_t v37 = vdupq_n_s64((unint64_t)v33);
        int v35 = &v30[16 * v26];
      }
      else
      {
        int v35 = &v30[16 * v26];
        do
        {
          long long v36 = *((_OWORD *)v33 - 1);
          v33 -= 2;
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 16;
          *BOOL v33 = 0;
          v33[1] = 0;
        }
        while (v33 != v34);
        int64x2_t v37 = *(int64x2_t *)((char *)this + 40);
      }
      BOOL v23 = v32 + 2;
      *((void *)this + 5) = v35;
      *((void *)this + 6) = v32 + 2;
      int64x2_t v51 = v37;
      uint64_t v38 = *((void *)this + 7);
      *((void *)this + 7) = &v30[16 * v31];
      uint64_t v52 = v38;
      uint64_t v50 = v37.i64[0];
      std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((void **)&v50);
    }
    else
    {
      *std::string::size_type v22 = v7;
      v22[1] = (unsigned int *)v6;
      BOOL v23 = v22 + 2;
    }
    int v6 = 0;
    *((void *)this + 6) = v23;
    *a2 = 0;
  }
LABEL_54:
  if (v49)
  {
    uint64_t v39 = v48;
    uint64_t v48 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v6);
  }
}

void llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v77[64] = *MEMORY[0x263EF8340];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 0, (void ***)&v75);
  int v6 = v75;
  if (v75)
  {
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v6;
    return;
  }
  uint64_t v7 = 0;
  long long v68 = 0uLL;
  uint64_t v69 = 0;
  unint64_t v75 = v77;
  uint64_t v76 = 0x4000000000;
  do
  {
    llvm::BitstreamCursor::advanceSkippingSubblocks(this, 2, (uint64_t)&v73);
    if (v74)
    {
      int v8 = v73;
      char v73 = 0;
LABEL_10:
      *(unsigned char *)(a3 + 32) |= 1u;
      *(void *)a3 = v8;
      goto LABEL_11;
    }
    switch(v73)
    {
      case 2:
        goto LABEL_8;
      case 1:
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(_OWORD *)a3 = v68;
        *(void *)(a3 + 16) = v69;
        long long v68 = 0uLL;
        uint64_t v69 = 0;
        int v9 = 1;
        *(unsigned char *)(a3 + 24) = 1;
        goto LABEL_12;
      case 0:
        goto LABEL_8;
    }
    if (HIDWORD(v73) != 2)
    {
      LODWORD(v76) = 0;
      llvm::BitstreamCursor::readRecord(this, SHIDWORD(v73), (unsigned int *)&v75, 0, (uint64_t)&v71);
      if (v72)
      {
        uint64_t v18 = v71;
        *(unsigned char *)(a3 + 32) |= 1u;
        *(void *)a3 = v18;
        uint64_t v71 = 0;
      }
      else
      {
        if (v71 != 3)
        {
          if (v71 == 2)
          {
            if (!v7) {
              goto LABEL_8;
            }
            if (!a2) {
              goto LABEL_107;
            }
            std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(__p, (uint64_t *)v75, (uint64_t *)v75 + v76, v76);
            BOOL v23 = (void **)(v7 + 32);
            if (*(char *)(v7 + 55) < 0) {
              operator delete(*v23);
            }
            int v9 = 0;
            *(_OWORD *)BOOL v23 = *(_OWORD *)__p;
            *(void **)(v7 + 48) = __p[2];
          }
          else
          {
            if (v71 != 1) {
              goto LABEL_107;
            }
            if (!v76) {
              goto LABEL_8;
            }
            int v15 = *(_DWORD *)v75;
            unsigned int v16 = (_OWORD *)*((void *)&v68 + 1);
            int v17 = (_OWORD *)v68;
            if ((void)v68 == *((void *)&v68 + 1))
            {
LABEL_59:
              if (*((void *)&v68 + 1) >= (unint64_t)v69)
              {
                unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v68 + 1) - v68) >> 4);
                unint64_t v42 = v41 + 1;
                if (v41 + 1 > 0x333333333333333) {
                  goto LABEL_112;
                }
                if (0x999999999999999ALL * ((uint64_t)&v69[-v68] >> 4) > v42) {
                  unint64_t v42 = 0x999999999999999ALL * ((uint64_t)&v69[-v68] >> 4);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v69[-v68] >> 4) >= 0x199999999999999) {
                  unint64_t v43 = 0x333333333333333;
                }
                else {
                  unint64_t v43 = v42;
                }
                if (v43)
                {
                  std::string::size_type v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)&v69, v43);
                  unsigned int v16 = (_OWORD *)*((void *)&v68 + 1);
                  int v17 = (_OWORD *)v68;
                }
                else
                {
                  std::string::size_type v44 = 0;
                }
                int64x2_t v51 = &v44[16 * ((uint64_t)(*((void *)&v68 + 1) - v68) >> 4)];
                *((_OWORD *)v51 + 3) = 0u;
                *((_OWORD *)v51 + 4) = 0u;
                *((_OWORD *)v51 + 1) = 0u;
                *((_OWORD *)v51 + 2) = 0u;
                *(_OWORD *)int64x2_t v51 = 0u;
                unint64_t v40 = v51 + 80;
                if (v16 == v17)
                {
                  *(void *)&long long v68 = &v44[80 * v41];
                  *((void *)&v68 + 1) = v51 + 80;
                  uint64_t v69 = &v44[80 * v43];
                }
                else
                {
                  uint64_t v52 = 0;
                  do
                  {
                    unint64_t v53 = &v51[v52 * 16];
                    uint64_t v54 = &v16[v52];
                    *((_DWORD *)v53 - 20) = v16[v52 - 5];
                    *((void *)v53 - 8) = 0;
                    *((void *)v53 - 7) = 0;
                    *((void *)v53 - 9) = 0;
                    *(_OWORD *)(v53 - 72) = *(_OWORD *)((char *)&v16[v52 - 4] - 8);
                    *((void *)v53 - 7) = *((void *)&v16[v52 - 3] - 1);
                    *((void *)v54 - 9) = 0;
                    *((void *)v54 - 8) = 0;
                    *((void *)v54 - 7) = 0;
                    long long v55 = v16[v52 - 3];
                    *((void *)v53 - 4) = *(void *)&v16[v52 - 2];
                    *((_OWORD *)v53 - 3) = v55;
                    *((void *)v54 - 5) = 0;
                    *((void *)v54 - 4) = 0;
                    *((void *)v54 - 6) = 0;
                    *((void *)v53 - 3) = 0;
                    *((void *)v53 - 2) = 0;
                    *((void *)v53 - 1) = 0;
                    *(_OWORD *)(v53 - 24) = *(_OWORD *)((char *)&v16[v52 - 1] - 8);
                    *((void *)v53 - 1) = *((void *)&v16[v52 - 1] + 1);
                    *((void *)v54 - 3) = 0;
                    *((void *)v54 - 2) = 0;
                    *((void *)v54 - 1) = 0;
                    v52 -= 5;
                  }
                  while (&v16[v52] != v17);
                  uint64_t v56 = *((void *)&v68 + 1);
                  int v17 = (_OWORD *)v68;
                  *(void *)&long long v68 = &v51[v52 * 16];
                  *((void *)&v68 + 1) = v51 + 80;
                  uint64_t v69 = &v44[80 * v43];
                  while ((_OWORD *)v56 != v17)
                  {
                    v56 -= 80;
                    std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)&v69, v56);
                  }
                }
                if (v17) {
                  operator delete(v17);
                }
              }
              else
              {
                *(_OWORD *)(*((void *)&v68 + 1) + 48) = 0u;
                void v16[4] = 0u;
                v16[1] = 0u;
                uint64_t v16[2] = 0u;
                unint64_t v40 = v16 + 5;
                _OWORD *v16 = 0u;
              }
              int v9 = 0;
              *((void *)&v68 + 1) = v40;
              *((_DWORD *)v40 - 20) = v15;
              uint64_t v7 = (uint64_t)(v40 - 5);
            }
            else
            {
              uint64_t v7 = *((void *)&v68 + 1) - 80;
              if (*(_DWORD *)(*((void *)&v68 + 1) - 80) != v15)
              {
                uint64_t v7 = v68;
                while (*(_DWORD *)v7 != v15)
                {
                  v7 += 80;
                  if (v7 == *((void *)&v68 + 1)) {
                    goto LABEL_59;
                  }
                }
              }
              int v9 = 0;
            }
          }
          goto LABEL_12;
        }
        if (v7)
        {
          if (a2)
          {
            int v19 = *(_DWORD *)v75;
            std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(__p, (uint64_t *)v75 + 1, (uint64_t *)v75 + v76, (8 * v76 - 8) >> 3);
            unint64_t v20 = *(void *)(v7 + 72);
            unint64_t v21 = *(void *)(v7 + 64);
            if (v21 >= v20)
            {
              uint64_t v45 = *(void *)(v7 + 56);
              uint64_t v46 = (uint64_t)(v21 - v45) >> 5;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 59) {
LABEL_112:
              }
                abort();
              uint64_t v48 = v20 - v45;
              if (v48 >> 4 > v47) {
                unint64_t v47 = v48 >> 4;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v49 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49) {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v7 + 72, v49);
              }
              else {
                uint64_t v50 = 0;
              }
              uint64_t v57 = &v50[32 * v46];
              *(_DWORD *)uint64_t v57 = v19;
              long long v58 = *(_OWORD *)__p;
              *((void **)v57 + 3) = __p[2];
              *(_OWORD *)(v57 + 8) = v58;
              memset(__p, 0, 24);
              uint64_t v59 = *(void *)(v7 + 56);
              uint64_t v60 = *(void *)(v7 + 64);
              if (v60 == v59)
              {
                uint64_t v65 = v57 + 32;
                *(void *)(v7 + 56) = v57;
                *(void *)(v7 + 64) = v57 + 32;
                *(void *)(v7 + 72) = &v50[32 * v49];
              }
              else
              {
                int v61 = &v50[32 * v46];
                do
                {
                  int v62 = *(_DWORD *)(v60 - 32);
                  v60 -= 32;
                  *((_DWORD *)v61 - 8) = v62;
                  v61 -= 32;
                  long long v63 = *(_OWORD *)(v60 + 8);
                  *((void *)v61 + 3) = *(void *)(v60 + 24);
                  *(_OWORD *)(v61 + 8) = v63;
                  *(void *)(v60 + 16) = 0;
                  *(void *)(v60 + 24) = 0;
                  *(void *)(v60 + 8) = 0;
                }
                while (v60 != v59);
                uint64_t v60 = *(void *)(v7 + 56);
                uint64_t v64 = *(void *)(v7 + 64);
                uint64_t v65 = v57 + 32;
                *(void *)(v7 + 56) = v61;
                *(void *)(v7 + 64) = v57 + 32;
                *(void *)(v7 + 72) = &v50[32 * v49];
                while (v64 != v60)
                {
                  if (*(char *)(v64 - 1) < 0) {
                    operator delete(*(void **)(v64 - 24));
                  }
                  v64 -= 32;
                }
              }
              if (v60) {
                operator delete((void *)v60);
              }
              int v66 = SHIBYTE(__p[2]);
              *(void *)(v7 + 64) = v65;
              if (v66 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v21 = v19;
              long long v22 = *(_OWORD *)__p;
              *(void **)(v21 + 24) = __p[2];
              *(_OWORD *)(v21 + 8) = v22;
              *(void *)(v7 + 64) = v21 + 32;
            }
            if (v72)
            {
              uint64_t v67 = v71;
              uint64_t v71 = 0;
              if (v67) {
                (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
              }
            }
          }
LABEL_107:
          int v9 = 0;
          goto LABEL_12;
        }
LABEL_8:
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
      }
LABEL_11:
      int v9 = 1;
      goto LABEL_12;
    }
    if (!v7) {
      goto LABEL_8;
    }
    llvm::BitstreamCursor::ReadAbbrevRecord(this, (uint64_t *)__p);
    int v8 = __p[0];
    if (__p[0]) {
      goto LABEL_10;
    }
    uint64_t v11 = *((void *)this + 6) - 16;
    unint64_t v12 = *(void *)(v7 + 24);
    uint64_t v13 = *(_OWORD **)(v7 + 16);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v24 = *(void *)(v7 + 8);
      uint64_t v25 = ((uint64_t)v13 - v24) >> 4;
      if ((unint64_t)(v25 + 1) >> 60) {
        goto LABEL_112;
      }
      uint64_t v26 = v12 - v24;
      uint64_t v27 = v26 >> 3;
      if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      __p[4] = (void *)(v7 + 24);
      unint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v7 + 24, v28);
      uint64_t v31 = &v29[16 * v25];
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v11;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      BOOL v33 = *(void **)(v7 + 8);
      unsigned int v32 = *(void **)(v7 + 16);
      if (v32 == v33)
      {
        int64x2_t v36 = vdupq_n_s64((unint64_t)v32);
        char v34 = &v29[16 * v25];
      }
      else
      {
        char v34 = &v29[16 * v25];
        do
        {
          long long v35 = *((_OWORD *)v32 - 1);
          v32 -= 2;
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 16;
          *unsigned int v32 = 0;
          v32[1] = 0;
        }
        while (v32 != v33);
        int64x2_t v36 = *(int64x2_t *)(v7 + 8);
      }
      unint64_t v14 = v31 + 16;
      *(void *)(v7 + 8) = v34;
      *(void *)(v7 + 16) = v31 + 16;
      *(int64x2_t *)&__p[1] = v36;
      int64x2_t v37 = *(void **)(v7 + 24);
      *(void *)(v7 + 24) = &v29[16 * v30];
      __p[3] = v37;
      __p[0] = (void *)v36.i64[0];
      std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer(__p);
    }
    else
    {
      *uint64_t v13 = *(_OWORD *)v11;
      unint64_t v14 = v13 + 1;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
    }
    *(void *)(v7 + 16) = v14;
    uint64_t v38 = *((void *)this + 6);
    uint64_t v39 = *(std::__shared_weak_count **)(v38 - 8);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v39);
    }
    *((void *)this + 6) = v38 - 16;
    int v9 = 2;
LABEL_12:
    if (v74)
    {
      uint64_t v10 = v73;
      char v73 = 0;
      if (v10) {
        (*(void (**)(void *))(*(void *)v10 + 8))(v10);
      }
    }
  }
  while ((v9 | 2) == 2);
  if (v75 != v77) {
    free(v75);
  }
  unint64_t v75 = &v68;
  std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v75);
}

uint64_t llvm::format_object<unsigned long,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

uint64_t llvm::ARM::getArchSynonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v44[0] = a1;
  v44[1] = a2;
  v45.i8[0] = 0;
  char v46 = 0;
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 != 1818769014) {
      goto LABEL_20;
    }
    int64x2_t v9 = vdupq_n_s64(3uLL);
    uint64_t v10 = "v6k";
    goto LABEL_19;
  }
  if (a2 != 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 13686) {
      goto LABEL_20;
    }
    int64x2_t v9 = vdupq_n_s64(3uLL);
    uint64_t v10 = "v5t";
    goto LABEL_19;
  }
  if (*(_WORD *)a1 == 13686 && *(unsigned char *)(a1 + 2) == 101)
  {
    int64x2_t v9 = vdupq_n_s64(4uLL);
    uint64_t v10 = "v5te";
    goto LABEL_19;
  }
  if (*(_WORD *)a1 == 13942 && *(unsigned char *)(a1 + 2) == 106)
  {
    int64x2_t v9 = vdupq_n_s64(2uLL);
    uint64_t v10 = "v6";
LABEL_19:
    v9.i64[0] = (uint64_t)v10;
    int64x2_t v45 = v9;
    char v46 = 1;
  }
LABEL_20:
  uint64_t v13 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases((uint64_t)v44, "v6m", 3, "v6sm", 4, "v6s-m", 5, a8, (uint64_t)"v6-m", 4);
  uint64_t v14 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v13, "v6z", 3, (uint64_t)"v6kz", 4);
  uint64_t v15 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v14, "v6zk", 4, (uint64_t)"v6kz", 4);
  uint64_t v16 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v15, "v7", 2, (uint64_t)"v7-a", 4);
  uint64_t v18 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v16, "v7a", 3, "v7hl", 4, "v7l", 3, v17, (uint64_t)"v7-a", 4);
  uint64_t v19 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v18, "v7r", 3, (uint64_t)"v7-r", 4);
  uint64_t v20 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v19, "v7m", 3, (uint64_t)"v7-m", 4);
  uint64_t v21 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v20, "v7em", 4, (uint64_t)"v7e-m", 5);
  uint64_t v23 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v21, "v8", 2, "v8a", 3, "v8l", 3, v22, "aarch64", 7, "arm64", 5, (uint64_t)"v8-a", 4);
  uint64_t v24 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v23, "v8.1a", 5, (uint64_t)"v8.1-a", 6);
  uint64_t v25 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v24, "v8.2a", 5, (uint64_t)"v8.2-a", 6);
  uint64_t v26 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v25, "v8.3a", 5, (uint64_t)"v8.3-a", 6);
  uint64_t v27 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v26, "v8.4a", 5, (uint64_t)"v8.4-a", 6);
  uint64_t v28 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v27, "v8.5a", 5, (uint64_t)"v8.5-a", 6);
  uint64_t v29 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v28, "v8.6a", 5, (uint64_t)"v8.6-a", 6);
  uint64_t v30 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v29, "v8.7a", 5, (uint64_t)"v8.7-a", 6);
  uint64_t v31 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v30, "v8.8a", 5, (uint64_t)"v8.8-a", 6);
  uint64_t v32 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v31, "v8.9a", 5, (uint64_t)"v8.9-a", 6);
  uint64_t v33 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v32, "v8r", 3, (uint64_t)"v8-r", 4);
  uint64_t v34 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v33, "v9", 2, (uint64_t)"v9-a", 4);
  uint64_t v35 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v34, "v9a", 3, (uint64_t)"v9-a", 4);
  uint64_t v36 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v35, "v9.1a", 5, (uint64_t)"v9.1-a", 6);
  uint64_t v37 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v36, "v9.2a", 5, (uint64_t)"v9.2-a", 6);
  uint64_t v38 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v37, "v9.3a", 5, (uint64_t)"v9.3-a", 6);
  uint64_t v39 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v38, "v9.4a", 5, (uint64_t)"v9.4-a", 6);
  uint64_t v40 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v39, "v8m.base", 8, (uint64_t)"v8-m.base", 9);
  uint64_t v41 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v40, "v8m.main", 8, (uint64_t)"v8-m.main", 9);
  uint64_t v42 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v41, "v8.1m.main", 10, (uint64_t)"v8.1-m.main", 11);
  if (*(unsigned char *)(v42 + 32)) {
    return *(void *)(v42 + 16);
  }
  else {
    return a1;
  }
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    size_t v7 = *(void *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(void *)(a1 + 16) = a4;
      *(void *)(a1 + 24) = a5;
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  return a1;
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(a1, a2, a3, a9, a10);
  uint64_t v15 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v14, a4, a5, a9, a10);
  return llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v15, a6, a7, a9, a10);
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(a1, a2, a3, a13, a14);
  uint64_t v19 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v18, a4, a5, a13, a14);
  return llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v19, a6, a7, a9, a10, a11, a12, v20, a13, a14);
}

const char *llvm::ARM::getCanonicalArchName(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v23 = (unsigned char *)a1;
  unint64_t v24 = a2;
  if (a2 >= 8)
  {
    if (*(void *)a1 == 0x32335F34366D7261)
    {
      unint64_t v5 = 8;
      goto LABEL_57;
    }
  }
  else if (a2 < 6)
  {
    if (a2 != 5)
    {
      if (a2 < 3)
      {
        unint64_t v5 = -1;
        unint64_t v4 = a2;
        goto LABEL_63;
      }
      if (*(_WORD *)a1 != 29281 || *(unsigned char *)(a1 + 2) != 109) {
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    BOOL v3 = *(_DWORD *)a1 == 913142369 && *(unsigned char *)(a1 + 4) == 52;
    if (v3)
    {
      unint64_t v4 = 5;
      unint64_t v5 = 5;
      goto LABEL_58;
    }
LABEL_24:
    if (*(_WORD *)a1 != 29281 || *(unsigned char *)(a1 + 2) != 109)
    {
      if (*(_DWORD *)a1 != 1836410996 || *(unsigned char *)(a1 + 4) != 98)
      {
        if (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (BOOL v11 = *(_DWORD *)(a1 + 3) == 875980899) : (BOOL v11 = 0), !v11))
        {
LABEL_54:
          unint64_t v5 = -1;
          uint64_t v17 = a1;
          unint64_t v4 = a2;
          goto LABEL_65;
        }
        if (llvm::StringRef::find((uint64_t *)&v23, "eb", 2uLL, 0) != -1) {
          return "";
        }
        unint64_t v4 = v24;
        unint64_t v5 = 7;
        if (v24 >= 7) {
          uint64_t v12 = 7;
        }
        else {
          uint64_t v12 = v24;
        }
        if (v24 - v12 >= 3)
        {
          uint64_t v13 = &v23[v12];
          unsigned int v14 = bswap32(*(unsigned __int16 *)&v23[v12]) >> 16;
          if (v14 == 24418) {
            int v15 = v13[2] - 101;
          }
          else {
            int v15 = v14 < 0x5F62 ? -1 : 1;
          }
          BOOL v3 = v15 == 0;
          unint64_t v5 = 7;
          if (v3) {
            unint64_t v5 = 10;
          }
        }
        goto LABEL_58;
      }
      goto LABEL_46;
    }
LABEL_55:
    unint64_t v5 = 3;
    goto LABEL_57;
  }
  if (*(_DWORD *)a1 != 913142369 || *(_WORD *)(a1 + 4) != 25908)
  {
    if (*(_DWORD *)a1 == 913142369 && *(unsigned char *)(a1 + 4) == 52)
    {
LABEL_46:
      unint64_t v5 = 5;
      goto LABEL_57;
    }
    if (a2 >= 0xA && *(void *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 12851)
    {
      unint64_t v5 = 10;
      goto LABEL_57;
    }
    goto LABEL_24;
  }
  unint64_t v5 = 6;
LABEL_57:
  unint64_t v4 = a2;
LABEL_58:
  if (v4 >= v5) {
    unint64_t v18 = v5;
  }
  else {
    unint64_t v18 = v4;
  }
  if (v4 - v18 >= 2)
  {
    uint64_t v19 = (uint64_t)v23;
    if (*(_WORD *)&v23[v18] == 25189)
    {
      v5 += 2;
      goto LABEL_74;
    }
  }
LABEL_63:
  if (v4 >= 2)
  {
    uint64_t v17 = (uint64_t)v23;
LABEL_65:
    if (*(_WORD *)(v17 + v4 - 2) == 25189)
    {
      if (v4 >= v4 - 2) {
        v4 -= 2;
      }
      uint64_t v23 = (unsigned char *)v17;
    }
  }
  if (v5 == -1)
  {
    if (!v4) {
      return (const char *)v2;
    }
    return v23;
  }
  uint64_t v19 = (uint64_t)v23;
LABEL_74:
  if (v4 >= v5) {
    unint64_t v20 = v5;
  }
  else {
    unint64_t v20 = v4;
  }
  uint64_t v21 = (unsigned char *)(v19 + v20);
  uint64_t v23 = v21;
  unint64_t v24 = v4 - v20;
  if (v4 > v5)
  {
    if (v4 - v20 >= 2
      && (*v21 != 118
       || (char)v21[1] < 0
       || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v21[1] + 60) & 0x400) == 0)
      || llvm::StringRef::find((uint64_t *)&v23, "eb", 2uLL, 0) != -1)
    {
      return "";
    }
    return v23;
  }
  return (const char *)v2;
}

uint64_t llvm::ARM::parseArchISA(uint64_t a1, unint64_t a2)
{
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899) {
      return 3;
    }
  }
  else if (a2 < 5)
  {
    if (a2 < 3) {
      return 0;
    }
    return *(_WORD *)a1 == 29281 && *(unsigned char *)(a1 + 2) == 109;
  }
  if (*(_DWORD *)a1 == 913142369 && *(unsigned char *)(a1 + 4) == 52) {
    return 3;
  }
  if (*(_DWORD *)a1 == 1836410996 && *(unsigned char *)(a1 + 4) == 98) {
    return 2;
  }
  return *(_WORD *)a1 == 29281 && *(unsigned char *)(a1 + 2) == 109;
}

uint64_t llvm::ARM::parseArchEndian(uint64_t a1, unint64_t a2)
{
  if (a2 < 5)
  {
    if (a2 < 3) {
      return 0;
    }
    if (*(_WORD *)a1 != 29281 || *(unsigned char *)(a1 + 2) != 109) {
      return 0;
    }
    goto LABEL_30;
  }
  if (*(_DWORD *)a1 == 1701671521 && *(unsigned char *)(a1 + 4) == 98) {
    return 2;
  }
  if (a2 < 7)
  {
LABEL_18:
    char v6 = 1;
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 == 1836410996 && *(_DWORD *)(a1 + 3) == 1650811501) {
    return 2;
  }
  if (a2 < 0xA) {
    goto LABEL_18;
  }
  if (*(void *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 25954) {
    return 2;
  }
  char v6 = 0;
LABEL_19:
  BOOL v7 = *(_WORD *)a1 == 29281 && *(unsigned char *)(a1 + 2) == 109;
  if (v7 || (*(_DWORD *)a1 == 1836410996 ? (BOOL v8 = *(unsigned char *)(a1 + 4) == 98) : (BOOL v8 = 0), v8))
  {
LABEL_30:
    if (bswap32(*(unsigned __int16 *)(a1 + a2 - 2)) >> 16 == 25954) {
      return 2;
    }
    else {
      return 1;
    }
  }
  if (a2 < 7)
  {
    if (v6) {
      return 0;
    }
    goto LABEL_50;
  }
  BOOL v11 = *(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899;
  uint64_t v3 = v11;
  if (v11) {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
LABEL_50:
    unint64_t v12 = 0x616172636836345FLL;
    unint64_t v13 = bswap64(*(void *)a1);
    if (v13 == 0x616172636836345FLL
      && (unint64_t v13 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16, v12 = 13106, v13 == 13106))
    {
      int v14 = 0;
    }
    else if (v13 < v12)
    {
      int v14 = -1;
    }
    else
    {
      int v14 = 1;
    }
    return v14 == 0;
  }
  return v3;
}

uint64_t llvm::ARM::parseArch(uint64_t a1, unint64_t a2)
{
  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  ArchSynonyuint64_t m = (const void *)llvm::ARM::getArchSynonym((uint64_t)CanonicalArchName, v3, v4, v5, v6, v7, v8, v9);
  size_t v12 = v11;
  uint64_t v13 = 0;
  uint64_t v14 = -(uint64_t)v11;
  while (1)
  {
    int v15 = (&llvm::ARM::ARMArchNames)[v13 + 1];
    if ((unint64_t)v15 >= v12
      && (!v12 || !memcmp(&v15[(void)(&llvm::ARM::ARMArchNames)[v13] + v14], ArchSynonym, v12)))
    {
      break;
    }
    v13 += 9;
    if (v13 == 360) {
      return 0;
    }
  }
  return LODWORD((&llvm::ARM::ARMArchNames)[v13 + 8]);
}

uint64_t llvm::ARM::parseArchVersion(uint64_t a1, unint64_t a2)
{
  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  return dword_261EA7540[(int)llvm::ARM::parseArch((uint64_t)CanonicalArchName, v3)];
}

uint64_t getProfileKind(int a1)
{
  return dword_261EA75E0[a1];
}

void updateTripleOSVersion(std::string *a1, std::string *__s)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v5 = __s;
    uint64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 7)
  {
    uint64_t v7 = (char *)v5 + size;
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 45, size - 6);
      if (!v9) {
        break;
      }
      if (*(_DWORD *)v9 == 1918985261 && *(_DWORD *)(v9 + 3) == 1852405618)
      {
        if (v9 == v7 || v9 - (char *)v5 == -1) {
          break;
        }
        std::string::resize(__s, v9 - (char *)v5 + 7, 0);
        getOSVersion(&__p);
        if (__p.sysname[23] >= 0) {
          p_p = &__p;
        }
        else {
          p_p = *(utsname **)__p.sysname;
        }
        if (__p.sysname[23] >= 0) {
          std::string::size_type v12 = __p.sysname[23];
        }
        else {
          std::string::size_type v12 = *(void *)&__p.sysname[8];
        }
        std::string::append(__s, p_p->sysname, v12);
        if (__p.sysname[23] < 0)
        {
          uint64_t v13 = *(void **)__p.sysname;
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      uint64_t v8 = (std::string *)(v9 + 1);
      uint64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 7);
  }
  if ((v4 & 0x80) != 0)
  {
    uint64_t v14 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t v4 = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v14 = __s;
  }
  if (v4 >= 6)
  {
    int v15 = (char *)v14 + v4;
    uint64_t v16 = v14;
    do
    {
      uint64_t v17 = (char *)memchr(v16, 45, v4 - 5);
      if (!v17) {
        break;
      }
      if (*(_DWORD *)v17 == 1667329325 && *((_WORD *)v17 + 2) == 29551)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
        {
          std::string::resize(__s, v17 - (char *)v14, 0);
          std::string::append(__s, "-darwin");
          getOSVersion(&__p);
          uint64_t v19 = __p.sysname[23] >= 0 ? &__p : *(utsname **)__p.sysname;
          std::string::size_type v20 = __p.sysname[23] >= 0 ? __p.sysname[23] : *(void *)&__p.sysname[8];
          std::string::append(__s, v19->sysname, v20);
          if (__p.sysname[23] < 0) {
            operator delete(*(void **)__p.sysname);
          }
        }
        break;
      }
      uint64_t v16 = (std::string *)(v17 + 1);
      uint64_t v4 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 6);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)"x86_64-apple-darwin22.1.0";
  __int16 v26 = 259;
  llvm::Triple::Triple((std::string *)&__p, (const llvm::Twine *)&v25);
  int v21 = *(_DWORD *)&__p.sysname[36];
  if (__p.sysname[23] < 0) {
    operator delete(*(void **)__p.sysname);
  }
  if (v21 != 21) {
    goto LABEL_53;
  }
  *(_WORD *)&__p.sysname[32] = 260;
  *(void *)__p.sysname = __s;
  llvm::Triple::Triple(&v25, (const llvm::Twine *)&__p);
  if (v27 != 21 || llvm::Triple::getOSVersion((llvm::Triple *)&v25) || uname(&__p) == -1)
  {
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v13 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_52:
      operator delete(v13);
    }
LABEL_53:
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
    return;
  }
  *((unsigned char *)&v24.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v24, "aix");
  std::string::append(&v24, __p.version);
  std::string::push_back(&v24, 46);
  std::string::append(&v24, __p.release);
  std::string::append(&v24, ".0.0");
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v24;
  }
  else {
    uint64_t v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v24.__r_.__value_.__l.__size_;
  }
  llvm::Triple::setOSName((llvm::Triple *)&v25, (uint64_t)v22, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(a1, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    *a1 = v25;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void llvm::sys::getProcessTriple(std::string *a1@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(&__p, "x86_64-apple-darwin22.1.0");
  updateTripleOSVersion(&v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v3 = &v16;
  }
  else {
    unint64_t v3 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  llvm::Triple::normalize((uint64_t)v3, size, &v17);
  LOWORD(v10.__r_.__value_.__r.__words[1]) = 260;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  llvm::Triple::Triple(&v13, (const llvm::Twine *)&v9);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v13;
  }
  std::string v12 = v14;
  ArchTypeName = llvm::Triple::getArchTypeName(3);
  llvm::Triple::setArchName((llvm::Triple *)&v11, ArchTypeName, v6);
  llvm::Triple::setArchName((llvm::Triple *)&v11, "arm64e", 6);
  v17.__r_.__value_.__r.__words[0] = v11.__r_.__value_.__l.__size_;
  std::string::size_type v7 = v11.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  char v8 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  memset(&v11, 0, sizeof(v11));
  std::string v9 = v12;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    v13.__r_.__value_.__r.__words[0] = v7;
    v13.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v13.__r_.__value_.__s + 23) = v8;
    std::string v14 = v9;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v13.__r_.__value_.__r.__words[0] = v7;
    v13.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v13.__r_.__value_.__s + 23) = v8;
    std::string v14 = v12;
  }
  if (getArchPointerBitWidth((int)v14.__r_.__value_.__l.__data_) == 32)
  {
    llvm::Triple::get64BitArchVariant((llvm::Triple *)&v13, (uint64_t)&v9);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string v13 = v9;
    std::string v14 = v10;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = v13;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void *getOSVersion(void *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (!uname(&v3)) {
    return std::string::basic_string[abi:nn180100]<0>(a1, v3.release);
  }
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

char *llvm::Triple::getArchTypeName(int a1)
{
  return off_2655AF478[a1];
}

char *llvm::Triple::getOSTypeName(llvm::Triple *this)
{
  return off_2655AF660[(int)this];
}

char *llvm::Triple::getEnvironmentTypeName(int a1)
{
  return off_2655AF7B8[a1];
}

uint64_t parseBPFArch(uint64_t a1, uint64_t a2)
{
  if (a2 != 6)
  {
    if (a2 != 5)
    {
      if (a2 != 3) {
        return 0;
      }
      BOOL v2 = *(_WORD *)a1 == 28770 && *(unsigned char *)(a1 + 2) == 102;
      goto LABEL_26;
    }
    if (*(_DWORD *)a1 != 1701212258 || *(unsigned char *)(a1 + 4) != 98)
    {
      unsigned int v5 = bswap32(*(_DWORD *)a1);
      if (v5 == 1651533413)
      {
        int v6 = *(unsigned __int8 *)(a1 + 4) - 108;
      }
      else if (v5 < 0x62706665)
      {
        int v6 = -1;
      }
      else
      {
        int v6 = 1;
      }
      BOOL v2 = v6 == 0;
      goto LABEL_26;
    }
    return 9;
  }
  if (*(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25954) {
    return 9;
  }
  BOOL v2 = *(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25964;
LABEL_26:
  int v8 = v2;
  return (8 * v8);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 20))
  {
    size_t v6 = *(void *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
    {
      *(_DWORD *)(a1 + 16) = a4;
      *(unsigned char *)(a1 + 20) = 1;
    }
  }
  return a1;
}

std::string *llvm::Triple::Triple(std::string *this, const llvm::Twine *a2)
{
  v43[8] = *MEMORY[0x263EF8340];
  llvm::Twine::str(a2, this);
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  BOOL v3 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  uint64_t v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  v40[1] = size;
  uint64_t v41 = v43;
  uint64_t v42 = 0x400000000;
  if (!v3) {
    uint64_t v4 = this;
  }
  v40[0] = v4;
  llvm::StringRef::split((unsigned int *)v40, (unsigned int *)&v41, 45, 3, 1);
  if (!v42)
  {
LABEL_105:
    if (HIDWORD(this[1].__r_.__value_.__r.__words[2])) {
      goto LABEL_108;
    }
    goto LABEL_106;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = parseArch(*(void *)v41, *((void *)v41 + 1));
  uint64_t v6 = *(void *)v41;
  unint64_t v7 = *((void *)v41 + 1);
  if (v7 >= 4
    && *(_DWORD *)v6 == 1936746861
    && (*(_DWORD *)(v6 + v7 - 4) == 1818572402 || *(_WORD *)(v6 + v7 - 2) == 13938))
  {
    int v9 = 38;
    goto LABEL_61;
  }
  switch(v7)
  {
    case 6uLL:
      if (*(_DWORD *)v6 == 913142369 && *(_WORD *)(v6 + 4) == 25908)
      {
        int v9 = 33;
        goto LABEL_61;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v6 == 913142369 && *(_DWORD *)(v6 + 3) == 1667576886)
      {
        int v9 = 34;
        goto LABEL_61;
      }
      break;
    case 0xAuLL:
      if (*(void *)v6 == 0x7363707265776F70 && *(_WORD *)(v6 + 8) == 25968)
      {
        int v9 = 39;
        goto LABEL_61;
      }
      break;
    default:
      if (v7 < 5) {
        goto LABEL_34;
      }
      break;
  }
  if (*(_DWORD *)v6 == 1919512691 && *(unsigned char *)(v6 + 4) == 118)
  {
    unint64_t v16 = v6 + v7;
    if (*(_DWORD *)(v6 + v7 - 4) == 808333686)
    {
      int v9 = 40;
    }
    else
    {
      switch(*(_DWORD *)(v16 - 4))
      {
        case 0x312E3176:
          int v9 = 41;
          break;
        case 0x322E3176:
          int v9 = 42;
          break;
        case 0x332E3176:
          int v9 = 43;
          break;
        case 0x342E3176:
          int v9 = 44;
          break;
        case 0x352E3176:
          int v9 = 45;
          break;
        default:
          int v9 = 0;
          break;
      }
    }
    goto LABEL_61;
  }
LABEL_34:
  CanonicalArchName = llvm::ARM::getCanonicalArchName(*(void *)v41, *((void *)v41 + 1));
  if (v14)
  {
    unsigned int v15 = llvm::ARM::parseArch((uint64_t)CanonicalArchName, v14) - 2;
    if (v15 <= 0x25)
    {
      int v9 = dword_261EA7B08[v15];
      goto LABEL_61;
    }
    goto LABEL_49;
  }
  if (v7 < 8)
  {
LABEL_49:
    int v9 = 0;
    goto LABEL_61;
  }
  unint64_t v17 = v6 + v7;
  if (*(void *)(v6 + v7 - 8) == 0x3361626D696C616BLL)
  {
    int v9 = 35;
  }
  else if (*(void *)(v17 - 8) == 0x3461626D696C616BLL)
  {
    int v9 = 36;
  }
  else
  {
    if (*(void *)(v17 - 8) != 0x3561626D696C616BLL) {
      goto LABEL_49;
    }
    int v9 = 37;
  }
LABEL_61:
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v9;
  unsigned int v18 = v42;
  uint64_t v19 = v41;
  if (v42 < 2)
  {
    uint64_t v23 = *(void *)v41;
    unint64_t v24 = *((void *)v41 + 1);
    if (v24 < 7)
    {
      if (v24 == 4)
      {
        if (*(_DWORD *)v23 == 1936746861) {
          goto LABEL_102;
        }
      }
      else if (v24 == 6)
      {
        if (*(_DWORD *)v23 != 1936746861 || *(_WORD *)(v23 + 4) != 13366)
        {
          if (*(_DWORD *)v23 == 1936746861 && *(_WORD *)(v23 + 4) == 27749) {
            goto LABEL_102;
          }
          int v27 = *(_DWORD *)v23;
          int v28 = *(unsigned __int16 *)(v23 + 4);
          BOOL v29 = v27 == 1936746861;
          int v30 = 13938;
          goto LABEL_97;
        }
        goto LABEL_103;
      }
      goto LABEL_91;
    }
    if (*(_DWORD *)v23 == 1936746861 && *(_DWORD *)(v23 + 3) == 842231411)
    {
      int v33 = 2;
    }
    else
    {
      if (*(_DWORD *)v23 == 1936746861 && *(_WORD *)(v23 + 4) == 13366) {
        goto LABEL_103;
      }
      if (v24 >= 9)
      {
        if (*(void *)v23 != 0x366173697370696DLL || *(unsigned char *)(v23 + 8) != 52)
        {
          uint64_t v35 = *(void *)v23;
          int v28 = *(unsigned __int8 *)(v23 + 8);
          BOOL v29 = v35 == 0x336173697370696DLL;
          int v30 = 50;
LABEL_97:
          if (!v29 || v28 != v30) {
            goto LABEL_91;
          }
LABEL_102:
          int v33 = 1;
          goto LABEL_104;
        }
LABEL_103:
        int v33 = 3;
        goto LABEL_104;
      }
      if (v24 != 8)
      {
LABEL_91:
        int v33 = 0;
        goto LABEL_104;
      }
      int v33 = *(void *)v23 == 0x6C6536727370696DLL;
    }
LABEL_104:
    LODWORD(this[1].__r_.__value_.__r.__words[2]) = v33;
    goto LABEL_105;
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = parseVendor(*((void *)v41 + 2), *((void *)v41 + 3));
  if (v18 == 2) {
    goto LABEL_105;
  }
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = parseOS(v19[4], v19[5]);
  if (v18 < 4) {
    goto LABEL_105;
  }
  uint64_t v20 = v19[6];
  unint64_t v21 = v19[7];
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = parseEnvironment(v20, v21);
  int v22 = parseFormat(v20, v21);
  HIDWORD(this[1].__r_.__value_.__r.__words[2]) = v22;
  if (v22) {
    goto LABEL_108;
  }
LABEL_106:
  unsigned int v37 = HIDWORD(this[1].__r_.__value_.__r.__words[1]);
  int v38 = 3;
  switch(LODWORD(this[1].__r_.__value_.__l.__data_))
  {
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x21:
    case 0x22:
    case 0x24:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x3A:
    case 0x3B:
    case 0x3C:
      break;
    case 0xB:
      int v38 = 2;
      break;
    case 0x15:
    case 0x17:
      if (v37 == 21) {
        int v38 = 8;
      }
      else {
        int v38 = 3;
      }
      break;
    case 0x20:
      if (v37 == 16) {
        int v38 = 4;
      }
      else {
        int v38 = 3;
      }
      break;
    case 0x33:
    case 0x34:
      int v38 = 6;
      break;
    case 0x38:
    case 0x39:
      int v38 = 7;
      break;
    default:
      if (v37 <= 0x21 && ((1 << v37) & 0x3F0000888) != 0)
      {
        int v38 = 5;
      }
      else if (v37 == 15)
      {
        int v38 = 1;
      }
      else
      {
        int v38 = 3;
      }
      break;
  }
  HIDWORD(this[1].__r_.__value_.__r.__words[2]) = v38;
LABEL_108:
  if (v41 != v43) {
    free(v41);
  }
  return this;
}

uint64_t parseArch(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = (_DWORD *)a1;
  unint64_t v33 = a2;
  LOBYTE(v34) = 0;
  char v35 = 0;
  if (a2 == 4 && *(_DWORD *)a1 == 909652841)
  {
    unsigned int v34 = 37;
    char v35 = 1;
  }
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "i486", 4, "i586", 4, "i686", 4, 37);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "i786", 4, "i886", 4, "i986", 4, 37);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "amd64", 5, "x86_64", 6, "x86_64h", 7, 38);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "powerpc", 7, 21);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpcspe", 10, "ppc", 3, "ppc32", 5, 21);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpcle", 9, "ppcle", 5, "ppc32le", 7, 22);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpc64", 9, "ppu", 3, "ppc64", 5, 23);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "powerpc64le", 11, 24);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "ppc64le", 7, 24);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xscale", 6, 1);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xscaleeb", 8, 2);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64", 7, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64_be", 10, 4);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64_32", 10, 5);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arc", 3, 6);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64", 5, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64_32", 8, 5);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64e", 6, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64ec", 7, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm", 3, 1);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "armeb", 5, 2);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "thumb", 5, 35);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "thumbeb", 7, 36);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "avr", 3, 7);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "m68k", 4, 15);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "msp430", 6, 20);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips", 4, "mipseb", 6, "mipsallegrex", 12, v4, "mipsisa32r6", 11, "mipsr6", 6, 16);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "mipsel", 6, 17);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mipsallegrexel", 14, "mipsisa32r6el", 13, "mipsr6el", 8, 17);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "mips64", 6, 18);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips64eb", 8, "mipsn32", 7, "mipsisa64r6", 11, v5, "mips64r6", 8, "mipsn32r6", 9, 18);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips64el", 8, "mipsn32el", 9, "mipsisa64r6el", 13, v6, "mips64r6el", 10, "mipsn32r6el", 11, 19);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "r600", 4, 25);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdgcn", 6, 26);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "riscv32", 7, 27);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "riscv64", 7, 28);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hexagon", 7, 12);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "s390x", 5, 32);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "systemz", 7, 32);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparc", 5, 29);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparcel", 7, 31);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparcv9", 7, 30);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparc64", 7, 30);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "tce", 3, 33);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "tcele", 5, 34);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xcore", 5, 39);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "nvptx", 5, 41);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "nvptx64", 7, 42);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "le32", 4, 43);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "le64", 4, 44);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdil", 5, 45);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdil64", 7, 46);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hsail", 5, 47);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hsail64", 7, 48);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "spir", 4, 49);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "spir64", 6, 50);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "spirv32", 7, "spirv32v1.0", 11, "spirv32v1.1", 11, v7, "spirv32v1.2", 11, "spirv32v1.3", 11, "spirv32v1.4", 11, "spirv32v1.5", 11, 51);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "spirv64", 7, "spirv64v1.0", 11, "spirv64v1.1", 11, v8, "spirv64v1.2", 11, "spirv64v1.3", 11, "spirv64v1.4", 11, "spirv64v1.5", 11, 52);
  if (!v35 && v33 >= 7 && *v32 == 1768710507 && *(_DWORD *)((char *)v32 + 3) == 1633840489)
  {
    unsigned int v34 = 53;
    char v35 = 1;
  }
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "lanai", 5, 55);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "renderscript32", 14, 58);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "renderscript64", 14, 59);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "shave", 5, 54);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "ve", 2, 60);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "wasm32", 6, 56);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "wasm64", 6, 57);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "csky", 4, 10);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "loongarch32", 11, 13);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "loongarch64", 11, 14);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "dxil", 4, 11);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xtensa", 6, 40);
  if (!v35 || (uint64_t result = v34) == 0)
  {
    if (a2 < 3) {
      return 0;
    }
    if (*(_WORD *)a1 != 29281 || *(unsigned char *)(a1 + 2) != 109)
    {
      if (a2 < 5
        || (*(_DWORD *)a1 == 1836410996 ? (BOOL v12 = *(unsigned char *)(a1 + 4) == 98) : (BOOL v12 = 0),
            !v12
         && (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (BOOL v13 = *(_DWORD *)(a1 + 3) == 875980899) : (BOOL v13 = 0), !v13))))
      {
        if (*(_WORD *)a1 == 28770 && *(unsigned char *)(a1 + 2) == 102) {
          return parseBPFArch(a1, a2);
        }
        return 0;
      }
    }
    int v15 = llvm::ARM::parseArchISA(a1, a2);
    int v16 = llvm::ARM::parseArchEndian(a1, a2);
    int v17 = v16;
    if (v16 == 2)
    {
      int v18 = v15 - 1;
      if ((v15 - 1) <= 2)
      {
        uint64_t v19 = &unk_261EA7BAC;
        goto LABEL_41;
      }
    }
    else if (v16 == 1)
    {
      int v18 = v15 - 1;
      if ((v15 - 1) < 3)
      {
        uint64_t v19 = &unk_261EA7BA0;
LABEL_41:
        unsigned int v20 = v19[v18];
LABEL_43:
        CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
        if (v22)
        {
          uint64_t v23 = (uint64_t)CanonicalArchName;
          unint64_t v24 = v22;
          if (v15 != 2 || v22 == 1 || *(_WORD *)CanonicalArchName != 12918 && *(_WORD *)CanonicalArchName != 13174)
          {
            std::string v25 = llvm::ARM::getCanonicalArchName((uint64_t)CanonicalArchName, v22);
            int v27 = llvm::ARM::parseArch((uint64_t)v25, v26);
            int ProfileKind = getProfileKind(v27);
            int v29 = llvm::ARM::parseArchVersion(v23, v24);
            if (v17 == 2) {
              unsigned int v30 = 36;
            }
            else {
              unsigned int v30 = 35;
            }
            if (v29 == 6 && ProfileKind == 3) {
              return v30;
            }
            else {
              return v20;
            }
          }
        }
        return 0;
      }
    }
    unsigned int v20 = 0;
    goto LABEL_43;
  }
  return result;
}

uint64_t parseVendor(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 == 25456)
      {
        uint64_t result = 2;
      }
      else
      {
        if (*(_WORD *)a1 != 25967) {
          goto LABEL_53;
        }
        uint64_t result = 14;
      }
      break;
    case 3:
      if (*(_WORD *)a1 == 26995 && *(unsigned char *)(a1 + 2) == 101) {
        goto LABEL_54;
      }
      if (*(_WORD *)a1 == 29542 && *(unsigned char *)(a1 + 2) == 108)
      {
        uint64_t result = 4;
      }
      else if (*(_WORD *)a1 == 25193 && *(unsigned char *)(a1 + 2) == 109)
      {
        uint64_t result = 5;
      }
      else if (*(_WORD *)a1 == 28009 && *(unsigned char *)(a1 + 2) == 103)
      {
        uint64_t result = 6;
      }
      else if (*(_WORD *)a1 == 29805 && *(unsigned char *)(a1 + 2) == 105)
      {
        uint64_t result = 7;
      }
      else if (*(_WORD *)a1 == 29539 && *(unsigned char *)(a1 + 2) == 114)
      {
        uint64_t result = 9;
      }
      else
      {
        if (*(_WORD *)a1 != 28001 || *(unsigned char *)(a1 + 2) != 100) {
          goto LABEL_53;
        }
        uint64_t result = 11;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x69656373:
LABEL_54:
          uint64_t result = 3;
          break;
        case 0x6173656D:
          uint64_t result = 12;
          break;
        case 0x65737573:
          uint64_t result = 13;
          break;
        default:
          goto LABEL_53;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1819308129 || *(unsigned char *)(a1 + 4) != 101) {
        goto LABEL_53;
      }
      uint64_t result = 1;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1684633198 && *(_WORD *)(a1 + 4) == 24937)
      {
        uint64_t result = 8;
      }
      else
      {
        if (*(_DWORD *)a1 != 1769109869 || *(_WORD *)(a1 + 4) != 25697) {
          goto LABEL_53;
        }
        uint64_t result = 10;
      }
      break;
    default:
LABEL_53:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t parseOS(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 1851879009 && *(_WORD *)(a1 + 4) == 29537) {
      return 1;
    }
    if (a2 >= 8 && *(void *)a1 == 0x69626164756F6C63) {
      return 2;
    }
    if (*(_DWORD *)a1 == 2003984740 && *(_WORD *)(a1 + 4) == 28265) {
      return 3;
    }
    if (a2 >= 9)
    {
      if (*(void *)a1 == 0x6C666E6F67617264 && *(unsigned char *)(a1 + 8) == 121) {
        return 4;
      }
    }
    else if (a2 < 7)
    {
      if (*(_WORD *)a1 != 28521 || *(unsigned char *)(a1 + 2) != 115) {
        goto LABEL_45;
      }
      return 7;
    }
    if (*(_DWORD *)a1 == 1701147238 && *(_DWORD *)(a1 + 3) == 1685283429) {
      return 5;
    }
    if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776) {
      return 6;
    }
  }
  else if (a2 < 3)
  {
    return 0;
  }
  if (*(_WORD *)a1 == 28521 && *(unsigned char *)(a1 + 2) == 115) {
    return 7;
  }
  if (a2 >= 8)
  {
    if (*(void *)a1 == 0x647362656572666BLL) {
      return 8;
    }
  }
  else if (a2 < 5)
  {
    goto LABEL_49;
  }
LABEL_45:
  if (*(_DWORD *)a1 == 1970170220 && *(unsigned char *)(a1 + 4) == 120) {
    return 9;
  }
LABEL_49:
  if (*(_WORD *)a1 == 30316 && *(unsigned char *)(a1 + 2) == 50) {
    return 10;
  }
  if (a2 >= 5)
  {
    if (*(_DWORD *)a1 == 1868783981 && *(unsigned char *)(a1 + 4) == 115) {
      return 11;
    }
    if (a2 >= 6)
    {
      if (*(_DWORD *)a1 == 1651795310 && *(_WORD *)(a1 + 4) == 25715) {
        return 12;
      }
      if (a2 >= 7)
      {
        if (*(_DWORD *)a1 == 1852141679 && *(_DWORD *)(a1 + 3) == 1685283438) {
          return 13;
        }
        if (*(_DWORD *)a1 == 1634496371 && *(_DWORD *)(a1 + 3) == 1936290401) {
          return 14;
        }
      }
    }
    if (*(_DWORD *)a1 == 862873975 && *(unsigned char *)(a1 + 4) == 50) {
      return 15;
    }
    if (a2 >= 7 && *(_DWORD *)a1 == 1684957559 && *(_DWORD *)(a1 + 3) == 1937207140) {
      return 15;
    }
    if (*(_WORD *)a1 != 28538 || *(unsigned char *)(a1 + 2) != 115)
    {
      if (*(_DWORD *)a1 == 1802068328 && *(unsigned char *)(a1 + 4) == 117) {
        return 17;
      }
      if (*(_DWORD *)a1 == 1768843629 && *(unsigned char *)(a1 + 4) == 120) {
        return 18;
      }
      if (*(_DWORD *)a1 == 1835365490 && *(unsigned char *)(a1 + 4) == 115) {
        return 19;
      }
      goto LABEL_59;
    }
    return 16;
  }
  if (*(_WORD *)a1 == 28538 && *(unsigned char *)(a1 + 2) == 115) {
    return 16;
  }
  if (a2 != 4)
  {
    if (*(_WORD *)a1 != 26977 || *(unsigned char *)(a1 + 2) != 120) {
      goto LABEL_131;
    }
    return 21;
  }
LABEL_59:
  if (*(_DWORD *)a1 == 1818452334) {
    return 20;
  }
  if (*(_WORD *)a1 == 26977 && *(unsigned char *)(a1 + 2) == 120) {
    return 21;
  }
  if (*(_DWORD *)a1 == 1633973603) {
    return 22;
  }
  if (*(_DWORD *)a1 == 1818457710) {
    return 23;
  }
  if (a2 >= 6 && *(_DWORD *)a1 == 1751412065 && *(_WORD *)(a1 + 4) == 24947) {
    return 24;
  }
LABEL_131:
  if (*(_WORD *)a1 == 29552 && *(unsigned char *)(a1 + 2) == 52) {
    return 25;
  }
  if (*(_WORD *)a1 == 29552 && *(unsigned char *)(a1 + 2) == 53) {
    return 26;
  }
  if (a2 >= 8)
  {
    if (*(void *)a1 == 0x75636D6169666C65) {
      return 27;
    }
  }
  else if (a2 < 4)
  {
    return 0;
  }
  if (*(_DWORD *)a1 == 1936684660) {
    return 28;
  }
  if (a2 < 7) {
    goto LABEL_153;
  }
  if (*(_DWORD *)a1 == 1668571511 && *(_DWORD *)(a1 + 3) == 1936681059) {
    return 29;
  }
  if (a2 >= 8)
  {
    if (*(void *)a1 == 0x736F656764697262) {
      return 30;
    }
    if (a2 >= 9)
    {
      if (*(void *)a1 == 0x696B726576697264 && *(unsigned char *)(a1 + 8) == 116) {
        return 31;
      }
LABEL_153:
      if (*(_DWORD *)a1 != 1936683640)
      {
        if (a2 < 5) {
          goto LABEL_200;
        }
        if (*(_DWORD *)a1 != 1869636979 || *(unsigned char *)(a1 + 4) != 115)
        {
          if (a2 < 6) {
            goto LABEL_200;
          }
          if (*(_DWORD *)a1 != 1634952557 || *(_WORD *)(a1 + 4) != 25651)
          {
            if (a2 < 7) {
              goto LABEL_192;
            }
            goto LABEL_188;
          }
          return 34;
        }
        return 33;
      }
      return 32;
    }
  }
  if (*(_DWORD *)a1 == 1936683640) {
    return 32;
  }
  if (*(_DWORD *)a1 == 1869636979 && *(unsigned char *)(a1 + 4) == 115) {
    return 33;
  }
  if (*(_DWORD *)a1 == 1634952557 && *(_WORD *)(a1 + 4) == 25651) {
    return 34;
  }
LABEL_188:
  if (*(_DWORD *)a1 == 1953394531 && *(_DWORD *)(a1 + 3) == 1768647028) {
    return 35;
  }
LABEL_192:
  if (*(_DWORD *)a1 == 1885629793 && *(_WORD *)(a1 + 4) == 27745) {
    return 36;
  }
  if (*(_DWORD *)a1 == 1836213608 && *(_WORD *)(a1 + 4) == 29801) {
    return 37;
  }
LABEL_200:
  if (*(_DWORD *)a1 == 1685222760) {
    return 38;
  }
  if (*(_DWORD *)a1 == 1769169271) {
    return 39;
  }
  if (a2 >= 0xA)
  {
    if (*(void *)a1 == 0x7470697263736D65 && *(_WORD *)(a1 + 8) == 28261) {
      return 40;
    }
    if (a2 >= 0xB && *(void *)a1 == 0x6F6D726564616873 && *(void *)(a1 + 3) == 0x6C65646F6D726564) {
      return 41;
    }
  }
  else if (a2 < 6)
  {
    return 0;
  }
  if (*(_DWORD *)a1 ^ 0x6574696C | *(unsigned __int16 *)(a1 + 4) ^ 0x736F) {
    return 0;
  }
  else {
    return 42;
  }
}

uint64_t parseEnvironment(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 1768055141 && *(_WORD *)(a1 + 4) == 26216) {
      return 13;
    }
  }
  else if (a2 < 4)
  {
    if (a2 != 3) {
      return 0;
    }
    goto LABEL_4;
  }
  if (*(_DWORD *)a1 == 1768055141) {
    return 12;
  }
  if (a2 >= 9)
  {
    if (*(void *)a1 == 0x336E696261756E67 && *(unsigned char *)(a1 + 8) == 50) {
      return 2;
    }
    if (*(void *)a1 == 0x3436696261756E67) {
      return 3;
    }
    if (*(void *)a1 == 0x6869626165756E67 && *(unsigned char *)(a1 + 8) == 102) {
      return 5;
    }
    goto LABEL_42;
  }
  if (a2 == 8)
  {
    if (*(void *)a1 == 0x3436696261756E67) {
      return 3;
    }
    goto LABEL_42;
  }
  if (a2 >= 7)
  {
LABEL_42:
    if (*(_DWORD *)a1 == 1702194791 && *(_DWORD *)(a1 + 3) == 1768055141) {
      return 4;
    }
    goto LABEL_46;
  }
  if (a2 != 6)
  {
    if (a2 < 5) {
      goto LABEL_4;
    }
    if (*(_DWORD *)a1 != 1937075815 || *(unsigned char *)(a1 + 4) != 102) {
      goto LABEL_4;
    }
    return 8;
  }
LABEL_46:
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 12851) {
    return 6;
  }
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 13366) {
    return 7;
  }
  if (*(_DWORD *)a1 == 1937075815 && *(unsigned char *)(a1 + 4) == 102) {
    return 8;
  }
  if (*(_DWORD *)a1 == 2020961895 && *(_WORD *)(a1 + 4) == 12851) {
    return 9;
  }
  if (a2 >= 9 && *(void *)a1 == 0x33706C695F756E67 && *(unsigned char *)(a1 + 8) == 50) {
    return 10;
  }
  if (*(_DWORD *)a1 == 1701080931 && *(_WORD *)(a1 + 4) == 13873) {
    return 11;
  }
LABEL_4:
  if (*(_WORD *)a1 == 28263 && *(unsigned char *)(a1 + 2) == 117) {
    return 1;
  }
  if (a2 < 7)
  {
    if (a2 < 4) {
      return 0;
    }
    goto LABEL_97;
  }
  if (*(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410) {
    return 14;
  }
  if (a2 >= 0xA)
  {
    if (*(void *)a1 == 0x696261656C73756DLL && *(_WORD *)(a1 + 8) == 26216) {
      return 17;
    }
    goto LABEL_92;
  }
  if (a2 >= 8)
  {
LABEL_92:
    if (*(void *)a1 == 0x696261656C73756DLL) {
      return 16;
    }
  }
  if (*(_DWORD *)a1 == 1819506029 && *(_DWORD *)(a1 + 3) == 842233964) {
    return 18;
  }
LABEL_97:
  if (*(_DWORD *)a1 == 1819506029) {
    return 15;
  }
  if (*(_DWORD *)a1 == 1668707181) {
    return 19;
  }
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1851880553 && *(_DWORD *)(a1 + 3) == 1836411246) {
      return 20;
    }
    if (*(_DWORD *)a1 != 1852275043 || *(_WORD *)(a1 + 4) != 29557)
    {
      if (*(_DWORD *)a1 == 1701998435 && *(_DWORD *)(a1 + 3) == 1919705957) {
        return 22;
      }
      if (a2 >= 9 && *(void *)a1 == 0x6F74616C756D6973 && *(unsigned char *)(a1 + 8) == 114) {
        return 23;
      }
      goto LABEL_127;
    }
    return 21;
  }
  if (a2 != 6)
  {
    if (a2 < 5) {
      goto LABEL_150;
    }
    if (*(_DWORD *)a1 != 1702390128 || *(unsigned char *)(a1 + 4) != 108) {
      goto LABEL_150;
    }
    return 25;
  }
  if (*(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557) {
    return 21;
  }
LABEL_127:
  if (*(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978) {
    return 24;
  }
  if (*(_DWORD *)a1 == 1702390128 && *(unsigned char *)(a1 + 4) == 108) {
    return 25;
  }
  if (*(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821) {
    return 26;
  }
  if (a2 >= 8 && *(void *)a1 == 0x797274656D6F6567) {
    return 27;
  }
LABEL_150:
  if (*(_DWORD *)a1 == 1819047272) {
    return 28;
  }
  if (a2 < 6) {
    goto LABEL_152;
  }
  if (*(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265) {
    return 29;
  }
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1702131056) {
      return 30;
    }
    if (*(_DWORD *)a1 == 1919052140 && *(_DWORD *)(a1 + 3) == 2037539186) {
      return 31;
    }
    if (a2 >= 0xD)
    {
      if (*(void *)a1 == 0x72656E6567796172 && *(void *)(a1 + 5) == 0x6E6F69746172656ELL) {
        return 32;
      }
    }
    else if (a2 != 12)
    {
      goto LABEL_210;
    }
    if (*(void *)a1 == 0x6365737265746E69 && *(_DWORD *)(a1 + 8) == 1852795252) {
      return 33;
    }
LABEL_210:
    if (*(_DWORD *)a1 != 1752788577 || *(_WORD *)(a1 + 4) != 29801)
    {
      if (a2 >= 0xA && *(void *)a1 == 0x68747365736F6C63 && *(_WORD *)(a1 + 8) == 29801) {
        return 35;
      }
LABEL_152:
      if (*(_DWORD *)a1 != 1936943469)
      {
        if (a2 >= 8 && *(void *)a1 == 0x656C62616C6C6163) {
          return 37;
        }
        if (*(_DWORD *)a1 != 1752393069)
        {
          if (a2 >= 0xD && *(void *)a1 == 0x636966696C706D61 && *(void *)(a1 + 5) == 0x6E6F697461636966) {
            return 39;
          }
          goto LABEL_180;
        }
        return 38;
      }
      return 36;
    }
    return 34;
  }
  if (*(_DWORD *)a1 == 1752788577 && *(_WORD *)(a1 + 4) == 29801) {
    return 34;
  }
  if (*(_DWORD *)a1 == 1936943469) {
    return 36;
  }
  if (*(_DWORD *)a1 == 1752393069) {
    return 38;
  }
LABEL_180:
  if (*(_DWORD *)a1 != 1936681071) {
    return 0;
  }
  return 40;
}

uint64_t parseFormat(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5)
  {
    if (*(_DWORD *)(a1 + a2 - 5) == 1718575992 && *(unsigned char *)(a1 + a2 - 1) == 102) {
      return 8;
    }
  }
  else if (a2 != 4)
  {
    if (a2 < 3) {
      return 0;
    }
    if (*(_WORD *)a1 != 27749 || *(unsigned char *)(a1 + 2) != 102) {
      return 0;
    }
    return 3;
  }
  uint64_t v4 = a1 + a2;
  if (*(_DWORD *)(a1 + a2 - 4) == 1717989219) {
    return 1;
  }
  if (*(_WORD *)(v4 - 3) == 27749 && *(unsigned char *)(v4 - 1) == 102) {
    return 3;
  }
  if (*(_DWORD *)(v4 - 4) == 1717989223) {
    return 4;
  }
  if (a2 < 5)
  {
    if (*(_DWORD *)(v4 - 4) != 1836278135) {
      return 0;
    }
    return 7;
  }
  if (*(_DWORD *)(v4 - 5) == 1751343469 && *(unsigned char *)(v4 - 1) == 111) {
    return 5;
  }
  if (*(_DWORD *)(v4 - 4) == 1836278135) {
    return 7;
  }
  if (*(_DWORD *)(v4 - 5) ^ 0x72697073 | *(unsigned __int8 *)(v4 - 1) ^ 0x76) {
    return 0;
  }
  else {
    return 6;
  }
}

void llvm::Triple::normalize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v89[8] = *MEMORY[0x263EF8340];
  v86[0] = a1;
  v86[1] = a2;
  uint64_t v87 = v89;
  uint64_t v88 = 0x400000000;
  llvm::StringRef::split((unsigned int *)v86, (unsigned int *)&v87, 45, -1, 1);
  __int16 v77 = a3;
  if (!v88)
  {
    int v4 = 0;
    goto LABEL_6;
  }
  int v4 = parseArch(*(void *)v87, *((void *)v87 + 1));
  unsigned int v5 = v88;
  if (v88 < 2)
  {
LABEL_6:
    int v8 = 0;
    int v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = v87;
  int v7 = parseVendor(*((void *)v87 + 2), *((void *)v87 + 3));
  if (v5 == 2)
  {
    int v8 = 0;
LABEL_7:
    int v9 = 0;
    unint64_t v80 = 0;
    goto LABEL_8;
  }
  uint64_t v56 = v6[4];
  unint64_t v57 = v6[5];
  int v9 = parseOS(v56, v57);
  if (v57 >= 6)
  {
    BOOL v58 = *(_DWORD *)v56 == 2003269987 && *(_WORD *)(v56 + 4) == 28265;
  }
  else
  {
    BOOL v58 = 0;
    unint64_t v80 = 0;
    if (v57 != 5) {
      goto LABEL_147;
    }
  }
  BOOL v73 = *(_DWORD *)v56 == 1735289197 && *(unsigned char *)(v56 + 4) == 119;
  unint64_t v80 = __PAIR64__(v58, v73);
LABEL_147:
  if (v5 < 4)
  {
    int v8 = 0;
    goto LABEL_8;
  }
  int v8 = parseEnvironment(v6[6], v6[7]);
  if (v5 == 4)
  {
LABEL_8:
    unsigned int v78 = 0;
    goto LABEL_9;
  }
  unsigned int v78 = parseFormat(v6[8], v6[9]);
LABEL_9:
  unint64_t v10 = 0;
  v85[0] = v4 != 0;
  v85[1] = v7 != 0;
  int v79 = v9;
  v85[2] = v9 != 0;
  v85[3] = v8 != 0;
LABEL_10:
  int v11 = v88;
  if (v85[v10]) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v88 == 0;
  }
  if (v12) {
    goto LABEL_81;
  }
  uint64_t v13 = 0;
  LODWORD(v14) = 0;
  while (2)
  {
    if (v14 <= 3 && v85[v13]) {
      goto LABEL_44;
    }
    int v15 = (uint64_t *)((char *)v87 + 16 * v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    switch((int)v10)
    {
      case 1:
        int v7 = parseVendor(*v15, v15[1]);
        if (!v7) {
          goto LABEL_44;
        }
        goto LABEL_48;
      case 2:
        int v79 = parseOS(*v15, v15[1]);
        if (v17 >= 6)
        {
          BOOL v18 = *(_DWORD *)v16 == 2003269987 && *(_WORD *)(v16 + 4) == 28265;
        }
        else
        {
          BOOL v18 = 0;
          unint64_t v80 = 0;
          if (v17 != 5) {
            goto LABEL_41;
          }
        }
        BOOL v23 = *(_DWORD *)v16 == 1735289197 && *(unsigned char *)(v16 + 4) == 119;
        unint64_t v80 = __PAIR64__(v18, v23);
LABEL_41:
        if (v79 || __PAIR64__(v80, 0) != (BYTE4(v80) & 1)) {
          goto LABEL_48;
        }
        int v79 = 0;
        unint64_t v80 = 0;
        goto LABEL_44;
      case 3:
        int v19 = parseEnvironment(*v15, v15[1]);
        if (v19)
        {
          int v8 = v19;
          goto LABEL_48;
        }
        unsigned int v20 = parseFormat(v16, v17);
        if (!v20)
        {
          unsigned int v78 = 0;
          int v8 = 0;
LABEL_44:
          uint64_t v13 = (v14 + 1);
          LODWORD(v14) = v13;
          if (v13 == v11) {
            goto LABEL_81;
          }
          continue;
        }
        int v8 = 0;
        unsigned int v78 = v20;
LABEL_48:
        if (v10 >= v14)
        {
          if (v10 > v14)
          {
            do
            {
              unsigned int v32 = v88;
              if (v88 > v14)
              {
                uint64_t v33 = 0;
                unsigned int v34 = v14;
                char v35 = &str_167_0;
                while (1)
                {
                  uint64_t v36 = v35;
                  uint64_t v37 = v33;
                  int v38 = (char *)v87 + 16 * v34;
                  char v35 = *(void **)v38;
                  uint64_t v33 = *((void *)v38 + 1);
                  *(void *)int v38 = v36;
                  *((void *)v38 + 1) = v37;
                  if (!v33) {
                    break;
                  }
                  if (v34 <= 3) {
                    int v39 = 3;
                  }
                  else {
                    int v39 = v34;
                  }
                  while (v39 != v34)
                  {
                    if (!v85[++v34]) {
                      goto LABEL_69;
                    }
                  }
                  unsigned int v34 = v39 + 1;
LABEL_69:
                  if (v32 <= v34)
                  {
                    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v87, (uint64_t)v35, v33);
                    break;
                  }
                }
              }
              if ((v14 + 1) > 4) {
                uint64_t v40 = (v14 + 1);
              }
              else {
                uint64_t v40 = 4;
              }
              while (v40 - 1 != v14)
              {
                unint64_t v14 = (v14 + 1);
                if (!v85[v14])
                {
                  LODWORD(v40) = v14;
                  goto LABEL_78;
                }
              }
              unint64_t v14 = v40;
LABEL_78:
              BOOL v41 = v14 >= v10;
              LODWORD(v14) = v40;
            }
            while (!v41);
          }
        }
        else
        {
          unint64_t v24 = (uint64_t *)((char *)v87 + 16 * v13);
          uint64_t v26 = *v24;
          uint64_t v25 = v24[1];
          uint64_t *v24 = (uint64_t)&str_167_0;
          v24[1] = 0;
          if (v25)
          {
            unsigned int v27 = v10;
            do
            {
              uint64_t v28 = v27;
              if (v27 <= 3)
              {
                while (v85[v28])
                {
                  if (++v28 == 4)
                  {
                    unsigned int v27 = 4;
                    goto LABEL_56;
                  }
                }
                unsigned int v27 = v28;
              }
LABEL_56:
              int v29 = (uint64_t *)((char *)v87 + 16 * v28);
              uint64_t v30 = *v29;
              uint64_t v31 = v29[1];
              *int v29 = v26;
              v29[1] = v25;
              ++v27;
              uint64_t v25 = v31;
              uint64_t v26 = v30;
            }
            while (v31);
          }
        }
        v85[v10] = 1;
LABEL_81:
        if (++v10 != 4) {
          goto LABEL_10;
        }
        if (v88)
        {
          uint64_t v42 = 16 * v88;
          unint64_t v43 = (char *)v87 + 8;
          do
          {
            if (!*v43)
            {
              *(v43 - 1) = "unknown";
              void *v43 = 7;
            }
            v43 += 2;
            v42 -= 16;
          }
          while (v42);
        }
        memset(&__p, 0, sizeof(__p));
        if (v8 != 14)
        {
          char v46 = v77;
          if (v7 != 13 || v8 != 4) {
            goto LABEL_100;
          }
          std::string::size_type v44 = v87;
          int64x2_t v51 = "gnueabihf";
          uint64_t v52 = 9;
LABEL_99:
          v44[6] = v51;
          v44[7] = v52;
          goto LABEL_100;
        }
        std::string::size_type v44 = v87;
        unint64_t v45 = *((void *)v87 + 7);
        char v46 = v77;
        if (v45 < 0xB) {
          goto LABEL_100;
        }
        unint64_t v47 = (void *)*((void *)v87 + 6);
        if (*v47 != 0x6564696F72646E61 || *(void *)((char *)v47 + 3) != 0x6962616564696F72) {
          goto LABEL_100;
        }
        BOOL v49 = v45 > 0xB;
        unint64_t v50 = v45 - 11;
        if (!v49)
        {
          int64x2_t v51 = "android";
          uint64_t v52 = 7;
          goto LABEL_99;
        }
        __int16 v82 = 1283;
        v81[0] = "android";
        v81[2] = (char *)v47 + 11;
        v81[3] = v50;
        llvm::Twine::str((llvm::Twine *)v81, &v83);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v83;
        std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
        p_p = &__p;
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type size = v83.__r_.__value_.__l.__size_;
          p_p = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        uint64_t v76 = v87;
        *((void *)v87 + 6) = p_p;
        v76[7] = size;
LABEL_100:
        int v53 = v79;
        if (v79 == 15)
        {
          llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v87, 4uLL);
          uint64_t v54 = v87;
          *((void *)v87 + 4) = "windows";
          v54[5] = 7;
          int v53 = 15;
          if (!v8)
          {
            if (v78 <= 1)
            {
              v54[6] = "msvc";
              v54[7] = 4;
              goto LABEL_123;
            }
            uint64_t v59 = (int)v78 - 2;
            uint64_t v55 = qword_261EA7BB8[v59];
            v54[6] = off_2655AF900[(int)v59];
LABEL_112:
            v54[7] = v55;
            int v53 = v79;
          }
        }
        else
        {
          if (v80)
          {
            llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v87, 4uLL);
            uint64_t v54 = v87;
            *((void *)v87 + 4) = "windows";
            v54[5] = 7;
            v54[6] = "gnu";
            uint64_t v55 = 3;
            goto LABEL_112;
          }
          if ((v80 & 0x100000000) != 0)
          {
            llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v87, 4uLL);
            uint64_t v54 = v87;
            *((void *)v87 + 4) = "windows";
            v54[5] = 7;
            v54[6] = "cygnus";
            uint64_t v55 = 6;
            goto LABEL_112;
          }
        }
        BOOL v61 = v53 == 15 && v8 != 0;
        if (((v80 | HIDWORD(v80) | v61) & 1) != 0 && v78 > 1)
        {
          llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v87, 5uLL);
          uint64_t v62 = (int)v78 - 2;
          uint64_t v63 = qword_261EA7BB8[v62];
          uint64_t v54 = v87;
          *((void *)v87 + 8) = off_2655AF900[(int)v62];
          v54[9] = v63;
        }
        else
        {
          uint64_t v54 = v87;
        }
LABEL_123:
        uint64_t v64 = v88;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (v64)
        {
          uint64_t v65 = 0;
          std::string::size_type v66 = v64 - 1;
          uint64_t v67 = (char *)&v54[2 * v64];
          do
          {
            v66 += v54[v65 + 1];
            v65 += 2;
          }
          while (2 * v64 != v65);
          std::string::reserve(v46, v66);
          std::string::append(v46, (const std::string::value_type *)*v54, v54[1]);
          if (v64 != 1)
          {
            long long v68 = (char *)(v54 + 2);
            do
            {
              std::string::append(v46, "-", 1uLL);
              uint64_t v69 = *(const std::string::value_type **)v68;
              std::string::size_type v70 = *((void *)v68 + 1);
              v68 += 16;
              std::string::append(v46, v69, v70);
            }
            while (v68 != v67);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v87 != v89) {
          free(v87);
        }
        return;
      default:
        if (parseArch(*v15, v15[1])) {
          goto LABEL_48;
        }
        int v11 = v88;
        goto LABEL_44;
    }
  }
}

uint64_t llvm::Triple::getArchName(llvm::Triple *this)
{
  int v1 = *((char *)this + 23);
  BOOL v2 = v1 < 0;
  BOOL v3 = *(llvm::Triple **)this;
  if (v1 >= 0) {
    BOOL v3 = this;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if (v2) {
    uint64_t v4 = *((void *)this + 1);
  }
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  char v8 = 45;
  llvm::StringRef::split(v6, &v8, 1uLL, (uint64_t)&v7);
  return v7;
}

char *llvm::Triple::getArchName(uint64_t a1, int a2, int a3)
{
  switch(a2)
  {
    case 16:
      if (a3 != 38) {
        goto LABEL_15;
      }
      uint64_t result = "mipsisa32r6";
      break;
    case 17:
      if (a3 != 38) {
        goto LABEL_15;
      }
      uint64_t result = "mipsisa32r6el";
      break;
    case 18:
      if (a3 != 38) {
        goto LABEL_15;
      }
      uint64_t result = "mipsisa64r6";
      break;
    case 19:
      if (a3 != 38) {
        goto LABEL_15;
      }
      uint64_t result = "mipsisa64r6el";
      break;
    default:
      if (a2 == 3 && a3 == 34) {
        uint64_t result = "arm64ec";
      }
      else {
LABEL_15:
      }
        uint64_t result = llvm::Triple::getArchTypeName(a2);
      break;
  }
  return result;
}

uint64_t llvm::Triple::getVendorName(llvm::Triple *this)
{
  int v1 = *((char *)this + 23);
  BOOL v2 = v1 < 0;
  BOOL v3 = *(llvm::Triple **)this;
  if (v1 >= 0) {
    BOOL v3 = this;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if (v2) {
    uint64_t v4 = *((void *)this + 1);
  }
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)&v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  return v7;
}

uint64_t llvm::Triple::getOSName(llvm::Triple *this)
{
  int v1 = *((char *)this + 23);
  BOOL v2 = v1 < 0;
  BOOL v3 = *(llvm::Triple **)this;
  if (v1 >= 0) {
    BOOL v3 = this;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if (v2) {
    uint64_t v4 = *((void *)this + 1);
  }
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)&v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  return v7;
}

uint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  int v1 = *((char *)this + 23);
  BOOL v2 = v1 < 0;
  BOOL v3 = *(llvm::Triple **)this;
  if (v1 >= 0) {
    BOOL v3 = this;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if (v2) {
    uint64_t v4 = *((void *)this + 1);
  }
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  return v8;
}

uint64_t llvm::Triple::getOSAndEnvironmentName(llvm::Triple *this)
{
  int v1 = *((char *)this + 23);
  BOOL v2 = v1 < 0;
  BOOL v3 = *(llvm::Triple **)this;
  if (v1 >= 0) {
    BOOL v3 = this;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if (v2) {
    uint64_t v4 = *((void *)this + 1);
  }
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)v7);
  long long v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  return v8;
}

unint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  OSName = (char *)llvm::Triple::getOSName(this);
  unint64_t v4 = v3;
  unsigned int v5 = *((_DWORD *)this + 9);
  OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)v5);
  if (v4 >= v7 && ((size_t v8 = v7) == 0 || !memcmp(OSName, OSTypeName, v7)))
  {
    if (v4 >= v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v4;
    }
    OSName += v12;
    v4 -= v12;
  }
  else if (v5 == 11 && v4 >= 5 && *(_DWORD *)OSName == 1868783981 && OSName[4] == 115)
  {
    OSName += 5;
    v4 -= 5;
  }
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  llvm::VersionTuple::tryParse(&v15, (unsigned __int8 *)OSName, v4);
  unint64_t v13 = v15;
  if (v16 < 0) {
    unint64_t v13 = v15 | 0x8000000000000000;
  }
  if (*((_DWORD *)this + 9) == 33 && v13 == 0) {
    return v13 & 0x7FFFFFFF00000000 | 0x8000000000000001;
  }
  else {
    return v13;
  }
}

double llvm::Triple::setTriple(llvm::Triple *this, const llvm::Twine *a2)
{
  llvm::Triple::Triple(&v4, a2);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = v4;
  double result = *(double *)&v5;
  *(_OWORD *)((char *)this + 24) = v5;
  *((void *)this + 5) = v6;
  return result;
}

void llvm::Triple::setArchName(llvm::Triple *a1, unsigned char *a2, uint64_t a3)
{
  void v12[8] = *MEMORY[0x263EF8340];
  unint64_t v10 = v12;
  long long v11 = xmmword_261E8ACE0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, a2, &a2[a3]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, "-", "");
  VendorName = (unsigned char *)llvm::Triple::getVendorName(a1);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, VendorName, &VendorName[v5]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, "-", "");
  OSAndEnvironmentName = (unsigned char *)llvm::Triple::getOSAndEnvironmentName(a1);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, OSAndEnvironmentName, &OSAndEnvironmentName[v7]);
  __int16 v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  llvm::Triple::setTriple(a1, (const llvm::Twine *)v8);
  if (v10 != v12) {
    free(v10);
  }
}

double llvm::Triple::setOSName(llvm::Triple *a1, uint64_t a2, uint64_t a3)
{
  llvm::Triple::getEnvironmentName(a1);
  if (v6)
  {
    __int16 v15 = 773;
    v14[0] = llvm::Triple::getArchName(a1);
    v14[1] = v7;
    v14[2] = "-";
    v16[0] = v14;
    uint64_t v16[2] = llvm::Triple::getVendorName(a1);
    v16[3] = v8;
    __int16 v17 = 1282;
    v18[0] = v16;
    int v19 = "-";
    __int16 v20 = 770;
    v21[0] = v18;
    uint64_t VendorName = a2;
    uint64_t v23 = a3;
    __int16 v24 = 1282;
    v25[0] = v21;
    uint64_t v26 = "-";
    __int16 v27 = 770;
    uint64_t EnvironmentName = llvm::Triple::getEnvironmentName(a1);
    uint64_t v28 = v25;
    uint64_t v29 = EnvironmentName;
    uint64_t v30 = v10;
  }
  else
  {
    __int16 v20 = 773;
    v18[0] = llvm::Triple::getArchName(a1);
    v18[1] = v11;
    int v19 = "-";
    v21[0] = v18;
    uint64_t VendorName = llvm::Triple::getVendorName(a1);
    uint64_t v23 = v12;
    __int16 v24 = 1282;
    v25[0] = v21;
    uint64_t v26 = "-";
    __int16 v27 = 770;
    uint64_t v28 = v25;
    uint64_t v29 = a2;
    uint64_t v30 = a3;
  }
  __int16 v31 = 1282;
  return llvm::Triple::setTriple(a1, (const llvm::Twine *)&v28);
}

double llvm::Triple::setEnvironmentName(llvm::Triple *a1, uint64_t a2, uint64_t a3)
{
  __int16 v12 = 773;
  v11[0] = llvm::Triple::getArchName(a1);
  v11[1] = v6;
  void v11[2] = "-";
  v13[0] = v11;
  uint64_t v13[2] = llvm::Triple::getVendorName(a1);
  void v13[3] = v7;
  __int16 v14 = 1282;
  v15[0] = v13;
  uint64_t v15[2] = "-";
  __int16 v16 = 770;
  uint64_t OSName = llvm::Triple::getOSName(a1);
  v17[0] = v15;
  void v17[2] = OSName;
  void v17[3] = v9;
  __int16 v18 = 1282;
  v19[0] = v17;
  void v19[2] = "-";
  __int16 v20 = 770;
  v21[0] = v19;
  void v21[2] = a2;
  v21[3] = a3;
  __int16 v22 = 1282;
  return llvm::Triple::setTriple(a1, (const llvm::Twine *)v21);
}

double llvm::Triple::setObjectFormat(llvm::Triple *a1, int a2)
{
  int v4 = *((_DWORD *)a1 + 10);
  if (v4)
  {
    v13[0] = llvm::Triple::getEnvironmentTypeName(v4);
    v13[1] = v5;
    uint64_t v13[2] = "-";
    __int16 v14 = 773;
    uint64_t v6 = qword_261EA7BF0[a2];
    uint64_t v7 = (uint64_t)*(&off_2655AF938 + a2);
    v15[0] = v13;
    uint64_t v15[2] = v7;
    void v15[3] = v6;
    __int16 v16 = 1282;
    llvm::Twine::str((llvm::Twine *)v15, &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v17;
    }
    else {
      uint64_t v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    double result = llvm::Triple::setEnvironmentName(a1, (uint64_t)v8, size);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v11 = qword_261EA7BF0[a2];
    uint64_t v12 = (uint64_t)*(&off_2655AF938 + a2);
    return llvm::Triple::setEnvironmentName(a1, v12, v11);
  }
  return result;
}

uint64_t getArchPointerBitWidth(int a1)
{
  return dword_261EA7C38[a1];
}

void llvm::Triple::get64BitArchVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)(a2 + 16) = *((void *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(void *)(a2 + 40) = *((void *)this + 5);
  int v4 = "unknown";
  uint64_t v5 = 7;
  switch(*((_DWORD *)this + 6))
  {
    case 0:
    case 6:
    case 7:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xF:
    case 0x14:
    case 0x19:
    case 0x1F:
    case 0x21:
    case 0x22:
    case 0x27:
    case 0x28:
    case 0x35:
    case 0x36:
    case 0x37:
      goto LABEL_35;
    case 1:
    case 5:
    case 0x23:
      int v4 = "aarch64";
      goto LABEL_31;
    case 2:
    case 0x24:
      int v4 = "aarch64_be";
      uint64_t v5 = 10;
      goto LABEL_35;
    case 0xD:
      int v4 = "loongarch64";
      goto LABEL_21;
    case 0x10:
      BOOL v6 = *((_DWORD *)this + 7) == 38;
      if (*((_DWORD *)this + 7) == 38) {
        uint64_t v5 = 11;
      }
      else {
        uint64_t v5 = 6;
      }
      uint64_t v7 = "mips64";
      uint64_t v8 = "mipsisa64r6";
      goto LABEL_16;
    case 0x11:
      BOOL v6 = *((_DWORD *)this + 7) == 38;
      if (*((_DWORD *)this + 7) == 38) {
        uint64_t v5 = 13;
      }
      else {
        uint64_t v5 = 8;
      }
      uint64_t v7 = "mips64el";
      uint64_t v8 = "mipsisa64r6el";
LABEL_16:
      if (v6) {
        int v4 = (char *)v8;
      }
      else {
        int v4 = (char *)v7;
      }
      goto LABEL_35;
    case 0x15:
      int v4 = "powerpc64";
      uint64_t v5 = 9;
      goto LABEL_35;
    case 0x16:
      int v4 = "powerpc64le";
LABEL_21:
      uint64_t v5 = 11;
      goto LABEL_35;
    case 0x1B:
      int v4 = "riscv64";
      goto LABEL_31;
    case 0x1D:
      int v4 = "sparcv9";
      goto LABEL_31;
    case 0x25:
      int v4 = "x86_64";
      goto LABEL_33;
    case 0x29:
      int v4 = "nvptx64";
      goto LABEL_31;
    case 0x2B:
      int v4 = "le64";
      uint64_t v5 = 4;
      goto LABEL_35;
    case 0x2D:
      int v4 = "amdil64";
      goto LABEL_31;
    case 0x2F:
      int v4 = "hsail64";
      goto LABEL_31;
    case 0x31:
      int v4 = "spir64";
      goto LABEL_33;
    case 0x33:
      int v4 = "spirv64";
LABEL_31:
      uint64_t v5 = 7;
      goto LABEL_35;
    case 0x38:
      int v4 = "wasm64";
LABEL_33:
      uint64_t v5 = 6;
      goto LABEL_35;
    case 0x3A:
      int v4 = "renderscript64";
      uint64_t v5 = 14;
LABEL_35:
      llvm::Triple::setArchName((llvm::Triple *)a2, v4, v5);
      break;
    default:
      return;
  }
}

uint64_t llvm::Triple::isMacOSXVersionLT(llvm::Triple *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*((_DWORD *)this + 9) != 11)
  {
    if (a2 == 10)
    {
      a2 = a3 + 4;
      a3 = a4;
      LODWORD(a4) = 0;
    }
    else
    {
      a2 += 9;
    }
  }
  return llvm::Triple::isOSVersionLT(this, a2, a3, a4);
}

uint64_t llvm::Triple::isOSVersionLT(llvm::Triple *this, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (!a3)
  {
    unint64_t OSVersion = llvm::Triple::getOSVersion(this);
    uint64_t v15 = v8;
    unint64_t v9 = a2;
LABEL_6:
    unint64_t v12 = v9;
    uint64_t v13 = 0;
    return llvm::operator<(&OSVersion, &v12);
  }
  unint64_t v6 = a2 | (unint64_t)(a3 << 32);
  if (!a4)
  {
    unint64_t OSVersion = llvm::Triple::getOSVersion(this);
    uint64_t v15 = v10;
    unint64_t v9 = v6 | 0x8000000000000000;
    goto LABEL_6;
  }
  unint64_t OSVersion = llvm::Triple::getOSVersion(this);
  uint64_t v15 = v7;
  unint64_t v12 = v6 | 0x8000000000000000;
  uint64_t v13 = a4 | 0x80000000;
  return llvm::operator<(&OSVersion, &v12);
}

unint64_t llvm::Triple::getMinimumSupportedOSVersion(llvm::Triple *this)
{
  if (*((_DWORD *)this + 8) != 1 || *((_DWORD *)this + 6) != 3) {
    return 0;
  }
  unint64_t v1 = 0x800000000000000ELL;
  int v2 = *((_DWORD *)this + 9);
  if (v2 <= 27)
  {
    if (v2 != 7)
    {
      if (v2 == 11) {
        return 0x800000000000000BLL;
      }
      return 0;
    }
    if ((*((_DWORD *)this + 10) - 23) >= 2 && *((_DWORD *)this + 7) != 33) {
      return 0;
    }
  }
  else
  {
    switch(v2)
    {
      case 28:
        if (*((_DWORD *)this + 10) != 23)
        {
          uint64_t ArchName = llvm::Triple::getArchName(this);
          if (v4 != 6) {
            return 0;
          }
          if (*(_DWORD *)ArchName != 913142369 || *(_WORD *)(ArchName + 4) != 25908) {
            return 0;
          }
        }
        break;
      case 29:
        if (*((_DWORD *)this + 10) == 23) {
          return 0x8000000000000007;
        }
        else {
          return 0x8000000000000009;
        }
      case 31:
        return 0x8000000000000014;
      default:
        return 0;
    }
  }
  return v1;
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, int a8)
{
  uint64_t v13 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a8);
  uint64_t v14 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v13, a4, a5, a8);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v14, a6, a7, a8);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, int a13)
{
  uint64_t v17 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a13);
  uint64_t v18 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v17, a4, a5, a13);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v18, a6, a7, a9, a10, a11, a12, a13);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, const void *a13, uint64_t a14, const void *a15, uint64_t a16, int a17)
{
  uint64_t v19 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a17);
  uint64_t v20 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v19, a4, a5, a17);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v20, a6, a7, a9, a10, a11, a12, v21, a13, a14, a15, a16, a17);
}

uint64_t sub_261E88898()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t sub_261E888A8()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t sub_261E888B8()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t sub_261E888C8()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_261E888D8()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_261E888E8()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_261E888F8()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_261E88918()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_261E88928()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_261E88938()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_261E88948()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_261E88958()
{
  return MEMORY[0x270EF1A18]();
}

uint64_t sub_261E88968()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_261E88978()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_261E88988()
{
  return MEMORY[0x270F9D620]();
}

uint64_t sub_261E88998()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_261E889A8()
{
  return MEMORY[0x270F9D7C0]();
}

uint64_t sub_261E889B8()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t sub_261E889C8()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_261E889D8()
{
  return MEMORY[0x270FA1F18]();
}

uint64_t sub_261E889E8()
{
  return MEMORY[0x270FA1F48]();
}

uint64_t sub_261E889F8()
{
  return MEMORY[0x270FA1F50]();
}

uint64_t sub_261E88A18()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_261E88A28()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_261E88A38()
{
  return MEMORY[0x270F9E988]();
}

uint64_t sub_261E88A48()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_261E88A58()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_261E88A68()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_261E88A78()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_261E88A98()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_261E88AA8()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_261E88AB8()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_261E88AC8()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_261E88AD8()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_261E88AE8()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_261E88AF8()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_261E88B08()
{
  return MEMORY[0x270F9FC90]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x270ED7D10](buf, bufsize);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x270F98210](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x270F98398](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98500](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::string::~string(std::string *this)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x270F985E0](this, *(void *)&__ec.__val_, __ec.__cat_);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987B0]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x270F988E0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98918]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::detach(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E18](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __deregister_frame(const void *fde)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

void __register_frame(const void *fde)
{
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccdigest_init()
{
  return MEMORY[0x270ED8A48]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x270ED8A50]();
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x270ED8F50](*(void *)&a1, a2, a3);
}

uint64_t csops_audittoken()
{
  return MEMORY[0x270ED9158]();
}

int del_curterm(TERMINAL *a1)
{
  return MEMORY[0x270F9A0C0](a1);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

int dlclose(void *__handle)
{
  return MEMORY[0x270ED9618](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

void exit(int a1)
{
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int getpagesize(void)
{
  return MEMORY[0x270ED9CC8]();
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x270ED9D60](mhp, segname, sectname, size);
}

int isatty(int a1)
{
  return MEMORY[0x270ED9EF0](*(void *)&a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x270EDA168](*(void *)&error_value);
}

kern_return_t mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry)
{
  return MEMORY[0x270EDA180](*(void *)&target_task, size, offset, *(void *)&permission, object_handle, *(void *)&parent_entry);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x270EDA290](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x270EDA298](*(void *)&target, address, size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x270EDA528](a1);
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  return MEMORY[0x270EDA578](*(void *)&dfd, path, *(void *)&slen);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x270EDA5A8](__y, __x);
  return result;
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDA5C0](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_release(void *object)
{
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDAC50](a1, a2, *(void *)&a3);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

int pthread_sigmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x270EDB058](*(void *)&a1, a2, a3);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x270EDB170](a1, a2);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x270EDB2C8]();
}

TERMINAL *__cdecl set_curterm(TERMINAL *a1)
{
  return (TERMINAL *)MEMORY[0x270F9A0F0](a1);
}

int setupterm(char *a1, int a2, int *a3)
{
  return MEMORY[0x270F9A100](a1, *(void *)&a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

void sys_icache_invalidate(void *start, size_t len)
{
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x270EDB7C8](*(void *)&a1);
}

int tigetnum(char *a1)
{
  return MEMORY[0x270F9A130](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x270EDB998](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA58](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDBD18](objects, count);
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

void xpc_array_set_value(xpc_object_t xarray, size_t index, xpc_object_t value)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x270EDBE70]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x270EDBEA0](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x270EDBF90](bytes, length);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x270EDC018]();
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x270EDC060](xdict, key, length);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x270EDC0A8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x270EDC0B0](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x270EDC268]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x270EDC2B8](object);
}